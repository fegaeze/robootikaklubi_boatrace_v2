
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b274  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f4  0800b408  0800b408  0001b408  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b8fc  0800b8fc  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b8fc  0800b8fc  0001b8fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b904  0800b904  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b904  0800b904  0001b904  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b908  0800b908  0001b908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800b90c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
 10 .bss          000001ac  200001e0  200001e0  000201e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000038c  2000038c  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010451  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f05  00000000  00000000  00030661  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e40  00000000  00000000  00032568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d78  00000000  00000000  000333a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ce3d  00000000  00000000  00034120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001171e  00000000  00000000  00050f5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000adca2  00000000  00000000  0006267b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011031d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005418  00000000  00000000  00110370  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b3ec 	.word	0x0800b3ec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800b3ec 	.word	0x0800b3ec

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <togglePowerBtn>:


/*
 * Toggle Robot Start Button
 */
int togglePowerBtn(int powerBtnState) {
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
	if (powerBtnState) {
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d027      	beq.n	8001056 <togglePowerBtn+0x5e>
		block = 0;
 8001006:	4b19      	ldr	r3, [pc, #100]	; (800106c <togglePowerBtn+0x74>)
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
		if (!byteStream && buttonState) {
 800100c:	4b18      	ldr	r3, [pc, #96]	; (8001070 <togglePowerBtn+0x78>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d10c      	bne.n	800102e <togglePowerBtn+0x36>
 8001014:	4b17      	ldr	r3, [pc, #92]	; (8001074 <togglePowerBtn+0x7c>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d008      	beq.n	800102e <togglePowerBtn+0x36>
		  byteStream = 1;
 800101c:	4b14      	ldr	r3, [pc, #80]	; (8001070 <togglePowerBtn+0x78>)
 800101e:	2201      	movs	r2, #1
 8001020:	601a      	str	r2, [r3, #0]
		  buttonState = 0;
 8001022:	4b14      	ldr	r3, [pc, #80]	; (8001074 <togglePowerBtn+0x7c>)
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
		  return buttonState;
 8001028:	4b12      	ldr	r3, [pc, #72]	; (8001074 <togglePowerBtn+0x7c>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	e018      	b.n	8001060 <togglePowerBtn+0x68>
		} else if (!byteStream && !buttonState) {
 800102e:	4b10      	ldr	r3, [pc, #64]	; (8001070 <togglePowerBtn+0x78>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d10c      	bne.n	8001050 <togglePowerBtn+0x58>
 8001036:	4b0f      	ldr	r3, [pc, #60]	; (8001074 <togglePowerBtn+0x7c>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d108      	bne.n	8001050 <togglePowerBtn+0x58>
		  byteStream = 1;
 800103e:	4b0c      	ldr	r3, [pc, #48]	; (8001070 <togglePowerBtn+0x78>)
 8001040:	2201      	movs	r2, #1
 8001042:	601a      	str	r2, [r3, #0]
		  buttonState = 1;
 8001044:	4b0b      	ldr	r3, [pc, #44]	; (8001074 <togglePowerBtn+0x7c>)
 8001046:	2201      	movs	r2, #1
 8001048:	601a      	str	r2, [r3, #0]
		  return buttonState;
 800104a:	4b0a      	ldr	r3, [pc, #40]	; (8001074 <togglePowerBtn+0x7c>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	e007      	b.n	8001060 <togglePowerBtn+0x68>
		} else {
		  return buttonState;
 8001050:	4b08      	ldr	r3, [pc, #32]	; (8001074 <togglePowerBtn+0x7c>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	e004      	b.n	8001060 <togglePowerBtn+0x68>
		}
	} else {
		byteStream = 0;
 8001056:	4b06      	ldr	r3, [pc, #24]	; (8001070 <togglePowerBtn+0x78>)
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
		return buttonState;
 800105c:	4b05      	ldr	r3, [pc, #20]	; (8001074 <togglePowerBtn+0x7c>)
 800105e:	681b      	ldr	r3, [r3, #0]
	}
}
 8001060:	4618      	mov	r0, r3
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr
 800106c:	20000368 	.word	0x20000368
 8001070:	2000036c 	.word	0x2000036c
 8001074:	20000370 	.word	0x20000370

08001078 <ADC_Read>:
 * Read IR sensor value:
 * Update ADC channel config
 * Start, convert and read sensor value
 */
uint16_t ADC_Read(ADC_HandleTypeDef* hadc, uint8_t channel)
{
 8001078:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800107c:	b08c      	sub	sp, #48	; 0x30
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
 8001082:	460b      	mov	r3, r1
 8001084:	70fb      	strb	r3, [r7, #3]
  ADC_ChannelConfTypeDef sConfig;

  sConfig.Channel = channel;
 8001086:	78fb      	ldrb	r3, [r7, #3]
 8001088:	60fb      	str	r3, [r7, #12]
  sConfig.Rank = 1;
 800108a:	2301      	movs	r3, #1
 800108c:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800108e:	2300      	movs	r3, #0
 8001090:	617b      	str	r3, [r7, #20]

  HAL_ADC_ConfigChannel(hadc, &sConfig);
 8001092:	f107 030c 	add.w	r3, r7, #12
 8001096:	4619      	mov	r1, r3
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	f001 faf1 	bl	8002680 <HAL_ADC_ConfigChannel>

  HAL_ADC_Start(hadc);
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f001 f95c 	bl	800235c <HAL_ADC_Start>
  HAL_ADC_PollForConversion(hadc, 10);
 80010a4:	210a      	movs	r1, #10
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f001 fa0e 	bl	80024c8 <HAL_ADC_PollForConversion>

  uint64_t sum = 0;
 80010ac:	f04f 0200 	mov.w	r2, #0
 80010b0:	f04f 0300 	mov.w	r3, #0
 80010b4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  for (int i = 0; i < 3; i++) {
 80010b8:	2300      	movs	r3, #0
 80010ba:	627b      	str	r3, [r7, #36]	; 0x24
 80010bc:	e011      	b.n	80010e2 <ADC_Read+0x6a>
  	sum+= HAL_ADC_GetValue(hadc);
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f001 fad0 	bl	8002664 <HAL_ADC_GetValue>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2200      	movs	r2, #0
 80010c8:	461c      	mov	r4, r3
 80010ca:	4615      	mov	r5, r2
 80010cc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80010d0:	eb12 0804 	adds.w	r8, r2, r4
 80010d4:	eb43 0905 	adc.w	r9, r3, r5
 80010d8:	e9c7 890a 	strd	r8, r9, [r7, #40]	; 0x28
  for (int i = 0; i < 3; i++) {
 80010dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010de:	3301      	adds	r3, #1
 80010e0:	627b      	str	r3, [r7, #36]	; 0x24
 80010e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e4:	2b02      	cmp	r3, #2
 80010e6:	ddea      	ble.n	80010be <ADC_Read+0x46>
  }

  sum = sum / 3;
 80010e8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80010ec:	f04f 0203 	mov.w	r2, #3
 80010f0:	f04f 0300 	mov.w	r3, #0
 80010f4:	f7ff fdc8 	bl	8000c88 <__aeabi_uldivmod>
 80010f8:	4602      	mov	r2, r0
 80010fa:	460b      	mov	r3, r1
 80010fc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

  return sum;
 8001100:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
}
 8001102:	4618      	mov	r0, r3
 8001104:	3730      	adds	r7, #48	; 0x30
 8001106:	46bd      	mov	sp, r7
 8001108:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800110c <setInitialState>:
/*
 * Set Initial State:
 * Set speed to highest settings
 */
void setInitialState(uint8_t powerBtnState)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	4603      	mov	r3, r0
 8001114:	71fb      	strb	r3, [r7, #7]
	if (togglePowerBtn(powerBtnState) == 1) {
 8001116:	79fb      	ldrb	r3, [r7, #7]
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff ff6d 	bl	8000ff8 <togglePowerBtn>
 800111e:	4603      	mov	r3, r0
 8001120:	2b01      	cmp	r3, #1
 8001122:	d103      	bne.n	800112c <setInitialState+0x20>
	  setMotorSpeed(255, 255);
 8001124:	21ff      	movs	r1, #255	; 0xff
 8001126:	20ff      	movs	r0, #255	; 0xff
 8001128:	f000 f914 	bl	8001354 <setMotorSpeed>
	}
}
 800112c:	bf00      	nop
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	0000      	movs	r0, r0
	...

08001138 <getDistance>:
 * Then based on the IR sensor datasheet graph, we determine
 * an equation to get accurate distance levels in centimeters.
 */

float getDistance(float adcVal)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b086      	sub	sp, #24
 800113c:	af00      	add	r7, sp, #0
 800113e:	ed87 0a01 	vstr	s0, [r7, #4]
  float voltageVal = (3.3 * adcVal) / 4096;
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f7ff fa00 	bl	8000548 <__aeabi_f2d>
 8001148:	a334      	add	r3, pc, #208	; (adr r3, 800121c <getDistance+0xe4>)
 800114a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800114e:	f7ff fa53 	bl	80005f8 <__aeabi_dmul>
 8001152:	4602      	mov	r2, r0
 8001154:	460b      	mov	r3, r1
 8001156:	4610      	mov	r0, r2
 8001158:	4619      	mov	r1, r3
 800115a:	f04f 0200 	mov.w	r2, #0
 800115e:	4b2a      	ldr	r3, [pc, #168]	; (8001208 <getDistance+0xd0>)
 8001160:	f7ff fb74 	bl	800084c <__aeabi_ddiv>
 8001164:	4602      	mov	r2, r0
 8001166:	460b      	mov	r3, r1
 8001168:	4610      	mov	r0, r2
 800116a:	4619      	mov	r1, r3
 800116c:	f7ff fd3c 	bl	8000be8 <__aeabi_d2f>
 8001170:	4603      	mov	r3, r0
 8001172:	617b      	str	r3, [r7, #20]

  float max_distance = DISTANCE_MAX;
 8001174:	4b25      	ldr	r3, [pc, #148]	; (800120c <getDistance+0xd4>)
 8001176:	613b      	str	r3, [r7, #16]
  float min_distance = DISTANCE_MIN;
 8001178:	4b25      	ldr	r3, [pc, #148]	; (8001210 <getDistance+0xd8>)
 800117a:	60fb      	str	r3, [r7, #12]

  float distance = 23.4993 / powf(voltageVal, 1.7);
 800117c:	eddf 0a25 	vldr	s1, [pc, #148]	; 8001214 <getDistance+0xdc>
 8001180:	ed97 0a05 	vldr	s0, [r7, #20]
 8001184:	f009 fd60 	bl	800ac48 <powf>
 8001188:	ee10 3a10 	vmov	r3, s0
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff f9db 	bl	8000548 <__aeabi_f2d>
 8001192:	4602      	mov	r2, r0
 8001194:	460b      	mov	r3, r1
 8001196:	a11a      	add	r1, pc, #104	; (adr r1, 8001200 <getDistance+0xc8>)
 8001198:	e9d1 0100 	ldrd	r0, r1, [r1]
 800119c:	f7ff fb56 	bl	800084c <__aeabi_ddiv>
 80011a0:	4602      	mov	r2, r0
 80011a2:	460b      	mov	r3, r1
 80011a4:	4610      	mov	r0, r2
 80011a6:	4619      	mov	r1, r3
 80011a8:	f7ff fd1e 	bl	8000be8 <__aeabi_d2f>
 80011ac:	4603      	mov	r3, r0
 80011ae:	60bb      	str	r3, [r7, #8]

  distance -= DISTANCE_THRESHOLD;
 80011b0:	edd7 7a02 	vldr	s15, [r7, #8]
 80011b4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80011b8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80011bc:	edc7 7a02 	vstr	s15, [r7, #8]

  if(distance >= DISTANCE_MAX) {
 80011c0:	edd7 7a02 	vldr	s15, [r7, #8]
 80011c4:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001218 <getDistance+0xe0>
 80011c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011d0:	db01      	blt.n	80011d6 <getDistance+0x9e>
	  return max_distance;
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	e00b      	b.n	80011ee <getDistance+0xb6>
  } else if(distance <= DISTANCE_MIN) {
 80011d6:	edd7 7a02 	vldr	s15, [r7, #8]
 80011da:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80011de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011e6:	d801      	bhi.n	80011ec <getDistance+0xb4>
	  return min_distance;
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	e000      	b.n	80011ee <getDistance+0xb6>
  } else {
	  return distance;
 80011ec:	68bb      	ldr	r3, [r7, #8]
  }
}
 80011ee:	ee07 3a90 	vmov	s15, r3
 80011f2:	eeb0 0a67 	vmov.f32	s0, s15
 80011f6:	3718      	adds	r7, #24
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	f3af 8000 	nop.w
 8001200:	1ff2e48f 	.word	0x1ff2e48f
 8001204:	40377fd2 	.word	0x40377fd2
 8001208:	40b00000 	.word	0x40b00000
 800120c:	43160000 	.word	0x43160000
 8001210:	41200000 	.word	0x41200000
 8001214:	3fd9999a 	.word	0x3fd9999a
 8001218:	43160000 	.word	0x43160000
 800121c:	66666666 	.word	0x66666666
 8001220:	400a6666 	.word	0x400a6666

08001224 <calcMotorSpeed>:
 *
 * Formular:
 * https://stackoverflow.com/questions/5731863/mapping-a-numeric-range-onto-another
 * (output_end - output_start) / (input_end - input_start)
 */
float calcMotorSpeed(float dist_diff) {
 8001224:	b480      	push	{r7}
 8001226:	b085      	sub	sp, #20
 8001228:	af00      	add	r7, sp, #0
 800122a:	ed87 0a01 	vstr	s0, [r7, #4]
	float speed = MIN_SPEED + ((dist_diff / (DISTANCE_MAX - DISTANCE_MIN)) * (MAX_SPEED - MIN_SPEED));
 800122e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001232:	eddf 6a17 	vldr	s13, [pc, #92]	; 8001290 <calcMotorSpeed+0x6c>
 8001236:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800123a:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8001294 <calcMotorSpeed+0x70>
 800123e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001242:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001298 <calcMotorSpeed+0x74>
 8001246:	ee77 7a87 	vadd.f32	s15, s15, s14
 800124a:	edc7 7a03 	vstr	s15, [r7, #12]

	if(speed <= MIN_SPEED) {
 800124e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001252:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001298 <calcMotorSpeed+0x74>
 8001256:	eef4 7ac7 	vcmpe.f32	s15, s14
 800125a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800125e:	d801      	bhi.n	8001264 <calcMotorSpeed+0x40>
		return MIN_SPEED;
 8001260:	4b0e      	ldr	r3, [pc, #56]	; (800129c <calcMotorSpeed+0x78>)
 8001262:	e00b      	b.n	800127c <calcMotorSpeed+0x58>
	} else if (speed >= MAX_SPEED) {
 8001264:	edd7 7a03 	vldr	s15, [r7, #12]
 8001268:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80012a0 <calcMotorSpeed+0x7c>
 800126c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001270:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001274:	db01      	blt.n	800127a <calcMotorSpeed+0x56>
		return MAX_SPEED;
 8001276:	4b0b      	ldr	r3, [pc, #44]	; (80012a4 <calcMotorSpeed+0x80>)
 8001278:	e000      	b.n	800127c <calcMotorSpeed+0x58>
	} else {
		return speed;
 800127a:	68fb      	ldr	r3, [r7, #12]
	}
}
 800127c:	ee07 3a90 	vmov	s15, r3
 8001280:	eeb0 0a67 	vmov.f32	s0, s15
 8001284:	3714      	adds	r7, #20
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	430c0000 	.word	0x430c0000
 8001294:	43020000 	.word	0x43020000
 8001298:	42fa0000 	.word	0x42fa0000
 800129c:	42fa0000 	.word	0x42fa0000
 80012a0:	437f0000 	.word	0x437f0000
 80012a4:	437f0000 	.word	0x437f0000

080012a8 <steerBoat>:
 * if turn amount is negative, the boat needs to turn right
 * Constraint: 0 <= turn_amount <= 140
 */

void steerBoat(float left_dist, float front_dist, float right_dist)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b086      	sub	sp, #24
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	ed87 0a03 	vstr	s0, [r7, #12]
 80012b2:	edc7 0a02 	vstr	s1, [r7, #8]
 80012b6:	ed87 1a01 	vstr	s2, [r7, #4]
	float speed;
	float dist_diff = left_dist - right_dist;
 80012ba:	ed97 7a03 	vldr	s14, [r7, #12]
 80012be:	edd7 7a01 	vldr	s15, [r7, #4]
 80012c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012c6:	edc7 7a05 	vstr	s15, [r7, #20]

	if(front_dist > 20) {
 80012ca:	edd7 7a02 	vldr	s15, [r7, #8]
 80012ce:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80012d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012da:	dd02      	ble.n	80012e2 <steerBoat+0x3a>
		speed = MAX_SPEED;
 80012dc:	4b1c      	ldr	r3, [pc, #112]	; (8001350 <steerBoat+0xa8>)
 80012de:	613b      	str	r3, [r7, #16]
 80012e0:	e009      	b.n	80012f6 <steerBoat+0x4e>
	} else {
		speed = calcMotorSpeed(fabsf(dist_diff));
 80012e2:	edd7 7a05 	vldr	s15, [r7, #20]
 80012e6:	eef0 7ae7 	vabs.f32	s15, s15
 80012ea:	eeb0 0a67 	vmov.f32	s0, s15
 80012ee:	f7ff ff99 	bl	8001224 <calcMotorSpeed>
 80012f2:	ed87 0a04 	vstr	s0, [r7, #16]
	}


	if(dist_diff < -DISTANCE_THRESHOLD) { //Left
 80012f6:	edd7 7a05 	vldr	s15, [r7, #20]
 80012fa:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 80012fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001306:	d507      	bpl.n	8001318 <steerBoat+0x70>
		HAL_Delay(100);
 8001308:	2064      	movs	r0, #100	; 0x64
 800130a:	f000 fe71 	bl	8001ff0 <HAL_Delay>
	    setMotorSpeed(0, 100);
 800130e:	2164      	movs	r1, #100	; 0x64
 8001310:	2000      	movs	r0, #0
 8001312:	f000 f81f 	bl	8001354 <setMotorSpeed>
	    setMotorSpeed(100, 0);
	} else {
		setMotorSpeed(-255, -255);
	}

}
 8001316:	e016      	b.n	8001346 <steerBoat+0x9e>
	} else if(dist_diff > DISTANCE_THRESHOLD) {//Right
 8001318:	edd7 7a05 	vldr	s15, [r7, #20]
 800131c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001320:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001328:	dd07      	ble.n	800133a <steerBoat+0x92>
	    HAL_Delay(100);
 800132a:	2064      	movs	r0, #100	; 0x64
 800132c:	f000 fe60 	bl	8001ff0 <HAL_Delay>
	    setMotorSpeed(100, 0);
 8001330:	2100      	movs	r1, #0
 8001332:	2064      	movs	r0, #100	; 0x64
 8001334:	f000 f80e 	bl	8001354 <setMotorSpeed>
}
 8001338:	e005      	b.n	8001346 <steerBoat+0x9e>
		setMotorSpeed(-255, -255);
 800133a:	f06f 01fe 	mvn.w	r1, #254	; 0xfe
 800133e:	f06f 00fe 	mvn.w	r0, #254	; 0xfe
 8001342:	f000 f807 	bl	8001354 <setMotorSpeed>
}
 8001346:	bf00      	nop
 8001348:	3718      	adds	r7, #24
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	437f0000 	.word	0x437f0000

08001354 <setMotorSpeed>:
 *
 * if turn amount is positive, the boat needs to turn left
 * if turn amount is negative, the boat needs to turn right
 * Constraint: 0 <= turn_amount <= 140
 */
void setMotorSpeed(int32_t left, int32_t right) {
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	6039      	str	r1, [r7, #0]
	if (left > 0)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2b00      	cmp	r3, #0
 8001362:	dd0c      	ble.n	800137e <setMotorSpeed+0x2a>
	{
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, -1 * left);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	425a      	negs	r2, r3
 8001368:	4b1a      	ldr	r3, [pc, #104]	; (80013d4 <setMotorSpeed+0x80>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_GPIO_WritePin(LEFT_DM_PHASE_GPIO_Port, LEFT_DM_PHASE_Pin, 1);
 800136e:	2201      	movs	r2, #1
 8001370:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001374:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001378:	f002 f842 	bl	8003400 <HAL_GPIO_WritePin>
 800137c:	e00a      	b.n	8001394 <setMotorSpeed+0x40>
	}
	else
	{
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, left);
 800137e:	4b15      	ldr	r3, [pc, #84]	; (80013d4 <setMotorSpeed+0x80>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	687a      	ldr	r2, [r7, #4]
 8001384:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_GPIO_WritePin(LEFT_DM_PHASE_GPIO_Port, LEFT_DM_PHASE_Pin, 0);
 8001386:	2200      	movs	r2, #0
 8001388:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800138c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001390:	f002 f836 	bl	8003400 <HAL_GPIO_WritePin>
	}

	if (right > 0)
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	2b00      	cmp	r3, #0
 8001398:	dd0c      	ble.n	80013b4 <setMotorSpeed+0x60>
	{
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, -1 * right);
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	425a      	negs	r2, r3
 800139e:	4b0d      	ldr	r3, [pc, #52]	; (80013d4 <setMotorSpeed+0x80>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(RIGHT_DM_PHASE_GPIO_Port, RIGHT_DM_PHASE_Pin, 0);
 80013a4:	2200      	movs	r2, #0
 80013a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013ae:	f002 f827 	bl	8003400 <HAL_GPIO_WritePin>
	else
	{
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, right);
		HAL_GPIO_WritePin(RIGHT_DM_PHASE_GPIO_Port, RIGHT_DM_PHASE_Pin, 1);
	}
}
 80013b2:	e00a      	b.n	80013ca <setMotorSpeed+0x76>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, right);
 80013b4:	4b07      	ldr	r3, [pc, #28]	; (80013d4 <setMotorSpeed+0x80>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	683a      	ldr	r2, [r7, #0]
 80013ba:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(RIGHT_DM_PHASE_GPIO_Port, RIGHT_DM_PHASE_Pin, 1);
 80013bc:	2201      	movs	r2, #1
 80013be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013c6:	f002 f81b 	bl	8003400 <HAL_GPIO_WritePin>
}
 80013ca:	bf00      	nop
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	2000024c 	.word	0x2000024c

080013d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b086      	sub	sp, #24
 80013dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013de:	f000 fda1 	bl	8001f24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013e2:	f000 f8c3 	bl	800156c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013e6:	f000 fae7 	bl	80019b8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80013ea:	f000 fab5 	bl	8001958 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80013ee:	f000 f981 	bl	80016f4 <MX_TIM1_Init>
  MX_ADC1_Init();
 80013f2:	f000 f90f 	bl	8001614 <MX_ADC1_Init>
  MX_TIM17_Init();
 80013f6:	f000 fa35 	bl	8001864 <MX_TIM17_Init>

  uint8_t powerBtnState;

  float left_dist, front_dist, right_dist;

  float left_stored_dist = 0;
 80013fa:	f04f 0300 	mov.w	r3, #0
 80013fe:	617b      	str	r3, [r7, #20]
  float right_stored_dist = 0;
 8001400:	f04f 0300 	mov.w	r3, #0
 8001404:	613b      	str	r3, [r7, #16]

  HAL_TIM_Base_Start(&htim1);
 8001406:	4856      	ldr	r0, [pc, #344]	; (8001560 <main+0x188>)
 8001408:	f003 fc04 	bl	8004c14 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim17);
 800140c:	4855      	ldr	r0, [pc, #340]	; (8001564 <main+0x18c>)
 800140e:	f003 fc01 	bl	8004c14 <HAL_TIM_Base_Start>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001412:	2100      	movs	r1, #0
 8001414:	4852      	ldr	r0, [pc, #328]	; (8001560 <main+0x188>)
 8001416:	f003 fcb3 	bl	8004d80 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800141a:	2104      	movs	r1, #4
 800141c:	4850      	ldr	r0, [pc, #320]	; (8001560 <main+0x188>)
 800141e:	f003 fcaf 	bl	8004d80 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 8001422:	2100      	movs	r1, #0
 8001424:	484f      	ldr	r0, [pc, #316]	; (8001564 <main+0x18c>)
 8001426:	f003 fcab 	bl	8004d80 <HAL_TIM_PWM_Start>

  powerBtnState = HAL_GPIO_ReadPin(POWER_BTN_GPIO_Port, POWER_BTN_Pin);
 800142a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800142e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001432:	f001 ffcd 	bl	80033d0 <HAL_GPIO_ReadPin>
 8001436:	4603      	mov	r3, r0
 8001438:	73fb      	strb	r3, [r7, #15]
  setInitialState(powerBtnState);
 800143a:	7bfb      	ldrb	r3, [r7, #15]
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff fe65 	bl	800110c <setInitialState>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		powerBtnState = HAL_GPIO_ReadPin(POWER_BTN_GPIO_Port, POWER_BTN_Pin);
 8001442:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001446:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800144a:	f001 ffc1 	bl	80033d0 <HAL_GPIO_ReadPin>
 800144e:	4603      	mov	r3, r0
 8001450:	73fb      	strb	r3, [r7, #15]

		if (togglePowerBtn(powerBtnState) == 1) {
 8001452:	7bfb      	ldrb	r3, [r7, #15]
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff fdcf 	bl	8000ff8 <togglePowerBtn>
 800145a:	4603      	mov	r3, r0
 800145c:	2b01      	cmp	r3, #1
 800145e:	d179      	bne.n	8001554 <main+0x17c>

			left_dist = getDistance(ADC_Read(&hadc1, ADC_CHANNEL_1));
 8001460:	2101      	movs	r1, #1
 8001462:	4841      	ldr	r0, [pc, #260]	; (8001568 <main+0x190>)
 8001464:	f7ff fe08 	bl	8001078 <ADC_Read>
 8001468:	4603      	mov	r3, r0
 800146a:	ee07 3a90 	vmov	s15, r3
 800146e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001472:	eeb0 0a67 	vmov.f32	s0, s15
 8001476:	f7ff fe5f 	bl	8001138 <getDistance>
 800147a:	ed87 0a02 	vstr	s0, [r7, #8]
			front_dist = getDistance(ADC_Read(&hadc1, ADC_CHANNEL_2));
 800147e:	2102      	movs	r1, #2
 8001480:	4839      	ldr	r0, [pc, #228]	; (8001568 <main+0x190>)
 8001482:	f7ff fdf9 	bl	8001078 <ADC_Read>
 8001486:	4603      	mov	r3, r0
 8001488:	ee07 3a90 	vmov	s15, r3
 800148c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001490:	eeb0 0a67 	vmov.f32	s0, s15
 8001494:	f7ff fe50 	bl	8001138 <getDistance>
 8001498:	ed87 0a01 	vstr	s0, [r7, #4]
			right_dist = getDistance(ADC_Read(&hadc1, ADC_CHANNEL_4));
 800149c:	2104      	movs	r1, #4
 800149e:	4832      	ldr	r0, [pc, #200]	; (8001568 <main+0x190>)
 80014a0:	f7ff fdea 	bl	8001078 <ADC_Read>
 80014a4:	4603      	mov	r3, r0
 80014a6:	ee07 3a90 	vmov	s15, r3
 80014aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014ae:	eeb0 0a67 	vmov.f32	s0, s15
 80014b2:	f7ff fe41 	bl	8001138 <getDistance>
 80014b6:	ed87 0a00 	vstr	s0, [r7]


			// Store distance values to know which turn position to favor
			if(left_stored_dist > 0 && right_stored_dist > 0) {
 80014ba:	edd7 7a05 	vldr	s15, [r7, #20]
 80014be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014c6:	dd27      	ble.n	8001518 <main+0x140>
 80014c8:	edd7 7a04 	vldr	s15, [r7, #16]
 80014cc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014d4:	dd20      	ble.n	8001518 <main+0x140>
				left_stored_dist += left_dist;
 80014d6:	ed97 7a05 	vldr	s14, [r7, #20]
 80014da:	edd7 7a02 	vldr	s15, [r7, #8]
 80014de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014e2:	edc7 7a05 	vstr	s15, [r7, #20]
				right_stored_dist += right_dist;
 80014e6:	ed97 7a04 	vldr	s14, [r7, #16]
 80014ea:	edd7 7a00 	vldr	s15, [r7]
 80014ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014f2:	edc7 7a04 	vstr	s15, [r7, #16]

				left_stored_dist /= 2;
 80014f6:	ed97 7a05 	vldr	s14, [r7, #20]
 80014fa:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80014fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001502:	edc7 7a05 	vstr	s15, [r7, #20]
				right_stored_dist /= 2;
 8001506:	ed97 7a04 	vldr	s14, [r7, #16]
 800150a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800150e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001512:	edc7 7a04 	vstr	s15, [r7, #16]
 8001516:	e003      	b.n	8001520 <main+0x148>
			} else {
				left_stored_dist = left_dist;
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	617b      	str	r3, [r7, #20]
				right_stored_dist = right_dist;
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	613b      	str	r3, [r7, #16]
			}

			if(front_dist < 15) {
 8001520:	edd7 7a01 	vldr	s15, [r7, #4]
 8001524:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8001528:	eef4 7ac7 	vcmpe.f32	s15, s14
 800152c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001530:	d507      	bpl.n	8001542 <main+0x16a>
				setMotorSpeed(255, 255);
 8001532:	21ff      	movs	r1, #255	; 0xff
 8001534:	20ff      	movs	r0, #255	; 0xff
 8001536:	f7ff ff0d 	bl	8001354 <setMotorSpeed>
				HAL_Delay(100);
 800153a:	2064      	movs	r0, #100	; 0x64
 800153c:	f000 fd58 	bl	8001ff0 <HAL_Delay>
 8001540:	e77f      	b.n	8001442 <main+0x6a>
			} else {
				steerBoat(left_dist, front_dist, right_dist);
 8001542:	ed97 1a00 	vldr	s2, [r7]
 8001546:	edd7 0a01 	vldr	s1, [r7, #4]
 800154a:	ed97 0a02 	vldr	s0, [r7, #8]
 800154e:	f7ff feab 	bl	80012a8 <steerBoat>
 8001552:	e776      	b.n	8001442 <main+0x6a>
			}
			// Base Steering

		} else {
			setMotorSpeed(0, 0);
 8001554:	2100      	movs	r1, #0
 8001556:	2000      	movs	r0, #0
 8001558:	f7ff fefc 	bl	8001354 <setMotorSpeed>
		powerBtnState = HAL_GPIO_ReadPin(POWER_BTN_GPIO_Port, POWER_BTN_Pin);
 800155c:	e771      	b.n	8001442 <main+0x6a>
 800155e:	bf00      	nop
 8001560:	2000024c 	.word	0x2000024c
 8001564:	20000298 	.word	0x20000298
 8001568:	200001fc 	.word	0x200001fc

0800156c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b096      	sub	sp, #88	; 0x58
 8001570:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001572:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001576:	2228      	movs	r2, #40	; 0x28
 8001578:	2100      	movs	r1, #0
 800157a:	4618      	mov	r0, r3
 800157c:	f004 feec 	bl	8006358 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001580:	f107 031c 	add.w	r3, r7, #28
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]
 8001588:	605a      	str	r2, [r3, #4]
 800158a:	609a      	str	r2, [r3, #8]
 800158c:	60da      	str	r2, [r3, #12]
 800158e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001590:	1d3b      	adds	r3, r7, #4
 8001592:	2200      	movs	r2, #0
 8001594:	601a      	str	r2, [r3, #0]
 8001596:	605a      	str	r2, [r3, #4]
 8001598:	609a      	str	r2, [r3, #8]
 800159a:	60da      	str	r2, [r3, #12]
 800159c:	611a      	str	r2, [r3, #16]
 800159e:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015a0:	2302      	movs	r3, #2
 80015a2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015a4:	2301      	movs	r3, #1
 80015a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015a8:	2310      	movs	r3, #16
 80015aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80015ac:	2300      	movs	r3, #0
 80015ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015b0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015b4:	4618      	mov	r0, r3
 80015b6:	f001 ff3b 	bl	8003430 <HAL_RCC_OscConfig>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80015c0:	f000 fa48 	bl	8001a54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015c4:	230f      	movs	r3, #15
 80015c6:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80015c8:	2300      	movs	r3, #0
 80015ca:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015cc:	2300      	movs	r3, #0
 80015ce:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015d0:	2300      	movs	r3, #0
 80015d2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015d4:	2300      	movs	r3, #0
 80015d6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80015d8:	f107 031c 	add.w	r3, r7, #28
 80015dc:	2100      	movs	r1, #0
 80015de:	4618      	mov	r0, r3
 80015e0:	f002 ff64 	bl	80044ac <HAL_RCC_ClockConfig>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <SystemClock_Config+0x82>
  {
    Error_Handler();
 80015ea:	f000 fa33 	bl	8001a54 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 80015ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015f2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80015f4:	2300      	movs	r3, #0
 80015f6:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015f8:	1d3b      	adds	r3, r7, #4
 80015fa:	4618      	mov	r0, r3
 80015fc:	f003 f98c 	bl	8004918 <HAL_RCCEx_PeriphCLKConfig>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001606:	f000 fa25 	bl	8001a54 <Error_Handler>
  }
}
 800160a:	bf00      	nop
 800160c:	3758      	adds	r7, #88	; 0x58
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
	...

08001614 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b08a      	sub	sp, #40	; 0x28
 8001618:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800161a:	f107 031c 	add.w	r3, r7, #28
 800161e:	2200      	movs	r2, #0
 8001620:	601a      	str	r2, [r3, #0]
 8001622:	605a      	str	r2, [r3, #4]
 8001624:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001626:	1d3b      	adds	r3, r7, #4
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
 800162c:	605a      	str	r2, [r3, #4]
 800162e:	609a      	str	r2, [r3, #8]
 8001630:	60da      	str	r2, [r3, #12]
 8001632:	611a      	str	r2, [r3, #16]
 8001634:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001636:	4b2e      	ldr	r3, [pc, #184]	; (80016f0 <MX_ADC1_Init+0xdc>)
 8001638:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800163c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800163e:	4b2c      	ldr	r3, [pc, #176]	; (80016f0 <MX_ADC1_Init+0xdc>)
 8001640:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001644:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001646:	4b2a      	ldr	r3, [pc, #168]	; (80016f0 <MX_ADC1_Init+0xdc>)
 8001648:	2200      	movs	r2, #0
 800164a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800164c:	4b28      	ldr	r3, [pc, #160]	; (80016f0 <MX_ADC1_Init+0xdc>)
 800164e:	2200      	movs	r2, #0
 8001650:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001652:	4b27      	ldr	r3, [pc, #156]	; (80016f0 <MX_ADC1_Init+0xdc>)
 8001654:	2200      	movs	r2, #0
 8001656:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001658:	4b25      	ldr	r3, [pc, #148]	; (80016f0 <MX_ADC1_Init+0xdc>)
 800165a:	2200      	movs	r2, #0
 800165c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001660:	4b23      	ldr	r3, [pc, #140]	; (80016f0 <MX_ADC1_Init+0xdc>)
 8001662:	2200      	movs	r2, #0
 8001664:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001666:	4b22      	ldr	r3, [pc, #136]	; (80016f0 <MX_ADC1_Init+0xdc>)
 8001668:	2201      	movs	r2, #1
 800166a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800166c:	4b20      	ldr	r3, [pc, #128]	; (80016f0 <MX_ADC1_Init+0xdc>)
 800166e:	2200      	movs	r2, #0
 8001670:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001672:	4b1f      	ldr	r3, [pc, #124]	; (80016f0 <MX_ADC1_Init+0xdc>)
 8001674:	2201      	movs	r2, #1
 8001676:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001678:	4b1d      	ldr	r3, [pc, #116]	; (80016f0 <MX_ADC1_Init+0xdc>)
 800167a:	2200      	movs	r2, #0
 800167c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001680:	4b1b      	ldr	r3, [pc, #108]	; (80016f0 <MX_ADC1_Init+0xdc>)
 8001682:	2204      	movs	r2, #4
 8001684:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001686:	4b1a      	ldr	r3, [pc, #104]	; (80016f0 <MX_ADC1_Init+0xdc>)
 8001688:	2200      	movs	r2, #0
 800168a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800168c:	4b18      	ldr	r3, [pc, #96]	; (80016f0 <MX_ADC1_Init+0xdc>)
 800168e:	2200      	movs	r2, #0
 8001690:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001692:	4817      	ldr	r0, [pc, #92]	; (80016f0 <MX_ADC1_Init+0xdc>)
 8001694:	f000 fcd0 	bl	8002038 <HAL_ADC_Init>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800169e:	f000 f9d9 	bl	8001a54 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80016a2:	2300      	movs	r3, #0
 80016a4:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80016a6:	f107 031c 	add.w	r3, r7, #28
 80016aa:	4619      	mov	r1, r3
 80016ac:	4810      	ldr	r0, [pc, #64]	; (80016f0 <MX_ADC1_Init+0xdc>)
 80016ae:	f001 faa7 	bl	8002c00 <HAL_ADCEx_MultiModeConfigChannel>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 80016b8:	f000 f9cc 	bl	8001a54 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80016bc:	2301      	movs	r3, #1
 80016be:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80016c0:	2301      	movs	r3, #1
 80016c2:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80016c4:	2300      	movs	r3, #0
 80016c6:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80016c8:	2300      	movs	r3, #0
 80016ca:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80016cc:	2300      	movs	r3, #0
 80016ce:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80016d0:	2300      	movs	r3, #0
 80016d2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016d4:	1d3b      	adds	r3, r7, #4
 80016d6:	4619      	mov	r1, r3
 80016d8:	4805      	ldr	r0, [pc, #20]	; (80016f0 <MX_ADC1_Init+0xdc>)
 80016da:	f000 ffd1 	bl	8002680 <HAL_ADC_ConfigChannel>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 80016e4:	f000 f9b6 	bl	8001a54 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80016e8:	bf00      	nop
 80016ea:	3728      	adds	r7, #40	; 0x28
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	200001fc 	.word	0x200001fc

080016f4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b09a      	sub	sp, #104	; 0x68
 80016f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016fa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80016fe:	2200      	movs	r2, #0
 8001700:	601a      	str	r2, [r3, #0]
 8001702:	605a      	str	r2, [r3, #4]
 8001704:	609a      	str	r2, [r3, #8]
 8001706:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001708:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	605a      	str	r2, [r3, #4]
 8001712:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001714:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]
 800171c:	605a      	str	r2, [r3, #4]
 800171e:	609a      	str	r2, [r3, #8]
 8001720:	60da      	str	r2, [r3, #12]
 8001722:	611a      	str	r2, [r3, #16]
 8001724:	615a      	str	r2, [r3, #20]
 8001726:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001728:	1d3b      	adds	r3, r7, #4
 800172a:	222c      	movs	r2, #44	; 0x2c
 800172c:	2100      	movs	r1, #0
 800172e:	4618      	mov	r0, r3
 8001730:	f004 fe12 	bl	8006358 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001734:	4b49      	ldr	r3, [pc, #292]	; (800185c <MX_TIM1_Init+0x168>)
 8001736:	4a4a      	ldr	r2, [pc, #296]	; (8001860 <MX_TIM1_Init+0x16c>)
 8001738:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 625-1;
 800173a:	4b48      	ldr	r3, [pc, #288]	; (800185c <MX_TIM1_Init+0x168>)
 800173c:	f44f 721c 	mov.w	r2, #624	; 0x270
 8001740:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001742:	4b46      	ldr	r3, [pc, #280]	; (800185c <MX_TIM1_Init+0x168>)
 8001744:	2200      	movs	r2, #0
 8001746:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 256-1;
 8001748:	4b44      	ldr	r3, [pc, #272]	; (800185c <MX_TIM1_Init+0x168>)
 800174a:	22ff      	movs	r2, #255	; 0xff
 800174c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800174e:	4b43      	ldr	r3, [pc, #268]	; (800185c <MX_TIM1_Init+0x168>)
 8001750:	2200      	movs	r2, #0
 8001752:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001754:	4b41      	ldr	r3, [pc, #260]	; (800185c <MX_TIM1_Init+0x168>)
 8001756:	2200      	movs	r2, #0
 8001758:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800175a:	4b40      	ldr	r3, [pc, #256]	; (800185c <MX_TIM1_Init+0x168>)
 800175c:	2280      	movs	r2, #128	; 0x80
 800175e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001760:	483e      	ldr	r0, [pc, #248]	; (800185c <MX_TIM1_Init+0x168>)
 8001762:	f003 f9ff 	bl	8004b64 <HAL_TIM_Base_Init>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800176c:	f000 f972 	bl	8001a54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001770:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001774:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001776:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800177a:	4619      	mov	r1, r3
 800177c:	4837      	ldr	r0, [pc, #220]	; (800185c <MX_TIM1_Init+0x168>)
 800177e:	f003 fcff 	bl	8005180 <HAL_TIM_ConfigClockSource>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001788:	f000 f964 	bl	8001a54 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800178c:	4833      	ldr	r0, [pc, #204]	; (800185c <MX_TIM1_Init+0x168>)
 800178e:	f003 fa95 	bl	8004cbc <HAL_TIM_PWM_Init>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001798:	f000 f95c 	bl	8001a54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800179c:	2300      	movs	r3, #0
 800179e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80017a0:	2300      	movs	r3, #0
 80017a2:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017a4:	2300      	movs	r3, #0
 80017a6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80017a8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80017ac:	4619      	mov	r1, r3
 80017ae:	482b      	ldr	r0, [pc, #172]	; (800185c <MX_TIM1_Init+0x168>)
 80017b0:	f004 f98e 	bl	8005ad0 <HAL_TIMEx_MasterConfigSynchronization>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80017ba:	f000 f94b 	bl	8001a54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017be:	2360      	movs	r3, #96	; 0x60
 80017c0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80017c2:	2300      	movs	r3, #0
 80017c4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017c6:	2300      	movs	r3, #0
 80017c8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80017ca:	2300      	movs	r3, #0
 80017cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017ce:	2300      	movs	r3, #0
 80017d0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80017d2:	2300      	movs	r3, #0
 80017d4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80017d6:	2300      	movs	r3, #0
 80017d8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017de:	2200      	movs	r2, #0
 80017e0:	4619      	mov	r1, r3
 80017e2:	481e      	ldr	r0, [pc, #120]	; (800185c <MX_TIM1_Init+0x168>)
 80017e4:	f003 fbb8 	bl	8004f58 <HAL_TIM_PWM_ConfigChannel>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80017ee:	f000 f931 	bl	8001a54 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80017f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017f6:	2204      	movs	r2, #4
 80017f8:	4619      	mov	r1, r3
 80017fa:	4818      	ldr	r0, [pc, #96]	; (800185c <MX_TIM1_Init+0x168>)
 80017fc:	f003 fbac 	bl	8004f58 <HAL_TIM_PWM_ConfigChannel>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001806:	f000 f925 	bl	8001a54 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800180a:	2300      	movs	r3, #0
 800180c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800180e:	2300      	movs	r3, #0
 8001810:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001812:	2300      	movs	r3, #0
 8001814:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001816:	2300      	movs	r3, #0
 8001818:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800181a:	2300      	movs	r3, #0
 800181c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800181e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001822:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001824:	2300      	movs	r3, #0
 8001826:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001828:	2300      	movs	r3, #0
 800182a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800182c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001830:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001832:	2300      	movs	r3, #0
 8001834:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001836:	2300      	movs	r3, #0
 8001838:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800183a:	1d3b      	adds	r3, r7, #4
 800183c:	4619      	mov	r1, r3
 800183e:	4807      	ldr	r0, [pc, #28]	; (800185c <MX_TIM1_Init+0x168>)
 8001840:	f004 f9b4 	bl	8005bac <HAL_TIMEx_ConfigBreakDeadTime>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 800184a:	f000 f903 	bl	8001a54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800184e:	4803      	ldr	r0, [pc, #12]	; (800185c <MX_TIM1_Init+0x168>)
 8001850:	f000 f99a 	bl	8001b88 <HAL_TIM_MspPostInit>

}
 8001854:	bf00      	nop
 8001856:	3768      	adds	r7, #104	; 0x68
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	2000024c 	.word	0x2000024c
 8001860:	40012c00 	.word	0x40012c00

08001864 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b092      	sub	sp, #72	; 0x48
 8001868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800186a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800186e:	2200      	movs	r2, #0
 8001870:	601a      	str	r2, [r3, #0]
 8001872:	605a      	str	r2, [r3, #4]
 8001874:	609a      	str	r2, [r3, #8]
 8001876:	60da      	str	r2, [r3, #12]
 8001878:	611a      	str	r2, [r3, #16]
 800187a:	615a      	str	r2, [r3, #20]
 800187c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800187e:	463b      	mov	r3, r7
 8001880:	222c      	movs	r2, #44	; 0x2c
 8001882:	2100      	movs	r1, #0
 8001884:	4618      	mov	r0, r3
 8001886:	f004 fd67 	bl	8006358 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800188a:	4b31      	ldr	r3, [pc, #196]	; (8001950 <MX_TIM17_Init+0xec>)
 800188c:	4a31      	ldr	r2, [pc, #196]	; (8001954 <MX_TIM17_Init+0xf0>)
 800188e:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 8-1;
 8001890:	4b2f      	ldr	r3, [pc, #188]	; (8001950 <MX_TIM17_Init+0xec>)
 8001892:	2207      	movs	r2, #7
 8001894:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001896:	4b2e      	ldr	r3, [pc, #184]	; (8001950 <MX_TIM17_Init+0xec>)
 8001898:	2200      	movs	r2, #0
 800189a:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 20000-1;
 800189c:	4b2c      	ldr	r3, [pc, #176]	; (8001950 <MX_TIM17_Init+0xec>)
 800189e:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80018a2:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018a4:	4b2a      	ldr	r3, [pc, #168]	; (8001950 <MX_TIM17_Init+0xec>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80018aa:	4b29      	ldr	r3, [pc, #164]	; (8001950 <MX_TIM17_Init+0xec>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80018b0:	4b27      	ldr	r3, [pc, #156]	; (8001950 <MX_TIM17_Init+0xec>)
 80018b2:	2280      	movs	r2, #128	; 0x80
 80018b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80018b6:	4826      	ldr	r0, [pc, #152]	; (8001950 <MX_TIM17_Init+0xec>)
 80018b8:	f003 f954 	bl	8004b64 <HAL_TIM_Base_Init>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 80018c2:	f000 f8c7 	bl	8001a54 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 80018c6:	4822      	ldr	r0, [pc, #136]	; (8001950 <MX_TIM17_Init+0xec>)
 80018c8:	f003 f9f8 	bl	8004cbc <HAL_TIM_PWM_Init>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 80018d2:	f000 f8bf 	bl	8001a54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018d6:	2360      	movs	r3, #96	; 0x60
 80018d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 80018da:	2300      	movs	r3, #0
 80018dc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018de:	2300      	movs	r3, #0
 80018e0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80018e2:	2300      	movs	r3, #0
 80018e4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018e6:	2300      	movs	r3, #0
 80018e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80018ea:	2300      	movs	r3, #0
 80018ec:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018ee:	2300      	movs	r3, #0
 80018f0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018f6:	2200      	movs	r2, #0
 80018f8:	4619      	mov	r1, r3
 80018fa:	4815      	ldr	r0, [pc, #84]	; (8001950 <MX_TIM17_Init+0xec>)
 80018fc:	f003 fb2c 	bl	8004f58 <HAL_TIM_PWM_ConfigChannel>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 8001906:	f000 f8a5 	bl	8001a54 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800190a:	2300      	movs	r3, #0
 800190c:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800190e:	2300      	movs	r3, #0
 8001910:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001912:	2300      	movs	r3, #0
 8001914:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001916:	2300      	movs	r3, #0
 8001918:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800191a:	2300      	movs	r3, #0
 800191c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800191e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001922:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001924:	2300      	movs	r3, #0
 8001926:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001928:	2300      	movs	r3, #0
 800192a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 800192c:	463b      	mov	r3, r7
 800192e:	4619      	mov	r1, r3
 8001930:	4807      	ldr	r0, [pc, #28]	; (8001950 <MX_TIM17_Init+0xec>)
 8001932:	f004 f93b 	bl	8005bac <HAL_TIMEx_ConfigBreakDeadTime>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 800193c:	f000 f88a 	bl	8001a54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8001940:	4803      	ldr	r0, [pc, #12]	; (8001950 <MX_TIM17_Init+0xec>)
 8001942:	f000 f921 	bl	8001b88 <HAL_TIM_MspPostInit>

}
 8001946:	bf00      	nop
 8001948:	3748      	adds	r7, #72	; 0x48
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	20000298 	.word	0x20000298
 8001954:	40014800 	.word	0x40014800

08001958 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800195c:	4b14      	ldr	r3, [pc, #80]	; (80019b0 <MX_USART2_UART_Init+0x58>)
 800195e:	4a15      	ldr	r2, [pc, #84]	; (80019b4 <MX_USART2_UART_Init+0x5c>)
 8001960:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001962:	4b13      	ldr	r3, [pc, #76]	; (80019b0 <MX_USART2_UART_Init+0x58>)
 8001964:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001968:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800196a:	4b11      	ldr	r3, [pc, #68]	; (80019b0 <MX_USART2_UART_Init+0x58>)
 800196c:	2200      	movs	r2, #0
 800196e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001970:	4b0f      	ldr	r3, [pc, #60]	; (80019b0 <MX_USART2_UART_Init+0x58>)
 8001972:	2200      	movs	r2, #0
 8001974:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001976:	4b0e      	ldr	r3, [pc, #56]	; (80019b0 <MX_USART2_UART_Init+0x58>)
 8001978:	2200      	movs	r2, #0
 800197a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800197c:	4b0c      	ldr	r3, [pc, #48]	; (80019b0 <MX_USART2_UART_Init+0x58>)
 800197e:	220c      	movs	r2, #12
 8001980:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001982:	4b0b      	ldr	r3, [pc, #44]	; (80019b0 <MX_USART2_UART_Init+0x58>)
 8001984:	2200      	movs	r2, #0
 8001986:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001988:	4b09      	ldr	r3, [pc, #36]	; (80019b0 <MX_USART2_UART_Init+0x58>)
 800198a:	2200      	movs	r2, #0
 800198c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800198e:	4b08      	ldr	r3, [pc, #32]	; (80019b0 <MX_USART2_UART_Init+0x58>)
 8001990:	2200      	movs	r2, #0
 8001992:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001994:	4b06      	ldr	r3, [pc, #24]	; (80019b0 <MX_USART2_UART_Init+0x58>)
 8001996:	2200      	movs	r2, #0
 8001998:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800199a:	4805      	ldr	r0, [pc, #20]	; (80019b0 <MX_USART2_UART_Init+0x58>)
 800199c:	f004 f97e 	bl	8005c9c <HAL_UART_Init>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80019a6:	f000 f855 	bl	8001a54 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80019aa:	bf00      	nop
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	200002e4 	.word	0x200002e4
 80019b4:	40004400 	.word	0x40004400

080019b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b088      	sub	sp, #32
 80019bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019be:	f107 030c 	add.w	r3, r7, #12
 80019c2:	2200      	movs	r2, #0
 80019c4:	601a      	str	r2, [r3, #0]
 80019c6:	605a      	str	r2, [r3, #4]
 80019c8:	609a      	str	r2, [r3, #8]
 80019ca:	60da      	str	r2, [r3, #12]
 80019cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ce:	4b20      	ldr	r3, [pc, #128]	; (8001a50 <MX_GPIO_Init+0x98>)
 80019d0:	695b      	ldr	r3, [r3, #20]
 80019d2:	4a1f      	ldr	r2, [pc, #124]	; (8001a50 <MX_GPIO_Init+0x98>)
 80019d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019d8:	6153      	str	r3, [r2, #20]
 80019da:	4b1d      	ldr	r3, [pc, #116]	; (8001a50 <MX_GPIO_Init+0x98>)
 80019dc:	695b      	ldr	r3, [r3, #20]
 80019de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e2:	60bb      	str	r3, [r7, #8]
 80019e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019e6:	4b1a      	ldr	r3, [pc, #104]	; (8001a50 <MX_GPIO_Init+0x98>)
 80019e8:	695b      	ldr	r3, [r3, #20]
 80019ea:	4a19      	ldr	r2, [pc, #100]	; (8001a50 <MX_GPIO_Init+0x98>)
 80019ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019f0:	6153      	str	r3, [r2, #20]
 80019f2:	4b17      	ldr	r3, [pc, #92]	; (8001a50 <MX_GPIO_Init+0x98>)
 80019f4:	695b      	ldr	r3, [r3, #20]
 80019f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019fa:	607b      	str	r3, [r7, #4]
 80019fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RIGHT_DM_PHASE_Pin|LEFT_DM_PHASE_Pin, GPIO_PIN_RESET);
 80019fe:	2200      	movs	r2, #0
 8001a00:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8001a04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a08:	f001 fcfa 	bl	8003400 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RIGHT_DM_PHASE_Pin LEFT_DM_PHASE_Pin */
  GPIO_InitStruct.Pin = RIGHT_DM_PHASE_Pin|LEFT_DM_PHASE_Pin;
 8001a0c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001a10:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a12:	2301      	movs	r3, #1
 8001a14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a16:	2300      	movs	r3, #0
 8001a18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a1e:	f107 030c 	add.w	r3, r7, #12
 8001a22:	4619      	mov	r1, r3
 8001a24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a28:	f001 fb60 	bl	80030ec <HAL_GPIO_Init>

  /*Configure GPIO pin : POWER_BTN_Pin */
  GPIO_InitStruct.Pin = POWER_BTN_Pin;
 8001a2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a30:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a32:	2300      	movs	r3, #0
 8001a34:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a36:	2302      	movs	r3, #2
 8001a38:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(POWER_BTN_GPIO_Port, &GPIO_InitStruct);
 8001a3a:	f107 030c 	add.w	r3, r7, #12
 8001a3e:	4619      	mov	r1, r3
 8001a40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a44:	f001 fb52 	bl	80030ec <HAL_GPIO_Init>

}
 8001a48:	bf00      	nop
 8001a4a:	3720      	adds	r7, #32
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	40021000 	.word	0x40021000

08001a54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a58:	b672      	cpsid	i
}
 8001a5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a5c:	e7fe      	b.n	8001a5c <Error_Handler+0x8>
	...

08001a60 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a66:	4b0f      	ldr	r3, [pc, #60]	; (8001aa4 <HAL_MspInit+0x44>)
 8001a68:	699b      	ldr	r3, [r3, #24]
 8001a6a:	4a0e      	ldr	r2, [pc, #56]	; (8001aa4 <HAL_MspInit+0x44>)
 8001a6c:	f043 0301 	orr.w	r3, r3, #1
 8001a70:	6193      	str	r3, [r2, #24]
 8001a72:	4b0c      	ldr	r3, [pc, #48]	; (8001aa4 <HAL_MspInit+0x44>)
 8001a74:	699b      	ldr	r3, [r3, #24]
 8001a76:	f003 0301 	and.w	r3, r3, #1
 8001a7a:	607b      	str	r3, [r7, #4]
 8001a7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a7e:	4b09      	ldr	r3, [pc, #36]	; (8001aa4 <HAL_MspInit+0x44>)
 8001a80:	69db      	ldr	r3, [r3, #28]
 8001a82:	4a08      	ldr	r2, [pc, #32]	; (8001aa4 <HAL_MspInit+0x44>)
 8001a84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a88:	61d3      	str	r3, [r2, #28]
 8001a8a:	4b06      	ldr	r3, [pc, #24]	; (8001aa4 <HAL_MspInit+0x44>)
 8001a8c:	69db      	ldr	r3, [r3, #28]
 8001a8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a92:	603b      	str	r3, [r7, #0]
 8001a94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a96:	bf00      	nop
 8001a98:	370c      	adds	r7, #12
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	40021000 	.word	0x40021000

08001aa8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b08a      	sub	sp, #40	; 0x28
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab0:	f107 0314 	add.w	r3, r7, #20
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	601a      	str	r2, [r3, #0]
 8001ab8:	605a      	str	r2, [r3, #4]
 8001aba:	609a      	str	r2, [r3, #8]
 8001abc:	60da      	str	r2, [r3, #12]
 8001abe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ac8:	d124      	bne.n	8001b14 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001aca:	4b14      	ldr	r3, [pc, #80]	; (8001b1c <HAL_ADC_MspInit+0x74>)
 8001acc:	695b      	ldr	r3, [r3, #20]
 8001ace:	4a13      	ldr	r2, [pc, #76]	; (8001b1c <HAL_ADC_MspInit+0x74>)
 8001ad0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ad4:	6153      	str	r3, [r2, #20]
 8001ad6:	4b11      	ldr	r3, [pc, #68]	; (8001b1c <HAL_ADC_MspInit+0x74>)
 8001ad8:	695b      	ldr	r3, [r3, #20]
 8001ada:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ade:	613b      	str	r3, [r7, #16]
 8001ae0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ae2:	4b0e      	ldr	r3, [pc, #56]	; (8001b1c <HAL_ADC_MspInit+0x74>)
 8001ae4:	695b      	ldr	r3, [r3, #20]
 8001ae6:	4a0d      	ldr	r2, [pc, #52]	; (8001b1c <HAL_ADC_MspInit+0x74>)
 8001ae8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001aec:	6153      	str	r3, [r2, #20]
 8001aee:	4b0b      	ldr	r3, [pc, #44]	; (8001b1c <HAL_ADC_MspInit+0x74>)
 8001af0:	695b      	ldr	r3, [r3, #20]
 8001af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001af6:	60fb      	str	r3, [r7, #12]
 8001af8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = IR_LEFT_Pin|IR_CENTER_Pin|IR_RIGHT_Pin;
 8001afa:	230b      	movs	r3, #11
 8001afc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001afe:	2303      	movs	r3, #3
 8001b00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b02:	2300      	movs	r3, #0
 8001b04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b06:	f107 0314 	add.w	r3, r7, #20
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b10:	f001 faec 	bl	80030ec <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001b14:	bf00      	nop
 8001b16:	3728      	adds	r7, #40	; 0x28
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	40021000 	.word	0x40021000

08001b20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b085      	sub	sp, #20
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a13      	ldr	r2, [pc, #76]	; (8001b7c <HAL_TIM_Base_MspInit+0x5c>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d10c      	bne.n	8001b4c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b32:	4b13      	ldr	r3, [pc, #76]	; (8001b80 <HAL_TIM_Base_MspInit+0x60>)
 8001b34:	699b      	ldr	r3, [r3, #24]
 8001b36:	4a12      	ldr	r2, [pc, #72]	; (8001b80 <HAL_TIM_Base_MspInit+0x60>)
 8001b38:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b3c:	6193      	str	r3, [r2, #24]
 8001b3e:	4b10      	ldr	r3, [pc, #64]	; (8001b80 <HAL_TIM_Base_MspInit+0x60>)
 8001b40:	699b      	ldr	r3, [r3, #24]
 8001b42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b46:	60fb      	str	r3, [r7, #12]
 8001b48:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001b4a:	e010      	b.n	8001b6e <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM17)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a0c      	ldr	r2, [pc, #48]	; (8001b84 <HAL_TIM_Base_MspInit+0x64>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d10b      	bne.n	8001b6e <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001b56:	4b0a      	ldr	r3, [pc, #40]	; (8001b80 <HAL_TIM_Base_MspInit+0x60>)
 8001b58:	699b      	ldr	r3, [r3, #24]
 8001b5a:	4a09      	ldr	r2, [pc, #36]	; (8001b80 <HAL_TIM_Base_MspInit+0x60>)
 8001b5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b60:	6193      	str	r3, [r2, #24]
 8001b62:	4b07      	ldr	r3, [pc, #28]	; (8001b80 <HAL_TIM_Base_MspInit+0x60>)
 8001b64:	699b      	ldr	r3, [r3, #24]
 8001b66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b6a:	60bb      	str	r3, [r7, #8]
 8001b6c:	68bb      	ldr	r3, [r7, #8]
}
 8001b6e:	bf00      	nop
 8001b70:	3714      	adds	r7, #20
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	40012c00 	.word	0x40012c00
 8001b80:	40021000 	.word	0x40021000
 8001b84:	40014800 	.word	0x40014800

08001b88 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b08a      	sub	sp, #40	; 0x28
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b90:	f107 0314 	add.w	r3, r7, #20
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	605a      	str	r2, [r3, #4]
 8001b9a:	609a      	str	r2, [r3, #8]
 8001b9c:	60da      	str	r2, [r3, #12]
 8001b9e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a23      	ldr	r2, [pc, #140]	; (8001c34 <HAL_TIM_MspPostInit+0xac>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d11e      	bne.n	8001be8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001baa:	4b23      	ldr	r3, [pc, #140]	; (8001c38 <HAL_TIM_MspPostInit+0xb0>)
 8001bac:	695b      	ldr	r3, [r3, #20]
 8001bae:	4a22      	ldr	r2, [pc, #136]	; (8001c38 <HAL_TIM_MspPostInit+0xb0>)
 8001bb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bb4:	6153      	str	r3, [r2, #20]
 8001bb6:	4b20      	ldr	r3, [pc, #128]	; (8001c38 <HAL_TIM_MspPostInit+0xb0>)
 8001bb8:	695b      	ldr	r3, [r3, #20]
 8001bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bbe:	613b      	str	r3, [r7, #16]
 8001bc0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = RIGHT_DM_ENBL_Pin|LEFT_DM_ENBL_Pin;
 8001bc2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001bc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc8:	2302      	movs	r3, #2
 8001bca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001bd4:	2306      	movs	r3, #6
 8001bd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bd8:	f107 0314 	add.w	r3, r7, #20
 8001bdc:	4619      	mov	r1, r3
 8001bde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001be2:	f001 fa83 	bl	80030ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8001be6:	e020      	b.n	8001c2a <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM17)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a13      	ldr	r2, [pc, #76]	; (8001c3c <HAL_TIM_MspPostInit+0xb4>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d11b      	bne.n	8001c2a <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bf2:	4b11      	ldr	r3, [pc, #68]	; (8001c38 <HAL_TIM_MspPostInit+0xb0>)
 8001bf4:	695b      	ldr	r3, [r3, #20]
 8001bf6:	4a10      	ldr	r2, [pc, #64]	; (8001c38 <HAL_TIM_MspPostInit+0xb0>)
 8001bf8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bfc:	6153      	str	r3, [r2, #20]
 8001bfe:	4b0e      	ldr	r3, [pc, #56]	; (8001c38 <HAL_TIM_MspPostInit+0xb0>)
 8001c00:	695b      	ldr	r3, [r3, #20]
 8001c02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c06:	60fb      	str	r3, [r7, #12]
 8001c08:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SERVO_MOTOR_Pin;
 8001c0a:	2320      	movs	r3, #32
 8001c0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c0e:	2302      	movs	r3, #2
 8001c10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c12:	2300      	movs	r3, #0
 8001c14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c16:	2300      	movs	r3, #0
 8001c18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM17;
 8001c1a:	230a      	movs	r3, #10
 8001c1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SERVO_MOTOR_GPIO_Port, &GPIO_InitStruct);
 8001c1e:	f107 0314 	add.w	r3, r7, #20
 8001c22:	4619      	mov	r1, r3
 8001c24:	4806      	ldr	r0, [pc, #24]	; (8001c40 <HAL_TIM_MspPostInit+0xb8>)
 8001c26:	f001 fa61 	bl	80030ec <HAL_GPIO_Init>
}
 8001c2a:	bf00      	nop
 8001c2c:	3728      	adds	r7, #40	; 0x28
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	40012c00 	.word	0x40012c00
 8001c38:	40021000 	.word	0x40021000
 8001c3c:	40014800 	.word	0x40014800
 8001c40:	48000400 	.word	0x48000400

08001c44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b08a      	sub	sp, #40	; 0x28
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c4c:	f107 0314 	add.w	r3, r7, #20
 8001c50:	2200      	movs	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]
 8001c54:	605a      	str	r2, [r3, #4]
 8001c56:	609a      	str	r2, [r3, #8]
 8001c58:	60da      	str	r2, [r3, #12]
 8001c5a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a18      	ldr	r2, [pc, #96]	; (8001cc4 <HAL_UART_MspInit+0x80>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d129      	bne.n	8001cba <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c66:	4b18      	ldr	r3, [pc, #96]	; (8001cc8 <HAL_UART_MspInit+0x84>)
 8001c68:	69db      	ldr	r3, [r3, #28]
 8001c6a:	4a17      	ldr	r2, [pc, #92]	; (8001cc8 <HAL_UART_MspInit+0x84>)
 8001c6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c70:	61d3      	str	r3, [r2, #28]
 8001c72:	4b15      	ldr	r3, [pc, #84]	; (8001cc8 <HAL_UART_MspInit+0x84>)
 8001c74:	69db      	ldr	r3, [r3, #28]
 8001c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c7a:	613b      	str	r3, [r7, #16]
 8001c7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c7e:	4b12      	ldr	r3, [pc, #72]	; (8001cc8 <HAL_UART_MspInit+0x84>)
 8001c80:	695b      	ldr	r3, [r3, #20]
 8001c82:	4a11      	ldr	r2, [pc, #68]	; (8001cc8 <HAL_UART_MspInit+0x84>)
 8001c84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c88:	6153      	str	r3, [r2, #20]
 8001c8a:	4b0f      	ldr	r3, [pc, #60]	; (8001cc8 <HAL_UART_MspInit+0x84>)
 8001c8c:	695b      	ldr	r3, [r3, #20]
 8001c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c92:	60fb      	str	r3, [r7, #12]
 8001c94:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8001c96:	f248 0304 	movw	r3, #32772	; 0x8004
 8001c9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ca8:	2307      	movs	r3, #7
 8001caa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cac:	f107 0314 	add.w	r3, r7, #20
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cb6:	f001 fa19 	bl	80030ec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001cba:	bf00      	nop
 8001cbc:	3728      	adds	r7, #40	; 0x28
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	40004400 	.word	0x40004400
 8001cc8:	40021000 	.word	0x40021000

08001ccc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cd0:	e7fe      	b.n	8001cd0 <NMI_Handler+0x4>

08001cd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cd6:	e7fe      	b.n	8001cd6 <HardFault_Handler+0x4>

08001cd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cdc:	e7fe      	b.n	8001cdc <MemManage_Handler+0x4>

08001cde <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ce2:	e7fe      	b.n	8001ce2 <BusFault_Handler+0x4>

08001ce4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ce8:	e7fe      	b.n	8001ce8 <UsageFault_Handler+0x4>

08001cea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cea:	b480      	push	{r7}
 8001cec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cee:	bf00      	nop
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cfc:	bf00      	nop
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr

08001d06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d06:	b480      	push	{r7}
 8001d08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d0a:	bf00      	nop
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d18:	f000 f94a 	bl	8001fb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d1c:	bf00      	nop
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
	return 1;
 8001d24:	2301      	movs	r3, #1
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr

08001d30 <_kill>:

int _kill(int pid, int sig)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001d3a:	f004 fae3 	bl	8006304 <__errno>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2216      	movs	r2, #22
 8001d42:	601a      	str	r2, [r3, #0]
	return -1;
 8001d44:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3708      	adds	r7, #8
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}

08001d50 <_exit>:

void _exit (int status)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001d58:	f04f 31ff 	mov.w	r1, #4294967295
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f7ff ffe7 	bl	8001d30 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001d62:	e7fe      	b.n	8001d62 <_exit+0x12>

08001d64 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b086      	sub	sp, #24
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	60f8      	str	r0, [r7, #12]
 8001d6c:	60b9      	str	r1, [r7, #8]
 8001d6e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d70:	2300      	movs	r3, #0
 8001d72:	617b      	str	r3, [r7, #20]
 8001d74:	e00a      	b.n	8001d8c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001d76:	f3af 8000 	nop.w
 8001d7a:	4601      	mov	r1, r0
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	1c5a      	adds	r2, r3, #1
 8001d80:	60ba      	str	r2, [r7, #8]
 8001d82:	b2ca      	uxtb	r2, r1
 8001d84:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	3301      	adds	r3, #1
 8001d8a:	617b      	str	r3, [r7, #20]
 8001d8c:	697a      	ldr	r2, [r7, #20]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	dbf0      	blt.n	8001d76 <_read+0x12>
	}

return len;
 8001d94:	687b      	ldr	r3, [r7, #4]
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3718      	adds	r7, #24
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b086      	sub	sp, #24
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	60f8      	str	r0, [r7, #12]
 8001da6:	60b9      	str	r1, [r7, #8]
 8001da8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001daa:	2300      	movs	r3, #0
 8001dac:	617b      	str	r3, [r7, #20]
 8001dae:	e009      	b.n	8001dc4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	1c5a      	adds	r2, r3, #1
 8001db4:	60ba      	str	r2, [r7, #8]
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	4618      	mov	r0, r3
 8001dba:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	617b      	str	r3, [r7, #20]
 8001dc4:	697a      	ldr	r2, [r7, #20]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	dbf1      	blt.n	8001db0 <_write+0x12>
	}
	return len;
 8001dcc:	687b      	ldr	r3, [r7, #4]
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3718      	adds	r7, #24
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}

08001dd6 <_close>:

int _close(int file)
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	b083      	sub	sp, #12
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
	return -1;
 8001dde:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	370c      	adds	r7, #12
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr

08001dee <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001dee:	b480      	push	{r7}
 8001df0:	b083      	sub	sp, #12
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
 8001df6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001dfe:	605a      	str	r2, [r3, #4]
	return 0;
 8001e00:	2300      	movs	r3, #0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	370c      	adds	r7, #12
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr

08001e0e <_isatty>:

int _isatty(int file)
{
 8001e0e:	b480      	push	{r7}
 8001e10:	b083      	sub	sp, #12
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
	return 1;
 8001e16:	2301      	movs	r3, #1
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	370c      	adds	r7, #12
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b085      	sub	sp, #20
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	60f8      	str	r0, [r7, #12]
 8001e2c:	60b9      	str	r1, [r7, #8]
 8001e2e:	607a      	str	r2, [r7, #4]
	return 0;
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3714      	adds	r7, #20
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
	...

08001e40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b086      	sub	sp, #24
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e48:	4a14      	ldr	r2, [pc, #80]	; (8001e9c <_sbrk+0x5c>)
 8001e4a:	4b15      	ldr	r3, [pc, #84]	; (8001ea0 <_sbrk+0x60>)
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e54:	4b13      	ldr	r3, [pc, #76]	; (8001ea4 <_sbrk+0x64>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d102      	bne.n	8001e62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e5c:	4b11      	ldr	r3, [pc, #68]	; (8001ea4 <_sbrk+0x64>)
 8001e5e:	4a12      	ldr	r2, [pc, #72]	; (8001ea8 <_sbrk+0x68>)
 8001e60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e62:	4b10      	ldr	r3, [pc, #64]	; (8001ea4 <_sbrk+0x64>)
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4413      	add	r3, r2
 8001e6a:	693a      	ldr	r2, [r7, #16]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d207      	bcs.n	8001e80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e70:	f004 fa48 	bl	8006304 <__errno>
 8001e74:	4603      	mov	r3, r0
 8001e76:	220c      	movs	r2, #12
 8001e78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e7e:	e009      	b.n	8001e94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e80:	4b08      	ldr	r3, [pc, #32]	; (8001ea4 <_sbrk+0x64>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e86:	4b07      	ldr	r3, [pc, #28]	; (8001ea4 <_sbrk+0x64>)
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4413      	add	r3, r2
 8001e8e:	4a05      	ldr	r2, [pc, #20]	; (8001ea4 <_sbrk+0x64>)
 8001e90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e92:	68fb      	ldr	r3, [r7, #12]
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3718      	adds	r7, #24
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	20003000 	.word	0x20003000
 8001ea0:	00000400 	.word	0x00000400
 8001ea4:	20000374 	.word	0x20000374
 8001ea8:	20000390 	.word	0x20000390

08001eac <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001eb0:	4b06      	ldr	r3, [pc, #24]	; (8001ecc <SystemInit+0x20>)
 8001eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eb6:	4a05      	ldr	r2, [pc, #20]	; (8001ecc <SystemInit+0x20>)
 8001eb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ebc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ec0:	bf00      	nop
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	e000ed00 	.word	0xe000ed00

08001ed0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001ed0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f08 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ed4:	480d      	ldr	r0, [pc, #52]	; (8001f0c <LoopForever+0x6>)
  ldr r1, =_edata
 8001ed6:	490e      	ldr	r1, [pc, #56]	; (8001f10 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ed8:	4a0e      	ldr	r2, [pc, #56]	; (8001f14 <LoopForever+0xe>)
  movs r3, #0
 8001eda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001edc:	e002      	b.n	8001ee4 <LoopCopyDataInit>

08001ede <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ede:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ee0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ee2:	3304      	adds	r3, #4

08001ee4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ee4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ee6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ee8:	d3f9      	bcc.n	8001ede <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001eea:	4a0b      	ldr	r2, [pc, #44]	; (8001f18 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001eec:	4c0b      	ldr	r4, [pc, #44]	; (8001f1c <LoopForever+0x16>)
  movs r3, #0
 8001eee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ef0:	e001      	b.n	8001ef6 <LoopFillZerobss>

08001ef2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ef2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ef4:	3204      	adds	r2, #4

08001ef6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ef6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ef8:	d3fb      	bcc.n	8001ef2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001efa:	f7ff ffd7 	bl	8001eac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001efe:	f004 fa07 	bl	8006310 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f02:	f7ff fa69 	bl	80013d8 <main>

08001f06 <LoopForever>:

LoopForever:
    b LoopForever
 8001f06:	e7fe      	b.n	8001f06 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001f08:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001f0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f10:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001f14:	0800b90c 	.word	0x0800b90c
  ldr r2, =_sbss
 8001f18:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001f1c:	2000038c 	.word	0x2000038c

08001f20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f20:	e7fe      	b.n	8001f20 <ADC1_2_IRQHandler>
	...

08001f24 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f28:	4b08      	ldr	r3, [pc, #32]	; (8001f4c <HAL_Init+0x28>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a07      	ldr	r2, [pc, #28]	; (8001f4c <HAL_Init+0x28>)
 8001f2e:	f043 0310 	orr.w	r3, r3, #16
 8001f32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f34:	2003      	movs	r0, #3
 8001f36:	f001 f8a5 	bl	8003084 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f3a:	2000      	movs	r0, #0
 8001f3c:	f000 f808 	bl	8001f50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f40:	f7ff fd8e 	bl	8001a60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f44:	2300      	movs	r3, #0
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	40022000 	.word	0x40022000

08001f50 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f58:	4b12      	ldr	r3, [pc, #72]	; (8001fa4 <HAL_InitTick+0x54>)
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	4b12      	ldr	r3, [pc, #72]	; (8001fa8 <HAL_InitTick+0x58>)
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	4619      	mov	r1, r3
 8001f62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f66:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f001 f8af 	bl	80030d2 <HAL_SYSTICK_Config>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d001      	beq.n	8001f7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e00e      	b.n	8001f9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2b0f      	cmp	r3, #15
 8001f82:	d80a      	bhi.n	8001f9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f84:	2200      	movs	r2, #0
 8001f86:	6879      	ldr	r1, [r7, #4]
 8001f88:	f04f 30ff 	mov.w	r0, #4294967295
 8001f8c:	f001 f885 	bl	800309a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f90:	4a06      	ldr	r2, [pc, #24]	; (8001fac <HAL_InitTick+0x5c>)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001f96:	2300      	movs	r3, #0
 8001f98:	e000      	b.n	8001f9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3708      	adds	r7, #8
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	20000000 	.word	0x20000000
 8001fa8:	20000008 	.word	0x20000008
 8001fac:	20000004 	.word	0x20000004

08001fb0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fb4:	4b06      	ldr	r3, [pc, #24]	; (8001fd0 <HAL_IncTick+0x20>)
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	461a      	mov	r2, r3
 8001fba:	4b06      	ldr	r3, [pc, #24]	; (8001fd4 <HAL_IncTick+0x24>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4413      	add	r3, r2
 8001fc0:	4a04      	ldr	r2, [pc, #16]	; (8001fd4 <HAL_IncTick+0x24>)
 8001fc2:	6013      	str	r3, [r2, #0]
}
 8001fc4:	bf00      	nop
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	20000008 	.word	0x20000008
 8001fd4:	20000378 	.word	0x20000378

08001fd8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  return uwTick;  
 8001fdc:	4b03      	ldr	r3, [pc, #12]	; (8001fec <HAL_GetTick+0x14>)
 8001fde:	681b      	ldr	r3, [r3, #0]
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	20000378 	.word	0x20000378

08001ff0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ff8:	f7ff ffee 	bl	8001fd8 <HAL_GetTick>
 8001ffc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002008:	d005      	beq.n	8002016 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800200a:	4b0a      	ldr	r3, [pc, #40]	; (8002034 <HAL_Delay+0x44>)
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	461a      	mov	r2, r3
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	4413      	add	r3, r2
 8002014:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002016:	bf00      	nop
 8002018:	f7ff ffde 	bl	8001fd8 <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	68fa      	ldr	r2, [r7, #12]
 8002024:	429a      	cmp	r2, r3
 8002026:	d8f7      	bhi.n	8002018 <HAL_Delay+0x28>
  {
  }
}
 8002028:	bf00      	nop
 800202a:	bf00      	nop
 800202c:	3710      	adds	r7, #16
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	20000008 	.word	0x20000008

08002038 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b09a      	sub	sp, #104	; 0x68
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002040:	2300      	movs	r3, #0
 8002042:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8002046:	2300      	movs	r3, #0
 8002048:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 800204a:	2300      	movs	r3, #0
 800204c:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d101      	bne.n	8002058 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e172      	b.n	800233e <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	691b      	ldr	r3, [r3, #16]
 800205c:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002062:	f003 0310 	and.w	r3, r3, #16
 8002066:	2b00      	cmp	r3, #0
 8002068:	d176      	bne.n	8002158 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206e:	2b00      	cmp	r3, #0
 8002070:	d152      	bne.n	8002118 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2200      	movs	r2, #0
 8002076:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2200      	movs	r2, #0
 8002082:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2200      	movs	r2, #0
 8002088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f7ff fd0b 	bl	8001aa8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d13b      	bne.n	8002118 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f000 fed7 	bl	8002e54 <ADC_Disable>
 80020a6:	4603      	mov	r3, r0
 80020a8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b0:	f003 0310 	and.w	r3, r3, #16
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d12f      	bne.n	8002118 <HAL_ADC_Init+0xe0>
 80020b8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d12b      	bne.n	8002118 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80020c8:	f023 0302 	bic.w	r3, r3, #2
 80020cc:	f043 0202 	orr.w	r2, r3, #2
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	689a      	ldr	r2, [r3, #8]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80020e2:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	689a      	ldr	r2, [r3, #8]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80020f2:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80020f4:	4b94      	ldr	r3, [pc, #592]	; (8002348 <HAL_ADC_Init+0x310>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a94      	ldr	r2, [pc, #592]	; (800234c <HAL_ADC_Init+0x314>)
 80020fa:	fba2 2303 	umull	r2, r3, r2, r3
 80020fe:	0c9a      	lsrs	r2, r3, #18
 8002100:	4613      	mov	r3, r2
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	4413      	add	r3, r2
 8002106:	005b      	lsls	r3, r3, #1
 8002108:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800210a:	e002      	b.n	8002112 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	3b01      	subs	r3, #1
 8002110:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d1f9      	bne.n	800210c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d007      	beq.n	8002136 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002130:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002134:	d110      	bne.n	8002158 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213a:	f023 0312 	bic.w	r3, r3, #18
 800213e:	f043 0210 	orr.w	r2, r3, #16
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800214a:	f043 0201 	orr.w	r2, r3, #1
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215c:	f003 0310 	and.w	r3, r3, #16
 8002160:	2b00      	cmp	r3, #0
 8002162:	f040 80df 	bne.w	8002324 <HAL_ADC_Init+0x2ec>
 8002166:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800216a:	2b00      	cmp	r3, #0
 800216c:	f040 80da 	bne.w	8002324 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800217a:	2b00      	cmp	r3, #0
 800217c:	f040 80d2 	bne.w	8002324 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002184:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002188:	f043 0202 	orr.w	r2, r3, #2
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002190:	4b6f      	ldr	r3, [pc, #444]	; (8002350 <HAL_ADC_Init+0x318>)
 8002192:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800219c:	d102      	bne.n	80021a4 <HAL_ADC_Init+0x16c>
 800219e:	4b6d      	ldr	r3, [pc, #436]	; (8002354 <HAL_ADC_Init+0x31c>)
 80021a0:	60fb      	str	r3, [r7, #12]
 80021a2:	e002      	b.n	80021aa <HAL_ADC_Init+0x172>
 80021a4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80021a8:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	f003 0303 	and.w	r3, r3, #3
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d108      	bne.n	80021ca <HAL_ADC_Init+0x192>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0301 	and.w	r3, r3, #1
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d101      	bne.n	80021ca <HAL_ADC_Init+0x192>
 80021c6:	2301      	movs	r3, #1
 80021c8:	e000      	b.n	80021cc <HAL_ADC_Init+0x194>
 80021ca:	2300      	movs	r3, #0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d11c      	bne.n	800220a <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80021d0:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d010      	beq.n	80021f8 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	f003 0303 	and.w	r3, r3, #3
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d107      	bne.n	80021f2 <HAL_ADC_Init+0x1ba>
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d101      	bne.n	80021f2 <HAL_ADC_Init+0x1ba>
 80021ee:	2301      	movs	r3, #1
 80021f0:	e000      	b.n	80021f4 <HAL_ADC_Init+0x1bc>
 80021f2:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d108      	bne.n	800220a <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80021f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	431a      	orrs	r2, r3
 8002206:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002208:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	7e5b      	ldrb	r3, [r3, #25]
 800220e:	035b      	lsls	r3, r3, #13
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002214:	2a01      	cmp	r2, #1
 8002216:	d002      	beq.n	800221e <HAL_ADC_Init+0x1e6>
 8002218:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800221c:	e000      	b.n	8002220 <HAL_ADC_Init+0x1e8>
 800221e:	2200      	movs	r2, #0
 8002220:	431a      	orrs	r2, r3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	68db      	ldr	r3, [r3, #12]
 8002226:	431a      	orrs	r2, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	4313      	orrs	r3, r2
 800222e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002230:	4313      	orrs	r3, r2
 8002232:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f893 3020 	ldrb.w	r3, [r3, #32]
 800223a:	2b01      	cmp	r3, #1
 800223c:	d11b      	bne.n	8002276 <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	7e5b      	ldrb	r3, [r3, #25]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d109      	bne.n	800225a <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224a:	3b01      	subs	r3, #1
 800224c:	045a      	lsls	r2, r3, #17
 800224e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002250:	4313      	orrs	r3, r2
 8002252:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002256:	663b      	str	r3, [r7, #96]	; 0x60
 8002258:	e00d      	b.n	8002276 <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002262:	f043 0220 	orr.w	r2, r3, #32
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800226e:	f043 0201 	orr.w	r2, r3, #1
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800227a:	2b01      	cmp	r3, #1
 800227c:	d007      	beq.n	800228e <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002286:	4313      	orrs	r3, r2
 8002288:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800228a:	4313      	orrs	r3, r2
 800228c:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	f003 030c 	and.w	r3, r3, #12
 8002298:	2b00      	cmp	r3, #0
 800229a:	d114      	bne.n	80022c6 <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	68db      	ldr	r3, [r3, #12]
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	6812      	ldr	r2, [r2, #0]
 80022a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80022aa:	f023 0302 	bic.w	r3, r3, #2
 80022ae:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	7e1b      	ldrb	r3, [r3, #24]
 80022b4:	039a      	lsls	r2, r3, #14
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80022bc:	005b      	lsls	r3, r3, #1
 80022be:	4313      	orrs	r3, r2
 80022c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80022c2:	4313      	orrs	r3, r2
 80022c4:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	68da      	ldr	r2, [r3, #12]
 80022cc:	4b22      	ldr	r3, [pc, #136]	; (8002358 <HAL_ADC_Init+0x320>)
 80022ce:	4013      	ands	r3, r2
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	6812      	ldr	r2, [r2, #0]
 80022d4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80022d6:	430b      	orrs	r3, r1
 80022d8:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	691b      	ldr	r3, [r3, #16]
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d10c      	bne.n	80022fc <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e8:	f023 010f 	bic.w	r1, r3, #15
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	69db      	ldr	r3, [r3, #28]
 80022f0:	1e5a      	subs	r2, r3, #1
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	430a      	orrs	r2, r1
 80022f8:	631a      	str	r2, [r3, #48]	; 0x30
 80022fa:	e007      	b.n	800230c <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f022 020f 	bic.w	r2, r2, #15
 800230a:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2200      	movs	r2, #0
 8002310:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002316:	f023 0303 	bic.w	r3, r3, #3
 800231a:	f043 0201 	orr.w	r2, r3, #1
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	641a      	str	r2, [r3, #64]	; 0x40
 8002322:	e00a      	b.n	800233a <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002328:	f023 0312 	bic.w	r3, r3, #18
 800232c:	f043 0210 	orr.w	r2, r3, #16
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8002334:	2301      	movs	r3, #1
 8002336:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 800233a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800233e:	4618      	mov	r0, r3
 8002340:	3768      	adds	r7, #104	; 0x68
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	20000000 	.word	0x20000000
 800234c:	431bde83 	.word	0x431bde83
 8002350:	50000300 	.word	0x50000300
 8002354:	50000100 	.word	0x50000100
 8002358:	fff0c007 	.word	0xfff0c007

0800235c <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b084      	sub	sp, #16
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002364:	2300      	movs	r3, #0
 8002366:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	f003 0304 	and.w	r3, r3, #4
 8002372:	2b00      	cmp	r3, #0
 8002374:	f040 809c 	bne.w	80024b0 <HAL_ADC_Start+0x154>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800237e:	2b01      	cmp	r3, #1
 8002380:	d101      	bne.n	8002386 <HAL_ADC_Start+0x2a>
 8002382:	2302      	movs	r3, #2
 8002384:	e097      	b.n	80024b6 <HAL_ADC_Start+0x15a>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2201      	movs	r2, #1
 800238a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f000 fcfc 	bl	8002d8c <ADC_Enable>
 8002394:	4603      	mov	r3, r0
 8002396:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002398:	7bfb      	ldrb	r3, [r7, #15]
 800239a:	2b00      	cmp	r3, #0
 800239c:	f040 8083 	bne.w	80024a6 <HAL_ADC_Start+0x14a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80023a8:	f023 0301 	bic.w	r3, r3, #1
 80023ac:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80023b4:	4b42      	ldr	r3, [pc, #264]	; (80024c0 <HAL_ADC_Start+0x164>)
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	f003 031f 	and.w	r3, r3, #31
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d004      	beq.n	80023ca <HAL_ADC_Start+0x6e>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023c8:	d115      	bne.n	80023f6 <HAL_ADC_Start+0x9a>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ce:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d027      	beq.n	8002434 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80023ec:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80023f4:	e01e      	b.n	8002434 <HAL_ADC_Start+0xd8>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800240a:	d004      	beq.n	8002416 <HAL_ADC_Start+0xba>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a2c      	ldr	r2, [pc, #176]	; (80024c4 <HAL_ADC_Start+0x168>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d10e      	bne.n	8002434 <HAL_ADC_Start+0xd8>
 8002416:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d007      	beq.n	8002434 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002428:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800242c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002438:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800243c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002440:	d106      	bne.n	8002450 <HAL_ADC_Start+0xf4>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002446:	f023 0206 	bic.w	r2, r3, #6
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	645a      	str	r2, [r3, #68]	; 0x44
 800244e:	e002      	b.n	8002456 <HAL_ADC_Start+0xfa>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2200      	movs	r2, #0
 8002454:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	221c      	movs	r2, #28
 8002464:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002466:	4b16      	ldr	r3, [pc, #88]	; (80024c0 <HAL_ADC_Start+0x164>)
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	f003 031f 	and.w	r3, r3, #31
 800246e:	2b00      	cmp	r3, #0
 8002470:	d010      	beq.n	8002494 <HAL_ADC_Start+0x138>
 8002472:	4b13      	ldr	r3, [pc, #76]	; (80024c0 <HAL_ADC_Start+0x164>)
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	f003 031f 	and.w	r3, r3, #31
 800247a:	2b05      	cmp	r3, #5
 800247c:	d00a      	beq.n	8002494 <HAL_ADC_Start+0x138>
 800247e:	4b10      	ldr	r3, [pc, #64]	; (80024c0 <HAL_ADC_Start+0x164>)
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f003 031f 	and.w	r3, r3, #31
 8002486:	2b09      	cmp	r3, #9
 8002488:	d004      	beq.n	8002494 <HAL_ADC_Start+0x138>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002492:	d10f      	bne.n	80024b4 <HAL_ADC_Start+0x158>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	689a      	ldr	r2, [r3, #8]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f042 0204 	orr.w	r2, r2, #4
 80024a2:	609a      	str	r2, [r3, #8]
 80024a4:	e006      	b.n	80024b4 <HAL_ADC_Start+0x158>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80024ae:	e001      	b.n	80024b4 <HAL_ADC_Start+0x158>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80024b0:	2302      	movs	r3, #2
 80024b2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80024b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3710      	adds	r7, #16
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	50000300 	.word	0x50000300
 80024c4:	50000100 	.word	0x50000100

080024c8 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b086      	sub	sp, #24
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 80024d2:	2300      	movs	r3, #0
 80024d4:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	695b      	ldr	r3, [r3, #20]
 80024da:	2b08      	cmp	r3, #8
 80024dc:	d102      	bne.n	80024e4 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80024de:	2308      	movs	r3, #8
 80024e0:	617b      	str	r3, [r7, #20]
 80024e2:	e02e      	b.n	8002542 <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024e4:	4b5e      	ldr	r3, [pc, #376]	; (8002660 <HAL_ADC_PollForConversion+0x198>)
 80024e6:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	f003 031f 	and.w	r3, r3, #31
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d112      	bne.n	800251a <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	f003 0301 	and.w	r3, r3, #1
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d11d      	bne.n	800253e <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002506:	f043 0220 	orr.w	r2, r3, #32
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2200      	movs	r2, #0
 8002512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e09d      	b.n	8002656 <HAL_ADC_PollForConversion+0x18e>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d00b      	beq.n	800253e <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252a:	f043 0220 	orr.w	r2, r3, #32
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e08b      	b.n	8002656 <HAL_ADC_PollForConversion+0x18e>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800253e:	230c      	movs	r3, #12
 8002540:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002542:	4b47      	ldr	r3, [pc, #284]	; (8002660 <HAL_ADC_PollForConversion+0x198>)
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	f003 031f 	and.w	r3, r3, #31
 800254a:	2b00      	cmp	r3, #0
 800254c:	d004      	beq.n	8002558 <HAL_ADC_PollForConversion+0x90>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002556:	d104      	bne.n	8002562 <HAL_ADC_PollForConversion+0x9a>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	613b      	str	r3, [r7, #16]
 8002560:	e003      	b.n	800256a <HAL_ADC_PollForConversion+0xa2>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002562:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 800256a:	f7ff fd35 	bl	8001fd8 <HAL_GetTick>
 800256e:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002570:	e021      	b.n	80025b6 <HAL_ADC_PollForConversion+0xee>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002578:	d01d      	beq.n	80025b6 <HAL_ADC_PollForConversion+0xee>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d007      	beq.n	8002590 <HAL_ADC_PollForConversion+0xc8>
 8002580:	f7ff fd2a 	bl	8001fd8 <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	683a      	ldr	r2, [r7, #0]
 800258c:	429a      	cmp	r2, r3
 800258e:	d212      	bcs.n	80025b6 <HAL_ADC_PollForConversion+0xee>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	4013      	ands	r3, r2
 800259a:	2b00      	cmp	r3, #0
 800259c:	d10b      	bne.n	80025b6 <HAL_ADC_PollForConversion+0xee>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a2:	f043 0204 	orr.w	r2, r3, #4
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2200      	movs	r2, #0
 80025ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e04f      	b.n	8002656 <HAL_ADC_PollForConversion+0x18e>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	4013      	ands	r3, r2
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d0d6      	beq.n	8002572 <HAL_ADC_PollForConversion+0xaa>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d131      	bne.n	8002642 <HAL_ADC_PollForConversion+0x17a>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d12c      	bne.n	8002642 <HAL_ADC_PollForConversion+0x17a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0308 	and.w	r3, r3, #8
 80025f2:	2b08      	cmp	r3, #8
 80025f4:	d125      	bne.n	8002642 <HAL_ADC_PollForConversion+0x17a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	f003 0304 	and.w	r3, r3, #4
 8002600:	2b00      	cmp	r3, #0
 8002602:	d112      	bne.n	800262a <HAL_ADC_PollForConversion+0x162>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002608:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002614:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002618:	2b00      	cmp	r3, #0
 800261a:	d112      	bne.n	8002642 <HAL_ADC_PollForConversion+0x17a>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002620:	f043 0201 	orr.w	r2, r3, #1
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	641a      	str	r2, [r3, #64]	; 0x40
 8002628:	e00b      	b.n	8002642 <HAL_ADC_PollForConversion+0x17a>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262e:	f043 0220 	orr.w	r2, r3, #32
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800263a:	f043 0201 	orr.w	r2, r3, #1
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002648:	2b00      	cmp	r3, #0
 800264a:	d103      	bne.n	8002654 <HAL_ADC_PollForConversion+0x18c>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	697a      	ldr	r2, [r7, #20]
 8002652:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002654:	2300      	movs	r3, #0
}
 8002656:	4618      	mov	r0, r3
 8002658:	3718      	adds	r7, #24
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	50000300 	.word	0x50000300

08002664 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002672:	4618      	mov	r0, r3
 8002674:	370c      	adds	r7, #12
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
	...

08002680 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002680:	b480      	push	{r7}
 8002682:	b09b      	sub	sp, #108	; 0x6c
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800268a:	2300      	movs	r3, #0
 800268c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002690:	2300      	movs	r3, #0
 8002692:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800269a:	2b01      	cmp	r3, #1
 800269c:	d101      	bne.n	80026a2 <HAL_ADC_ConfigChannel+0x22>
 800269e:	2302      	movs	r3, #2
 80026a0:	e2a4      	b.n	8002bec <HAL_ADC_ConfigChannel+0x56c>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2201      	movs	r2, #1
 80026a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	f003 0304 	and.w	r3, r3, #4
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	f040 8288 	bne.w	8002bca <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	2b04      	cmp	r3, #4
 80026c0:	d81c      	bhi.n	80026fc <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	685a      	ldr	r2, [r3, #4]
 80026cc:	4613      	mov	r3, r2
 80026ce:	005b      	lsls	r3, r3, #1
 80026d0:	4413      	add	r3, r2
 80026d2:	005b      	lsls	r3, r3, #1
 80026d4:	461a      	mov	r2, r3
 80026d6:	231f      	movs	r3, #31
 80026d8:	4093      	lsls	r3, r2
 80026da:	43db      	mvns	r3, r3
 80026dc:	4019      	ands	r1, r3
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	6818      	ldr	r0, [r3, #0]
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	685a      	ldr	r2, [r3, #4]
 80026e6:	4613      	mov	r3, r2
 80026e8:	005b      	lsls	r3, r3, #1
 80026ea:	4413      	add	r3, r2
 80026ec:	005b      	lsls	r3, r3, #1
 80026ee:	fa00 f203 	lsl.w	r2, r0, r3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	430a      	orrs	r2, r1
 80026f8:	631a      	str	r2, [r3, #48]	; 0x30
 80026fa:	e063      	b.n	80027c4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	2b09      	cmp	r3, #9
 8002702:	d81e      	bhi.n	8002742 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	685a      	ldr	r2, [r3, #4]
 800270e:	4613      	mov	r3, r2
 8002710:	005b      	lsls	r3, r3, #1
 8002712:	4413      	add	r3, r2
 8002714:	005b      	lsls	r3, r3, #1
 8002716:	3b1e      	subs	r3, #30
 8002718:	221f      	movs	r2, #31
 800271a:	fa02 f303 	lsl.w	r3, r2, r3
 800271e:	43db      	mvns	r3, r3
 8002720:	4019      	ands	r1, r3
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	6818      	ldr	r0, [r3, #0]
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	685a      	ldr	r2, [r3, #4]
 800272a:	4613      	mov	r3, r2
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	4413      	add	r3, r2
 8002730:	005b      	lsls	r3, r3, #1
 8002732:	3b1e      	subs	r3, #30
 8002734:	fa00 f203 	lsl.w	r2, r0, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	430a      	orrs	r2, r1
 800273e:	635a      	str	r2, [r3, #52]	; 0x34
 8002740:	e040      	b.n	80027c4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	2b0e      	cmp	r3, #14
 8002748:	d81e      	bhi.n	8002788 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	685a      	ldr	r2, [r3, #4]
 8002754:	4613      	mov	r3, r2
 8002756:	005b      	lsls	r3, r3, #1
 8002758:	4413      	add	r3, r2
 800275a:	005b      	lsls	r3, r3, #1
 800275c:	3b3c      	subs	r3, #60	; 0x3c
 800275e:	221f      	movs	r2, #31
 8002760:	fa02 f303 	lsl.w	r3, r2, r3
 8002764:	43db      	mvns	r3, r3
 8002766:	4019      	ands	r1, r3
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	6818      	ldr	r0, [r3, #0]
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	685a      	ldr	r2, [r3, #4]
 8002770:	4613      	mov	r3, r2
 8002772:	005b      	lsls	r3, r3, #1
 8002774:	4413      	add	r3, r2
 8002776:	005b      	lsls	r3, r3, #1
 8002778:	3b3c      	subs	r3, #60	; 0x3c
 800277a:	fa00 f203 	lsl.w	r2, r0, r3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	430a      	orrs	r2, r1
 8002784:	639a      	str	r2, [r3, #56]	; 0x38
 8002786:	e01d      	b.n	80027c4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	685a      	ldr	r2, [r3, #4]
 8002792:	4613      	mov	r3, r2
 8002794:	005b      	lsls	r3, r3, #1
 8002796:	4413      	add	r3, r2
 8002798:	005b      	lsls	r3, r3, #1
 800279a:	3b5a      	subs	r3, #90	; 0x5a
 800279c:	221f      	movs	r2, #31
 800279e:	fa02 f303 	lsl.w	r3, r2, r3
 80027a2:	43db      	mvns	r3, r3
 80027a4:	4019      	ands	r1, r3
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	6818      	ldr	r0, [r3, #0]
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	685a      	ldr	r2, [r3, #4]
 80027ae:	4613      	mov	r3, r2
 80027b0:	005b      	lsls	r3, r3, #1
 80027b2:	4413      	add	r3, r2
 80027b4:	005b      	lsls	r3, r3, #1
 80027b6:	3b5a      	subs	r3, #90	; 0x5a
 80027b8:	fa00 f203 	lsl.w	r2, r0, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	430a      	orrs	r2, r1
 80027c2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	f003 030c 	and.w	r3, r3, #12
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	f040 80e5 	bne.w	800299e <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2b09      	cmp	r3, #9
 80027da:	d91c      	bls.n	8002816 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	6999      	ldr	r1, [r3, #24]
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	4613      	mov	r3, r2
 80027e8:	005b      	lsls	r3, r3, #1
 80027ea:	4413      	add	r3, r2
 80027ec:	3b1e      	subs	r3, #30
 80027ee:	2207      	movs	r2, #7
 80027f0:	fa02 f303 	lsl.w	r3, r2, r3
 80027f4:	43db      	mvns	r3, r3
 80027f6:	4019      	ands	r1, r3
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	6898      	ldr	r0, [r3, #8]
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	4613      	mov	r3, r2
 8002802:	005b      	lsls	r3, r3, #1
 8002804:	4413      	add	r3, r2
 8002806:	3b1e      	subs	r3, #30
 8002808:	fa00 f203 	lsl.w	r2, r0, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	430a      	orrs	r2, r1
 8002812:	619a      	str	r2, [r3, #24]
 8002814:	e019      	b.n	800284a <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	6959      	ldr	r1, [r3, #20]
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	4613      	mov	r3, r2
 8002822:	005b      	lsls	r3, r3, #1
 8002824:	4413      	add	r3, r2
 8002826:	2207      	movs	r2, #7
 8002828:	fa02 f303 	lsl.w	r3, r2, r3
 800282c:	43db      	mvns	r3, r3
 800282e:	4019      	ands	r1, r3
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	6898      	ldr	r0, [r3, #8]
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	4613      	mov	r3, r2
 800283a:	005b      	lsls	r3, r3, #1
 800283c:	4413      	add	r3, r2
 800283e:	fa00 f203 	lsl.w	r2, r0, r3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	430a      	orrs	r2, r1
 8002848:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	695a      	ldr	r2, [r3, #20]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	08db      	lsrs	r3, r3, #3
 8002856:	f003 0303 	and.w	r3, r3, #3
 800285a:	005b      	lsls	r3, r3, #1
 800285c:	fa02 f303 	lsl.w	r3, r2, r3
 8002860:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	691b      	ldr	r3, [r3, #16]
 8002866:	3b01      	subs	r3, #1
 8002868:	2b03      	cmp	r3, #3
 800286a:	d84f      	bhi.n	800290c <HAL_ADC_ConfigChannel+0x28c>
 800286c:	a201      	add	r2, pc, #4	; (adr r2, 8002874 <HAL_ADC_ConfigChannel+0x1f4>)
 800286e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002872:	bf00      	nop
 8002874:	08002885 	.word	0x08002885
 8002878:	080028a7 	.word	0x080028a7
 800287c:	080028c9 	.word	0x080028c9
 8002880:	080028eb 	.word	0x080028eb
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800288a:	4b94      	ldr	r3, [pc, #592]	; (8002adc <HAL_ADC_ConfigChannel+0x45c>)
 800288c:	4013      	ands	r3, r2
 800288e:	683a      	ldr	r2, [r7, #0]
 8002890:	6812      	ldr	r2, [r2, #0]
 8002892:	0691      	lsls	r1, r2, #26
 8002894:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002896:	430a      	orrs	r2, r1
 8002898:	431a      	orrs	r2, r3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80028a2:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80028a4:	e07e      	b.n	80029a4 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80028ac:	4b8b      	ldr	r3, [pc, #556]	; (8002adc <HAL_ADC_ConfigChannel+0x45c>)
 80028ae:	4013      	ands	r3, r2
 80028b0:	683a      	ldr	r2, [r7, #0]
 80028b2:	6812      	ldr	r2, [r2, #0]
 80028b4:	0691      	lsls	r1, r2, #26
 80028b6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80028b8:	430a      	orrs	r2, r1
 80028ba:	431a      	orrs	r2, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80028c4:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80028c6:	e06d      	b.n	80029a4 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80028ce:	4b83      	ldr	r3, [pc, #524]	; (8002adc <HAL_ADC_ConfigChannel+0x45c>)
 80028d0:	4013      	ands	r3, r2
 80028d2:	683a      	ldr	r2, [r7, #0]
 80028d4:	6812      	ldr	r2, [r2, #0]
 80028d6:	0691      	lsls	r1, r2, #26
 80028d8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80028da:	430a      	orrs	r2, r1
 80028dc:	431a      	orrs	r2, r3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80028e6:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80028e8:	e05c      	b.n	80029a4 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80028f0:	4b7a      	ldr	r3, [pc, #488]	; (8002adc <HAL_ADC_ConfigChannel+0x45c>)
 80028f2:	4013      	ands	r3, r2
 80028f4:	683a      	ldr	r2, [r7, #0]
 80028f6:	6812      	ldr	r2, [r2, #0]
 80028f8:	0691      	lsls	r1, r2, #26
 80028fa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80028fc:	430a      	orrs	r2, r1
 80028fe:	431a      	orrs	r2, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002908:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800290a:	e04b      	b.n	80029a4 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002912:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	069b      	lsls	r3, r3, #26
 800291c:	429a      	cmp	r2, r3
 800291e:	d107      	bne.n	8002930 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800292e:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002936:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	069b      	lsls	r3, r3, #26
 8002940:	429a      	cmp	r2, r3
 8002942:	d107      	bne.n	8002954 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002952:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800295a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	069b      	lsls	r3, r3, #26
 8002964:	429a      	cmp	r2, r3
 8002966:	d107      	bne.n	8002978 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002976:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800297e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	069b      	lsls	r3, r3, #26
 8002988:	429a      	cmp	r2, r3
 800298a:	d10a      	bne.n	80029a2 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800299a:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 800299c:	e001      	b.n	80029a2 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 800299e:	bf00      	nop
 80029a0:	e000      	b.n	80029a4 <HAL_ADC_ConfigChannel+0x324>
      break;
 80029a2:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	f003 0303 	and.w	r3, r3, #3
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d108      	bne.n	80029c4 <HAL_ADC_ConfigChannel+0x344>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0301 	and.w	r3, r3, #1
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d101      	bne.n	80029c4 <HAL_ADC_ConfigChannel+0x344>
 80029c0:	2301      	movs	r3, #1
 80029c2:	e000      	b.n	80029c6 <HAL_ADC_ConfigChannel+0x346>
 80029c4:	2300      	movs	r3, #0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	f040 810a 	bne.w	8002be0 <HAL_ADC_ConfigChannel+0x560>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d00f      	beq.n	80029f4 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	2201      	movs	r2, #1
 80029e2:	fa02 f303 	lsl.w	r3, r2, r3
 80029e6:	43da      	mvns	r2, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	400a      	ands	r2, r1
 80029ee:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80029f2:	e049      	b.n	8002a88 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2201      	movs	r2, #1
 8002a02:	409a      	lsls	r2, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	430a      	orrs	r2, r1
 8002a0a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2b09      	cmp	r3, #9
 8002a14:	d91c      	bls.n	8002a50 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	6999      	ldr	r1, [r3, #24]
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	4613      	mov	r3, r2
 8002a22:	005b      	lsls	r3, r3, #1
 8002a24:	4413      	add	r3, r2
 8002a26:	3b1b      	subs	r3, #27
 8002a28:	2207      	movs	r2, #7
 8002a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2e:	43db      	mvns	r3, r3
 8002a30:	4019      	ands	r1, r3
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	6898      	ldr	r0, [r3, #8]
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	005b      	lsls	r3, r3, #1
 8002a3e:	4413      	add	r3, r2
 8002a40:	3b1b      	subs	r3, #27
 8002a42:	fa00 f203 	lsl.w	r2, r0, r3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	430a      	orrs	r2, r1
 8002a4c:	619a      	str	r2, [r3, #24]
 8002a4e:	e01b      	b.n	8002a88 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	6959      	ldr	r1, [r3, #20]
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	1c5a      	adds	r2, r3, #1
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	005b      	lsls	r3, r3, #1
 8002a60:	4413      	add	r3, r2
 8002a62:	2207      	movs	r2, #7
 8002a64:	fa02 f303 	lsl.w	r3, r2, r3
 8002a68:	43db      	mvns	r3, r3
 8002a6a:	4019      	ands	r1, r3
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	6898      	ldr	r0, [r3, #8]
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	1c5a      	adds	r2, r3, #1
 8002a76:	4613      	mov	r3, r2
 8002a78:	005b      	lsls	r3, r3, #1
 8002a7a:	4413      	add	r3, r2
 8002a7c:	fa00 f203 	lsl.w	r2, r0, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	430a      	orrs	r2, r1
 8002a86:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a88:	4b15      	ldr	r3, [pc, #84]	; (8002ae0 <HAL_ADC_ConfigChannel+0x460>)
 8002a8a:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2b10      	cmp	r3, #16
 8002a92:	d105      	bne.n	8002aa0 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002a94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d015      	beq.n	8002acc <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002aa4:	2b11      	cmp	r3, #17
 8002aa6:	d105      	bne.n	8002ab4 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002aa8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d00b      	beq.n	8002acc <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002ab8:	2b12      	cmp	r3, #18
 8002aba:	f040 8091 	bne.w	8002be0 <HAL_ADC_ConfigChannel+0x560>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002abe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	f040 808a 	bne.w	8002be0 <HAL_ADC_ConfigChannel+0x560>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ad4:	d108      	bne.n	8002ae8 <HAL_ADC_ConfigChannel+0x468>
 8002ad6:	4b03      	ldr	r3, [pc, #12]	; (8002ae4 <HAL_ADC_ConfigChannel+0x464>)
 8002ad8:	60fb      	str	r3, [r7, #12]
 8002ada:	e008      	b.n	8002aee <HAL_ADC_ConfigChannel+0x46e>
 8002adc:	83fff000 	.word	0x83fff000
 8002ae0:	50000300 	.word	0x50000300
 8002ae4:	50000100 	.word	0x50000100
 8002ae8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002aec:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	f003 0303 	and.w	r3, r3, #3
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d108      	bne.n	8002b0e <HAL_ADC_ConfigChannel+0x48e>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0301 	and.w	r3, r3, #1
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d101      	bne.n	8002b0e <HAL_ADC_ConfigChannel+0x48e>
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e000      	b.n	8002b10 <HAL_ADC_ConfigChannel+0x490>
 8002b0e:	2300      	movs	r3, #0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d150      	bne.n	8002bb6 <HAL_ADC_ConfigChannel+0x536>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002b14:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d010      	beq.n	8002b3c <HAL_ADC_ConfigChannel+0x4bc>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	f003 0303 	and.w	r3, r3, #3
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d107      	bne.n	8002b36 <HAL_ADC_ConfigChannel+0x4b6>
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0301 	and.w	r3, r3, #1
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d101      	bne.n	8002b36 <HAL_ADC_ConfigChannel+0x4b6>
 8002b32:	2301      	movs	r3, #1
 8002b34:	e000      	b.n	8002b38 <HAL_ADC_ConfigChannel+0x4b8>
 8002b36:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d13c      	bne.n	8002bb6 <HAL_ADC_ConfigChannel+0x536>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2b10      	cmp	r3, #16
 8002b42:	d11d      	bne.n	8002b80 <HAL_ADC_ConfigChannel+0x500>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b4c:	d118      	bne.n	8002b80 <HAL_ADC_ConfigChannel+0x500>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002b4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002b56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b58:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002b5a:	4b27      	ldr	r3, [pc, #156]	; (8002bf8 <HAL_ADC_ConfigChannel+0x578>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a27      	ldr	r2, [pc, #156]	; (8002bfc <HAL_ADC_ConfigChannel+0x57c>)
 8002b60:	fba2 2303 	umull	r2, r3, r2, r3
 8002b64:	0c9a      	lsrs	r2, r3, #18
 8002b66:	4613      	mov	r3, r2
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	4413      	add	r3, r2
 8002b6c:	005b      	lsls	r3, r3, #1
 8002b6e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002b70:	e002      	b.n	8002b78 <HAL_ADC_ConfigChannel+0x4f8>
          {
            wait_loop_index--;
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	3b01      	subs	r3, #1
 8002b76:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d1f9      	bne.n	8002b72 <HAL_ADC_ConfigChannel+0x4f2>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002b7e:	e02e      	b.n	8002bde <HAL_ADC_ConfigChannel+0x55e>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2b11      	cmp	r3, #17
 8002b86:	d10b      	bne.n	8002ba0 <HAL_ADC_ConfigChannel+0x520>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b90:	d106      	bne.n	8002ba0 <HAL_ADC_ConfigChannel+0x520>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002b92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002b9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b9c:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002b9e:	e01e      	b.n	8002bde <HAL_ADC_ConfigChannel+0x55e>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	2b12      	cmp	r3, #18
 8002ba6:	d11a      	bne.n	8002bde <HAL_ADC_ConfigChannel+0x55e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002ba8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002bb0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bb2:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002bb4:	e013      	b.n	8002bde <HAL_ADC_ConfigChannel+0x55e>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bba:	f043 0220 	orr.w	r2, r3, #32
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002bc8:	e00a      	b.n	8002be0 <HAL_ADC_ConfigChannel+0x560>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bce:	f043 0220 	orr.w	r2, r3, #32
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002bdc:	e000      	b.n	8002be0 <HAL_ADC_ConfigChannel+0x560>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002bde:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2200      	movs	r2, #0
 8002be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002be8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	376c      	adds	r7, #108	; 0x6c
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr
 8002bf8:	20000000 	.word	0x20000000
 8002bfc:	431bde83 	.word	0x431bde83

08002c00 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b099      	sub	sp, #100	; 0x64
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c18:	d102      	bne.n	8002c20 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8002c1a:	4b5a      	ldr	r3, [pc, #360]	; (8002d84 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8002c1c:	60bb      	str	r3, [r7, #8]
 8002c1e:	e002      	b.n	8002c26 <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8002c20:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002c24:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d101      	bne.n	8002c30 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e0a2      	b.n	8002d76 <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d101      	bne.n	8002c3e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002c3a:	2302      	movs	r3, #2
 8002c3c:	e09b      	b.n	8002d76 <HAL_ADCEx_MultiModeConfigChannel+0x176>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2201      	movs	r2, #1
 8002c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	f003 0304 	and.w	r3, r3, #4
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d17f      	bne.n	8002d54 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	f003 0304 	and.w	r3, r3, #4
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d179      	bne.n	8002d54 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c60:	4b49      	ldr	r3, [pc, #292]	; (8002d88 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 8002c62:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d040      	beq.n	8002cee <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002c6c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	6859      	ldr	r1, [r3, #4]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002c7e:	035b      	lsls	r3, r3, #13
 8002c80:	430b      	orrs	r3, r1
 8002c82:	431a      	orrs	r2, r3
 8002c84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c86:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	f003 0303 	and.w	r3, r3, #3
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d108      	bne.n	8002ca8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0301 	and.w	r3, r3, #1
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d101      	bne.n	8002ca8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e000      	b.n	8002caa <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8002ca8:	2300      	movs	r3, #0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d15c      	bne.n	8002d68 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	f003 0303 	and.w	r3, r3, #3
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d107      	bne.n	8002cca <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0301 	and.w	r3, r3, #1
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d101      	bne.n	8002cca <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e000      	b.n	8002ccc <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8002cca:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d14b      	bne.n	8002d68 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002cd0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002cd8:	f023 030f 	bic.w	r3, r3, #15
 8002cdc:	683a      	ldr	r2, [r7, #0]
 8002cde:	6811      	ldr	r1, [r2, #0]
 8002ce0:	683a      	ldr	r2, [r7, #0]
 8002ce2:	6892      	ldr	r2, [r2, #8]
 8002ce4:	430a      	orrs	r2, r1
 8002ce6:	431a      	orrs	r2, r3
 8002ce8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cea:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002cec:	e03c      	b.n	8002d68 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002cee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002cf6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cf8:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	f003 0303 	and.w	r3, r3, #3
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d108      	bne.n	8002d1a <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0301 	and.w	r3, r3, #1
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d101      	bne.n	8002d1a <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8002d16:	2301      	movs	r3, #1
 8002d18:	e000      	b.n	8002d1c <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d123      	bne.n	8002d68 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	f003 0303 	and.w	r3, r3, #3
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d107      	bne.n	8002d3c <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0301 	and.w	r3, r3, #1
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d101      	bne.n	8002d3c <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e000      	b.n	8002d3e <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8002d3c:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d112      	bne.n	8002d68 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002d42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002d4a:	f023 030f 	bic.w	r3, r3, #15
 8002d4e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002d50:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d52:	e009      	b.n	8002d68 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d58:	f043 0220 	orr.w	r2, r3, #32
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002d66:	e000      	b.n	8002d6a <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d68:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002d72:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8002d76:	4618      	mov	r0, r3
 8002d78:	3764      	adds	r7, #100	; 0x64
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr
 8002d82:	bf00      	nop
 8002d84:	50000100 	.word	0x50000100
 8002d88:	50000300 	.word	0x50000300

08002d8c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d94:	2300      	movs	r3, #0
 8002d96:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	f003 0303 	and.w	r3, r3, #3
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d108      	bne.n	8002db8 <ADC_Enable+0x2c>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0301 	and.w	r3, r3, #1
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d101      	bne.n	8002db8 <ADC_Enable+0x2c>
 8002db4:	2301      	movs	r3, #1
 8002db6:	e000      	b.n	8002dba <ADC_Enable+0x2e>
 8002db8:	2300      	movs	r3, #0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d143      	bne.n	8002e46 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	689a      	ldr	r2, [r3, #8]
 8002dc4:	4b22      	ldr	r3, [pc, #136]	; (8002e50 <ADC_Enable+0xc4>)
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d00d      	beq.n	8002de8 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd0:	f043 0210 	orr.w	r2, r3, #16
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ddc:	f043 0201 	orr.w	r2, r3, #1
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e02f      	b.n	8002e48 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	689a      	ldr	r2, [r3, #8]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f042 0201 	orr.w	r2, r2, #1
 8002df6:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002df8:	f7ff f8ee 	bl	8001fd8 <HAL_GetTick>
 8002dfc:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002dfe:	e01b      	b.n	8002e38 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002e00:	f7ff f8ea 	bl	8001fd8 <HAL_GetTick>
 8002e04:	4602      	mov	r2, r0
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	d914      	bls.n	8002e38 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0301 	and.w	r3, r3, #1
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d00d      	beq.n	8002e38 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e20:	f043 0210 	orr.w	r2, r3, #16
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e2c:	f043 0201 	orr.w	r2, r3, #1
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e007      	b.n	8002e48 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0301 	and.w	r3, r3, #1
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d1dc      	bne.n	8002e00 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002e46:	2300      	movs	r3, #0
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3710      	adds	r7, #16
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	8000003f 	.word	0x8000003f

08002e54 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b084      	sub	sp, #16
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	f003 0303 	and.w	r3, r3, #3
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d108      	bne.n	8002e80 <ADC_Disable+0x2c>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0301 	and.w	r3, r3, #1
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d101      	bne.n	8002e80 <ADC_Disable+0x2c>
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e000      	b.n	8002e82 <ADC_Disable+0x2e>
 8002e80:	2300      	movs	r3, #0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d047      	beq.n	8002f16 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	f003 030d 	and.w	r3, r3, #13
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d10f      	bne.n	8002eb4 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	689a      	ldr	r2, [r3, #8]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f042 0202 	orr.w	r2, r2, #2
 8002ea2:	609a      	str	r2, [r3, #8]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2203      	movs	r2, #3
 8002eaa:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002eac:	f7ff f894 	bl	8001fd8 <HAL_GetTick>
 8002eb0:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002eb2:	e029      	b.n	8002f08 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb8:	f043 0210 	orr.w	r2, r3, #16
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec4:	f043 0201 	orr.w	r2, r3, #1
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e023      	b.n	8002f18 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002ed0:	f7ff f882 	bl	8001fd8 <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d914      	bls.n	8002f08 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	f003 0301 	and.w	r3, r3, #1
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d10d      	bne.n	8002f08 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef0:	f043 0210 	orr.w	r2, r3, #16
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002efc:	f043 0201 	orr.w	r2, r3, #1
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e007      	b.n	8002f18 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	f003 0301 	and.w	r3, r3, #1
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d0dc      	beq.n	8002ed0 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002f16:	2300      	movs	r3, #0
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3710      	adds	r7, #16
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}

08002f20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b085      	sub	sp, #20
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f003 0307 	and.w	r3, r3, #7
 8002f2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f30:	4b0c      	ldr	r3, [pc, #48]	; (8002f64 <__NVIC_SetPriorityGrouping+0x44>)
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f36:	68ba      	ldr	r2, [r7, #8]
 8002f38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f52:	4a04      	ldr	r2, [pc, #16]	; (8002f64 <__NVIC_SetPriorityGrouping+0x44>)
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	60d3      	str	r3, [r2, #12]
}
 8002f58:	bf00      	nop
 8002f5a:	3714      	adds	r7, #20
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr
 8002f64:	e000ed00 	.word	0xe000ed00

08002f68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f6c:	4b04      	ldr	r3, [pc, #16]	; (8002f80 <__NVIC_GetPriorityGrouping+0x18>)
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	0a1b      	lsrs	r3, r3, #8
 8002f72:	f003 0307 	and.w	r3, r3, #7
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr
 8002f80:	e000ed00 	.word	0xe000ed00

08002f84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	6039      	str	r1, [r7, #0]
 8002f8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	db0a      	blt.n	8002fae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	b2da      	uxtb	r2, r3
 8002f9c:	490c      	ldr	r1, [pc, #48]	; (8002fd0 <__NVIC_SetPriority+0x4c>)
 8002f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fa2:	0112      	lsls	r2, r2, #4
 8002fa4:	b2d2      	uxtb	r2, r2
 8002fa6:	440b      	add	r3, r1
 8002fa8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fac:	e00a      	b.n	8002fc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	b2da      	uxtb	r2, r3
 8002fb2:	4908      	ldr	r1, [pc, #32]	; (8002fd4 <__NVIC_SetPriority+0x50>)
 8002fb4:	79fb      	ldrb	r3, [r7, #7]
 8002fb6:	f003 030f 	and.w	r3, r3, #15
 8002fba:	3b04      	subs	r3, #4
 8002fbc:	0112      	lsls	r2, r2, #4
 8002fbe:	b2d2      	uxtb	r2, r2
 8002fc0:	440b      	add	r3, r1
 8002fc2:	761a      	strb	r2, [r3, #24]
}
 8002fc4:	bf00      	nop
 8002fc6:	370c      	adds	r7, #12
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr
 8002fd0:	e000e100 	.word	0xe000e100
 8002fd4:	e000ed00 	.word	0xe000ed00

08002fd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b089      	sub	sp, #36	; 0x24
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	60f8      	str	r0, [r7, #12]
 8002fe0:	60b9      	str	r1, [r7, #8]
 8002fe2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f003 0307 	and.w	r3, r3, #7
 8002fea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	f1c3 0307 	rsb	r3, r3, #7
 8002ff2:	2b04      	cmp	r3, #4
 8002ff4:	bf28      	it	cs
 8002ff6:	2304      	movcs	r3, #4
 8002ff8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	3304      	adds	r3, #4
 8002ffe:	2b06      	cmp	r3, #6
 8003000:	d902      	bls.n	8003008 <NVIC_EncodePriority+0x30>
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	3b03      	subs	r3, #3
 8003006:	e000      	b.n	800300a <NVIC_EncodePriority+0x32>
 8003008:	2300      	movs	r3, #0
 800300a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800300c:	f04f 32ff 	mov.w	r2, #4294967295
 8003010:	69bb      	ldr	r3, [r7, #24]
 8003012:	fa02 f303 	lsl.w	r3, r2, r3
 8003016:	43da      	mvns	r2, r3
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	401a      	ands	r2, r3
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003020:	f04f 31ff 	mov.w	r1, #4294967295
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	fa01 f303 	lsl.w	r3, r1, r3
 800302a:	43d9      	mvns	r1, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003030:	4313      	orrs	r3, r2
         );
}
 8003032:	4618      	mov	r0, r3
 8003034:	3724      	adds	r7, #36	; 0x24
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr
	...

08003040 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b082      	sub	sp, #8
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	3b01      	subs	r3, #1
 800304c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003050:	d301      	bcc.n	8003056 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003052:	2301      	movs	r3, #1
 8003054:	e00f      	b.n	8003076 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003056:	4a0a      	ldr	r2, [pc, #40]	; (8003080 <SysTick_Config+0x40>)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	3b01      	subs	r3, #1
 800305c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800305e:	210f      	movs	r1, #15
 8003060:	f04f 30ff 	mov.w	r0, #4294967295
 8003064:	f7ff ff8e 	bl	8002f84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003068:	4b05      	ldr	r3, [pc, #20]	; (8003080 <SysTick_Config+0x40>)
 800306a:	2200      	movs	r2, #0
 800306c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800306e:	4b04      	ldr	r3, [pc, #16]	; (8003080 <SysTick_Config+0x40>)
 8003070:	2207      	movs	r2, #7
 8003072:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003074:	2300      	movs	r3, #0
}
 8003076:	4618      	mov	r0, r3
 8003078:	3708      	adds	r7, #8
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	e000e010 	.word	0xe000e010

08003084 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b082      	sub	sp, #8
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f7ff ff47 	bl	8002f20 <__NVIC_SetPriorityGrouping>
}
 8003092:	bf00      	nop
 8003094:	3708      	adds	r7, #8
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}

0800309a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800309a:	b580      	push	{r7, lr}
 800309c:	b086      	sub	sp, #24
 800309e:	af00      	add	r7, sp, #0
 80030a0:	4603      	mov	r3, r0
 80030a2:	60b9      	str	r1, [r7, #8]
 80030a4:	607a      	str	r2, [r7, #4]
 80030a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80030a8:	2300      	movs	r3, #0
 80030aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030ac:	f7ff ff5c 	bl	8002f68 <__NVIC_GetPriorityGrouping>
 80030b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	68b9      	ldr	r1, [r7, #8]
 80030b6:	6978      	ldr	r0, [r7, #20]
 80030b8:	f7ff ff8e 	bl	8002fd8 <NVIC_EncodePriority>
 80030bc:	4602      	mov	r2, r0
 80030be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030c2:	4611      	mov	r1, r2
 80030c4:	4618      	mov	r0, r3
 80030c6:	f7ff ff5d 	bl	8002f84 <__NVIC_SetPriority>
}
 80030ca:	bf00      	nop
 80030cc:	3718      	adds	r7, #24
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}

080030d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030d2:	b580      	push	{r7, lr}
 80030d4:	b082      	sub	sp, #8
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f7ff ffb0 	bl	8003040 <SysTick_Config>
 80030e0:	4603      	mov	r3, r0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3708      	adds	r7, #8
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
	...

080030ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b087      	sub	sp, #28
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80030f6:	2300      	movs	r3, #0
 80030f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030fa:	e14e      	b.n	800339a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	2101      	movs	r1, #1
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	fa01 f303 	lsl.w	r3, r1, r3
 8003108:	4013      	ands	r3, r2
 800310a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2b00      	cmp	r3, #0
 8003110:	f000 8140 	beq.w	8003394 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f003 0303 	and.w	r3, r3, #3
 800311c:	2b01      	cmp	r3, #1
 800311e:	d005      	beq.n	800312c <HAL_GPIO_Init+0x40>
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f003 0303 	and.w	r3, r3, #3
 8003128:	2b02      	cmp	r3, #2
 800312a:	d130      	bne.n	800318e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	005b      	lsls	r3, r3, #1
 8003136:	2203      	movs	r2, #3
 8003138:	fa02 f303 	lsl.w	r3, r2, r3
 800313c:	43db      	mvns	r3, r3
 800313e:	693a      	ldr	r2, [r7, #16]
 8003140:	4013      	ands	r3, r2
 8003142:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	68da      	ldr	r2, [r3, #12]
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	005b      	lsls	r3, r3, #1
 800314c:	fa02 f303 	lsl.w	r3, r2, r3
 8003150:	693a      	ldr	r2, [r7, #16]
 8003152:	4313      	orrs	r3, r2
 8003154:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	693a      	ldr	r2, [r7, #16]
 800315a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003162:	2201      	movs	r2, #1
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	fa02 f303 	lsl.w	r3, r2, r3
 800316a:	43db      	mvns	r3, r3
 800316c:	693a      	ldr	r2, [r7, #16]
 800316e:	4013      	ands	r3, r2
 8003170:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	091b      	lsrs	r3, r3, #4
 8003178:	f003 0201 	and.w	r2, r3, #1
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	fa02 f303 	lsl.w	r3, r2, r3
 8003182:	693a      	ldr	r2, [r7, #16]
 8003184:	4313      	orrs	r3, r2
 8003186:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	693a      	ldr	r2, [r7, #16]
 800318c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	f003 0303 	and.w	r3, r3, #3
 8003196:	2b03      	cmp	r3, #3
 8003198:	d017      	beq.n	80031ca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	005b      	lsls	r3, r3, #1
 80031a4:	2203      	movs	r2, #3
 80031a6:	fa02 f303 	lsl.w	r3, r2, r3
 80031aa:	43db      	mvns	r3, r3
 80031ac:	693a      	ldr	r2, [r7, #16]
 80031ae:	4013      	ands	r3, r2
 80031b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	689a      	ldr	r2, [r3, #8]
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	005b      	lsls	r3, r3, #1
 80031ba:	fa02 f303 	lsl.w	r3, r2, r3
 80031be:	693a      	ldr	r2, [r7, #16]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	693a      	ldr	r2, [r7, #16]
 80031c8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	f003 0303 	and.w	r3, r3, #3
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d123      	bne.n	800321e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	08da      	lsrs	r2, r3, #3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	3208      	adds	r2, #8
 80031de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	f003 0307 	and.w	r3, r3, #7
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	220f      	movs	r2, #15
 80031ee:	fa02 f303 	lsl.w	r3, r2, r3
 80031f2:	43db      	mvns	r3, r3
 80031f4:	693a      	ldr	r2, [r7, #16]
 80031f6:	4013      	ands	r3, r2
 80031f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	691a      	ldr	r2, [r3, #16]
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	f003 0307 	and.w	r3, r3, #7
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	fa02 f303 	lsl.w	r3, r2, r3
 800320a:	693a      	ldr	r2, [r7, #16]
 800320c:	4313      	orrs	r3, r2
 800320e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	08da      	lsrs	r2, r3, #3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	3208      	adds	r2, #8
 8003218:	6939      	ldr	r1, [r7, #16]
 800321a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	005b      	lsls	r3, r3, #1
 8003228:	2203      	movs	r2, #3
 800322a:	fa02 f303 	lsl.w	r3, r2, r3
 800322e:	43db      	mvns	r3, r3
 8003230:	693a      	ldr	r2, [r7, #16]
 8003232:	4013      	ands	r3, r2
 8003234:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	f003 0203 	and.w	r2, r3, #3
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	005b      	lsls	r3, r3, #1
 8003242:	fa02 f303 	lsl.w	r3, r2, r3
 8003246:	693a      	ldr	r2, [r7, #16]
 8003248:	4313      	orrs	r3, r2
 800324a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	693a      	ldr	r2, [r7, #16]
 8003250:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800325a:	2b00      	cmp	r3, #0
 800325c:	f000 809a 	beq.w	8003394 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003260:	4b55      	ldr	r3, [pc, #340]	; (80033b8 <HAL_GPIO_Init+0x2cc>)
 8003262:	699b      	ldr	r3, [r3, #24]
 8003264:	4a54      	ldr	r2, [pc, #336]	; (80033b8 <HAL_GPIO_Init+0x2cc>)
 8003266:	f043 0301 	orr.w	r3, r3, #1
 800326a:	6193      	str	r3, [r2, #24]
 800326c:	4b52      	ldr	r3, [pc, #328]	; (80033b8 <HAL_GPIO_Init+0x2cc>)
 800326e:	699b      	ldr	r3, [r3, #24]
 8003270:	f003 0301 	and.w	r3, r3, #1
 8003274:	60bb      	str	r3, [r7, #8]
 8003276:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003278:	4a50      	ldr	r2, [pc, #320]	; (80033bc <HAL_GPIO_Init+0x2d0>)
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	089b      	lsrs	r3, r3, #2
 800327e:	3302      	adds	r3, #2
 8003280:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003284:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	f003 0303 	and.w	r3, r3, #3
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	220f      	movs	r2, #15
 8003290:	fa02 f303 	lsl.w	r3, r2, r3
 8003294:	43db      	mvns	r3, r3
 8003296:	693a      	ldr	r2, [r7, #16]
 8003298:	4013      	ands	r3, r2
 800329a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80032a2:	d013      	beq.n	80032cc <HAL_GPIO_Init+0x1e0>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	4a46      	ldr	r2, [pc, #280]	; (80033c0 <HAL_GPIO_Init+0x2d4>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d00d      	beq.n	80032c8 <HAL_GPIO_Init+0x1dc>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	4a45      	ldr	r2, [pc, #276]	; (80033c4 <HAL_GPIO_Init+0x2d8>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d007      	beq.n	80032c4 <HAL_GPIO_Init+0x1d8>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	4a44      	ldr	r2, [pc, #272]	; (80033c8 <HAL_GPIO_Init+0x2dc>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d101      	bne.n	80032c0 <HAL_GPIO_Init+0x1d4>
 80032bc:	2303      	movs	r3, #3
 80032be:	e006      	b.n	80032ce <HAL_GPIO_Init+0x1e2>
 80032c0:	2305      	movs	r3, #5
 80032c2:	e004      	b.n	80032ce <HAL_GPIO_Init+0x1e2>
 80032c4:	2302      	movs	r3, #2
 80032c6:	e002      	b.n	80032ce <HAL_GPIO_Init+0x1e2>
 80032c8:	2301      	movs	r3, #1
 80032ca:	e000      	b.n	80032ce <HAL_GPIO_Init+0x1e2>
 80032cc:	2300      	movs	r3, #0
 80032ce:	697a      	ldr	r2, [r7, #20]
 80032d0:	f002 0203 	and.w	r2, r2, #3
 80032d4:	0092      	lsls	r2, r2, #2
 80032d6:	4093      	lsls	r3, r2
 80032d8:	693a      	ldr	r2, [r7, #16]
 80032da:	4313      	orrs	r3, r2
 80032dc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80032de:	4937      	ldr	r1, [pc, #220]	; (80033bc <HAL_GPIO_Init+0x2d0>)
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	089b      	lsrs	r3, r3, #2
 80032e4:	3302      	adds	r3, #2
 80032e6:	693a      	ldr	r2, [r7, #16]
 80032e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032ec:	4b37      	ldr	r3, [pc, #220]	; (80033cc <HAL_GPIO_Init+0x2e0>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	43db      	mvns	r3, r3
 80032f6:	693a      	ldr	r2, [r7, #16]
 80032f8:	4013      	ands	r3, r2
 80032fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003304:	2b00      	cmp	r3, #0
 8003306:	d003      	beq.n	8003310 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8003308:	693a      	ldr	r2, [r7, #16]
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	4313      	orrs	r3, r2
 800330e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003310:	4a2e      	ldr	r2, [pc, #184]	; (80033cc <HAL_GPIO_Init+0x2e0>)
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003316:	4b2d      	ldr	r3, [pc, #180]	; (80033cc <HAL_GPIO_Init+0x2e0>)
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	43db      	mvns	r3, r3
 8003320:	693a      	ldr	r2, [r7, #16]
 8003322:	4013      	ands	r3, r2
 8003324:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d003      	beq.n	800333a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8003332:	693a      	ldr	r2, [r7, #16]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	4313      	orrs	r3, r2
 8003338:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800333a:	4a24      	ldr	r2, [pc, #144]	; (80033cc <HAL_GPIO_Init+0x2e0>)
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003340:	4b22      	ldr	r3, [pc, #136]	; (80033cc <HAL_GPIO_Init+0x2e0>)
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	43db      	mvns	r3, r3
 800334a:	693a      	ldr	r2, [r7, #16]
 800334c:	4013      	ands	r3, r2
 800334e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003358:	2b00      	cmp	r3, #0
 800335a:	d003      	beq.n	8003364 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800335c:	693a      	ldr	r2, [r7, #16]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	4313      	orrs	r3, r2
 8003362:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003364:	4a19      	ldr	r2, [pc, #100]	; (80033cc <HAL_GPIO_Init+0x2e0>)
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800336a:	4b18      	ldr	r3, [pc, #96]	; (80033cc <HAL_GPIO_Init+0x2e0>)
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	43db      	mvns	r3, r3
 8003374:	693a      	ldr	r2, [r7, #16]
 8003376:	4013      	ands	r3, r2
 8003378:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d003      	beq.n	800338e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8003386:	693a      	ldr	r2, [r7, #16]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	4313      	orrs	r3, r2
 800338c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800338e:	4a0f      	ldr	r2, [pc, #60]	; (80033cc <HAL_GPIO_Init+0x2e0>)
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	3301      	adds	r3, #1
 8003398:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	fa22 f303 	lsr.w	r3, r2, r3
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	f47f aea9 	bne.w	80030fc <HAL_GPIO_Init+0x10>
  }
}
 80033aa:	bf00      	nop
 80033ac:	bf00      	nop
 80033ae:	371c      	adds	r7, #28
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr
 80033b8:	40021000 	.word	0x40021000
 80033bc:	40010000 	.word	0x40010000
 80033c0:	48000400 	.word	0x48000400
 80033c4:	48000800 	.word	0x48000800
 80033c8:	48000c00 	.word	0x48000c00
 80033cc:	40010400 	.word	0x40010400

080033d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b085      	sub	sp, #20
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	460b      	mov	r3, r1
 80033da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	691a      	ldr	r2, [r3, #16]
 80033e0:	887b      	ldrh	r3, [r7, #2]
 80033e2:	4013      	ands	r3, r2
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d002      	beq.n	80033ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80033e8:	2301      	movs	r3, #1
 80033ea:	73fb      	strb	r3, [r7, #15]
 80033ec:	e001      	b.n	80033f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80033ee:	2300      	movs	r3, #0
 80033f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80033f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3714      	adds	r7, #20
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr

08003400 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003400:	b480      	push	{r7}
 8003402:	b083      	sub	sp, #12
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
 8003408:	460b      	mov	r3, r1
 800340a:	807b      	strh	r3, [r7, #2]
 800340c:	4613      	mov	r3, r2
 800340e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003410:	787b      	ldrb	r3, [r7, #1]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d003      	beq.n	800341e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003416:	887a      	ldrh	r2, [r7, #2]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800341c:	e002      	b.n	8003424 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800341e:	887a      	ldrh	r2, [r7, #2]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003424:	bf00      	nop
 8003426:	370c      	adds	r7, #12
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr

08003430 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8003436:	af00      	add	r7, sp, #0
 8003438:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800343c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003440:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003442:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003446:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d102      	bne.n	8003456 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	f001 b823 	b.w	800449c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003456:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800345a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0301 	and.w	r3, r3, #1
 8003466:	2b00      	cmp	r3, #0
 8003468:	f000 817d 	beq.w	8003766 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800346c:	4bbc      	ldr	r3, [pc, #752]	; (8003760 <HAL_RCC_OscConfig+0x330>)
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f003 030c 	and.w	r3, r3, #12
 8003474:	2b04      	cmp	r3, #4
 8003476:	d00c      	beq.n	8003492 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003478:	4bb9      	ldr	r3, [pc, #740]	; (8003760 <HAL_RCC_OscConfig+0x330>)
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f003 030c 	and.w	r3, r3, #12
 8003480:	2b08      	cmp	r3, #8
 8003482:	d15c      	bne.n	800353e <HAL_RCC_OscConfig+0x10e>
 8003484:	4bb6      	ldr	r3, [pc, #728]	; (8003760 <HAL_RCC_OscConfig+0x330>)
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800348c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003490:	d155      	bne.n	800353e <HAL_RCC_OscConfig+0x10e>
 8003492:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003496:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800349a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800349e:	fa93 f3a3 	rbit	r3, r3
 80034a2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80034a6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034aa:	fab3 f383 	clz	r3, r3
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	095b      	lsrs	r3, r3, #5
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	f043 0301 	orr.w	r3, r3, #1
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d102      	bne.n	80034c4 <HAL_RCC_OscConfig+0x94>
 80034be:	4ba8      	ldr	r3, [pc, #672]	; (8003760 <HAL_RCC_OscConfig+0x330>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	e015      	b.n	80034f0 <HAL_RCC_OscConfig+0xc0>
 80034c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034c8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034cc:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80034d0:	fa93 f3a3 	rbit	r3, r3
 80034d4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80034d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034dc:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80034e0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80034e4:	fa93 f3a3 	rbit	r3, r3
 80034e8:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80034ec:	4b9c      	ldr	r3, [pc, #624]	; (8003760 <HAL_RCC_OscConfig+0x330>)
 80034ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80034f4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80034f8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80034fc:	fa92 f2a2 	rbit	r2, r2
 8003500:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8003504:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8003508:	fab2 f282 	clz	r2, r2
 800350c:	b2d2      	uxtb	r2, r2
 800350e:	f042 0220 	orr.w	r2, r2, #32
 8003512:	b2d2      	uxtb	r2, r2
 8003514:	f002 021f 	and.w	r2, r2, #31
 8003518:	2101      	movs	r1, #1
 800351a:	fa01 f202 	lsl.w	r2, r1, r2
 800351e:	4013      	ands	r3, r2
 8003520:	2b00      	cmp	r3, #0
 8003522:	f000 811f 	beq.w	8003764 <HAL_RCC_OscConfig+0x334>
 8003526:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800352a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	2b00      	cmp	r3, #0
 8003534:	f040 8116 	bne.w	8003764 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	f000 bfaf 	b.w	800449c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800353e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003542:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800354e:	d106      	bne.n	800355e <HAL_RCC_OscConfig+0x12e>
 8003550:	4b83      	ldr	r3, [pc, #524]	; (8003760 <HAL_RCC_OscConfig+0x330>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a82      	ldr	r2, [pc, #520]	; (8003760 <HAL_RCC_OscConfig+0x330>)
 8003556:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800355a:	6013      	str	r3, [r2, #0]
 800355c:	e036      	b.n	80035cc <HAL_RCC_OscConfig+0x19c>
 800355e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003562:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d10c      	bne.n	8003588 <HAL_RCC_OscConfig+0x158>
 800356e:	4b7c      	ldr	r3, [pc, #496]	; (8003760 <HAL_RCC_OscConfig+0x330>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a7b      	ldr	r2, [pc, #492]	; (8003760 <HAL_RCC_OscConfig+0x330>)
 8003574:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003578:	6013      	str	r3, [r2, #0]
 800357a:	4b79      	ldr	r3, [pc, #484]	; (8003760 <HAL_RCC_OscConfig+0x330>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a78      	ldr	r2, [pc, #480]	; (8003760 <HAL_RCC_OscConfig+0x330>)
 8003580:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003584:	6013      	str	r3, [r2, #0]
 8003586:	e021      	b.n	80035cc <HAL_RCC_OscConfig+0x19c>
 8003588:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800358c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003598:	d10c      	bne.n	80035b4 <HAL_RCC_OscConfig+0x184>
 800359a:	4b71      	ldr	r3, [pc, #452]	; (8003760 <HAL_RCC_OscConfig+0x330>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a70      	ldr	r2, [pc, #448]	; (8003760 <HAL_RCC_OscConfig+0x330>)
 80035a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035a4:	6013      	str	r3, [r2, #0]
 80035a6:	4b6e      	ldr	r3, [pc, #440]	; (8003760 <HAL_RCC_OscConfig+0x330>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a6d      	ldr	r2, [pc, #436]	; (8003760 <HAL_RCC_OscConfig+0x330>)
 80035ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035b0:	6013      	str	r3, [r2, #0]
 80035b2:	e00b      	b.n	80035cc <HAL_RCC_OscConfig+0x19c>
 80035b4:	4b6a      	ldr	r3, [pc, #424]	; (8003760 <HAL_RCC_OscConfig+0x330>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a69      	ldr	r2, [pc, #420]	; (8003760 <HAL_RCC_OscConfig+0x330>)
 80035ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035be:	6013      	str	r3, [r2, #0]
 80035c0:	4b67      	ldr	r3, [pc, #412]	; (8003760 <HAL_RCC_OscConfig+0x330>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a66      	ldr	r2, [pc, #408]	; (8003760 <HAL_RCC_OscConfig+0x330>)
 80035c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035ca:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80035cc:	4b64      	ldr	r3, [pc, #400]	; (8003760 <HAL_RCC_OscConfig+0x330>)
 80035ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d0:	f023 020f 	bic.w	r2, r3, #15
 80035d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035d8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	495f      	ldr	r1, [pc, #380]	; (8003760 <HAL_RCC_OscConfig+0x330>)
 80035e2:	4313      	orrs	r3, r2
 80035e4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d059      	beq.n	80036aa <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035f6:	f7fe fcef 	bl	8001fd8 <HAL_GetTick>
 80035fa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035fe:	e00a      	b.n	8003616 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003600:	f7fe fcea 	bl	8001fd8 <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	2b64      	cmp	r3, #100	; 0x64
 800360e:	d902      	bls.n	8003616 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003610:	2303      	movs	r3, #3
 8003612:	f000 bf43 	b.w	800449c <HAL_RCC_OscConfig+0x106c>
 8003616:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800361a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800361e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8003622:	fa93 f3a3 	rbit	r3, r3
 8003626:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800362a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800362e:	fab3 f383 	clz	r3, r3
 8003632:	b2db      	uxtb	r3, r3
 8003634:	095b      	lsrs	r3, r3, #5
 8003636:	b2db      	uxtb	r3, r3
 8003638:	f043 0301 	orr.w	r3, r3, #1
 800363c:	b2db      	uxtb	r3, r3
 800363e:	2b01      	cmp	r3, #1
 8003640:	d102      	bne.n	8003648 <HAL_RCC_OscConfig+0x218>
 8003642:	4b47      	ldr	r3, [pc, #284]	; (8003760 <HAL_RCC_OscConfig+0x330>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	e015      	b.n	8003674 <HAL_RCC_OscConfig+0x244>
 8003648:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800364c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003650:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003654:	fa93 f3a3 	rbit	r3, r3
 8003658:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800365c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003660:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003664:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003668:	fa93 f3a3 	rbit	r3, r3
 800366c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003670:	4b3b      	ldr	r3, [pc, #236]	; (8003760 <HAL_RCC_OscConfig+0x330>)
 8003672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003674:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003678:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800367c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003680:	fa92 f2a2 	rbit	r2, r2
 8003684:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8003688:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800368c:	fab2 f282 	clz	r2, r2
 8003690:	b2d2      	uxtb	r2, r2
 8003692:	f042 0220 	orr.w	r2, r2, #32
 8003696:	b2d2      	uxtb	r2, r2
 8003698:	f002 021f 	and.w	r2, r2, #31
 800369c:	2101      	movs	r1, #1
 800369e:	fa01 f202 	lsl.w	r2, r1, r2
 80036a2:	4013      	ands	r3, r2
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d0ab      	beq.n	8003600 <HAL_RCC_OscConfig+0x1d0>
 80036a8:	e05d      	b.n	8003766 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036aa:	f7fe fc95 	bl	8001fd8 <HAL_GetTick>
 80036ae:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036b2:	e00a      	b.n	80036ca <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036b4:	f7fe fc90 	bl	8001fd8 <HAL_GetTick>
 80036b8:	4602      	mov	r2, r0
 80036ba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	2b64      	cmp	r3, #100	; 0x64
 80036c2:	d902      	bls.n	80036ca <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	f000 bee9 	b.w	800449c <HAL_RCC_OscConfig+0x106c>
 80036ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036ce:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80036d6:	fa93 f3a3 	rbit	r3, r3
 80036da:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80036de:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036e2:	fab3 f383 	clz	r3, r3
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	095b      	lsrs	r3, r3, #5
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	f043 0301 	orr.w	r3, r3, #1
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d102      	bne.n	80036fc <HAL_RCC_OscConfig+0x2cc>
 80036f6:	4b1a      	ldr	r3, [pc, #104]	; (8003760 <HAL_RCC_OscConfig+0x330>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	e015      	b.n	8003728 <HAL_RCC_OscConfig+0x2f8>
 80036fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003700:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003704:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003708:	fa93 f3a3 	rbit	r3, r3
 800370c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003710:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003714:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003718:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800371c:	fa93 f3a3 	rbit	r3, r3
 8003720:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003724:	4b0e      	ldr	r3, [pc, #56]	; (8003760 <HAL_RCC_OscConfig+0x330>)
 8003726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003728:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800372c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003730:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003734:	fa92 f2a2 	rbit	r2, r2
 8003738:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800373c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003740:	fab2 f282 	clz	r2, r2
 8003744:	b2d2      	uxtb	r2, r2
 8003746:	f042 0220 	orr.w	r2, r2, #32
 800374a:	b2d2      	uxtb	r2, r2
 800374c:	f002 021f 	and.w	r2, r2, #31
 8003750:	2101      	movs	r1, #1
 8003752:	fa01 f202 	lsl.w	r2, r1, r2
 8003756:	4013      	ands	r3, r2
 8003758:	2b00      	cmp	r3, #0
 800375a:	d1ab      	bne.n	80036b4 <HAL_RCC_OscConfig+0x284>
 800375c:	e003      	b.n	8003766 <HAL_RCC_OscConfig+0x336>
 800375e:	bf00      	nop
 8003760:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003764:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003766:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800376a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0302 	and.w	r3, r3, #2
 8003776:	2b00      	cmp	r3, #0
 8003778:	f000 817d 	beq.w	8003a76 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800377c:	4ba6      	ldr	r3, [pc, #664]	; (8003a18 <HAL_RCC_OscConfig+0x5e8>)
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	f003 030c 	and.w	r3, r3, #12
 8003784:	2b00      	cmp	r3, #0
 8003786:	d00b      	beq.n	80037a0 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003788:	4ba3      	ldr	r3, [pc, #652]	; (8003a18 <HAL_RCC_OscConfig+0x5e8>)
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	f003 030c 	and.w	r3, r3, #12
 8003790:	2b08      	cmp	r3, #8
 8003792:	d172      	bne.n	800387a <HAL_RCC_OscConfig+0x44a>
 8003794:	4ba0      	ldr	r3, [pc, #640]	; (8003a18 <HAL_RCC_OscConfig+0x5e8>)
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800379c:	2b00      	cmp	r3, #0
 800379e:	d16c      	bne.n	800387a <HAL_RCC_OscConfig+0x44a>
 80037a0:	2302      	movs	r3, #2
 80037a2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80037aa:	fa93 f3a3 	rbit	r3, r3
 80037ae:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80037b2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037b6:	fab3 f383 	clz	r3, r3
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	095b      	lsrs	r3, r3, #5
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	f043 0301 	orr.w	r3, r3, #1
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d102      	bne.n	80037d0 <HAL_RCC_OscConfig+0x3a0>
 80037ca:	4b93      	ldr	r3, [pc, #588]	; (8003a18 <HAL_RCC_OscConfig+0x5e8>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	e013      	b.n	80037f8 <HAL_RCC_OscConfig+0x3c8>
 80037d0:	2302      	movs	r3, #2
 80037d2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037d6:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80037da:	fa93 f3a3 	rbit	r3, r3
 80037de:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80037e2:	2302      	movs	r3, #2
 80037e4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80037e8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80037ec:	fa93 f3a3 	rbit	r3, r3
 80037f0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80037f4:	4b88      	ldr	r3, [pc, #544]	; (8003a18 <HAL_RCC_OscConfig+0x5e8>)
 80037f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f8:	2202      	movs	r2, #2
 80037fa:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80037fe:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003802:	fa92 f2a2 	rbit	r2, r2
 8003806:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800380a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800380e:	fab2 f282 	clz	r2, r2
 8003812:	b2d2      	uxtb	r2, r2
 8003814:	f042 0220 	orr.w	r2, r2, #32
 8003818:	b2d2      	uxtb	r2, r2
 800381a:	f002 021f 	and.w	r2, r2, #31
 800381e:	2101      	movs	r1, #1
 8003820:	fa01 f202 	lsl.w	r2, r1, r2
 8003824:	4013      	ands	r3, r2
 8003826:	2b00      	cmp	r3, #0
 8003828:	d00a      	beq.n	8003840 <HAL_RCC_OscConfig+0x410>
 800382a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800382e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	691b      	ldr	r3, [r3, #16]
 8003836:	2b01      	cmp	r3, #1
 8003838:	d002      	beq.n	8003840 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	f000 be2e 	b.w	800449c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003840:	4b75      	ldr	r3, [pc, #468]	; (8003a18 <HAL_RCC_OscConfig+0x5e8>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003848:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800384c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	695b      	ldr	r3, [r3, #20]
 8003854:	21f8      	movs	r1, #248	; 0xf8
 8003856:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800385a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800385e:	fa91 f1a1 	rbit	r1, r1
 8003862:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003866:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800386a:	fab1 f181 	clz	r1, r1
 800386e:	b2c9      	uxtb	r1, r1
 8003870:	408b      	lsls	r3, r1
 8003872:	4969      	ldr	r1, [pc, #420]	; (8003a18 <HAL_RCC_OscConfig+0x5e8>)
 8003874:	4313      	orrs	r3, r2
 8003876:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003878:	e0fd      	b.n	8003a76 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800387a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800387e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	691b      	ldr	r3, [r3, #16]
 8003886:	2b00      	cmp	r3, #0
 8003888:	f000 8088 	beq.w	800399c <HAL_RCC_OscConfig+0x56c>
 800388c:	2301      	movs	r3, #1
 800388e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003892:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003896:	fa93 f3a3 	rbit	r3, r3
 800389a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800389e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038a2:	fab3 f383 	clz	r3, r3
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80038ac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	461a      	mov	r2, r3
 80038b4:	2301      	movs	r3, #1
 80038b6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038b8:	f7fe fb8e 	bl	8001fd8 <HAL_GetTick>
 80038bc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038c0:	e00a      	b.n	80038d8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038c2:	f7fe fb89 	bl	8001fd8 <HAL_GetTick>
 80038c6:	4602      	mov	r2, r0
 80038c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	2b02      	cmp	r3, #2
 80038d0:	d902      	bls.n	80038d8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80038d2:	2303      	movs	r3, #3
 80038d4:	f000 bde2 	b.w	800449c <HAL_RCC_OscConfig+0x106c>
 80038d8:	2302      	movs	r3, #2
 80038da:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038de:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80038e2:	fa93 f3a3 	rbit	r3, r3
 80038e6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80038ea:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038ee:	fab3 f383 	clz	r3, r3
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	095b      	lsrs	r3, r3, #5
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	f043 0301 	orr.w	r3, r3, #1
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d102      	bne.n	8003908 <HAL_RCC_OscConfig+0x4d8>
 8003902:	4b45      	ldr	r3, [pc, #276]	; (8003a18 <HAL_RCC_OscConfig+0x5e8>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	e013      	b.n	8003930 <HAL_RCC_OscConfig+0x500>
 8003908:	2302      	movs	r3, #2
 800390a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800390e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003912:	fa93 f3a3 	rbit	r3, r3
 8003916:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800391a:	2302      	movs	r3, #2
 800391c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003920:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003924:	fa93 f3a3 	rbit	r3, r3
 8003928:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800392c:	4b3a      	ldr	r3, [pc, #232]	; (8003a18 <HAL_RCC_OscConfig+0x5e8>)
 800392e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003930:	2202      	movs	r2, #2
 8003932:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003936:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800393a:	fa92 f2a2 	rbit	r2, r2
 800393e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003942:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003946:	fab2 f282 	clz	r2, r2
 800394a:	b2d2      	uxtb	r2, r2
 800394c:	f042 0220 	orr.w	r2, r2, #32
 8003950:	b2d2      	uxtb	r2, r2
 8003952:	f002 021f 	and.w	r2, r2, #31
 8003956:	2101      	movs	r1, #1
 8003958:	fa01 f202 	lsl.w	r2, r1, r2
 800395c:	4013      	ands	r3, r2
 800395e:	2b00      	cmp	r3, #0
 8003960:	d0af      	beq.n	80038c2 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003962:	4b2d      	ldr	r3, [pc, #180]	; (8003a18 <HAL_RCC_OscConfig+0x5e8>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800396a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800396e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	695b      	ldr	r3, [r3, #20]
 8003976:	21f8      	movs	r1, #248	; 0xf8
 8003978:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800397c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003980:	fa91 f1a1 	rbit	r1, r1
 8003984:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003988:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800398c:	fab1 f181 	clz	r1, r1
 8003990:	b2c9      	uxtb	r1, r1
 8003992:	408b      	lsls	r3, r1
 8003994:	4920      	ldr	r1, [pc, #128]	; (8003a18 <HAL_RCC_OscConfig+0x5e8>)
 8003996:	4313      	orrs	r3, r2
 8003998:	600b      	str	r3, [r1, #0]
 800399a:	e06c      	b.n	8003a76 <HAL_RCC_OscConfig+0x646>
 800399c:	2301      	movs	r3, #1
 800399e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039a2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80039a6:	fa93 f3a3 	rbit	r3, r3
 80039aa:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80039ae:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039b2:	fab3 f383 	clz	r3, r3
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80039bc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80039c0:	009b      	lsls	r3, r3, #2
 80039c2:	461a      	mov	r2, r3
 80039c4:	2300      	movs	r3, #0
 80039c6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039c8:	f7fe fb06 	bl	8001fd8 <HAL_GetTick>
 80039cc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039d0:	e00a      	b.n	80039e8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039d2:	f7fe fb01 	bl	8001fd8 <HAL_GetTick>
 80039d6:	4602      	mov	r2, r0
 80039d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	2b02      	cmp	r3, #2
 80039e0:	d902      	bls.n	80039e8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	f000 bd5a 	b.w	800449c <HAL_RCC_OscConfig+0x106c>
 80039e8:	2302      	movs	r3, #2
 80039ea:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ee:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80039f2:	fa93 f3a3 	rbit	r3, r3
 80039f6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80039fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039fe:	fab3 f383 	clz	r3, r3
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	095b      	lsrs	r3, r3, #5
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	f043 0301 	orr.w	r3, r3, #1
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d104      	bne.n	8003a1c <HAL_RCC_OscConfig+0x5ec>
 8003a12:	4b01      	ldr	r3, [pc, #4]	; (8003a18 <HAL_RCC_OscConfig+0x5e8>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	e015      	b.n	8003a44 <HAL_RCC_OscConfig+0x614>
 8003a18:	40021000 	.word	0x40021000
 8003a1c:	2302      	movs	r3, #2
 8003a1e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a22:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003a26:	fa93 f3a3 	rbit	r3, r3
 8003a2a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003a2e:	2302      	movs	r3, #2
 8003a30:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003a34:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003a38:	fa93 f3a3 	rbit	r3, r3
 8003a3c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003a40:	4bc8      	ldr	r3, [pc, #800]	; (8003d64 <HAL_RCC_OscConfig+0x934>)
 8003a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a44:	2202      	movs	r2, #2
 8003a46:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003a4a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003a4e:	fa92 f2a2 	rbit	r2, r2
 8003a52:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003a56:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003a5a:	fab2 f282 	clz	r2, r2
 8003a5e:	b2d2      	uxtb	r2, r2
 8003a60:	f042 0220 	orr.w	r2, r2, #32
 8003a64:	b2d2      	uxtb	r2, r2
 8003a66:	f002 021f 	and.w	r2, r2, #31
 8003a6a:	2101      	movs	r1, #1
 8003a6c:	fa01 f202 	lsl.w	r2, r1, r2
 8003a70:	4013      	ands	r3, r2
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d1ad      	bne.n	80039d2 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a7a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0308 	and.w	r3, r3, #8
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	f000 8110 	beq.w	8003cac <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a90:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	699b      	ldr	r3, [r3, #24]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d079      	beq.n	8003b90 <HAL_RCC_OscConfig+0x760>
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aa2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003aa6:	fa93 f3a3 	rbit	r3, r3
 8003aaa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003aae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ab2:	fab3 f383 	clz	r3, r3
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	461a      	mov	r2, r3
 8003aba:	4bab      	ldr	r3, [pc, #684]	; (8003d68 <HAL_RCC_OscConfig+0x938>)
 8003abc:	4413      	add	r3, r2
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ac6:	f7fe fa87 	bl	8001fd8 <HAL_GetTick>
 8003aca:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ace:	e00a      	b.n	8003ae6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ad0:	f7fe fa82 	bl	8001fd8 <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	2b02      	cmp	r3, #2
 8003ade:	d902      	bls.n	8003ae6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	f000 bcdb 	b.w	800449c <HAL_RCC_OscConfig+0x106c>
 8003ae6:	2302      	movs	r3, #2
 8003ae8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aec:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003af0:	fa93 f3a3 	rbit	r3, r3
 8003af4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003af8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003afc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003b00:	2202      	movs	r2, #2
 8003b02:	601a      	str	r2, [r3, #0]
 8003b04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b08:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	fa93 f2a3 	rbit	r2, r3
 8003b12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b16:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003b1a:	601a      	str	r2, [r3, #0]
 8003b1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003b24:	2202      	movs	r2, #2
 8003b26:	601a      	str	r2, [r3, #0]
 8003b28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	fa93 f2a3 	rbit	r2, r3
 8003b36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b3a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003b3e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b40:	4b88      	ldr	r3, [pc, #544]	; (8003d64 <HAL_RCC_OscConfig+0x934>)
 8003b42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b48:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003b4c:	2102      	movs	r1, #2
 8003b4e:	6019      	str	r1, [r3, #0]
 8003b50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b54:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	fa93 f1a3 	rbit	r1, r3
 8003b5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b62:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003b66:	6019      	str	r1, [r3, #0]
  return result;
 8003b68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b6c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	fab3 f383 	clz	r3, r3
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	f003 031f 	and.w	r3, r3, #31
 8003b82:	2101      	movs	r1, #1
 8003b84:	fa01 f303 	lsl.w	r3, r1, r3
 8003b88:	4013      	ands	r3, r2
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d0a0      	beq.n	8003ad0 <HAL_RCC_OscConfig+0x6a0>
 8003b8e:	e08d      	b.n	8003cac <HAL_RCC_OscConfig+0x87c>
 8003b90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b94:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003b98:	2201      	movs	r2, #1
 8003b9a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ba0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	fa93 f2a3 	rbit	r2, r3
 8003baa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bae:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003bb2:	601a      	str	r2, [r3, #0]
  return result;
 8003bb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bb8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003bbc:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bbe:	fab3 f383 	clz	r3, r3
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	4b68      	ldr	r3, [pc, #416]	; (8003d68 <HAL_RCC_OscConfig+0x938>)
 8003bc8:	4413      	add	r3, r2
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	461a      	mov	r2, r3
 8003bce:	2300      	movs	r3, #0
 8003bd0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bd2:	f7fe fa01 	bl	8001fd8 <HAL_GetTick>
 8003bd6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bda:	e00a      	b.n	8003bf2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bdc:	f7fe f9fc 	bl	8001fd8 <HAL_GetTick>
 8003be0:	4602      	mov	r2, r0
 8003be2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003be6:	1ad3      	subs	r3, r2, r3
 8003be8:	2b02      	cmp	r3, #2
 8003bea:	d902      	bls.n	8003bf2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003bec:	2303      	movs	r3, #3
 8003bee:	f000 bc55 	b.w	800449c <HAL_RCC_OscConfig+0x106c>
 8003bf2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bf6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003bfa:	2202      	movs	r2, #2
 8003bfc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c02:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	fa93 f2a3 	rbit	r2, r3
 8003c0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c10:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003c14:	601a      	str	r2, [r3, #0]
 8003c16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c1a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003c1e:	2202      	movs	r2, #2
 8003c20:	601a      	str	r2, [r3, #0]
 8003c22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c26:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	fa93 f2a3 	rbit	r2, r3
 8003c30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c34:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003c38:	601a      	str	r2, [r3, #0]
 8003c3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003c42:	2202      	movs	r2, #2
 8003c44:	601a      	str	r2, [r3, #0]
 8003c46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	fa93 f2a3 	rbit	r2, r3
 8003c54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c58:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003c5c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c5e:	4b41      	ldr	r3, [pc, #260]	; (8003d64 <HAL_RCC_OscConfig+0x934>)
 8003c60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c66:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003c6a:	2102      	movs	r1, #2
 8003c6c:	6019      	str	r1, [r3, #0]
 8003c6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c72:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	fa93 f1a3 	rbit	r1, r3
 8003c7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c80:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003c84:	6019      	str	r1, [r3, #0]
  return result;
 8003c86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c8a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	fab3 f383 	clz	r3, r3
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	f003 031f 	and.w	r3, r3, #31
 8003ca0:	2101      	movs	r1, #1
 8003ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d197      	bne.n	8003bdc <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cb0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0304 	and.w	r3, r3, #4
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	f000 81a1 	beq.w	8004004 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cc8:	4b26      	ldr	r3, [pc, #152]	; (8003d64 <HAL_RCC_OscConfig+0x934>)
 8003cca:	69db      	ldr	r3, [r3, #28]
 8003ccc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d116      	bne.n	8003d02 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cd4:	4b23      	ldr	r3, [pc, #140]	; (8003d64 <HAL_RCC_OscConfig+0x934>)
 8003cd6:	69db      	ldr	r3, [r3, #28]
 8003cd8:	4a22      	ldr	r2, [pc, #136]	; (8003d64 <HAL_RCC_OscConfig+0x934>)
 8003cda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cde:	61d3      	str	r3, [r2, #28]
 8003ce0:	4b20      	ldr	r3, [pc, #128]	; (8003d64 <HAL_RCC_OscConfig+0x934>)
 8003ce2:	69db      	ldr	r3, [r3, #28]
 8003ce4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003ce8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cec:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003cf0:	601a      	str	r2, [r3, #0]
 8003cf2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cf6:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003cfa:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d02:	4b1a      	ldr	r3, [pc, #104]	; (8003d6c <HAL_RCC_OscConfig+0x93c>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d11a      	bne.n	8003d44 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d0e:	4b17      	ldr	r3, [pc, #92]	; (8003d6c <HAL_RCC_OscConfig+0x93c>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a16      	ldr	r2, [pc, #88]	; (8003d6c <HAL_RCC_OscConfig+0x93c>)
 8003d14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d18:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d1a:	f7fe f95d 	bl	8001fd8 <HAL_GetTick>
 8003d1e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d22:	e009      	b.n	8003d38 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d24:	f7fe f958 	bl	8001fd8 <HAL_GetTick>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	2b64      	cmp	r3, #100	; 0x64
 8003d32:	d901      	bls.n	8003d38 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003d34:	2303      	movs	r3, #3
 8003d36:	e3b1      	b.n	800449c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d38:	4b0c      	ldr	r3, [pc, #48]	; (8003d6c <HAL_RCC_OscConfig+0x93c>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d0ef      	beq.n	8003d24 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d48:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d10d      	bne.n	8003d70 <HAL_RCC_OscConfig+0x940>
 8003d54:	4b03      	ldr	r3, [pc, #12]	; (8003d64 <HAL_RCC_OscConfig+0x934>)
 8003d56:	6a1b      	ldr	r3, [r3, #32]
 8003d58:	4a02      	ldr	r2, [pc, #8]	; (8003d64 <HAL_RCC_OscConfig+0x934>)
 8003d5a:	f043 0301 	orr.w	r3, r3, #1
 8003d5e:	6213      	str	r3, [r2, #32]
 8003d60:	e03c      	b.n	8003ddc <HAL_RCC_OscConfig+0x9ac>
 8003d62:	bf00      	nop
 8003d64:	40021000 	.word	0x40021000
 8003d68:	10908120 	.word	0x10908120
 8003d6c:	40007000 	.word	0x40007000
 8003d70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d74:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d10c      	bne.n	8003d9a <HAL_RCC_OscConfig+0x96a>
 8003d80:	4bc1      	ldr	r3, [pc, #772]	; (8004088 <HAL_RCC_OscConfig+0xc58>)
 8003d82:	6a1b      	ldr	r3, [r3, #32]
 8003d84:	4ac0      	ldr	r2, [pc, #768]	; (8004088 <HAL_RCC_OscConfig+0xc58>)
 8003d86:	f023 0301 	bic.w	r3, r3, #1
 8003d8a:	6213      	str	r3, [r2, #32]
 8003d8c:	4bbe      	ldr	r3, [pc, #760]	; (8004088 <HAL_RCC_OscConfig+0xc58>)
 8003d8e:	6a1b      	ldr	r3, [r3, #32]
 8003d90:	4abd      	ldr	r2, [pc, #756]	; (8004088 <HAL_RCC_OscConfig+0xc58>)
 8003d92:	f023 0304 	bic.w	r3, r3, #4
 8003d96:	6213      	str	r3, [r2, #32]
 8003d98:	e020      	b.n	8003ddc <HAL_RCC_OscConfig+0x9ac>
 8003d9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d9e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	68db      	ldr	r3, [r3, #12]
 8003da6:	2b05      	cmp	r3, #5
 8003da8:	d10c      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x994>
 8003daa:	4bb7      	ldr	r3, [pc, #732]	; (8004088 <HAL_RCC_OscConfig+0xc58>)
 8003dac:	6a1b      	ldr	r3, [r3, #32]
 8003dae:	4ab6      	ldr	r2, [pc, #728]	; (8004088 <HAL_RCC_OscConfig+0xc58>)
 8003db0:	f043 0304 	orr.w	r3, r3, #4
 8003db4:	6213      	str	r3, [r2, #32]
 8003db6:	4bb4      	ldr	r3, [pc, #720]	; (8004088 <HAL_RCC_OscConfig+0xc58>)
 8003db8:	6a1b      	ldr	r3, [r3, #32]
 8003dba:	4ab3      	ldr	r2, [pc, #716]	; (8004088 <HAL_RCC_OscConfig+0xc58>)
 8003dbc:	f043 0301 	orr.w	r3, r3, #1
 8003dc0:	6213      	str	r3, [r2, #32]
 8003dc2:	e00b      	b.n	8003ddc <HAL_RCC_OscConfig+0x9ac>
 8003dc4:	4bb0      	ldr	r3, [pc, #704]	; (8004088 <HAL_RCC_OscConfig+0xc58>)
 8003dc6:	6a1b      	ldr	r3, [r3, #32]
 8003dc8:	4aaf      	ldr	r2, [pc, #700]	; (8004088 <HAL_RCC_OscConfig+0xc58>)
 8003dca:	f023 0301 	bic.w	r3, r3, #1
 8003dce:	6213      	str	r3, [r2, #32]
 8003dd0:	4bad      	ldr	r3, [pc, #692]	; (8004088 <HAL_RCC_OscConfig+0xc58>)
 8003dd2:	6a1b      	ldr	r3, [r3, #32]
 8003dd4:	4aac      	ldr	r2, [pc, #688]	; (8004088 <HAL_RCC_OscConfig+0xc58>)
 8003dd6:	f023 0304 	bic.w	r3, r3, #4
 8003dda:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ddc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003de0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	f000 8081 	beq.w	8003ef0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dee:	f7fe f8f3 	bl	8001fd8 <HAL_GetTick>
 8003df2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003df6:	e00b      	b.n	8003e10 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003df8:	f7fe f8ee 	bl	8001fd8 <HAL_GetTick>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003e02:	1ad3      	subs	r3, r2, r3
 8003e04:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d901      	bls.n	8003e10 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003e0c:	2303      	movs	r3, #3
 8003e0e:	e345      	b.n	800449c <HAL_RCC_OscConfig+0x106c>
 8003e10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e14:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003e18:	2202      	movs	r2, #2
 8003e1a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e20:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	fa93 f2a3 	rbit	r2, r3
 8003e2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e2e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003e32:	601a      	str	r2, [r3, #0]
 8003e34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e38:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003e3c:	2202      	movs	r2, #2
 8003e3e:	601a      	str	r2, [r3, #0]
 8003e40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e44:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	fa93 f2a3 	rbit	r2, r3
 8003e4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e52:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003e56:	601a      	str	r2, [r3, #0]
  return result;
 8003e58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e5c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003e60:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e62:	fab3 f383 	clz	r3, r3
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	095b      	lsrs	r3, r3, #5
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	f043 0302 	orr.w	r3, r3, #2
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	2b02      	cmp	r3, #2
 8003e74:	d102      	bne.n	8003e7c <HAL_RCC_OscConfig+0xa4c>
 8003e76:	4b84      	ldr	r3, [pc, #528]	; (8004088 <HAL_RCC_OscConfig+0xc58>)
 8003e78:	6a1b      	ldr	r3, [r3, #32]
 8003e7a:	e013      	b.n	8003ea4 <HAL_RCC_OscConfig+0xa74>
 8003e7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e80:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003e84:	2202      	movs	r2, #2
 8003e86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e8c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	fa93 f2a3 	rbit	r2, r3
 8003e96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e9a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003e9e:	601a      	str	r2, [r3, #0]
 8003ea0:	4b79      	ldr	r3, [pc, #484]	; (8004088 <HAL_RCC_OscConfig+0xc58>)
 8003ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ea8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003eac:	2102      	movs	r1, #2
 8003eae:	6011      	str	r1, [r2, #0]
 8003eb0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003eb4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003eb8:	6812      	ldr	r2, [r2, #0]
 8003eba:	fa92 f1a2 	rbit	r1, r2
 8003ebe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ec2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003ec6:	6011      	str	r1, [r2, #0]
  return result;
 8003ec8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ecc:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003ed0:	6812      	ldr	r2, [r2, #0]
 8003ed2:	fab2 f282 	clz	r2, r2
 8003ed6:	b2d2      	uxtb	r2, r2
 8003ed8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003edc:	b2d2      	uxtb	r2, r2
 8003ede:	f002 021f 	and.w	r2, r2, #31
 8003ee2:	2101      	movs	r1, #1
 8003ee4:	fa01 f202 	lsl.w	r2, r1, r2
 8003ee8:	4013      	ands	r3, r2
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d084      	beq.n	8003df8 <HAL_RCC_OscConfig+0x9c8>
 8003eee:	e07f      	b.n	8003ff0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ef0:	f7fe f872 	bl	8001fd8 <HAL_GetTick>
 8003ef4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ef8:	e00b      	b.n	8003f12 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003efa:	f7fe f86d 	bl	8001fd8 <HAL_GetTick>
 8003efe:	4602      	mov	r2, r0
 8003f00:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d901      	bls.n	8003f12 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e2c4      	b.n	800449c <HAL_RCC_OscConfig+0x106c>
 8003f12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f16:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003f1a:	2202      	movs	r2, #2
 8003f1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f22:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	fa93 f2a3 	rbit	r2, r3
 8003f2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f30:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003f34:	601a      	str	r2, [r3, #0]
 8003f36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f3a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003f3e:	2202      	movs	r2, #2
 8003f40:	601a      	str	r2, [r3, #0]
 8003f42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f46:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	fa93 f2a3 	rbit	r2, r3
 8003f50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f54:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003f58:	601a      	str	r2, [r3, #0]
  return result;
 8003f5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f5e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003f62:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f64:	fab3 f383 	clz	r3, r3
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	095b      	lsrs	r3, r3, #5
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	f043 0302 	orr.w	r3, r3, #2
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	2b02      	cmp	r3, #2
 8003f76:	d102      	bne.n	8003f7e <HAL_RCC_OscConfig+0xb4e>
 8003f78:	4b43      	ldr	r3, [pc, #268]	; (8004088 <HAL_RCC_OscConfig+0xc58>)
 8003f7a:	6a1b      	ldr	r3, [r3, #32]
 8003f7c:	e013      	b.n	8003fa6 <HAL_RCC_OscConfig+0xb76>
 8003f7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f82:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003f86:	2202      	movs	r2, #2
 8003f88:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f8e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	fa93 f2a3 	rbit	r2, r3
 8003f98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f9c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003fa0:	601a      	str	r2, [r3, #0]
 8003fa2:	4b39      	ldr	r3, [pc, #228]	; (8004088 <HAL_RCC_OscConfig+0xc58>)
 8003fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003faa:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003fae:	2102      	movs	r1, #2
 8003fb0:	6011      	str	r1, [r2, #0]
 8003fb2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003fb6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003fba:	6812      	ldr	r2, [r2, #0]
 8003fbc:	fa92 f1a2 	rbit	r1, r2
 8003fc0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003fc4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003fc8:	6011      	str	r1, [r2, #0]
  return result;
 8003fca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003fce:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003fd2:	6812      	ldr	r2, [r2, #0]
 8003fd4:	fab2 f282 	clz	r2, r2
 8003fd8:	b2d2      	uxtb	r2, r2
 8003fda:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003fde:	b2d2      	uxtb	r2, r2
 8003fe0:	f002 021f 	and.w	r2, r2, #31
 8003fe4:	2101      	movs	r1, #1
 8003fe6:	fa01 f202 	lsl.w	r2, r1, r2
 8003fea:	4013      	ands	r3, r2
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d184      	bne.n	8003efa <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003ff0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d105      	bne.n	8004004 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ff8:	4b23      	ldr	r3, [pc, #140]	; (8004088 <HAL_RCC_OscConfig+0xc58>)
 8003ffa:	69db      	ldr	r3, [r3, #28]
 8003ffc:	4a22      	ldr	r2, [pc, #136]	; (8004088 <HAL_RCC_OscConfig+0xc58>)
 8003ffe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004002:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004004:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004008:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	69db      	ldr	r3, [r3, #28]
 8004010:	2b00      	cmp	r3, #0
 8004012:	f000 8242 	beq.w	800449a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004016:	4b1c      	ldr	r3, [pc, #112]	; (8004088 <HAL_RCC_OscConfig+0xc58>)
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	f003 030c 	and.w	r3, r3, #12
 800401e:	2b08      	cmp	r3, #8
 8004020:	f000 8213 	beq.w	800444a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004024:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004028:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	69db      	ldr	r3, [r3, #28]
 8004030:	2b02      	cmp	r3, #2
 8004032:	f040 8162 	bne.w	80042fa <HAL_RCC_OscConfig+0xeca>
 8004036:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800403a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800403e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004042:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004044:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004048:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	fa93 f2a3 	rbit	r2, r3
 8004052:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004056:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800405a:	601a      	str	r2, [r3, #0]
  return result;
 800405c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004060:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004064:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004066:	fab3 f383 	clz	r3, r3
 800406a:	b2db      	uxtb	r3, r3
 800406c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004070:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	461a      	mov	r2, r3
 8004078:	2300      	movs	r3, #0
 800407a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800407c:	f7fd ffac 	bl	8001fd8 <HAL_GetTick>
 8004080:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004084:	e00c      	b.n	80040a0 <HAL_RCC_OscConfig+0xc70>
 8004086:	bf00      	nop
 8004088:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800408c:	f7fd ffa4 	bl	8001fd8 <HAL_GetTick>
 8004090:	4602      	mov	r2, r0
 8004092:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004096:	1ad3      	subs	r3, r2, r3
 8004098:	2b02      	cmp	r3, #2
 800409a:	d901      	bls.n	80040a0 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800409c:	2303      	movs	r3, #3
 800409e:	e1fd      	b.n	800449c <HAL_RCC_OscConfig+0x106c>
 80040a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040a4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80040a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80040ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040b2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	fa93 f2a3 	rbit	r2, r3
 80040bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040c0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80040c4:	601a      	str	r2, [r3, #0]
  return result;
 80040c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040ca:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80040ce:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040d0:	fab3 f383 	clz	r3, r3
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	095b      	lsrs	r3, r3, #5
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	f043 0301 	orr.w	r3, r3, #1
 80040de:	b2db      	uxtb	r3, r3
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d102      	bne.n	80040ea <HAL_RCC_OscConfig+0xcba>
 80040e4:	4bb0      	ldr	r3, [pc, #704]	; (80043a8 <HAL_RCC_OscConfig+0xf78>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	e027      	b.n	800413a <HAL_RCC_OscConfig+0xd0a>
 80040ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040ee:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80040f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80040f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040fc:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	fa93 f2a3 	rbit	r2, r3
 8004106:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800410a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800410e:	601a      	str	r2, [r3, #0]
 8004110:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004114:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004118:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800411c:	601a      	str	r2, [r3, #0]
 800411e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004122:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	fa93 f2a3 	rbit	r2, r3
 800412c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004130:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004134:	601a      	str	r2, [r3, #0]
 8004136:	4b9c      	ldr	r3, [pc, #624]	; (80043a8 <HAL_RCC_OscConfig+0xf78>)
 8004138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800413e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8004142:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004146:	6011      	str	r1, [r2, #0]
 8004148:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800414c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8004150:	6812      	ldr	r2, [r2, #0]
 8004152:	fa92 f1a2 	rbit	r1, r2
 8004156:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800415a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800415e:	6011      	str	r1, [r2, #0]
  return result;
 8004160:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004164:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004168:	6812      	ldr	r2, [r2, #0]
 800416a:	fab2 f282 	clz	r2, r2
 800416e:	b2d2      	uxtb	r2, r2
 8004170:	f042 0220 	orr.w	r2, r2, #32
 8004174:	b2d2      	uxtb	r2, r2
 8004176:	f002 021f 	and.w	r2, r2, #31
 800417a:	2101      	movs	r1, #1
 800417c:	fa01 f202 	lsl.w	r2, r1, r2
 8004180:	4013      	ands	r3, r2
 8004182:	2b00      	cmp	r3, #0
 8004184:	d182      	bne.n	800408c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004186:	4b88      	ldr	r3, [pc, #544]	; (80043a8 <HAL_RCC_OscConfig+0xf78>)
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800418e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004192:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800419a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800419e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	6a1b      	ldr	r3, [r3, #32]
 80041a6:	430b      	orrs	r3, r1
 80041a8:	497f      	ldr	r1, [pc, #508]	; (80043a8 <HAL_RCC_OscConfig+0xf78>)
 80041aa:	4313      	orrs	r3, r2
 80041ac:	604b      	str	r3, [r1, #4]
 80041ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041b2:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80041b6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80041ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041c0:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	fa93 f2a3 	rbit	r2, r3
 80041ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041ce:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80041d2:	601a      	str	r2, [r3, #0]
  return result;
 80041d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041d8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80041dc:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041de:	fab3 f383 	clz	r3, r3
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80041e8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	461a      	mov	r2, r3
 80041f0:	2301      	movs	r3, #1
 80041f2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041f4:	f7fd fef0 	bl	8001fd8 <HAL_GetTick>
 80041f8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80041fc:	e009      	b.n	8004212 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041fe:	f7fd feeb 	bl	8001fd8 <HAL_GetTick>
 8004202:	4602      	mov	r2, r0
 8004204:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	2b02      	cmp	r3, #2
 800420c:	d901      	bls.n	8004212 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	e144      	b.n	800449c <HAL_RCC_OscConfig+0x106c>
 8004212:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004216:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800421a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800421e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004220:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004224:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	fa93 f2a3 	rbit	r2, r3
 800422e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004232:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004236:	601a      	str	r2, [r3, #0]
  return result;
 8004238:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800423c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004240:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004242:	fab3 f383 	clz	r3, r3
 8004246:	b2db      	uxtb	r3, r3
 8004248:	095b      	lsrs	r3, r3, #5
 800424a:	b2db      	uxtb	r3, r3
 800424c:	f043 0301 	orr.w	r3, r3, #1
 8004250:	b2db      	uxtb	r3, r3
 8004252:	2b01      	cmp	r3, #1
 8004254:	d102      	bne.n	800425c <HAL_RCC_OscConfig+0xe2c>
 8004256:	4b54      	ldr	r3, [pc, #336]	; (80043a8 <HAL_RCC_OscConfig+0xf78>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	e027      	b.n	80042ac <HAL_RCC_OscConfig+0xe7c>
 800425c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004260:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004264:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004268:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800426a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800426e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	fa93 f2a3 	rbit	r2, r3
 8004278:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800427c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004280:	601a      	str	r2, [r3, #0]
 8004282:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004286:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800428a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800428e:	601a      	str	r2, [r3, #0]
 8004290:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004294:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	fa93 f2a3 	rbit	r2, r3
 800429e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042a2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80042a6:	601a      	str	r2, [r3, #0]
 80042a8:	4b3f      	ldr	r3, [pc, #252]	; (80043a8 <HAL_RCC_OscConfig+0xf78>)
 80042aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80042b0:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80042b4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80042b8:	6011      	str	r1, [r2, #0]
 80042ba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80042be:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80042c2:	6812      	ldr	r2, [r2, #0]
 80042c4:	fa92 f1a2 	rbit	r1, r2
 80042c8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80042cc:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80042d0:	6011      	str	r1, [r2, #0]
  return result;
 80042d2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80042d6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80042da:	6812      	ldr	r2, [r2, #0]
 80042dc:	fab2 f282 	clz	r2, r2
 80042e0:	b2d2      	uxtb	r2, r2
 80042e2:	f042 0220 	orr.w	r2, r2, #32
 80042e6:	b2d2      	uxtb	r2, r2
 80042e8:	f002 021f 	and.w	r2, r2, #31
 80042ec:	2101      	movs	r1, #1
 80042ee:	fa01 f202 	lsl.w	r2, r1, r2
 80042f2:	4013      	ands	r3, r2
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d082      	beq.n	80041fe <HAL_RCC_OscConfig+0xdce>
 80042f8:	e0cf      	b.n	800449a <HAL_RCC_OscConfig+0x106a>
 80042fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042fe:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004302:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004306:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004308:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800430c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	fa93 f2a3 	rbit	r2, r3
 8004316:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800431a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800431e:	601a      	str	r2, [r3, #0]
  return result;
 8004320:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004324:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004328:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800432a:	fab3 f383 	clz	r3, r3
 800432e:	b2db      	uxtb	r3, r3
 8004330:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004334:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	461a      	mov	r2, r3
 800433c:	2300      	movs	r3, #0
 800433e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004340:	f7fd fe4a 	bl	8001fd8 <HAL_GetTick>
 8004344:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004348:	e009      	b.n	800435e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800434a:	f7fd fe45 	bl	8001fd8 <HAL_GetTick>
 800434e:	4602      	mov	r2, r0
 8004350:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	2b02      	cmp	r3, #2
 8004358:	d901      	bls.n	800435e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e09e      	b.n	800449c <HAL_RCC_OscConfig+0x106c>
 800435e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004362:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004366:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800436a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800436c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004370:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	fa93 f2a3 	rbit	r2, r3
 800437a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800437e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004382:	601a      	str	r2, [r3, #0]
  return result;
 8004384:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004388:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800438c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800438e:	fab3 f383 	clz	r3, r3
 8004392:	b2db      	uxtb	r3, r3
 8004394:	095b      	lsrs	r3, r3, #5
 8004396:	b2db      	uxtb	r3, r3
 8004398:	f043 0301 	orr.w	r3, r3, #1
 800439c:	b2db      	uxtb	r3, r3
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d104      	bne.n	80043ac <HAL_RCC_OscConfig+0xf7c>
 80043a2:	4b01      	ldr	r3, [pc, #4]	; (80043a8 <HAL_RCC_OscConfig+0xf78>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	e029      	b.n	80043fc <HAL_RCC_OscConfig+0xfcc>
 80043a8:	40021000 	.word	0x40021000
 80043ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043b0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80043b4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80043b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043be:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	fa93 f2a3 	rbit	r2, r3
 80043c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043cc:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80043d0:	601a      	str	r2, [r3, #0]
 80043d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043d6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80043da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80043de:	601a      	str	r2, [r3, #0]
 80043e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043e4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	fa93 f2a3 	rbit	r2, r3
 80043ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043f2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80043f6:	601a      	str	r2, [r3, #0]
 80043f8:	4b2b      	ldr	r3, [pc, #172]	; (80044a8 <HAL_RCC_OscConfig+0x1078>)
 80043fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043fc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004400:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004404:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004408:	6011      	str	r1, [r2, #0]
 800440a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800440e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004412:	6812      	ldr	r2, [r2, #0]
 8004414:	fa92 f1a2 	rbit	r1, r2
 8004418:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800441c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004420:	6011      	str	r1, [r2, #0]
  return result;
 8004422:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004426:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800442a:	6812      	ldr	r2, [r2, #0]
 800442c:	fab2 f282 	clz	r2, r2
 8004430:	b2d2      	uxtb	r2, r2
 8004432:	f042 0220 	orr.w	r2, r2, #32
 8004436:	b2d2      	uxtb	r2, r2
 8004438:	f002 021f 	and.w	r2, r2, #31
 800443c:	2101      	movs	r1, #1
 800443e:	fa01 f202 	lsl.w	r2, r1, r2
 8004442:	4013      	ands	r3, r2
 8004444:	2b00      	cmp	r3, #0
 8004446:	d180      	bne.n	800434a <HAL_RCC_OscConfig+0xf1a>
 8004448:	e027      	b.n	800449a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800444a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800444e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	69db      	ldr	r3, [r3, #28]
 8004456:	2b01      	cmp	r3, #1
 8004458:	d101      	bne.n	800445e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e01e      	b.n	800449c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800445e:	4b12      	ldr	r3, [pc, #72]	; (80044a8 <HAL_RCC_OscConfig+0x1078>)
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004466:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800446a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800446e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004472:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	6a1b      	ldr	r3, [r3, #32]
 800447a:	429a      	cmp	r2, r3
 800447c:	d10b      	bne.n	8004496 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800447e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004482:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004486:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800448a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004492:	429a      	cmp	r2, r3
 8004494:	d001      	beq.n	800449a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e000      	b.n	800449c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800449a:	2300      	movs	r3, #0
}
 800449c:	4618      	mov	r0, r3
 800449e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	40021000 	.word	0x40021000

080044ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b09e      	sub	sp, #120	; 0x78
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80044b6:	2300      	movs	r3, #0
 80044b8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d101      	bne.n	80044c4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	e162      	b.n	800478a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80044c4:	4b90      	ldr	r3, [pc, #576]	; (8004708 <HAL_RCC_ClockConfig+0x25c>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 0307 	and.w	r3, r3, #7
 80044cc:	683a      	ldr	r2, [r7, #0]
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d910      	bls.n	80044f4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044d2:	4b8d      	ldr	r3, [pc, #564]	; (8004708 <HAL_RCC_ClockConfig+0x25c>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f023 0207 	bic.w	r2, r3, #7
 80044da:	498b      	ldr	r1, [pc, #556]	; (8004708 <HAL_RCC_ClockConfig+0x25c>)
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	4313      	orrs	r3, r2
 80044e0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044e2:	4b89      	ldr	r3, [pc, #548]	; (8004708 <HAL_RCC_ClockConfig+0x25c>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 0307 	and.w	r3, r3, #7
 80044ea:	683a      	ldr	r2, [r7, #0]
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d001      	beq.n	80044f4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e14a      	b.n	800478a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f003 0302 	and.w	r3, r3, #2
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d008      	beq.n	8004512 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004500:	4b82      	ldr	r3, [pc, #520]	; (800470c <HAL_RCC_ClockConfig+0x260>)
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	497f      	ldr	r1, [pc, #508]	; (800470c <HAL_RCC_ClockConfig+0x260>)
 800450e:	4313      	orrs	r3, r2
 8004510:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 0301 	and.w	r3, r3, #1
 800451a:	2b00      	cmp	r3, #0
 800451c:	f000 80dc 	beq.w	80046d8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	2b01      	cmp	r3, #1
 8004526:	d13c      	bne.n	80045a2 <HAL_RCC_ClockConfig+0xf6>
 8004528:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800452c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800452e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004530:	fa93 f3a3 	rbit	r3, r3
 8004534:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004536:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004538:	fab3 f383 	clz	r3, r3
 800453c:	b2db      	uxtb	r3, r3
 800453e:	095b      	lsrs	r3, r3, #5
 8004540:	b2db      	uxtb	r3, r3
 8004542:	f043 0301 	orr.w	r3, r3, #1
 8004546:	b2db      	uxtb	r3, r3
 8004548:	2b01      	cmp	r3, #1
 800454a:	d102      	bne.n	8004552 <HAL_RCC_ClockConfig+0xa6>
 800454c:	4b6f      	ldr	r3, [pc, #444]	; (800470c <HAL_RCC_ClockConfig+0x260>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	e00f      	b.n	8004572 <HAL_RCC_ClockConfig+0xc6>
 8004552:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004556:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004558:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800455a:	fa93 f3a3 	rbit	r3, r3
 800455e:	667b      	str	r3, [r7, #100]	; 0x64
 8004560:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004564:	663b      	str	r3, [r7, #96]	; 0x60
 8004566:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004568:	fa93 f3a3 	rbit	r3, r3
 800456c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800456e:	4b67      	ldr	r3, [pc, #412]	; (800470c <HAL_RCC_ClockConfig+0x260>)
 8004570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004572:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004576:	65ba      	str	r2, [r7, #88]	; 0x58
 8004578:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800457a:	fa92 f2a2 	rbit	r2, r2
 800457e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004580:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004582:	fab2 f282 	clz	r2, r2
 8004586:	b2d2      	uxtb	r2, r2
 8004588:	f042 0220 	orr.w	r2, r2, #32
 800458c:	b2d2      	uxtb	r2, r2
 800458e:	f002 021f 	and.w	r2, r2, #31
 8004592:	2101      	movs	r1, #1
 8004594:	fa01 f202 	lsl.w	r2, r1, r2
 8004598:	4013      	ands	r3, r2
 800459a:	2b00      	cmp	r3, #0
 800459c:	d17b      	bne.n	8004696 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e0f3      	b.n	800478a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	2b02      	cmp	r3, #2
 80045a8:	d13c      	bne.n	8004624 <HAL_RCC_ClockConfig+0x178>
 80045aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80045ae:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045b2:	fa93 f3a3 	rbit	r3, r3
 80045b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80045b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045ba:	fab3 f383 	clz	r3, r3
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	095b      	lsrs	r3, r3, #5
 80045c2:	b2db      	uxtb	r3, r3
 80045c4:	f043 0301 	orr.w	r3, r3, #1
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d102      	bne.n	80045d4 <HAL_RCC_ClockConfig+0x128>
 80045ce:	4b4f      	ldr	r3, [pc, #316]	; (800470c <HAL_RCC_ClockConfig+0x260>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	e00f      	b.n	80045f4 <HAL_RCC_ClockConfig+0x148>
 80045d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80045d8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045dc:	fa93 f3a3 	rbit	r3, r3
 80045e0:	647b      	str	r3, [r7, #68]	; 0x44
 80045e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80045e6:	643b      	str	r3, [r7, #64]	; 0x40
 80045e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045ea:	fa93 f3a3 	rbit	r3, r3
 80045ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045f0:	4b46      	ldr	r3, [pc, #280]	; (800470c <HAL_RCC_ClockConfig+0x260>)
 80045f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80045f8:	63ba      	str	r2, [r7, #56]	; 0x38
 80045fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80045fc:	fa92 f2a2 	rbit	r2, r2
 8004600:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004602:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004604:	fab2 f282 	clz	r2, r2
 8004608:	b2d2      	uxtb	r2, r2
 800460a:	f042 0220 	orr.w	r2, r2, #32
 800460e:	b2d2      	uxtb	r2, r2
 8004610:	f002 021f 	and.w	r2, r2, #31
 8004614:	2101      	movs	r1, #1
 8004616:	fa01 f202 	lsl.w	r2, r1, r2
 800461a:	4013      	ands	r3, r2
 800461c:	2b00      	cmp	r3, #0
 800461e:	d13a      	bne.n	8004696 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	e0b2      	b.n	800478a <HAL_RCC_ClockConfig+0x2de>
 8004624:	2302      	movs	r3, #2
 8004626:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800462a:	fa93 f3a3 	rbit	r3, r3
 800462e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004632:	fab3 f383 	clz	r3, r3
 8004636:	b2db      	uxtb	r3, r3
 8004638:	095b      	lsrs	r3, r3, #5
 800463a:	b2db      	uxtb	r3, r3
 800463c:	f043 0301 	orr.w	r3, r3, #1
 8004640:	b2db      	uxtb	r3, r3
 8004642:	2b01      	cmp	r3, #1
 8004644:	d102      	bne.n	800464c <HAL_RCC_ClockConfig+0x1a0>
 8004646:	4b31      	ldr	r3, [pc, #196]	; (800470c <HAL_RCC_ClockConfig+0x260>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	e00d      	b.n	8004668 <HAL_RCC_ClockConfig+0x1bc>
 800464c:	2302      	movs	r3, #2
 800464e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004652:	fa93 f3a3 	rbit	r3, r3
 8004656:	627b      	str	r3, [r7, #36]	; 0x24
 8004658:	2302      	movs	r3, #2
 800465a:	623b      	str	r3, [r7, #32]
 800465c:	6a3b      	ldr	r3, [r7, #32]
 800465e:	fa93 f3a3 	rbit	r3, r3
 8004662:	61fb      	str	r3, [r7, #28]
 8004664:	4b29      	ldr	r3, [pc, #164]	; (800470c <HAL_RCC_ClockConfig+0x260>)
 8004666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004668:	2202      	movs	r2, #2
 800466a:	61ba      	str	r2, [r7, #24]
 800466c:	69ba      	ldr	r2, [r7, #24]
 800466e:	fa92 f2a2 	rbit	r2, r2
 8004672:	617a      	str	r2, [r7, #20]
  return result;
 8004674:	697a      	ldr	r2, [r7, #20]
 8004676:	fab2 f282 	clz	r2, r2
 800467a:	b2d2      	uxtb	r2, r2
 800467c:	f042 0220 	orr.w	r2, r2, #32
 8004680:	b2d2      	uxtb	r2, r2
 8004682:	f002 021f 	and.w	r2, r2, #31
 8004686:	2101      	movs	r1, #1
 8004688:	fa01 f202 	lsl.w	r2, r1, r2
 800468c:	4013      	ands	r3, r2
 800468e:	2b00      	cmp	r3, #0
 8004690:	d101      	bne.n	8004696 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e079      	b.n	800478a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004696:	4b1d      	ldr	r3, [pc, #116]	; (800470c <HAL_RCC_ClockConfig+0x260>)
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	f023 0203 	bic.w	r2, r3, #3
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	491a      	ldr	r1, [pc, #104]	; (800470c <HAL_RCC_ClockConfig+0x260>)
 80046a4:	4313      	orrs	r3, r2
 80046a6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80046a8:	f7fd fc96 	bl	8001fd8 <HAL_GetTick>
 80046ac:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046ae:	e00a      	b.n	80046c6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046b0:	f7fd fc92 	bl	8001fd8 <HAL_GetTick>
 80046b4:	4602      	mov	r2, r0
 80046b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80046be:	4293      	cmp	r3, r2
 80046c0:	d901      	bls.n	80046c6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80046c2:	2303      	movs	r3, #3
 80046c4:	e061      	b.n	800478a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046c6:	4b11      	ldr	r3, [pc, #68]	; (800470c <HAL_RCC_ClockConfig+0x260>)
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	f003 020c 	and.w	r2, r3, #12
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d1eb      	bne.n	80046b0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80046d8:	4b0b      	ldr	r3, [pc, #44]	; (8004708 <HAL_RCC_ClockConfig+0x25c>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 0307 	and.w	r3, r3, #7
 80046e0:	683a      	ldr	r2, [r7, #0]
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d214      	bcs.n	8004710 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046e6:	4b08      	ldr	r3, [pc, #32]	; (8004708 <HAL_RCC_ClockConfig+0x25c>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f023 0207 	bic.w	r2, r3, #7
 80046ee:	4906      	ldr	r1, [pc, #24]	; (8004708 <HAL_RCC_ClockConfig+0x25c>)
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046f6:	4b04      	ldr	r3, [pc, #16]	; (8004708 <HAL_RCC_ClockConfig+0x25c>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 0307 	and.w	r3, r3, #7
 80046fe:	683a      	ldr	r2, [r7, #0]
 8004700:	429a      	cmp	r2, r3
 8004702:	d005      	beq.n	8004710 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	e040      	b.n	800478a <HAL_RCC_ClockConfig+0x2de>
 8004708:	40022000 	.word	0x40022000
 800470c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 0304 	and.w	r3, r3, #4
 8004718:	2b00      	cmp	r3, #0
 800471a:	d008      	beq.n	800472e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800471c:	4b1d      	ldr	r3, [pc, #116]	; (8004794 <HAL_RCC_ClockConfig+0x2e8>)
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	68db      	ldr	r3, [r3, #12]
 8004728:	491a      	ldr	r1, [pc, #104]	; (8004794 <HAL_RCC_ClockConfig+0x2e8>)
 800472a:	4313      	orrs	r3, r2
 800472c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 0308 	and.w	r3, r3, #8
 8004736:	2b00      	cmp	r3, #0
 8004738:	d009      	beq.n	800474e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800473a:	4b16      	ldr	r3, [pc, #88]	; (8004794 <HAL_RCC_ClockConfig+0x2e8>)
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	691b      	ldr	r3, [r3, #16]
 8004746:	00db      	lsls	r3, r3, #3
 8004748:	4912      	ldr	r1, [pc, #72]	; (8004794 <HAL_RCC_ClockConfig+0x2e8>)
 800474a:	4313      	orrs	r3, r2
 800474c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800474e:	f000 f829 	bl	80047a4 <HAL_RCC_GetSysClockFreq>
 8004752:	4601      	mov	r1, r0
 8004754:	4b0f      	ldr	r3, [pc, #60]	; (8004794 <HAL_RCC_ClockConfig+0x2e8>)
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800475c:	22f0      	movs	r2, #240	; 0xf0
 800475e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004760:	693a      	ldr	r2, [r7, #16]
 8004762:	fa92 f2a2 	rbit	r2, r2
 8004766:	60fa      	str	r2, [r7, #12]
  return result;
 8004768:	68fa      	ldr	r2, [r7, #12]
 800476a:	fab2 f282 	clz	r2, r2
 800476e:	b2d2      	uxtb	r2, r2
 8004770:	40d3      	lsrs	r3, r2
 8004772:	4a09      	ldr	r2, [pc, #36]	; (8004798 <HAL_RCC_ClockConfig+0x2ec>)
 8004774:	5cd3      	ldrb	r3, [r2, r3]
 8004776:	fa21 f303 	lsr.w	r3, r1, r3
 800477a:	4a08      	ldr	r2, [pc, #32]	; (800479c <HAL_RCC_ClockConfig+0x2f0>)
 800477c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800477e:	4b08      	ldr	r3, [pc, #32]	; (80047a0 <HAL_RCC_ClockConfig+0x2f4>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4618      	mov	r0, r3
 8004784:	f7fd fbe4 	bl	8001f50 <HAL_InitTick>
  
  return HAL_OK;
 8004788:	2300      	movs	r3, #0
}
 800478a:	4618      	mov	r0, r3
 800478c:	3778      	adds	r7, #120	; 0x78
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
 8004792:	bf00      	nop
 8004794:	40021000 	.word	0x40021000
 8004798:	0800b408 	.word	0x0800b408
 800479c:	20000000 	.word	0x20000000
 80047a0:	20000004 	.word	0x20000004

080047a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b08b      	sub	sp, #44	; 0x2c
 80047a8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80047aa:	2300      	movs	r3, #0
 80047ac:	61fb      	str	r3, [r7, #28]
 80047ae:	2300      	movs	r3, #0
 80047b0:	61bb      	str	r3, [r7, #24]
 80047b2:	2300      	movs	r3, #0
 80047b4:	627b      	str	r3, [r7, #36]	; 0x24
 80047b6:	2300      	movs	r3, #0
 80047b8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80047ba:	2300      	movs	r3, #0
 80047bc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80047be:	4b29      	ldr	r3, [pc, #164]	; (8004864 <HAL_RCC_GetSysClockFreq+0xc0>)
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80047c4:	69fb      	ldr	r3, [r7, #28]
 80047c6:	f003 030c 	and.w	r3, r3, #12
 80047ca:	2b04      	cmp	r3, #4
 80047cc:	d002      	beq.n	80047d4 <HAL_RCC_GetSysClockFreq+0x30>
 80047ce:	2b08      	cmp	r3, #8
 80047d0:	d003      	beq.n	80047da <HAL_RCC_GetSysClockFreq+0x36>
 80047d2:	e03c      	b.n	800484e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80047d4:	4b24      	ldr	r3, [pc, #144]	; (8004868 <HAL_RCC_GetSysClockFreq+0xc4>)
 80047d6:	623b      	str	r3, [r7, #32]
      break;
 80047d8:	e03c      	b.n	8004854 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80047da:	69fb      	ldr	r3, [r7, #28]
 80047dc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80047e0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80047e4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047e6:	68ba      	ldr	r2, [r7, #8]
 80047e8:	fa92 f2a2 	rbit	r2, r2
 80047ec:	607a      	str	r2, [r7, #4]
  return result;
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	fab2 f282 	clz	r2, r2
 80047f4:	b2d2      	uxtb	r2, r2
 80047f6:	40d3      	lsrs	r3, r2
 80047f8:	4a1c      	ldr	r2, [pc, #112]	; (800486c <HAL_RCC_GetSysClockFreq+0xc8>)
 80047fa:	5cd3      	ldrb	r3, [r2, r3]
 80047fc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80047fe:	4b19      	ldr	r3, [pc, #100]	; (8004864 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004802:	f003 030f 	and.w	r3, r3, #15
 8004806:	220f      	movs	r2, #15
 8004808:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800480a:	693a      	ldr	r2, [r7, #16]
 800480c:	fa92 f2a2 	rbit	r2, r2
 8004810:	60fa      	str	r2, [r7, #12]
  return result;
 8004812:	68fa      	ldr	r2, [r7, #12]
 8004814:	fab2 f282 	clz	r2, r2
 8004818:	b2d2      	uxtb	r2, r2
 800481a:	40d3      	lsrs	r3, r2
 800481c:	4a14      	ldr	r2, [pc, #80]	; (8004870 <HAL_RCC_GetSysClockFreq+0xcc>)
 800481e:	5cd3      	ldrb	r3, [r2, r3]
 8004820:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004822:	69fb      	ldr	r3, [r7, #28]
 8004824:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004828:	2b00      	cmp	r3, #0
 800482a:	d008      	beq.n	800483e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800482c:	4a0e      	ldr	r2, [pc, #56]	; (8004868 <HAL_RCC_GetSysClockFreq+0xc4>)
 800482e:	69bb      	ldr	r3, [r7, #24]
 8004830:	fbb2 f2f3 	udiv	r2, r2, r3
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	fb02 f303 	mul.w	r3, r2, r3
 800483a:	627b      	str	r3, [r7, #36]	; 0x24
 800483c:	e004      	b.n	8004848 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	4a0c      	ldr	r2, [pc, #48]	; (8004874 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004842:	fb02 f303 	mul.w	r3, r2, r3
 8004846:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484a:	623b      	str	r3, [r7, #32]
      break;
 800484c:	e002      	b.n	8004854 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800484e:	4b06      	ldr	r3, [pc, #24]	; (8004868 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004850:	623b      	str	r3, [r7, #32]
      break;
 8004852:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004854:	6a3b      	ldr	r3, [r7, #32]
}
 8004856:	4618      	mov	r0, r3
 8004858:	372c      	adds	r7, #44	; 0x2c
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr
 8004862:	bf00      	nop
 8004864:	40021000 	.word	0x40021000
 8004868:	007a1200 	.word	0x007a1200
 800486c:	0800b420 	.word	0x0800b420
 8004870:	0800b430 	.word	0x0800b430
 8004874:	003d0900 	.word	0x003d0900

08004878 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004878:	b480      	push	{r7}
 800487a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800487c:	4b03      	ldr	r3, [pc, #12]	; (800488c <HAL_RCC_GetHCLKFreq+0x14>)
 800487e:	681b      	ldr	r3, [r3, #0]
}
 8004880:	4618      	mov	r0, r3
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr
 800488a:	bf00      	nop
 800488c:	20000000 	.word	0x20000000

08004890 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b082      	sub	sp, #8
 8004894:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004896:	f7ff ffef 	bl	8004878 <HAL_RCC_GetHCLKFreq>
 800489a:	4601      	mov	r1, r0
 800489c:	4b0b      	ldr	r3, [pc, #44]	; (80048cc <HAL_RCC_GetPCLK1Freq+0x3c>)
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80048a4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80048a8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	fa92 f2a2 	rbit	r2, r2
 80048b0:	603a      	str	r2, [r7, #0]
  return result;
 80048b2:	683a      	ldr	r2, [r7, #0]
 80048b4:	fab2 f282 	clz	r2, r2
 80048b8:	b2d2      	uxtb	r2, r2
 80048ba:	40d3      	lsrs	r3, r2
 80048bc:	4a04      	ldr	r2, [pc, #16]	; (80048d0 <HAL_RCC_GetPCLK1Freq+0x40>)
 80048be:	5cd3      	ldrb	r3, [r2, r3]
 80048c0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80048c4:	4618      	mov	r0, r3
 80048c6:	3708      	adds	r7, #8
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}
 80048cc:	40021000 	.word	0x40021000
 80048d0:	0800b418 	.word	0x0800b418

080048d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b082      	sub	sp, #8
 80048d8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80048da:	f7ff ffcd 	bl	8004878 <HAL_RCC_GetHCLKFreq>
 80048de:	4601      	mov	r1, r0
 80048e0:	4b0b      	ldr	r3, [pc, #44]	; (8004910 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80048e8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80048ec:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	fa92 f2a2 	rbit	r2, r2
 80048f4:	603a      	str	r2, [r7, #0]
  return result;
 80048f6:	683a      	ldr	r2, [r7, #0]
 80048f8:	fab2 f282 	clz	r2, r2
 80048fc:	b2d2      	uxtb	r2, r2
 80048fe:	40d3      	lsrs	r3, r2
 8004900:	4a04      	ldr	r2, [pc, #16]	; (8004914 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004902:	5cd3      	ldrb	r3, [r2, r3]
 8004904:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004908:	4618      	mov	r0, r3
 800490a:	3708      	adds	r7, #8
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}
 8004910:	40021000 	.word	0x40021000
 8004914:	0800b418 	.word	0x0800b418

08004918 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b092      	sub	sp, #72	; 0x48
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004920:	2300      	movs	r3, #0
 8004922:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004924:	2300      	movs	r3, #0
 8004926:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004928:	2300      	movs	r3, #0
 800492a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004936:	2b00      	cmp	r3, #0
 8004938:	f000 80cd 	beq.w	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800493c:	4b86      	ldr	r3, [pc, #536]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800493e:	69db      	ldr	r3, [r3, #28]
 8004940:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004944:	2b00      	cmp	r3, #0
 8004946:	d10e      	bne.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004948:	4b83      	ldr	r3, [pc, #524]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800494a:	69db      	ldr	r3, [r3, #28]
 800494c:	4a82      	ldr	r2, [pc, #520]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800494e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004952:	61d3      	str	r3, [r2, #28]
 8004954:	4b80      	ldr	r3, [pc, #512]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004956:	69db      	ldr	r3, [r3, #28]
 8004958:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800495c:	60bb      	str	r3, [r7, #8]
 800495e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004960:	2301      	movs	r3, #1
 8004962:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004966:	4b7d      	ldr	r3, [pc, #500]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800496e:	2b00      	cmp	r3, #0
 8004970:	d118      	bne.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004972:	4b7a      	ldr	r3, [pc, #488]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a79      	ldr	r2, [pc, #484]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004978:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800497c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800497e:	f7fd fb2b 	bl	8001fd8 <HAL_GetTick>
 8004982:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004984:	e008      	b.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004986:	f7fd fb27 	bl	8001fd8 <HAL_GetTick>
 800498a:	4602      	mov	r2, r0
 800498c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800498e:	1ad3      	subs	r3, r2, r3
 8004990:	2b64      	cmp	r3, #100	; 0x64
 8004992:	d901      	bls.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004994:	2303      	movs	r3, #3
 8004996:	e0db      	b.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004998:	4b70      	ldr	r3, [pc, #448]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d0f0      	beq.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80049a4:	4b6c      	ldr	r3, [pc, #432]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80049a6:	6a1b      	ldr	r3, [r3, #32]
 80049a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049ac:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80049ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d07d      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80049be:	429a      	cmp	r2, r3
 80049c0:	d076      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80049c2:	4b65      	ldr	r3, [pc, #404]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80049c4:	6a1b      	ldr	r3, [r3, #32]
 80049c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80049d0:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049d4:	fa93 f3a3 	rbit	r3, r3
 80049d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80049da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80049dc:	fab3 f383 	clz	r3, r3
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	461a      	mov	r2, r3
 80049e4:	4b5e      	ldr	r3, [pc, #376]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80049e6:	4413      	add	r3, r2
 80049e8:	009b      	lsls	r3, r3, #2
 80049ea:	461a      	mov	r2, r3
 80049ec:	2301      	movs	r3, #1
 80049ee:	6013      	str	r3, [r2, #0]
 80049f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80049f4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049f8:	fa93 f3a3 	rbit	r3, r3
 80049fc:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80049fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004a00:	fab3 f383 	clz	r3, r3
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	461a      	mov	r2, r3
 8004a08:	4b55      	ldr	r3, [pc, #340]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004a0a:	4413      	add	r3, r2
 8004a0c:	009b      	lsls	r3, r3, #2
 8004a0e:	461a      	mov	r2, r3
 8004a10:	2300      	movs	r3, #0
 8004a12:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004a14:	4a50      	ldr	r2, [pc, #320]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004a16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a18:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004a1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a1c:	f003 0301 	and.w	r3, r3, #1
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d045      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a24:	f7fd fad8 	bl	8001fd8 <HAL_GetTick>
 8004a28:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a2a:	e00a      	b.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a2c:	f7fd fad4 	bl	8001fd8 <HAL_GetTick>
 8004a30:	4602      	mov	r2, r0
 8004a32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a34:	1ad3      	subs	r3, r2, r3
 8004a36:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d901      	bls.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8004a3e:	2303      	movs	r3, #3
 8004a40:	e086      	b.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8004a42:	2302      	movs	r3, #2
 8004a44:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a48:	fa93 f3a3 	rbit	r3, r3
 8004a4c:	627b      	str	r3, [r7, #36]	; 0x24
 8004a4e:	2302      	movs	r3, #2
 8004a50:	623b      	str	r3, [r7, #32]
 8004a52:	6a3b      	ldr	r3, [r7, #32]
 8004a54:	fa93 f3a3 	rbit	r3, r3
 8004a58:	61fb      	str	r3, [r7, #28]
  return result;
 8004a5a:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a5c:	fab3 f383 	clz	r3, r3
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	095b      	lsrs	r3, r3, #5
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	f043 0302 	orr.w	r3, r3, #2
 8004a6a:	b2db      	uxtb	r3, r3
 8004a6c:	2b02      	cmp	r3, #2
 8004a6e:	d102      	bne.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004a70:	4b39      	ldr	r3, [pc, #228]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004a72:	6a1b      	ldr	r3, [r3, #32]
 8004a74:	e007      	b.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8004a76:	2302      	movs	r3, #2
 8004a78:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a7a:	69bb      	ldr	r3, [r7, #24]
 8004a7c:	fa93 f3a3 	rbit	r3, r3
 8004a80:	617b      	str	r3, [r7, #20]
 8004a82:	4b35      	ldr	r3, [pc, #212]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a86:	2202      	movs	r2, #2
 8004a88:	613a      	str	r2, [r7, #16]
 8004a8a:	693a      	ldr	r2, [r7, #16]
 8004a8c:	fa92 f2a2 	rbit	r2, r2
 8004a90:	60fa      	str	r2, [r7, #12]
  return result;
 8004a92:	68fa      	ldr	r2, [r7, #12]
 8004a94:	fab2 f282 	clz	r2, r2
 8004a98:	b2d2      	uxtb	r2, r2
 8004a9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a9e:	b2d2      	uxtb	r2, r2
 8004aa0:	f002 021f 	and.w	r2, r2, #31
 8004aa4:	2101      	movs	r1, #1
 8004aa6:	fa01 f202 	lsl.w	r2, r1, r2
 8004aaa:	4013      	ands	r3, r2
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d0bd      	beq.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004ab0:	4b29      	ldr	r3, [pc, #164]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004ab2:	6a1b      	ldr	r3, [r3, #32]
 8004ab4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	4926      	ldr	r1, [pc, #152]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004ac2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d105      	bne.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004aca:	4b23      	ldr	r3, [pc, #140]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004acc:	69db      	ldr	r3, [r3, #28]
 8004ace:	4a22      	ldr	r2, [pc, #136]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004ad0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ad4:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 0301 	and.w	r3, r3, #1
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d008      	beq.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004ae2:	4b1d      	ldr	r3, [pc, #116]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae6:	f023 0203 	bic.w	r2, r3, #3
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	491a      	ldr	r1, [pc, #104]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004af0:	4313      	orrs	r3, r2
 8004af2:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 0320 	and.w	r3, r3, #32
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d008      	beq.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b00:	4b15      	ldr	r3, [pc, #84]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b04:	f023 0210 	bic.w	r2, r3, #16
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	4912      	ldr	r1, [pc, #72]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d008      	beq.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004b1e:	4b0e      	ldr	r3, [pc, #56]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b22:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	691b      	ldr	r3, [r3, #16]
 8004b2a:	490b      	ldr	r1, [pc, #44]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d008      	beq.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004b3c:	4b06      	ldr	r3, [pc, #24]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b40:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	695b      	ldr	r3, [r3, #20]
 8004b48:	4903      	ldr	r1, [pc, #12]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004b4e:	2300      	movs	r3, #0
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3748      	adds	r7, #72	; 0x48
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}
 8004b58:	40021000 	.word	0x40021000
 8004b5c:	40007000 	.word	0x40007000
 8004b60:	10908100 	.word	0x10908100

08004b64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b082      	sub	sp, #8
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d101      	bne.n	8004b76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	e049      	b.n	8004c0a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d106      	bne.n	8004b90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2200      	movs	r2, #0
 8004b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f7fc ffc8 	bl	8001b20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2202      	movs	r2, #2
 8004b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	3304      	adds	r3, #4
 8004ba0:	4619      	mov	r1, r3
 8004ba2:	4610      	mov	r0, r2
 8004ba4:	f000 fbb6 	bl	8005314 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2201      	movs	r2, #1
 8004be4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2201      	movs	r2, #1
 8004bec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2201      	movs	r2, #1
 8004c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c08:	2300      	movs	r3, #0
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3708      	adds	r7, #8
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
	...

08004c14 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b085      	sub	sp, #20
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c22:	b2db      	uxtb	r3, r3
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d001      	beq.n	8004c2c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	e038      	b.n	8004c9e <HAL_TIM_Base_Start+0x8a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2202      	movs	r2, #2
 8004c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a1c      	ldr	r2, [pc, #112]	; (8004cac <HAL_TIM_Base_Start+0x98>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d00e      	beq.n	8004c5c <HAL_TIM_Base_Start+0x48>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c46:	d009      	beq.n	8004c5c <HAL_TIM_Base_Start+0x48>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a18      	ldr	r2, [pc, #96]	; (8004cb0 <HAL_TIM_Base_Start+0x9c>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d004      	beq.n	8004c5c <HAL_TIM_Base_Start+0x48>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a17      	ldr	r2, [pc, #92]	; (8004cb4 <HAL_TIM_Base_Start+0xa0>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d115      	bne.n	8004c88 <HAL_TIM_Base_Start+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	689a      	ldr	r2, [r3, #8]
 8004c62:	4b15      	ldr	r3, [pc, #84]	; (8004cb8 <HAL_TIM_Base_Start+0xa4>)
 8004c64:	4013      	ands	r3, r2
 8004c66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2b06      	cmp	r3, #6
 8004c6c:	d015      	beq.n	8004c9a <HAL_TIM_Base_Start+0x86>
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c74:	d011      	beq.n	8004c9a <HAL_TIM_Base_Start+0x86>
    {
      __HAL_TIM_ENABLE(htim);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f042 0201 	orr.w	r2, r2, #1
 8004c84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c86:	e008      	b.n	8004c9a <HAL_TIM_Base_Start+0x86>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f042 0201 	orr.w	r2, r2, #1
 8004c96:	601a      	str	r2, [r3, #0]
 8004c98:	e000      	b.n	8004c9c <HAL_TIM_Base_Start+0x88>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c9a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004c9c:	2300      	movs	r3, #0
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3714      	adds	r7, #20
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr
 8004caa:	bf00      	nop
 8004cac:	40012c00 	.word	0x40012c00
 8004cb0:	40000400 	.word	0x40000400
 8004cb4:	40014000 	.word	0x40014000
 8004cb8:	00010007 	.word	0x00010007

08004cbc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b082      	sub	sp, #8
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d101      	bne.n	8004cce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e049      	b.n	8004d62 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d106      	bne.n	8004ce8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f000 f841 	bl	8004d6a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2202      	movs	r2, #2
 8004cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	3304      	adds	r3, #4
 8004cf8:	4619      	mov	r1, r3
 8004cfa:	4610      	mov	r0, r2
 8004cfc:	f000 fb0a 	bl	8005314 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2201      	movs	r2, #1
 8004d04:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2201      	movs	r2, #1
 8004d14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d60:	2300      	movs	r3, #0
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3708      	adds	r7, #8
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}

08004d6a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004d6a:	b480      	push	{r7}
 8004d6c:	b083      	sub	sp, #12
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004d72:	bf00      	nop
 8004d74:	370c      	adds	r7, #12
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr
	...

08004d80 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b084      	sub	sp, #16
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
 8004d88:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d109      	bne.n	8004da4 <HAL_TIM_PWM_Start+0x24>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d96:	b2db      	uxtb	r3, r3
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	bf14      	ite	ne
 8004d9c:	2301      	movne	r3, #1
 8004d9e:	2300      	moveq	r3, #0
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	e03c      	b.n	8004e1e <HAL_TIM_PWM_Start+0x9e>
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	2b04      	cmp	r3, #4
 8004da8:	d109      	bne.n	8004dbe <HAL_TIM_PWM_Start+0x3e>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004db0:	b2db      	uxtb	r3, r3
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	bf14      	ite	ne
 8004db6:	2301      	movne	r3, #1
 8004db8:	2300      	moveq	r3, #0
 8004dba:	b2db      	uxtb	r3, r3
 8004dbc:	e02f      	b.n	8004e1e <HAL_TIM_PWM_Start+0x9e>
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	2b08      	cmp	r3, #8
 8004dc2:	d109      	bne.n	8004dd8 <HAL_TIM_PWM_Start+0x58>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004dca:	b2db      	uxtb	r3, r3
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	bf14      	ite	ne
 8004dd0:	2301      	movne	r3, #1
 8004dd2:	2300      	moveq	r3, #0
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	e022      	b.n	8004e1e <HAL_TIM_PWM_Start+0x9e>
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	2b0c      	cmp	r3, #12
 8004ddc:	d109      	bne.n	8004df2 <HAL_TIM_PWM_Start+0x72>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	bf14      	ite	ne
 8004dea:	2301      	movne	r3, #1
 8004dec:	2300      	moveq	r3, #0
 8004dee:	b2db      	uxtb	r3, r3
 8004df0:	e015      	b.n	8004e1e <HAL_TIM_PWM_Start+0x9e>
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	2b10      	cmp	r3, #16
 8004df6:	d109      	bne.n	8004e0c <HAL_TIM_PWM_Start+0x8c>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004dfe:	b2db      	uxtb	r3, r3
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	bf14      	ite	ne
 8004e04:	2301      	movne	r3, #1
 8004e06:	2300      	moveq	r3, #0
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	e008      	b.n	8004e1e <HAL_TIM_PWM_Start+0x9e>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004e12:	b2db      	uxtb	r3, r3
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	bf14      	ite	ne
 8004e18:	2301      	movne	r3, #1
 8004e1a:	2300      	moveq	r3, #0
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d001      	beq.n	8004e26 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	e088      	b.n	8004f38 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d104      	bne.n	8004e36 <HAL_TIM_PWM_Start+0xb6>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2202      	movs	r2, #2
 8004e30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e34:	e023      	b.n	8004e7e <HAL_TIM_PWM_Start+0xfe>
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	2b04      	cmp	r3, #4
 8004e3a:	d104      	bne.n	8004e46 <HAL_TIM_PWM_Start+0xc6>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2202      	movs	r2, #2
 8004e40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e44:	e01b      	b.n	8004e7e <HAL_TIM_PWM_Start+0xfe>
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	2b08      	cmp	r3, #8
 8004e4a:	d104      	bne.n	8004e56 <HAL_TIM_PWM_Start+0xd6>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2202      	movs	r2, #2
 8004e50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e54:	e013      	b.n	8004e7e <HAL_TIM_PWM_Start+0xfe>
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	2b0c      	cmp	r3, #12
 8004e5a:	d104      	bne.n	8004e66 <HAL_TIM_PWM_Start+0xe6>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2202      	movs	r2, #2
 8004e60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e64:	e00b      	b.n	8004e7e <HAL_TIM_PWM_Start+0xfe>
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	2b10      	cmp	r3, #16
 8004e6a:	d104      	bne.n	8004e76 <HAL_TIM_PWM_Start+0xf6>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2202      	movs	r2, #2
 8004e70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e74:	e003      	b.n	8004e7e <HAL_TIM_PWM_Start+0xfe>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2202      	movs	r2, #2
 8004e7a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	2201      	movs	r2, #1
 8004e84:	6839      	ldr	r1, [r7, #0]
 8004e86:	4618      	mov	r0, r3
 8004e88:	f000 fdfc 	bl	8005a84 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a2b      	ldr	r2, [pc, #172]	; (8004f40 <HAL_TIM_PWM_Start+0x1c0>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d00e      	beq.n	8004eb4 <HAL_TIM_PWM_Start+0x134>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a2a      	ldr	r2, [pc, #168]	; (8004f44 <HAL_TIM_PWM_Start+0x1c4>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d009      	beq.n	8004eb4 <HAL_TIM_PWM_Start+0x134>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a28      	ldr	r2, [pc, #160]	; (8004f48 <HAL_TIM_PWM_Start+0x1c8>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d004      	beq.n	8004eb4 <HAL_TIM_PWM_Start+0x134>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a27      	ldr	r2, [pc, #156]	; (8004f4c <HAL_TIM_PWM_Start+0x1cc>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d101      	bne.n	8004eb8 <HAL_TIM_PWM_Start+0x138>
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	e000      	b.n	8004eba <HAL_TIM_PWM_Start+0x13a>
 8004eb8:	2300      	movs	r3, #0
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d007      	beq.n	8004ece <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ecc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a1b      	ldr	r2, [pc, #108]	; (8004f40 <HAL_TIM_PWM_Start+0x1c0>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d00e      	beq.n	8004ef6 <HAL_TIM_PWM_Start+0x176>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ee0:	d009      	beq.n	8004ef6 <HAL_TIM_PWM_Start+0x176>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a1a      	ldr	r2, [pc, #104]	; (8004f50 <HAL_TIM_PWM_Start+0x1d0>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d004      	beq.n	8004ef6 <HAL_TIM_PWM_Start+0x176>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a14      	ldr	r2, [pc, #80]	; (8004f44 <HAL_TIM_PWM_Start+0x1c4>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d115      	bne.n	8004f22 <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	689a      	ldr	r2, [r3, #8]
 8004efc:	4b15      	ldr	r3, [pc, #84]	; (8004f54 <HAL_TIM_PWM_Start+0x1d4>)
 8004efe:	4013      	ands	r3, r2
 8004f00:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2b06      	cmp	r3, #6
 8004f06:	d015      	beq.n	8004f34 <HAL_TIM_PWM_Start+0x1b4>
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f0e:	d011      	beq.n	8004f34 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f042 0201 	orr.w	r2, r2, #1
 8004f1e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f20:	e008      	b.n	8004f34 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f042 0201 	orr.w	r2, r2, #1
 8004f30:	601a      	str	r2, [r3, #0]
 8004f32:	e000      	b.n	8004f36 <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f34:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004f36:	2300      	movs	r3, #0
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3710      	adds	r7, #16
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}
 8004f40:	40012c00 	.word	0x40012c00
 8004f44:	40014000 	.word	0x40014000
 8004f48:	40014400 	.word	0x40014400
 8004f4c:	40014800 	.word	0x40014800
 8004f50:	40000400 	.word	0x40000400
 8004f54:	00010007 	.word	0x00010007

08004f58 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b086      	sub	sp, #24
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	60f8      	str	r0, [r7, #12]
 8004f60:	60b9      	str	r1, [r7, #8]
 8004f62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f64:	2300      	movs	r3, #0
 8004f66:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d101      	bne.n	8004f76 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004f72:	2302      	movs	r3, #2
 8004f74:	e0ff      	b.n	8005176 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2201      	movs	r2, #1
 8004f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2b14      	cmp	r3, #20
 8004f82:	f200 80f0 	bhi.w	8005166 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004f86:	a201      	add	r2, pc, #4	; (adr r2, 8004f8c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f8c:	08004fe1 	.word	0x08004fe1
 8004f90:	08005167 	.word	0x08005167
 8004f94:	08005167 	.word	0x08005167
 8004f98:	08005167 	.word	0x08005167
 8004f9c:	08005021 	.word	0x08005021
 8004fa0:	08005167 	.word	0x08005167
 8004fa4:	08005167 	.word	0x08005167
 8004fa8:	08005167 	.word	0x08005167
 8004fac:	08005063 	.word	0x08005063
 8004fb0:	08005167 	.word	0x08005167
 8004fb4:	08005167 	.word	0x08005167
 8004fb8:	08005167 	.word	0x08005167
 8004fbc:	080050a3 	.word	0x080050a3
 8004fc0:	08005167 	.word	0x08005167
 8004fc4:	08005167 	.word	0x08005167
 8004fc8:	08005167 	.word	0x08005167
 8004fcc:	080050e5 	.word	0x080050e5
 8004fd0:	08005167 	.word	0x08005167
 8004fd4:	08005167 	.word	0x08005167
 8004fd8:	08005167 	.word	0x08005167
 8004fdc:	08005125 	.word	0x08005125
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	68b9      	ldr	r1, [r7, #8]
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f000 fa0c 	bl	8005404 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	699a      	ldr	r2, [r3, #24]
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f042 0208 	orr.w	r2, r2, #8
 8004ffa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	699a      	ldr	r2, [r3, #24]
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f022 0204 	bic.w	r2, r2, #4
 800500a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	6999      	ldr	r1, [r3, #24]
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	691a      	ldr	r2, [r3, #16]
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	430a      	orrs	r2, r1
 800501c:	619a      	str	r2, [r3, #24]
      break;
 800501e:	e0a5      	b.n	800516c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	68b9      	ldr	r1, [r7, #8]
 8005026:	4618      	mov	r0, r3
 8005028:	f000 fa72 	bl	8005510 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	699a      	ldr	r2, [r3, #24]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800503a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	699a      	ldr	r2, [r3, #24]
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800504a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	6999      	ldr	r1, [r3, #24]
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	691b      	ldr	r3, [r3, #16]
 8005056:	021a      	lsls	r2, r3, #8
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	430a      	orrs	r2, r1
 800505e:	619a      	str	r2, [r3, #24]
      break;
 8005060:	e084      	b.n	800516c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	68b9      	ldr	r1, [r7, #8]
 8005068:	4618      	mov	r0, r3
 800506a:	f000 fad1 	bl	8005610 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	69da      	ldr	r2, [r3, #28]
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f042 0208 	orr.w	r2, r2, #8
 800507c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	69da      	ldr	r2, [r3, #28]
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f022 0204 	bic.w	r2, r2, #4
 800508c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	69d9      	ldr	r1, [r3, #28]
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	691a      	ldr	r2, [r3, #16]
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	430a      	orrs	r2, r1
 800509e:	61da      	str	r2, [r3, #28]
      break;
 80050a0:	e064      	b.n	800516c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	68b9      	ldr	r1, [r7, #8]
 80050a8:	4618      	mov	r0, r3
 80050aa:	f000 fb2f 	bl	800570c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	69da      	ldr	r2, [r3, #28]
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	69da      	ldr	r2, [r3, #28]
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	69d9      	ldr	r1, [r3, #28]
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	691b      	ldr	r3, [r3, #16]
 80050d8:	021a      	lsls	r2, r3, #8
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	430a      	orrs	r2, r1
 80050e0:	61da      	str	r2, [r3, #28]
      break;
 80050e2:	e043      	b.n	800516c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	68b9      	ldr	r1, [r7, #8]
 80050ea:	4618      	mov	r0, r3
 80050ec:	f000 fb72 	bl	80057d4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f042 0208 	orr.w	r2, r2, #8
 80050fe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f022 0204 	bic.w	r2, r2, #4
 800510e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	691a      	ldr	r2, [r3, #16]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	430a      	orrs	r2, r1
 8005120:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005122:	e023      	b.n	800516c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	68b9      	ldr	r1, [r7, #8]
 800512a:	4618      	mov	r0, r3
 800512c:	f000 fbb0 	bl	8005890 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800513e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800514e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	691b      	ldr	r3, [r3, #16]
 800515a:	021a      	lsls	r2, r3, #8
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	430a      	orrs	r2, r1
 8005162:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005164:	e002      	b.n	800516c <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	75fb      	strb	r3, [r7, #23]
      break;
 800516a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2200      	movs	r2, #0
 8005170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005174:	7dfb      	ldrb	r3, [r7, #23]
}
 8005176:	4618      	mov	r0, r3
 8005178:	3718      	adds	r7, #24
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}
 800517e:	bf00      	nop

08005180 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b084      	sub	sp, #16
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
 8005188:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800518a:	2300      	movs	r3, #0
 800518c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005194:	2b01      	cmp	r3, #1
 8005196:	d101      	bne.n	800519c <HAL_TIM_ConfigClockSource+0x1c>
 8005198:	2302      	movs	r3, #2
 800519a:	e0b6      	b.n	800530a <HAL_TIM_ConfigClockSource+0x18a>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2201      	movs	r2, #1
 80051a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2202      	movs	r2, #2
 80051a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80051be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80051c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	68ba      	ldr	r2, [r7, #8]
 80051ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051d8:	d03e      	beq.n	8005258 <HAL_TIM_ConfigClockSource+0xd8>
 80051da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051de:	f200 8087 	bhi.w	80052f0 <HAL_TIM_ConfigClockSource+0x170>
 80051e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051e6:	f000 8086 	beq.w	80052f6 <HAL_TIM_ConfigClockSource+0x176>
 80051ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051ee:	d87f      	bhi.n	80052f0 <HAL_TIM_ConfigClockSource+0x170>
 80051f0:	2b70      	cmp	r3, #112	; 0x70
 80051f2:	d01a      	beq.n	800522a <HAL_TIM_ConfigClockSource+0xaa>
 80051f4:	2b70      	cmp	r3, #112	; 0x70
 80051f6:	d87b      	bhi.n	80052f0 <HAL_TIM_ConfigClockSource+0x170>
 80051f8:	2b60      	cmp	r3, #96	; 0x60
 80051fa:	d050      	beq.n	800529e <HAL_TIM_ConfigClockSource+0x11e>
 80051fc:	2b60      	cmp	r3, #96	; 0x60
 80051fe:	d877      	bhi.n	80052f0 <HAL_TIM_ConfigClockSource+0x170>
 8005200:	2b50      	cmp	r3, #80	; 0x50
 8005202:	d03c      	beq.n	800527e <HAL_TIM_ConfigClockSource+0xfe>
 8005204:	2b50      	cmp	r3, #80	; 0x50
 8005206:	d873      	bhi.n	80052f0 <HAL_TIM_ConfigClockSource+0x170>
 8005208:	2b40      	cmp	r3, #64	; 0x40
 800520a:	d058      	beq.n	80052be <HAL_TIM_ConfigClockSource+0x13e>
 800520c:	2b40      	cmp	r3, #64	; 0x40
 800520e:	d86f      	bhi.n	80052f0 <HAL_TIM_ConfigClockSource+0x170>
 8005210:	2b30      	cmp	r3, #48	; 0x30
 8005212:	d064      	beq.n	80052de <HAL_TIM_ConfigClockSource+0x15e>
 8005214:	2b30      	cmp	r3, #48	; 0x30
 8005216:	d86b      	bhi.n	80052f0 <HAL_TIM_ConfigClockSource+0x170>
 8005218:	2b20      	cmp	r3, #32
 800521a:	d060      	beq.n	80052de <HAL_TIM_ConfigClockSource+0x15e>
 800521c:	2b20      	cmp	r3, #32
 800521e:	d867      	bhi.n	80052f0 <HAL_TIM_ConfigClockSource+0x170>
 8005220:	2b00      	cmp	r3, #0
 8005222:	d05c      	beq.n	80052de <HAL_TIM_ConfigClockSource+0x15e>
 8005224:	2b10      	cmp	r3, #16
 8005226:	d05a      	beq.n	80052de <HAL_TIM_ConfigClockSource+0x15e>
 8005228:	e062      	b.n	80052f0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6818      	ldr	r0, [r3, #0]
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	6899      	ldr	r1, [r3, #8]
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	685a      	ldr	r2, [r3, #4]
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	68db      	ldr	r3, [r3, #12]
 800523a:	f000 fc03 	bl	8005a44 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800524c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	68ba      	ldr	r2, [r7, #8]
 8005254:	609a      	str	r2, [r3, #8]
      break;
 8005256:	e04f      	b.n	80052f8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6818      	ldr	r0, [r3, #0]
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	6899      	ldr	r1, [r3, #8]
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	685a      	ldr	r2, [r3, #4]
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	f000 fbec 	bl	8005a44 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	689a      	ldr	r2, [r3, #8]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800527a:	609a      	str	r2, [r3, #8]
      break;
 800527c:	e03c      	b.n	80052f8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6818      	ldr	r0, [r3, #0]
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	6859      	ldr	r1, [r3, #4]
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	68db      	ldr	r3, [r3, #12]
 800528a:	461a      	mov	r2, r3
 800528c:	f000 fb60 	bl	8005950 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	2150      	movs	r1, #80	; 0x50
 8005296:	4618      	mov	r0, r3
 8005298:	f000 fbb9 	bl	8005a0e <TIM_ITRx_SetConfig>
      break;
 800529c:	e02c      	b.n	80052f8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6818      	ldr	r0, [r3, #0]
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	6859      	ldr	r1, [r3, #4]
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	68db      	ldr	r3, [r3, #12]
 80052aa:	461a      	mov	r2, r3
 80052ac:	f000 fb7f 	bl	80059ae <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	2160      	movs	r1, #96	; 0x60
 80052b6:	4618      	mov	r0, r3
 80052b8:	f000 fba9 	bl	8005a0e <TIM_ITRx_SetConfig>
      break;
 80052bc:	e01c      	b.n	80052f8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6818      	ldr	r0, [r3, #0]
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	6859      	ldr	r1, [r3, #4]
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	68db      	ldr	r3, [r3, #12]
 80052ca:	461a      	mov	r2, r3
 80052cc:	f000 fb40 	bl	8005950 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	2140      	movs	r1, #64	; 0x40
 80052d6:	4618      	mov	r0, r3
 80052d8:	f000 fb99 	bl	8005a0e <TIM_ITRx_SetConfig>
      break;
 80052dc:	e00c      	b.n	80052f8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4619      	mov	r1, r3
 80052e8:	4610      	mov	r0, r2
 80052ea:	f000 fb90 	bl	8005a0e <TIM_ITRx_SetConfig>
      break;
 80052ee:	e003      	b.n	80052f8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80052f0:	2301      	movs	r3, #1
 80052f2:	73fb      	strb	r3, [r7, #15]
      break;
 80052f4:	e000      	b.n	80052f8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80052f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2201      	movs	r2, #1
 80052fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2200      	movs	r2, #0
 8005304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005308:	7bfb      	ldrb	r3, [r7, #15]
}
 800530a:	4618      	mov	r0, r3
 800530c:	3710      	adds	r7, #16
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}
	...

08005314 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005314:	b480      	push	{r7}
 8005316:	b085      	sub	sp, #20
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	4a32      	ldr	r2, [pc, #200]	; (80053f0 <TIM_Base_SetConfig+0xdc>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d007      	beq.n	800533c <TIM_Base_SetConfig+0x28>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005332:	d003      	beq.n	800533c <TIM_Base_SetConfig+0x28>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	4a2f      	ldr	r2, [pc, #188]	; (80053f4 <TIM_Base_SetConfig+0xe0>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d108      	bne.n	800534e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005342:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	68fa      	ldr	r2, [r7, #12]
 800534a:	4313      	orrs	r3, r2
 800534c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4a27      	ldr	r2, [pc, #156]	; (80053f0 <TIM_Base_SetConfig+0xdc>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d013      	beq.n	800537e <TIM_Base_SetConfig+0x6a>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800535c:	d00f      	beq.n	800537e <TIM_Base_SetConfig+0x6a>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	4a24      	ldr	r2, [pc, #144]	; (80053f4 <TIM_Base_SetConfig+0xe0>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d00b      	beq.n	800537e <TIM_Base_SetConfig+0x6a>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4a23      	ldr	r2, [pc, #140]	; (80053f8 <TIM_Base_SetConfig+0xe4>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d007      	beq.n	800537e <TIM_Base_SetConfig+0x6a>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	4a22      	ldr	r2, [pc, #136]	; (80053fc <TIM_Base_SetConfig+0xe8>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d003      	beq.n	800537e <TIM_Base_SetConfig+0x6a>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	4a21      	ldr	r2, [pc, #132]	; (8005400 <TIM_Base_SetConfig+0xec>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d108      	bne.n	8005390 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005384:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	68db      	ldr	r3, [r3, #12]
 800538a:	68fa      	ldr	r2, [r7, #12]
 800538c:	4313      	orrs	r3, r2
 800538e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	695b      	ldr	r3, [r3, #20]
 800539a:	4313      	orrs	r3, r2
 800539c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	68fa      	ldr	r2, [r7, #12]
 80053a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	689a      	ldr	r2, [r3, #8]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	4a0e      	ldr	r2, [pc, #56]	; (80053f0 <TIM_Base_SetConfig+0xdc>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d00b      	beq.n	80053d4 <TIM_Base_SetConfig+0xc0>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	4a0e      	ldr	r2, [pc, #56]	; (80053f8 <TIM_Base_SetConfig+0xe4>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d007      	beq.n	80053d4 <TIM_Base_SetConfig+0xc0>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	4a0d      	ldr	r2, [pc, #52]	; (80053fc <TIM_Base_SetConfig+0xe8>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d003      	beq.n	80053d4 <TIM_Base_SetConfig+0xc0>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	4a0c      	ldr	r2, [pc, #48]	; (8005400 <TIM_Base_SetConfig+0xec>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d103      	bne.n	80053dc <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	691a      	ldr	r2, [r3, #16]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2201      	movs	r2, #1
 80053e0:	615a      	str	r2, [r3, #20]
}
 80053e2:	bf00      	nop
 80053e4:	3714      	adds	r7, #20
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr
 80053ee:	bf00      	nop
 80053f0:	40012c00 	.word	0x40012c00
 80053f4:	40000400 	.word	0x40000400
 80053f8:	40014000 	.word	0x40014000
 80053fc:	40014400 	.word	0x40014400
 8005400:	40014800 	.word	0x40014800

08005404 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005404:	b480      	push	{r7}
 8005406:	b087      	sub	sp, #28
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
 800540c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6a1b      	ldr	r3, [r3, #32]
 8005412:	f023 0201 	bic.w	r2, r3, #1
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6a1b      	ldr	r3, [r3, #32]
 800541e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	699b      	ldr	r3, [r3, #24]
 800542a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005432:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005436:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f023 0303 	bic.w	r3, r3, #3
 800543e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	68fa      	ldr	r2, [r7, #12]
 8005446:	4313      	orrs	r3, r2
 8005448:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	f023 0302 	bic.w	r3, r3, #2
 8005450:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	697a      	ldr	r2, [r7, #20]
 8005458:	4313      	orrs	r3, r2
 800545a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	4a28      	ldr	r2, [pc, #160]	; (8005500 <TIM_OC1_SetConfig+0xfc>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d00b      	beq.n	800547c <TIM_OC1_SetConfig+0x78>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	4a27      	ldr	r2, [pc, #156]	; (8005504 <TIM_OC1_SetConfig+0x100>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d007      	beq.n	800547c <TIM_OC1_SetConfig+0x78>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	4a26      	ldr	r2, [pc, #152]	; (8005508 <TIM_OC1_SetConfig+0x104>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d003      	beq.n	800547c <TIM_OC1_SetConfig+0x78>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	4a25      	ldr	r2, [pc, #148]	; (800550c <TIM_OC1_SetConfig+0x108>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d10c      	bne.n	8005496 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	f023 0308 	bic.w	r3, r3, #8
 8005482:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	68db      	ldr	r3, [r3, #12]
 8005488:	697a      	ldr	r2, [r7, #20]
 800548a:	4313      	orrs	r3, r2
 800548c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	f023 0304 	bic.w	r3, r3, #4
 8005494:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	4a19      	ldr	r2, [pc, #100]	; (8005500 <TIM_OC1_SetConfig+0xfc>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d00b      	beq.n	80054b6 <TIM_OC1_SetConfig+0xb2>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	4a18      	ldr	r2, [pc, #96]	; (8005504 <TIM_OC1_SetConfig+0x100>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d007      	beq.n	80054b6 <TIM_OC1_SetConfig+0xb2>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	4a17      	ldr	r2, [pc, #92]	; (8005508 <TIM_OC1_SetConfig+0x104>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d003      	beq.n	80054b6 <TIM_OC1_SetConfig+0xb2>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4a16      	ldr	r2, [pc, #88]	; (800550c <TIM_OC1_SetConfig+0x108>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d111      	bne.n	80054da <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80054c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	695b      	ldr	r3, [r3, #20]
 80054ca:	693a      	ldr	r2, [r7, #16]
 80054cc:	4313      	orrs	r3, r2
 80054ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	699b      	ldr	r3, [r3, #24]
 80054d4:	693a      	ldr	r2, [r7, #16]
 80054d6:	4313      	orrs	r3, r2
 80054d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	693a      	ldr	r2, [r7, #16]
 80054de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	68fa      	ldr	r2, [r7, #12]
 80054e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	685a      	ldr	r2, [r3, #4]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	697a      	ldr	r2, [r7, #20]
 80054f2:	621a      	str	r2, [r3, #32]
}
 80054f4:	bf00      	nop
 80054f6:	371c      	adds	r7, #28
 80054f8:	46bd      	mov	sp, r7
 80054fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fe:	4770      	bx	lr
 8005500:	40012c00 	.word	0x40012c00
 8005504:	40014000 	.word	0x40014000
 8005508:	40014400 	.word	0x40014400
 800550c:	40014800 	.word	0x40014800

08005510 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005510:	b480      	push	{r7}
 8005512:	b087      	sub	sp, #28
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6a1b      	ldr	r3, [r3, #32]
 800551e:	f023 0210 	bic.w	r2, r3, #16
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6a1b      	ldr	r3, [r3, #32]
 800552a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	699b      	ldr	r3, [r3, #24]
 8005536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800553e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005542:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800554a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	021b      	lsls	r3, r3, #8
 8005552:	68fa      	ldr	r2, [r7, #12]
 8005554:	4313      	orrs	r3, r2
 8005556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	f023 0320 	bic.w	r3, r3, #32
 800555e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	011b      	lsls	r3, r3, #4
 8005566:	697a      	ldr	r2, [r7, #20]
 8005568:	4313      	orrs	r3, r2
 800556a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	4a24      	ldr	r2, [pc, #144]	; (8005600 <TIM_OC2_SetConfig+0xf0>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d10d      	bne.n	8005590 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800557a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	011b      	lsls	r3, r3, #4
 8005582:	697a      	ldr	r2, [r7, #20]
 8005584:	4313      	orrs	r3, r2
 8005586:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800558e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	4a1b      	ldr	r2, [pc, #108]	; (8005600 <TIM_OC2_SetConfig+0xf0>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d00b      	beq.n	80055b0 <TIM_OC2_SetConfig+0xa0>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	4a1a      	ldr	r2, [pc, #104]	; (8005604 <TIM_OC2_SetConfig+0xf4>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d007      	beq.n	80055b0 <TIM_OC2_SetConfig+0xa0>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	4a19      	ldr	r2, [pc, #100]	; (8005608 <TIM_OC2_SetConfig+0xf8>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d003      	beq.n	80055b0 <TIM_OC2_SetConfig+0xa0>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	4a18      	ldr	r2, [pc, #96]	; (800560c <TIM_OC2_SetConfig+0xfc>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d113      	bne.n	80055d8 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80055b6:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80055be:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	695b      	ldr	r3, [r3, #20]
 80055c4:	009b      	lsls	r3, r3, #2
 80055c6:	693a      	ldr	r2, [r7, #16]
 80055c8:	4313      	orrs	r3, r2
 80055ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	699b      	ldr	r3, [r3, #24]
 80055d0:	009b      	lsls	r3, r3, #2
 80055d2:	693a      	ldr	r2, [r7, #16]
 80055d4:	4313      	orrs	r3, r2
 80055d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	693a      	ldr	r2, [r7, #16]
 80055dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	68fa      	ldr	r2, [r7, #12]
 80055e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	685a      	ldr	r2, [r3, #4]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	697a      	ldr	r2, [r7, #20]
 80055f0:	621a      	str	r2, [r3, #32]
}
 80055f2:	bf00      	nop
 80055f4:	371c      	adds	r7, #28
 80055f6:	46bd      	mov	sp, r7
 80055f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fc:	4770      	bx	lr
 80055fe:	bf00      	nop
 8005600:	40012c00 	.word	0x40012c00
 8005604:	40014000 	.word	0x40014000
 8005608:	40014400 	.word	0x40014400
 800560c:	40014800 	.word	0x40014800

08005610 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005610:	b480      	push	{r7}
 8005612:	b087      	sub	sp, #28
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6a1b      	ldr	r3, [r3, #32]
 800561e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6a1b      	ldr	r3, [r3, #32]
 800562a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	69db      	ldr	r3, [r3, #28]
 8005636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800563e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005642:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f023 0303 	bic.w	r3, r3, #3
 800564a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	68fa      	ldr	r2, [r7, #12]
 8005652:	4313      	orrs	r3, r2
 8005654:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800565c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	021b      	lsls	r3, r3, #8
 8005664:	697a      	ldr	r2, [r7, #20]
 8005666:	4313      	orrs	r3, r2
 8005668:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	4a23      	ldr	r2, [pc, #140]	; (80056fc <TIM_OC3_SetConfig+0xec>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d10d      	bne.n	800568e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005678:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	68db      	ldr	r3, [r3, #12]
 800567e:	021b      	lsls	r3, r3, #8
 8005680:	697a      	ldr	r2, [r7, #20]
 8005682:	4313      	orrs	r3, r2
 8005684:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800568c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	4a1a      	ldr	r2, [pc, #104]	; (80056fc <TIM_OC3_SetConfig+0xec>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d00b      	beq.n	80056ae <TIM_OC3_SetConfig+0x9e>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	4a19      	ldr	r2, [pc, #100]	; (8005700 <TIM_OC3_SetConfig+0xf0>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d007      	beq.n	80056ae <TIM_OC3_SetConfig+0x9e>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	4a18      	ldr	r2, [pc, #96]	; (8005704 <TIM_OC3_SetConfig+0xf4>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d003      	beq.n	80056ae <TIM_OC3_SetConfig+0x9e>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	4a17      	ldr	r2, [pc, #92]	; (8005708 <TIM_OC3_SetConfig+0xf8>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d113      	bne.n	80056d6 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80056b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80056bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	695b      	ldr	r3, [r3, #20]
 80056c2:	011b      	lsls	r3, r3, #4
 80056c4:	693a      	ldr	r2, [r7, #16]
 80056c6:	4313      	orrs	r3, r2
 80056c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	699b      	ldr	r3, [r3, #24]
 80056ce:	011b      	lsls	r3, r3, #4
 80056d0:	693a      	ldr	r2, [r7, #16]
 80056d2:	4313      	orrs	r3, r2
 80056d4:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	693a      	ldr	r2, [r7, #16]
 80056da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	68fa      	ldr	r2, [r7, #12]
 80056e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	685a      	ldr	r2, [r3, #4]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	697a      	ldr	r2, [r7, #20]
 80056ee:	621a      	str	r2, [r3, #32]
}
 80056f0:	bf00      	nop
 80056f2:	371c      	adds	r7, #28
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr
 80056fc:	40012c00 	.word	0x40012c00
 8005700:	40014000 	.word	0x40014000
 8005704:	40014400 	.word	0x40014400
 8005708:	40014800 	.word	0x40014800

0800570c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800570c:	b480      	push	{r7}
 800570e:	b087      	sub	sp, #28
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
 8005714:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6a1b      	ldr	r3, [r3, #32]
 800571a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6a1b      	ldr	r3, [r3, #32]
 8005726:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	69db      	ldr	r3, [r3, #28]
 8005732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800573a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800573e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005746:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	021b      	lsls	r3, r3, #8
 800574e:	68fa      	ldr	r2, [r7, #12]
 8005750:	4313      	orrs	r3, r2
 8005752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800575a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	031b      	lsls	r3, r3, #12
 8005762:	693a      	ldr	r2, [r7, #16]
 8005764:	4313      	orrs	r3, r2
 8005766:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	4a16      	ldr	r2, [pc, #88]	; (80057c4 <TIM_OC4_SetConfig+0xb8>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d00b      	beq.n	8005788 <TIM_OC4_SetConfig+0x7c>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	4a15      	ldr	r2, [pc, #84]	; (80057c8 <TIM_OC4_SetConfig+0xbc>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d007      	beq.n	8005788 <TIM_OC4_SetConfig+0x7c>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	4a14      	ldr	r2, [pc, #80]	; (80057cc <TIM_OC4_SetConfig+0xc0>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d003      	beq.n	8005788 <TIM_OC4_SetConfig+0x7c>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	4a13      	ldr	r2, [pc, #76]	; (80057d0 <TIM_OC4_SetConfig+0xc4>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d109      	bne.n	800579c <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800578e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	695b      	ldr	r3, [r3, #20]
 8005794:	019b      	lsls	r3, r3, #6
 8005796:	697a      	ldr	r2, [r7, #20]
 8005798:	4313      	orrs	r3, r2
 800579a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	697a      	ldr	r2, [r7, #20]
 80057a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	68fa      	ldr	r2, [r7, #12]
 80057a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	685a      	ldr	r2, [r3, #4]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	693a      	ldr	r2, [r7, #16]
 80057b4:	621a      	str	r2, [r3, #32]
}
 80057b6:	bf00      	nop
 80057b8:	371c      	adds	r7, #28
 80057ba:	46bd      	mov	sp, r7
 80057bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c0:	4770      	bx	lr
 80057c2:	bf00      	nop
 80057c4:	40012c00 	.word	0x40012c00
 80057c8:	40014000 	.word	0x40014000
 80057cc:	40014400 	.word	0x40014400
 80057d0:	40014800 	.word	0x40014800

080057d4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b087      	sub	sp, #28
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
 80057dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6a1b      	ldr	r3, [r3, #32]
 80057e2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6a1b      	ldr	r3, [r3, #32]
 80057ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005802:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005806:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	68fa      	ldr	r2, [r7, #12]
 800580e:	4313      	orrs	r3, r2
 8005810:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005818:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	041b      	lsls	r3, r3, #16
 8005820:	693a      	ldr	r2, [r7, #16]
 8005822:	4313      	orrs	r3, r2
 8005824:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	4a15      	ldr	r2, [pc, #84]	; (8005880 <TIM_OC5_SetConfig+0xac>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d00b      	beq.n	8005846 <TIM_OC5_SetConfig+0x72>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	4a14      	ldr	r2, [pc, #80]	; (8005884 <TIM_OC5_SetConfig+0xb0>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d007      	beq.n	8005846 <TIM_OC5_SetConfig+0x72>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	4a13      	ldr	r2, [pc, #76]	; (8005888 <TIM_OC5_SetConfig+0xb4>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d003      	beq.n	8005846 <TIM_OC5_SetConfig+0x72>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	4a12      	ldr	r2, [pc, #72]	; (800588c <TIM_OC5_SetConfig+0xb8>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d109      	bne.n	800585a <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800584c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	695b      	ldr	r3, [r3, #20]
 8005852:	021b      	lsls	r3, r3, #8
 8005854:	697a      	ldr	r2, [r7, #20]
 8005856:	4313      	orrs	r3, r2
 8005858:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	697a      	ldr	r2, [r7, #20]
 800585e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	68fa      	ldr	r2, [r7, #12]
 8005864:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	685a      	ldr	r2, [r3, #4]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	693a      	ldr	r2, [r7, #16]
 8005872:	621a      	str	r2, [r3, #32]
}
 8005874:	bf00      	nop
 8005876:	371c      	adds	r7, #28
 8005878:	46bd      	mov	sp, r7
 800587a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587e:	4770      	bx	lr
 8005880:	40012c00 	.word	0x40012c00
 8005884:	40014000 	.word	0x40014000
 8005888:	40014400 	.word	0x40014400
 800588c:	40014800 	.word	0x40014800

08005890 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005890:	b480      	push	{r7}
 8005892:	b087      	sub	sp, #28
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6a1b      	ldr	r3, [r3, #32]
 800589e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6a1b      	ldr	r3, [r3, #32]
 80058aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80058be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	021b      	lsls	r3, r3, #8
 80058ca:	68fa      	ldr	r2, [r7, #12]
 80058cc:	4313      	orrs	r3, r2
 80058ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80058d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	051b      	lsls	r3, r3, #20
 80058de:	693a      	ldr	r2, [r7, #16]
 80058e0:	4313      	orrs	r3, r2
 80058e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	4a16      	ldr	r2, [pc, #88]	; (8005940 <TIM_OC6_SetConfig+0xb0>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d00b      	beq.n	8005904 <TIM_OC6_SetConfig+0x74>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	4a15      	ldr	r2, [pc, #84]	; (8005944 <TIM_OC6_SetConfig+0xb4>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d007      	beq.n	8005904 <TIM_OC6_SetConfig+0x74>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	4a14      	ldr	r2, [pc, #80]	; (8005948 <TIM_OC6_SetConfig+0xb8>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d003      	beq.n	8005904 <TIM_OC6_SetConfig+0x74>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	4a13      	ldr	r2, [pc, #76]	; (800594c <TIM_OC6_SetConfig+0xbc>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d109      	bne.n	8005918 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800590a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	695b      	ldr	r3, [r3, #20]
 8005910:	029b      	lsls	r3, r3, #10
 8005912:	697a      	ldr	r2, [r7, #20]
 8005914:	4313      	orrs	r3, r2
 8005916:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	697a      	ldr	r2, [r7, #20]
 800591c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	68fa      	ldr	r2, [r7, #12]
 8005922:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	685a      	ldr	r2, [r3, #4]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	693a      	ldr	r2, [r7, #16]
 8005930:	621a      	str	r2, [r3, #32]
}
 8005932:	bf00      	nop
 8005934:	371c      	adds	r7, #28
 8005936:	46bd      	mov	sp, r7
 8005938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593c:	4770      	bx	lr
 800593e:	bf00      	nop
 8005940:	40012c00 	.word	0x40012c00
 8005944:	40014000 	.word	0x40014000
 8005948:	40014400 	.word	0x40014400
 800594c:	40014800 	.word	0x40014800

08005950 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005950:	b480      	push	{r7}
 8005952:	b087      	sub	sp, #28
 8005954:	af00      	add	r7, sp, #0
 8005956:	60f8      	str	r0, [r7, #12]
 8005958:	60b9      	str	r1, [r7, #8]
 800595a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	6a1b      	ldr	r3, [r3, #32]
 8005960:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	6a1b      	ldr	r3, [r3, #32]
 8005966:	f023 0201 	bic.w	r2, r3, #1
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	699b      	ldr	r3, [r3, #24]
 8005972:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800597a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	011b      	lsls	r3, r3, #4
 8005980:	693a      	ldr	r2, [r7, #16]
 8005982:	4313      	orrs	r3, r2
 8005984:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	f023 030a 	bic.w	r3, r3, #10
 800598c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800598e:	697a      	ldr	r2, [r7, #20]
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	4313      	orrs	r3, r2
 8005994:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	693a      	ldr	r2, [r7, #16]
 800599a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	697a      	ldr	r2, [r7, #20]
 80059a0:	621a      	str	r2, [r3, #32]
}
 80059a2:	bf00      	nop
 80059a4:	371c      	adds	r7, #28
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr

080059ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059ae:	b480      	push	{r7}
 80059b0:	b087      	sub	sp, #28
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	60f8      	str	r0, [r7, #12]
 80059b6:	60b9      	str	r1, [r7, #8]
 80059b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	6a1b      	ldr	r3, [r3, #32]
 80059be:	f023 0210 	bic.w	r2, r3, #16
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	699b      	ldr	r3, [r3, #24]
 80059ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	6a1b      	ldr	r3, [r3, #32]
 80059d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80059d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	031b      	lsls	r3, r3, #12
 80059de:	697a      	ldr	r2, [r7, #20]
 80059e0:	4313      	orrs	r3, r2
 80059e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80059ea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	011b      	lsls	r3, r3, #4
 80059f0:	693a      	ldr	r2, [r7, #16]
 80059f2:	4313      	orrs	r3, r2
 80059f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	697a      	ldr	r2, [r7, #20]
 80059fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	693a      	ldr	r2, [r7, #16]
 8005a00:	621a      	str	r2, [r3, #32]
}
 8005a02:	bf00      	nop
 8005a04:	371c      	adds	r7, #28
 8005a06:	46bd      	mov	sp, r7
 8005a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0c:	4770      	bx	lr

08005a0e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a0e:	b480      	push	{r7}
 8005a10:	b085      	sub	sp, #20
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	6078      	str	r0, [r7, #4]
 8005a16:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a24:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a26:	683a      	ldr	r2, [r7, #0]
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	f043 0307 	orr.w	r3, r3, #7
 8005a30:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	68fa      	ldr	r2, [r7, #12]
 8005a36:	609a      	str	r2, [r3, #8]
}
 8005a38:	bf00      	nop
 8005a3a:	3714      	adds	r7, #20
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr

08005a44 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b087      	sub	sp, #28
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	60f8      	str	r0, [r7, #12]
 8005a4c:	60b9      	str	r1, [r7, #8]
 8005a4e:	607a      	str	r2, [r7, #4]
 8005a50:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	689b      	ldr	r3, [r3, #8]
 8005a56:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a5e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	021a      	lsls	r2, r3, #8
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	431a      	orrs	r2, r3
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	697a      	ldr	r2, [r7, #20]
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	697a      	ldr	r2, [r7, #20]
 8005a76:	609a      	str	r2, [r3, #8]
}
 8005a78:	bf00      	nop
 8005a7a:	371c      	adds	r7, #28
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a82:	4770      	bx	lr

08005a84 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b087      	sub	sp, #28
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	60f8      	str	r0, [r7, #12]
 8005a8c:	60b9      	str	r1, [r7, #8]
 8005a8e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	f003 031f 	and.w	r3, r3, #31
 8005a96:	2201      	movs	r2, #1
 8005a98:	fa02 f303 	lsl.w	r3, r2, r3
 8005a9c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	6a1a      	ldr	r2, [r3, #32]
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	43db      	mvns	r3, r3
 8005aa6:	401a      	ands	r2, r3
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	6a1a      	ldr	r2, [r3, #32]
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	f003 031f 	and.w	r3, r3, #31
 8005ab6:	6879      	ldr	r1, [r7, #4]
 8005ab8:	fa01 f303 	lsl.w	r3, r1, r3
 8005abc:	431a      	orrs	r2, r3
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	621a      	str	r2, [r3, #32]
}
 8005ac2:	bf00      	nop
 8005ac4:	371c      	adds	r7, #28
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005acc:	4770      	bx	lr
	...

08005ad0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b085      	sub	sp, #20
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	d101      	bne.n	8005ae8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ae4:	2302      	movs	r3, #2
 8005ae6:	e054      	b.n	8005b92 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2201      	movs	r2, #1
 8005aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2202      	movs	r2, #2
 8005af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a24      	ldr	r2, [pc, #144]	; (8005ba0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d108      	bne.n	8005b24 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005b18:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	68fa      	ldr	r2, [r7, #12]
 8005b20:	4313      	orrs	r3, r2
 8005b22:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b2a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	68fa      	ldr	r2, [r7, #12]
 8005b32:	4313      	orrs	r3, r2
 8005b34:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	68fa      	ldr	r2, [r7, #12]
 8005b3c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a17      	ldr	r2, [pc, #92]	; (8005ba0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d00e      	beq.n	8005b66 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b50:	d009      	beq.n	8005b66 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a13      	ldr	r2, [pc, #76]	; (8005ba4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d004      	beq.n	8005b66 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a11      	ldr	r2, [pc, #68]	; (8005ba8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d10c      	bne.n	8005b80 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b6c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	689b      	ldr	r3, [r3, #8]
 8005b72:	68ba      	ldr	r2, [r7, #8]
 8005b74:	4313      	orrs	r3, r2
 8005b76:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	68ba      	ldr	r2, [r7, #8]
 8005b7e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2201      	movs	r2, #1
 8005b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b90:	2300      	movs	r3, #0
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3714      	adds	r7, #20
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr
 8005b9e:	bf00      	nop
 8005ba0:	40012c00 	.word	0x40012c00
 8005ba4:	40000400 	.word	0x40000400
 8005ba8:	40014000 	.word	0x40014000

08005bac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b085      	sub	sp, #20
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
 8005bb4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	d101      	bne.n	8005bc8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005bc4:	2302      	movs	r3, #2
 8005bc6:	e060      	b.n	8005c8a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2201      	movs	r2, #1
 8005bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	68db      	ldr	r3, [r3, #12]
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	4313      	orrs	r3, r2
 8005bea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4313      	orrs	r3, r2
 8005c06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	691b      	ldr	r3, [r3, #16]
 8005c12:	4313      	orrs	r3, r2
 8005c14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	695b      	ldr	r3, [r3, #20]
 8005c20:	4313      	orrs	r3, r2
 8005c22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	699b      	ldr	r3, [r3, #24]
 8005c3c:	041b      	lsls	r3, r3, #16
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a14      	ldr	r2, [pc, #80]	; (8005c98 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d115      	bne.n	8005c78 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c56:	051b      	lsls	r3, r3, #20
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	69db      	ldr	r3, [r3, #28]
 8005c66:	4313      	orrs	r3, r2
 8005c68:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	6a1b      	ldr	r3, [r3, #32]
 8005c74:	4313      	orrs	r3, r2
 8005c76:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	68fa      	ldr	r2, [r7, #12]
 8005c7e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2200      	movs	r2, #0
 8005c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c88:	2300      	movs	r3, #0
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3714      	adds	r7, #20
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c94:	4770      	bx	lr
 8005c96:	bf00      	nop
 8005c98:	40012c00 	.word	0x40012c00

08005c9c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b082      	sub	sp, #8
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d101      	bne.n	8005cae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005caa:	2301      	movs	r3, #1
 8005cac:	e040      	b.n	8005d30 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d106      	bne.n	8005cc4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f7fb ffc0 	bl	8001c44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2224      	movs	r2, #36	; 0x24
 8005cc8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	681a      	ldr	r2, [r3, #0]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f022 0201 	bic.w	r2, r2, #1
 8005cd8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f000 f82c 	bl	8005d38 <UART_SetConfig>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	d101      	bne.n	8005cea <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e022      	b.n	8005d30 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d002      	beq.n	8005cf8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f000 f956 	bl	8005fa4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	685a      	ldr	r2, [r3, #4]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005d06:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	689a      	ldr	r2, [r3, #8]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d16:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f042 0201 	orr.w	r2, r2, #1
 8005d26:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	f000 f9dd 	bl	80060e8 <UART_CheckIdleState>
 8005d2e:	4603      	mov	r3, r0
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3708      	adds	r7, #8
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}

08005d38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b088      	sub	sp, #32
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d40:	2300      	movs	r3, #0
 8005d42:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	689a      	ldr	r2, [r3, #8]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	691b      	ldr	r3, [r3, #16]
 8005d4c:	431a      	orrs	r2, r3
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	695b      	ldr	r3, [r3, #20]
 8005d52:	431a      	orrs	r2, r3
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	69db      	ldr	r3, [r3, #28]
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	4b8a      	ldr	r3, [pc, #552]	; (8005f8c <UART_SetConfig+0x254>)
 8005d64:	4013      	ands	r3, r2
 8005d66:	687a      	ldr	r2, [r7, #4]
 8005d68:	6812      	ldr	r2, [r2, #0]
 8005d6a:	6979      	ldr	r1, [r7, #20]
 8005d6c:	430b      	orrs	r3, r1
 8005d6e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	68da      	ldr	r2, [r3, #12]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	430a      	orrs	r2, r1
 8005d84:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	699b      	ldr	r3, [r3, #24]
 8005d8a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6a1b      	ldr	r3, [r3, #32]
 8005d90:	697a      	ldr	r2, [r7, #20]
 8005d92:	4313      	orrs	r3, r2
 8005d94:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	697a      	ldr	r2, [r7, #20]
 8005da6:	430a      	orrs	r2, r1
 8005da8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a78      	ldr	r2, [pc, #480]	; (8005f90 <UART_SetConfig+0x258>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d120      	bne.n	8005df6 <UART_SetConfig+0xbe>
 8005db4:	4b77      	ldr	r3, [pc, #476]	; (8005f94 <UART_SetConfig+0x25c>)
 8005db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005db8:	f003 0303 	and.w	r3, r3, #3
 8005dbc:	2b03      	cmp	r3, #3
 8005dbe:	d817      	bhi.n	8005df0 <UART_SetConfig+0xb8>
 8005dc0:	a201      	add	r2, pc, #4	; (adr r2, 8005dc8 <UART_SetConfig+0x90>)
 8005dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dc6:	bf00      	nop
 8005dc8:	08005dd9 	.word	0x08005dd9
 8005dcc:	08005de5 	.word	0x08005de5
 8005dd0:	08005deb 	.word	0x08005deb
 8005dd4:	08005ddf 	.word	0x08005ddf
 8005dd8:	2300      	movs	r3, #0
 8005dda:	77fb      	strb	r3, [r7, #31]
 8005ddc:	e01d      	b.n	8005e1a <UART_SetConfig+0xe2>
 8005dde:	2302      	movs	r3, #2
 8005de0:	77fb      	strb	r3, [r7, #31]
 8005de2:	e01a      	b.n	8005e1a <UART_SetConfig+0xe2>
 8005de4:	2304      	movs	r3, #4
 8005de6:	77fb      	strb	r3, [r7, #31]
 8005de8:	e017      	b.n	8005e1a <UART_SetConfig+0xe2>
 8005dea:	2308      	movs	r3, #8
 8005dec:	77fb      	strb	r3, [r7, #31]
 8005dee:	e014      	b.n	8005e1a <UART_SetConfig+0xe2>
 8005df0:	2310      	movs	r3, #16
 8005df2:	77fb      	strb	r3, [r7, #31]
 8005df4:	e011      	b.n	8005e1a <UART_SetConfig+0xe2>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a67      	ldr	r2, [pc, #412]	; (8005f98 <UART_SetConfig+0x260>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d102      	bne.n	8005e06 <UART_SetConfig+0xce>
 8005e00:	2300      	movs	r3, #0
 8005e02:	77fb      	strb	r3, [r7, #31]
 8005e04:	e009      	b.n	8005e1a <UART_SetConfig+0xe2>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a64      	ldr	r2, [pc, #400]	; (8005f9c <UART_SetConfig+0x264>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d102      	bne.n	8005e16 <UART_SetConfig+0xde>
 8005e10:	2300      	movs	r3, #0
 8005e12:	77fb      	strb	r3, [r7, #31]
 8005e14:	e001      	b.n	8005e1a <UART_SetConfig+0xe2>
 8005e16:	2310      	movs	r3, #16
 8005e18:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	69db      	ldr	r3, [r3, #28]
 8005e1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e22:	d15b      	bne.n	8005edc <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8005e24:	7ffb      	ldrb	r3, [r7, #31]
 8005e26:	2b08      	cmp	r3, #8
 8005e28:	d827      	bhi.n	8005e7a <UART_SetConfig+0x142>
 8005e2a:	a201      	add	r2, pc, #4	; (adr r2, 8005e30 <UART_SetConfig+0xf8>)
 8005e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e30:	08005e55 	.word	0x08005e55
 8005e34:	08005e5d 	.word	0x08005e5d
 8005e38:	08005e65 	.word	0x08005e65
 8005e3c:	08005e7b 	.word	0x08005e7b
 8005e40:	08005e6b 	.word	0x08005e6b
 8005e44:	08005e7b 	.word	0x08005e7b
 8005e48:	08005e7b 	.word	0x08005e7b
 8005e4c:	08005e7b 	.word	0x08005e7b
 8005e50:	08005e73 	.word	0x08005e73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e54:	f7fe fd1c 	bl	8004890 <HAL_RCC_GetPCLK1Freq>
 8005e58:	61b8      	str	r0, [r7, #24]
        break;
 8005e5a:	e013      	b.n	8005e84 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e5c:	f7fe fd3a 	bl	80048d4 <HAL_RCC_GetPCLK2Freq>
 8005e60:	61b8      	str	r0, [r7, #24]
        break;
 8005e62:	e00f      	b.n	8005e84 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e64:	4b4e      	ldr	r3, [pc, #312]	; (8005fa0 <UART_SetConfig+0x268>)
 8005e66:	61bb      	str	r3, [r7, #24]
        break;
 8005e68:	e00c      	b.n	8005e84 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e6a:	f7fe fc9b 	bl	80047a4 <HAL_RCC_GetSysClockFreq>
 8005e6e:	61b8      	str	r0, [r7, #24]
        break;
 8005e70:	e008      	b.n	8005e84 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e76:	61bb      	str	r3, [r7, #24]
        break;
 8005e78:	e004      	b.n	8005e84 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	77bb      	strb	r3, [r7, #30]
        break;
 8005e82:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005e84:	69bb      	ldr	r3, [r7, #24]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d074      	beq.n	8005f74 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005e8a:	69bb      	ldr	r3, [r7, #24]
 8005e8c:	005a      	lsls	r2, r3, #1
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	085b      	lsrs	r3, r3, #1
 8005e94:	441a      	add	r2, r3
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e9e:	b29b      	uxth	r3, r3
 8005ea0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	2b0f      	cmp	r3, #15
 8005ea6:	d916      	bls.n	8005ed6 <UART_SetConfig+0x19e>
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005eae:	d212      	bcs.n	8005ed6 <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	b29b      	uxth	r3, r3
 8005eb4:	f023 030f 	bic.w	r3, r3, #15
 8005eb8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	085b      	lsrs	r3, r3, #1
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	f003 0307 	and.w	r3, r3, #7
 8005ec4:	b29a      	uxth	r2, r3
 8005ec6:	89fb      	ldrh	r3, [r7, #14]
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	89fa      	ldrh	r2, [r7, #14]
 8005ed2:	60da      	str	r2, [r3, #12]
 8005ed4:	e04e      	b.n	8005f74 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	77bb      	strb	r3, [r7, #30]
 8005eda:	e04b      	b.n	8005f74 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005edc:	7ffb      	ldrb	r3, [r7, #31]
 8005ede:	2b08      	cmp	r3, #8
 8005ee0:	d827      	bhi.n	8005f32 <UART_SetConfig+0x1fa>
 8005ee2:	a201      	add	r2, pc, #4	; (adr r2, 8005ee8 <UART_SetConfig+0x1b0>)
 8005ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ee8:	08005f0d 	.word	0x08005f0d
 8005eec:	08005f15 	.word	0x08005f15
 8005ef0:	08005f1d 	.word	0x08005f1d
 8005ef4:	08005f33 	.word	0x08005f33
 8005ef8:	08005f23 	.word	0x08005f23
 8005efc:	08005f33 	.word	0x08005f33
 8005f00:	08005f33 	.word	0x08005f33
 8005f04:	08005f33 	.word	0x08005f33
 8005f08:	08005f2b 	.word	0x08005f2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f0c:	f7fe fcc0 	bl	8004890 <HAL_RCC_GetPCLK1Freq>
 8005f10:	61b8      	str	r0, [r7, #24]
        break;
 8005f12:	e013      	b.n	8005f3c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f14:	f7fe fcde 	bl	80048d4 <HAL_RCC_GetPCLK2Freq>
 8005f18:	61b8      	str	r0, [r7, #24]
        break;
 8005f1a:	e00f      	b.n	8005f3c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f1c:	4b20      	ldr	r3, [pc, #128]	; (8005fa0 <UART_SetConfig+0x268>)
 8005f1e:	61bb      	str	r3, [r7, #24]
        break;
 8005f20:	e00c      	b.n	8005f3c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f22:	f7fe fc3f 	bl	80047a4 <HAL_RCC_GetSysClockFreq>
 8005f26:	61b8      	str	r0, [r7, #24]
        break;
 8005f28:	e008      	b.n	8005f3c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f2e:	61bb      	str	r3, [r7, #24]
        break;
 8005f30:	e004      	b.n	8005f3c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8005f32:	2300      	movs	r3, #0
 8005f34:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005f36:	2301      	movs	r3, #1
 8005f38:	77bb      	strb	r3, [r7, #30]
        break;
 8005f3a:	bf00      	nop
    }

    if (pclk != 0U)
 8005f3c:	69bb      	ldr	r3, [r7, #24]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d018      	beq.n	8005f74 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	085a      	lsrs	r2, r3, #1
 8005f48:	69bb      	ldr	r3, [r7, #24]
 8005f4a:	441a      	add	r2, r3
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f54:	b29b      	uxth	r3, r3
 8005f56:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	2b0f      	cmp	r3, #15
 8005f5c:	d908      	bls.n	8005f70 <UART_SetConfig+0x238>
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f64:	d204      	bcs.n	8005f70 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	693a      	ldr	r2, [r7, #16]
 8005f6c:	60da      	str	r2, [r3, #12]
 8005f6e:	e001      	b.n	8005f74 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005f70:	2301      	movs	r3, #1
 8005f72:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2200      	movs	r2, #0
 8005f78:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005f80:	7fbb      	ldrb	r3, [r7, #30]
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3720      	adds	r7, #32
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}
 8005f8a:	bf00      	nop
 8005f8c:	efff69f3 	.word	0xefff69f3
 8005f90:	40013800 	.word	0x40013800
 8005f94:	40021000 	.word	0x40021000
 8005f98:	40004400 	.word	0x40004400
 8005f9c:	40004800 	.word	0x40004800
 8005fa0:	007a1200 	.word	0x007a1200

08005fa4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b083      	sub	sp, #12
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb0:	f003 0301 	and.w	r3, r3, #1
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d00a      	beq.n	8005fce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	430a      	orrs	r2, r1
 8005fcc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd2:	f003 0302 	and.w	r3, r3, #2
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d00a      	beq.n	8005ff0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	430a      	orrs	r2, r1
 8005fee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff4:	f003 0304 	and.w	r3, r3, #4
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d00a      	beq.n	8006012 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	430a      	orrs	r2, r1
 8006010:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006016:	f003 0308 	and.w	r3, r3, #8
 800601a:	2b00      	cmp	r3, #0
 800601c:	d00a      	beq.n	8006034 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	430a      	orrs	r2, r1
 8006032:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006038:	f003 0310 	and.w	r3, r3, #16
 800603c:	2b00      	cmp	r3, #0
 800603e:	d00a      	beq.n	8006056 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	689b      	ldr	r3, [r3, #8]
 8006046:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	430a      	orrs	r2, r1
 8006054:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800605a:	f003 0320 	and.w	r3, r3, #32
 800605e:	2b00      	cmp	r3, #0
 8006060:	d00a      	beq.n	8006078 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	689b      	ldr	r3, [r3, #8]
 8006068:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	430a      	orrs	r2, r1
 8006076:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800607c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006080:	2b00      	cmp	r3, #0
 8006082:	d01a      	beq.n	80060ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	430a      	orrs	r2, r1
 8006098:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800609e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060a2:	d10a      	bne.n	80060ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	430a      	orrs	r2, r1
 80060b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d00a      	beq.n	80060dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	430a      	orrs	r2, r1
 80060da:	605a      	str	r2, [r3, #4]
  }
}
 80060dc:	bf00      	nop
 80060de:	370c      	adds	r7, #12
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr

080060e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b086      	sub	sp, #24
 80060ec:	af02      	add	r7, sp, #8
 80060ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2200      	movs	r2, #0
 80060f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80060f8:	f7fb ff6e 	bl	8001fd8 <HAL_GetTick>
 80060fc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f003 0308 	and.w	r3, r3, #8
 8006108:	2b08      	cmp	r3, #8
 800610a:	d10e      	bne.n	800612a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800610c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006110:	9300      	str	r3, [sp, #0]
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2200      	movs	r2, #0
 8006116:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f000 f82d 	bl	800617a <UART_WaitOnFlagUntilTimeout>
 8006120:	4603      	mov	r3, r0
 8006122:	2b00      	cmp	r3, #0
 8006124:	d001      	beq.n	800612a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006126:	2303      	movs	r3, #3
 8006128:	e023      	b.n	8006172 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f003 0304 	and.w	r3, r3, #4
 8006134:	2b04      	cmp	r3, #4
 8006136:	d10e      	bne.n	8006156 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006138:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800613c:	9300      	str	r3, [sp, #0]
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2200      	movs	r2, #0
 8006142:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f000 f817 	bl	800617a <UART_WaitOnFlagUntilTimeout>
 800614c:	4603      	mov	r3, r0
 800614e:	2b00      	cmp	r3, #0
 8006150:	d001      	beq.n	8006156 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006152:	2303      	movs	r3, #3
 8006154:	e00d      	b.n	8006172 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2220      	movs	r2, #32
 800615a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2220      	movs	r2, #32
 8006160:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2200      	movs	r2, #0
 8006166:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2200      	movs	r2, #0
 800616c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006170:	2300      	movs	r3, #0
}
 8006172:	4618      	mov	r0, r3
 8006174:	3710      	adds	r7, #16
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}

0800617a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800617a:	b580      	push	{r7, lr}
 800617c:	b09c      	sub	sp, #112	; 0x70
 800617e:	af00      	add	r7, sp, #0
 8006180:	60f8      	str	r0, [r7, #12]
 8006182:	60b9      	str	r1, [r7, #8]
 8006184:	603b      	str	r3, [r7, #0]
 8006186:	4613      	mov	r3, r2
 8006188:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800618a:	e0a5      	b.n	80062d8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800618c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800618e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006192:	f000 80a1 	beq.w	80062d8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006196:	f7fb ff1f 	bl	8001fd8 <HAL_GetTick>
 800619a:	4602      	mov	r2, r0
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	1ad3      	subs	r3, r2, r3
 80061a0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80061a2:	429a      	cmp	r2, r3
 80061a4:	d302      	bcc.n	80061ac <UART_WaitOnFlagUntilTimeout+0x32>
 80061a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d13e      	bne.n	800622a <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061b4:	e853 3f00 	ldrex	r3, [r3]
 80061b8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80061ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061bc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80061c0:	667b      	str	r3, [r7, #100]	; 0x64
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	461a      	mov	r2, r3
 80061c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80061ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80061cc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80061d0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80061d2:	e841 2300 	strex	r3, r2, [r1]
 80061d6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80061d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d1e6      	bne.n	80061ac <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	3308      	adds	r3, #8
 80061e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061e8:	e853 3f00 	ldrex	r3, [r3]
 80061ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80061ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061f0:	f023 0301 	bic.w	r3, r3, #1
 80061f4:	663b      	str	r3, [r7, #96]	; 0x60
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	3308      	adds	r3, #8
 80061fc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80061fe:	64ba      	str	r2, [r7, #72]	; 0x48
 8006200:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006202:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006204:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006206:	e841 2300 	strex	r3, r2, [r1]
 800620a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800620c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800620e:	2b00      	cmp	r3, #0
 8006210:	d1e5      	bne.n	80061de <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	2220      	movs	r2, #32
 8006216:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2220      	movs	r2, #32
 800621c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2200      	movs	r2, #0
 8006222:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006226:	2303      	movs	r3, #3
 8006228:	e067      	b.n	80062fa <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f003 0304 	and.w	r3, r3, #4
 8006234:	2b00      	cmp	r3, #0
 8006236:	d04f      	beq.n	80062d8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	69db      	ldr	r3, [r3, #28]
 800623e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006242:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006246:	d147      	bne.n	80062d8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006250:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800625a:	e853 3f00 	ldrex	r3, [r3]
 800625e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006262:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006266:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	461a      	mov	r2, r3
 800626e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006270:	637b      	str	r3, [r7, #52]	; 0x34
 8006272:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006274:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006276:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006278:	e841 2300 	strex	r3, r2, [r1]
 800627c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800627e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006280:	2b00      	cmp	r3, #0
 8006282:	d1e6      	bne.n	8006252 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	3308      	adds	r3, #8
 800628a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	e853 3f00 	ldrex	r3, [r3]
 8006292:	613b      	str	r3, [r7, #16]
   return(result);
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	f023 0301 	bic.w	r3, r3, #1
 800629a:	66bb      	str	r3, [r7, #104]	; 0x68
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	3308      	adds	r3, #8
 80062a2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80062a4:	623a      	str	r2, [r7, #32]
 80062a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062a8:	69f9      	ldr	r1, [r7, #28]
 80062aa:	6a3a      	ldr	r2, [r7, #32]
 80062ac:	e841 2300 	strex	r3, r2, [r1]
 80062b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80062b2:	69bb      	ldr	r3, [r7, #24]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d1e5      	bne.n	8006284 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	2220      	movs	r2, #32
 80062bc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	2220      	movs	r2, #32
 80062c2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	2220      	movs	r2, #32
 80062c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2200      	movs	r2, #0
 80062d0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80062d4:	2303      	movs	r3, #3
 80062d6:	e010      	b.n	80062fa <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	69da      	ldr	r2, [r3, #28]
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	4013      	ands	r3, r2
 80062e2:	68ba      	ldr	r2, [r7, #8]
 80062e4:	429a      	cmp	r2, r3
 80062e6:	bf0c      	ite	eq
 80062e8:	2301      	moveq	r3, #1
 80062ea:	2300      	movne	r3, #0
 80062ec:	b2db      	uxtb	r3, r3
 80062ee:	461a      	mov	r2, r3
 80062f0:	79fb      	ldrb	r3, [r7, #7]
 80062f2:	429a      	cmp	r2, r3
 80062f4:	f43f af4a 	beq.w	800618c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80062f8:	2300      	movs	r3, #0
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3770      	adds	r7, #112	; 0x70
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}
	...

08006304 <__errno>:
 8006304:	4b01      	ldr	r3, [pc, #4]	; (800630c <__errno+0x8>)
 8006306:	6818      	ldr	r0, [r3, #0]
 8006308:	4770      	bx	lr
 800630a:	bf00      	nop
 800630c:	2000000c 	.word	0x2000000c

08006310 <__libc_init_array>:
 8006310:	b570      	push	{r4, r5, r6, lr}
 8006312:	4d0d      	ldr	r5, [pc, #52]	; (8006348 <__libc_init_array+0x38>)
 8006314:	4c0d      	ldr	r4, [pc, #52]	; (800634c <__libc_init_array+0x3c>)
 8006316:	1b64      	subs	r4, r4, r5
 8006318:	10a4      	asrs	r4, r4, #2
 800631a:	2600      	movs	r6, #0
 800631c:	42a6      	cmp	r6, r4
 800631e:	d109      	bne.n	8006334 <__libc_init_array+0x24>
 8006320:	4d0b      	ldr	r5, [pc, #44]	; (8006350 <__libc_init_array+0x40>)
 8006322:	4c0c      	ldr	r4, [pc, #48]	; (8006354 <__libc_init_array+0x44>)
 8006324:	f005 f862 	bl	800b3ec <_init>
 8006328:	1b64      	subs	r4, r4, r5
 800632a:	10a4      	asrs	r4, r4, #2
 800632c:	2600      	movs	r6, #0
 800632e:	42a6      	cmp	r6, r4
 8006330:	d105      	bne.n	800633e <__libc_init_array+0x2e>
 8006332:	bd70      	pop	{r4, r5, r6, pc}
 8006334:	f855 3b04 	ldr.w	r3, [r5], #4
 8006338:	4798      	blx	r3
 800633a:	3601      	adds	r6, #1
 800633c:	e7ee      	b.n	800631c <__libc_init_array+0xc>
 800633e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006342:	4798      	blx	r3
 8006344:	3601      	adds	r6, #1
 8006346:	e7f2      	b.n	800632e <__libc_init_array+0x1e>
 8006348:	0800b904 	.word	0x0800b904
 800634c:	0800b904 	.word	0x0800b904
 8006350:	0800b904 	.word	0x0800b904
 8006354:	0800b908 	.word	0x0800b908

08006358 <memset>:
 8006358:	4402      	add	r2, r0
 800635a:	4603      	mov	r3, r0
 800635c:	4293      	cmp	r3, r2
 800635e:	d100      	bne.n	8006362 <memset+0xa>
 8006360:	4770      	bx	lr
 8006362:	f803 1b01 	strb.w	r1, [r3], #1
 8006366:	e7f9      	b.n	800635c <memset+0x4>

08006368 <__cvt>:
 8006368:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800636c:	ec55 4b10 	vmov	r4, r5, d0
 8006370:	2d00      	cmp	r5, #0
 8006372:	460e      	mov	r6, r1
 8006374:	4619      	mov	r1, r3
 8006376:	462b      	mov	r3, r5
 8006378:	bfbb      	ittet	lt
 800637a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800637e:	461d      	movlt	r5, r3
 8006380:	2300      	movge	r3, #0
 8006382:	232d      	movlt	r3, #45	; 0x2d
 8006384:	700b      	strb	r3, [r1, #0]
 8006386:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006388:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800638c:	4691      	mov	r9, r2
 800638e:	f023 0820 	bic.w	r8, r3, #32
 8006392:	bfbc      	itt	lt
 8006394:	4622      	movlt	r2, r4
 8006396:	4614      	movlt	r4, r2
 8006398:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800639c:	d005      	beq.n	80063aa <__cvt+0x42>
 800639e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80063a2:	d100      	bne.n	80063a6 <__cvt+0x3e>
 80063a4:	3601      	adds	r6, #1
 80063a6:	2102      	movs	r1, #2
 80063a8:	e000      	b.n	80063ac <__cvt+0x44>
 80063aa:	2103      	movs	r1, #3
 80063ac:	ab03      	add	r3, sp, #12
 80063ae:	9301      	str	r3, [sp, #4]
 80063b0:	ab02      	add	r3, sp, #8
 80063b2:	9300      	str	r3, [sp, #0]
 80063b4:	ec45 4b10 	vmov	d0, r4, r5
 80063b8:	4653      	mov	r3, sl
 80063ba:	4632      	mov	r2, r6
 80063bc:	f001 fdac 	bl	8007f18 <_dtoa_r>
 80063c0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80063c4:	4607      	mov	r7, r0
 80063c6:	d102      	bne.n	80063ce <__cvt+0x66>
 80063c8:	f019 0f01 	tst.w	r9, #1
 80063cc:	d022      	beq.n	8006414 <__cvt+0xac>
 80063ce:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80063d2:	eb07 0906 	add.w	r9, r7, r6
 80063d6:	d110      	bne.n	80063fa <__cvt+0x92>
 80063d8:	783b      	ldrb	r3, [r7, #0]
 80063da:	2b30      	cmp	r3, #48	; 0x30
 80063dc:	d10a      	bne.n	80063f4 <__cvt+0x8c>
 80063de:	2200      	movs	r2, #0
 80063e0:	2300      	movs	r3, #0
 80063e2:	4620      	mov	r0, r4
 80063e4:	4629      	mov	r1, r5
 80063e6:	f7fa fb6f 	bl	8000ac8 <__aeabi_dcmpeq>
 80063ea:	b918      	cbnz	r0, 80063f4 <__cvt+0x8c>
 80063ec:	f1c6 0601 	rsb	r6, r6, #1
 80063f0:	f8ca 6000 	str.w	r6, [sl]
 80063f4:	f8da 3000 	ldr.w	r3, [sl]
 80063f8:	4499      	add	r9, r3
 80063fa:	2200      	movs	r2, #0
 80063fc:	2300      	movs	r3, #0
 80063fe:	4620      	mov	r0, r4
 8006400:	4629      	mov	r1, r5
 8006402:	f7fa fb61 	bl	8000ac8 <__aeabi_dcmpeq>
 8006406:	b108      	cbz	r0, 800640c <__cvt+0xa4>
 8006408:	f8cd 900c 	str.w	r9, [sp, #12]
 800640c:	2230      	movs	r2, #48	; 0x30
 800640e:	9b03      	ldr	r3, [sp, #12]
 8006410:	454b      	cmp	r3, r9
 8006412:	d307      	bcc.n	8006424 <__cvt+0xbc>
 8006414:	9b03      	ldr	r3, [sp, #12]
 8006416:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006418:	1bdb      	subs	r3, r3, r7
 800641a:	4638      	mov	r0, r7
 800641c:	6013      	str	r3, [r2, #0]
 800641e:	b004      	add	sp, #16
 8006420:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006424:	1c59      	adds	r1, r3, #1
 8006426:	9103      	str	r1, [sp, #12]
 8006428:	701a      	strb	r2, [r3, #0]
 800642a:	e7f0      	b.n	800640e <__cvt+0xa6>

0800642c <__exponent>:
 800642c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800642e:	4603      	mov	r3, r0
 8006430:	2900      	cmp	r1, #0
 8006432:	bfb8      	it	lt
 8006434:	4249      	neglt	r1, r1
 8006436:	f803 2b02 	strb.w	r2, [r3], #2
 800643a:	bfb4      	ite	lt
 800643c:	222d      	movlt	r2, #45	; 0x2d
 800643e:	222b      	movge	r2, #43	; 0x2b
 8006440:	2909      	cmp	r1, #9
 8006442:	7042      	strb	r2, [r0, #1]
 8006444:	dd2a      	ble.n	800649c <__exponent+0x70>
 8006446:	f10d 0407 	add.w	r4, sp, #7
 800644a:	46a4      	mov	ip, r4
 800644c:	270a      	movs	r7, #10
 800644e:	46a6      	mov	lr, r4
 8006450:	460a      	mov	r2, r1
 8006452:	fb91 f6f7 	sdiv	r6, r1, r7
 8006456:	fb07 1516 	mls	r5, r7, r6, r1
 800645a:	3530      	adds	r5, #48	; 0x30
 800645c:	2a63      	cmp	r2, #99	; 0x63
 800645e:	f104 34ff 	add.w	r4, r4, #4294967295
 8006462:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006466:	4631      	mov	r1, r6
 8006468:	dcf1      	bgt.n	800644e <__exponent+0x22>
 800646a:	3130      	adds	r1, #48	; 0x30
 800646c:	f1ae 0502 	sub.w	r5, lr, #2
 8006470:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006474:	1c44      	adds	r4, r0, #1
 8006476:	4629      	mov	r1, r5
 8006478:	4561      	cmp	r1, ip
 800647a:	d30a      	bcc.n	8006492 <__exponent+0x66>
 800647c:	f10d 0209 	add.w	r2, sp, #9
 8006480:	eba2 020e 	sub.w	r2, r2, lr
 8006484:	4565      	cmp	r5, ip
 8006486:	bf88      	it	hi
 8006488:	2200      	movhi	r2, #0
 800648a:	4413      	add	r3, r2
 800648c:	1a18      	subs	r0, r3, r0
 800648e:	b003      	add	sp, #12
 8006490:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006492:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006496:	f804 2f01 	strb.w	r2, [r4, #1]!
 800649a:	e7ed      	b.n	8006478 <__exponent+0x4c>
 800649c:	2330      	movs	r3, #48	; 0x30
 800649e:	3130      	adds	r1, #48	; 0x30
 80064a0:	7083      	strb	r3, [r0, #2]
 80064a2:	70c1      	strb	r1, [r0, #3]
 80064a4:	1d03      	adds	r3, r0, #4
 80064a6:	e7f1      	b.n	800648c <__exponent+0x60>

080064a8 <_printf_float>:
 80064a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064ac:	ed2d 8b02 	vpush	{d8}
 80064b0:	b08d      	sub	sp, #52	; 0x34
 80064b2:	460c      	mov	r4, r1
 80064b4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80064b8:	4616      	mov	r6, r2
 80064ba:	461f      	mov	r7, r3
 80064bc:	4605      	mov	r5, r0
 80064be:	f002 fe89 	bl	80091d4 <_localeconv_r>
 80064c2:	f8d0 a000 	ldr.w	sl, [r0]
 80064c6:	4650      	mov	r0, sl
 80064c8:	f7f9 fe82 	bl	80001d0 <strlen>
 80064cc:	2300      	movs	r3, #0
 80064ce:	930a      	str	r3, [sp, #40]	; 0x28
 80064d0:	6823      	ldr	r3, [r4, #0]
 80064d2:	9305      	str	r3, [sp, #20]
 80064d4:	f8d8 3000 	ldr.w	r3, [r8]
 80064d8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80064dc:	3307      	adds	r3, #7
 80064de:	f023 0307 	bic.w	r3, r3, #7
 80064e2:	f103 0208 	add.w	r2, r3, #8
 80064e6:	f8c8 2000 	str.w	r2, [r8]
 80064ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ee:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80064f2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80064f6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80064fa:	9307      	str	r3, [sp, #28]
 80064fc:	f8cd 8018 	str.w	r8, [sp, #24]
 8006500:	ee08 0a10 	vmov	s16, r0
 8006504:	4b9f      	ldr	r3, [pc, #636]	; (8006784 <_printf_float+0x2dc>)
 8006506:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800650a:	f04f 32ff 	mov.w	r2, #4294967295
 800650e:	f7fa fb0d 	bl	8000b2c <__aeabi_dcmpun>
 8006512:	bb88      	cbnz	r0, 8006578 <_printf_float+0xd0>
 8006514:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006518:	4b9a      	ldr	r3, [pc, #616]	; (8006784 <_printf_float+0x2dc>)
 800651a:	f04f 32ff 	mov.w	r2, #4294967295
 800651e:	f7fa fae7 	bl	8000af0 <__aeabi_dcmple>
 8006522:	bb48      	cbnz	r0, 8006578 <_printf_float+0xd0>
 8006524:	2200      	movs	r2, #0
 8006526:	2300      	movs	r3, #0
 8006528:	4640      	mov	r0, r8
 800652a:	4649      	mov	r1, r9
 800652c:	f7fa fad6 	bl	8000adc <__aeabi_dcmplt>
 8006530:	b110      	cbz	r0, 8006538 <_printf_float+0x90>
 8006532:	232d      	movs	r3, #45	; 0x2d
 8006534:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006538:	4b93      	ldr	r3, [pc, #588]	; (8006788 <_printf_float+0x2e0>)
 800653a:	4894      	ldr	r0, [pc, #592]	; (800678c <_printf_float+0x2e4>)
 800653c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006540:	bf94      	ite	ls
 8006542:	4698      	movls	r8, r3
 8006544:	4680      	movhi	r8, r0
 8006546:	2303      	movs	r3, #3
 8006548:	6123      	str	r3, [r4, #16]
 800654a:	9b05      	ldr	r3, [sp, #20]
 800654c:	f023 0204 	bic.w	r2, r3, #4
 8006550:	6022      	str	r2, [r4, #0]
 8006552:	f04f 0900 	mov.w	r9, #0
 8006556:	9700      	str	r7, [sp, #0]
 8006558:	4633      	mov	r3, r6
 800655a:	aa0b      	add	r2, sp, #44	; 0x2c
 800655c:	4621      	mov	r1, r4
 800655e:	4628      	mov	r0, r5
 8006560:	f000 f9d8 	bl	8006914 <_printf_common>
 8006564:	3001      	adds	r0, #1
 8006566:	f040 8090 	bne.w	800668a <_printf_float+0x1e2>
 800656a:	f04f 30ff 	mov.w	r0, #4294967295
 800656e:	b00d      	add	sp, #52	; 0x34
 8006570:	ecbd 8b02 	vpop	{d8}
 8006574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006578:	4642      	mov	r2, r8
 800657a:	464b      	mov	r3, r9
 800657c:	4640      	mov	r0, r8
 800657e:	4649      	mov	r1, r9
 8006580:	f7fa fad4 	bl	8000b2c <__aeabi_dcmpun>
 8006584:	b140      	cbz	r0, 8006598 <_printf_float+0xf0>
 8006586:	464b      	mov	r3, r9
 8006588:	2b00      	cmp	r3, #0
 800658a:	bfbc      	itt	lt
 800658c:	232d      	movlt	r3, #45	; 0x2d
 800658e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006592:	487f      	ldr	r0, [pc, #508]	; (8006790 <_printf_float+0x2e8>)
 8006594:	4b7f      	ldr	r3, [pc, #508]	; (8006794 <_printf_float+0x2ec>)
 8006596:	e7d1      	b.n	800653c <_printf_float+0x94>
 8006598:	6863      	ldr	r3, [r4, #4]
 800659a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800659e:	9206      	str	r2, [sp, #24]
 80065a0:	1c5a      	adds	r2, r3, #1
 80065a2:	d13f      	bne.n	8006624 <_printf_float+0x17c>
 80065a4:	2306      	movs	r3, #6
 80065a6:	6063      	str	r3, [r4, #4]
 80065a8:	9b05      	ldr	r3, [sp, #20]
 80065aa:	6861      	ldr	r1, [r4, #4]
 80065ac:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80065b0:	2300      	movs	r3, #0
 80065b2:	9303      	str	r3, [sp, #12]
 80065b4:	ab0a      	add	r3, sp, #40	; 0x28
 80065b6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80065ba:	ab09      	add	r3, sp, #36	; 0x24
 80065bc:	ec49 8b10 	vmov	d0, r8, r9
 80065c0:	9300      	str	r3, [sp, #0]
 80065c2:	6022      	str	r2, [r4, #0]
 80065c4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80065c8:	4628      	mov	r0, r5
 80065ca:	f7ff fecd 	bl	8006368 <__cvt>
 80065ce:	9b06      	ldr	r3, [sp, #24]
 80065d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80065d2:	2b47      	cmp	r3, #71	; 0x47
 80065d4:	4680      	mov	r8, r0
 80065d6:	d108      	bne.n	80065ea <_printf_float+0x142>
 80065d8:	1cc8      	adds	r0, r1, #3
 80065da:	db02      	blt.n	80065e2 <_printf_float+0x13a>
 80065dc:	6863      	ldr	r3, [r4, #4]
 80065de:	4299      	cmp	r1, r3
 80065e0:	dd41      	ble.n	8006666 <_printf_float+0x1be>
 80065e2:	f1ab 0b02 	sub.w	fp, fp, #2
 80065e6:	fa5f fb8b 	uxtb.w	fp, fp
 80065ea:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80065ee:	d820      	bhi.n	8006632 <_printf_float+0x18a>
 80065f0:	3901      	subs	r1, #1
 80065f2:	465a      	mov	r2, fp
 80065f4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80065f8:	9109      	str	r1, [sp, #36]	; 0x24
 80065fa:	f7ff ff17 	bl	800642c <__exponent>
 80065fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006600:	1813      	adds	r3, r2, r0
 8006602:	2a01      	cmp	r2, #1
 8006604:	4681      	mov	r9, r0
 8006606:	6123      	str	r3, [r4, #16]
 8006608:	dc02      	bgt.n	8006610 <_printf_float+0x168>
 800660a:	6822      	ldr	r2, [r4, #0]
 800660c:	07d2      	lsls	r2, r2, #31
 800660e:	d501      	bpl.n	8006614 <_printf_float+0x16c>
 8006610:	3301      	adds	r3, #1
 8006612:	6123      	str	r3, [r4, #16]
 8006614:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006618:	2b00      	cmp	r3, #0
 800661a:	d09c      	beq.n	8006556 <_printf_float+0xae>
 800661c:	232d      	movs	r3, #45	; 0x2d
 800661e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006622:	e798      	b.n	8006556 <_printf_float+0xae>
 8006624:	9a06      	ldr	r2, [sp, #24]
 8006626:	2a47      	cmp	r2, #71	; 0x47
 8006628:	d1be      	bne.n	80065a8 <_printf_float+0x100>
 800662a:	2b00      	cmp	r3, #0
 800662c:	d1bc      	bne.n	80065a8 <_printf_float+0x100>
 800662e:	2301      	movs	r3, #1
 8006630:	e7b9      	b.n	80065a6 <_printf_float+0xfe>
 8006632:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006636:	d118      	bne.n	800666a <_printf_float+0x1c2>
 8006638:	2900      	cmp	r1, #0
 800663a:	6863      	ldr	r3, [r4, #4]
 800663c:	dd0b      	ble.n	8006656 <_printf_float+0x1ae>
 800663e:	6121      	str	r1, [r4, #16]
 8006640:	b913      	cbnz	r3, 8006648 <_printf_float+0x1a0>
 8006642:	6822      	ldr	r2, [r4, #0]
 8006644:	07d0      	lsls	r0, r2, #31
 8006646:	d502      	bpl.n	800664e <_printf_float+0x1a6>
 8006648:	3301      	adds	r3, #1
 800664a:	440b      	add	r3, r1
 800664c:	6123      	str	r3, [r4, #16]
 800664e:	65a1      	str	r1, [r4, #88]	; 0x58
 8006650:	f04f 0900 	mov.w	r9, #0
 8006654:	e7de      	b.n	8006614 <_printf_float+0x16c>
 8006656:	b913      	cbnz	r3, 800665e <_printf_float+0x1b6>
 8006658:	6822      	ldr	r2, [r4, #0]
 800665a:	07d2      	lsls	r2, r2, #31
 800665c:	d501      	bpl.n	8006662 <_printf_float+0x1ba>
 800665e:	3302      	adds	r3, #2
 8006660:	e7f4      	b.n	800664c <_printf_float+0x1a4>
 8006662:	2301      	movs	r3, #1
 8006664:	e7f2      	b.n	800664c <_printf_float+0x1a4>
 8006666:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800666a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800666c:	4299      	cmp	r1, r3
 800666e:	db05      	blt.n	800667c <_printf_float+0x1d4>
 8006670:	6823      	ldr	r3, [r4, #0]
 8006672:	6121      	str	r1, [r4, #16]
 8006674:	07d8      	lsls	r0, r3, #31
 8006676:	d5ea      	bpl.n	800664e <_printf_float+0x1a6>
 8006678:	1c4b      	adds	r3, r1, #1
 800667a:	e7e7      	b.n	800664c <_printf_float+0x1a4>
 800667c:	2900      	cmp	r1, #0
 800667e:	bfd4      	ite	le
 8006680:	f1c1 0202 	rsble	r2, r1, #2
 8006684:	2201      	movgt	r2, #1
 8006686:	4413      	add	r3, r2
 8006688:	e7e0      	b.n	800664c <_printf_float+0x1a4>
 800668a:	6823      	ldr	r3, [r4, #0]
 800668c:	055a      	lsls	r2, r3, #21
 800668e:	d407      	bmi.n	80066a0 <_printf_float+0x1f8>
 8006690:	6923      	ldr	r3, [r4, #16]
 8006692:	4642      	mov	r2, r8
 8006694:	4631      	mov	r1, r6
 8006696:	4628      	mov	r0, r5
 8006698:	47b8      	blx	r7
 800669a:	3001      	adds	r0, #1
 800669c:	d12c      	bne.n	80066f8 <_printf_float+0x250>
 800669e:	e764      	b.n	800656a <_printf_float+0xc2>
 80066a0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80066a4:	f240 80e0 	bls.w	8006868 <_printf_float+0x3c0>
 80066a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80066ac:	2200      	movs	r2, #0
 80066ae:	2300      	movs	r3, #0
 80066b0:	f7fa fa0a 	bl	8000ac8 <__aeabi_dcmpeq>
 80066b4:	2800      	cmp	r0, #0
 80066b6:	d034      	beq.n	8006722 <_printf_float+0x27a>
 80066b8:	4a37      	ldr	r2, [pc, #220]	; (8006798 <_printf_float+0x2f0>)
 80066ba:	2301      	movs	r3, #1
 80066bc:	4631      	mov	r1, r6
 80066be:	4628      	mov	r0, r5
 80066c0:	47b8      	blx	r7
 80066c2:	3001      	adds	r0, #1
 80066c4:	f43f af51 	beq.w	800656a <_printf_float+0xc2>
 80066c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80066cc:	429a      	cmp	r2, r3
 80066ce:	db02      	blt.n	80066d6 <_printf_float+0x22e>
 80066d0:	6823      	ldr	r3, [r4, #0]
 80066d2:	07d8      	lsls	r0, r3, #31
 80066d4:	d510      	bpl.n	80066f8 <_printf_float+0x250>
 80066d6:	ee18 3a10 	vmov	r3, s16
 80066da:	4652      	mov	r2, sl
 80066dc:	4631      	mov	r1, r6
 80066de:	4628      	mov	r0, r5
 80066e0:	47b8      	blx	r7
 80066e2:	3001      	adds	r0, #1
 80066e4:	f43f af41 	beq.w	800656a <_printf_float+0xc2>
 80066e8:	f04f 0800 	mov.w	r8, #0
 80066ec:	f104 091a 	add.w	r9, r4, #26
 80066f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066f2:	3b01      	subs	r3, #1
 80066f4:	4543      	cmp	r3, r8
 80066f6:	dc09      	bgt.n	800670c <_printf_float+0x264>
 80066f8:	6823      	ldr	r3, [r4, #0]
 80066fa:	079b      	lsls	r3, r3, #30
 80066fc:	f100 8105 	bmi.w	800690a <_printf_float+0x462>
 8006700:	68e0      	ldr	r0, [r4, #12]
 8006702:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006704:	4298      	cmp	r0, r3
 8006706:	bfb8      	it	lt
 8006708:	4618      	movlt	r0, r3
 800670a:	e730      	b.n	800656e <_printf_float+0xc6>
 800670c:	2301      	movs	r3, #1
 800670e:	464a      	mov	r2, r9
 8006710:	4631      	mov	r1, r6
 8006712:	4628      	mov	r0, r5
 8006714:	47b8      	blx	r7
 8006716:	3001      	adds	r0, #1
 8006718:	f43f af27 	beq.w	800656a <_printf_float+0xc2>
 800671c:	f108 0801 	add.w	r8, r8, #1
 8006720:	e7e6      	b.n	80066f0 <_printf_float+0x248>
 8006722:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006724:	2b00      	cmp	r3, #0
 8006726:	dc39      	bgt.n	800679c <_printf_float+0x2f4>
 8006728:	4a1b      	ldr	r2, [pc, #108]	; (8006798 <_printf_float+0x2f0>)
 800672a:	2301      	movs	r3, #1
 800672c:	4631      	mov	r1, r6
 800672e:	4628      	mov	r0, r5
 8006730:	47b8      	blx	r7
 8006732:	3001      	adds	r0, #1
 8006734:	f43f af19 	beq.w	800656a <_printf_float+0xc2>
 8006738:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800673c:	4313      	orrs	r3, r2
 800673e:	d102      	bne.n	8006746 <_printf_float+0x29e>
 8006740:	6823      	ldr	r3, [r4, #0]
 8006742:	07d9      	lsls	r1, r3, #31
 8006744:	d5d8      	bpl.n	80066f8 <_printf_float+0x250>
 8006746:	ee18 3a10 	vmov	r3, s16
 800674a:	4652      	mov	r2, sl
 800674c:	4631      	mov	r1, r6
 800674e:	4628      	mov	r0, r5
 8006750:	47b8      	blx	r7
 8006752:	3001      	adds	r0, #1
 8006754:	f43f af09 	beq.w	800656a <_printf_float+0xc2>
 8006758:	f04f 0900 	mov.w	r9, #0
 800675c:	f104 0a1a 	add.w	sl, r4, #26
 8006760:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006762:	425b      	negs	r3, r3
 8006764:	454b      	cmp	r3, r9
 8006766:	dc01      	bgt.n	800676c <_printf_float+0x2c4>
 8006768:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800676a:	e792      	b.n	8006692 <_printf_float+0x1ea>
 800676c:	2301      	movs	r3, #1
 800676e:	4652      	mov	r2, sl
 8006770:	4631      	mov	r1, r6
 8006772:	4628      	mov	r0, r5
 8006774:	47b8      	blx	r7
 8006776:	3001      	adds	r0, #1
 8006778:	f43f aef7 	beq.w	800656a <_printf_float+0xc2>
 800677c:	f109 0901 	add.w	r9, r9, #1
 8006780:	e7ee      	b.n	8006760 <_printf_float+0x2b8>
 8006782:	bf00      	nop
 8006784:	7fefffff 	.word	0x7fefffff
 8006788:	0800b444 	.word	0x0800b444
 800678c:	0800b448 	.word	0x0800b448
 8006790:	0800b450 	.word	0x0800b450
 8006794:	0800b44c 	.word	0x0800b44c
 8006798:	0800b454 	.word	0x0800b454
 800679c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800679e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80067a0:	429a      	cmp	r2, r3
 80067a2:	bfa8      	it	ge
 80067a4:	461a      	movge	r2, r3
 80067a6:	2a00      	cmp	r2, #0
 80067a8:	4691      	mov	r9, r2
 80067aa:	dc37      	bgt.n	800681c <_printf_float+0x374>
 80067ac:	f04f 0b00 	mov.w	fp, #0
 80067b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80067b4:	f104 021a 	add.w	r2, r4, #26
 80067b8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80067ba:	9305      	str	r3, [sp, #20]
 80067bc:	eba3 0309 	sub.w	r3, r3, r9
 80067c0:	455b      	cmp	r3, fp
 80067c2:	dc33      	bgt.n	800682c <_printf_float+0x384>
 80067c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80067c8:	429a      	cmp	r2, r3
 80067ca:	db3b      	blt.n	8006844 <_printf_float+0x39c>
 80067cc:	6823      	ldr	r3, [r4, #0]
 80067ce:	07da      	lsls	r2, r3, #31
 80067d0:	d438      	bmi.n	8006844 <_printf_float+0x39c>
 80067d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067d4:	9a05      	ldr	r2, [sp, #20]
 80067d6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80067d8:	1a9a      	subs	r2, r3, r2
 80067da:	eba3 0901 	sub.w	r9, r3, r1
 80067de:	4591      	cmp	r9, r2
 80067e0:	bfa8      	it	ge
 80067e2:	4691      	movge	r9, r2
 80067e4:	f1b9 0f00 	cmp.w	r9, #0
 80067e8:	dc35      	bgt.n	8006856 <_printf_float+0x3ae>
 80067ea:	f04f 0800 	mov.w	r8, #0
 80067ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80067f2:	f104 0a1a 	add.w	sl, r4, #26
 80067f6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80067fa:	1a9b      	subs	r3, r3, r2
 80067fc:	eba3 0309 	sub.w	r3, r3, r9
 8006800:	4543      	cmp	r3, r8
 8006802:	f77f af79 	ble.w	80066f8 <_printf_float+0x250>
 8006806:	2301      	movs	r3, #1
 8006808:	4652      	mov	r2, sl
 800680a:	4631      	mov	r1, r6
 800680c:	4628      	mov	r0, r5
 800680e:	47b8      	blx	r7
 8006810:	3001      	adds	r0, #1
 8006812:	f43f aeaa 	beq.w	800656a <_printf_float+0xc2>
 8006816:	f108 0801 	add.w	r8, r8, #1
 800681a:	e7ec      	b.n	80067f6 <_printf_float+0x34e>
 800681c:	4613      	mov	r3, r2
 800681e:	4631      	mov	r1, r6
 8006820:	4642      	mov	r2, r8
 8006822:	4628      	mov	r0, r5
 8006824:	47b8      	blx	r7
 8006826:	3001      	adds	r0, #1
 8006828:	d1c0      	bne.n	80067ac <_printf_float+0x304>
 800682a:	e69e      	b.n	800656a <_printf_float+0xc2>
 800682c:	2301      	movs	r3, #1
 800682e:	4631      	mov	r1, r6
 8006830:	4628      	mov	r0, r5
 8006832:	9205      	str	r2, [sp, #20]
 8006834:	47b8      	blx	r7
 8006836:	3001      	adds	r0, #1
 8006838:	f43f ae97 	beq.w	800656a <_printf_float+0xc2>
 800683c:	9a05      	ldr	r2, [sp, #20]
 800683e:	f10b 0b01 	add.w	fp, fp, #1
 8006842:	e7b9      	b.n	80067b8 <_printf_float+0x310>
 8006844:	ee18 3a10 	vmov	r3, s16
 8006848:	4652      	mov	r2, sl
 800684a:	4631      	mov	r1, r6
 800684c:	4628      	mov	r0, r5
 800684e:	47b8      	blx	r7
 8006850:	3001      	adds	r0, #1
 8006852:	d1be      	bne.n	80067d2 <_printf_float+0x32a>
 8006854:	e689      	b.n	800656a <_printf_float+0xc2>
 8006856:	9a05      	ldr	r2, [sp, #20]
 8006858:	464b      	mov	r3, r9
 800685a:	4442      	add	r2, r8
 800685c:	4631      	mov	r1, r6
 800685e:	4628      	mov	r0, r5
 8006860:	47b8      	blx	r7
 8006862:	3001      	adds	r0, #1
 8006864:	d1c1      	bne.n	80067ea <_printf_float+0x342>
 8006866:	e680      	b.n	800656a <_printf_float+0xc2>
 8006868:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800686a:	2a01      	cmp	r2, #1
 800686c:	dc01      	bgt.n	8006872 <_printf_float+0x3ca>
 800686e:	07db      	lsls	r3, r3, #31
 8006870:	d538      	bpl.n	80068e4 <_printf_float+0x43c>
 8006872:	2301      	movs	r3, #1
 8006874:	4642      	mov	r2, r8
 8006876:	4631      	mov	r1, r6
 8006878:	4628      	mov	r0, r5
 800687a:	47b8      	blx	r7
 800687c:	3001      	adds	r0, #1
 800687e:	f43f ae74 	beq.w	800656a <_printf_float+0xc2>
 8006882:	ee18 3a10 	vmov	r3, s16
 8006886:	4652      	mov	r2, sl
 8006888:	4631      	mov	r1, r6
 800688a:	4628      	mov	r0, r5
 800688c:	47b8      	blx	r7
 800688e:	3001      	adds	r0, #1
 8006890:	f43f ae6b 	beq.w	800656a <_printf_float+0xc2>
 8006894:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006898:	2200      	movs	r2, #0
 800689a:	2300      	movs	r3, #0
 800689c:	f7fa f914 	bl	8000ac8 <__aeabi_dcmpeq>
 80068a0:	b9d8      	cbnz	r0, 80068da <_printf_float+0x432>
 80068a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068a4:	f108 0201 	add.w	r2, r8, #1
 80068a8:	3b01      	subs	r3, #1
 80068aa:	4631      	mov	r1, r6
 80068ac:	4628      	mov	r0, r5
 80068ae:	47b8      	blx	r7
 80068b0:	3001      	adds	r0, #1
 80068b2:	d10e      	bne.n	80068d2 <_printf_float+0x42a>
 80068b4:	e659      	b.n	800656a <_printf_float+0xc2>
 80068b6:	2301      	movs	r3, #1
 80068b8:	4652      	mov	r2, sl
 80068ba:	4631      	mov	r1, r6
 80068bc:	4628      	mov	r0, r5
 80068be:	47b8      	blx	r7
 80068c0:	3001      	adds	r0, #1
 80068c2:	f43f ae52 	beq.w	800656a <_printf_float+0xc2>
 80068c6:	f108 0801 	add.w	r8, r8, #1
 80068ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068cc:	3b01      	subs	r3, #1
 80068ce:	4543      	cmp	r3, r8
 80068d0:	dcf1      	bgt.n	80068b6 <_printf_float+0x40e>
 80068d2:	464b      	mov	r3, r9
 80068d4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80068d8:	e6dc      	b.n	8006694 <_printf_float+0x1ec>
 80068da:	f04f 0800 	mov.w	r8, #0
 80068de:	f104 0a1a 	add.w	sl, r4, #26
 80068e2:	e7f2      	b.n	80068ca <_printf_float+0x422>
 80068e4:	2301      	movs	r3, #1
 80068e6:	4642      	mov	r2, r8
 80068e8:	e7df      	b.n	80068aa <_printf_float+0x402>
 80068ea:	2301      	movs	r3, #1
 80068ec:	464a      	mov	r2, r9
 80068ee:	4631      	mov	r1, r6
 80068f0:	4628      	mov	r0, r5
 80068f2:	47b8      	blx	r7
 80068f4:	3001      	adds	r0, #1
 80068f6:	f43f ae38 	beq.w	800656a <_printf_float+0xc2>
 80068fa:	f108 0801 	add.w	r8, r8, #1
 80068fe:	68e3      	ldr	r3, [r4, #12]
 8006900:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006902:	1a5b      	subs	r3, r3, r1
 8006904:	4543      	cmp	r3, r8
 8006906:	dcf0      	bgt.n	80068ea <_printf_float+0x442>
 8006908:	e6fa      	b.n	8006700 <_printf_float+0x258>
 800690a:	f04f 0800 	mov.w	r8, #0
 800690e:	f104 0919 	add.w	r9, r4, #25
 8006912:	e7f4      	b.n	80068fe <_printf_float+0x456>

08006914 <_printf_common>:
 8006914:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006918:	4616      	mov	r6, r2
 800691a:	4699      	mov	r9, r3
 800691c:	688a      	ldr	r2, [r1, #8]
 800691e:	690b      	ldr	r3, [r1, #16]
 8006920:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006924:	4293      	cmp	r3, r2
 8006926:	bfb8      	it	lt
 8006928:	4613      	movlt	r3, r2
 800692a:	6033      	str	r3, [r6, #0]
 800692c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006930:	4607      	mov	r7, r0
 8006932:	460c      	mov	r4, r1
 8006934:	b10a      	cbz	r2, 800693a <_printf_common+0x26>
 8006936:	3301      	adds	r3, #1
 8006938:	6033      	str	r3, [r6, #0]
 800693a:	6823      	ldr	r3, [r4, #0]
 800693c:	0699      	lsls	r1, r3, #26
 800693e:	bf42      	ittt	mi
 8006940:	6833      	ldrmi	r3, [r6, #0]
 8006942:	3302      	addmi	r3, #2
 8006944:	6033      	strmi	r3, [r6, #0]
 8006946:	6825      	ldr	r5, [r4, #0]
 8006948:	f015 0506 	ands.w	r5, r5, #6
 800694c:	d106      	bne.n	800695c <_printf_common+0x48>
 800694e:	f104 0a19 	add.w	sl, r4, #25
 8006952:	68e3      	ldr	r3, [r4, #12]
 8006954:	6832      	ldr	r2, [r6, #0]
 8006956:	1a9b      	subs	r3, r3, r2
 8006958:	42ab      	cmp	r3, r5
 800695a:	dc26      	bgt.n	80069aa <_printf_common+0x96>
 800695c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006960:	1e13      	subs	r3, r2, #0
 8006962:	6822      	ldr	r2, [r4, #0]
 8006964:	bf18      	it	ne
 8006966:	2301      	movne	r3, #1
 8006968:	0692      	lsls	r2, r2, #26
 800696a:	d42b      	bmi.n	80069c4 <_printf_common+0xb0>
 800696c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006970:	4649      	mov	r1, r9
 8006972:	4638      	mov	r0, r7
 8006974:	47c0      	blx	r8
 8006976:	3001      	adds	r0, #1
 8006978:	d01e      	beq.n	80069b8 <_printf_common+0xa4>
 800697a:	6823      	ldr	r3, [r4, #0]
 800697c:	68e5      	ldr	r5, [r4, #12]
 800697e:	6832      	ldr	r2, [r6, #0]
 8006980:	f003 0306 	and.w	r3, r3, #6
 8006984:	2b04      	cmp	r3, #4
 8006986:	bf08      	it	eq
 8006988:	1aad      	subeq	r5, r5, r2
 800698a:	68a3      	ldr	r3, [r4, #8]
 800698c:	6922      	ldr	r2, [r4, #16]
 800698e:	bf0c      	ite	eq
 8006990:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006994:	2500      	movne	r5, #0
 8006996:	4293      	cmp	r3, r2
 8006998:	bfc4      	itt	gt
 800699a:	1a9b      	subgt	r3, r3, r2
 800699c:	18ed      	addgt	r5, r5, r3
 800699e:	2600      	movs	r6, #0
 80069a0:	341a      	adds	r4, #26
 80069a2:	42b5      	cmp	r5, r6
 80069a4:	d11a      	bne.n	80069dc <_printf_common+0xc8>
 80069a6:	2000      	movs	r0, #0
 80069a8:	e008      	b.n	80069bc <_printf_common+0xa8>
 80069aa:	2301      	movs	r3, #1
 80069ac:	4652      	mov	r2, sl
 80069ae:	4649      	mov	r1, r9
 80069b0:	4638      	mov	r0, r7
 80069b2:	47c0      	blx	r8
 80069b4:	3001      	adds	r0, #1
 80069b6:	d103      	bne.n	80069c0 <_printf_common+0xac>
 80069b8:	f04f 30ff 	mov.w	r0, #4294967295
 80069bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069c0:	3501      	adds	r5, #1
 80069c2:	e7c6      	b.n	8006952 <_printf_common+0x3e>
 80069c4:	18e1      	adds	r1, r4, r3
 80069c6:	1c5a      	adds	r2, r3, #1
 80069c8:	2030      	movs	r0, #48	; 0x30
 80069ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80069ce:	4422      	add	r2, r4
 80069d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80069d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80069d8:	3302      	adds	r3, #2
 80069da:	e7c7      	b.n	800696c <_printf_common+0x58>
 80069dc:	2301      	movs	r3, #1
 80069de:	4622      	mov	r2, r4
 80069e0:	4649      	mov	r1, r9
 80069e2:	4638      	mov	r0, r7
 80069e4:	47c0      	blx	r8
 80069e6:	3001      	adds	r0, #1
 80069e8:	d0e6      	beq.n	80069b8 <_printf_common+0xa4>
 80069ea:	3601      	adds	r6, #1
 80069ec:	e7d9      	b.n	80069a2 <_printf_common+0x8e>
	...

080069f0 <_printf_i>:
 80069f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80069f4:	7e0f      	ldrb	r7, [r1, #24]
 80069f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80069f8:	2f78      	cmp	r7, #120	; 0x78
 80069fa:	4691      	mov	r9, r2
 80069fc:	4680      	mov	r8, r0
 80069fe:	460c      	mov	r4, r1
 8006a00:	469a      	mov	sl, r3
 8006a02:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006a06:	d807      	bhi.n	8006a18 <_printf_i+0x28>
 8006a08:	2f62      	cmp	r7, #98	; 0x62
 8006a0a:	d80a      	bhi.n	8006a22 <_printf_i+0x32>
 8006a0c:	2f00      	cmp	r7, #0
 8006a0e:	f000 80d8 	beq.w	8006bc2 <_printf_i+0x1d2>
 8006a12:	2f58      	cmp	r7, #88	; 0x58
 8006a14:	f000 80a3 	beq.w	8006b5e <_printf_i+0x16e>
 8006a18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006a20:	e03a      	b.n	8006a98 <_printf_i+0xa8>
 8006a22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006a26:	2b15      	cmp	r3, #21
 8006a28:	d8f6      	bhi.n	8006a18 <_printf_i+0x28>
 8006a2a:	a101      	add	r1, pc, #4	; (adr r1, 8006a30 <_printf_i+0x40>)
 8006a2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006a30:	08006a89 	.word	0x08006a89
 8006a34:	08006a9d 	.word	0x08006a9d
 8006a38:	08006a19 	.word	0x08006a19
 8006a3c:	08006a19 	.word	0x08006a19
 8006a40:	08006a19 	.word	0x08006a19
 8006a44:	08006a19 	.word	0x08006a19
 8006a48:	08006a9d 	.word	0x08006a9d
 8006a4c:	08006a19 	.word	0x08006a19
 8006a50:	08006a19 	.word	0x08006a19
 8006a54:	08006a19 	.word	0x08006a19
 8006a58:	08006a19 	.word	0x08006a19
 8006a5c:	08006ba9 	.word	0x08006ba9
 8006a60:	08006acd 	.word	0x08006acd
 8006a64:	08006b8b 	.word	0x08006b8b
 8006a68:	08006a19 	.word	0x08006a19
 8006a6c:	08006a19 	.word	0x08006a19
 8006a70:	08006bcb 	.word	0x08006bcb
 8006a74:	08006a19 	.word	0x08006a19
 8006a78:	08006acd 	.word	0x08006acd
 8006a7c:	08006a19 	.word	0x08006a19
 8006a80:	08006a19 	.word	0x08006a19
 8006a84:	08006b93 	.word	0x08006b93
 8006a88:	682b      	ldr	r3, [r5, #0]
 8006a8a:	1d1a      	adds	r2, r3, #4
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	602a      	str	r2, [r5, #0]
 8006a90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006a98:	2301      	movs	r3, #1
 8006a9a:	e0a3      	b.n	8006be4 <_printf_i+0x1f4>
 8006a9c:	6820      	ldr	r0, [r4, #0]
 8006a9e:	6829      	ldr	r1, [r5, #0]
 8006aa0:	0606      	lsls	r6, r0, #24
 8006aa2:	f101 0304 	add.w	r3, r1, #4
 8006aa6:	d50a      	bpl.n	8006abe <_printf_i+0xce>
 8006aa8:	680e      	ldr	r6, [r1, #0]
 8006aaa:	602b      	str	r3, [r5, #0]
 8006aac:	2e00      	cmp	r6, #0
 8006aae:	da03      	bge.n	8006ab8 <_printf_i+0xc8>
 8006ab0:	232d      	movs	r3, #45	; 0x2d
 8006ab2:	4276      	negs	r6, r6
 8006ab4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ab8:	485e      	ldr	r0, [pc, #376]	; (8006c34 <_printf_i+0x244>)
 8006aba:	230a      	movs	r3, #10
 8006abc:	e019      	b.n	8006af2 <_printf_i+0x102>
 8006abe:	680e      	ldr	r6, [r1, #0]
 8006ac0:	602b      	str	r3, [r5, #0]
 8006ac2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006ac6:	bf18      	it	ne
 8006ac8:	b236      	sxthne	r6, r6
 8006aca:	e7ef      	b.n	8006aac <_printf_i+0xbc>
 8006acc:	682b      	ldr	r3, [r5, #0]
 8006ace:	6820      	ldr	r0, [r4, #0]
 8006ad0:	1d19      	adds	r1, r3, #4
 8006ad2:	6029      	str	r1, [r5, #0]
 8006ad4:	0601      	lsls	r1, r0, #24
 8006ad6:	d501      	bpl.n	8006adc <_printf_i+0xec>
 8006ad8:	681e      	ldr	r6, [r3, #0]
 8006ada:	e002      	b.n	8006ae2 <_printf_i+0xf2>
 8006adc:	0646      	lsls	r6, r0, #25
 8006ade:	d5fb      	bpl.n	8006ad8 <_printf_i+0xe8>
 8006ae0:	881e      	ldrh	r6, [r3, #0]
 8006ae2:	4854      	ldr	r0, [pc, #336]	; (8006c34 <_printf_i+0x244>)
 8006ae4:	2f6f      	cmp	r7, #111	; 0x6f
 8006ae6:	bf0c      	ite	eq
 8006ae8:	2308      	moveq	r3, #8
 8006aea:	230a      	movne	r3, #10
 8006aec:	2100      	movs	r1, #0
 8006aee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006af2:	6865      	ldr	r5, [r4, #4]
 8006af4:	60a5      	str	r5, [r4, #8]
 8006af6:	2d00      	cmp	r5, #0
 8006af8:	bfa2      	ittt	ge
 8006afa:	6821      	ldrge	r1, [r4, #0]
 8006afc:	f021 0104 	bicge.w	r1, r1, #4
 8006b00:	6021      	strge	r1, [r4, #0]
 8006b02:	b90e      	cbnz	r6, 8006b08 <_printf_i+0x118>
 8006b04:	2d00      	cmp	r5, #0
 8006b06:	d04d      	beq.n	8006ba4 <_printf_i+0x1b4>
 8006b08:	4615      	mov	r5, r2
 8006b0a:	fbb6 f1f3 	udiv	r1, r6, r3
 8006b0e:	fb03 6711 	mls	r7, r3, r1, r6
 8006b12:	5dc7      	ldrb	r7, [r0, r7]
 8006b14:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006b18:	4637      	mov	r7, r6
 8006b1a:	42bb      	cmp	r3, r7
 8006b1c:	460e      	mov	r6, r1
 8006b1e:	d9f4      	bls.n	8006b0a <_printf_i+0x11a>
 8006b20:	2b08      	cmp	r3, #8
 8006b22:	d10b      	bne.n	8006b3c <_printf_i+0x14c>
 8006b24:	6823      	ldr	r3, [r4, #0]
 8006b26:	07de      	lsls	r6, r3, #31
 8006b28:	d508      	bpl.n	8006b3c <_printf_i+0x14c>
 8006b2a:	6923      	ldr	r3, [r4, #16]
 8006b2c:	6861      	ldr	r1, [r4, #4]
 8006b2e:	4299      	cmp	r1, r3
 8006b30:	bfde      	ittt	le
 8006b32:	2330      	movle	r3, #48	; 0x30
 8006b34:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006b38:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006b3c:	1b52      	subs	r2, r2, r5
 8006b3e:	6122      	str	r2, [r4, #16]
 8006b40:	f8cd a000 	str.w	sl, [sp]
 8006b44:	464b      	mov	r3, r9
 8006b46:	aa03      	add	r2, sp, #12
 8006b48:	4621      	mov	r1, r4
 8006b4a:	4640      	mov	r0, r8
 8006b4c:	f7ff fee2 	bl	8006914 <_printf_common>
 8006b50:	3001      	adds	r0, #1
 8006b52:	d14c      	bne.n	8006bee <_printf_i+0x1fe>
 8006b54:	f04f 30ff 	mov.w	r0, #4294967295
 8006b58:	b004      	add	sp, #16
 8006b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b5e:	4835      	ldr	r0, [pc, #212]	; (8006c34 <_printf_i+0x244>)
 8006b60:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006b64:	6829      	ldr	r1, [r5, #0]
 8006b66:	6823      	ldr	r3, [r4, #0]
 8006b68:	f851 6b04 	ldr.w	r6, [r1], #4
 8006b6c:	6029      	str	r1, [r5, #0]
 8006b6e:	061d      	lsls	r5, r3, #24
 8006b70:	d514      	bpl.n	8006b9c <_printf_i+0x1ac>
 8006b72:	07df      	lsls	r7, r3, #31
 8006b74:	bf44      	itt	mi
 8006b76:	f043 0320 	orrmi.w	r3, r3, #32
 8006b7a:	6023      	strmi	r3, [r4, #0]
 8006b7c:	b91e      	cbnz	r6, 8006b86 <_printf_i+0x196>
 8006b7e:	6823      	ldr	r3, [r4, #0]
 8006b80:	f023 0320 	bic.w	r3, r3, #32
 8006b84:	6023      	str	r3, [r4, #0]
 8006b86:	2310      	movs	r3, #16
 8006b88:	e7b0      	b.n	8006aec <_printf_i+0xfc>
 8006b8a:	6823      	ldr	r3, [r4, #0]
 8006b8c:	f043 0320 	orr.w	r3, r3, #32
 8006b90:	6023      	str	r3, [r4, #0]
 8006b92:	2378      	movs	r3, #120	; 0x78
 8006b94:	4828      	ldr	r0, [pc, #160]	; (8006c38 <_printf_i+0x248>)
 8006b96:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006b9a:	e7e3      	b.n	8006b64 <_printf_i+0x174>
 8006b9c:	0659      	lsls	r1, r3, #25
 8006b9e:	bf48      	it	mi
 8006ba0:	b2b6      	uxthmi	r6, r6
 8006ba2:	e7e6      	b.n	8006b72 <_printf_i+0x182>
 8006ba4:	4615      	mov	r5, r2
 8006ba6:	e7bb      	b.n	8006b20 <_printf_i+0x130>
 8006ba8:	682b      	ldr	r3, [r5, #0]
 8006baa:	6826      	ldr	r6, [r4, #0]
 8006bac:	6961      	ldr	r1, [r4, #20]
 8006bae:	1d18      	adds	r0, r3, #4
 8006bb0:	6028      	str	r0, [r5, #0]
 8006bb2:	0635      	lsls	r5, r6, #24
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	d501      	bpl.n	8006bbc <_printf_i+0x1cc>
 8006bb8:	6019      	str	r1, [r3, #0]
 8006bba:	e002      	b.n	8006bc2 <_printf_i+0x1d2>
 8006bbc:	0670      	lsls	r0, r6, #25
 8006bbe:	d5fb      	bpl.n	8006bb8 <_printf_i+0x1c8>
 8006bc0:	8019      	strh	r1, [r3, #0]
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	6123      	str	r3, [r4, #16]
 8006bc6:	4615      	mov	r5, r2
 8006bc8:	e7ba      	b.n	8006b40 <_printf_i+0x150>
 8006bca:	682b      	ldr	r3, [r5, #0]
 8006bcc:	1d1a      	adds	r2, r3, #4
 8006bce:	602a      	str	r2, [r5, #0]
 8006bd0:	681d      	ldr	r5, [r3, #0]
 8006bd2:	6862      	ldr	r2, [r4, #4]
 8006bd4:	2100      	movs	r1, #0
 8006bd6:	4628      	mov	r0, r5
 8006bd8:	f7f9 fb02 	bl	80001e0 <memchr>
 8006bdc:	b108      	cbz	r0, 8006be2 <_printf_i+0x1f2>
 8006bde:	1b40      	subs	r0, r0, r5
 8006be0:	6060      	str	r0, [r4, #4]
 8006be2:	6863      	ldr	r3, [r4, #4]
 8006be4:	6123      	str	r3, [r4, #16]
 8006be6:	2300      	movs	r3, #0
 8006be8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006bec:	e7a8      	b.n	8006b40 <_printf_i+0x150>
 8006bee:	6923      	ldr	r3, [r4, #16]
 8006bf0:	462a      	mov	r2, r5
 8006bf2:	4649      	mov	r1, r9
 8006bf4:	4640      	mov	r0, r8
 8006bf6:	47d0      	blx	sl
 8006bf8:	3001      	adds	r0, #1
 8006bfa:	d0ab      	beq.n	8006b54 <_printf_i+0x164>
 8006bfc:	6823      	ldr	r3, [r4, #0]
 8006bfe:	079b      	lsls	r3, r3, #30
 8006c00:	d413      	bmi.n	8006c2a <_printf_i+0x23a>
 8006c02:	68e0      	ldr	r0, [r4, #12]
 8006c04:	9b03      	ldr	r3, [sp, #12]
 8006c06:	4298      	cmp	r0, r3
 8006c08:	bfb8      	it	lt
 8006c0a:	4618      	movlt	r0, r3
 8006c0c:	e7a4      	b.n	8006b58 <_printf_i+0x168>
 8006c0e:	2301      	movs	r3, #1
 8006c10:	4632      	mov	r2, r6
 8006c12:	4649      	mov	r1, r9
 8006c14:	4640      	mov	r0, r8
 8006c16:	47d0      	blx	sl
 8006c18:	3001      	adds	r0, #1
 8006c1a:	d09b      	beq.n	8006b54 <_printf_i+0x164>
 8006c1c:	3501      	adds	r5, #1
 8006c1e:	68e3      	ldr	r3, [r4, #12]
 8006c20:	9903      	ldr	r1, [sp, #12]
 8006c22:	1a5b      	subs	r3, r3, r1
 8006c24:	42ab      	cmp	r3, r5
 8006c26:	dcf2      	bgt.n	8006c0e <_printf_i+0x21e>
 8006c28:	e7eb      	b.n	8006c02 <_printf_i+0x212>
 8006c2a:	2500      	movs	r5, #0
 8006c2c:	f104 0619 	add.w	r6, r4, #25
 8006c30:	e7f5      	b.n	8006c1e <_printf_i+0x22e>
 8006c32:	bf00      	nop
 8006c34:	0800b456 	.word	0x0800b456
 8006c38:	0800b467 	.word	0x0800b467

08006c3c <_scanf_float>:
 8006c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c40:	b087      	sub	sp, #28
 8006c42:	4617      	mov	r7, r2
 8006c44:	9303      	str	r3, [sp, #12]
 8006c46:	688b      	ldr	r3, [r1, #8]
 8006c48:	1e5a      	subs	r2, r3, #1
 8006c4a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006c4e:	bf83      	ittte	hi
 8006c50:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006c54:	195b      	addhi	r3, r3, r5
 8006c56:	9302      	strhi	r3, [sp, #8]
 8006c58:	2300      	movls	r3, #0
 8006c5a:	bf86      	itte	hi
 8006c5c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006c60:	608b      	strhi	r3, [r1, #8]
 8006c62:	9302      	strls	r3, [sp, #8]
 8006c64:	680b      	ldr	r3, [r1, #0]
 8006c66:	468b      	mov	fp, r1
 8006c68:	2500      	movs	r5, #0
 8006c6a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006c6e:	f84b 3b1c 	str.w	r3, [fp], #28
 8006c72:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006c76:	4680      	mov	r8, r0
 8006c78:	460c      	mov	r4, r1
 8006c7a:	465e      	mov	r6, fp
 8006c7c:	46aa      	mov	sl, r5
 8006c7e:	46a9      	mov	r9, r5
 8006c80:	9501      	str	r5, [sp, #4]
 8006c82:	68a2      	ldr	r2, [r4, #8]
 8006c84:	b152      	cbz	r2, 8006c9c <_scanf_float+0x60>
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	781b      	ldrb	r3, [r3, #0]
 8006c8a:	2b4e      	cmp	r3, #78	; 0x4e
 8006c8c:	d864      	bhi.n	8006d58 <_scanf_float+0x11c>
 8006c8e:	2b40      	cmp	r3, #64	; 0x40
 8006c90:	d83c      	bhi.n	8006d0c <_scanf_float+0xd0>
 8006c92:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006c96:	b2c8      	uxtb	r0, r1
 8006c98:	280e      	cmp	r0, #14
 8006c9a:	d93a      	bls.n	8006d12 <_scanf_float+0xd6>
 8006c9c:	f1b9 0f00 	cmp.w	r9, #0
 8006ca0:	d003      	beq.n	8006caa <_scanf_float+0x6e>
 8006ca2:	6823      	ldr	r3, [r4, #0]
 8006ca4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ca8:	6023      	str	r3, [r4, #0]
 8006caa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006cae:	f1ba 0f01 	cmp.w	sl, #1
 8006cb2:	f200 8113 	bhi.w	8006edc <_scanf_float+0x2a0>
 8006cb6:	455e      	cmp	r6, fp
 8006cb8:	f200 8105 	bhi.w	8006ec6 <_scanf_float+0x28a>
 8006cbc:	2501      	movs	r5, #1
 8006cbe:	4628      	mov	r0, r5
 8006cc0:	b007      	add	sp, #28
 8006cc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cc6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006cca:	2a0d      	cmp	r2, #13
 8006ccc:	d8e6      	bhi.n	8006c9c <_scanf_float+0x60>
 8006cce:	a101      	add	r1, pc, #4	; (adr r1, 8006cd4 <_scanf_float+0x98>)
 8006cd0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006cd4:	08006e13 	.word	0x08006e13
 8006cd8:	08006c9d 	.word	0x08006c9d
 8006cdc:	08006c9d 	.word	0x08006c9d
 8006ce0:	08006c9d 	.word	0x08006c9d
 8006ce4:	08006e73 	.word	0x08006e73
 8006ce8:	08006e4b 	.word	0x08006e4b
 8006cec:	08006c9d 	.word	0x08006c9d
 8006cf0:	08006c9d 	.word	0x08006c9d
 8006cf4:	08006e21 	.word	0x08006e21
 8006cf8:	08006c9d 	.word	0x08006c9d
 8006cfc:	08006c9d 	.word	0x08006c9d
 8006d00:	08006c9d 	.word	0x08006c9d
 8006d04:	08006c9d 	.word	0x08006c9d
 8006d08:	08006dd9 	.word	0x08006dd9
 8006d0c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006d10:	e7db      	b.n	8006cca <_scanf_float+0x8e>
 8006d12:	290e      	cmp	r1, #14
 8006d14:	d8c2      	bhi.n	8006c9c <_scanf_float+0x60>
 8006d16:	a001      	add	r0, pc, #4	; (adr r0, 8006d1c <_scanf_float+0xe0>)
 8006d18:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006d1c:	08006dcb 	.word	0x08006dcb
 8006d20:	08006c9d 	.word	0x08006c9d
 8006d24:	08006dcb 	.word	0x08006dcb
 8006d28:	08006e5f 	.word	0x08006e5f
 8006d2c:	08006c9d 	.word	0x08006c9d
 8006d30:	08006d79 	.word	0x08006d79
 8006d34:	08006db5 	.word	0x08006db5
 8006d38:	08006db5 	.word	0x08006db5
 8006d3c:	08006db5 	.word	0x08006db5
 8006d40:	08006db5 	.word	0x08006db5
 8006d44:	08006db5 	.word	0x08006db5
 8006d48:	08006db5 	.word	0x08006db5
 8006d4c:	08006db5 	.word	0x08006db5
 8006d50:	08006db5 	.word	0x08006db5
 8006d54:	08006db5 	.word	0x08006db5
 8006d58:	2b6e      	cmp	r3, #110	; 0x6e
 8006d5a:	d809      	bhi.n	8006d70 <_scanf_float+0x134>
 8006d5c:	2b60      	cmp	r3, #96	; 0x60
 8006d5e:	d8b2      	bhi.n	8006cc6 <_scanf_float+0x8a>
 8006d60:	2b54      	cmp	r3, #84	; 0x54
 8006d62:	d077      	beq.n	8006e54 <_scanf_float+0x218>
 8006d64:	2b59      	cmp	r3, #89	; 0x59
 8006d66:	d199      	bne.n	8006c9c <_scanf_float+0x60>
 8006d68:	2d07      	cmp	r5, #7
 8006d6a:	d197      	bne.n	8006c9c <_scanf_float+0x60>
 8006d6c:	2508      	movs	r5, #8
 8006d6e:	e029      	b.n	8006dc4 <_scanf_float+0x188>
 8006d70:	2b74      	cmp	r3, #116	; 0x74
 8006d72:	d06f      	beq.n	8006e54 <_scanf_float+0x218>
 8006d74:	2b79      	cmp	r3, #121	; 0x79
 8006d76:	e7f6      	b.n	8006d66 <_scanf_float+0x12a>
 8006d78:	6821      	ldr	r1, [r4, #0]
 8006d7a:	05c8      	lsls	r0, r1, #23
 8006d7c:	d51a      	bpl.n	8006db4 <_scanf_float+0x178>
 8006d7e:	9b02      	ldr	r3, [sp, #8]
 8006d80:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006d84:	6021      	str	r1, [r4, #0]
 8006d86:	f109 0901 	add.w	r9, r9, #1
 8006d8a:	b11b      	cbz	r3, 8006d94 <_scanf_float+0x158>
 8006d8c:	3b01      	subs	r3, #1
 8006d8e:	3201      	adds	r2, #1
 8006d90:	9302      	str	r3, [sp, #8]
 8006d92:	60a2      	str	r2, [r4, #8]
 8006d94:	68a3      	ldr	r3, [r4, #8]
 8006d96:	3b01      	subs	r3, #1
 8006d98:	60a3      	str	r3, [r4, #8]
 8006d9a:	6923      	ldr	r3, [r4, #16]
 8006d9c:	3301      	adds	r3, #1
 8006d9e:	6123      	str	r3, [r4, #16]
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	3b01      	subs	r3, #1
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	607b      	str	r3, [r7, #4]
 8006da8:	f340 8084 	ble.w	8006eb4 <_scanf_float+0x278>
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	3301      	adds	r3, #1
 8006db0:	603b      	str	r3, [r7, #0]
 8006db2:	e766      	b.n	8006c82 <_scanf_float+0x46>
 8006db4:	eb1a 0f05 	cmn.w	sl, r5
 8006db8:	f47f af70 	bne.w	8006c9c <_scanf_float+0x60>
 8006dbc:	6822      	ldr	r2, [r4, #0]
 8006dbe:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006dc2:	6022      	str	r2, [r4, #0]
 8006dc4:	f806 3b01 	strb.w	r3, [r6], #1
 8006dc8:	e7e4      	b.n	8006d94 <_scanf_float+0x158>
 8006dca:	6822      	ldr	r2, [r4, #0]
 8006dcc:	0610      	lsls	r0, r2, #24
 8006dce:	f57f af65 	bpl.w	8006c9c <_scanf_float+0x60>
 8006dd2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006dd6:	e7f4      	b.n	8006dc2 <_scanf_float+0x186>
 8006dd8:	f1ba 0f00 	cmp.w	sl, #0
 8006ddc:	d10e      	bne.n	8006dfc <_scanf_float+0x1c0>
 8006dde:	f1b9 0f00 	cmp.w	r9, #0
 8006de2:	d10e      	bne.n	8006e02 <_scanf_float+0x1c6>
 8006de4:	6822      	ldr	r2, [r4, #0]
 8006de6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006dea:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006dee:	d108      	bne.n	8006e02 <_scanf_float+0x1c6>
 8006df0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006df4:	6022      	str	r2, [r4, #0]
 8006df6:	f04f 0a01 	mov.w	sl, #1
 8006dfa:	e7e3      	b.n	8006dc4 <_scanf_float+0x188>
 8006dfc:	f1ba 0f02 	cmp.w	sl, #2
 8006e00:	d055      	beq.n	8006eae <_scanf_float+0x272>
 8006e02:	2d01      	cmp	r5, #1
 8006e04:	d002      	beq.n	8006e0c <_scanf_float+0x1d0>
 8006e06:	2d04      	cmp	r5, #4
 8006e08:	f47f af48 	bne.w	8006c9c <_scanf_float+0x60>
 8006e0c:	3501      	adds	r5, #1
 8006e0e:	b2ed      	uxtb	r5, r5
 8006e10:	e7d8      	b.n	8006dc4 <_scanf_float+0x188>
 8006e12:	f1ba 0f01 	cmp.w	sl, #1
 8006e16:	f47f af41 	bne.w	8006c9c <_scanf_float+0x60>
 8006e1a:	f04f 0a02 	mov.w	sl, #2
 8006e1e:	e7d1      	b.n	8006dc4 <_scanf_float+0x188>
 8006e20:	b97d      	cbnz	r5, 8006e42 <_scanf_float+0x206>
 8006e22:	f1b9 0f00 	cmp.w	r9, #0
 8006e26:	f47f af3c 	bne.w	8006ca2 <_scanf_float+0x66>
 8006e2a:	6822      	ldr	r2, [r4, #0]
 8006e2c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006e30:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006e34:	f47f af39 	bne.w	8006caa <_scanf_float+0x6e>
 8006e38:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006e3c:	6022      	str	r2, [r4, #0]
 8006e3e:	2501      	movs	r5, #1
 8006e40:	e7c0      	b.n	8006dc4 <_scanf_float+0x188>
 8006e42:	2d03      	cmp	r5, #3
 8006e44:	d0e2      	beq.n	8006e0c <_scanf_float+0x1d0>
 8006e46:	2d05      	cmp	r5, #5
 8006e48:	e7de      	b.n	8006e08 <_scanf_float+0x1cc>
 8006e4a:	2d02      	cmp	r5, #2
 8006e4c:	f47f af26 	bne.w	8006c9c <_scanf_float+0x60>
 8006e50:	2503      	movs	r5, #3
 8006e52:	e7b7      	b.n	8006dc4 <_scanf_float+0x188>
 8006e54:	2d06      	cmp	r5, #6
 8006e56:	f47f af21 	bne.w	8006c9c <_scanf_float+0x60>
 8006e5a:	2507      	movs	r5, #7
 8006e5c:	e7b2      	b.n	8006dc4 <_scanf_float+0x188>
 8006e5e:	6822      	ldr	r2, [r4, #0]
 8006e60:	0591      	lsls	r1, r2, #22
 8006e62:	f57f af1b 	bpl.w	8006c9c <_scanf_float+0x60>
 8006e66:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006e6a:	6022      	str	r2, [r4, #0]
 8006e6c:	f8cd 9004 	str.w	r9, [sp, #4]
 8006e70:	e7a8      	b.n	8006dc4 <_scanf_float+0x188>
 8006e72:	6822      	ldr	r2, [r4, #0]
 8006e74:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006e78:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006e7c:	d006      	beq.n	8006e8c <_scanf_float+0x250>
 8006e7e:	0550      	lsls	r0, r2, #21
 8006e80:	f57f af0c 	bpl.w	8006c9c <_scanf_float+0x60>
 8006e84:	f1b9 0f00 	cmp.w	r9, #0
 8006e88:	f43f af0f 	beq.w	8006caa <_scanf_float+0x6e>
 8006e8c:	0591      	lsls	r1, r2, #22
 8006e8e:	bf58      	it	pl
 8006e90:	9901      	ldrpl	r1, [sp, #4]
 8006e92:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006e96:	bf58      	it	pl
 8006e98:	eba9 0101 	subpl.w	r1, r9, r1
 8006e9c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006ea0:	bf58      	it	pl
 8006ea2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006ea6:	6022      	str	r2, [r4, #0]
 8006ea8:	f04f 0900 	mov.w	r9, #0
 8006eac:	e78a      	b.n	8006dc4 <_scanf_float+0x188>
 8006eae:	f04f 0a03 	mov.w	sl, #3
 8006eb2:	e787      	b.n	8006dc4 <_scanf_float+0x188>
 8006eb4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006eb8:	4639      	mov	r1, r7
 8006eba:	4640      	mov	r0, r8
 8006ebc:	4798      	blx	r3
 8006ebe:	2800      	cmp	r0, #0
 8006ec0:	f43f aedf 	beq.w	8006c82 <_scanf_float+0x46>
 8006ec4:	e6ea      	b.n	8006c9c <_scanf_float+0x60>
 8006ec6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006eca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006ece:	463a      	mov	r2, r7
 8006ed0:	4640      	mov	r0, r8
 8006ed2:	4798      	blx	r3
 8006ed4:	6923      	ldr	r3, [r4, #16]
 8006ed6:	3b01      	subs	r3, #1
 8006ed8:	6123      	str	r3, [r4, #16]
 8006eda:	e6ec      	b.n	8006cb6 <_scanf_float+0x7a>
 8006edc:	1e6b      	subs	r3, r5, #1
 8006ede:	2b06      	cmp	r3, #6
 8006ee0:	d825      	bhi.n	8006f2e <_scanf_float+0x2f2>
 8006ee2:	2d02      	cmp	r5, #2
 8006ee4:	d836      	bhi.n	8006f54 <_scanf_float+0x318>
 8006ee6:	455e      	cmp	r6, fp
 8006ee8:	f67f aee8 	bls.w	8006cbc <_scanf_float+0x80>
 8006eec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006ef0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006ef4:	463a      	mov	r2, r7
 8006ef6:	4640      	mov	r0, r8
 8006ef8:	4798      	blx	r3
 8006efa:	6923      	ldr	r3, [r4, #16]
 8006efc:	3b01      	subs	r3, #1
 8006efe:	6123      	str	r3, [r4, #16]
 8006f00:	e7f1      	b.n	8006ee6 <_scanf_float+0x2aa>
 8006f02:	9802      	ldr	r0, [sp, #8]
 8006f04:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006f08:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006f0c:	9002      	str	r0, [sp, #8]
 8006f0e:	463a      	mov	r2, r7
 8006f10:	4640      	mov	r0, r8
 8006f12:	4798      	blx	r3
 8006f14:	6923      	ldr	r3, [r4, #16]
 8006f16:	3b01      	subs	r3, #1
 8006f18:	6123      	str	r3, [r4, #16]
 8006f1a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006f1e:	fa5f fa8a 	uxtb.w	sl, sl
 8006f22:	f1ba 0f02 	cmp.w	sl, #2
 8006f26:	d1ec      	bne.n	8006f02 <_scanf_float+0x2c6>
 8006f28:	3d03      	subs	r5, #3
 8006f2a:	b2ed      	uxtb	r5, r5
 8006f2c:	1b76      	subs	r6, r6, r5
 8006f2e:	6823      	ldr	r3, [r4, #0]
 8006f30:	05da      	lsls	r2, r3, #23
 8006f32:	d52f      	bpl.n	8006f94 <_scanf_float+0x358>
 8006f34:	055b      	lsls	r3, r3, #21
 8006f36:	d510      	bpl.n	8006f5a <_scanf_float+0x31e>
 8006f38:	455e      	cmp	r6, fp
 8006f3a:	f67f aebf 	bls.w	8006cbc <_scanf_float+0x80>
 8006f3e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006f42:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006f46:	463a      	mov	r2, r7
 8006f48:	4640      	mov	r0, r8
 8006f4a:	4798      	blx	r3
 8006f4c:	6923      	ldr	r3, [r4, #16]
 8006f4e:	3b01      	subs	r3, #1
 8006f50:	6123      	str	r3, [r4, #16]
 8006f52:	e7f1      	b.n	8006f38 <_scanf_float+0x2fc>
 8006f54:	46aa      	mov	sl, r5
 8006f56:	9602      	str	r6, [sp, #8]
 8006f58:	e7df      	b.n	8006f1a <_scanf_float+0x2de>
 8006f5a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006f5e:	6923      	ldr	r3, [r4, #16]
 8006f60:	2965      	cmp	r1, #101	; 0x65
 8006f62:	f103 33ff 	add.w	r3, r3, #4294967295
 8006f66:	f106 35ff 	add.w	r5, r6, #4294967295
 8006f6a:	6123      	str	r3, [r4, #16]
 8006f6c:	d00c      	beq.n	8006f88 <_scanf_float+0x34c>
 8006f6e:	2945      	cmp	r1, #69	; 0x45
 8006f70:	d00a      	beq.n	8006f88 <_scanf_float+0x34c>
 8006f72:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006f76:	463a      	mov	r2, r7
 8006f78:	4640      	mov	r0, r8
 8006f7a:	4798      	blx	r3
 8006f7c:	6923      	ldr	r3, [r4, #16]
 8006f7e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006f82:	3b01      	subs	r3, #1
 8006f84:	1eb5      	subs	r5, r6, #2
 8006f86:	6123      	str	r3, [r4, #16]
 8006f88:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006f8c:	463a      	mov	r2, r7
 8006f8e:	4640      	mov	r0, r8
 8006f90:	4798      	blx	r3
 8006f92:	462e      	mov	r6, r5
 8006f94:	6825      	ldr	r5, [r4, #0]
 8006f96:	f015 0510 	ands.w	r5, r5, #16
 8006f9a:	d159      	bne.n	8007050 <_scanf_float+0x414>
 8006f9c:	7035      	strb	r5, [r6, #0]
 8006f9e:	6823      	ldr	r3, [r4, #0]
 8006fa0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006fa4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fa8:	d11b      	bne.n	8006fe2 <_scanf_float+0x3a6>
 8006faa:	9b01      	ldr	r3, [sp, #4]
 8006fac:	454b      	cmp	r3, r9
 8006fae:	eba3 0209 	sub.w	r2, r3, r9
 8006fb2:	d123      	bne.n	8006ffc <_scanf_float+0x3c0>
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	4659      	mov	r1, fp
 8006fb8:	4640      	mov	r0, r8
 8006fba:	f000 fe97 	bl	8007cec <_strtod_r>
 8006fbe:	6822      	ldr	r2, [r4, #0]
 8006fc0:	9b03      	ldr	r3, [sp, #12]
 8006fc2:	f012 0f02 	tst.w	r2, #2
 8006fc6:	ec57 6b10 	vmov	r6, r7, d0
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	d021      	beq.n	8007012 <_scanf_float+0x3d6>
 8006fce:	9903      	ldr	r1, [sp, #12]
 8006fd0:	1d1a      	adds	r2, r3, #4
 8006fd2:	600a      	str	r2, [r1, #0]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	e9c3 6700 	strd	r6, r7, [r3]
 8006fda:	68e3      	ldr	r3, [r4, #12]
 8006fdc:	3301      	adds	r3, #1
 8006fde:	60e3      	str	r3, [r4, #12]
 8006fe0:	e66d      	b.n	8006cbe <_scanf_float+0x82>
 8006fe2:	9b04      	ldr	r3, [sp, #16]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d0e5      	beq.n	8006fb4 <_scanf_float+0x378>
 8006fe8:	9905      	ldr	r1, [sp, #20]
 8006fea:	230a      	movs	r3, #10
 8006fec:	462a      	mov	r2, r5
 8006fee:	3101      	adds	r1, #1
 8006ff0:	4640      	mov	r0, r8
 8006ff2:	f000 ff03 	bl	8007dfc <_strtol_r>
 8006ff6:	9b04      	ldr	r3, [sp, #16]
 8006ff8:	9e05      	ldr	r6, [sp, #20]
 8006ffa:	1ac2      	subs	r2, r0, r3
 8006ffc:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007000:	429e      	cmp	r6, r3
 8007002:	bf28      	it	cs
 8007004:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007008:	4912      	ldr	r1, [pc, #72]	; (8007054 <_scanf_float+0x418>)
 800700a:	4630      	mov	r0, r6
 800700c:	f000 f82c 	bl	8007068 <siprintf>
 8007010:	e7d0      	b.n	8006fb4 <_scanf_float+0x378>
 8007012:	9903      	ldr	r1, [sp, #12]
 8007014:	f012 0f04 	tst.w	r2, #4
 8007018:	f103 0204 	add.w	r2, r3, #4
 800701c:	600a      	str	r2, [r1, #0]
 800701e:	d1d9      	bne.n	8006fd4 <_scanf_float+0x398>
 8007020:	f8d3 8000 	ldr.w	r8, [r3]
 8007024:	ee10 2a10 	vmov	r2, s0
 8007028:	ee10 0a10 	vmov	r0, s0
 800702c:	463b      	mov	r3, r7
 800702e:	4639      	mov	r1, r7
 8007030:	f7f9 fd7c 	bl	8000b2c <__aeabi_dcmpun>
 8007034:	b128      	cbz	r0, 8007042 <_scanf_float+0x406>
 8007036:	4808      	ldr	r0, [pc, #32]	; (8007058 <_scanf_float+0x41c>)
 8007038:	f000 f810 	bl	800705c <nanf>
 800703c:	ed88 0a00 	vstr	s0, [r8]
 8007040:	e7cb      	b.n	8006fda <_scanf_float+0x39e>
 8007042:	4630      	mov	r0, r6
 8007044:	4639      	mov	r1, r7
 8007046:	f7f9 fdcf 	bl	8000be8 <__aeabi_d2f>
 800704a:	f8c8 0000 	str.w	r0, [r8]
 800704e:	e7c4      	b.n	8006fda <_scanf_float+0x39e>
 8007050:	2500      	movs	r5, #0
 8007052:	e634      	b.n	8006cbe <_scanf_float+0x82>
 8007054:	0800b478 	.word	0x0800b478
 8007058:	0800b880 	.word	0x0800b880

0800705c <nanf>:
 800705c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007064 <nanf+0x8>
 8007060:	4770      	bx	lr
 8007062:	bf00      	nop
 8007064:	7fc00000 	.word	0x7fc00000

08007068 <siprintf>:
 8007068:	b40e      	push	{r1, r2, r3}
 800706a:	b500      	push	{lr}
 800706c:	b09c      	sub	sp, #112	; 0x70
 800706e:	ab1d      	add	r3, sp, #116	; 0x74
 8007070:	9002      	str	r0, [sp, #8]
 8007072:	9006      	str	r0, [sp, #24]
 8007074:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007078:	4809      	ldr	r0, [pc, #36]	; (80070a0 <siprintf+0x38>)
 800707a:	9107      	str	r1, [sp, #28]
 800707c:	9104      	str	r1, [sp, #16]
 800707e:	4909      	ldr	r1, [pc, #36]	; (80070a4 <siprintf+0x3c>)
 8007080:	f853 2b04 	ldr.w	r2, [r3], #4
 8007084:	9105      	str	r1, [sp, #20]
 8007086:	6800      	ldr	r0, [r0, #0]
 8007088:	9301      	str	r3, [sp, #4]
 800708a:	a902      	add	r1, sp, #8
 800708c:	f002 fee2 	bl	8009e54 <_svfiprintf_r>
 8007090:	9b02      	ldr	r3, [sp, #8]
 8007092:	2200      	movs	r2, #0
 8007094:	701a      	strb	r2, [r3, #0]
 8007096:	b01c      	add	sp, #112	; 0x70
 8007098:	f85d eb04 	ldr.w	lr, [sp], #4
 800709c:	b003      	add	sp, #12
 800709e:	4770      	bx	lr
 80070a0:	2000000c 	.word	0x2000000c
 80070a4:	ffff0208 	.word	0xffff0208

080070a8 <sulp>:
 80070a8:	b570      	push	{r4, r5, r6, lr}
 80070aa:	4604      	mov	r4, r0
 80070ac:	460d      	mov	r5, r1
 80070ae:	ec45 4b10 	vmov	d0, r4, r5
 80070b2:	4616      	mov	r6, r2
 80070b4:	f002 fc2c 	bl	8009910 <__ulp>
 80070b8:	ec51 0b10 	vmov	r0, r1, d0
 80070bc:	b17e      	cbz	r6, 80070de <sulp+0x36>
 80070be:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80070c2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	dd09      	ble.n	80070de <sulp+0x36>
 80070ca:	051b      	lsls	r3, r3, #20
 80070cc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80070d0:	2400      	movs	r4, #0
 80070d2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80070d6:	4622      	mov	r2, r4
 80070d8:	462b      	mov	r3, r5
 80070da:	f7f9 fa8d 	bl	80005f8 <__aeabi_dmul>
 80070de:	bd70      	pop	{r4, r5, r6, pc}

080070e0 <_strtod_l>:
 80070e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070e4:	ed2d 8b02 	vpush	{d8}
 80070e8:	b09d      	sub	sp, #116	; 0x74
 80070ea:	461f      	mov	r7, r3
 80070ec:	2300      	movs	r3, #0
 80070ee:	9318      	str	r3, [sp, #96]	; 0x60
 80070f0:	4ba2      	ldr	r3, [pc, #648]	; (800737c <_strtod_l+0x29c>)
 80070f2:	9213      	str	r2, [sp, #76]	; 0x4c
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	9305      	str	r3, [sp, #20]
 80070f8:	4604      	mov	r4, r0
 80070fa:	4618      	mov	r0, r3
 80070fc:	4688      	mov	r8, r1
 80070fe:	f7f9 f867 	bl	80001d0 <strlen>
 8007102:	f04f 0a00 	mov.w	sl, #0
 8007106:	4605      	mov	r5, r0
 8007108:	f04f 0b00 	mov.w	fp, #0
 800710c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007110:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007112:	781a      	ldrb	r2, [r3, #0]
 8007114:	2a2b      	cmp	r2, #43	; 0x2b
 8007116:	d04e      	beq.n	80071b6 <_strtod_l+0xd6>
 8007118:	d83b      	bhi.n	8007192 <_strtod_l+0xb2>
 800711a:	2a0d      	cmp	r2, #13
 800711c:	d834      	bhi.n	8007188 <_strtod_l+0xa8>
 800711e:	2a08      	cmp	r2, #8
 8007120:	d834      	bhi.n	800718c <_strtod_l+0xac>
 8007122:	2a00      	cmp	r2, #0
 8007124:	d03e      	beq.n	80071a4 <_strtod_l+0xc4>
 8007126:	2300      	movs	r3, #0
 8007128:	930a      	str	r3, [sp, #40]	; 0x28
 800712a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800712c:	7833      	ldrb	r3, [r6, #0]
 800712e:	2b30      	cmp	r3, #48	; 0x30
 8007130:	f040 80b0 	bne.w	8007294 <_strtod_l+0x1b4>
 8007134:	7873      	ldrb	r3, [r6, #1]
 8007136:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800713a:	2b58      	cmp	r3, #88	; 0x58
 800713c:	d168      	bne.n	8007210 <_strtod_l+0x130>
 800713e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007140:	9301      	str	r3, [sp, #4]
 8007142:	ab18      	add	r3, sp, #96	; 0x60
 8007144:	9702      	str	r7, [sp, #8]
 8007146:	9300      	str	r3, [sp, #0]
 8007148:	4a8d      	ldr	r2, [pc, #564]	; (8007380 <_strtod_l+0x2a0>)
 800714a:	ab19      	add	r3, sp, #100	; 0x64
 800714c:	a917      	add	r1, sp, #92	; 0x5c
 800714e:	4620      	mov	r0, r4
 8007150:	f001 fd38 	bl	8008bc4 <__gethex>
 8007154:	f010 0707 	ands.w	r7, r0, #7
 8007158:	4605      	mov	r5, r0
 800715a:	d005      	beq.n	8007168 <_strtod_l+0x88>
 800715c:	2f06      	cmp	r7, #6
 800715e:	d12c      	bne.n	80071ba <_strtod_l+0xda>
 8007160:	3601      	adds	r6, #1
 8007162:	2300      	movs	r3, #0
 8007164:	9617      	str	r6, [sp, #92]	; 0x5c
 8007166:	930a      	str	r3, [sp, #40]	; 0x28
 8007168:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800716a:	2b00      	cmp	r3, #0
 800716c:	f040 8590 	bne.w	8007c90 <_strtod_l+0xbb0>
 8007170:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007172:	b1eb      	cbz	r3, 80071b0 <_strtod_l+0xd0>
 8007174:	4652      	mov	r2, sl
 8007176:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800717a:	ec43 2b10 	vmov	d0, r2, r3
 800717e:	b01d      	add	sp, #116	; 0x74
 8007180:	ecbd 8b02 	vpop	{d8}
 8007184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007188:	2a20      	cmp	r2, #32
 800718a:	d1cc      	bne.n	8007126 <_strtod_l+0x46>
 800718c:	3301      	adds	r3, #1
 800718e:	9317      	str	r3, [sp, #92]	; 0x5c
 8007190:	e7be      	b.n	8007110 <_strtod_l+0x30>
 8007192:	2a2d      	cmp	r2, #45	; 0x2d
 8007194:	d1c7      	bne.n	8007126 <_strtod_l+0x46>
 8007196:	2201      	movs	r2, #1
 8007198:	920a      	str	r2, [sp, #40]	; 0x28
 800719a:	1c5a      	adds	r2, r3, #1
 800719c:	9217      	str	r2, [sp, #92]	; 0x5c
 800719e:	785b      	ldrb	r3, [r3, #1]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d1c2      	bne.n	800712a <_strtod_l+0x4a>
 80071a4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80071a6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	f040 856e 	bne.w	8007c8c <_strtod_l+0xbac>
 80071b0:	4652      	mov	r2, sl
 80071b2:	465b      	mov	r3, fp
 80071b4:	e7e1      	b.n	800717a <_strtod_l+0x9a>
 80071b6:	2200      	movs	r2, #0
 80071b8:	e7ee      	b.n	8007198 <_strtod_l+0xb8>
 80071ba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80071bc:	b13a      	cbz	r2, 80071ce <_strtod_l+0xee>
 80071be:	2135      	movs	r1, #53	; 0x35
 80071c0:	a81a      	add	r0, sp, #104	; 0x68
 80071c2:	f002 fcb0 	bl	8009b26 <__copybits>
 80071c6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80071c8:	4620      	mov	r0, r4
 80071ca:	f002 f86f 	bl	80092ac <_Bfree>
 80071ce:	3f01      	subs	r7, #1
 80071d0:	2f04      	cmp	r7, #4
 80071d2:	d806      	bhi.n	80071e2 <_strtod_l+0x102>
 80071d4:	e8df f007 	tbb	[pc, r7]
 80071d8:	1714030a 	.word	0x1714030a
 80071dc:	0a          	.byte	0x0a
 80071dd:	00          	.byte	0x00
 80071de:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80071e2:	0728      	lsls	r0, r5, #28
 80071e4:	d5c0      	bpl.n	8007168 <_strtod_l+0x88>
 80071e6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80071ea:	e7bd      	b.n	8007168 <_strtod_l+0x88>
 80071ec:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80071f0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80071f2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80071f6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80071fa:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80071fe:	e7f0      	b.n	80071e2 <_strtod_l+0x102>
 8007200:	f8df b180 	ldr.w	fp, [pc, #384]	; 8007384 <_strtod_l+0x2a4>
 8007204:	e7ed      	b.n	80071e2 <_strtod_l+0x102>
 8007206:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800720a:	f04f 3aff 	mov.w	sl, #4294967295
 800720e:	e7e8      	b.n	80071e2 <_strtod_l+0x102>
 8007210:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007212:	1c5a      	adds	r2, r3, #1
 8007214:	9217      	str	r2, [sp, #92]	; 0x5c
 8007216:	785b      	ldrb	r3, [r3, #1]
 8007218:	2b30      	cmp	r3, #48	; 0x30
 800721a:	d0f9      	beq.n	8007210 <_strtod_l+0x130>
 800721c:	2b00      	cmp	r3, #0
 800721e:	d0a3      	beq.n	8007168 <_strtod_l+0x88>
 8007220:	2301      	movs	r3, #1
 8007222:	f04f 0900 	mov.w	r9, #0
 8007226:	9304      	str	r3, [sp, #16]
 8007228:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800722a:	9308      	str	r3, [sp, #32]
 800722c:	f8cd 901c 	str.w	r9, [sp, #28]
 8007230:	464f      	mov	r7, r9
 8007232:	220a      	movs	r2, #10
 8007234:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8007236:	7806      	ldrb	r6, [r0, #0]
 8007238:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800723c:	b2d9      	uxtb	r1, r3
 800723e:	2909      	cmp	r1, #9
 8007240:	d92a      	bls.n	8007298 <_strtod_l+0x1b8>
 8007242:	9905      	ldr	r1, [sp, #20]
 8007244:	462a      	mov	r2, r5
 8007246:	f002 ff1f 	bl	800a088 <strncmp>
 800724a:	b398      	cbz	r0, 80072b4 <_strtod_l+0x1d4>
 800724c:	2000      	movs	r0, #0
 800724e:	4632      	mov	r2, r6
 8007250:	463d      	mov	r5, r7
 8007252:	9005      	str	r0, [sp, #20]
 8007254:	4603      	mov	r3, r0
 8007256:	2a65      	cmp	r2, #101	; 0x65
 8007258:	d001      	beq.n	800725e <_strtod_l+0x17e>
 800725a:	2a45      	cmp	r2, #69	; 0x45
 800725c:	d118      	bne.n	8007290 <_strtod_l+0x1b0>
 800725e:	b91d      	cbnz	r5, 8007268 <_strtod_l+0x188>
 8007260:	9a04      	ldr	r2, [sp, #16]
 8007262:	4302      	orrs	r2, r0
 8007264:	d09e      	beq.n	80071a4 <_strtod_l+0xc4>
 8007266:	2500      	movs	r5, #0
 8007268:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800726c:	f108 0201 	add.w	r2, r8, #1
 8007270:	9217      	str	r2, [sp, #92]	; 0x5c
 8007272:	f898 2001 	ldrb.w	r2, [r8, #1]
 8007276:	2a2b      	cmp	r2, #43	; 0x2b
 8007278:	d075      	beq.n	8007366 <_strtod_l+0x286>
 800727a:	2a2d      	cmp	r2, #45	; 0x2d
 800727c:	d07b      	beq.n	8007376 <_strtod_l+0x296>
 800727e:	f04f 0c00 	mov.w	ip, #0
 8007282:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007286:	2909      	cmp	r1, #9
 8007288:	f240 8082 	bls.w	8007390 <_strtod_l+0x2b0>
 800728c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007290:	2600      	movs	r6, #0
 8007292:	e09d      	b.n	80073d0 <_strtod_l+0x2f0>
 8007294:	2300      	movs	r3, #0
 8007296:	e7c4      	b.n	8007222 <_strtod_l+0x142>
 8007298:	2f08      	cmp	r7, #8
 800729a:	bfd8      	it	le
 800729c:	9907      	ldrle	r1, [sp, #28]
 800729e:	f100 0001 	add.w	r0, r0, #1
 80072a2:	bfda      	itte	le
 80072a4:	fb02 3301 	mlale	r3, r2, r1, r3
 80072a8:	9307      	strle	r3, [sp, #28]
 80072aa:	fb02 3909 	mlagt	r9, r2, r9, r3
 80072ae:	3701      	adds	r7, #1
 80072b0:	9017      	str	r0, [sp, #92]	; 0x5c
 80072b2:	e7bf      	b.n	8007234 <_strtod_l+0x154>
 80072b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80072b6:	195a      	adds	r2, r3, r5
 80072b8:	9217      	str	r2, [sp, #92]	; 0x5c
 80072ba:	5d5a      	ldrb	r2, [r3, r5]
 80072bc:	2f00      	cmp	r7, #0
 80072be:	d037      	beq.n	8007330 <_strtod_l+0x250>
 80072c0:	9005      	str	r0, [sp, #20]
 80072c2:	463d      	mov	r5, r7
 80072c4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80072c8:	2b09      	cmp	r3, #9
 80072ca:	d912      	bls.n	80072f2 <_strtod_l+0x212>
 80072cc:	2301      	movs	r3, #1
 80072ce:	e7c2      	b.n	8007256 <_strtod_l+0x176>
 80072d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80072d2:	1c5a      	adds	r2, r3, #1
 80072d4:	9217      	str	r2, [sp, #92]	; 0x5c
 80072d6:	785a      	ldrb	r2, [r3, #1]
 80072d8:	3001      	adds	r0, #1
 80072da:	2a30      	cmp	r2, #48	; 0x30
 80072dc:	d0f8      	beq.n	80072d0 <_strtod_l+0x1f0>
 80072de:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80072e2:	2b08      	cmp	r3, #8
 80072e4:	f200 84d9 	bhi.w	8007c9a <_strtod_l+0xbba>
 80072e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80072ea:	9005      	str	r0, [sp, #20]
 80072ec:	2000      	movs	r0, #0
 80072ee:	9308      	str	r3, [sp, #32]
 80072f0:	4605      	mov	r5, r0
 80072f2:	3a30      	subs	r2, #48	; 0x30
 80072f4:	f100 0301 	add.w	r3, r0, #1
 80072f8:	d014      	beq.n	8007324 <_strtod_l+0x244>
 80072fa:	9905      	ldr	r1, [sp, #20]
 80072fc:	4419      	add	r1, r3
 80072fe:	9105      	str	r1, [sp, #20]
 8007300:	462b      	mov	r3, r5
 8007302:	eb00 0e05 	add.w	lr, r0, r5
 8007306:	210a      	movs	r1, #10
 8007308:	4573      	cmp	r3, lr
 800730a:	d113      	bne.n	8007334 <_strtod_l+0x254>
 800730c:	182b      	adds	r3, r5, r0
 800730e:	2b08      	cmp	r3, #8
 8007310:	f105 0501 	add.w	r5, r5, #1
 8007314:	4405      	add	r5, r0
 8007316:	dc1c      	bgt.n	8007352 <_strtod_l+0x272>
 8007318:	9907      	ldr	r1, [sp, #28]
 800731a:	230a      	movs	r3, #10
 800731c:	fb03 2301 	mla	r3, r3, r1, r2
 8007320:	9307      	str	r3, [sp, #28]
 8007322:	2300      	movs	r3, #0
 8007324:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007326:	1c51      	adds	r1, r2, #1
 8007328:	9117      	str	r1, [sp, #92]	; 0x5c
 800732a:	7852      	ldrb	r2, [r2, #1]
 800732c:	4618      	mov	r0, r3
 800732e:	e7c9      	b.n	80072c4 <_strtod_l+0x1e4>
 8007330:	4638      	mov	r0, r7
 8007332:	e7d2      	b.n	80072da <_strtod_l+0x1fa>
 8007334:	2b08      	cmp	r3, #8
 8007336:	dc04      	bgt.n	8007342 <_strtod_l+0x262>
 8007338:	9e07      	ldr	r6, [sp, #28]
 800733a:	434e      	muls	r6, r1
 800733c:	9607      	str	r6, [sp, #28]
 800733e:	3301      	adds	r3, #1
 8007340:	e7e2      	b.n	8007308 <_strtod_l+0x228>
 8007342:	f103 0c01 	add.w	ip, r3, #1
 8007346:	f1bc 0f10 	cmp.w	ip, #16
 800734a:	bfd8      	it	le
 800734c:	fb01 f909 	mulle.w	r9, r1, r9
 8007350:	e7f5      	b.n	800733e <_strtod_l+0x25e>
 8007352:	2d10      	cmp	r5, #16
 8007354:	bfdc      	itt	le
 8007356:	230a      	movle	r3, #10
 8007358:	fb03 2909 	mlale	r9, r3, r9, r2
 800735c:	e7e1      	b.n	8007322 <_strtod_l+0x242>
 800735e:	2300      	movs	r3, #0
 8007360:	9305      	str	r3, [sp, #20]
 8007362:	2301      	movs	r3, #1
 8007364:	e77c      	b.n	8007260 <_strtod_l+0x180>
 8007366:	f04f 0c00 	mov.w	ip, #0
 800736a:	f108 0202 	add.w	r2, r8, #2
 800736e:	9217      	str	r2, [sp, #92]	; 0x5c
 8007370:	f898 2002 	ldrb.w	r2, [r8, #2]
 8007374:	e785      	b.n	8007282 <_strtod_l+0x1a2>
 8007376:	f04f 0c01 	mov.w	ip, #1
 800737a:	e7f6      	b.n	800736a <_strtod_l+0x28a>
 800737c:	0800b6c8 	.word	0x0800b6c8
 8007380:	0800b480 	.word	0x0800b480
 8007384:	7ff00000 	.word	0x7ff00000
 8007388:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800738a:	1c51      	adds	r1, r2, #1
 800738c:	9117      	str	r1, [sp, #92]	; 0x5c
 800738e:	7852      	ldrb	r2, [r2, #1]
 8007390:	2a30      	cmp	r2, #48	; 0x30
 8007392:	d0f9      	beq.n	8007388 <_strtod_l+0x2a8>
 8007394:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007398:	2908      	cmp	r1, #8
 800739a:	f63f af79 	bhi.w	8007290 <_strtod_l+0x1b0>
 800739e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80073a2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80073a4:	9206      	str	r2, [sp, #24]
 80073a6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80073a8:	1c51      	adds	r1, r2, #1
 80073aa:	9117      	str	r1, [sp, #92]	; 0x5c
 80073ac:	7852      	ldrb	r2, [r2, #1]
 80073ae:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80073b2:	2e09      	cmp	r6, #9
 80073b4:	d937      	bls.n	8007426 <_strtod_l+0x346>
 80073b6:	9e06      	ldr	r6, [sp, #24]
 80073b8:	1b89      	subs	r1, r1, r6
 80073ba:	2908      	cmp	r1, #8
 80073bc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80073c0:	dc02      	bgt.n	80073c8 <_strtod_l+0x2e8>
 80073c2:	4576      	cmp	r6, lr
 80073c4:	bfa8      	it	ge
 80073c6:	4676      	movge	r6, lr
 80073c8:	f1bc 0f00 	cmp.w	ip, #0
 80073cc:	d000      	beq.n	80073d0 <_strtod_l+0x2f0>
 80073ce:	4276      	negs	r6, r6
 80073d0:	2d00      	cmp	r5, #0
 80073d2:	d14d      	bne.n	8007470 <_strtod_l+0x390>
 80073d4:	9904      	ldr	r1, [sp, #16]
 80073d6:	4301      	orrs	r1, r0
 80073d8:	f47f aec6 	bne.w	8007168 <_strtod_l+0x88>
 80073dc:	2b00      	cmp	r3, #0
 80073de:	f47f aee1 	bne.w	80071a4 <_strtod_l+0xc4>
 80073e2:	2a69      	cmp	r2, #105	; 0x69
 80073e4:	d027      	beq.n	8007436 <_strtod_l+0x356>
 80073e6:	dc24      	bgt.n	8007432 <_strtod_l+0x352>
 80073e8:	2a49      	cmp	r2, #73	; 0x49
 80073ea:	d024      	beq.n	8007436 <_strtod_l+0x356>
 80073ec:	2a4e      	cmp	r2, #78	; 0x4e
 80073ee:	f47f aed9 	bne.w	80071a4 <_strtod_l+0xc4>
 80073f2:	499f      	ldr	r1, [pc, #636]	; (8007670 <_strtod_l+0x590>)
 80073f4:	a817      	add	r0, sp, #92	; 0x5c
 80073f6:	f001 fe3d 	bl	8009074 <__match>
 80073fa:	2800      	cmp	r0, #0
 80073fc:	f43f aed2 	beq.w	80071a4 <_strtod_l+0xc4>
 8007400:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007402:	781b      	ldrb	r3, [r3, #0]
 8007404:	2b28      	cmp	r3, #40	; 0x28
 8007406:	d12d      	bne.n	8007464 <_strtod_l+0x384>
 8007408:	499a      	ldr	r1, [pc, #616]	; (8007674 <_strtod_l+0x594>)
 800740a:	aa1a      	add	r2, sp, #104	; 0x68
 800740c:	a817      	add	r0, sp, #92	; 0x5c
 800740e:	f001 fe45 	bl	800909c <__hexnan>
 8007412:	2805      	cmp	r0, #5
 8007414:	d126      	bne.n	8007464 <_strtod_l+0x384>
 8007416:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007418:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800741c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007420:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007424:	e6a0      	b.n	8007168 <_strtod_l+0x88>
 8007426:	210a      	movs	r1, #10
 8007428:	fb01 2e0e 	mla	lr, r1, lr, r2
 800742c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007430:	e7b9      	b.n	80073a6 <_strtod_l+0x2c6>
 8007432:	2a6e      	cmp	r2, #110	; 0x6e
 8007434:	e7db      	b.n	80073ee <_strtod_l+0x30e>
 8007436:	4990      	ldr	r1, [pc, #576]	; (8007678 <_strtod_l+0x598>)
 8007438:	a817      	add	r0, sp, #92	; 0x5c
 800743a:	f001 fe1b 	bl	8009074 <__match>
 800743e:	2800      	cmp	r0, #0
 8007440:	f43f aeb0 	beq.w	80071a4 <_strtod_l+0xc4>
 8007444:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007446:	498d      	ldr	r1, [pc, #564]	; (800767c <_strtod_l+0x59c>)
 8007448:	3b01      	subs	r3, #1
 800744a:	a817      	add	r0, sp, #92	; 0x5c
 800744c:	9317      	str	r3, [sp, #92]	; 0x5c
 800744e:	f001 fe11 	bl	8009074 <__match>
 8007452:	b910      	cbnz	r0, 800745a <_strtod_l+0x37a>
 8007454:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007456:	3301      	adds	r3, #1
 8007458:	9317      	str	r3, [sp, #92]	; 0x5c
 800745a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800768c <_strtod_l+0x5ac>
 800745e:	f04f 0a00 	mov.w	sl, #0
 8007462:	e681      	b.n	8007168 <_strtod_l+0x88>
 8007464:	4886      	ldr	r0, [pc, #536]	; (8007680 <_strtod_l+0x5a0>)
 8007466:	f002 fdf7 	bl	800a058 <nan>
 800746a:	ec5b ab10 	vmov	sl, fp, d0
 800746e:	e67b      	b.n	8007168 <_strtod_l+0x88>
 8007470:	9b05      	ldr	r3, [sp, #20]
 8007472:	9807      	ldr	r0, [sp, #28]
 8007474:	1af3      	subs	r3, r6, r3
 8007476:	2f00      	cmp	r7, #0
 8007478:	bf08      	it	eq
 800747a:	462f      	moveq	r7, r5
 800747c:	2d10      	cmp	r5, #16
 800747e:	9306      	str	r3, [sp, #24]
 8007480:	46a8      	mov	r8, r5
 8007482:	bfa8      	it	ge
 8007484:	f04f 0810 	movge.w	r8, #16
 8007488:	f7f9 f83c 	bl	8000504 <__aeabi_ui2d>
 800748c:	2d09      	cmp	r5, #9
 800748e:	4682      	mov	sl, r0
 8007490:	468b      	mov	fp, r1
 8007492:	dd13      	ble.n	80074bc <_strtod_l+0x3dc>
 8007494:	4b7b      	ldr	r3, [pc, #492]	; (8007684 <_strtod_l+0x5a4>)
 8007496:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800749a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800749e:	f7f9 f8ab 	bl	80005f8 <__aeabi_dmul>
 80074a2:	4682      	mov	sl, r0
 80074a4:	4648      	mov	r0, r9
 80074a6:	468b      	mov	fp, r1
 80074a8:	f7f9 f82c 	bl	8000504 <__aeabi_ui2d>
 80074ac:	4602      	mov	r2, r0
 80074ae:	460b      	mov	r3, r1
 80074b0:	4650      	mov	r0, sl
 80074b2:	4659      	mov	r1, fp
 80074b4:	f7f8 feea 	bl	800028c <__adddf3>
 80074b8:	4682      	mov	sl, r0
 80074ba:	468b      	mov	fp, r1
 80074bc:	2d0f      	cmp	r5, #15
 80074be:	dc38      	bgt.n	8007532 <_strtod_l+0x452>
 80074c0:	9b06      	ldr	r3, [sp, #24]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	f43f ae50 	beq.w	8007168 <_strtod_l+0x88>
 80074c8:	dd24      	ble.n	8007514 <_strtod_l+0x434>
 80074ca:	2b16      	cmp	r3, #22
 80074cc:	dc0b      	bgt.n	80074e6 <_strtod_l+0x406>
 80074ce:	496d      	ldr	r1, [pc, #436]	; (8007684 <_strtod_l+0x5a4>)
 80074d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80074d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80074d8:	4652      	mov	r2, sl
 80074da:	465b      	mov	r3, fp
 80074dc:	f7f9 f88c 	bl	80005f8 <__aeabi_dmul>
 80074e0:	4682      	mov	sl, r0
 80074e2:	468b      	mov	fp, r1
 80074e4:	e640      	b.n	8007168 <_strtod_l+0x88>
 80074e6:	9a06      	ldr	r2, [sp, #24]
 80074e8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80074ec:	4293      	cmp	r3, r2
 80074ee:	db20      	blt.n	8007532 <_strtod_l+0x452>
 80074f0:	4c64      	ldr	r4, [pc, #400]	; (8007684 <_strtod_l+0x5a4>)
 80074f2:	f1c5 050f 	rsb	r5, r5, #15
 80074f6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80074fa:	4652      	mov	r2, sl
 80074fc:	465b      	mov	r3, fp
 80074fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007502:	f7f9 f879 	bl	80005f8 <__aeabi_dmul>
 8007506:	9b06      	ldr	r3, [sp, #24]
 8007508:	1b5d      	subs	r5, r3, r5
 800750a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800750e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007512:	e7e3      	b.n	80074dc <_strtod_l+0x3fc>
 8007514:	9b06      	ldr	r3, [sp, #24]
 8007516:	3316      	adds	r3, #22
 8007518:	db0b      	blt.n	8007532 <_strtod_l+0x452>
 800751a:	9b05      	ldr	r3, [sp, #20]
 800751c:	1b9e      	subs	r6, r3, r6
 800751e:	4b59      	ldr	r3, [pc, #356]	; (8007684 <_strtod_l+0x5a4>)
 8007520:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8007524:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007528:	4650      	mov	r0, sl
 800752a:	4659      	mov	r1, fp
 800752c:	f7f9 f98e 	bl	800084c <__aeabi_ddiv>
 8007530:	e7d6      	b.n	80074e0 <_strtod_l+0x400>
 8007532:	9b06      	ldr	r3, [sp, #24]
 8007534:	eba5 0808 	sub.w	r8, r5, r8
 8007538:	4498      	add	r8, r3
 800753a:	f1b8 0f00 	cmp.w	r8, #0
 800753e:	dd74      	ble.n	800762a <_strtod_l+0x54a>
 8007540:	f018 030f 	ands.w	r3, r8, #15
 8007544:	d00a      	beq.n	800755c <_strtod_l+0x47c>
 8007546:	494f      	ldr	r1, [pc, #316]	; (8007684 <_strtod_l+0x5a4>)
 8007548:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800754c:	4652      	mov	r2, sl
 800754e:	465b      	mov	r3, fp
 8007550:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007554:	f7f9 f850 	bl	80005f8 <__aeabi_dmul>
 8007558:	4682      	mov	sl, r0
 800755a:	468b      	mov	fp, r1
 800755c:	f038 080f 	bics.w	r8, r8, #15
 8007560:	d04f      	beq.n	8007602 <_strtod_l+0x522>
 8007562:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8007566:	dd22      	ble.n	80075ae <_strtod_l+0x4ce>
 8007568:	2500      	movs	r5, #0
 800756a:	462e      	mov	r6, r5
 800756c:	9507      	str	r5, [sp, #28]
 800756e:	9505      	str	r5, [sp, #20]
 8007570:	2322      	movs	r3, #34	; 0x22
 8007572:	f8df b118 	ldr.w	fp, [pc, #280]	; 800768c <_strtod_l+0x5ac>
 8007576:	6023      	str	r3, [r4, #0]
 8007578:	f04f 0a00 	mov.w	sl, #0
 800757c:	9b07      	ldr	r3, [sp, #28]
 800757e:	2b00      	cmp	r3, #0
 8007580:	f43f adf2 	beq.w	8007168 <_strtod_l+0x88>
 8007584:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007586:	4620      	mov	r0, r4
 8007588:	f001 fe90 	bl	80092ac <_Bfree>
 800758c:	9905      	ldr	r1, [sp, #20]
 800758e:	4620      	mov	r0, r4
 8007590:	f001 fe8c 	bl	80092ac <_Bfree>
 8007594:	4631      	mov	r1, r6
 8007596:	4620      	mov	r0, r4
 8007598:	f001 fe88 	bl	80092ac <_Bfree>
 800759c:	9907      	ldr	r1, [sp, #28]
 800759e:	4620      	mov	r0, r4
 80075a0:	f001 fe84 	bl	80092ac <_Bfree>
 80075a4:	4629      	mov	r1, r5
 80075a6:	4620      	mov	r0, r4
 80075a8:	f001 fe80 	bl	80092ac <_Bfree>
 80075ac:	e5dc      	b.n	8007168 <_strtod_l+0x88>
 80075ae:	4b36      	ldr	r3, [pc, #216]	; (8007688 <_strtod_l+0x5a8>)
 80075b0:	9304      	str	r3, [sp, #16]
 80075b2:	2300      	movs	r3, #0
 80075b4:	ea4f 1828 	mov.w	r8, r8, asr #4
 80075b8:	4650      	mov	r0, sl
 80075ba:	4659      	mov	r1, fp
 80075bc:	4699      	mov	r9, r3
 80075be:	f1b8 0f01 	cmp.w	r8, #1
 80075c2:	dc21      	bgt.n	8007608 <_strtod_l+0x528>
 80075c4:	b10b      	cbz	r3, 80075ca <_strtod_l+0x4ea>
 80075c6:	4682      	mov	sl, r0
 80075c8:	468b      	mov	fp, r1
 80075ca:	4b2f      	ldr	r3, [pc, #188]	; (8007688 <_strtod_l+0x5a8>)
 80075cc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80075d0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80075d4:	4652      	mov	r2, sl
 80075d6:	465b      	mov	r3, fp
 80075d8:	e9d9 0100 	ldrd	r0, r1, [r9]
 80075dc:	f7f9 f80c 	bl	80005f8 <__aeabi_dmul>
 80075e0:	4b2a      	ldr	r3, [pc, #168]	; (800768c <_strtod_l+0x5ac>)
 80075e2:	460a      	mov	r2, r1
 80075e4:	400b      	ands	r3, r1
 80075e6:	492a      	ldr	r1, [pc, #168]	; (8007690 <_strtod_l+0x5b0>)
 80075e8:	428b      	cmp	r3, r1
 80075ea:	4682      	mov	sl, r0
 80075ec:	d8bc      	bhi.n	8007568 <_strtod_l+0x488>
 80075ee:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80075f2:	428b      	cmp	r3, r1
 80075f4:	bf86      	itte	hi
 80075f6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8007694 <_strtod_l+0x5b4>
 80075fa:	f04f 3aff 	movhi.w	sl, #4294967295
 80075fe:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8007602:	2300      	movs	r3, #0
 8007604:	9304      	str	r3, [sp, #16]
 8007606:	e084      	b.n	8007712 <_strtod_l+0x632>
 8007608:	f018 0f01 	tst.w	r8, #1
 800760c:	d005      	beq.n	800761a <_strtod_l+0x53a>
 800760e:	9b04      	ldr	r3, [sp, #16]
 8007610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007614:	f7f8 fff0 	bl	80005f8 <__aeabi_dmul>
 8007618:	2301      	movs	r3, #1
 800761a:	9a04      	ldr	r2, [sp, #16]
 800761c:	3208      	adds	r2, #8
 800761e:	f109 0901 	add.w	r9, r9, #1
 8007622:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007626:	9204      	str	r2, [sp, #16]
 8007628:	e7c9      	b.n	80075be <_strtod_l+0x4de>
 800762a:	d0ea      	beq.n	8007602 <_strtod_l+0x522>
 800762c:	f1c8 0800 	rsb	r8, r8, #0
 8007630:	f018 020f 	ands.w	r2, r8, #15
 8007634:	d00a      	beq.n	800764c <_strtod_l+0x56c>
 8007636:	4b13      	ldr	r3, [pc, #76]	; (8007684 <_strtod_l+0x5a4>)
 8007638:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800763c:	4650      	mov	r0, sl
 800763e:	4659      	mov	r1, fp
 8007640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007644:	f7f9 f902 	bl	800084c <__aeabi_ddiv>
 8007648:	4682      	mov	sl, r0
 800764a:	468b      	mov	fp, r1
 800764c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007650:	d0d7      	beq.n	8007602 <_strtod_l+0x522>
 8007652:	f1b8 0f1f 	cmp.w	r8, #31
 8007656:	dd1f      	ble.n	8007698 <_strtod_l+0x5b8>
 8007658:	2500      	movs	r5, #0
 800765a:	462e      	mov	r6, r5
 800765c:	9507      	str	r5, [sp, #28]
 800765e:	9505      	str	r5, [sp, #20]
 8007660:	2322      	movs	r3, #34	; 0x22
 8007662:	f04f 0a00 	mov.w	sl, #0
 8007666:	f04f 0b00 	mov.w	fp, #0
 800766a:	6023      	str	r3, [r4, #0]
 800766c:	e786      	b.n	800757c <_strtod_l+0x49c>
 800766e:	bf00      	nop
 8007670:	0800b451 	.word	0x0800b451
 8007674:	0800b494 	.word	0x0800b494
 8007678:	0800b449 	.word	0x0800b449
 800767c:	0800b5d4 	.word	0x0800b5d4
 8007680:	0800b880 	.word	0x0800b880
 8007684:	0800b760 	.word	0x0800b760
 8007688:	0800b738 	.word	0x0800b738
 800768c:	7ff00000 	.word	0x7ff00000
 8007690:	7ca00000 	.word	0x7ca00000
 8007694:	7fefffff 	.word	0x7fefffff
 8007698:	f018 0310 	ands.w	r3, r8, #16
 800769c:	bf18      	it	ne
 800769e:	236a      	movne	r3, #106	; 0x6a
 80076a0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8007a50 <_strtod_l+0x970>
 80076a4:	9304      	str	r3, [sp, #16]
 80076a6:	4650      	mov	r0, sl
 80076a8:	4659      	mov	r1, fp
 80076aa:	2300      	movs	r3, #0
 80076ac:	f018 0f01 	tst.w	r8, #1
 80076b0:	d004      	beq.n	80076bc <_strtod_l+0x5dc>
 80076b2:	e9d9 2300 	ldrd	r2, r3, [r9]
 80076b6:	f7f8 ff9f 	bl	80005f8 <__aeabi_dmul>
 80076ba:	2301      	movs	r3, #1
 80076bc:	ea5f 0868 	movs.w	r8, r8, asr #1
 80076c0:	f109 0908 	add.w	r9, r9, #8
 80076c4:	d1f2      	bne.n	80076ac <_strtod_l+0x5cc>
 80076c6:	b10b      	cbz	r3, 80076cc <_strtod_l+0x5ec>
 80076c8:	4682      	mov	sl, r0
 80076ca:	468b      	mov	fp, r1
 80076cc:	9b04      	ldr	r3, [sp, #16]
 80076ce:	b1c3      	cbz	r3, 8007702 <_strtod_l+0x622>
 80076d0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80076d4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80076d8:	2b00      	cmp	r3, #0
 80076da:	4659      	mov	r1, fp
 80076dc:	dd11      	ble.n	8007702 <_strtod_l+0x622>
 80076de:	2b1f      	cmp	r3, #31
 80076e0:	f340 8124 	ble.w	800792c <_strtod_l+0x84c>
 80076e4:	2b34      	cmp	r3, #52	; 0x34
 80076e6:	bfde      	ittt	le
 80076e8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80076ec:	f04f 33ff 	movle.w	r3, #4294967295
 80076f0:	fa03 f202 	lslle.w	r2, r3, r2
 80076f4:	f04f 0a00 	mov.w	sl, #0
 80076f8:	bfcc      	ite	gt
 80076fa:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80076fe:	ea02 0b01 	andle.w	fp, r2, r1
 8007702:	2200      	movs	r2, #0
 8007704:	2300      	movs	r3, #0
 8007706:	4650      	mov	r0, sl
 8007708:	4659      	mov	r1, fp
 800770a:	f7f9 f9dd 	bl	8000ac8 <__aeabi_dcmpeq>
 800770e:	2800      	cmp	r0, #0
 8007710:	d1a2      	bne.n	8007658 <_strtod_l+0x578>
 8007712:	9b07      	ldr	r3, [sp, #28]
 8007714:	9300      	str	r3, [sp, #0]
 8007716:	9908      	ldr	r1, [sp, #32]
 8007718:	462b      	mov	r3, r5
 800771a:	463a      	mov	r2, r7
 800771c:	4620      	mov	r0, r4
 800771e:	f001 fe2d 	bl	800937c <__s2b>
 8007722:	9007      	str	r0, [sp, #28]
 8007724:	2800      	cmp	r0, #0
 8007726:	f43f af1f 	beq.w	8007568 <_strtod_l+0x488>
 800772a:	9b05      	ldr	r3, [sp, #20]
 800772c:	1b9e      	subs	r6, r3, r6
 800772e:	9b06      	ldr	r3, [sp, #24]
 8007730:	2b00      	cmp	r3, #0
 8007732:	bfb4      	ite	lt
 8007734:	4633      	movlt	r3, r6
 8007736:	2300      	movge	r3, #0
 8007738:	930c      	str	r3, [sp, #48]	; 0x30
 800773a:	9b06      	ldr	r3, [sp, #24]
 800773c:	2500      	movs	r5, #0
 800773e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007742:	9312      	str	r3, [sp, #72]	; 0x48
 8007744:	462e      	mov	r6, r5
 8007746:	9b07      	ldr	r3, [sp, #28]
 8007748:	4620      	mov	r0, r4
 800774a:	6859      	ldr	r1, [r3, #4]
 800774c:	f001 fd6e 	bl	800922c <_Balloc>
 8007750:	9005      	str	r0, [sp, #20]
 8007752:	2800      	cmp	r0, #0
 8007754:	f43f af0c 	beq.w	8007570 <_strtod_l+0x490>
 8007758:	9b07      	ldr	r3, [sp, #28]
 800775a:	691a      	ldr	r2, [r3, #16]
 800775c:	3202      	adds	r2, #2
 800775e:	f103 010c 	add.w	r1, r3, #12
 8007762:	0092      	lsls	r2, r2, #2
 8007764:	300c      	adds	r0, #12
 8007766:	f001 fd53 	bl	8009210 <memcpy>
 800776a:	ec4b ab10 	vmov	d0, sl, fp
 800776e:	aa1a      	add	r2, sp, #104	; 0x68
 8007770:	a919      	add	r1, sp, #100	; 0x64
 8007772:	4620      	mov	r0, r4
 8007774:	f002 f948 	bl	8009a08 <__d2b>
 8007778:	ec4b ab18 	vmov	d8, sl, fp
 800777c:	9018      	str	r0, [sp, #96]	; 0x60
 800777e:	2800      	cmp	r0, #0
 8007780:	f43f aef6 	beq.w	8007570 <_strtod_l+0x490>
 8007784:	2101      	movs	r1, #1
 8007786:	4620      	mov	r0, r4
 8007788:	f001 fe92 	bl	80094b0 <__i2b>
 800778c:	4606      	mov	r6, r0
 800778e:	2800      	cmp	r0, #0
 8007790:	f43f aeee 	beq.w	8007570 <_strtod_l+0x490>
 8007794:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007796:	9904      	ldr	r1, [sp, #16]
 8007798:	2b00      	cmp	r3, #0
 800779a:	bfab      	itete	ge
 800779c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800779e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80077a0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80077a2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80077a6:	bfac      	ite	ge
 80077a8:	eb03 0902 	addge.w	r9, r3, r2
 80077ac:	1ad7      	sublt	r7, r2, r3
 80077ae:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80077b0:	eba3 0801 	sub.w	r8, r3, r1
 80077b4:	4490      	add	r8, r2
 80077b6:	4ba1      	ldr	r3, [pc, #644]	; (8007a3c <_strtod_l+0x95c>)
 80077b8:	f108 38ff 	add.w	r8, r8, #4294967295
 80077bc:	4598      	cmp	r8, r3
 80077be:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80077c2:	f280 80c7 	bge.w	8007954 <_strtod_l+0x874>
 80077c6:	eba3 0308 	sub.w	r3, r3, r8
 80077ca:	2b1f      	cmp	r3, #31
 80077cc:	eba2 0203 	sub.w	r2, r2, r3
 80077d0:	f04f 0101 	mov.w	r1, #1
 80077d4:	f300 80b1 	bgt.w	800793a <_strtod_l+0x85a>
 80077d8:	fa01 f303 	lsl.w	r3, r1, r3
 80077dc:	930d      	str	r3, [sp, #52]	; 0x34
 80077de:	2300      	movs	r3, #0
 80077e0:	9308      	str	r3, [sp, #32]
 80077e2:	eb09 0802 	add.w	r8, r9, r2
 80077e6:	9b04      	ldr	r3, [sp, #16]
 80077e8:	45c1      	cmp	r9, r8
 80077ea:	4417      	add	r7, r2
 80077ec:	441f      	add	r7, r3
 80077ee:	464b      	mov	r3, r9
 80077f0:	bfa8      	it	ge
 80077f2:	4643      	movge	r3, r8
 80077f4:	42bb      	cmp	r3, r7
 80077f6:	bfa8      	it	ge
 80077f8:	463b      	movge	r3, r7
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	bfc2      	ittt	gt
 80077fe:	eba8 0803 	subgt.w	r8, r8, r3
 8007802:	1aff      	subgt	r7, r7, r3
 8007804:	eba9 0903 	subgt.w	r9, r9, r3
 8007808:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800780a:	2b00      	cmp	r3, #0
 800780c:	dd17      	ble.n	800783e <_strtod_l+0x75e>
 800780e:	4631      	mov	r1, r6
 8007810:	461a      	mov	r2, r3
 8007812:	4620      	mov	r0, r4
 8007814:	f001 ff0c 	bl	8009630 <__pow5mult>
 8007818:	4606      	mov	r6, r0
 800781a:	2800      	cmp	r0, #0
 800781c:	f43f aea8 	beq.w	8007570 <_strtod_l+0x490>
 8007820:	4601      	mov	r1, r0
 8007822:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007824:	4620      	mov	r0, r4
 8007826:	f001 fe59 	bl	80094dc <__multiply>
 800782a:	900b      	str	r0, [sp, #44]	; 0x2c
 800782c:	2800      	cmp	r0, #0
 800782e:	f43f ae9f 	beq.w	8007570 <_strtod_l+0x490>
 8007832:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007834:	4620      	mov	r0, r4
 8007836:	f001 fd39 	bl	80092ac <_Bfree>
 800783a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800783c:	9318      	str	r3, [sp, #96]	; 0x60
 800783e:	f1b8 0f00 	cmp.w	r8, #0
 8007842:	f300 808c 	bgt.w	800795e <_strtod_l+0x87e>
 8007846:	9b06      	ldr	r3, [sp, #24]
 8007848:	2b00      	cmp	r3, #0
 800784a:	dd08      	ble.n	800785e <_strtod_l+0x77e>
 800784c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800784e:	9905      	ldr	r1, [sp, #20]
 8007850:	4620      	mov	r0, r4
 8007852:	f001 feed 	bl	8009630 <__pow5mult>
 8007856:	9005      	str	r0, [sp, #20]
 8007858:	2800      	cmp	r0, #0
 800785a:	f43f ae89 	beq.w	8007570 <_strtod_l+0x490>
 800785e:	2f00      	cmp	r7, #0
 8007860:	dd08      	ble.n	8007874 <_strtod_l+0x794>
 8007862:	9905      	ldr	r1, [sp, #20]
 8007864:	463a      	mov	r2, r7
 8007866:	4620      	mov	r0, r4
 8007868:	f001 ff3c 	bl	80096e4 <__lshift>
 800786c:	9005      	str	r0, [sp, #20]
 800786e:	2800      	cmp	r0, #0
 8007870:	f43f ae7e 	beq.w	8007570 <_strtod_l+0x490>
 8007874:	f1b9 0f00 	cmp.w	r9, #0
 8007878:	dd08      	ble.n	800788c <_strtod_l+0x7ac>
 800787a:	4631      	mov	r1, r6
 800787c:	464a      	mov	r2, r9
 800787e:	4620      	mov	r0, r4
 8007880:	f001 ff30 	bl	80096e4 <__lshift>
 8007884:	4606      	mov	r6, r0
 8007886:	2800      	cmp	r0, #0
 8007888:	f43f ae72 	beq.w	8007570 <_strtod_l+0x490>
 800788c:	9a05      	ldr	r2, [sp, #20]
 800788e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007890:	4620      	mov	r0, r4
 8007892:	f001 ffb3 	bl	80097fc <__mdiff>
 8007896:	4605      	mov	r5, r0
 8007898:	2800      	cmp	r0, #0
 800789a:	f43f ae69 	beq.w	8007570 <_strtod_l+0x490>
 800789e:	68c3      	ldr	r3, [r0, #12]
 80078a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80078a2:	2300      	movs	r3, #0
 80078a4:	60c3      	str	r3, [r0, #12]
 80078a6:	4631      	mov	r1, r6
 80078a8:	f001 ff8c 	bl	80097c4 <__mcmp>
 80078ac:	2800      	cmp	r0, #0
 80078ae:	da60      	bge.n	8007972 <_strtod_l+0x892>
 80078b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078b2:	ea53 030a 	orrs.w	r3, r3, sl
 80078b6:	f040 8082 	bne.w	80079be <_strtod_l+0x8de>
 80078ba:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d17d      	bne.n	80079be <_strtod_l+0x8de>
 80078c2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80078c6:	0d1b      	lsrs	r3, r3, #20
 80078c8:	051b      	lsls	r3, r3, #20
 80078ca:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80078ce:	d976      	bls.n	80079be <_strtod_l+0x8de>
 80078d0:	696b      	ldr	r3, [r5, #20]
 80078d2:	b913      	cbnz	r3, 80078da <_strtod_l+0x7fa>
 80078d4:	692b      	ldr	r3, [r5, #16]
 80078d6:	2b01      	cmp	r3, #1
 80078d8:	dd71      	ble.n	80079be <_strtod_l+0x8de>
 80078da:	4629      	mov	r1, r5
 80078dc:	2201      	movs	r2, #1
 80078de:	4620      	mov	r0, r4
 80078e0:	f001 ff00 	bl	80096e4 <__lshift>
 80078e4:	4631      	mov	r1, r6
 80078e6:	4605      	mov	r5, r0
 80078e8:	f001 ff6c 	bl	80097c4 <__mcmp>
 80078ec:	2800      	cmp	r0, #0
 80078ee:	dd66      	ble.n	80079be <_strtod_l+0x8de>
 80078f0:	9904      	ldr	r1, [sp, #16]
 80078f2:	4a53      	ldr	r2, [pc, #332]	; (8007a40 <_strtod_l+0x960>)
 80078f4:	465b      	mov	r3, fp
 80078f6:	2900      	cmp	r1, #0
 80078f8:	f000 8081 	beq.w	80079fe <_strtod_l+0x91e>
 80078fc:	ea02 010b 	and.w	r1, r2, fp
 8007900:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007904:	dc7b      	bgt.n	80079fe <_strtod_l+0x91e>
 8007906:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800790a:	f77f aea9 	ble.w	8007660 <_strtod_l+0x580>
 800790e:	4b4d      	ldr	r3, [pc, #308]	; (8007a44 <_strtod_l+0x964>)
 8007910:	4650      	mov	r0, sl
 8007912:	4659      	mov	r1, fp
 8007914:	2200      	movs	r2, #0
 8007916:	f7f8 fe6f 	bl	80005f8 <__aeabi_dmul>
 800791a:	460b      	mov	r3, r1
 800791c:	4303      	orrs	r3, r0
 800791e:	bf08      	it	eq
 8007920:	2322      	moveq	r3, #34	; 0x22
 8007922:	4682      	mov	sl, r0
 8007924:	468b      	mov	fp, r1
 8007926:	bf08      	it	eq
 8007928:	6023      	streq	r3, [r4, #0]
 800792a:	e62b      	b.n	8007584 <_strtod_l+0x4a4>
 800792c:	f04f 32ff 	mov.w	r2, #4294967295
 8007930:	fa02 f303 	lsl.w	r3, r2, r3
 8007934:	ea03 0a0a 	and.w	sl, r3, sl
 8007938:	e6e3      	b.n	8007702 <_strtod_l+0x622>
 800793a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800793e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8007942:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8007946:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800794a:	fa01 f308 	lsl.w	r3, r1, r8
 800794e:	9308      	str	r3, [sp, #32]
 8007950:	910d      	str	r1, [sp, #52]	; 0x34
 8007952:	e746      	b.n	80077e2 <_strtod_l+0x702>
 8007954:	2300      	movs	r3, #0
 8007956:	9308      	str	r3, [sp, #32]
 8007958:	2301      	movs	r3, #1
 800795a:	930d      	str	r3, [sp, #52]	; 0x34
 800795c:	e741      	b.n	80077e2 <_strtod_l+0x702>
 800795e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007960:	4642      	mov	r2, r8
 8007962:	4620      	mov	r0, r4
 8007964:	f001 febe 	bl	80096e4 <__lshift>
 8007968:	9018      	str	r0, [sp, #96]	; 0x60
 800796a:	2800      	cmp	r0, #0
 800796c:	f47f af6b 	bne.w	8007846 <_strtod_l+0x766>
 8007970:	e5fe      	b.n	8007570 <_strtod_l+0x490>
 8007972:	465f      	mov	r7, fp
 8007974:	d16e      	bne.n	8007a54 <_strtod_l+0x974>
 8007976:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007978:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800797c:	b342      	cbz	r2, 80079d0 <_strtod_l+0x8f0>
 800797e:	4a32      	ldr	r2, [pc, #200]	; (8007a48 <_strtod_l+0x968>)
 8007980:	4293      	cmp	r3, r2
 8007982:	d128      	bne.n	80079d6 <_strtod_l+0x8f6>
 8007984:	9b04      	ldr	r3, [sp, #16]
 8007986:	4651      	mov	r1, sl
 8007988:	b1eb      	cbz	r3, 80079c6 <_strtod_l+0x8e6>
 800798a:	4b2d      	ldr	r3, [pc, #180]	; (8007a40 <_strtod_l+0x960>)
 800798c:	403b      	ands	r3, r7
 800798e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007992:	f04f 32ff 	mov.w	r2, #4294967295
 8007996:	d819      	bhi.n	80079cc <_strtod_l+0x8ec>
 8007998:	0d1b      	lsrs	r3, r3, #20
 800799a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800799e:	fa02 f303 	lsl.w	r3, r2, r3
 80079a2:	4299      	cmp	r1, r3
 80079a4:	d117      	bne.n	80079d6 <_strtod_l+0x8f6>
 80079a6:	4b29      	ldr	r3, [pc, #164]	; (8007a4c <_strtod_l+0x96c>)
 80079a8:	429f      	cmp	r7, r3
 80079aa:	d102      	bne.n	80079b2 <_strtod_l+0x8d2>
 80079ac:	3101      	adds	r1, #1
 80079ae:	f43f addf 	beq.w	8007570 <_strtod_l+0x490>
 80079b2:	4b23      	ldr	r3, [pc, #140]	; (8007a40 <_strtod_l+0x960>)
 80079b4:	403b      	ands	r3, r7
 80079b6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80079ba:	f04f 0a00 	mov.w	sl, #0
 80079be:	9b04      	ldr	r3, [sp, #16]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d1a4      	bne.n	800790e <_strtod_l+0x82e>
 80079c4:	e5de      	b.n	8007584 <_strtod_l+0x4a4>
 80079c6:	f04f 33ff 	mov.w	r3, #4294967295
 80079ca:	e7ea      	b.n	80079a2 <_strtod_l+0x8c2>
 80079cc:	4613      	mov	r3, r2
 80079ce:	e7e8      	b.n	80079a2 <_strtod_l+0x8c2>
 80079d0:	ea53 030a 	orrs.w	r3, r3, sl
 80079d4:	d08c      	beq.n	80078f0 <_strtod_l+0x810>
 80079d6:	9b08      	ldr	r3, [sp, #32]
 80079d8:	b1db      	cbz	r3, 8007a12 <_strtod_l+0x932>
 80079da:	423b      	tst	r3, r7
 80079dc:	d0ef      	beq.n	80079be <_strtod_l+0x8de>
 80079de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079e0:	9a04      	ldr	r2, [sp, #16]
 80079e2:	4650      	mov	r0, sl
 80079e4:	4659      	mov	r1, fp
 80079e6:	b1c3      	cbz	r3, 8007a1a <_strtod_l+0x93a>
 80079e8:	f7ff fb5e 	bl	80070a8 <sulp>
 80079ec:	4602      	mov	r2, r0
 80079ee:	460b      	mov	r3, r1
 80079f0:	ec51 0b18 	vmov	r0, r1, d8
 80079f4:	f7f8 fc4a 	bl	800028c <__adddf3>
 80079f8:	4682      	mov	sl, r0
 80079fa:	468b      	mov	fp, r1
 80079fc:	e7df      	b.n	80079be <_strtod_l+0x8de>
 80079fe:	4013      	ands	r3, r2
 8007a00:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007a04:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007a08:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007a0c:	f04f 3aff 	mov.w	sl, #4294967295
 8007a10:	e7d5      	b.n	80079be <_strtod_l+0x8de>
 8007a12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a14:	ea13 0f0a 	tst.w	r3, sl
 8007a18:	e7e0      	b.n	80079dc <_strtod_l+0x8fc>
 8007a1a:	f7ff fb45 	bl	80070a8 <sulp>
 8007a1e:	4602      	mov	r2, r0
 8007a20:	460b      	mov	r3, r1
 8007a22:	ec51 0b18 	vmov	r0, r1, d8
 8007a26:	f7f8 fc2f 	bl	8000288 <__aeabi_dsub>
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	4682      	mov	sl, r0
 8007a30:	468b      	mov	fp, r1
 8007a32:	f7f9 f849 	bl	8000ac8 <__aeabi_dcmpeq>
 8007a36:	2800      	cmp	r0, #0
 8007a38:	d0c1      	beq.n	80079be <_strtod_l+0x8de>
 8007a3a:	e611      	b.n	8007660 <_strtod_l+0x580>
 8007a3c:	fffffc02 	.word	0xfffffc02
 8007a40:	7ff00000 	.word	0x7ff00000
 8007a44:	39500000 	.word	0x39500000
 8007a48:	000fffff 	.word	0x000fffff
 8007a4c:	7fefffff 	.word	0x7fefffff
 8007a50:	0800b4a8 	.word	0x0800b4a8
 8007a54:	4631      	mov	r1, r6
 8007a56:	4628      	mov	r0, r5
 8007a58:	f002 f832 	bl	8009ac0 <__ratio>
 8007a5c:	ec59 8b10 	vmov	r8, r9, d0
 8007a60:	ee10 0a10 	vmov	r0, s0
 8007a64:	2200      	movs	r2, #0
 8007a66:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007a6a:	4649      	mov	r1, r9
 8007a6c:	f7f9 f840 	bl	8000af0 <__aeabi_dcmple>
 8007a70:	2800      	cmp	r0, #0
 8007a72:	d07a      	beq.n	8007b6a <_strtod_l+0xa8a>
 8007a74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d04a      	beq.n	8007b10 <_strtod_l+0xa30>
 8007a7a:	4b95      	ldr	r3, [pc, #596]	; (8007cd0 <_strtod_l+0xbf0>)
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007a82:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8007cd0 <_strtod_l+0xbf0>
 8007a86:	f04f 0800 	mov.w	r8, #0
 8007a8a:	4b92      	ldr	r3, [pc, #584]	; (8007cd4 <_strtod_l+0xbf4>)
 8007a8c:	403b      	ands	r3, r7
 8007a8e:	930d      	str	r3, [sp, #52]	; 0x34
 8007a90:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007a92:	4b91      	ldr	r3, [pc, #580]	; (8007cd8 <_strtod_l+0xbf8>)
 8007a94:	429a      	cmp	r2, r3
 8007a96:	f040 80b0 	bne.w	8007bfa <_strtod_l+0xb1a>
 8007a9a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007a9e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8007aa2:	ec4b ab10 	vmov	d0, sl, fp
 8007aa6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007aaa:	f001 ff31 	bl	8009910 <__ulp>
 8007aae:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007ab2:	ec53 2b10 	vmov	r2, r3, d0
 8007ab6:	f7f8 fd9f 	bl	80005f8 <__aeabi_dmul>
 8007aba:	4652      	mov	r2, sl
 8007abc:	465b      	mov	r3, fp
 8007abe:	f7f8 fbe5 	bl	800028c <__adddf3>
 8007ac2:	460b      	mov	r3, r1
 8007ac4:	4983      	ldr	r1, [pc, #524]	; (8007cd4 <_strtod_l+0xbf4>)
 8007ac6:	4a85      	ldr	r2, [pc, #532]	; (8007cdc <_strtod_l+0xbfc>)
 8007ac8:	4019      	ands	r1, r3
 8007aca:	4291      	cmp	r1, r2
 8007acc:	4682      	mov	sl, r0
 8007ace:	d960      	bls.n	8007b92 <_strtod_l+0xab2>
 8007ad0:	ee18 3a90 	vmov	r3, s17
 8007ad4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d104      	bne.n	8007ae6 <_strtod_l+0xa06>
 8007adc:	ee18 3a10 	vmov	r3, s16
 8007ae0:	3301      	adds	r3, #1
 8007ae2:	f43f ad45 	beq.w	8007570 <_strtod_l+0x490>
 8007ae6:	f8df b200 	ldr.w	fp, [pc, #512]	; 8007ce8 <_strtod_l+0xc08>
 8007aea:	f04f 3aff 	mov.w	sl, #4294967295
 8007aee:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007af0:	4620      	mov	r0, r4
 8007af2:	f001 fbdb 	bl	80092ac <_Bfree>
 8007af6:	9905      	ldr	r1, [sp, #20]
 8007af8:	4620      	mov	r0, r4
 8007afa:	f001 fbd7 	bl	80092ac <_Bfree>
 8007afe:	4631      	mov	r1, r6
 8007b00:	4620      	mov	r0, r4
 8007b02:	f001 fbd3 	bl	80092ac <_Bfree>
 8007b06:	4629      	mov	r1, r5
 8007b08:	4620      	mov	r0, r4
 8007b0a:	f001 fbcf 	bl	80092ac <_Bfree>
 8007b0e:	e61a      	b.n	8007746 <_strtod_l+0x666>
 8007b10:	f1ba 0f00 	cmp.w	sl, #0
 8007b14:	d11b      	bne.n	8007b4e <_strtod_l+0xa6e>
 8007b16:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007b1a:	b9f3      	cbnz	r3, 8007b5a <_strtod_l+0xa7a>
 8007b1c:	4b6c      	ldr	r3, [pc, #432]	; (8007cd0 <_strtod_l+0xbf0>)
 8007b1e:	2200      	movs	r2, #0
 8007b20:	4640      	mov	r0, r8
 8007b22:	4649      	mov	r1, r9
 8007b24:	f7f8 ffda 	bl	8000adc <__aeabi_dcmplt>
 8007b28:	b9d0      	cbnz	r0, 8007b60 <_strtod_l+0xa80>
 8007b2a:	4640      	mov	r0, r8
 8007b2c:	4649      	mov	r1, r9
 8007b2e:	4b6c      	ldr	r3, [pc, #432]	; (8007ce0 <_strtod_l+0xc00>)
 8007b30:	2200      	movs	r2, #0
 8007b32:	f7f8 fd61 	bl	80005f8 <__aeabi_dmul>
 8007b36:	4680      	mov	r8, r0
 8007b38:	4689      	mov	r9, r1
 8007b3a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007b3e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8007b42:	9315      	str	r3, [sp, #84]	; 0x54
 8007b44:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007b48:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007b4c:	e79d      	b.n	8007a8a <_strtod_l+0x9aa>
 8007b4e:	f1ba 0f01 	cmp.w	sl, #1
 8007b52:	d102      	bne.n	8007b5a <_strtod_l+0xa7a>
 8007b54:	2f00      	cmp	r7, #0
 8007b56:	f43f ad83 	beq.w	8007660 <_strtod_l+0x580>
 8007b5a:	4b62      	ldr	r3, [pc, #392]	; (8007ce4 <_strtod_l+0xc04>)
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	e78e      	b.n	8007a7e <_strtod_l+0x99e>
 8007b60:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8007ce0 <_strtod_l+0xc00>
 8007b64:	f04f 0800 	mov.w	r8, #0
 8007b68:	e7e7      	b.n	8007b3a <_strtod_l+0xa5a>
 8007b6a:	4b5d      	ldr	r3, [pc, #372]	; (8007ce0 <_strtod_l+0xc00>)
 8007b6c:	4640      	mov	r0, r8
 8007b6e:	4649      	mov	r1, r9
 8007b70:	2200      	movs	r2, #0
 8007b72:	f7f8 fd41 	bl	80005f8 <__aeabi_dmul>
 8007b76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b78:	4680      	mov	r8, r0
 8007b7a:	4689      	mov	r9, r1
 8007b7c:	b933      	cbnz	r3, 8007b8c <_strtod_l+0xaac>
 8007b7e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007b82:	900e      	str	r0, [sp, #56]	; 0x38
 8007b84:	930f      	str	r3, [sp, #60]	; 0x3c
 8007b86:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007b8a:	e7dd      	b.n	8007b48 <_strtod_l+0xa68>
 8007b8c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8007b90:	e7f9      	b.n	8007b86 <_strtod_l+0xaa6>
 8007b92:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8007b96:	9b04      	ldr	r3, [sp, #16]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d1a8      	bne.n	8007aee <_strtod_l+0xa0e>
 8007b9c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007ba0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007ba2:	0d1b      	lsrs	r3, r3, #20
 8007ba4:	051b      	lsls	r3, r3, #20
 8007ba6:	429a      	cmp	r2, r3
 8007ba8:	d1a1      	bne.n	8007aee <_strtod_l+0xa0e>
 8007baa:	4640      	mov	r0, r8
 8007bac:	4649      	mov	r1, r9
 8007bae:	f7f9 f883 	bl	8000cb8 <__aeabi_d2lz>
 8007bb2:	f7f8 fcf3 	bl	800059c <__aeabi_l2d>
 8007bb6:	4602      	mov	r2, r0
 8007bb8:	460b      	mov	r3, r1
 8007bba:	4640      	mov	r0, r8
 8007bbc:	4649      	mov	r1, r9
 8007bbe:	f7f8 fb63 	bl	8000288 <__aeabi_dsub>
 8007bc2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007bc4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007bc8:	ea43 030a 	orr.w	r3, r3, sl
 8007bcc:	4313      	orrs	r3, r2
 8007bce:	4680      	mov	r8, r0
 8007bd0:	4689      	mov	r9, r1
 8007bd2:	d055      	beq.n	8007c80 <_strtod_l+0xba0>
 8007bd4:	a336      	add	r3, pc, #216	; (adr r3, 8007cb0 <_strtod_l+0xbd0>)
 8007bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bda:	f7f8 ff7f 	bl	8000adc <__aeabi_dcmplt>
 8007bde:	2800      	cmp	r0, #0
 8007be0:	f47f acd0 	bne.w	8007584 <_strtod_l+0x4a4>
 8007be4:	a334      	add	r3, pc, #208	; (adr r3, 8007cb8 <_strtod_l+0xbd8>)
 8007be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bea:	4640      	mov	r0, r8
 8007bec:	4649      	mov	r1, r9
 8007bee:	f7f8 ff93 	bl	8000b18 <__aeabi_dcmpgt>
 8007bf2:	2800      	cmp	r0, #0
 8007bf4:	f43f af7b 	beq.w	8007aee <_strtod_l+0xa0e>
 8007bf8:	e4c4      	b.n	8007584 <_strtod_l+0x4a4>
 8007bfa:	9b04      	ldr	r3, [sp, #16]
 8007bfc:	b333      	cbz	r3, 8007c4c <_strtod_l+0xb6c>
 8007bfe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c00:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007c04:	d822      	bhi.n	8007c4c <_strtod_l+0xb6c>
 8007c06:	a32e      	add	r3, pc, #184	; (adr r3, 8007cc0 <_strtod_l+0xbe0>)
 8007c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c0c:	4640      	mov	r0, r8
 8007c0e:	4649      	mov	r1, r9
 8007c10:	f7f8 ff6e 	bl	8000af0 <__aeabi_dcmple>
 8007c14:	b1a0      	cbz	r0, 8007c40 <_strtod_l+0xb60>
 8007c16:	4649      	mov	r1, r9
 8007c18:	4640      	mov	r0, r8
 8007c1a:	f7f8 ffc5 	bl	8000ba8 <__aeabi_d2uiz>
 8007c1e:	2801      	cmp	r0, #1
 8007c20:	bf38      	it	cc
 8007c22:	2001      	movcc	r0, #1
 8007c24:	f7f8 fc6e 	bl	8000504 <__aeabi_ui2d>
 8007c28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c2a:	4680      	mov	r8, r0
 8007c2c:	4689      	mov	r9, r1
 8007c2e:	bb23      	cbnz	r3, 8007c7a <_strtod_l+0xb9a>
 8007c30:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007c34:	9010      	str	r0, [sp, #64]	; 0x40
 8007c36:	9311      	str	r3, [sp, #68]	; 0x44
 8007c38:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007c3c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007c40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c42:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007c44:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007c48:	1a9b      	subs	r3, r3, r2
 8007c4a:	9309      	str	r3, [sp, #36]	; 0x24
 8007c4c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007c50:	eeb0 0a48 	vmov.f32	s0, s16
 8007c54:	eef0 0a68 	vmov.f32	s1, s17
 8007c58:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007c5c:	f001 fe58 	bl	8009910 <__ulp>
 8007c60:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007c64:	ec53 2b10 	vmov	r2, r3, d0
 8007c68:	f7f8 fcc6 	bl	80005f8 <__aeabi_dmul>
 8007c6c:	ec53 2b18 	vmov	r2, r3, d8
 8007c70:	f7f8 fb0c 	bl	800028c <__adddf3>
 8007c74:	4682      	mov	sl, r0
 8007c76:	468b      	mov	fp, r1
 8007c78:	e78d      	b.n	8007b96 <_strtod_l+0xab6>
 8007c7a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8007c7e:	e7db      	b.n	8007c38 <_strtod_l+0xb58>
 8007c80:	a311      	add	r3, pc, #68	; (adr r3, 8007cc8 <_strtod_l+0xbe8>)
 8007c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c86:	f7f8 ff29 	bl	8000adc <__aeabi_dcmplt>
 8007c8a:	e7b2      	b.n	8007bf2 <_strtod_l+0xb12>
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	930a      	str	r3, [sp, #40]	; 0x28
 8007c90:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007c92:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007c94:	6013      	str	r3, [r2, #0]
 8007c96:	f7ff ba6b 	b.w	8007170 <_strtod_l+0x90>
 8007c9a:	2a65      	cmp	r2, #101	; 0x65
 8007c9c:	f43f ab5f 	beq.w	800735e <_strtod_l+0x27e>
 8007ca0:	2a45      	cmp	r2, #69	; 0x45
 8007ca2:	f43f ab5c 	beq.w	800735e <_strtod_l+0x27e>
 8007ca6:	2301      	movs	r3, #1
 8007ca8:	f7ff bb94 	b.w	80073d4 <_strtod_l+0x2f4>
 8007cac:	f3af 8000 	nop.w
 8007cb0:	94a03595 	.word	0x94a03595
 8007cb4:	3fdfffff 	.word	0x3fdfffff
 8007cb8:	35afe535 	.word	0x35afe535
 8007cbc:	3fe00000 	.word	0x3fe00000
 8007cc0:	ffc00000 	.word	0xffc00000
 8007cc4:	41dfffff 	.word	0x41dfffff
 8007cc8:	94a03595 	.word	0x94a03595
 8007ccc:	3fcfffff 	.word	0x3fcfffff
 8007cd0:	3ff00000 	.word	0x3ff00000
 8007cd4:	7ff00000 	.word	0x7ff00000
 8007cd8:	7fe00000 	.word	0x7fe00000
 8007cdc:	7c9fffff 	.word	0x7c9fffff
 8007ce0:	3fe00000 	.word	0x3fe00000
 8007ce4:	bff00000 	.word	0xbff00000
 8007ce8:	7fefffff 	.word	0x7fefffff

08007cec <_strtod_r>:
 8007cec:	4b01      	ldr	r3, [pc, #4]	; (8007cf4 <_strtod_r+0x8>)
 8007cee:	f7ff b9f7 	b.w	80070e0 <_strtod_l>
 8007cf2:	bf00      	nop
 8007cf4:	20000074 	.word	0x20000074

08007cf8 <_strtol_l.constprop.0>:
 8007cf8:	2b01      	cmp	r3, #1
 8007cfa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cfe:	d001      	beq.n	8007d04 <_strtol_l.constprop.0+0xc>
 8007d00:	2b24      	cmp	r3, #36	; 0x24
 8007d02:	d906      	bls.n	8007d12 <_strtol_l.constprop.0+0x1a>
 8007d04:	f7fe fafe 	bl	8006304 <__errno>
 8007d08:	2316      	movs	r3, #22
 8007d0a:	6003      	str	r3, [r0, #0]
 8007d0c:	2000      	movs	r0, #0
 8007d0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d12:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007df8 <_strtol_l.constprop.0+0x100>
 8007d16:	460d      	mov	r5, r1
 8007d18:	462e      	mov	r6, r5
 8007d1a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007d1e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8007d22:	f017 0708 	ands.w	r7, r7, #8
 8007d26:	d1f7      	bne.n	8007d18 <_strtol_l.constprop.0+0x20>
 8007d28:	2c2d      	cmp	r4, #45	; 0x2d
 8007d2a:	d132      	bne.n	8007d92 <_strtol_l.constprop.0+0x9a>
 8007d2c:	782c      	ldrb	r4, [r5, #0]
 8007d2e:	2701      	movs	r7, #1
 8007d30:	1cb5      	adds	r5, r6, #2
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d05b      	beq.n	8007dee <_strtol_l.constprop.0+0xf6>
 8007d36:	2b10      	cmp	r3, #16
 8007d38:	d109      	bne.n	8007d4e <_strtol_l.constprop.0+0x56>
 8007d3a:	2c30      	cmp	r4, #48	; 0x30
 8007d3c:	d107      	bne.n	8007d4e <_strtol_l.constprop.0+0x56>
 8007d3e:	782c      	ldrb	r4, [r5, #0]
 8007d40:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007d44:	2c58      	cmp	r4, #88	; 0x58
 8007d46:	d14d      	bne.n	8007de4 <_strtol_l.constprop.0+0xec>
 8007d48:	786c      	ldrb	r4, [r5, #1]
 8007d4a:	2310      	movs	r3, #16
 8007d4c:	3502      	adds	r5, #2
 8007d4e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007d52:	f108 38ff 	add.w	r8, r8, #4294967295
 8007d56:	f04f 0c00 	mov.w	ip, #0
 8007d5a:	fbb8 f9f3 	udiv	r9, r8, r3
 8007d5e:	4666      	mov	r6, ip
 8007d60:	fb03 8a19 	mls	sl, r3, r9, r8
 8007d64:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8007d68:	f1be 0f09 	cmp.w	lr, #9
 8007d6c:	d816      	bhi.n	8007d9c <_strtol_l.constprop.0+0xa4>
 8007d6e:	4674      	mov	r4, lr
 8007d70:	42a3      	cmp	r3, r4
 8007d72:	dd24      	ble.n	8007dbe <_strtol_l.constprop.0+0xc6>
 8007d74:	f1bc 0f00 	cmp.w	ip, #0
 8007d78:	db1e      	blt.n	8007db8 <_strtol_l.constprop.0+0xc0>
 8007d7a:	45b1      	cmp	r9, r6
 8007d7c:	d31c      	bcc.n	8007db8 <_strtol_l.constprop.0+0xc0>
 8007d7e:	d101      	bne.n	8007d84 <_strtol_l.constprop.0+0x8c>
 8007d80:	45a2      	cmp	sl, r4
 8007d82:	db19      	blt.n	8007db8 <_strtol_l.constprop.0+0xc0>
 8007d84:	fb06 4603 	mla	r6, r6, r3, r4
 8007d88:	f04f 0c01 	mov.w	ip, #1
 8007d8c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007d90:	e7e8      	b.n	8007d64 <_strtol_l.constprop.0+0x6c>
 8007d92:	2c2b      	cmp	r4, #43	; 0x2b
 8007d94:	bf04      	itt	eq
 8007d96:	782c      	ldrbeq	r4, [r5, #0]
 8007d98:	1cb5      	addeq	r5, r6, #2
 8007d9a:	e7ca      	b.n	8007d32 <_strtol_l.constprop.0+0x3a>
 8007d9c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8007da0:	f1be 0f19 	cmp.w	lr, #25
 8007da4:	d801      	bhi.n	8007daa <_strtol_l.constprop.0+0xb2>
 8007da6:	3c37      	subs	r4, #55	; 0x37
 8007da8:	e7e2      	b.n	8007d70 <_strtol_l.constprop.0+0x78>
 8007daa:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8007dae:	f1be 0f19 	cmp.w	lr, #25
 8007db2:	d804      	bhi.n	8007dbe <_strtol_l.constprop.0+0xc6>
 8007db4:	3c57      	subs	r4, #87	; 0x57
 8007db6:	e7db      	b.n	8007d70 <_strtol_l.constprop.0+0x78>
 8007db8:	f04f 3cff 	mov.w	ip, #4294967295
 8007dbc:	e7e6      	b.n	8007d8c <_strtol_l.constprop.0+0x94>
 8007dbe:	f1bc 0f00 	cmp.w	ip, #0
 8007dc2:	da05      	bge.n	8007dd0 <_strtol_l.constprop.0+0xd8>
 8007dc4:	2322      	movs	r3, #34	; 0x22
 8007dc6:	6003      	str	r3, [r0, #0]
 8007dc8:	4646      	mov	r6, r8
 8007dca:	b942      	cbnz	r2, 8007dde <_strtol_l.constprop.0+0xe6>
 8007dcc:	4630      	mov	r0, r6
 8007dce:	e79e      	b.n	8007d0e <_strtol_l.constprop.0+0x16>
 8007dd0:	b107      	cbz	r7, 8007dd4 <_strtol_l.constprop.0+0xdc>
 8007dd2:	4276      	negs	r6, r6
 8007dd4:	2a00      	cmp	r2, #0
 8007dd6:	d0f9      	beq.n	8007dcc <_strtol_l.constprop.0+0xd4>
 8007dd8:	f1bc 0f00 	cmp.w	ip, #0
 8007ddc:	d000      	beq.n	8007de0 <_strtol_l.constprop.0+0xe8>
 8007dde:	1e69      	subs	r1, r5, #1
 8007de0:	6011      	str	r1, [r2, #0]
 8007de2:	e7f3      	b.n	8007dcc <_strtol_l.constprop.0+0xd4>
 8007de4:	2430      	movs	r4, #48	; 0x30
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d1b1      	bne.n	8007d4e <_strtol_l.constprop.0+0x56>
 8007dea:	2308      	movs	r3, #8
 8007dec:	e7af      	b.n	8007d4e <_strtol_l.constprop.0+0x56>
 8007dee:	2c30      	cmp	r4, #48	; 0x30
 8007df0:	d0a5      	beq.n	8007d3e <_strtol_l.constprop.0+0x46>
 8007df2:	230a      	movs	r3, #10
 8007df4:	e7ab      	b.n	8007d4e <_strtol_l.constprop.0+0x56>
 8007df6:	bf00      	nop
 8007df8:	0800b4d1 	.word	0x0800b4d1

08007dfc <_strtol_r>:
 8007dfc:	f7ff bf7c 	b.w	8007cf8 <_strtol_l.constprop.0>

08007e00 <quorem>:
 8007e00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e04:	6903      	ldr	r3, [r0, #16]
 8007e06:	690c      	ldr	r4, [r1, #16]
 8007e08:	42a3      	cmp	r3, r4
 8007e0a:	4607      	mov	r7, r0
 8007e0c:	f2c0 8081 	blt.w	8007f12 <quorem+0x112>
 8007e10:	3c01      	subs	r4, #1
 8007e12:	f101 0814 	add.w	r8, r1, #20
 8007e16:	f100 0514 	add.w	r5, r0, #20
 8007e1a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007e1e:	9301      	str	r3, [sp, #4]
 8007e20:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007e24:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007e28:	3301      	adds	r3, #1
 8007e2a:	429a      	cmp	r2, r3
 8007e2c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007e30:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007e34:	fbb2 f6f3 	udiv	r6, r2, r3
 8007e38:	d331      	bcc.n	8007e9e <quorem+0x9e>
 8007e3a:	f04f 0e00 	mov.w	lr, #0
 8007e3e:	4640      	mov	r0, r8
 8007e40:	46ac      	mov	ip, r5
 8007e42:	46f2      	mov	sl, lr
 8007e44:	f850 2b04 	ldr.w	r2, [r0], #4
 8007e48:	b293      	uxth	r3, r2
 8007e4a:	fb06 e303 	mla	r3, r6, r3, lr
 8007e4e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007e52:	b29b      	uxth	r3, r3
 8007e54:	ebaa 0303 	sub.w	r3, sl, r3
 8007e58:	f8dc a000 	ldr.w	sl, [ip]
 8007e5c:	0c12      	lsrs	r2, r2, #16
 8007e5e:	fa13 f38a 	uxtah	r3, r3, sl
 8007e62:	fb06 e202 	mla	r2, r6, r2, lr
 8007e66:	9300      	str	r3, [sp, #0]
 8007e68:	9b00      	ldr	r3, [sp, #0]
 8007e6a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007e6e:	b292      	uxth	r2, r2
 8007e70:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007e74:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007e78:	f8bd 3000 	ldrh.w	r3, [sp]
 8007e7c:	4581      	cmp	r9, r0
 8007e7e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007e82:	f84c 3b04 	str.w	r3, [ip], #4
 8007e86:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007e8a:	d2db      	bcs.n	8007e44 <quorem+0x44>
 8007e8c:	f855 300b 	ldr.w	r3, [r5, fp]
 8007e90:	b92b      	cbnz	r3, 8007e9e <quorem+0x9e>
 8007e92:	9b01      	ldr	r3, [sp, #4]
 8007e94:	3b04      	subs	r3, #4
 8007e96:	429d      	cmp	r5, r3
 8007e98:	461a      	mov	r2, r3
 8007e9a:	d32e      	bcc.n	8007efa <quorem+0xfa>
 8007e9c:	613c      	str	r4, [r7, #16]
 8007e9e:	4638      	mov	r0, r7
 8007ea0:	f001 fc90 	bl	80097c4 <__mcmp>
 8007ea4:	2800      	cmp	r0, #0
 8007ea6:	db24      	blt.n	8007ef2 <quorem+0xf2>
 8007ea8:	3601      	adds	r6, #1
 8007eaa:	4628      	mov	r0, r5
 8007eac:	f04f 0c00 	mov.w	ip, #0
 8007eb0:	f858 2b04 	ldr.w	r2, [r8], #4
 8007eb4:	f8d0 e000 	ldr.w	lr, [r0]
 8007eb8:	b293      	uxth	r3, r2
 8007eba:	ebac 0303 	sub.w	r3, ip, r3
 8007ebe:	0c12      	lsrs	r2, r2, #16
 8007ec0:	fa13 f38e 	uxtah	r3, r3, lr
 8007ec4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007ec8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007ecc:	b29b      	uxth	r3, r3
 8007ece:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007ed2:	45c1      	cmp	r9, r8
 8007ed4:	f840 3b04 	str.w	r3, [r0], #4
 8007ed8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007edc:	d2e8      	bcs.n	8007eb0 <quorem+0xb0>
 8007ede:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007ee2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007ee6:	b922      	cbnz	r2, 8007ef2 <quorem+0xf2>
 8007ee8:	3b04      	subs	r3, #4
 8007eea:	429d      	cmp	r5, r3
 8007eec:	461a      	mov	r2, r3
 8007eee:	d30a      	bcc.n	8007f06 <quorem+0x106>
 8007ef0:	613c      	str	r4, [r7, #16]
 8007ef2:	4630      	mov	r0, r6
 8007ef4:	b003      	add	sp, #12
 8007ef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007efa:	6812      	ldr	r2, [r2, #0]
 8007efc:	3b04      	subs	r3, #4
 8007efe:	2a00      	cmp	r2, #0
 8007f00:	d1cc      	bne.n	8007e9c <quorem+0x9c>
 8007f02:	3c01      	subs	r4, #1
 8007f04:	e7c7      	b.n	8007e96 <quorem+0x96>
 8007f06:	6812      	ldr	r2, [r2, #0]
 8007f08:	3b04      	subs	r3, #4
 8007f0a:	2a00      	cmp	r2, #0
 8007f0c:	d1f0      	bne.n	8007ef0 <quorem+0xf0>
 8007f0e:	3c01      	subs	r4, #1
 8007f10:	e7eb      	b.n	8007eea <quorem+0xea>
 8007f12:	2000      	movs	r0, #0
 8007f14:	e7ee      	b.n	8007ef4 <quorem+0xf4>
	...

08007f18 <_dtoa_r>:
 8007f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f1c:	ed2d 8b04 	vpush	{d8-d9}
 8007f20:	ec57 6b10 	vmov	r6, r7, d0
 8007f24:	b093      	sub	sp, #76	; 0x4c
 8007f26:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007f28:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007f2c:	9106      	str	r1, [sp, #24]
 8007f2e:	ee10 aa10 	vmov	sl, s0
 8007f32:	4604      	mov	r4, r0
 8007f34:	9209      	str	r2, [sp, #36]	; 0x24
 8007f36:	930c      	str	r3, [sp, #48]	; 0x30
 8007f38:	46bb      	mov	fp, r7
 8007f3a:	b975      	cbnz	r5, 8007f5a <_dtoa_r+0x42>
 8007f3c:	2010      	movs	r0, #16
 8007f3e:	f001 f94d 	bl	80091dc <malloc>
 8007f42:	4602      	mov	r2, r0
 8007f44:	6260      	str	r0, [r4, #36]	; 0x24
 8007f46:	b920      	cbnz	r0, 8007f52 <_dtoa_r+0x3a>
 8007f48:	4ba7      	ldr	r3, [pc, #668]	; (80081e8 <_dtoa_r+0x2d0>)
 8007f4a:	21ea      	movs	r1, #234	; 0xea
 8007f4c:	48a7      	ldr	r0, [pc, #668]	; (80081ec <_dtoa_r+0x2d4>)
 8007f4e:	f002 f8bd 	bl	800a0cc <__assert_func>
 8007f52:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007f56:	6005      	str	r5, [r0, #0]
 8007f58:	60c5      	str	r5, [r0, #12]
 8007f5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f5c:	6819      	ldr	r1, [r3, #0]
 8007f5e:	b151      	cbz	r1, 8007f76 <_dtoa_r+0x5e>
 8007f60:	685a      	ldr	r2, [r3, #4]
 8007f62:	604a      	str	r2, [r1, #4]
 8007f64:	2301      	movs	r3, #1
 8007f66:	4093      	lsls	r3, r2
 8007f68:	608b      	str	r3, [r1, #8]
 8007f6a:	4620      	mov	r0, r4
 8007f6c:	f001 f99e 	bl	80092ac <_Bfree>
 8007f70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f72:	2200      	movs	r2, #0
 8007f74:	601a      	str	r2, [r3, #0]
 8007f76:	1e3b      	subs	r3, r7, #0
 8007f78:	bfaa      	itet	ge
 8007f7a:	2300      	movge	r3, #0
 8007f7c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007f80:	f8c8 3000 	strge.w	r3, [r8]
 8007f84:	4b9a      	ldr	r3, [pc, #616]	; (80081f0 <_dtoa_r+0x2d8>)
 8007f86:	bfbc      	itt	lt
 8007f88:	2201      	movlt	r2, #1
 8007f8a:	f8c8 2000 	strlt.w	r2, [r8]
 8007f8e:	ea33 030b 	bics.w	r3, r3, fp
 8007f92:	d11b      	bne.n	8007fcc <_dtoa_r+0xb4>
 8007f94:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007f96:	f242 730f 	movw	r3, #9999	; 0x270f
 8007f9a:	6013      	str	r3, [r2, #0]
 8007f9c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007fa0:	4333      	orrs	r3, r6
 8007fa2:	f000 8592 	beq.w	8008aca <_dtoa_r+0xbb2>
 8007fa6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007fa8:	b963      	cbnz	r3, 8007fc4 <_dtoa_r+0xac>
 8007faa:	4b92      	ldr	r3, [pc, #584]	; (80081f4 <_dtoa_r+0x2dc>)
 8007fac:	e022      	b.n	8007ff4 <_dtoa_r+0xdc>
 8007fae:	4b92      	ldr	r3, [pc, #584]	; (80081f8 <_dtoa_r+0x2e0>)
 8007fb0:	9301      	str	r3, [sp, #4]
 8007fb2:	3308      	adds	r3, #8
 8007fb4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007fb6:	6013      	str	r3, [r2, #0]
 8007fb8:	9801      	ldr	r0, [sp, #4]
 8007fba:	b013      	add	sp, #76	; 0x4c
 8007fbc:	ecbd 8b04 	vpop	{d8-d9}
 8007fc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fc4:	4b8b      	ldr	r3, [pc, #556]	; (80081f4 <_dtoa_r+0x2dc>)
 8007fc6:	9301      	str	r3, [sp, #4]
 8007fc8:	3303      	adds	r3, #3
 8007fca:	e7f3      	b.n	8007fb4 <_dtoa_r+0x9c>
 8007fcc:	2200      	movs	r2, #0
 8007fce:	2300      	movs	r3, #0
 8007fd0:	4650      	mov	r0, sl
 8007fd2:	4659      	mov	r1, fp
 8007fd4:	f7f8 fd78 	bl	8000ac8 <__aeabi_dcmpeq>
 8007fd8:	ec4b ab19 	vmov	d9, sl, fp
 8007fdc:	4680      	mov	r8, r0
 8007fde:	b158      	cbz	r0, 8007ff8 <_dtoa_r+0xe0>
 8007fe0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	6013      	str	r3, [r2, #0]
 8007fe6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	f000 856b 	beq.w	8008ac4 <_dtoa_r+0xbac>
 8007fee:	4883      	ldr	r0, [pc, #524]	; (80081fc <_dtoa_r+0x2e4>)
 8007ff0:	6018      	str	r0, [r3, #0]
 8007ff2:	1e43      	subs	r3, r0, #1
 8007ff4:	9301      	str	r3, [sp, #4]
 8007ff6:	e7df      	b.n	8007fb8 <_dtoa_r+0xa0>
 8007ff8:	ec4b ab10 	vmov	d0, sl, fp
 8007ffc:	aa10      	add	r2, sp, #64	; 0x40
 8007ffe:	a911      	add	r1, sp, #68	; 0x44
 8008000:	4620      	mov	r0, r4
 8008002:	f001 fd01 	bl	8009a08 <__d2b>
 8008006:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800800a:	ee08 0a10 	vmov	s16, r0
 800800e:	2d00      	cmp	r5, #0
 8008010:	f000 8084 	beq.w	800811c <_dtoa_r+0x204>
 8008014:	ee19 3a90 	vmov	r3, s19
 8008018:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800801c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008020:	4656      	mov	r6, sl
 8008022:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008026:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800802a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800802e:	4b74      	ldr	r3, [pc, #464]	; (8008200 <_dtoa_r+0x2e8>)
 8008030:	2200      	movs	r2, #0
 8008032:	4630      	mov	r0, r6
 8008034:	4639      	mov	r1, r7
 8008036:	f7f8 f927 	bl	8000288 <__aeabi_dsub>
 800803a:	a365      	add	r3, pc, #404	; (adr r3, 80081d0 <_dtoa_r+0x2b8>)
 800803c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008040:	f7f8 fada 	bl	80005f8 <__aeabi_dmul>
 8008044:	a364      	add	r3, pc, #400	; (adr r3, 80081d8 <_dtoa_r+0x2c0>)
 8008046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800804a:	f7f8 f91f 	bl	800028c <__adddf3>
 800804e:	4606      	mov	r6, r0
 8008050:	4628      	mov	r0, r5
 8008052:	460f      	mov	r7, r1
 8008054:	f7f8 fa66 	bl	8000524 <__aeabi_i2d>
 8008058:	a361      	add	r3, pc, #388	; (adr r3, 80081e0 <_dtoa_r+0x2c8>)
 800805a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800805e:	f7f8 facb 	bl	80005f8 <__aeabi_dmul>
 8008062:	4602      	mov	r2, r0
 8008064:	460b      	mov	r3, r1
 8008066:	4630      	mov	r0, r6
 8008068:	4639      	mov	r1, r7
 800806a:	f7f8 f90f 	bl	800028c <__adddf3>
 800806e:	4606      	mov	r6, r0
 8008070:	460f      	mov	r7, r1
 8008072:	f7f8 fd71 	bl	8000b58 <__aeabi_d2iz>
 8008076:	2200      	movs	r2, #0
 8008078:	9000      	str	r0, [sp, #0]
 800807a:	2300      	movs	r3, #0
 800807c:	4630      	mov	r0, r6
 800807e:	4639      	mov	r1, r7
 8008080:	f7f8 fd2c 	bl	8000adc <__aeabi_dcmplt>
 8008084:	b150      	cbz	r0, 800809c <_dtoa_r+0x184>
 8008086:	9800      	ldr	r0, [sp, #0]
 8008088:	f7f8 fa4c 	bl	8000524 <__aeabi_i2d>
 800808c:	4632      	mov	r2, r6
 800808e:	463b      	mov	r3, r7
 8008090:	f7f8 fd1a 	bl	8000ac8 <__aeabi_dcmpeq>
 8008094:	b910      	cbnz	r0, 800809c <_dtoa_r+0x184>
 8008096:	9b00      	ldr	r3, [sp, #0]
 8008098:	3b01      	subs	r3, #1
 800809a:	9300      	str	r3, [sp, #0]
 800809c:	9b00      	ldr	r3, [sp, #0]
 800809e:	2b16      	cmp	r3, #22
 80080a0:	d85a      	bhi.n	8008158 <_dtoa_r+0x240>
 80080a2:	9a00      	ldr	r2, [sp, #0]
 80080a4:	4b57      	ldr	r3, [pc, #348]	; (8008204 <_dtoa_r+0x2ec>)
 80080a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80080aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ae:	ec51 0b19 	vmov	r0, r1, d9
 80080b2:	f7f8 fd13 	bl	8000adc <__aeabi_dcmplt>
 80080b6:	2800      	cmp	r0, #0
 80080b8:	d050      	beq.n	800815c <_dtoa_r+0x244>
 80080ba:	9b00      	ldr	r3, [sp, #0]
 80080bc:	3b01      	subs	r3, #1
 80080be:	9300      	str	r3, [sp, #0]
 80080c0:	2300      	movs	r3, #0
 80080c2:	930b      	str	r3, [sp, #44]	; 0x2c
 80080c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80080c6:	1b5d      	subs	r5, r3, r5
 80080c8:	1e6b      	subs	r3, r5, #1
 80080ca:	9305      	str	r3, [sp, #20]
 80080cc:	bf45      	ittet	mi
 80080ce:	f1c5 0301 	rsbmi	r3, r5, #1
 80080d2:	9304      	strmi	r3, [sp, #16]
 80080d4:	2300      	movpl	r3, #0
 80080d6:	2300      	movmi	r3, #0
 80080d8:	bf4c      	ite	mi
 80080da:	9305      	strmi	r3, [sp, #20]
 80080dc:	9304      	strpl	r3, [sp, #16]
 80080de:	9b00      	ldr	r3, [sp, #0]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	db3d      	blt.n	8008160 <_dtoa_r+0x248>
 80080e4:	9b05      	ldr	r3, [sp, #20]
 80080e6:	9a00      	ldr	r2, [sp, #0]
 80080e8:	920a      	str	r2, [sp, #40]	; 0x28
 80080ea:	4413      	add	r3, r2
 80080ec:	9305      	str	r3, [sp, #20]
 80080ee:	2300      	movs	r3, #0
 80080f0:	9307      	str	r3, [sp, #28]
 80080f2:	9b06      	ldr	r3, [sp, #24]
 80080f4:	2b09      	cmp	r3, #9
 80080f6:	f200 8089 	bhi.w	800820c <_dtoa_r+0x2f4>
 80080fa:	2b05      	cmp	r3, #5
 80080fc:	bfc4      	itt	gt
 80080fe:	3b04      	subgt	r3, #4
 8008100:	9306      	strgt	r3, [sp, #24]
 8008102:	9b06      	ldr	r3, [sp, #24]
 8008104:	f1a3 0302 	sub.w	r3, r3, #2
 8008108:	bfcc      	ite	gt
 800810a:	2500      	movgt	r5, #0
 800810c:	2501      	movle	r5, #1
 800810e:	2b03      	cmp	r3, #3
 8008110:	f200 8087 	bhi.w	8008222 <_dtoa_r+0x30a>
 8008114:	e8df f003 	tbb	[pc, r3]
 8008118:	59383a2d 	.word	0x59383a2d
 800811c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008120:	441d      	add	r5, r3
 8008122:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008126:	2b20      	cmp	r3, #32
 8008128:	bfc1      	itttt	gt
 800812a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800812e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008132:	fa0b f303 	lslgt.w	r3, fp, r3
 8008136:	fa26 f000 	lsrgt.w	r0, r6, r0
 800813a:	bfda      	itte	le
 800813c:	f1c3 0320 	rsble	r3, r3, #32
 8008140:	fa06 f003 	lslle.w	r0, r6, r3
 8008144:	4318      	orrgt	r0, r3
 8008146:	f7f8 f9dd 	bl	8000504 <__aeabi_ui2d>
 800814a:	2301      	movs	r3, #1
 800814c:	4606      	mov	r6, r0
 800814e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008152:	3d01      	subs	r5, #1
 8008154:	930e      	str	r3, [sp, #56]	; 0x38
 8008156:	e76a      	b.n	800802e <_dtoa_r+0x116>
 8008158:	2301      	movs	r3, #1
 800815a:	e7b2      	b.n	80080c2 <_dtoa_r+0x1aa>
 800815c:	900b      	str	r0, [sp, #44]	; 0x2c
 800815e:	e7b1      	b.n	80080c4 <_dtoa_r+0x1ac>
 8008160:	9b04      	ldr	r3, [sp, #16]
 8008162:	9a00      	ldr	r2, [sp, #0]
 8008164:	1a9b      	subs	r3, r3, r2
 8008166:	9304      	str	r3, [sp, #16]
 8008168:	4253      	negs	r3, r2
 800816a:	9307      	str	r3, [sp, #28]
 800816c:	2300      	movs	r3, #0
 800816e:	930a      	str	r3, [sp, #40]	; 0x28
 8008170:	e7bf      	b.n	80080f2 <_dtoa_r+0x1da>
 8008172:	2300      	movs	r3, #0
 8008174:	9308      	str	r3, [sp, #32]
 8008176:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008178:	2b00      	cmp	r3, #0
 800817a:	dc55      	bgt.n	8008228 <_dtoa_r+0x310>
 800817c:	2301      	movs	r3, #1
 800817e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008182:	461a      	mov	r2, r3
 8008184:	9209      	str	r2, [sp, #36]	; 0x24
 8008186:	e00c      	b.n	80081a2 <_dtoa_r+0x28a>
 8008188:	2301      	movs	r3, #1
 800818a:	e7f3      	b.n	8008174 <_dtoa_r+0x25c>
 800818c:	2300      	movs	r3, #0
 800818e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008190:	9308      	str	r3, [sp, #32]
 8008192:	9b00      	ldr	r3, [sp, #0]
 8008194:	4413      	add	r3, r2
 8008196:	9302      	str	r3, [sp, #8]
 8008198:	3301      	adds	r3, #1
 800819a:	2b01      	cmp	r3, #1
 800819c:	9303      	str	r3, [sp, #12]
 800819e:	bfb8      	it	lt
 80081a0:	2301      	movlt	r3, #1
 80081a2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80081a4:	2200      	movs	r2, #0
 80081a6:	6042      	str	r2, [r0, #4]
 80081a8:	2204      	movs	r2, #4
 80081aa:	f102 0614 	add.w	r6, r2, #20
 80081ae:	429e      	cmp	r6, r3
 80081b0:	6841      	ldr	r1, [r0, #4]
 80081b2:	d93d      	bls.n	8008230 <_dtoa_r+0x318>
 80081b4:	4620      	mov	r0, r4
 80081b6:	f001 f839 	bl	800922c <_Balloc>
 80081ba:	9001      	str	r0, [sp, #4]
 80081bc:	2800      	cmp	r0, #0
 80081be:	d13b      	bne.n	8008238 <_dtoa_r+0x320>
 80081c0:	4b11      	ldr	r3, [pc, #68]	; (8008208 <_dtoa_r+0x2f0>)
 80081c2:	4602      	mov	r2, r0
 80081c4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80081c8:	e6c0      	b.n	8007f4c <_dtoa_r+0x34>
 80081ca:	2301      	movs	r3, #1
 80081cc:	e7df      	b.n	800818e <_dtoa_r+0x276>
 80081ce:	bf00      	nop
 80081d0:	636f4361 	.word	0x636f4361
 80081d4:	3fd287a7 	.word	0x3fd287a7
 80081d8:	8b60c8b3 	.word	0x8b60c8b3
 80081dc:	3fc68a28 	.word	0x3fc68a28
 80081e0:	509f79fb 	.word	0x509f79fb
 80081e4:	3fd34413 	.word	0x3fd34413
 80081e8:	0800b5de 	.word	0x0800b5de
 80081ec:	0800b5f5 	.word	0x0800b5f5
 80081f0:	7ff00000 	.word	0x7ff00000
 80081f4:	0800b5da 	.word	0x0800b5da
 80081f8:	0800b5d1 	.word	0x0800b5d1
 80081fc:	0800b455 	.word	0x0800b455
 8008200:	3ff80000 	.word	0x3ff80000
 8008204:	0800b760 	.word	0x0800b760
 8008208:	0800b650 	.word	0x0800b650
 800820c:	2501      	movs	r5, #1
 800820e:	2300      	movs	r3, #0
 8008210:	9306      	str	r3, [sp, #24]
 8008212:	9508      	str	r5, [sp, #32]
 8008214:	f04f 33ff 	mov.w	r3, #4294967295
 8008218:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800821c:	2200      	movs	r2, #0
 800821e:	2312      	movs	r3, #18
 8008220:	e7b0      	b.n	8008184 <_dtoa_r+0x26c>
 8008222:	2301      	movs	r3, #1
 8008224:	9308      	str	r3, [sp, #32]
 8008226:	e7f5      	b.n	8008214 <_dtoa_r+0x2fc>
 8008228:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800822a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800822e:	e7b8      	b.n	80081a2 <_dtoa_r+0x28a>
 8008230:	3101      	adds	r1, #1
 8008232:	6041      	str	r1, [r0, #4]
 8008234:	0052      	lsls	r2, r2, #1
 8008236:	e7b8      	b.n	80081aa <_dtoa_r+0x292>
 8008238:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800823a:	9a01      	ldr	r2, [sp, #4]
 800823c:	601a      	str	r2, [r3, #0]
 800823e:	9b03      	ldr	r3, [sp, #12]
 8008240:	2b0e      	cmp	r3, #14
 8008242:	f200 809d 	bhi.w	8008380 <_dtoa_r+0x468>
 8008246:	2d00      	cmp	r5, #0
 8008248:	f000 809a 	beq.w	8008380 <_dtoa_r+0x468>
 800824c:	9b00      	ldr	r3, [sp, #0]
 800824e:	2b00      	cmp	r3, #0
 8008250:	dd32      	ble.n	80082b8 <_dtoa_r+0x3a0>
 8008252:	4ab7      	ldr	r2, [pc, #732]	; (8008530 <_dtoa_r+0x618>)
 8008254:	f003 030f 	and.w	r3, r3, #15
 8008258:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800825c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008260:	9b00      	ldr	r3, [sp, #0]
 8008262:	05d8      	lsls	r0, r3, #23
 8008264:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008268:	d516      	bpl.n	8008298 <_dtoa_r+0x380>
 800826a:	4bb2      	ldr	r3, [pc, #712]	; (8008534 <_dtoa_r+0x61c>)
 800826c:	ec51 0b19 	vmov	r0, r1, d9
 8008270:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008274:	f7f8 faea 	bl	800084c <__aeabi_ddiv>
 8008278:	f007 070f 	and.w	r7, r7, #15
 800827c:	4682      	mov	sl, r0
 800827e:	468b      	mov	fp, r1
 8008280:	2503      	movs	r5, #3
 8008282:	4eac      	ldr	r6, [pc, #688]	; (8008534 <_dtoa_r+0x61c>)
 8008284:	b957      	cbnz	r7, 800829c <_dtoa_r+0x384>
 8008286:	4642      	mov	r2, r8
 8008288:	464b      	mov	r3, r9
 800828a:	4650      	mov	r0, sl
 800828c:	4659      	mov	r1, fp
 800828e:	f7f8 fadd 	bl	800084c <__aeabi_ddiv>
 8008292:	4682      	mov	sl, r0
 8008294:	468b      	mov	fp, r1
 8008296:	e028      	b.n	80082ea <_dtoa_r+0x3d2>
 8008298:	2502      	movs	r5, #2
 800829a:	e7f2      	b.n	8008282 <_dtoa_r+0x36a>
 800829c:	07f9      	lsls	r1, r7, #31
 800829e:	d508      	bpl.n	80082b2 <_dtoa_r+0x39a>
 80082a0:	4640      	mov	r0, r8
 80082a2:	4649      	mov	r1, r9
 80082a4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80082a8:	f7f8 f9a6 	bl	80005f8 <__aeabi_dmul>
 80082ac:	3501      	adds	r5, #1
 80082ae:	4680      	mov	r8, r0
 80082b0:	4689      	mov	r9, r1
 80082b2:	107f      	asrs	r7, r7, #1
 80082b4:	3608      	adds	r6, #8
 80082b6:	e7e5      	b.n	8008284 <_dtoa_r+0x36c>
 80082b8:	f000 809b 	beq.w	80083f2 <_dtoa_r+0x4da>
 80082bc:	9b00      	ldr	r3, [sp, #0]
 80082be:	4f9d      	ldr	r7, [pc, #628]	; (8008534 <_dtoa_r+0x61c>)
 80082c0:	425e      	negs	r6, r3
 80082c2:	4b9b      	ldr	r3, [pc, #620]	; (8008530 <_dtoa_r+0x618>)
 80082c4:	f006 020f 	and.w	r2, r6, #15
 80082c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80082cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082d0:	ec51 0b19 	vmov	r0, r1, d9
 80082d4:	f7f8 f990 	bl	80005f8 <__aeabi_dmul>
 80082d8:	1136      	asrs	r6, r6, #4
 80082da:	4682      	mov	sl, r0
 80082dc:	468b      	mov	fp, r1
 80082de:	2300      	movs	r3, #0
 80082e0:	2502      	movs	r5, #2
 80082e2:	2e00      	cmp	r6, #0
 80082e4:	d17a      	bne.n	80083dc <_dtoa_r+0x4c4>
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d1d3      	bne.n	8008292 <_dtoa_r+0x37a>
 80082ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	f000 8082 	beq.w	80083f6 <_dtoa_r+0x4de>
 80082f2:	4b91      	ldr	r3, [pc, #580]	; (8008538 <_dtoa_r+0x620>)
 80082f4:	2200      	movs	r2, #0
 80082f6:	4650      	mov	r0, sl
 80082f8:	4659      	mov	r1, fp
 80082fa:	f7f8 fbef 	bl	8000adc <__aeabi_dcmplt>
 80082fe:	2800      	cmp	r0, #0
 8008300:	d079      	beq.n	80083f6 <_dtoa_r+0x4de>
 8008302:	9b03      	ldr	r3, [sp, #12]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d076      	beq.n	80083f6 <_dtoa_r+0x4de>
 8008308:	9b02      	ldr	r3, [sp, #8]
 800830a:	2b00      	cmp	r3, #0
 800830c:	dd36      	ble.n	800837c <_dtoa_r+0x464>
 800830e:	9b00      	ldr	r3, [sp, #0]
 8008310:	4650      	mov	r0, sl
 8008312:	4659      	mov	r1, fp
 8008314:	1e5f      	subs	r7, r3, #1
 8008316:	2200      	movs	r2, #0
 8008318:	4b88      	ldr	r3, [pc, #544]	; (800853c <_dtoa_r+0x624>)
 800831a:	f7f8 f96d 	bl	80005f8 <__aeabi_dmul>
 800831e:	9e02      	ldr	r6, [sp, #8]
 8008320:	4682      	mov	sl, r0
 8008322:	468b      	mov	fp, r1
 8008324:	3501      	adds	r5, #1
 8008326:	4628      	mov	r0, r5
 8008328:	f7f8 f8fc 	bl	8000524 <__aeabi_i2d>
 800832c:	4652      	mov	r2, sl
 800832e:	465b      	mov	r3, fp
 8008330:	f7f8 f962 	bl	80005f8 <__aeabi_dmul>
 8008334:	4b82      	ldr	r3, [pc, #520]	; (8008540 <_dtoa_r+0x628>)
 8008336:	2200      	movs	r2, #0
 8008338:	f7f7 ffa8 	bl	800028c <__adddf3>
 800833c:	46d0      	mov	r8, sl
 800833e:	46d9      	mov	r9, fp
 8008340:	4682      	mov	sl, r0
 8008342:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008346:	2e00      	cmp	r6, #0
 8008348:	d158      	bne.n	80083fc <_dtoa_r+0x4e4>
 800834a:	4b7e      	ldr	r3, [pc, #504]	; (8008544 <_dtoa_r+0x62c>)
 800834c:	2200      	movs	r2, #0
 800834e:	4640      	mov	r0, r8
 8008350:	4649      	mov	r1, r9
 8008352:	f7f7 ff99 	bl	8000288 <__aeabi_dsub>
 8008356:	4652      	mov	r2, sl
 8008358:	465b      	mov	r3, fp
 800835a:	4680      	mov	r8, r0
 800835c:	4689      	mov	r9, r1
 800835e:	f7f8 fbdb 	bl	8000b18 <__aeabi_dcmpgt>
 8008362:	2800      	cmp	r0, #0
 8008364:	f040 8295 	bne.w	8008892 <_dtoa_r+0x97a>
 8008368:	4652      	mov	r2, sl
 800836a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800836e:	4640      	mov	r0, r8
 8008370:	4649      	mov	r1, r9
 8008372:	f7f8 fbb3 	bl	8000adc <__aeabi_dcmplt>
 8008376:	2800      	cmp	r0, #0
 8008378:	f040 8289 	bne.w	800888e <_dtoa_r+0x976>
 800837c:	ec5b ab19 	vmov	sl, fp, d9
 8008380:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008382:	2b00      	cmp	r3, #0
 8008384:	f2c0 8148 	blt.w	8008618 <_dtoa_r+0x700>
 8008388:	9a00      	ldr	r2, [sp, #0]
 800838a:	2a0e      	cmp	r2, #14
 800838c:	f300 8144 	bgt.w	8008618 <_dtoa_r+0x700>
 8008390:	4b67      	ldr	r3, [pc, #412]	; (8008530 <_dtoa_r+0x618>)
 8008392:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008396:	e9d3 8900 	ldrd	r8, r9, [r3]
 800839a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800839c:	2b00      	cmp	r3, #0
 800839e:	f280 80d5 	bge.w	800854c <_dtoa_r+0x634>
 80083a2:	9b03      	ldr	r3, [sp, #12]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	f300 80d1 	bgt.w	800854c <_dtoa_r+0x634>
 80083aa:	f040 826f 	bne.w	800888c <_dtoa_r+0x974>
 80083ae:	4b65      	ldr	r3, [pc, #404]	; (8008544 <_dtoa_r+0x62c>)
 80083b0:	2200      	movs	r2, #0
 80083b2:	4640      	mov	r0, r8
 80083b4:	4649      	mov	r1, r9
 80083b6:	f7f8 f91f 	bl	80005f8 <__aeabi_dmul>
 80083ba:	4652      	mov	r2, sl
 80083bc:	465b      	mov	r3, fp
 80083be:	f7f8 fba1 	bl	8000b04 <__aeabi_dcmpge>
 80083c2:	9e03      	ldr	r6, [sp, #12]
 80083c4:	4637      	mov	r7, r6
 80083c6:	2800      	cmp	r0, #0
 80083c8:	f040 8245 	bne.w	8008856 <_dtoa_r+0x93e>
 80083cc:	9d01      	ldr	r5, [sp, #4]
 80083ce:	2331      	movs	r3, #49	; 0x31
 80083d0:	f805 3b01 	strb.w	r3, [r5], #1
 80083d4:	9b00      	ldr	r3, [sp, #0]
 80083d6:	3301      	adds	r3, #1
 80083d8:	9300      	str	r3, [sp, #0]
 80083da:	e240      	b.n	800885e <_dtoa_r+0x946>
 80083dc:	07f2      	lsls	r2, r6, #31
 80083de:	d505      	bpl.n	80083ec <_dtoa_r+0x4d4>
 80083e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80083e4:	f7f8 f908 	bl	80005f8 <__aeabi_dmul>
 80083e8:	3501      	adds	r5, #1
 80083ea:	2301      	movs	r3, #1
 80083ec:	1076      	asrs	r6, r6, #1
 80083ee:	3708      	adds	r7, #8
 80083f0:	e777      	b.n	80082e2 <_dtoa_r+0x3ca>
 80083f2:	2502      	movs	r5, #2
 80083f4:	e779      	b.n	80082ea <_dtoa_r+0x3d2>
 80083f6:	9f00      	ldr	r7, [sp, #0]
 80083f8:	9e03      	ldr	r6, [sp, #12]
 80083fa:	e794      	b.n	8008326 <_dtoa_r+0x40e>
 80083fc:	9901      	ldr	r1, [sp, #4]
 80083fe:	4b4c      	ldr	r3, [pc, #304]	; (8008530 <_dtoa_r+0x618>)
 8008400:	4431      	add	r1, r6
 8008402:	910d      	str	r1, [sp, #52]	; 0x34
 8008404:	9908      	ldr	r1, [sp, #32]
 8008406:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800840a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800840e:	2900      	cmp	r1, #0
 8008410:	d043      	beq.n	800849a <_dtoa_r+0x582>
 8008412:	494d      	ldr	r1, [pc, #308]	; (8008548 <_dtoa_r+0x630>)
 8008414:	2000      	movs	r0, #0
 8008416:	f7f8 fa19 	bl	800084c <__aeabi_ddiv>
 800841a:	4652      	mov	r2, sl
 800841c:	465b      	mov	r3, fp
 800841e:	f7f7 ff33 	bl	8000288 <__aeabi_dsub>
 8008422:	9d01      	ldr	r5, [sp, #4]
 8008424:	4682      	mov	sl, r0
 8008426:	468b      	mov	fp, r1
 8008428:	4649      	mov	r1, r9
 800842a:	4640      	mov	r0, r8
 800842c:	f7f8 fb94 	bl	8000b58 <__aeabi_d2iz>
 8008430:	4606      	mov	r6, r0
 8008432:	f7f8 f877 	bl	8000524 <__aeabi_i2d>
 8008436:	4602      	mov	r2, r0
 8008438:	460b      	mov	r3, r1
 800843a:	4640      	mov	r0, r8
 800843c:	4649      	mov	r1, r9
 800843e:	f7f7 ff23 	bl	8000288 <__aeabi_dsub>
 8008442:	3630      	adds	r6, #48	; 0x30
 8008444:	f805 6b01 	strb.w	r6, [r5], #1
 8008448:	4652      	mov	r2, sl
 800844a:	465b      	mov	r3, fp
 800844c:	4680      	mov	r8, r0
 800844e:	4689      	mov	r9, r1
 8008450:	f7f8 fb44 	bl	8000adc <__aeabi_dcmplt>
 8008454:	2800      	cmp	r0, #0
 8008456:	d163      	bne.n	8008520 <_dtoa_r+0x608>
 8008458:	4642      	mov	r2, r8
 800845a:	464b      	mov	r3, r9
 800845c:	4936      	ldr	r1, [pc, #216]	; (8008538 <_dtoa_r+0x620>)
 800845e:	2000      	movs	r0, #0
 8008460:	f7f7 ff12 	bl	8000288 <__aeabi_dsub>
 8008464:	4652      	mov	r2, sl
 8008466:	465b      	mov	r3, fp
 8008468:	f7f8 fb38 	bl	8000adc <__aeabi_dcmplt>
 800846c:	2800      	cmp	r0, #0
 800846e:	f040 80b5 	bne.w	80085dc <_dtoa_r+0x6c4>
 8008472:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008474:	429d      	cmp	r5, r3
 8008476:	d081      	beq.n	800837c <_dtoa_r+0x464>
 8008478:	4b30      	ldr	r3, [pc, #192]	; (800853c <_dtoa_r+0x624>)
 800847a:	2200      	movs	r2, #0
 800847c:	4650      	mov	r0, sl
 800847e:	4659      	mov	r1, fp
 8008480:	f7f8 f8ba 	bl	80005f8 <__aeabi_dmul>
 8008484:	4b2d      	ldr	r3, [pc, #180]	; (800853c <_dtoa_r+0x624>)
 8008486:	4682      	mov	sl, r0
 8008488:	468b      	mov	fp, r1
 800848a:	4640      	mov	r0, r8
 800848c:	4649      	mov	r1, r9
 800848e:	2200      	movs	r2, #0
 8008490:	f7f8 f8b2 	bl	80005f8 <__aeabi_dmul>
 8008494:	4680      	mov	r8, r0
 8008496:	4689      	mov	r9, r1
 8008498:	e7c6      	b.n	8008428 <_dtoa_r+0x510>
 800849a:	4650      	mov	r0, sl
 800849c:	4659      	mov	r1, fp
 800849e:	f7f8 f8ab 	bl	80005f8 <__aeabi_dmul>
 80084a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80084a4:	9d01      	ldr	r5, [sp, #4]
 80084a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80084a8:	4682      	mov	sl, r0
 80084aa:	468b      	mov	fp, r1
 80084ac:	4649      	mov	r1, r9
 80084ae:	4640      	mov	r0, r8
 80084b0:	f7f8 fb52 	bl	8000b58 <__aeabi_d2iz>
 80084b4:	4606      	mov	r6, r0
 80084b6:	f7f8 f835 	bl	8000524 <__aeabi_i2d>
 80084ba:	3630      	adds	r6, #48	; 0x30
 80084bc:	4602      	mov	r2, r0
 80084be:	460b      	mov	r3, r1
 80084c0:	4640      	mov	r0, r8
 80084c2:	4649      	mov	r1, r9
 80084c4:	f7f7 fee0 	bl	8000288 <__aeabi_dsub>
 80084c8:	f805 6b01 	strb.w	r6, [r5], #1
 80084cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80084ce:	429d      	cmp	r5, r3
 80084d0:	4680      	mov	r8, r0
 80084d2:	4689      	mov	r9, r1
 80084d4:	f04f 0200 	mov.w	r2, #0
 80084d8:	d124      	bne.n	8008524 <_dtoa_r+0x60c>
 80084da:	4b1b      	ldr	r3, [pc, #108]	; (8008548 <_dtoa_r+0x630>)
 80084dc:	4650      	mov	r0, sl
 80084de:	4659      	mov	r1, fp
 80084e0:	f7f7 fed4 	bl	800028c <__adddf3>
 80084e4:	4602      	mov	r2, r0
 80084e6:	460b      	mov	r3, r1
 80084e8:	4640      	mov	r0, r8
 80084ea:	4649      	mov	r1, r9
 80084ec:	f7f8 fb14 	bl	8000b18 <__aeabi_dcmpgt>
 80084f0:	2800      	cmp	r0, #0
 80084f2:	d173      	bne.n	80085dc <_dtoa_r+0x6c4>
 80084f4:	4652      	mov	r2, sl
 80084f6:	465b      	mov	r3, fp
 80084f8:	4913      	ldr	r1, [pc, #76]	; (8008548 <_dtoa_r+0x630>)
 80084fa:	2000      	movs	r0, #0
 80084fc:	f7f7 fec4 	bl	8000288 <__aeabi_dsub>
 8008500:	4602      	mov	r2, r0
 8008502:	460b      	mov	r3, r1
 8008504:	4640      	mov	r0, r8
 8008506:	4649      	mov	r1, r9
 8008508:	f7f8 fae8 	bl	8000adc <__aeabi_dcmplt>
 800850c:	2800      	cmp	r0, #0
 800850e:	f43f af35 	beq.w	800837c <_dtoa_r+0x464>
 8008512:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008514:	1e6b      	subs	r3, r5, #1
 8008516:	930f      	str	r3, [sp, #60]	; 0x3c
 8008518:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800851c:	2b30      	cmp	r3, #48	; 0x30
 800851e:	d0f8      	beq.n	8008512 <_dtoa_r+0x5fa>
 8008520:	9700      	str	r7, [sp, #0]
 8008522:	e049      	b.n	80085b8 <_dtoa_r+0x6a0>
 8008524:	4b05      	ldr	r3, [pc, #20]	; (800853c <_dtoa_r+0x624>)
 8008526:	f7f8 f867 	bl	80005f8 <__aeabi_dmul>
 800852a:	4680      	mov	r8, r0
 800852c:	4689      	mov	r9, r1
 800852e:	e7bd      	b.n	80084ac <_dtoa_r+0x594>
 8008530:	0800b760 	.word	0x0800b760
 8008534:	0800b738 	.word	0x0800b738
 8008538:	3ff00000 	.word	0x3ff00000
 800853c:	40240000 	.word	0x40240000
 8008540:	401c0000 	.word	0x401c0000
 8008544:	40140000 	.word	0x40140000
 8008548:	3fe00000 	.word	0x3fe00000
 800854c:	9d01      	ldr	r5, [sp, #4]
 800854e:	4656      	mov	r6, sl
 8008550:	465f      	mov	r7, fp
 8008552:	4642      	mov	r2, r8
 8008554:	464b      	mov	r3, r9
 8008556:	4630      	mov	r0, r6
 8008558:	4639      	mov	r1, r7
 800855a:	f7f8 f977 	bl	800084c <__aeabi_ddiv>
 800855e:	f7f8 fafb 	bl	8000b58 <__aeabi_d2iz>
 8008562:	4682      	mov	sl, r0
 8008564:	f7f7 ffde 	bl	8000524 <__aeabi_i2d>
 8008568:	4642      	mov	r2, r8
 800856a:	464b      	mov	r3, r9
 800856c:	f7f8 f844 	bl	80005f8 <__aeabi_dmul>
 8008570:	4602      	mov	r2, r0
 8008572:	460b      	mov	r3, r1
 8008574:	4630      	mov	r0, r6
 8008576:	4639      	mov	r1, r7
 8008578:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800857c:	f7f7 fe84 	bl	8000288 <__aeabi_dsub>
 8008580:	f805 6b01 	strb.w	r6, [r5], #1
 8008584:	9e01      	ldr	r6, [sp, #4]
 8008586:	9f03      	ldr	r7, [sp, #12]
 8008588:	1bae      	subs	r6, r5, r6
 800858a:	42b7      	cmp	r7, r6
 800858c:	4602      	mov	r2, r0
 800858e:	460b      	mov	r3, r1
 8008590:	d135      	bne.n	80085fe <_dtoa_r+0x6e6>
 8008592:	f7f7 fe7b 	bl	800028c <__adddf3>
 8008596:	4642      	mov	r2, r8
 8008598:	464b      	mov	r3, r9
 800859a:	4606      	mov	r6, r0
 800859c:	460f      	mov	r7, r1
 800859e:	f7f8 fabb 	bl	8000b18 <__aeabi_dcmpgt>
 80085a2:	b9d0      	cbnz	r0, 80085da <_dtoa_r+0x6c2>
 80085a4:	4642      	mov	r2, r8
 80085a6:	464b      	mov	r3, r9
 80085a8:	4630      	mov	r0, r6
 80085aa:	4639      	mov	r1, r7
 80085ac:	f7f8 fa8c 	bl	8000ac8 <__aeabi_dcmpeq>
 80085b0:	b110      	cbz	r0, 80085b8 <_dtoa_r+0x6a0>
 80085b2:	f01a 0f01 	tst.w	sl, #1
 80085b6:	d110      	bne.n	80085da <_dtoa_r+0x6c2>
 80085b8:	4620      	mov	r0, r4
 80085ba:	ee18 1a10 	vmov	r1, s16
 80085be:	f000 fe75 	bl	80092ac <_Bfree>
 80085c2:	2300      	movs	r3, #0
 80085c4:	9800      	ldr	r0, [sp, #0]
 80085c6:	702b      	strb	r3, [r5, #0]
 80085c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80085ca:	3001      	adds	r0, #1
 80085cc:	6018      	str	r0, [r3, #0]
 80085ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	f43f acf1 	beq.w	8007fb8 <_dtoa_r+0xa0>
 80085d6:	601d      	str	r5, [r3, #0]
 80085d8:	e4ee      	b.n	8007fb8 <_dtoa_r+0xa0>
 80085da:	9f00      	ldr	r7, [sp, #0]
 80085dc:	462b      	mov	r3, r5
 80085de:	461d      	mov	r5, r3
 80085e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80085e4:	2a39      	cmp	r2, #57	; 0x39
 80085e6:	d106      	bne.n	80085f6 <_dtoa_r+0x6de>
 80085e8:	9a01      	ldr	r2, [sp, #4]
 80085ea:	429a      	cmp	r2, r3
 80085ec:	d1f7      	bne.n	80085de <_dtoa_r+0x6c6>
 80085ee:	9901      	ldr	r1, [sp, #4]
 80085f0:	2230      	movs	r2, #48	; 0x30
 80085f2:	3701      	adds	r7, #1
 80085f4:	700a      	strb	r2, [r1, #0]
 80085f6:	781a      	ldrb	r2, [r3, #0]
 80085f8:	3201      	adds	r2, #1
 80085fa:	701a      	strb	r2, [r3, #0]
 80085fc:	e790      	b.n	8008520 <_dtoa_r+0x608>
 80085fe:	4ba6      	ldr	r3, [pc, #664]	; (8008898 <_dtoa_r+0x980>)
 8008600:	2200      	movs	r2, #0
 8008602:	f7f7 fff9 	bl	80005f8 <__aeabi_dmul>
 8008606:	2200      	movs	r2, #0
 8008608:	2300      	movs	r3, #0
 800860a:	4606      	mov	r6, r0
 800860c:	460f      	mov	r7, r1
 800860e:	f7f8 fa5b 	bl	8000ac8 <__aeabi_dcmpeq>
 8008612:	2800      	cmp	r0, #0
 8008614:	d09d      	beq.n	8008552 <_dtoa_r+0x63a>
 8008616:	e7cf      	b.n	80085b8 <_dtoa_r+0x6a0>
 8008618:	9a08      	ldr	r2, [sp, #32]
 800861a:	2a00      	cmp	r2, #0
 800861c:	f000 80d7 	beq.w	80087ce <_dtoa_r+0x8b6>
 8008620:	9a06      	ldr	r2, [sp, #24]
 8008622:	2a01      	cmp	r2, #1
 8008624:	f300 80ba 	bgt.w	800879c <_dtoa_r+0x884>
 8008628:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800862a:	2a00      	cmp	r2, #0
 800862c:	f000 80b2 	beq.w	8008794 <_dtoa_r+0x87c>
 8008630:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008634:	9e07      	ldr	r6, [sp, #28]
 8008636:	9d04      	ldr	r5, [sp, #16]
 8008638:	9a04      	ldr	r2, [sp, #16]
 800863a:	441a      	add	r2, r3
 800863c:	9204      	str	r2, [sp, #16]
 800863e:	9a05      	ldr	r2, [sp, #20]
 8008640:	2101      	movs	r1, #1
 8008642:	441a      	add	r2, r3
 8008644:	4620      	mov	r0, r4
 8008646:	9205      	str	r2, [sp, #20]
 8008648:	f000 ff32 	bl	80094b0 <__i2b>
 800864c:	4607      	mov	r7, r0
 800864e:	2d00      	cmp	r5, #0
 8008650:	dd0c      	ble.n	800866c <_dtoa_r+0x754>
 8008652:	9b05      	ldr	r3, [sp, #20]
 8008654:	2b00      	cmp	r3, #0
 8008656:	dd09      	ble.n	800866c <_dtoa_r+0x754>
 8008658:	42ab      	cmp	r3, r5
 800865a:	9a04      	ldr	r2, [sp, #16]
 800865c:	bfa8      	it	ge
 800865e:	462b      	movge	r3, r5
 8008660:	1ad2      	subs	r2, r2, r3
 8008662:	9204      	str	r2, [sp, #16]
 8008664:	9a05      	ldr	r2, [sp, #20]
 8008666:	1aed      	subs	r5, r5, r3
 8008668:	1ad3      	subs	r3, r2, r3
 800866a:	9305      	str	r3, [sp, #20]
 800866c:	9b07      	ldr	r3, [sp, #28]
 800866e:	b31b      	cbz	r3, 80086b8 <_dtoa_r+0x7a0>
 8008670:	9b08      	ldr	r3, [sp, #32]
 8008672:	2b00      	cmp	r3, #0
 8008674:	f000 80af 	beq.w	80087d6 <_dtoa_r+0x8be>
 8008678:	2e00      	cmp	r6, #0
 800867a:	dd13      	ble.n	80086a4 <_dtoa_r+0x78c>
 800867c:	4639      	mov	r1, r7
 800867e:	4632      	mov	r2, r6
 8008680:	4620      	mov	r0, r4
 8008682:	f000 ffd5 	bl	8009630 <__pow5mult>
 8008686:	ee18 2a10 	vmov	r2, s16
 800868a:	4601      	mov	r1, r0
 800868c:	4607      	mov	r7, r0
 800868e:	4620      	mov	r0, r4
 8008690:	f000 ff24 	bl	80094dc <__multiply>
 8008694:	ee18 1a10 	vmov	r1, s16
 8008698:	4680      	mov	r8, r0
 800869a:	4620      	mov	r0, r4
 800869c:	f000 fe06 	bl	80092ac <_Bfree>
 80086a0:	ee08 8a10 	vmov	s16, r8
 80086a4:	9b07      	ldr	r3, [sp, #28]
 80086a6:	1b9a      	subs	r2, r3, r6
 80086a8:	d006      	beq.n	80086b8 <_dtoa_r+0x7a0>
 80086aa:	ee18 1a10 	vmov	r1, s16
 80086ae:	4620      	mov	r0, r4
 80086b0:	f000 ffbe 	bl	8009630 <__pow5mult>
 80086b4:	ee08 0a10 	vmov	s16, r0
 80086b8:	2101      	movs	r1, #1
 80086ba:	4620      	mov	r0, r4
 80086bc:	f000 fef8 	bl	80094b0 <__i2b>
 80086c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	4606      	mov	r6, r0
 80086c6:	f340 8088 	ble.w	80087da <_dtoa_r+0x8c2>
 80086ca:	461a      	mov	r2, r3
 80086cc:	4601      	mov	r1, r0
 80086ce:	4620      	mov	r0, r4
 80086d0:	f000 ffae 	bl	8009630 <__pow5mult>
 80086d4:	9b06      	ldr	r3, [sp, #24]
 80086d6:	2b01      	cmp	r3, #1
 80086d8:	4606      	mov	r6, r0
 80086da:	f340 8081 	ble.w	80087e0 <_dtoa_r+0x8c8>
 80086de:	f04f 0800 	mov.w	r8, #0
 80086e2:	6933      	ldr	r3, [r6, #16]
 80086e4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80086e8:	6918      	ldr	r0, [r3, #16]
 80086ea:	f000 fe91 	bl	8009410 <__hi0bits>
 80086ee:	f1c0 0020 	rsb	r0, r0, #32
 80086f2:	9b05      	ldr	r3, [sp, #20]
 80086f4:	4418      	add	r0, r3
 80086f6:	f010 001f 	ands.w	r0, r0, #31
 80086fa:	f000 8092 	beq.w	8008822 <_dtoa_r+0x90a>
 80086fe:	f1c0 0320 	rsb	r3, r0, #32
 8008702:	2b04      	cmp	r3, #4
 8008704:	f340 808a 	ble.w	800881c <_dtoa_r+0x904>
 8008708:	f1c0 001c 	rsb	r0, r0, #28
 800870c:	9b04      	ldr	r3, [sp, #16]
 800870e:	4403      	add	r3, r0
 8008710:	9304      	str	r3, [sp, #16]
 8008712:	9b05      	ldr	r3, [sp, #20]
 8008714:	4403      	add	r3, r0
 8008716:	4405      	add	r5, r0
 8008718:	9305      	str	r3, [sp, #20]
 800871a:	9b04      	ldr	r3, [sp, #16]
 800871c:	2b00      	cmp	r3, #0
 800871e:	dd07      	ble.n	8008730 <_dtoa_r+0x818>
 8008720:	ee18 1a10 	vmov	r1, s16
 8008724:	461a      	mov	r2, r3
 8008726:	4620      	mov	r0, r4
 8008728:	f000 ffdc 	bl	80096e4 <__lshift>
 800872c:	ee08 0a10 	vmov	s16, r0
 8008730:	9b05      	ldr	r3, [sp, #20]
 8008732:	2b00      	cmp	r3, #0
 8008734:	dd05      	ble.n	8008742 <_dtoa_r+0x82a>
 8008736:	4631      	mov	r1, r6
 8008738:	461a      	mov	r2, r3
 800873a:	4620      	mov	r0, r4
 800873c:	f000 ffd2 	bl	80096e4 <__lshift>
 8008740:	4606      	mov	r6, r0
 8008742:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008744:	2b00      	cmp	r3, #0
 8008746:	d06e      	beq.n	8008826 <_dtoa_r+0x90e>
 8008748:	ee18 0a10 	vmov	r0, s16
 800874c:	4631      	mov	r1, r6
 800874e:	f001 f839 	bl	80097c4 <__mcmp>
 8008752:	2800      	cmp	r0, #0
 8008754:	da67      	bge.n	8008826 <_dtoa_r+0x90e>
 8008756:	9b00      	ldr	r3, [sp, #0]
 8008758:	3b01      	subs	r3, #1
 800875a:	ee18 1a10 	vmov	r1, s16
 800875e:	9300      	str	r3, [sp, #0]
 8008760:	220a      	movs	r2, #10
 8008762:	2300      	movs	r3, #0
 8008764:	4620      	mov	r0, r4
 8008766:	f000 fdc3 	bl	80092f0 <__multadd>
 800876a:	9b08      	ldr	r3, [sp, #32]
 800876c:	ee08 0a10 	vmov	s16, r0
 8008770:	2b00      	cmp	r3, #0
 8008772:	f000 81b1 	beq.w	8008ad8 <_dtoa_r+0xbc0>
 8008776:	2300      	movs	r3, #0
 8008778:	4639      	mov	r1, r7
 800877a:	220a      	movs	r2, #10
 800877c:	4620      	mov	r0, r4
 800877e:	f000 fdb7 	bl	80092f0 <__multadd>
 8008782:	9b02      	ldr	r3, [sp, #8]
 8008784:	2b00      	cmp	r3, #0
 8008786:	4607      	mov	r7, r0
 8008788:	f300 808e 	bgt.w	80088a8 <_dtoa_r+0x990>
 800878c:	9b06      	ldr	r3, [sp, #24]
 800878e:	2b02      	cmp	r3, #2
 8008790:	dc51      	bgt.n	8008836 <_dtoa_r+0x91e>
 8008792:	e089      	b.n	80088a8 <_dtoa_r+0x990>
 8008794:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008796:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800879a:	e74b      	b.n	8008634 <_dtoa_r+0x71c>
 800879c:	9b03      	ldr	r3, [sp, #12]
 800879e:	1e5e      	subs	r6, r3, #1
 80087a0:	9b07      	ldr	r3, [sp, #28]
 80087a2:	42b3      	cmp	r3, r6
 80087a4:	bfbf      	itttt	lt
 80087a6:	9b07      	ldrlt	r3, [sp, #28]
 80087a8:	9607      	strlt	r6, [sp, #28]
 80087aa:	1af2      	sublt	r2, r6, r3
 80087ac:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80087ae:	bfb6      	itet	lt
 80087b0:	189b      	addlt	r3, r3, r2
 80087b2:	1b9e      	subge	r6, r3, r6
 80087b4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80087b6:	9b03      	ldr	r3, [sp, #12]
 80087b8:	bfb8      	it	lt
 80087ba:	2600      	movlt	r6, #0
 80087bc:	2b00      	cmp	r3, #0
 80087be:	bfb7      	itett	lt
 80087c0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80087c4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80087c8:	1a9d      	sublt	r5, r3, r2
 80087ca:	2300      	movlt	r3, #0
 80087cc:	e734      	b.n	8008638 <_dtoa_r+0x720>
 80087ce:	9e07      	ldr	r6, [sp, #28]
 80087d0:	9d04      	ldr	r5, [sp, #16]
 80087d2:	9f08      	ldr	r7, [sp, #32]
 80087d4:	e73b      	b.n	800864e <_dtoa_r+0x736>
 80087d6:	9a07      	ldr	r2, [sp, #28]
 80087d8:	e767      	b.n	80086aa <_dtoa_r+0x792>
 80087da:	9b06      	ldr	r3, [sp, #24]
 80087dc:	2b01      	cmp	r3, #1
 80087de:	dc18      	bgt.n	8008812 <_dtoa_r+0x8fa>
 80087e0:	f1ba 0f00 	cmp.w	sl, #0
 80087e4:	d115      	bne.n	8008812 <_dtoa_r+0x8fa>
 80087e6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80087ea:	b993      	cbnz	r3, 8008812 <_dtoa_r+0x8fa>
 80087ec:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80087f0:	0d1b      	lsrs	r3, r3, #20
 80087f2:	051b      	lsls	r3, r3, #20
 80087f4:	b183      	cbz	r3, 8008818 <_dtoa_r+0x900>
 80087f6:	9b04      	ldr	r3, [sp, #16]
 80087f8:	3301      	adds	r3, #1
 80087fa:	9304      	str	r3, [sp, #16]
 80087fc:	9b05      	ldr	r3, [sp, #20]
 80087fe:	3301      	adds	r3, #1
 8008800:	9305      	str	r3, [sp, #20]
 8008802:	f04f 0801 	mov.w	r8, #1
 8008806:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008808:	2b00      	cmp	r3, #0
 800880a:	f47f af6a 	bne.w	80086e2 <_dtoa_r+0x7ca>
 800880e:	2001      	movs	r0, #1
 8008810:	e76f      	b.n	80086f2 <_dtoa_r+0x7da>
 8008812:	f04f 0800 	mov.w	r8, #0
 8008816:	e7f6      	b.n	8008806 <_dtoa_r+0x8ee>
 8008818:	4698      	mov	r8, r3
 800881a:	e7f4      	b.n	8008806 <_dtoa_r+0x8ee>
 800881c:	f43f af7d 	beq.w	800871a <_dtoa_r+0x802>
 8008820:	4618      	mov	r0, r3
 8008822:	301c      	adds	r0, #28
 8008824:	e772      	b.n	800870c <_dtoa_r+0x7f4>
 8008826:	9b03      	ldr	r3, [sp, #12]
 8008828:	2b00      	cmp	r3, #0
 800882a:	dc37      	bgt.n	800889c <_dtoa_r+0x984>
 800882c:	9b06      	ldr	r3, [sp, #24]
 800882e:	2b02      	cmp	r3, #2
 8008830:	dd34      	ble.n	800889c <_dtoa_r+0x984>
 8008832:	9b03      	ldr	r3, [sp, #12]
 8008834:	9302      	str	r3, [sp, #8]
 8008836:	9b02      	ldr	r3, [sp, #8]
 8008838:	b96b      	cbnz	r3, 8008856 <_dtoa_r+0x93e>
 800883a:	4631      	mov	r1, r6
 800883c:	2205      	movs	r2, #5
 800883e:	4620      	mov	r0, r4
 8008840:	f000 fd56 	bl	80092f0 <__multadd>
 8008844:	4601      	mov	r1, r0
 8008846:	4606      	mov	r6, r0
 8008848:	ee18 0a10 	vmov	r0, s16
 800884c:	f000 ffba 	bl	80097c4 <__mcmp>
 8008850:	2800      	cmp	r0, #0
 8008852:	f73f adbb 	bgt.w	80083cc <_dtoa_r+0x4b4>
 8008856:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008858:	9d01      	ldr	r5, [sp, #4]
 800885a:	43db      	mvns	r3, r3
 800885c:	9300      	str	r3, [sp, #0]
 800885e:	f04f 0800 	mov.w	r8, #0
 8008862:	4631      	mov	r1, r6
 8008864:	4620      	mov	r0, r4
 8008866:	f000 fd21 	bl	80092ac <_Bfree>
 800886a:	2f00      	cmp	r7, #0
 800886c:	f43f aea4 	beq.w	80085b8 <_dtoa_r+0x6a0>
 8008870:	f1b8 0f00 	cmp.w	r8, #0
 8008874:	d005      	beq.n	8008882 <_dtoa_r+0x96a>
 8008876:	45b8      	cmp	r8, r7
 8008878:	d003      	beq.n	8008882 <_dtoa_r+0x96a>
 800887a:	4641      	mov	r1, r8
 800887c:	4620      	mov	r0, r4
 800887e:	f000 fd15 	bl	80092ac <_Bfree>
 8008882:	4639      	mov	r1, r7
 8008884:	4620      	mov	r0, r4
 8008886:	f000 fd11 	bl	80092ac <_Bfree>
 800888a:	e695      	b.n	80085b8 <_dtoa_r+0x6a0>
 800888c:	2600      	movs	r6, #0
 800888e:	4637      	mov	r7, r6
 8008890:	e7e1      	b.n	8008856 <_dtoa_r+0x93e>
 8008892:	9700      	str	r7, [sp, #0]
 8008894:	4637      	mov	r7, r6
 8008896:	e599      	b.n	80083cc <_dtoa_r+0x4b4>
 8008898:	40240000 	.word	0x40240000
 800889c:	9b08      	ldr	r3, [sp, #32]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	f000 80ca 	beq.w	8008a38 <_dtoa_r+0xb20>
 80088a4:	9b03      	ldr	r3, [sp, #12]
 80088a6:	9302      	str	r3, [sp, #8]
 80088a8:	2d00      	cmp	r5, #0
 80088aa:	dd05      	ble.n	80088b8 <_dtoa_r+0x9a0>
 80088ac:	4639      	mov	r1, r7
 80088ae:	462a      	mov	r2, r5
 80088b0:	4620      	mov	r0, r4
 80088b2:	f000 ff17 	bl	80096e4 <__lshift>
 80088b6:	4607      	mov	r7, r0
 80088b8:	f1b8 0f00 	cmp.w	r8, #0
 80088bc:	d05b      	beq.n	8008976 <_dtoa_r+0xa5e>
 80088be:	6879      	ldr	r1, [r7, #4]
 80088c0:	4620      	mov	r0, r4
 80088c2:	f000 fcb3 	bl	800922c <_Balloc>
 80088c6:	4605      	mov	r5, r0
 80088c8:	b928      	cbnz	r0, 80088d6 <_dtoa_r+0x9be>
 80088ca:	4b87      	ldr	r3, [pc, #540]	; (8008ae8 <_dtoa_r+0xbd0>)
 80088cc:	4602      	mov	r2, r0
 80088ce:	f240 21ea 	movw	r1, #746	; 0x2ea
 80088d2:	f7ff bb3b 	b.w	8007f4c <_dtoa_r+0x34>
 80088d6:	693a      	ldr	r2, [r7, #16]
 80088d8:	3202      	adds	r2, #2
 80088da:	0092      	lsls	r2, r2, #2
 80088dc:	f107 010c 	add.w	r1, r7, #12
 80088e0:	300c      	adds	r0, #12
 80088e2:	f000 fc95 	bl	8009210 <memcpy>
 80088e6:	2201      	movs	r2, #1
 80088e8:	4629      	mov	r1, r5
 80088ea:	4620      	mov	r0, r4
 80088ec:	f000 fefa 	bl	80096e4 <__lshift>
 80088f0:	9b01      	ldr	r3, [sp, #4]
 80088f2:	f103 0901 	add.w	r9, r3, #1
 80088f6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80088fa:	4413      	add	r3, r2
 80088fc:	9305      	str	r3, [sp, #20]
 80088fe:	f00a 0301 	and.w	r3, sl, #1
 8008902:	46b8      	mov	r8, r7
 8008904:	9304      	str	r3, [sp, #16]
 8008906:	4607      	mov	r7, r0
 8008908:	4631      	mov	r1, r6
 800890a:	ee18 0a10 	vmov	r0, s16
 800890e:	f7ff fa77 	bl	8007e00 <quorem>
 8008912:	4641      	mov	r1, r8
 8008914:	9002      	str	r0, [sp, #8]
 8008916:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800891a:	ee18 0a10 	vmov	r0, s16
 800891e:	f000 ff51 	bl	80097c4 <__mcmp>
 8008922:	463a      	mov	r2, r7
 8008924:	9003      	str	r0, [sp, #12]
 8008926:	4631      	mov	r1, r6
 8008928:	4620      	mov	r0, r4
 800892a:	f000 ff67 	bl	80097fc <__mdiff>
 800892e:	68c2      	ldr	r2, [r0, #12]
 8008930:	f109 3bff 	add.w	fp, r9, #4294967295
 8008934:	4605      	mov	r5, r0
 8008936:	bb02      	cbnz	r2, 800897a <_dtoa_r+0xa62>
 8008938:	4601      	mov	r1, r0
 800893a:	ee18 0a10 	vmov	r0, s16
 800893e:	f000 ff41 	bl	80097c4 <__mcmp>
 8008942:	4602      	mov	r2, r0
 8008944:	4629      	mov	r1, r5
 8008946:	4620      	mov	r0, r4
 8008948:	9207      	str	r2, [sp, #28]
 800894a:	f000 fcaf 	bl	80092ac <_Bfree>
 800894e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008952:	ea43 0102 	orr.w	r1, r3, r2
 8008956:	9b04      	ldr	r3, [sp, #16]
 8008958:	430b      	orrs	r3, r1
 800895a:	464d      	mov	r5, r9
 800895c:	d10f      	bne.n	800897e <_dtoa_r+0xa66>
 800895e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008962:	d02a      	beq.n	80089ba <_dtoa_r+0xaa2>
 8008964:	9b03      	ldr	r3, [sp, #12]
 8008966:	2b00      	cmp	r3, #0
 8008968:	dd02      	ble.n	8008970 <_dtoa_r+0xa58>
 800896a:	9b02      	ldr	r3, [sp, #8]
 800896c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008970:	f88b a000 	strb.w	sl, [fp]
 8008974:	e775      	b.n	8008862 <_dtoa_r+0x94a>
 8008976:	4638      	mov	r0, r7
 8008978:	e7ba      	b.n	80088f0 <_dtoa_r+0x9d8>
 800897a:	2201      	movs	r2, #1
 800897c:	e7e2      	b.n	8008944 <_dtoa_r+0xa2c>
 800897e:	9b03      	ldr	r3, [sp, #12]
 8008980:	2b00      	cmp	r3, #0
 8008982:	db04      	blt.n	800898e <_dtoa_r+0xa76>
 8008984:	9906      	ldr	r1, [sp, #24]
 8008986:	430b      	orrs	r3, r1
 8008988:	9904      	ldr	r1, [sp, #16]
 800898a:	430b      	orrs	r3, r1
 800898c:	d122      	bne.n	80089d4 <_dtoa_r+0xabc>
 800898e:	2a00      	cmp	r2, #0
 8008990:	ddee      	ble.n	8008970 <_dtoa_r+0xa58>
 8008992:	ee18 1a10 	vmov	r1, s16
 8008996:	2201      	movs	r2, #1
 8008998:	4620      	mov	r0, r4
 800899a:	f000 fea3 	bl	80096e4 <__lshift>
 800899e:	4631      	mov	r1, r6
 80089a0:	ee08 0a10 	vmov	s16, r0
 80089a4:	f000 ff0e 	bl	80097c4 <__mcmp>
 80089a8:	2800      	cmp	r0, #0
 80089aa:	dc03      	bgt.n	80089b4 <_dtoa_r+0xa9c>
 80089ac:	d1e0      	bne.n	8008970 <_dtoa_r+0xa58>
 80089ae:	f01a 0f01 	tst.w	sl, #1
 80089b2:	d0dd      	beq.n	8008970 <_dtoa_r+0xa58>
 80089b4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80089b8:	d1d7      	bne.n	800896a <_dtoa_r+0xa52>
 80089ba:	2339      	movs	r3, #57	; 0x39
 80089bc:	f88b 3000 	strb.w	r3, [fp]
 80089c0:	462b      	mov	r3, r5
 80089c2:	461d      	mov	r5, r3
 80089c4:	3b01      	subs	r3, #1
 80089c6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80089ca:	2a39      	cmp	r2, #57	; 0x39
 80089cc:	d071      	beq.n	8008ab2 <_dtoa_r+0xb9a>
 80089ce:	3201      	adds	r2, #1
 80089d0:	701a      	strb	r2, [r3, #0]
 80089d2:	e746      	b.n	8008862 <_dtoa_r+0x94a>
 80089d4:	2a00      	cmp	r2, #0
 80089d6:	dd07      	ble.n	80089e8 <_dtoa_r+0xad0>
 80089d8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80089dc:	d0ed      	beq.n	80089ba <_dtoa_r+0xaa2>
 80089de:	f10a 0301 	add.w	r3, sl, #1
 80089e2:	f88b 3000 	strb.w	r3, [fp]
 80089e6:	e73c      	b.n	8008862 <_dtoa_r+0x94a>
 80089e8:	9b05      	ldr	r3, [sp, #20]
 80089ea:	f809 ac01 	strb.w	sl, [r9, #-1]
 80089ee:	4599      	cmp	r9, r3
 80089f0:	d047      	beq.n	8008a82 <_dtoa_r+0xb6a>
 80089f2:	ee18 1a10 	vmov	r1, s16
 80089f6:	2300      	movs	r3, #0
 80089f8:	220a      	movs	r2, #10
 80089fa:	4620      	mov	r0, r4
 80089fc:	f000 fc78 	bl	80092f0 <__multadd>
 8008a00:	45b8      	cmp	r8, r7
 8008a02:	ee08 0a10 	vmov	s16, r0
 8008a06:	f04f 0300 	mov.w	r3, #0
 8008a0a:	f04f 020a 	mov.w	r2, #10
 8008a0e:	4641      	mov	r1, r8
 8008a10:	4620      	mov	r0, r4
 8008a12:	d106      	bne.n	8008a22 <_dtoa_r+0xb0a>
 8008a14:	f000 fc6c 	bl	80092f0 <__multadd>
 8008a18:	4680      	mov	r8, r0
 8008a1a:	4607      	mov	r7, r0
 8008a1c:	f109 0901 	add.w	r9, r9, #1
 8008a20:	e772      	b.n	8008908 <_dtoa_r+0x9f0>
 8008a22:	f000 fc65 	bl	80092f0 <__multadd>
 8008a26:	4639      	mov	r1, r7
 8008a28:	4680      	mov	r8, r0
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	220a      	movs	r2, #10
 8008a2e:	4620      	mov	r0, r4
 8008a30:	f000 fc5e 	bl	80092f0 <__multadd>
 8008a34:	4607      	mov	r7, r0
 8008a36:	e7f1      	b.n	8008a1c <_dtoa_r+0xb04>
 8008a38:	9b03      	ldr	r3, [sp, #12]
 8008a3a:	9302      	str	r3, [sp, #8]
 8008a3c:	9d01      	ldr	r5, [sp, #4]
 8008a3e:	ee18 0a10 	vmov	r0, s16
 8008a42:	4631      	mov	r1, r6
 8008a44:	f7ff f9dc 	bl	8007e00 <quorem>
 8008a48:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008a4c:	9b01      	ldr	r3, [sp, #4]
 8008a4e:	f805 ab01 	strb.w	sl, [r5], #1
 8008a52:	1aea      	subs	r2, r5, r3
 8008a54:	9b02      	ldr	r3, [sp, #8]
 8008a56:	4293      	cmp	r3, r2
 8008a58:	dd09      	ble.n	8008a6e <_dtoa_r+0xb56>
 8008a5a:	ee18 1a10 	vmov	r1, s16
 8008a5e:	2300      	movs	r3, #0
 8008a60:	220a      	movs	r2, #10
 8008a62:	4620      	mov	r0, r4
 8008a64:	f000 fc44 	bl	80092f0 <__multadd>
 8008a68:	ee08 0a10 	vmov	s16, r0
 8008a6c:	e7e7      	b.n	8008a3e <_dtoa_r+0xb26>
 8008a6e:	9b02      	ldr	r3, [sp, #8]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	bfc8      	it	gt
 8008a74:	461d      	movgt	r5, r3
 8008a76:	9b01      	ldr	r3, [sp, #4]
 8008a78:	bfd8      	it	le
 8008a7a:	2501      	movle	r5, #1
 8008a7c:	441d      	add	r5, r3
 8008a7e:	f04f 0800 	mov.w	r8, #0
 8008a82:	ee18 1a10 	vmov	r1, s16
 8008a86:	2201      	movs	r2, #1
 8008a88:	4620      	mov	r0, r4
 8008a8a:	f000 fe2b 	bl	80096e4 <__lshift>
 8008a8e:	4631      	mov	r1, r6
 8008a90:	ee08 0a10 	vmov	s16, r0
 8008a94:	f000 fe96 	bl	80097c4 <__mcmp>
 8008a98:	2800      	cmp	r0, #0
 8008a9a:	dc91      	bgt.n	80089c0 <_dtoa_r+0xaa8>
 8008a9c:	d102      	bne.n	8008aa4 <_dtoa_r+0xb8c>
 8008a9e:	f01a 0f01 	tst.w	sl, #1
 8008aa2:	d18d      	bne.n	80089c0 <_dtoa_r+0xaa8>
 8008aa4:	462b      	mov	r3, r5
 8008aa6:	461d      	mov	r5, r3
 8008aa8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008aac:	2a30      	cmp	r2, #48	; 0x30
 8008aae:	d0fa      	beq.n	8008aa6 <_dtoa_r+0xb8e>
 8008ab0:	e6d7      	b.n	8008862 <_dtoa_r+0x94a>
 8008ab2:	9a01      	ldr	r2, [sp, #4]
 8008ab4:	429a      	cmp	r2, r3
 8008ab6:	d184      	bne.n	80089c2 <_dtoa_r+0xaaa>
 8008ab8:	9b00      	ldr	r3, [sp, #0]
 8008aba:	3301      	adds	r3, #1
 8008abc:	9300      	str	r3, [sp, #0]
 8008abe:	2331      	movs	r3, #49	; 0x31
 8008ac0:	7013      	strb	r3, [r2, #0]
 8008ac2:	e6ce      	b.n	8008862 <_dtoa_r+0x94a>
 8008ac4:	4b09      	ldr	r3, [pc, #36]	; (8008aec <_dtoa_r+0xbd4>)
 8008ac6:	f7ff ba95 	b.w	8007ff4 <_dtoa_r+0xdc>
 8008aca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	f47f aa6e 	bne.w	8007fae <_dtoa_r+0x96>
 8008ad2:	4b07      	ldr	r3, [pc, #28]	; (8008af0 <_dtoa_r+0xbd8>)
 8008ad4:	f7ff ba8e 	b.w	8007ff4 <_dtoa_r+0xdc>
 8008ad8:	9b02      	ldr	r3, [sp, #8]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	dcae      	bgt.n	8008a3c <_dtoa_r+0xb24>
 8008ade:	9b06      	ldr	r3, [sp, #24]
 8008ae0:	2b02      	cmp	r3, #2
 8008ae2:	f73f aea8 	bgt.w	8008836 <_dtoa_r+0x91e>
 8008ae6:	e7a9      	b.n	8008a3c <_dtoa_r+0xb24>
 8008ae8:	0800b650 	.word	0x0800b650
 8008aec:	0800b454 	.word	0x0800b454
 8008af0:	0800b5d1 	.word	0x0800b5d1

08008af4 <rshift>:
 8008af4:	6903      	ldr	r3, [r0, #16]
 8008af6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008afa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008afe:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008b02:	f100 0414 	add.w	r4, r0, #20
 8008b06:	dd45      	ble.n	8008b94 <rshift+0xa0>
 8008b08:	f011 011f 	ands.w	r1, r1, #31
 8008b0c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008b10:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008b14:	d10c      	bne.n	8008b30 <rshift+0x3c>
 8008b16:	f100 0710 	add.w	r7, r0, #16
 8008b1a:	4629      	mov	r1, r5
 8008b1c:	42b1      	cmp	r1, r6
 8008b1e:	d334      	bcc.n	8008b8a <rshift+0x96>
 8008b20:	1a9b      	subs	r3, r3, r2
 8008b22:	009b      	lsls	r3, r3, #2
 8008b24:	1eea      	subs	r2, r5, #3
 8008b26:	4296      	cmp	r6, r2
 8008b28:	bf38      	it	cc
 8008b2a:	2300      	movcc	r3, #0
 8008b2c:	4423      	add	r3, r4
 8008b2e:	e015      	b.n	8008b5c <rshift+0x68>
 8008b30:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008b34:	f1c1 0820 	rsb	r8, r1, #32
 8008b38:	40cf      	lsrs	r7, r1
 8008b3a:	f105 0e04 	add.w	lr, r5, #4
 8008b3e:	46a1      	mov	r9, r4
 8008b40:	4576      	cmp	r6, lr
 8008b42:	46f4      	mov	ip, lr
 8008b44:	d815      	bhi.n	8008b72 <rshift+0x7e>
 8008b46:	1a9a      	subs	r2, r3, r2
 8008b48:	0092      	lsls	r2, r2, #2
 8008b4a:	3a04      	subs	r2, #4
 8008b4c:	3501      	adds	r5, #1
 8008b4e:	42ae      	cmp	r6, r5
 8008b50:	bf38      	it	cc
 8008b52:	2200      	movcc	r2, #0
 8008b54:	18a3      	adds	r3, r4, r2
 8008b56:	50a7      	str	r7, [r4, r2]
 8008b58:	b107      	cbz	r7, 8008b5c <rshift+0x68>
 8008b5a:	3304      	adds	r3, #4
 8008b5c:	1b1a      	subs	r2, r3, r4
 8008b5e:	42a3      	cmp	r3, r4
 8008b60:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008b64:	bf08      	it	eq
 8008b66:	2300      	moveq	r3, #0
 8008b68:	6102      	str	r2, [r0, #16]
 8008b6a:	bf08      	it	eq
 8008b6c:	6143      	streq	r3, [r0, #20]
 8008b6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008b72:	f8dc c000 	ldr.w	ip, [ip]
 8008b76:	fa0c fc08 	lsl.w	ip, ip, r8
 8008b7a:	ea4c 0707 	orr.w	r7, ip, r7
 8008b7e:	f849 7b04 	str.w	r7, [r9], #4
 8008b82:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008b86:	40cf      	lsrs	r7, r1
 8008b88:	e7da      	b.n	8008b40 <rshift+0x4c>
 8008b8a:	f851 cb04 	ldr.w	ip, [r1], #4
 8008b8e:	f847 cf04 	str.w	ip, [r7, #4]!
 8008b92:	e7c3      	b.n	8008b1c <rshift+0x28>
 8008b94:	4623      	mov	r3, r4
 8008b96:	e7e1      	b.n	8008b5c <rshift+0x68>

08008b98 <__hexdig_fun>:
 8008b98:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008b9c:	2b09      	cmp	r3, #9
 8008b9e:	d802      	bhi.n	8008ba6 <__hexdig_fun+0xe>
 8008ba0:	3820      	subs	r0, #32
 8008ba2:	b2c0      	uxtb	r0, r0
 8008ba4:	4770      	bx	lr
 8008ba6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008baa:	2b05      	cmp	r3, #5
 8008bac:	d801      	bhi.n	8008bb2 <__hexdig_fun+0x1a>
 8008bae:	3847      	subs	r0, #71	; 0x47
 8008bb0:	e7f7      	b.n	8008ba2 <__hexdig_fun+0xa>
 8008bb2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008bb6:	2b05      	cmp	r3, #5
 8008bb8:	d801      	bhi.n	8008bbe <__hexdig_fun+0x26>
 8008bba:	3827      	subs	r0, #39	; 0x27
 8008bbc:	e7f1      	b.n	8008ba2 <__hexdig_fun+0xa>
 8008bbe:	2000      	movs	r0, #0
 8008bc0:	4770      	bx	lr
	...

08008bc4 <__gethex>:
 8008bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bc8:	ed2d 8b02 	vpush	{d8}
 8008bcc:	b089      	sub	sp, #36	; 0x24
 8008bce:	ee08 0a10 	vmov	s16, r0
 8008bd2:	9304      	str	r3, [sp, #16]
 8008bd4:	4bb4      	ldr	r3, [pc, #720]	; (8008ea8 <__gethex+0x2e4>)
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	9301      	str	r3, [sp, #4]
 8008bda:	4618      	mov	r0, r3
 8008bdc:	468b      	mov	fp, r1
 8008bde:	4690      	mov	r8, r2
 8008be0:	f7f7 faf6 	bl	80001d0 <strlen>
 8008be4:	9b01      	ldr	r3, [sp, #4]
 8008be6:	f8db 2000 	ldr.w	r2, [fp]
 8008bea:	4403      	add	r3, r0
 8008bec:	4682      	mov	sl, r0
 8008bee:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008bf2:	9305      	str	r3, [sp, #20]
 8008bf4:	1c93      	adds	r3, r2, #2
 8008bf6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008bfa:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008bfe:	32fe      	adds	r2, #254	; 0xfe
 8008c00:	18d1      	adds	r1, r2, r3
 8008c02:	461f      	mov	r7, r3
 8008c04:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008c08:	9100      	str	r1, [sp, #0]
 8008c0a:	2830      	cmp	r0, #48	; 0x30
 8008c0c:	d0f8      	beq.n	8008c00 <__gethex+0x3c>
 8008c0e:	f7ff ffc3 	bl	8008b98 <__hexdig_fun>
 8008c12:	4604      	mov	r4, r0
 8008c14:	2800      	cmp	r0, #0
 8008c16:	d13a      	bne.n	8008c8e <__gethex+0xca>
 8008c18:	9901      	ldr	r1, [sp, #4]
 8008c1a:	4652      	mov	r2, sl
 8008c1c:	4638      	mov	r0, r7
 8008c1e:	f001 fa33 	bl	800a088 <strncmp>
 8008c22:	4605      	mov	r5, r0
 8008c24:	2800      	cmp	r0, #0
 8008c26:	d168      	bne.n	8008cfa <__gethex+0x136>
 8008c28:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008c2c:	eb07 060a 	add.w	r6, r7, sl
 8008c30:	f7ff ffb2 	bl	8008b98 <__hexdig_fun>
 8008c34:	2800      	cmp	r0, #0
 8008c36:	d062      	beq.n	8008cfe <__gethex+0x13a>
 8008c38:	4633      	mov	r3, r6
 8008c3a:	7818      	ldrb	r0, [r3, #0]
 8008c3c:	2830      	cmp	r0, #48	; 0x30
 8008c3e:	461f      	mov	r7, r3
 8008c40:	f103 0301 	add.w	r3, r3, #1
 8008c44:	d0f9      	beq.n	8008c3a <__gethex+0x76>
 8008c46:	f7ff ffa7 	bl	8008b98 <__hexdig_fun>
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	fab0 f480 	clz	r4, r0
 8008c50:	0964      	lsrs	r4, r4, #5
 8008c52:	4635      	mov	r5, r6
 8008c54:	9300      	str	r3, [sp, #0]
 8008c56:	463a      	mov	r2, r7
 8008c58:	4616      	mov	r6, r2
 8008c5a:	3201      	adds	r2, #1
 8008c5c:	7830      	ldrb	r0, [r6, #0]
 8008c5e:	f7ff ff9b 	bl	8008b98 <__hexdig_fun>
 8008c62:	2800      	cmp	r0, #0
 8008c64:	d1f8      	bne.n	8008c58 <__gethex+0x94>
 8008c66:	9901      	ldr	r1, [sp, #4]
 8008c68:	4652      	mov	r2, sl
 8008c6a:	4630      	mov	r0, r6
 8008c6c:	f001 fa0c 	bl	800a088 <strncmp>
 8008c70:	b980      	cbnz	r0, 8008c94 <__gethex+0xd0>
 8008c72:	b94d      	cbnz	r5, 8008c88 <__gethex+0xc4>
 8008c74:	eb06 050a 	add.w	r5, r6, sl
 8008c78:	462a      	mov	r2, r5
 8008c7a:	4616      	mov	r6, r2
 8008c7c:	3201      	adds	r2, #1
 8008c7e:	7830      	ldrb	r0, [r6, #0]
 8008c80:	f7ff ff8a 	bl	8008b98 <__hexdig_fun>
 8008c84:	2800      	cmp	r0, #0
 8008c86:	d1f8      	bne.n	8008c7a <__gethex+0xb6>
 8008c88:	1bad      	subs	r5, r5, r6
 8008c8a:	00ad      	lsls	r5, r5, #2
 8008c8c:	e004      	b.n	8008c98 <__gethex+0xd4>
 8008c8e:	2400      	movs	r4, #0
 8008c90:	4625      	mov	r5, r4
 8008c92:	e7e0      	b.n	8008c56 <__gethex+0x92>
 8008c94:	2d00      	cmp	r5, #0
 8008c96:	d1f7      	bne.n	8008c88 <__gethex+0xc4>
 8008c98:	7833      	ldrb	r3, [r6, #0]
 8008c9a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008c9e:	2b50      	cmp	r3, #80	; 0x50
 8008ca0:	d13b      	bne.n	8008d1a <__gethex+0x156>
 8008ca2:	7873      	ldrb	r3, [r6, #1]
 8008ca4:	2b2b      	cmp	r3, #43	; 0x2b
 8008ca6:	d02c      	beq.n	8008d02 <__gethex+0x13e>
 8008ca8:	2b2d      	cmp	r3, #45	; 0x2d
 8008caa:	d02e      	beq.n	8008d0a <__gethex+0x146>
 8008cac:	1c71      	adds	r1, r6, #1
 8008cae:	f04f 0900 	mov.w	r9, #0
 8008cb2:	7808      	ldrb	r0, [r1, #0]
 8008cb4:	f7ff ff70 	bl	8008b98 <__hexdig_fun>
 8008cb8:	1e43      	subs	r3, r0, #1
 8008cba:	b2db      	uxtb	r3, r3
 8008cbc:	2b18      	cmp	r3, #24
 8008cbe:	d82c      	bhi.n	8008d1a <__gethex+0x156>
 8008cc0:	f1a0 0210 	sub.w	r2, r0, #16
 8008cc4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008cc8:	f7ff ff66 	bl	8008b98 <__hexdig_fun>
 8008ccc:	1e43      	subs	r3, r0, #1
 8008cce:	b2db      	uxtb	r3, r3
 8008cd0:	2b18      	cmp	r3, #24
 8008cd2:	d91d      	bls.n	8008d10 <__gethex+0x14c>
 8008cd4:	f1b9 0f00 	cmp.w	r9, #0
 8008cd8:	d000      	beq.n	8008cdc <__gethex+0x118>
 8008cda:	4252      	negs	r2, r2
 8008cdc:	4415      	add	r5, r2
 8008cde:	f8cb 1000 	str.w	r1, [fp]
 8008ce2:	b1e4      	cbz	r4, 8008d1e <__gethex+0x15a>
 8008ce4:	9b00      	ldr	r3, [sp, #0]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	bf14      	ite	ne
 8008cea:	2700      	movne	r7, #0
 8008cec:	2706      	moveq	r7, #6
 8008cee:	4638      	mov	r0, r7
 8008cf0:	b009      	add	sp, #36	; 0x24
 8008cf2:	ecbd 8b02 	vpop	{d8}
 8008cf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cfa:	463e      	mov	r6, r7
 8008cfc:	4625      	mov	r5, r4
 8008cfe:	2401      	movs	r4, #1
 8008d00:	e7ca      	b.n	8008c98 <__gethex+0xd4>
 8008d02:	f04f 0900 	mov.w	r9, #0
 8008d06:	1cb1      	adds	r1, r6, #2
 8008d08:	e7d3      	b.n	8008cb2 <__gethex+0xee>
 8008d0a:	f04f 0901 	mov.w	r9, #1
 8008d0e:	e7fa      	b.n	8008d06 <__gethex+0x142>
 8008d10:	230a      	movs	r3, #10
 8008d12:	fb03 0202 	mla	r2, r3, r2, r0
 8008d16:	3a10      	subs	r2, #16
 8008d18:	e7d4      	b.n	8008cc4 <__gethex+0x100>
 8008d1a:	4631      	mov	r1, r6
 8008d1c:	e7df      	b.n	8008cde <__gethex+0x11a>
 8008d1e:	1bf3      	subs	r3, r6, r7
 8008d20:	3b01      	subs	r3, #1
 8008d22:	4621      	mov	r1, r4
 8008d24:	2b07      	cmp	r3, #7
 8008d26:	dc0b      	bgt.n	8008d40 <__gethex+0x17c>
 8008d28:	ee18 0a10 	vmov	r0, s16
 8008d2c:	f000 fa7e 	bl	800922c <_Balloc>
 8008d30:	4604      	mov	r4, r0
 8008d32:	b940      	cbnz	r0, 8008d46 <__gethex+0x182>
 8008d34:	4b5d      	ldr	r3, [pc, #372]	; (8008eac <__gethex+0x2e8>)
 8008d36:	4602      	mov	r2, r0
 8008d38:	21de      	movs	r1, #222	; 0xde
 8008d3a:	485d      	ldr	r0, [pc, #372]	; (8008eb0 <__gethex+0x2ec>)
 8008d3c:	f001 f9c6 	bl	800a0cc <__assert_func>
 8008d40:	3101      	adds	r1, #1
 8008d42:	105b      	asrs	r3, r3, #1
 8008d44:	e7ee      	b.n	8008d24 <__gethex+0x160>
 8008d46:	f100 0914 	add.w	r9, r0, #20
 8008d4a:	f04f 0b00 	mov.w	fp, #0
 8008d4e:	f1ca 0301 	rsb	r3, sl, #1
 8008d52:	f8cd 9008 	str.w	r9, [sp, #8]
 8008d56:	f8cd b000 	str.w	fp, [sp]
 8008d5a:	9306      	str	r3, [sp, #24]
 8008d5c:	42b7      	cmp	r7, r6
 8008d5e:	d340      	bcc.n	8008de2 <__gethex+0x21e>
 8008d60:	9802      	ldr	r0, [sp, #8]
 8008d62:	9b00      	ldr	r3, [sp, #0]
 8008d64:	f840 3b04 	str.w	r3, [r0], #4
 8008d68:	eba0 0009 	sub.w	r0, r0, r9
 8008d6c:	1080      	asrs	r0, r0, #2
 8008d6e:	0146      	lsls	r6, r0, #5
 8008d70:	6120      	str	r0, [r4, #16]
 8008d72:	4618      	mov	r0, r3
 8008d74:	f000 fb4c 	bl	8009410 <__hi0bits>
 8008d78:	1a30      	subs	r0, r6, r0
 8008d7a:	f8d8 6000 	ldr.w	r6, [r8]
 8008d7e:	42b0      	cmp	r0, r6
 8008d80:	dd63      	ble.n	8008e4a <__gethex+0x286>
 8008d82:	1b87      	subs	r7, r0, r6
 8008d84:	4639      	mov	r1, r7
 8008d86:	4620      	mov	r0, r4
 8008d88:	f000 fef0 	bl	8009b6c <__any_on>
 8008d8c:	4682      	mov	sl, r0
 8008d8e:	b1a8      	cbz	r0, 8008dbc <__gethex+0x1f8>
 8008d90:	1e7b      	subs	r3, r7, #1
 8008d92:	1159      	asrs	r1, r3, #5
 8008d94:	f003 021f 	and.w	r2, r3, #31
 8008d98:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008d9c:	f04f 0a01 	mov.w	sl, #1
 8008da0:	fa0a f202 	lsl.w	r2, sl, r2
 8008da4:	420a      	tst	r2, r1
 8008da6:	d009      	beq.n	8008dbc <__gethex+0x1f8>
 8008da8:	4553      	cmp	r3, sl
 8008daa:	dd05      	ble.n	8008db8 <__gethex+0x1f4>
 8008dac:	1eb9      	subs	r1, r7, #2
 8008dae:	4620      	mov	r0, r4
 8008db0:	f000 fedc 	bl	8009b6c <__any_on>
 8008db4:	2800      	cmp	r0, #0
 8008db6:	d145      	bne.n	8008e44 <__gethex+0x280>
 8008db8:	f04f 0a02 	mov.w	sl, #2
 8008dbc:	4639      	mov	r1, r7
 8008dbe:	4620      	mov	r0, r4
 8008dc0:	f7ff fe98 	bl	8008af4 <rshift>
 8008dc4:	443d      	add	r5, r7
 8008dc6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008dca:	42ab      	cmp	r3, r5
 8008dcc:	da4c      	bge.n	8008e68 <__gethex+0x2a4>
 8008dce:	ee18 0a10 	vmov	r0, s16
 8008dd2:	4621      	mov	r1, r4
 8008dd4:	f000 fa6a 	bl	80092ac <_Bfree>
 8008dd8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008dda:	2300      	movs	r3, #0
 8008ddc:	6013      	str	r3, [r2, #0]
 8008dde:	27a3      	movs	r7, #163	; 0xa3
 8008de0:	e785      	b.n	8008cee <__gethex+0x12a>
 8008de2:	1e73      	subs	r3, r6, #1
 8008de4:	9a05      	ldr	r2, [sp, #20]
 8008de6:	9303      	str	r3, [sp, #12]
 8008de8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008dec:	4293      	cmp	r3, r2
 8008dee:	d019      	beq.n	8008e24 <__gethex+0x260>
 8008df0:	f1bb 0f20 	cmp.w	fp, #32
 8008df4:	d107      	bne.n	8008e06 <__gethex+0x242>
 8008df6:	9b02      	ldr	r3, [sp, #8]
 8008df8:	9a00      	ldr	r2, [sp, #0]
 8008dfa:	f843 2b04 	str.w	r2, [r3], #4
 8008dfe:	9302      	str	r3, [sp, #8]
 8008e00:	2300      	movs	r3, #0
 8008e02:	9300      	str	r3, [sp, #0]
 8008e04:	469b      	mov	fp, r3
 8008e06:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008e0a:	f7ff fec5 	bl	8008b98 <__hexdig_fun>
 8008e0e:	9b00      	ldr	r3, [sp, #0]
 8008e10:	f000 000f 	and.w	r0, r0, #15
 8008e14:	fa00 f00b 	lsl.w	r0, r0, fp
 8008e18:	4303      	orrs	r3, r0
 8008e1a:	9300      	str	r3, [sp, #0]
 8008e1c:	f10b 0b04 	add.w	fp, fp, #4
 8008e20:	9b03      	ldr	r3, [sp, #12]
 8008e22:	e00d      	b.n	8008e40 <__gethex+0x27c>
 8008e24:	9b03      	ldr	r3, [sp, #12]
 8008e26:	9a06      	ldr	r2, [sp, #24]
 8008e28:	4413      	add	r3, r2
 8008e2a:	42bb      	cmp	r3, r7
 8008e2c:	d3e0      	bcc.n	8008df0 <__gethex+0x22c>
 8008e2e:	4618      	mov	r0, r3
 8008e30:	9901      	ldr	r1, [sp, #4]
 8008e32:	9307      	str	r3, [sp, #28]
 8008e34:	4652      	mov	r2, sl
 8008e36:	f001 f927 	bl	800a088 <strncmp>
 8008e3a:	9b07      	ldr	r3, [sp, #28]
 8008e3c:	2800      	cmp	r0, #0
 8008e3e:	d1d7      	bne.n	8008df0 <__gethex+0x22c>
 8008e40:	461e      	mov	r6, r3
 8008e42:	e78b      	b.n	8008d5c <__gethex+0x198>
 8008e44:	f04f 0a03 	mov.w	sl, #3
 8008e48:	e7b8      	b.n	8008dbc <__gethex+0x1f8>
 8008e4a:	da0a      	bge.n	8008e62 <__gethex+0x29e>
 8008e4c:	1a37      	subs	r7, r6, r0
 8008e4e:	4621      	mov	r1, r4
 8008e50:	ee18 0a10 	vmov	r0, s16
 8008e54:	463a      	mov	r2, r7
 8008e56:	f000 fc45 	bl	80096e4 <__lshift>
 8008e5a:	1bed      	subs	r5, r5, r7
 8008e5c:	4604      	mov	r4, r0
 8008e5e:	f100 0914 	add.w	r9, r0, #20
 8008e62:	f04f 0a00 	mov.w	sl, #0
 8008e66:	e7ae      	b.n	8008dc6 <__gethex+0x202>
 8008e68:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008e6c:	42a8      	cmp	r0, r5
 8008e6e:	dd72      	ble.n	8008f56 <__gethex+0x392>
 8008e70:	1b45      	subs	r5, r0, r5
 8008e72:	42ae      	cmp	r6, r5
 8008e74:	dc36      	bgt.n	8008ee4 <__gethex+0x320>
 8008e76:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008e7a:	2b02      	cmp	r3, #2
 8008e7c:	d02a      	beq.n	8008ed4 <__gethex+0x310>
 8008e7e:	2b03      	cmp	r3, #3
 8008e80:	d02c      	beq.n	8008edc <__gethex+0x318>
 8008e82:	2b01      	cmp	r3, #1
 8008e84:	d11c      	bne.n	8008ec0 <__gethex+0x2fc>
 8008e86:	42ae      	cmp	r6, r5
 8008e88:	d11a      	bne.n	8008ec0 <__gethex+0x2fc>
 8008e8a:	2e01      	cmp	r6, #1
 8008e8c:	d112      	bne.n	8008eb4 <__gethex+0x2f0>
 8008e8e:	9a04      	ldr	r2, [sp, #16]
 8008e90:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008e94:	6013      	str	r3, [r2, #0]
 8008e96:	2301      	movs	r3, #1
 8008e98:	6123      	str	r3, [r4, #16]
 8008e9a:	f8c9 3000 	str.w	r3, [r9]
 8008e9e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008ea0:	2762      	movs	r7, #98	; 0x62
 8008ea2:	601c      	str	r4, [r3, #0]
 8008ea4:	e723      	b.n	8008cee <__gethex+0x12a>
 8008ea6:	bf00      	nop
 8008ea8:	0800b6c8 	.word	0x0800b6c8
 8008eac:	0800b650 	.word	0x0800b650
 8008eb0:	0800b661 	.word	0x0800b661
 8008eb4:	1e71      	subs	r1, r6, #1
 8008eb6:	4620      	mov	r0, r4
 8008eb8:	f000 fe58 	bl	8009b6c <__any_on>
 8008ebc:	2800      	cmp	r0, #0
 8008ebe:	d1e6      	bne.n	8008e8e <__gethex+0x2ca>
 8008ec0:	ee18 0a10 	vmov	r0, s16
 8008ec4:	4621      	mov	r1, r4
 8008ec6:	f000 f9f1 	bl	80092ac <_Bfree>
 8008eca:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008ecc:	2300      	movs	r3, #0
 8008ece:	6013      	str	r3, [r2, #0]
 8008ed0:	2750      	movs	r7, #80	; 0x50
 8008ed2:	e70c      	b.n	8008cee <__gethex+0x12a>
 8008ed4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d1f2      	bne.n	8008ec0 <__gethex+0x2fc>
 8008eda:	e7d8      	b.n	8008e8e <__gethex+0x2ca>
 8008edc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d1d5      	bne.n	8008e8e <__gethex+0x2ca>
 8008ee2:	e7ed      	b.n	8008ec0 <__gethex+0x2fc>
 8008ee4:	1e6f      	subs	r7, r5, #1
 8008ee6:	f1ba 0f00 	cmp.w	sl, #0
 8008eea:	d131      	bne.n	8008f50 <__gethex+0x38c>
 8008eec:	b127      	cbz	r7, 8008ef8 <__gethex+0x334>
 8008eee:	4639      	mov	r1, r7
 8008ef0:	4620      	mov	r0, r4
 8008ef2:	f000 fe3b 	bl	8009b6c <__any_on>
 8008ef6:	4682      	mov	sl, r0
 8008ef8:	117b      	asrs	r3, r7, #5
 8008efa:	2101      	movs	r1, #1
 8008efc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008f00:	f007 071f 	and.w	r7, r7, #31
 8008f04:	fa01 f707 	lsl.w	r7, r1, r7
 8008f08:	421f      	tst	r7, r3
 8008f0a:	4629      	mov	r1, r5
 8008f0c:	4620      	mov	r0, r4
 8008f0e:	bf18      	it	ne
 8008f10:	f04a 0a02 	orrne.w	sl, sl, #2
 8008f14:	1b76      	subs	r6, r6, r5
 8008f16:	f7ff fded 	bl	8008af4 <rshift>
 8008f1a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008f1e:	2702      	movs	r7, #2
 8008f20:	f1ba 0f00 	cmp.w	sl, #0
 8008f24:	d048      	beq.n	8008fb8 <__gethex+0x3f4>
 8008f26:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008f2a:	2b02      	cmp	r3, #2
 8008f2c:	d015      	beq.n	8008f5a <__gethex+0x396>
 8008f2e:	2b03      	cmp	r3, #3
 8008f30:	d017      	beq.n	8008f62 <__gethex+0x39e>
 8008f32:	2b01      	cmp	r3, #1
 8008f34:	d109      	bne.n	8008f4a <__gethex+0x386>
 8008f36:	f01a 0f02 	tst.w	sl, #2
 8008f3a:	d006      	beq.n	8008f4a <__gethex+0x386>
 8008f3c:	f8d9 0000 	ldr.w	r0, [r9]
 8008f40:	ea4a 0a00 	orr.w	sl, sl, r0
 8008f44:	f01a 0f01 	tst.w	sl, #1
 8008f48:	d10e      	bne.n	8008f68 <__gethex+0x3a4>
 8008f4a:	f047 0710 	orr.w	r7, r7, #16
 8008f4e:	e033      	b.n	8008fb8 <__gethex+0x3f4>
 8008f50:	f04f 0a01 	mov.w	sl, #1
 8008f54:	e7d0      	b.n	8008ef8 <__gethex+0x334>
 8008f56:	2701      	movs	r7, #1
 8008f58:	e7e2      	b.n	8008f20 <__gethex+0x35c>
 8008f5a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008f5c:	f1c3 0301 	rsb	r3, r3, #1
 8008f60:	9315      	str	r3, [sp, #84]	; 0x54
 8008f62:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d0f0      	beq.n	8008f4a <__gethex+0x386>
 8008f68:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008f6c:	f104 0314 	add.w	r3, r4, #20
 8008f70:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008f74:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008f78:	f04f 0c00 	mov.w	ip, #0
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f82:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008f86:	d01c      	beq.n	8008fc2 <__gethex+0x3fe>
 8008f88:	3201      	adds	r2, #1
 8008f8a:	6002      	str	r2, [r0, #0]
 8008f8c:	2f02      	cmp	r7, #2
 8008f8e:	f104 0314 	add.w	r3, r4, #20
 8008f92:	d13f      	bne.n	8009014 <__gethex+0x450>
 8008f94:	f8d8 2000 	ldr.w	r2, [r8]
 8008f98:	3a01      	subs	r2, #1
 8008f9a:	42b2      	cmp	r2, r6
 8008f9c:	d10a      	bne.n	8008fb4 <__gethex+0x3f0>
 8008f9e:	1171      	asrs	r1, r6, #5
 8008fa0:	2201      	movs	r2, #1
 8008fa2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008fa6:	f006 061f 	and.w	r6, r6, #31
 8008faa:	fa02 f606 	lsl.w	r6, r2, r6
 8008fae:	421e      	tst	r6, r3
 8008fb0:	bf18      	it	ne
 8008fb2:	4617      	movne	r7, r2
 8008fb4:	f047 0720 	orr.w	r7, r7, #32
 8008fb8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008fba:	601c      	str	r4, [r3, #0]
 8008fbc:	9b04      	ldr	r3, [sp, #16]
 8008fbe:	601d      	str	r5, [r3, #0]
 8008fc0:	e695      	b.n	8008cee <__gethex+0x12a>
 8008fc2:	4299      	cmp	r1, r3
 8008fc4:	f843 cc04 	str.w	ip, [r3, #-4]
 8008fc8:	d8d8      	bhi.n	8008f7c <__gethex+0x3b8>
 8008fca:	68a3      	ldr	r3, [r4, #8]
 8008fcc:	459b      	cmp	fp, r3
 8008fce:	db19      	blt.n	8009004 <__gethex+0x440>
 8008fd0:	6861      	ldr	r1, [r4, #4]
 8008fd2:	ee18 0a10 	vmov	r0, s16
 8008fd6:	3101      	adds	r1, #1
 8008fd8:	f000 f928 	bl	800922c <_Balloc>
 8008fdc:	4681      	mov	r9, r0
 8008fde:	b918      	cbnz	r0, 8008fe8 <__gethex+0x424>
 8008fe0:	4b1a      	ldr	r3, [pc, #104]	; (800904c <__gethex+0x488>)
 8008fe2:	4602      	mov	r2, r0
 8008fe4:	2184      	movs	r1, #132	; 0x84
 8008fe6:	e6a8      	b.n	8008d3a <__gethex+0x176>
 8008fe8:	6922      	ldr	r2, [r4, #16]
 8008fea:	3202      	adds	r2, #2
 8008fec:	f104 010c 	add.w	r1, r4, #12
 8008ff0:	0092      	lsls	r2, r2, #2
 8008ff2:	300c      	adds	r0, #12
 8008ff4:	f000 f90c 	bl	8009210 <memcpy>
 8008ff8:	4621      	mov	r1, r4
 8008ffa:	ee18 0a10 	vmov	r0, s16
 8008ffe:	f000 f955 	bl	80092ac <_Bfree>
 8009002:	464c      	mov	r4, r9
 8009004:	6923      	ldr	r3, [r4, #16]
 8009006:	1c5a      	adds	r2, r3, #1
 8009008:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800900c:	6122      	str	r2, [r4, #16]
 800900e:	2201      	movs	r2, #1
 8009010:	615a      	str	r2, [r3, #20]
 8009012:	e7bb      	b.n	8008f8c <__gethex+0x3c8>
 8009014:	6922      	ldr	r2, [r4, #16]
 8009016:	455a      	cmp	r2, fp
 8009018:	dd0b      	ble.n	8009032 <__gethex+0x46e>
 800901a:	2101      	movs	r1, #1
 800901c:	4620      	mov	r0, r4
 800901e:	f7ff fd69 	bl	8008af4 <rshift>
 8009022:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009026:	3501      	adds	r5, #1
 8009028:	42ab      	cmp	r3, r5
 800902a:	f6ff aed0 	blt.w	8008dce <__gethex+0x20a>
 800902e:	2701      	movs	r7, #1
 8009030:	e7c0      	b.n	8008fb4 <__gethex+0x3f0>
 8009032:	f016 061f 	ands.w	r6, r6, #31
 8009036:	d0fa      	beq.n	800902e <__gethex+0x46a>
 8009038:	4453      	add	r3, sl
 800903a:	f1c6 0620 	rsb	r6, r6, #32
 800903e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009042:	f000 f9e5 	bl	8009410 <__hi0bits>
 8009046:	42b0      	cmp	r0, r6
 8009048:	dbe7      	blt.n	800901a <__gethex+0x456>
 800904a:	e7f0      	b.n	800902e <__gethex+0x46a>
 800904c:	0800b650 	.word	0x0800b650

08009050 <L_shift>:
 8009050:	f1c2 0208 	rsb	r2, r2, #8
 8009054:	0092      	lsls	r2, r2, #2
 8009056:	b570      	push	{r4, r5, r6, lr}
 8009058:	f1c2 0620 	rsb	r6, r2, #32
 800905c:	6843      	ldr	r3, [r0, #4]
 800905e:	6804      	ldr	r4, [r0, #0]
 8009060:	fa03 f506 	lsl.w	r5, r3, r6
 8009064:	432c      	orrs	r4, r5
 8009066:	40d3      	lsrs	r3, r2
 8009068:	6004      	str	r4, [r0, #0]
 800906a:	f840 3f04 	str.w	r3, [r0, #4]!
 800906e:	4288      	cmp	r0, r1
 8009070:	d3f4      	bcc.n	800905c <L_shift+0xc>
 8009072:	bd70      	pop	{r4, r5, r6, pc}

08009074 <__match>:
 8009074:	b530      	push	{r4, r5, lr}
 8009076:	6803      	ldr	r3, [r0, #0]
 8009078:	3301      	adds	r3, #1
 800907a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800907e:	b914      	cbnz	r4, 8009086 <__match+0x12>
 8009080:	6003      	str	r3, [r0, #0]
 8009082:	2001      	movs	r0, #1
 8009084:	bd30      	pop	{r4, r5, pc}
 8009086:	f813 2b01 	ldrb.w	r2, [r3], #1
 800908a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800908e:	2d19      	cmp	r5, #25
 8009090:	bf98      	it	ls
 8009092:	3220      	addls	r2, #32
 8009094:	42a2      	cmp	r2, r4
 8009096:	d0f0      	beq.n	800907a <__match+0x6>
 8009098:	2000      	movs	r0, #0
 800909a:	e7f3      	b.n	8009084 <__match+0x10>

0800909c <__hexnan>:
 800909c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090a0:	680b      	ldr	r3, [r1, #0]
 80090a2:	115e      	asrs	r6, r3, #5
 80090a4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80090a8:	f013 031f 	ands.w	r3, r3, #31
 80090ac:	b087      	sub	sp, #28
 80090ae:	bf18      	it	ne
 80090b0:	3604      	addne	r6, #4
 80090b2:	2500      	movs	r5, #0
 80090b4:	1f37      	subs	r7, r6, #4
 80090b6:	4690      	mov	r8, r2
 80090b8:	6802      	ldr	r2, [r0, #0]
 80090ba:	9301      	str	r3, [sp, #4]
 80090bc:	4682      	mov	sl, r0
 80090be:	f846 5c04 	str.w	r5, [r6, #-4]
 80090c2:	46b9      	mov	r9, r7
 80090c4:	463c      	mov	r4, r7
 80090c6:	9502      	str	r5, [sp, #8]
 80090c8:	46ab      	mov	fp, r5
 80090ca:	7851      	ldrb	r1, [r2, #1]
 80090cc:	1c53      	adds	r3, r2, #1
 80090ce:	9303      	str	r3, [sp, #12]
 80090d0:	b341      	cbz	r1, 8009124 <__hexnan+0x88>
 80090d2:	4608      	mov	r0, r1
 80090d4:	9205      	str	r2, [sp, #20]
 80090d6:	9104      	str	r1, [sp, #16]
 80090d8:	f7ff fd5e 	bl	8008b98 <__hexdig_fun>
 80090dc:	2800      	cmp	r0, #0
 80090de:	d14f      	bne.n	8009180 <__hexnan+0xe4>
 80090e0:	9904      	ldr	r1, [sp, #16]
 80090e2:	9a05      	ldr	r2, [sp, #20]
 80090e4:	2920      	cmp	r1, #32
 80090e6:	d818      	bhi.n	800911a <__hexnan+0x7e>
 80090e8:	9b02      	ldr	r3, [sp, #8]
 80090ea:	459b      	cmp	fp, r3
 80090ec:	dd13      	ble.n	8009116 <__hexnan+0x7a>
 80090ee:	454c      	cmp	r4, r9
 80090f0:	d206      	bcs.n	8009100 <__hexnan+0x64>
 80090f2:	2d07      	cmp	r5, #7
 80090f4:	dc04      	bgt.n	8009100 <__hexnan+0x64>
 80090f6:	462a      	mov	r2, r5
 80090f8:	4649      	mov	r1, r9
 80090fa:	4620      	mov	r0, r4
 80090fc:	f7ff ffa8 	bl	8009050 <L_shift>
 8009100:	4544      	cmp	r4, r8
 8009102:	d950      	bls.n	80091a6 <__hexnan+0x10a>
 8009104:	2300      	movs	r3, #0
 8009106:	f1a4 0904 	sub.w	r9, r4, #4
 800910a:	f844 3c04 	str.w	r3, [r4, #-4]
 800910e:	f8cd b008 	str.w	fp, [sp, #8]
 8009112:	464c      	mov	r4, r9
 8009114:	461d      	mov	r5, r3
 8009116:	9a03      	ldr	r2, [sp, #12]
 8009118:	e7d7      	b.n	80090ca <__hexnan+0x2e>
 800911a:	2929      	cmp	r1, #41	; 0x29
 800911c:	d156      	bne.n	80091cc <__hexnan+0x130>
 800911e:	3202      	adds	r2, #2
 8009120:	f8ca 2000 	str.w	r2, [sl]
 8009124:	f1bb 0f00 	cmp.w	fp, #0
 8009128:	d050      	beq.n	80091cc <__hexnan+0x130>
 800912a:	454c      	cmp	r4, r9
 800912c:	d206      	bcs.n	800913c <__hexnan+0xa0>
 800912e:	2d07      	cmp	r5, #7
 8009130:	dc04      	bgt.n	800913c <__hexnan+0xa0>
 8009132:	462a      	mov	r2, r5
 8009134:	4649      	mov	r1, r9
 8009136:	4620      	mov	r0, r4
 8009138:	f7ff ff8a 	bl	8009050 <L_shift>
 800913c:	4544      	cmp	r4, r8
 800913e:	d934      	bls.n	80091aa <__hexnan+0x10e>
 8009140:	f1a8 0204 	sub.w	r2, r8, #4
 8009144:	4623      	mov	r3, r4
 8009146:	f853 1b04 	ldr.w	r1, [r3], #4
 800914a:	f842 1f04 	str.w	r1, [r2, #4]!
 800914e:	429f      	cmp	r7, r3
 8009150:	d2f9      	bcs.n	8009146 <__hexnan+0xaa>
 8009152:	1b3b      	subs	r3, r7, r4
 8009154:	f023 0303 	bic.w	r3, r3, #3
 8009158:	3304      	adds	r3, #4
 800915a:	3401      	adds	r4, #1
 800915c:	3e03      	subs	r6, #3
 800915e:	42b4      	cmp	r4, r6
 8009160:	bf88      	it	hi
 8009162:	2304      	movhi	r3, #4
 8009164:	4443      	add	r3, r8
 8009166:	2200      	movs	r2, #0
 8009168:	f843 2b04 	str.w	r2, [r3], #4
 800916c:	429f      	cmp	r7, r3
 800916e:	d2fb      	bcs.n	8009168 <__hexnan+0xcc>
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	b91b      	cbnz	r3, 800917c <__hexnan+0xe0>
 8009174:	4547      	cmp	r7, r8
 8009176:	d127      	bne.n	80091c8 <__hexnan+0x12c>
 8009178:	2301      	movs	r3, #1
 800917a:	603b      	str	r3, [r7, #0]
 800917c:	2005      	movs	r0, #5
 800917e:	e026      	b.n	80091ce <__hexnan+0x132>
 8009180:	3501      	adds	r5, #1
 8009182:	2d08      	cmp	r5, #8
 8009184:	f10b 0b01 	add.w	fp, fp, #1
 8009188:	dd06      	ble.n	8009198 <__hexnan+0xfc>
 800918a:	4544      	cmp	r4, r8
 800918c:	d9c3      	bls.n	8009116 <__hexnan+0x7a>
 800918e:	2300      	movs	r3, #0
 8009190:	f844 3c04 	str.w	r3, [r4, #-4]
 8009194:	2501      	movs	r5, #1
 8009196:	3c04      	subs	r4, #4
 8009198:	6822      	ldr	r2, [r4, #0]
 800919a:	f000 000f 	and.w	r0, r0, #15
 800919e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80091a2:	6022      	str	r2, [r4, #0]
 80091a4:	e7b7      	b.n	8009116 <__hexnan+0x7a>
 80091a6:	2508      	movs	r5, #8
 80091a8:	e7b5      	b.n	8009116 <__hexnan+0x7a>
 80091aa:	9b01      	ldr	r3, [sp, #4]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d0df      	beq.n	8009170 <__hexnan+0xd4>
 80091b0:	f04f 32ff 	mov.w	r2, #4294967295
 80091b4:	f1c3 0320 	rsb	r3, r3, #32
 80091b8:	fa22 f303 	lsr.w	r3, r2, r3
 80091bc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80091c0:	401a      	ands	r2, r3
 80091c2:	f846 2c04 	str.w	r2, [r6, #-4]
 80091c6:	e7d3      	b.n	8009170 <__hexnan+0xd4>
 80091c8:	3f04      	subs	r7, #4
 80091ca:	e7d1      	b.n	8009170 <__hexnan+0xd4>
 80091cc:	2004      	movs	r0, #4
 80091ce:	b007      	add	sp, #28
 80091d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080091d4 <_localeconv_r>:
 80091d4:	4800      	ldr	r0, [pc, #0]	; (80091d8 <_localeconv_r+0x4>)
 80091d6:	4770      	bx	lr
 80091d8:	20000164 	.word	0x20000164

080091dc <malloc>:
 80091dc:	4b02      	ldr	r3, [pc, #8]	; (80091e8 <malloc+0xc>)
 80091de:	4601      	mov	r1, r0
 80091e0:	6818      	ldr	r0, [r3, #0]
 80091e2:	f000 bd67 	b.w	8009cb4 <_malloc_r>
 80091e6:	bf00      	nop
 80091e8:	2000000c 	.word	0x2000000c

080091ec <__ascii_mbtowc>:
 80091ec:	b082      	sub	sp, #8
 80091ee:	b901      	cbnz	r1, 80091f2 <__ascii_mbtowc+0x6>
 80091f0:	a901      	add	r1, sp, #4
 80091f2:	b142      	cbz	r2, 8009206 <__ascii_mbtowc+0x1a>
 80091f4:	b14b      	cbz	r3, 800920a <__ascii_mbtowc+0x1e>
 80091f6:	7813      	ldrb	r3, [r2, #0]
 80091f8:	600b      	str	r3, [r1, #0]
 80091fa:	7812      	ldrb	r2, [r2, #0]
 80091fc:	1e10      	subs	r0, r2, #0
 80091fe:	bf18      	it	ne
 8009200:	2001      	movne	r0, #1
 8009202:	b002      	add	sp, #8
 8009204:	4770      	bx	lr
 8009206:	4610      	mov	r0, r2
 8009208:	e7fb      	b.n	8009202 <__ascii_mbtowc+0x16>
 800920a:	f06f 0001 	mvn.w	r0, #1
 800920e:	e7f8      	b.n	8009202 <__ascii_mbtowc+0x16>

08009210 <memcpy>:
 8009210:	440a      	add	r2, r1
 8009212:	4291      	cmp	r1, r2
 8009214:	f100 33ff 	add.w	r3, r0, #4294967295
 8009218:	d100      	bne.n	800921c <memcpy+0xc>
 800921a:	4770      	bx	lr
 800921c:	b510      	push	{r4, lr}
 800921e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009222:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009226:	4291      	cmp	r1, r2
 8009228:	d1f9      	bne.n	800921e <memcpy+0xe>
 800922a:	bd10      	pop	{r4, pc}

0800922c <_Balloc>:
 800922c:	b570      	push	{r4, r5, r6, lr}
 800922e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009230:	4604      	mov	r4, r0
 8009232:	460d      	mov	r5, r1
 8009234:	b976      	cbnz	r6, 8009254 <_Balloc+0x28>
 8009236:	2010      	movs	r0, #16
 8009238:	f7ff ffd0 	bl	80091dc <malloc>
 800923c:	4602      	mov	r2, r0
 800923e:	6260      	str	r0, [r4, #36]	; 0x24
 8009240:	b920      	cbnz	r0, 800924c <_Balloc+0x20>
 8009242:	4b18      	ldr	r3, [pc, #96]	; (80092a4 <_Balloc+0x78>)
 8009244:	4818      	ldr	r0, [pc, #96]	; (80092a8 <_Balloc+0x7c>)
 8009246:	2166      	movs	r1, #102	; 0x66
 8009248:	f000 ff40 	bl	800a0cc <__assert_func>
 800924c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009250:	6006      	str	r6, [r0, #0]
 8009252:	60c6      	str	r6, [r0, #12]
 8009254:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009256:	68f3      	ldr	r3, [r6, #12]
 8009258:	b183      	cbz	r3, 800927c <_Balloc+0x50>
 800925a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800925c:	68db      	ldr	r3, [r3, #12]
 800925e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009262:	b9b8      	cbnz	r0, 8009294 <_Balloc+0x68>
 8009264:	2101      	movs	r1, #1
 8009266:	fa01 f605 	lsl.w	r6, r1, r5
 800926a:	1d72      	adds	r2, r6, #5
 800926c:	0092      	lsls	r2, r2, #2
 800926e:	4620      	mov	r0, r4
 8009270:	f000 fc9d 	bl	8009bae <_calloc_r>
 8009274:	b160      	cbz	r0, 8009290 <_Balloc+0x64>
 8009276:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800927a:	e00e      	b.n	800929a <_Balloc+0x6e>
 800927c:	2221      	movs	r2, #33	; 0x21
 800927e:	2104      	movs	r1, #4
 8009280:	4620      	mov	r0, r4
 8009282:	f000 fc94 	bl	8009bae <_calloc_r>
 8009286:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009288:	60f0      	str	r0, [r6, #12]
 800928a:	68db      	ldr	r3, [r3, #12]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d1e4      	bne.n	800925a <_Balloc+0x2e>
 8009290:	2000      	movs	r0, #0
 8009292:	bd70      	pop	{r4, r5, r6, pc}
 8009294:	6802      	ldr	r2, [r0, #0]
 8009296:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800929a:	2300      	movs	r3, #0
 800929c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80092a0:	e7f7      	b.n	8009292 <_Balloc+0x66>
 80092a2:	bf00      	nop
 80092a4:	0800b5de 	.word	0x0800b5de
 80092a8:	0800b6dc 	.word	0x0800b6dc

080092ac <_Bfree>:
 80092ac:	b570      	push	{r4, r5, r6, lr}
 80092ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80092b0:	4605      	mov	r5, r0
 80092b2:	460c      	mov	r4, r1
 80092b4:	b976      	cbnz	r6, 80092d4 <_Bfree+0x28>
 80092b6:	2010      	movs	r0, #16
 80092b8:	f7ff ff90 	bl	80091dc <malloc>
 80092bc:	4602      	mov	r2, r0
 80092be:	6268      	str	r0, [r5, #36]	; 0x24
 80092c0:	b920      	cbnz	r0, 80092cc <_Bfree+0x20>
 80092c2:	4b09      	ldr	r3, [pc, #36]	; (80092e8 <_Bfree+0x3c>)
 80092c4:	4809      	ldr	r0, [pc, #36]	; (80092ec <_Bfree+0x40>)
 80092c6:	218a      	movs	r1, #138	; 0x8a
 80092c8:	f000 ff00 	bl	800a0cc <__assert_func>
 80092cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80092d0:	6006      	str	r6, [r0, #0]
 80092d2:	60c6      	str	r6, [r0, #12]
 80092d4:	b13c      	cbz	r4, 80092e6 <_Bfree+0x3a>
 80092d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80092d8:	6862      	ldr	r2, [r4, #4]
 80092da:	68db      	ldr	r3, [r3, #12]
 80092dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80092e0:	6021      	str	r1, [r4, #0]
 80092e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80092e6:	bd70      	pop	{r4, r5, r6, pc}
 80092e8:	0800b5de 	.word	0x0800b5de
 80092ec:	0800b6dc 	.word	0x0800b6dc

080092f0 <__multadd>:
 80092f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092f4:	690d      	ldr	r5, [r1, #16]
 80092f6:	4607      	mov	r7, r0
 80092f8:	460c      	mov	r4, r1
 80092fa:	461e      	mov	r6, r3
 80092fc:	f101 0c14 	add.w	ip, r1, #20
 8009300:	2000      	movs	r0, #0
 8009302:	f8dc 3000 	ldr.w	r3, [ip]
 8009306:	b299      	uxth	r1, r3
 8009308:	fb02 6101 	mla	r1, r2, r1, r6
 800930c:	0c1e      	lsrs	r6, r3, #16
 800930e:	0c0b      	lsrs	r3, r1, #16
 8009310:	fb02 3306 	mla	r3, r2, r6, r3
 8009314:	b289      	uxth	r1, r1
 8009316:	3001      	adds	r0, #1
 8009318:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800931c:	4285      	cmp	r5, r0
 800931e:	f84c 1b04 	str.w	r1, [ip], #4
 8009322:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009326:	dcec      	bgt.n	8009302 <__multadd+0x12>
 8009328:	b30e      	cbz	r6, 800936e <__multadd+0x7e>
 800932a:	68a3      	ldr	r3, [r4, #8]
 800932c:	42ab      	cmp	r3, r5
 800932e:	dc19      	bgt.n	8009364 <__multadd+0x74>
 8009330:	6861      	ldr	r1, [r4, #4]
 8009332:	4638      	mov	r0, r7
 8009334:	3101      	adds	r1, #1
 8009336:	f7ff ff79 	bl	800922c <_Balloc>
 800933a:	4680      	mov	r8, r0
 800933c:	b928      	cbnz	r0, 800934a <__multadd+0x5a>
 800933e:	4602      	mov	r2, r0
 8009340:	4b0c      	ldr	r3, [pc, #48]	; (8009374 <__multadd+0x84>)
 8009342:	480d      	ldr	r0, [pc, #52]	; (8009378 <__multadd+0x88>)
 8009344:	21b5      	movs	r1, #181	; 0xb5
 8009346:	f000 fec1 	bl	800a0cc <__assert_func>
 800934a:	6922      	ldr	r2, [r4, #16]
 800934c:	3202      	adds	r2, #2
 800934e:	f104 010c 	add.w	r1, r4, #12
 8009352:	0092      	lsls	r2, r2, #2
 8009354:	300c      	adds	r0, #12
 8009356:	f7ff ff5b 	bl	8009210 <memcpy>
 800935a:	4621      	mov	r1, r4
 800935c:	4638      	mov	r0, r7
 800935e:	f7ff ffa5 	bl	80092ac <_Bfree>
 8009362:	4644      	mov	r4, r8
 8009364:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009368:	3501      	adds	r5, #1
 800936a:	615e      	str	r6, [r3, #20]
 800936c:	6125      	str	r5, [r4, #16]
 800936e:	4620      	mov	r0, r4
 8009370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009374:	0800b650 	.word	0x0800b650
 8009378:	0800b6dc 	.word	0x0800b6dc

0800937c <__s2b>:
 800937c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009380:	460c      	mov	r4, r1
 8009382:	4615      	mov	r5, r2
 8009384:	461f      	mov	r7, r3
 8009386:	2209      	movs	r2, #9
 8009388:	3308      	adds	r3, #8
 800938a:	4606      	mov	r6, r0
 800938c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009390:	2100      	movs	r1, #0
 8009392:	2201      	movs	r2, #1
 8009394:	429a      	cmp	r2, r3
 8009396:	db09      	blt.n	80093ac <__s2b+0x30>
 8009398:	4630      	mov	r0, r6
 800939a:	f7ff ff47 	bl	800922c <_Balloc>
 800939e:	b940      	cbnz	r0, 80093b2 <__s2b+0x36>
 80093a0:	4602      	mov	r2, r0
 80093a2:	4b19      	ldr	r3, [pc, #100]	; (8009408 <__s2b+0x8c>)
 80093a4:	4819      	ldr	r0, [pc, #100]	; (800940c <__s2b+0x90>)
 80093a6:	21ce      	movs	r1, #206	; 0xce
 80093a8:	f000 fe90 	bl	800a0cc <__assert_func>
 80093ac:	0052      	lsls	r2, r2, #1
 80093ae:	3101      	adds	r1, #1
 80093b0:	e7f0      	b.n	8009394 <__s2b+0x18>
 80093b2:	9b08      	ldr	r3, [sp, #32]
 80093b4:	6143      	str	r3, [r0, #20]
 80093b6:	2d09      	cmp	r5, #9
 80093b8:	f04f 0301 	mov.w	r3, #1
 80093bc:	6103      	str	r3, [r0, #16]
 80093be:	dd16      	ble.n	80093ee <__s2b+0x72>
 80093c0:	f104 0909 	add.w	r9, r4, #9
 80093c4:	46c8      	mov	r8, r9
 80093c6:	442c      	add	r4, r5
 80093c8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80093cc:	4601      	mov	r1, r0
 80093ce:	3b30      	subs	r3, #48	; 0x30
 80093d0:	220a      	movs	r2, #10
 80093d2:	4630      	mov	r0, r6
 80093d4:	f7ff ff8c 	bl	80092f0 <__multadd>
 80093d8:	45a0      	cmp	r8, r4
 80093da:	d1f5      	bne.n	80093c8 <__s2b+0x4c>
 80093dc:	f1a5 0408 	sub.w	r4, r5, #8
 80093e0:	444c      	add	r4, r9
 80093e2:	1b2d      	subs	r5, r5, r4
 80093e4:	1963      	adds	r3, r4, r5
 80093e6:	42bb      	cmp	r3, r7
 80093e8:	db04      	blt.n	80093f4 <__s2b+0x78>
 80093ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80093ee:	340a      	adds	r4, #10
 80093f0:	2509      	movs	r5, #9
 80093f2:	e7f6      	b.n	80093e2 <__s2b+0x66>
 80093f4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80093f8:	4601      	mov	r1, r0
 80093fa:	3b30      	subs	r3, #48	; 0x30
 80093fc:	220a      	movs	r2, #10
 80093fe:	4630      	mov	r0, r6
 8009400:	f7ff ff76 	bl	80092f0 <__multadd>
 8009404:	e7ee      	b.n	80093e4 <__s2b+0x68>
 8009406:	bf00      	nop
 8009408:	0800b650 	.word	0x0800b650
 800940c:	0800b6dc 	.word	0x0800b6dc

08009410 <__hi0bits>:
 8009410:	0c03      	lsrs	r3, r0, #16
 8009412:	041b      	lsls	r3, r3, #16
 8009414:	b9d3      	cbnz	r3, 800944c <__hi0bits+0x3c>
 8009416:	0400      	lsls	r0, r0, #16
 8009418:	2310      	movs	r3, #16
 800941a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800941e:	bf04      	itt	eq
 8009420:	0200      	lsleq	r0, r0, #8
 8009422:	3308      	addeq	r3, #8
 8009424:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009428:	bf04      	itt	eq
 800942a:	0100      	lsleq	r0, r0, #4
 800942c:	3304      	addeq	r3, #4
 800942e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009432:	bf04      	itt	eq
 8009434:	0080      	lsleq	r0, r0, #2
 8009436:	3302      	addeq	r3, #2
 8009438:	2800      	cmp	r0, #0
 800943a:	db05      	blt.n	8009448 <__hi0bits+0x38>
 800943c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009440:	f103 0301 	add.w	r3, r3, #1
 8009444:	bf08      	it	eq
 8009446:	2320      	moveq	r3, #32
 8009448:	4618      	mov	r0, r3
 800944a:	4770      	bx	lr
 800944c:	2300      	movs	r3, #0
 800944e:	e7e4      	b.n	800941a <__hi0bits+0xa>

08009450 <__lo0bits>:
 8009450:	6803      	ldr	r3, [r0, #0]
 8009452:	f013 0207 	ands.w	r2, r3, #7
 8009456:	4601      	mov	r1, r0
 8009458:	d00b      	beq.n	8009472 <__lo0bits+0x22>
 800945a:	07da      	lsls	r2, r3, #31
 800945c:	d423      	bmi.n	80094a6 <__lo0bits+0x56>
 800945e:	0798      	lsls	r0, r3, #30
 8009460:	bf49      	itett	mi
 8009462:	085b      	lsrmi	r3, r3, #1
 8009464:	089b      	lsrpl	r3, r3, #2
 8009466:	2001      	movmi	r0, #1
 8009468:	600b      	strmi	r3, [r1, #0]
 800946a:	bf5c      	itt	pl
 800946c:	600b      	strpl	r3, [r1, #0]
 800946e:	2002      	movpl	r0, #2
 8009470:	4770      	bx	lr
 8009472:	b298      	uxth	r0, r3
 8009474:	b9a8      	cbnz	r0, 80094a2 <__lo0bits+0x52>
 8009476:	0c1b      	lsrs	r3, r3, #16
 8009478:	2010      	movs	r0, #16
 800947a:	b2da      	uxtb	r2, r3
 800947c:	b90a      	cbnz	r2, 8009482 <__lo0bits+0x32>
 800947e:	3008      	adds	r0, #8
 8009480:	0a1b      	lsrs	r3, r3, #8
 8009482:	071a      	lsls	r2, r3, #28
 8009484:	bf04      	itt	eq
 8009486:	091b      	lsreq	r3, r3, #4
 8009488:	3004      	addeq	r0, #4
 800948a:	079a      	lsls	r2, r3, #30
 800948c:	bf04      	itt	eq
 800948e:	089b      	lsreq	r3, r3, #2
 8009490:	3002      	addeq	r0, #2
 8009492:	07da      	lsls	r2, r3, #31
 8009494:	d403      	bmi.n	800949e <__lo0bits+0x4e>
 8009496:	085b      	lsrs	r3, r3, #1
 8009498:	f100 0001 	add.w	r0, r0, #1
 800949c:	d005      	beq.n	80094aa <__lo0bits+0x5a>
 800949e:	600b      	str	r3, [r1, #0]
 80094a0:	4770      	bx	lr
 80094a2:	4610      	mov	r0, r2
 80094a4:	e7e9      	b.n	800947a <__lo0bits+0x2a>
 80094a6:	2000      	movs	r0, #0
 80094a8:	4770      	bx	lr
 80094aa:	2020      	movs	r0, #32
 80094ac:	4770      	bx	lr
	...

080094b0 <__i2b>:
 80094b0:	b510      	push	{r4, lr}
 80094b2:	460c      	mov	r4, r1
 80094b4:	2101      	movs	r1, #1
 80094b6:	f7ff feb9 	bl	800922c <_Balloc>
 80094ba:	4602      	mov	r2, r0
 80094bc:	b928      	cbnz	r0, 80094ca <__i2b+0x1a>
 80094be:	4b05      	ldr	r3, [pc, #20]	; (80094d4 <__i2b+0x24>)
 80094c0:	4805      	ldr	r0, [pc, #20]	; (80094d8 <__i2b+0x28>)
 80094c2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80094c6:	f000 fe01 	bl	800a0cc <__assert_func>
 80094ca:	2301      	movs	r3, #1
 80094cc:	6144      	str	r4, [r0, #20]
 80094ce:	6103      	str	r3, [r0, #16]
 80094d0:	bd10      	pop	{r4, pc}
 80094d2:	bf00      	nop
 80094d4:	0800b650 	.word	0x0800b650
 80094d8:	0800b6dc 	.word	0x0800b6dc

080094dc <__multiply>:
 80094dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094e0:	4691      	mov	r9, r2
 80094e2:	690a      	ldr	r2, [r1, #16]
 80094e4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80094e8:	429a      	cmp	r2, r3
 80094ea:	bfb8      	it	lt
 80094ec:	460b      	movlt	r3, r1
 80094ee:	460c      	mov	r4, r1
 80094f0:	bfbc      	itt	lt
 80094f2:	464c      	movlt	r4, r9
 80094f4:	4699      	movlt	r9, r3
 80094f6:	6927      	ldr	r7, [r4, #16]
 80094f8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80094fc:	68a3      	ldr	r3, [r4, #8]
 80094fe:	6861      	ldr	r1, [r4, #4]
 8009500:	eb07 060a 	add.w	r6, r7, sl
 8009504:	42b3      	cmp	r3, r6
 8009506:	b085      	sub	sp, #20
 8009508:	bfb8      	it	lt
 800950a:	3101      	addlt	r1, #1
 800950c:	f7ff fe8e 	bl	800922c <_Balloc>
 8009510:	b930      	cbnz	r0, 8009520 <__multiply+0x44>
 8009512:	4602      	mov	r2, r0
 8009514:	4b44      	ldr	r3, [pc, #272]	; (8009628 <__multiply+0x14c>)
 8009516:	4845      	ldr	r0, [pc, #276]	; (800962c <__multiply+0x150>)
 8009518:	f240 115d 	movw	r1, #349	; 0x15d
 800951c:	f000 fdd6 	bl	800a0cc <__assert_func>
 8009520:	f100 0514 	add.w	r5, r0, #20
 8009524:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009528:	462b      	mov	r3, r5
 800952a:	2200      	movs	r2, #0
 800952c:	4543      	cmp	r3, r8
 800952e:	d321      	bcc.n	8009574 <__multiply+0x98>
 8009530:	f104 0314 	add.w	r3, r4, #20
 8009534:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009538:	f109 0314 	add.w	r3, r9, #20
 800953c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009540:	9202      	str	r2, [sp, #8]
 8009542:	1b3a      	subs	r2, r7, r4
 8009544:	3a15      	subs	r2, #21
 8009546:	f022 0203 	bic.w	r2, r2, #3
 800954a:	3204      	adds	r2, #4
 800954c:	f104 0115 	add.w	r1, r4, #21
 8009550:	428f      	cmp	r7, r1
 8009552:	bf38      	it	cc
 8009554:	2204      	movcc	r2, #4
 8009556:	9201      	str	r2, [sp, #4]
 8009558:	9a02      	ldr	r2, [sp, #8]
 800955a:	9303      	str	r3, [sp, #12]
 800955c:	429a      	cmp	r2, r3
 800955e:	d80c      	bhi.n	800957a <__multiply+0x9e>
 8009560:	2e00      	cmp	r6, #0
 8009562:	dd03      	ble.n	800956c <__multiply+0x90>
 8009564:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009568:	2b00      	cmp	r3, #0
 800956a:	d05a      	beq.n	8009622 <__multiply+0x146>
 800956c:	6106      	str	r6, [r0, #16]
 800956e:	b005      	add	sp, #20
 8009570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009574:	f843 2b04 	str.w	r2, [r3], #4
 8009578:	e7d8      	b.n	800952c <__multiply+0x50>
 800957a:	f8b3 a000 	ldrh.w	sl, [r3]
 800957e:	f1ba 0f00 	cmp.w	sl, #0
 8009582:	d024      	beq.n	80095ce <__multiply+0xf2>
 8009584:	f104 0e14 	add.w	lr, r4, #20
 8009588:	46a9      	mov	r9, r5
 800958a:	f04f 0c00 	mov.w	ip, #0
 800958e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009592:	f8d9 1000 	ldr.w	r1, [r9]
 8009596:	fa1f fb82 	uxth.w	fp, r2
 800959a:	b289      	uxth	r1, r1
 800959c:	fb0a 110b 	mla	r1, sl, fp, r1
 80095a0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80095a4:	f8d9 2000 	ldr.w	r2, [r9]
 80095a8:	4461      	add	r1, ip
 80095aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80095ae:	fb0a c20b 	mla	r2, sl, fp, ip
 80095b2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80095b6:	b289      	uxth	r1, r1
 80095b8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80095bc:	4577      	cmp	r7, lr
 80095be:	f849 1b04 	str.w	r1, [r9], #4
 80095c2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80095c6:	d8e2      	bhi.n	800958e <__multiply+0xb2>
 80095c8:	9a01      	ldr	r2, [sp, #4]
 80095ca:	f845 c002 	str.w	ip, [r5, r2]
 80095ce:	9a03      	ldr	r2, [sp, #12]
 80095d0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80095d4:	3304      	adds	r3, #4
 80095d6:	f1b9 0f00 	cmp.w	r9, #0
 80095da:	d020      	beq.n	800961e <__multiply+0x142>
 80095dc:	6829      	ldr	r1, [r5, #0]
 80095de:	f104 0c14 	add.w	ip, r4, #20
 80095e2:	46ae      	mov	lr, r5
 80095e4:	f04f 0a00 	mov.w	sl, #0
 80095e8:	f8bc b000 	ldrh.w	fp, [ip]
 80095ec:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80095f0:	fb09 220b 	mla	r2, r9, fp, r2
 80095f4:	4492      	add	sl, r2
 80095f6:	b289      	uxth	r1, r1
 80095f8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80095fc:	f84e 1b04 	str.w	r1, [lr], #4
 8009600:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009604:	f8be 1000 	ldrh.w	r1, [lr]
 8009608:	0c12      	lsrs	r2, r2, #16
 800960a:	fb09 1102 	mla	r1, r9, r2, r1
 800960e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009612:	4567      	cmp	r7, ip
 8009614:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009618:	d8e6      	bhi.n	80095e8 <__multiply+0x10c>
 800961a:	9a01      	ldr	r2, [sp, #4]
 800961c:	50a9      	str	r1, [r5, r2]
 800961e:	3504      	adds	r5, #4
 8009620:	e79a      	b.n	8009558 <__multiply+0x7c>
 8009622:	3e01      	subs	r6, #1
 8009624:	e79c      	b.n	8009560 <__multiply+0x84>
 8009626:	bf00      	nop
 8009628:	0800b650 	.word	0x0800b650
 800962c:	0800b6dc 	.word	0x0800b6dc

08009630 <__pow5mult>:
 8009630:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009634:	4615      	mov	r5, r2
 8009636:	f012 0203 	ands.w	r2, r2, #3
 800963a:	4606      	mov	r6, r0
 800963c:	460f      	mov	r7, r1
 800963e:	d007      	beq.n	8009650 <__pow5mult+0x20>
 8009640:	4c25      	ldr	r4, [pc, #148]	; (80096d8 <__pow5mult+0xa8>)
 8009642:	3a01      	subs	r2, #1
 8009644:	2300      	movs	r3, #0
 8009646:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800964a:	f7ff fe51 	bl	80092f0 <__multadd>
 800964e:	4607      	mov	r7, r0
 8009650:	10ad      	asrs	r5, r5, #2
 8009652:	d03d      	beq.n	80096d0 <__pow5mult+0xa0>
 8009654:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009656:	b97c      	cbnz	r4, 8009678 <__pow5mult+0x48>
 8009658:	2010      	movs	r0, #16
 800965a:	f7ff fdbf 	bl	80091dc <malloc>
 800965e:	4602      	mov	r2, r0
 8009660:	6270      	str	r0, [r6, #36]	; 0x24
 8009662:	b928      	cbnz	r0, 8009670 <__pow5mult+0x40>
 8009664:	4b1d      	ldr	r3, [pc, #116]	; (80096dc <__pow5mult+0xac>)
 8009666:	481e      	ldr	r0, [pc, #120]	; (80096e0 <__pow5mult+0xb0>)
 8009668:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800966c:	f000 fd2e 	bl	800a0cc <__assert_func>
 8009670:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009674:	6004      	str	r4, [r0, #0]
 8009676:	60c4      	str	r4, [r0, #12]
 8009678:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800967c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009680:	b94c      	cbnz	r4, 8009696 <__pow5mult+0x66>
 8009682:	f240 2171 	movw	r1, #625	; 0x271
 8009686:	4630      	mov	r0, r6
 8009688:	f7ff ff12 	bl	80094b0 <__i2b>
 800968c:	2300      	movs	r3, #0
 800968e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009692:	4604      	mov	r4, r0
 8009694:	6003      	str	r3, [r0, #0]
 8009696:	f04f 0900 	mov.w	r9, #0
 800969a:	07eb      	lsls	r3, r5, #31
 800969c:	d50a      	bpl.n	80096b4 <__pow5mult+0x84>
 800969e:	4639      	mov	r1, r7
 80096a0:	4622      	mov	r2, r4
 80096a2:	4630      	mov	r0, r6
 80096a4:	f7ff ff1a 	bl	80094dc <__multiply>
 80096a8:	4639      	mov	r1, r7
 80096aa:	4680      	mov	r8, r0
 80096ac:	4630      	mov	r0, r6
 80096ae:	f7ff fdfd 	bl	80092ac <_Bfree>
 80096b2:	4647      	mov	r7, r8
 80096b4:	106d      	asrs	r5, r5, #1
 80096b6:	d00b      	beq.n	80096d0 <__pow5mult+0xa0>
 80096b8:	6820      	ldr	r0, [r4, #0]
 80096ba:	b938      	cbnz	r0, 80096cc <__pow5mult+0x9c>
 80096bc:	4622      	mov	r2, r4
 80096be:	4621      	mov	r1, r4
 80096c0:	4630      	mov	r0, r6
 80096c2:	f7ff ff0b 	bl	80094dc <__multiply>
 80096c6:	6020      	str	r0, [r4, #0]
 80096c8:	f8c0 9000 	str.w	r9, [r0]
 80096cc:	4604      	mov	r4, r0
 80096ce:	e7e4      	b.n	800969a <__pow5mult+0x6a>
 80096d0:	4638      	mov	r0, r7
 80096d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096d6:	bf00      	nop
 80096d8:	0800b828 	.word	0x0800b828
 80096dc:	0800b5de 	.word	0x0800b5de
 80096e0:	0800b6dc 	.word	0x0800b6dc

080096e4 <__lshift>:
 80096e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096e8:	460c      	mov	r4, r1
 80096ea:	6849      	ldr	r1, [r1, #4]
 80096ec:	6923      	ldr	r3, [r4, #16]
 80096ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80096f2:	68a3      	ldr	r3, [r4, #8]
 80096f4:	4607      	mov	r7, r0
 80096f6:	4691      	mov	r9, r2
 80096f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80096fc:	f108 0601 	add.w	r6, r8, #1
 8009700:	42b3      	cmp	r3, r6
 8009702:	db0b      	blt.n	800971c <__lshift+0x38>
 8009704:	4638      	mov	r0, r7
 8009706:	f7ff fd91 	bl	800922c <_Balloc>
 800970a:	4605      	mov	r5, r0
 800970c:	b948      	cbnz	r0, 8009722 <__lshift+0x3e>
 800970e:	4602      	mov	r2, r0
 8009710:	4b2a      	ldr	r3, [pc, #168]	; (80097bc <__lshift+0xd8>)
 8009712:	482b      	ldr	r0, [pc, #172]	; (80097c0 <__lshift+0xdc>)
 8009714:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009718:	f000 fcd8 	bl	800a0cc <__assert_func>
 800971c:	3101      	adds	r1, #1
 800971e:	005b      	lsls	r3, r3, #1
 8009720:	e7ee      	b.n	8009700 <__lshift+0x1c>
 8009722:	2300      	movs	r3, #0
 8009724:	f100 0114 	add.w	r1, r0, #20
 8009728:	f100 0210 	add.w	r2, r0, #16
 800972c:	4618      	mov	r0, r3
 800972e:	4553      	cmp	r3, sl
 8009730:	db37      	blt.n	80097a2 <__lshift+0xbe>
 8009732:	6920      	ldr	r0, [r4, #16]
 8009734:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009738:	f104 0314 	add.w	r3, r4, #20
 800973c:	f019 091f 	ands.w	r9, r9, #31
 8009740:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009744:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009748:	d02f      	beq.n	80097aa <__lshift+0xc6>
 800974a:	f1c9 0e20 	rsb	lr, r9, #32
 800974e:	468a      	mov	sl, r1
 8009750:	f04f 0c00 	mov.w	ip, #0
 8009754:	681a      	ldr	r2, [r3, #0]
 8009756:	fa02 f209 	lsl.w	r2, r2, r9
 800975a:	ea42 020c 	orr.w	r2, r2, ip
 800975e:	f84a 2b04 	str.w	r2, [sl], #4
 8009762:	f853 2b04 	ldr.w	r2, [r3], #4
 8009766:	4298      	cmp	r0, r3
 8009768:	fa22 fc0e 	lsr.w	ip, r2, lr
 800976c:	d8f2      	bhi.n	8009754 <__lshift+0x70>
 800976e:	1b03      	subs	r3, r0, r4
 8009770:	3b15      	subs	r3, #21
 8009772:	f023 0303 	bic.w	r3, r3, #3
 8009776:	3304      	adds	r3, #4
 8009778:	f104 0215 	add.w	r2, r4, #21
 800977c:	4290      	cmp	r0, r2
 800977e:	bf38      	it	cc
 8009780:	2304      	movcc	r3, #4
 8009782:	f841 c003 	str.w	ip, [r1, r3]
 8009786:	f1bc 0f00 	cmp.w	ip, #0
 800978a:	d001      	beq.n	8009790 <__lshift+0xac>
 800978c:	f108 0602 	add.w	r6, r8, #2
 8009790:	3e01      	subs	r6, #1
 8009792:	4638      	mov	r0, r7
 8009794:	612e      	str	r6, [r5, #16]
 8009796:	4621      	mov	r1, r4
 8009798:	f7ff fd88 	bl	80092ac <_Bfree>
 800979c:	4628      	mov	r0, r5
 800979e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097a2:	f842 0f04 	str.w	r0, [r2, #4]!
 80097a6:	3301      	adds	r3, #1
 80097a8:	e7c1      	b.n	800972e <__lshift+0x4a>
 80097aa:	3904      	subs	r1, #4
 80097ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80097b0:	f841 2f04 	str.w	r2, [r1, #4]!
 80097b4:	4298      	cmp	r0, r3
 80097b6:	d8f9      	bhi.n	80097ac <__lshift+0xc8>
 80097b8:	e7ea      	b.n	8009790 <__lshift+0xac>
 80097ba:	bf00      	nop
 80097bc:	0800b650 	.word	0x0800b650
 80097c0:	0800b6dc 	.word	0x0800b6dc

080097c4 <__mcmp>:
 80097c4:	b530      	push	{r4, r5, lr}
 80097c6:	6902      	ldr	r2, [r0, #16]
 80097c8:	690c      	ldr	r4, [r1, #16]
 80097ca:	1b12      	subs	r2, r2, r4
 80097cc:	d10e      	bne.n	80097ec <__mcmp+0x28>
 80097ce:	f100 0314 	add.w	r3, r0, #20
 80097d2:	3114      	adds	r1, #20
 80097d4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80097d8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80097dc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80097e0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80097e4:	42a5      	cmp	r5, r4
 80097e6:	d003      	beq.n	80097f0 <__mcmp+0x2c>
 80097e8:	d305      	bcc.n	80097f6 <__mcmp+0x32>
 80097ea:	2201      	movs	r2, #1
 80097ec:	4610      	mov	r0, r2
 80097ee:	bd30      	pop	{r4, r5, pc}
 80097f0:	4283      	cmp	r3, r0
 80097f2:	d3f3      	bcc.n	80097dc <__mcmp+0x18>
 80097f4:	e7fa      	b.n	80097ec <__mcmp+0x28>
 80097f6:	f04f 32ff 	mov.w	r2, #4294967295
 80097fa:	e7f7      	b.n	80097ec <__mcmp+0x28>

080097fc <__mdiff>:
 80097fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009800:	460c      	mov	r4, r1
 8009802:	4606      	mov	r6, r0
 8009804:	4611      	mov	r1, r2
 8009806:	4620      	mov	r0, r4
 8009808:	4690      	mov	r8, r2
 800980a:	f7ff ffdb 	bl	80097c4 <__mcmp>
 800980e:	1e05      	subs	r5, r0, #0
 8009810:	d110      	bne.n	8009834 <__mdiff+0x38>
 8009812:	4629      	mov	r1, r5
 8009814:	4630      	mov	r0, r6
 8009816:	f7ff fd09 	bl	800922c <_Balloc>
 800981a:	b930      	cbnz	r0, 800982a <__mdiff+0x2e>
 800981c:	4b3a      	ldr	r3, [pc, #232]	; (8009908 <__mdiff+0x10c>)
 800981e:	4602      	mov	r2, r0
 8009820:	f240 2132 	movw	r1, #562	; 0x232
 8009824:	4839      	ldr	r0, [pc, #228]	; (800990c <__mdiff+0x110>)
 8009826:	f000 fc51 	bl	800a0cc <__assert_func>
 800982a:	2301      	movs	r3, #1
 800982c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009830:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009834:	bfa4      	itt	ge
 8009836:	4643      	movge	r3, r8
 8009838:	46a0      	movge	r8, r4
 800983a:	4630      	mov	r0, r6
 800983c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009840:	bfa6      	itte	ge
 8009842:	461c      	movge	r4, r3
 8009844:	2500      	movge	r5, #0
 8009846:	2501      	movlt	r5, #1
 8009848:	f7ff fcf0 	bl	800922c <_Balloc>
 800984c:	b920      	cbnz	r0, 8009858 <__mdiff+0x5c>
 800984e:	4b2e      	ldr	r3, [pc, #184]	; (8009908 <__mdiff+0x10c>)
 8009850:	4602      	mov	r2, r0
 8009852:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009856:	e7e5      	b.n	8009824 <__mdiff+0x28>
 8009858:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800985c:	6926      	ldr	r6, [r4, #16]
 800985e:	60c5      	str	r5, [r0, #12]
 8009860:	f104 0914 	add.w	r9, r4, #20
 8009864:	f108 0514 	add.w	r5, r8, #20
 8009868:	f100 0e14 	add.w	lr, r0, #20
 800986c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009870:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009874:	f108 0210 	add.w	r2, r8, #16
 8009878:	46f2      	mov	sl, lr
 800987a:	2100      	movs	r1, #0
 800987c:	f859 3b04 	ldr.w	r3, [r9], #4
 8009880:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009884:	fa1f f883 	uxth.w	r8, r3
 8009888:	fa11 f18b 	uxtah	r1, r1, fp
 800988c:	0c1b      	lsrs	r3, r3, #16
 800988e:	eba1 0808 	sub.w	r8, r1, r8
 8009892:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009896:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800989a:	fa1f f888 	uxth.w	r8, r8
 800989e:	1419      	asrs	r1, r3, #16
 80098a0:	454e      	cmp	r6, r9
 80098a2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80098a6:	f84a 3b04 	str.w	r3, [sl], #4
 80098aa:	d8e7      	bhi.n	800987c <__mdiff+0x80>
 80098ac:	1b33      	subs	r3, r6, r4
 80098ae:	3b15      	subs	r3, #21
 80098b0:	f023 0303 	bic.w	r3, r3, #3
 80098b4:	3304      	adds	r3, #4
 80098b6:	3415      	adds	r4, #21
 80098b8:	42a6      	cmp	r6, r4
 80098ba:	bf38      	it	cc
 80098bc:	2304      	movcc	r3, #4
 80098be:	441d      	add	r5, r3
 80098c0:	4473      	add	r3, lr
 80098c2:	469e      	mov	lr, r3
 80098c4:	462e      	mov	r6, r5
 80098c6:	4566      	cmp	r6, ip
 80098c8:	d30e      	bcc.n	80098e8 <__mdiff+0xec>
 80098ca:	f10c 0203 	add.w	r2, ip, #3
 80098ce:	1b52      	subs	r2, r2, r5
 80098d0:	f022 0203 	bic.w	r2, r2, #3
 80098d4:	3d03      	subs	r5, #3
 80098d6:	45ac      	cmp	ip, r5
 80098d8:	bf38      	it	cc
 80098da:	2200      	movcc	r2, #0
 80098dc:	441a      	add	r2, r3
 80098de:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80098e2:	b17b      	cbz	r3, 8009904 <__mdiff+0x108>
 80098e4:	6107      	str	r7, [r0, #16]
 80098e6:	e7a3      	b.n	8009830 <__mdiff+0x34>
 80098e8:	f856 8b04 	ldr.w	r8, [r6], #4
 80098ec:	fa11 f288 	uxtah	r2, r1, r8
 80098f0:	1414      	asrs	r4, r2, #16
 80098f2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80098f6:	b292      	uxth	r2, r2
 80098f8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80098fc:	f84e 2b04 	str.w	r2, [lr], #4
 8009900:	1421      	asrs	r1, r4, #16
 8009902:	e7e0      	b.n	80098c6 <__mdiff+0xca>
 8009904:	3f01      	subs	r7, #1
 8009906:	e7ea      	b.n	80098de <__mdiff+0xe2>
 8009908:	0800b650 	.word	0x0800b650
 800990c:	0800b6dc 	.word	0x0800b6dc

08009910 <__ulp>:
 8009910:	b082      	sub	sp, #8
 8009912:	ed8d 0b00 	vstr	d0, [sp]
 8009916:	9b01      	ldr	r3, [sp, #4]
 8009918:	4912      	ldr	r1, [pc, #72]	; (8009964 <__ulp+0x54>)
 800991a:	4019      	ands	r1, r3
 800991c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8009920:	2900      	cmp	r1, #0
 8009922:	dd05      	ble.n	8009930 <__ulp+0x20>
 8009924:	2200      	movs	r2, #0
 8009926:	460b      	mov	r3, r1
 8009928:	ec43 2b10 	vmov	d0, r2, r3
 800992c:	b002      	add	sp, #8
 800992e:	4770      	bx	lr
 8009930:	4249      	negs	r1, r1
 8009932:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8009936:	ea4f 5021 	mov.w	r0, r1, asr #20
 800993a:	f04f 0200 	mov.w	r2, #0
 800993e:	f04f 0300 	mov.w	r3, #0
 8009942:	da04      	bge.n	800994e <__ulp+0x3e>
 8009944:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8009948:	fa41 f300 	asr.w	r3, r1, r0
 800994c:	e7ec      	b.n	8009928 <__ulp+0x18>
 800994e:	f1a0 0114 	sub.w	r1, r0, #20
 8009952:	291e      	cmp	r1, #30
 8009954:	bfda      	itte	le
 8009956:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800995a:	fa20 f101 	lsrle.w	r1, r0, r1
 800995e:	2101      	movgt	r1, #1
 8009960:	460a      	mov	r2, r1
 8009962:	e7e1      	b.n	8009928 <__ulp+0x18>
 8009964:	7ff00000 	.word	0x7ff00000

08009968 <__b2d>:
 8009968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800996a:	6905      	ldr	r5, [r0, #16]
 800996c:	f100 0714 	add.w	r7, r0, #20
 8009970:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009974:	1f2e      	subs	r6, r5, #4
 8009976:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800997a:	4620      	mov	r0, r4
 800997c:	f7ff fd48 	bl	8009410 <__hi0bits>
 8009980:	f1c0 0320 	rsb	r3, r0, #32
 8009984:	280a      	cmp	r0, #10
 8009986:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8009a04 <__b2d+0x9c>
 800998a:	600b      	str	r3, [r1, #0]
 800998c:	dc14      	bgt.n	80099b8 <__b2d+0x50>
 800998e:	f1c0 0e0b 	rsb	lr, r0, #11
 8009992:	fa24 f10e 	lsr.w	r1, r4, lr
 8009996:	42b7      	cmp	r7, r6
 8009998:	ea41 030c 	orr.w	r3, r1, ip
 800999c:	bf34      	ite	cc
 800999e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80099a2:	2100      	movcs	r1, #0
 80099a4:	3015      	adds	r0, #21
 80099a6:	fa04 f000 	lsl.w	r0, r4, r0
 80099aa:	fa21 f10e 	lsr.w	r1, r1, lr
 80099ae:	ea40 0201 	orr.w	r2, r0, r1
 80099b2:	ec43 2b10 	vmov	d0, r2, r3
 80099b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099b8:	42b7      	cmp	r7, r6
 80099ba:	bf3a      	itte	cc
 80099bc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80099c0:	f1a5 0608 	subcc.w	r6, r5, #8
 80099c4:	2100      	movcs	r1, #0
 80099c6:	380b      	subs	r0, #11
 80099c8:	d017      	beq.n	80099fa <__b2d+0x92>
 80099ca:	f1c0 0c20 	rsb	ip, r0, #32
 80099ce:	fa04 f500 	lsl.w	r5, r4, r0
 80099d2:	42be      	cmp	r6, r7
 80099d4:	fa21 f40c 	lsr.w	r4, r1, ip
 80099d8:	ea45 0504 	orr.w	r5, r5, r4
 80099dc:	bf8c      	ite	hi
 80099de:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80099e2:	2400      	movls	r4, #0
 80099e4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80099e8:	fa01 f000 	lsl.w	r0, r1, r0
 80099ec:	fa24 f40c 	lsr.w	r4, r4, ip
 80099f0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80099f4:	ea40 0204 	orr.w	r2, r0, r4
 80099f8:	e7db      	b.n	80099b2 <__b2d+0x4a>
 80099fa:	ea44 030c 	orr.w	r3, r4, ip
 80099fe:	460a      	mov	r2, r1
 8009a00:	e7d7      	b.n	80099b2 <__b2d+0x4a>
 8009a02:	bf00      	nop
 8009a04:	3ff00000 	.word	0x3ff00000

08009a08 <__d2b>:
 8009a08:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009a0c:	4689      	mov	r9, r1
 8009a0e:	2101      	movs	r1, #1
 8009a10:	ec57 6b10 	vmov	r6, r7, d0
 8009a14:	4690      	mov	r8, r2
 8009a16:	f7ff fc09 	bl	800922c <_Balloc>
 8009a1a:	4604      	mov	r4, r0
 8009a1c:	b930      	cbnz	r0, 8009a2c <__d2b+0x24>
 8009a1e:	4602      	mov	r2, r0
 8009a20:	4b25      	ldr	r3, [pc, #148]	; (8009ab8 <__d2b+0xb0>)
 8009a22:	4826      	ldr	r0, [pc, #152]	; (8009abc <__d2b+0xb4>)
 8009a24:	f240 310a 	movw	r1, #778	; 0x30a
 8009a28:	f000 fb50 	bl	800a0cc <__assert_func>
 8009a2c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009a30:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009a34:	bb35      	cbnz	r5, 8009a84 <__d2b+0x7c>
 8009a36:	2e00      	cmp	r6, #0
 8009a38:	9301      	str	r3, [sp, #4]
 8009a3a:	d028      	beq.n	8009a8e <__d2b+0x86>
 8009a3c:	4668      	mov	r0, sp
 8009a3e:	9600      	str	r6, [sp, #0]
 8009a40:	f7ff fd06 	bl	8009450 <__lo0bits>
 8009a44:	9900      	ldr	r1, [sp, #0]
 8009a46:	b300      	cbz	r0, 8009a8a <__d2b+0x82>
 8009a48:	9a01      	ldr	r2, [sp, #4]
 8009a4a:	f1c0 0320 	rsb	r3, r0, #32
 8009a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8009a52:	430b      	orrs	r3, r1
 8009a54:	40c2      	lsrs	r2, r0
 8009a56:	6163      	str	r3, [r4, #20]
 8009a58:	9201      	str	r2, [sp, #4]
 8009a5a:	9b01      	ldr	r3, [sp, #4]
 8009a5c:	61a3      	str	r3, [r4, #24]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	bf14      	ite	ne
 8009a62:	2202      	movne	r2, #2
 8009a64:	2201      	moveq	r2, #1
 8009a66:	6122      	str	r2, [r4, #16]
 8009a68:	b1d5      	cbz	r5, 8009aa0 <__d2b+0x98>
 8009a6a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009a6e:	4405      	add	r5, r0
 8009a70:	f8c9 5000 	str.w	r5, [r9]
 8009a74:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009a78:	f8c8 0000 	str.w	r0, [r8]
 8009a7c:	4620      	mov	r0, r4
 8009a7e:	b003      	add	sp, #12
 8009a80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009a84:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009a88:	e7d5      	b.n	8009a36 <__d2b+0x2e>
 8009a8a:	6161      	str	r1, [r4, #20]
 8009a8c:	e7e5      	b.n	8009a5a <__d2b+0x52>
 8009a8e:	a801      	add	r0, sp, #4
 8009a90:	f7ff fcde 	bl	8009450 <__lo0bits>
 8009a94:	9b01      	ldr	r3, [sp, #4]
 8009a96:	6163      	str	r3, [r4, #20]
 8009a98:	2201      	movs	r2, #1
 8009a9a:	6122      	str	r2, [r4, #16]
 8009a9c:	3020      	adds	r0, #32
 8009a9e:	e7e3      	b.n	8009a68 <__d2b+0x60>
 8009aa0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009aa4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009aa8:	f8c9 0000 	str.w	r0, [r9]
 8009aac:	6918      	ldr	r0, [r3, #16]
 8009aae:	f7ff fcaf 	bl	8009410 <__hi0bits>
 8009ab2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009ab6:	e7df      	b.n	8009a78 <__d2b+0x70>
 8009ab8:	0800b650 	.word	0x0800b650
 8009abc:	0800b6dc 	.word	0x0800b6dc

08009ac0 <__ratio>:
 8009ac0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ac4:	4688      	mov	r8, r1
 8009ac6:	4669      	mov	r1, sp
 8009ac8:	4681      	mov	r9, r0
 8009aca:	f7ff ff4d 	bl	8009968 <__b2d>
 8009ace:	a901      	add	r1, sp, #4
 8009ad0:	4640      	mov	r0, r8
 8009ad2:	ec55 4b10 	vmov	r4, r5, d0
 8009ad6:	f7ff ff47 	bl	8009968 <__b2d>
 8009ada:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009ade:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009ae2:	eba3 0c02 	sub.w	ip, r3, r2
 8009ae6:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009aea:	1a9b      	subs	r3, r3, r2
 8009aec:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009af0:	ec51 0b10 	vmov	r0, r1, d0
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	bfd6      	itet	le
 8009af8:	460a      	movle	r2, r1
 8009afa:	462a      	movgt	r2, r5
 8009afc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009b00:	468b      	mov	fp, r1
 8009b02:	462f      	mov	r7, r5
 8009b04:	bfd4      	ite	le
 8009b06:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009b0a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009b0e:	4620      	mov	r0, r4
 8009b10:	ee10 2a10 	vmov	r2, s0
 8009b14:	465b      	mov	r3, fp
 8009b16:	4639      	mov	r1, r7
 8009b18:	f7f6 fe98 	bl	800084c <__aeabi_ddiv>
 8009b1c:	ec41 0b10 	vmov	d0, r0, r1
 8009b20:	b003      	add	sp, #12
 8009b22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009b26 <__copybits>:
 8009b26:	3901      	subs	r1, #1
 8009b28:	b570      	push	{r4, r5, r6, lr}
 8009b2a:	1149      	asrs	r1, r1, #5
 8009b2c:	6914      	ldr	r4, [r2, #16]
 8009b2e:	3101      	adds	r1, #1
 8009b30:	f102 0314 	add.w	r3, r2, #20
 8009b34:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009b38:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009b3c:	1f05      	subs	r5, r0, #4
 8009b3e:	42a3      	cmp	r3, r4
 8009b40:	d30c      	bcc.n	8009b5c <__copybits+0x36>
 8009b42:	1aa3      	subs	r3, r4, r2
 8009b44:	3b11      	subs	r3, #17
 8009b46:	f023 0303 	bic.w	r3, r3, #3
 8009b4a:	3211      	adds	r2, #17
 8009b4c:	42a2      	cmp	r2, r4
 8009b4e:	bf88      	it	hi
 8009b50:	2300      	movhi	r3, #0
 8009b52:	4418      	add	r0, r3
 8009b54:	2300      	movs	r3, #0
 8009b56:	4288      	cmp	r0, r1
 8009b58:	d305      	bcc.n	8009b66 <__copybits+0x40>
 8009b5a:	bd70      	pop	{r4, r5, r6, pc}
 8009b5c:	f853 6b04 	ldr.w	r6, [r3], #4
 8009b60:	f845 6f04 	str.w	r6, [r5, #4]!
 8009b64:	e7eb      	b.n	8009b3e <__copybits+0x18>
 8009b66:	f840 3b04 	str.w	r3, [r0], #4
 8009b6a:	e7f4      	b.n	8009b56 <__copybits+0x30>

08009b6c <__any_on>:
 8009b6c:	f100 0214 	add.w	r2, r0, #20
 8009b70:	6900      	ldr	r0, [r0, #16]
 8009b72:	114b      	asrs	r3, r1, #5
 8009b74:	4298      	cmp	r0, r3
 8009b76:	b510      	push	{r4, lr}
 8009b78:	db11      	blt.n	8009b9e <__any_on+0x32>
 8009b7a:	dd0a      	ble.n	8009b92 <__any_on+0x26>
 8009b7c:	f011 011f 	ands.w	r1, r1, #31
 8009b80:	d007      	beq.n	8009b92 <__any_on+0x26>
 8009b82:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009b86:	fa24 f001 	lsr.w	r0, r4, r1
 8009b8a:	fa00 f101 	lsl.w	r1, r0, r1
 8009b8e:	428c      	cmp	r4, r1
 8009b90:	d10b      	bne.n	8009baa <__any_on+0x3e>
 8009b92:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009b96:	4293      	cmp	r3, r2
 8009b98:	d803      	bhi.n	8009ba2 <__any_on+0x36>
 8009b9a:	2000      	movs	r0, #0
 8009b9c:	bd10      	pop	{r4, pc}
 8009b9e:	4603      	mov	r3, r0
 8009ba0:	e7f7      	b.n	8009b92 <__any_on+0x26>
 8009ba2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009ba6:	2900      	cmp	r1, #0
 8009ba8:	d0f5      	beq.n	8009b96 <__any_on+0x2a>
 8009baa:	2001      	movs	r0, #1
 8009bac:	e7f6      	b.n	8009b9c <__any_on+0x30>

08009bae <_calloc_r>:
 8009bae:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009bb0:	fba1 2402 	umull	r2, r4, r1, r2
 8009bb4:	b94c      	cbnz	r4, 8009bca <_calloc_r+0x1c>
 8009bb6:	4611      	mov	r1, r2
 8009bb8:	9201      	str	r2, [sp, #4]
 8009bba:	f000 f87b 	bl	8009cb4 <_malloc_r>
 8009bbe:	9a01      	ldr	r2, [sp, #4]
 8009bc0:	4605      	mov	r5, r0
 8009bc2:	b930      	cbnz	r0, 8009bd2 <_calloc_r+0x24>
 8009bc4:	4628      	mov	r0, r5
 8009bc6:	b003      	add	sp, #12
 8009bc8:	bd30      	pop	{r4, r5, pc}
 8009bca:	220c      	movs	r2, #12
 8009bcc:	6002      	str	r2, [r0, #0]
 8009bce:	2500      	movs	r5, #0
 8009bd0:	e7f8      	b.n	8009bc4 <_calloc_r+0x16>
 8009bd2:	4621      	mov	r1, r4
 8009bd4:	f7fc fbc0 	bl	8006358 <memset>
 8009bd8:	e7f4      	b.n	8009bc4 <_calloc_r+0x16>
	...

08009bdc <_free_r>:
 8009bdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009bde:	2900      	cmp	r1, #0
 8009be0:	d044      	beq.n	8009c6c <_free_r+0x90>
 8009be2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009be6:	9001      	str	r0, [sp, #4]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	f1a1 0404 	sub.w	r4, r1, #4
 8009bee:	bfb8      	it	lt
 8009bf0:	18e4      	addlt	r4, r4, r3
 8009bf2:	f000 fab5 	bl	800a160 <__malloc_lock>
 8009bf6:	4a1e      	ldr	r2, [pc, #120]	; (8009c70 <_free_r+0x94>)
 8009bf8:	9801      	ldr	r0, [sp, #4]
 8009bfa:	6813      	ldr	r3, [r2, #0]
 8009bfc:	b933      	cbnz	r3, 8009c0c <_free_r+0x30>
 8009bfe:	6063      	str	r3, [r4, #4]
 8009c00:	6014      	str	r4, [r2, #0]
 8009c02:	b003      	add	sp, #12
 8009c04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009c08:	f000 bab0 	b.w	800a16c <__malloc_unlock>
 8009c0c:	42a3      	cmp	r3, r4
 8009c0e:	d908      	bls.n	8009c22 <_free_r+0x46>
 8009c10:	6825      	ldr	r5, [r4, #0]
 8009c12:	1961      	adds	r1, r4, r5
 8009c14:	428b      	cmp	r3, r1
 8009c16:	bf01      	itttt	eq
 8009c18:	6819      	ldreq	r1, [r3, #0]
 8009c1a:	685b      	ldreq	r3, [r3, #4]
 8009c1c:	1949      	addeq	r1, r1, r5
 8009c1e:	6021      	streq	r1, [r4, #0]
 8009c20:	e7ed      	b.n	8009bfe <_free_r+0x22>
 8009c22:	461a      	mov	r2, r3
 8009c24:	685b      	ldr	r3, [r3, #4]
 8009c26:	b10b      	cbz	r3, 8009c2c <_free_r+0x50>
 8009c28:	42a3      	cmp	r3, r4
 8009c2a:	d9fa      	bls.n	8009c22 <_free_r+0x46>
 8009c2c:	6811      	ldr	r1, [r2, #0]
 8009c2e:	1855      	adds	r5, r2, r1
 8009c30:	42a5      	cmp	r5, r4
 8009c32:	d10b      	bne.n	8009c4c <_free_r+0x70>
 8009c34:	6824      	ldr	r4, [r4, #0]
 8009c36:	4421      	add	r1, r4
 8009c38:	1854      	adds	r4, r2, r1
 8009c3a:	42a3      	cmp	r3, r4
 8009c3c:	6011      	str	r1, [r2, #0]
 8009c3e:	d1e0      	bne.n	8009c02 <_free_r+0x26>
 8009c40:	681c      	ldr	r4, [r3, #0]
 8009c42:	685b      	ldr	r3, [r3, #4]
 8009c44:	6053      	str	r3, [r2, #4]
 8009c46:	4421      	add	r1, r4
 8009c48:	6011      	str	r1, [r2, #0]
 8009c4a:	e7da      	b.n	8009c02 <_free_r+0x26>
 8009c4c:	d902      	bls.n	8009c54 <_free_r+0x78>
 8009c4e:	230c      	movs	r3, #12
 8009c50:	6003      	str	r3, [r0, #0]
 8009c52:	e7d6      	b.n	8009c02 <_free_r+0x26>
 8009c54:	6825      	ldr	r5, [r4, #0]
 8009c56:	1961      	adds	r1, r4, r5
 8009c58:	428b      	cmp	r3, r1
 8009c5a:	bf04      	itt	eq
 8009c5c:	6819      	ldreq	r1, [r3, #0]
 8009c5e:	685b      	ldreq	r3, [r3, #4]
 8009c60:	6063      	str	r3, [r4, #4]
 8009c62:	bf04      	itt	eq
 8009c64:	1949      	addeq	r1, r1, r5
 8009c66:	6021      	streq	r1, [r4, #0]
 8009c68:	6054      	str	r4, [r2, #4]
 8009c6a:	e7ca      	b.n	8009c02 <_free_r+0x26>
 8009c6c:	b003      	add	sp, #12
 8009c6e:	bd30      	pop	{r4, r5, pc}
 8009c70:	2000037c 	.word	0x2000037c

08009c74 <sbrk_aligned>:
 8009c74:	b570      	push	{r4, r5, r6, lr}
 8009c76:	4e0e      	ldr	r6, [pc, #56]	; (8009cb0 <sbrk_aligned+0x3c>)
 8009c78:	460c      	mov	r4, r1
 8009c7a:	6831      	ldr	r1, [r6, #0]
 8009c7c:	4605      	mov	r5, r0
 8009c7e:	b911      	cbnz	r1, 8009c86 <sbrk_aligned+0x12>
 8009c80:	f000 f9f2 	bl	800a068 <_sbrk_r>
 8009c84:	6030      	str	r0, [r6, #0]
 8009c86:	4621      	mov	r1, r4
 8009c88:	4628      	mov	r0, r5
 8009c8a:	f000 f9ed 	bl	800a068 <_sbrk_r>
 8009c8e:	1c43      	adds	r3, r0, #1
 8009c90:	d00a      	beq.n	8009ca8 <sbrk_aligned+0x34>
 8009c92:	1cc4      	adds	r4, r0, #3
 8009c94:	f024 0403 	bic.w	r4, r4, #3
 8009c98:	42a0      	cmp	r0, r4
 8009c9a:	d007      	beq.n	8009cac <sbrk_aligned+0x38>
 8009c9c:	1a21      	subs	r1, r4, r0
 8009c9e:	4628      	mov	r0, r5
 8009ca0:	f000 f9e2 	bl	800a068 <_sbrk_r>
 8009ca4:	3001      	adds	r0, #1
 8009ca6:	d101      	bne.n	8009cac <sbrk_aligned+0x38>
 8009ca8:	f04f 34ff 	mov.w	r4, #4294967295
 8009cac:	4620      	mov	r0, r4
 8009cae:	bd70      	pop	{r4, r5, r6, pc}
 8009cb0:	20000380 	.word	0x20000380

08009cb4 <_malloc_r>:
 8009cb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cb8:	1ccd      	adds	r5, r1, #3
 8009cba:	f025 0503 	bic.w	r5, r5, #3
 8009cbe:	3508      	adds	r5, #8
 8009cc0:	2d0c      	cmp	r5, #12
 8009cc2:	bf38      	it	cc
 8009cc4:	250c      	movcc	r5, #12
 8009cc6:	2d00      	cmp	r5, #0
 8009cc8:	4607      	mov	r7, r0
 8009cca:	db01      	blt.n	8009cd0 <_malloc_r+0x1c>
 8009ccc:	42a9      	cmp	r1, r5
 8009cce:	d905      	bls.n	8009cdc <_malloc_r+0x28>
 8009cd0:	230c      	movs	r3, #12
 8009cd2:	603b      	str	r3, [r7, #0]
 8009cd4:	2600      	movs	r6, #0
 8009cd6:	4630      	mov	r0, r6
 8009cd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009cdc:	4e2e      	ldr	r6, [pc, #184]	; (8009d98 <_malloc_r+0xe4>)
 8009cde:	f000 fa3f 	bl	800a160 <__malloc_lock>
 8009ce2:	6833      	ldr	r3, [r6, #0]
 8009ce4:	461c      	mov	r4, r3
 8009ce6:	bb34      	cbnz	r4, 8009d36 <_malloc_r+0x82>
 8009ce8:	4629      	mov	r1, r5
 8009cea:	4638      	mov	r0, r7
 8009cec:	f7ff ffc2 	bl	8009c74 <sbrk_aligned>
 8009cf0:	1c43      	adds	r3, r0, #1
 8009cf2:	4604      	mov	r4, r0
 8009cf4:	d14d      	bne.n	8009d92 <_malloc_r+0xde>
 8009cf6:	6834      	ldr	r4, [r6, #0]
 8009cf8:	4626      	mov	r6, r4
 8009cfa:	2e00      	cmp	r6, #0
 8009cfc:	d140      	bne.n	8009d80 <_malloc_r+0xcc>
 8009cfe:	6823      	ldr	r3, [r4, #0]
 8009d00:	4631      	mov	r1, r6
 8009d02:	4638      	mov	r0, r7
 8009d04:	eb04 0803 	add.w	r8, r4, r3
 8009d08:	f000 f9ae 	bl	800a068 <_sbrk_r>
 8009d0c:	4580      	cmp	r8, r0
 8009d0e:	d13a      	bne.n	8009d86 <_malloc_r+0xd2>
 8009d10:	6821      	ldr	r1, [r4, #0]
 8009d12:	3503      	adds	r5, #3
 8009d14:	1a6d      	subs	r5, r5, r1
 8009d16:	f025 0503 	bic.w	r5, r5, #3
 8009d1a:	3508      	adds	r5, #8
 8009d1c:	2d0c      	cmp	r5, #12
 8009d1e:	bf38      	it	cc
 8009d20:	250c      	movcc	r5, #12
 8009d22:	4629      	mov	r1, r5
 8009d24:	4638      	mov	r0, r7
 8009d26:	f7ff ffa5 	bl	8009c74 <sbrk_aligned>
 8009d2a:	3001      	adds	r0, #1
 8009d2c:	d02b      	beq.n	8009d86 <_malloc_r+0xd2>
 8009d2e:	6823      	ldr	r3, [r4, #0]
 8009d30:	442b      	add	r3, r5
 8009d32:	6023      	str	r3, [r4, #0]
 8009d34:	e00e      	b.n	8009d54 <_malloc_r+0xa0>
 8009d36:	6822      	ldr	r2, [r4, #0]
 8009d38:	1b52      	subs	r2, r2, r5
 8009d3a:	d41e      	bmi.n	8009d7a <_malloc_r+0xc6>
 8009d3c:	2a0b      	cmp	r2, #11
 8009d3e:	d916      	bls.n	8009d6e <_malloc_r+0xba>
 8009d40:	1961      	adds	r1, r4, r5
 8009d42:	42a3      	cmp	r3, r4
 8009d44:	6025      	str	r5, [r4, #0]
 8009d46:	bf18      	it	ne
 8009d48:	6059      	strne	r1, [r3, #4]
 8009d4a:	6863      	ldr	r3, [r4, #4]
 8009d4c:	bf08      	it	eq
 8009d4e:	6031      	streq	r1, [r6, #0]
 8009d50:	5162      	str	r2, [r4, r5]
 8009d52:	604b      	str	r3, [r1, #4]
 8009d54:	4638      	mov	r0, r7
 8009d56:	f104 060b 	add.w	r6, r4, #11
 8009d5a:	f000 fa07 	bl	800a16c <__malloc_unlock>
 8009d5e:	f026 0607 	bic.w	r6, r6, #7
 8009d62:	1d23      	adds	r3, r4, #4
 8009d64:	1af2      	subs	r2, r6, r3
 8009d66:	d0b6      	beq.n	8009cd6 <_malloc_r+0x22>
 8009d68:	1b9b      	subs	r3, r3, r6
 8009d6a:	50a3      	str	r3, [r4, r2]
 8009d6c:	e7b3      	b.n	8009cd6 <_malloc_r+0x22>
 8009d6e:	6862      	ldr	r2, [r4, #4]
 8009d70:	42a3      	cmp	r3, r4
 8009d72:	bf0c      	ite	eq
 8009d74:	6032      	streq	r2, [r6, #0]
 8009d76:	605a      	strne	r2, [r3, #4]
 8009d78:	e7ec      	b.n	8009d54 <_malloc_r+0xa0>
 8009d7a:	4623      	mov	r3, r4
 8009d7c:	6864      	ldr	r4, [r4, #4]
 8009d7e:	e7b2      	b.n	8009ce6 <_malloc_r+0x32>
 8009d80:	4634      	mov	r4, r6
 8009d82:	6876      	ldr	r6, [r6, #4]
 8009d84:	e7b9      	b.n	8009cfa <_malloc_r+0x46>
 8009d86:	230c      	movs	r3, #12
 8009d88:	603b      	str	r3, [r7, #0]
 8009d8a:	4638      	mov	r0, r7
 8009d8c:	f000 f9ee 	bl	800a16c <__malloc_unlock>
 8009d90:	e7a1      	b.n	8009cd6 <_malloc_r+0x22>
 8009d92:	6025      	str	r5, [r4, #0]
 8009d94:	e7de      	b.n	8009d54 <_malloc_r+0xa0>
 8009d96:	bf00      	nop
 8009d98:	2000037c 	.word	0x2000037c

08009d9c <__ssputs_r>:
 8009d9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009da0:	688e      	ldr	r6, [r1, #8]
 8009da2:	429e      	cmp	r6, r3
 8009da4:	4682      	mov	sl, r0
 8009da6:	460c      	mov	r4, r1
 8009da8:	4690      	mov	r8, r2
 8009daa:	461f      	mov	r7, r3
 8009dac:	d838      	bhi.n	8009e20 <__ssputs_r+0x84>
 8009dae:	898a      	ldrh	r2, [r1, #12]
 8009db0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009db4:	d032      	beq.n	8009e1c <__ssputs_r+0x80>
 8009db6:	6825      	ldr	r5, [r4, #0]
 8009db8:	6909      	ldr	r1, [r1, #16]
 8009dba:	eba5 0901 	sub.w	r9, r5, r1
 8009dbe:	6965      	ldr	r5, [r4, #20]
 8009dc0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009dc4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009dc8:	3301      	adds	r3, #1
 8009dca:	444b      	add	r3, r9
 8009dcc:	106d      	asrs	r5, r5, #1
 8009dce:	429d      	cmp	r5, r3
 8009dd0:	bf38      	it	cc
 8009dd2:	461d      	movcc	r5, r3
 8009dd4:	0553      	lsls	r3, r2, #21
 8009dd6:	d531      	bpl.n	8009e3c <__ssputs_r+0xa0>
 8009dd8:	4629      	mov	r1, r5
 8009dda:	f7ff ff6b 	bl	8009cb4 <_malloc_r>
 8009dde:	4606      	mov	r6, r0
 8009de0:	b950      	cbnz	r0, 8009df8 <__ssputs_r+0x5c>
 8009de2:	230c      	movs	r3, #12
 8009de4:	f8ca 3000 	str.w	r3, [sl]
 8009de8:	89a3      	ldrh	r3, [r4, #12]
 8009dea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009dee:	81a3      	strh	r3, [r4, #12]
 8009df0:	f04f 30ff 	mov.w	r0, #4294967295
 8009df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009df8:	6921      	ldr	r1, [r4, #16]
 8009dfa:	464a      	mov	r2, r9
 8009dfc:	f7ff fa08 	bl	8009210 <memcpy>
 8009e00:	89a3      	ldrh	r3, [r4, #12]
 8009e02:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009e06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e0a:	81a3      	strh	r3, [r4, #12]
 8009e0c:	6126      	str	r6, [r4, #16]
 8009e0e:	6165      	str	r5, [r4, #20]
 8009e10:	444e      	add	r6, r9
 8009e12:	eba5 0509 	sub.w	r5, r5, r9
 8009e16:	6026      	str	r6, [r4, #0]
 8009e18:	60a5      	str	r5, [r4, #8]
 8009e1a:	463e      	mov	r6, r7
 8009e1c:	42be      	cmp	r6, r7
 8009e1e:	d900      	bls.n	8009e22 <__ssputs_r+0x86>
 8009e20:	463e      	mov	r6, r7
 8009e22:	6820      	ldr	r0, [r4, #0]
 8009e24:	4632      	mov	r2, r6
 8009e26:	4641      	mov	r1, r8
 8009e28:	f000 f980 	bl	800a12c <memmove>
 8009e2c:	68a3      	ldr	r3, [r4, #8]
 8009e2e:	1b9b      	subs	r3, r3, r6
 8009e30:	60a3      	str	r3, [r4, #8]
 8009e32:	6823      	ldr	r3, [r4, #0]
 8009e34:	4433      	add	r3, r6
 8009e36:	6023      	str	r3, [r4, #0]
 8009e38:	2000      	movs	r0, #0
 8009e3a:	e7db      	b.n	8009df4 <__ssputs_r+0x58>
 8009e3c:	462a      	mov	r2, r5
 8009e3e:	f000 f99b 	bl	800a178 <_realloc_r>
 8009e42:	4606      	mov	r6, r0
 8009e44:	2800      	cmp	r0, #0
 8009e46:	d1e1      	bne.n	8009e0c <__ssputs_r+0x70>
 8009e48:	6921      	ldr	r1, [r4, #16]
 8009e4a:	4650      	mov	r0, sl
 8009e4c:	f7ff fec6 	bl	8009bdc <_free_r>
 8009e50:	e7c7      	b.n	8009de2 <__ssputs_r+0x46>
	...

08009e54 <_svfiprintf_r>:
 8009e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e58:	4698      	mov	r8, r3
 8009e5a:	898b      	ldrh	r3, [r1, #12]
 8009e5c:	061b      	lsls	r3, r3, #24
 8009e5e:	b09d      	sub	sp, #116	; 0x74
 8009e60:	4607      	mov	r7, r0
 8009e62:	460d      	mov	r5, r1
 8009e64:	4614      	mov	r4, r2
 8009e66:	d50e      	bpl.n	8009e86 <_svfiprintf_r+0x32>
 8009e68:	690b      	ldr	r3, [r1, #16]
 8009e6a:	b963      	cbnz	r3, 8009e86 <_svfiprintf_r+0x32>
 8009e6c:	2140      	movs	r1, #64	; 0x40
 8009e6e:	f7ff ff21 	bl	8009cb4 <_malloc_r>
 8009e72:	6028      	str	r0, [r5, #0]
 8009e74:	6128      	str	r0, [r5, #16]
 8009e76:	b920      	cbnz	r0, 8009e82 <_svfiprintf_r+0x2e>
 8009e78:	230c      	movs	r3, #12
 8009e7a:	603b      	str	r3, [r7, #0]
 8009e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8009e80:	e0d1      	b.n	800a026 <_svfiprintf_r+0x1d2>
 8009e82:	2340      	movs	r3, #64	; 0x40
 8009e84:	616b      	str	r3, [r5, #20]
 8009e86:	2300      	movs	r3, #0
 8009e88:	9309      	str	r3, [sp, #36]	; 0x24
 8009e8a:	2320      	movs	r3, #32
 8009e8c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009e90:	f8cd 800c 	str.w	r8, [sp, #12]
 8009e94:	2330      	movs	r3, #48	; 0x30
 8009e96:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a040 <_svfiprintf_r+0x1ec>
 8009e9a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009e9e:	f04f 0901 	mov.w	r9, #1
 8009ea2:	4623      	mov	r3, r4
 8009ea4:	469a      	mov	sl, r3
 8009ea6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009eaa:	b10a      	cbz	r2, 8009eb0 <_svfiprintf_r+0x5c>
 8009eac:	2a25      	cmp	r2, #37	; 0x25
 8009eae:	d1f9      	bne.n	8009ea4 <_svfiprintf_r+0x50>
 8009eb0:	ebba 0b04 	subs.w	fp, sl, r4
 8009eb4:	d00b      	beq.n	8009ece <_svfiprintf_r+0x7a>
 8009eb6:	465b      	mov	r3, fp
 8009eb8:	4622      	mov	r2, r4
 8009eba:	4629      	mov	r1, r5
 8009ebc:	4638      	mov	r0, r7
 8009ebe:	f7ff ff6d 	bl	8009d9c <__ssputs_r>
 8009ec2:	3001      	adds	r0, #1
 8009ec4:	f000 80aa 	beq.w	800a01c <_svfiprintf_r+0x1c8>
 8009ec8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009eca:	445a      	add	r2, fp
 8009ecc:	9209      	str	r2, [sp, #36]	; 0x24
 8009ece:	f89a 3000 	ldrb.w	r3, [sl]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	f000 80a2 	beq.w	800a01c <_svfiprintf_r+0x1c8>
 8009ed8:	2300      	movs	r3, #0
 8009eda:	f04f 32ff 	mov.w	r2, #4294967295
 8009ede:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ee2:	f10a 0a01 	add.w	sl, sl, #1
 8009ee6:	9304      	str	r3, [sp, #16]
 8009ee8:	9307      	str	r3, [sp, #28]
 8009eea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009eee:	931a      	str	r3, [sp, #104]	; 0x68
 8009ef0:	4654      	mov	r4, sl
 8009ef2:	2205      	movs	r2, #5
 8009ef4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ef8:	4851      	ldr	r0, [pc, #324]	; (800a040 <_svfiprintf_r+0x1ec>)
 8009efa:	f7f6 f971 	bl	80001e0 <memchr>
 8009efe:	9a04      	ldr	r2, [sp, #16]
 8009f00:	b9d8      	cbnz	r0, 8009f3a <_svfiprintf_r+0xe6>
 8009f02:	06d0      	lsls	r0, r2, #27
 8009f04:	bf44      	itt	mi
 8009f06:	2320      	movmi	r3, #32
 8009f08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f0c:	0711      	lsls	r1, r2, #28
 8009f0e:	bf44      	itt	mi
 8009f10:	232b      	movmi	r3, #43	; 0x2b
 8009f12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f16:	f89a 3000 	ldrb.w	r3, [sl]
 8009f1a:	2b2a      	cmp	r3, #42	; 0x2a
 8009f1c:	d015      	beq.n	8009f4a <_svfiprintf_r+0xf6>
 8009f1e:	9a07      	ldr	r2, [sp, #28]
 8009f20:	4654      	mov	r4, sl
 8009f22:	2000      	movs	r0, #0
 8009f24:	f04f 0c0a 	mov.w	ip, #10
 8009f28:	4621      	mov	r1, r4
 8009f2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009f2e:	3b30      	subs	r3, #48	; 0x30
 8009f30:	2b09      	cmp	r3, #9
 8009f32:	d94e      	bls.n	8009fd2 <_svfiprintf_r+0x17e>
 8009f34:	b1b0      	cbz	r0, 8009f64 <_svfiprintf_r+0x110>
 8009f36:	9207      	str	r2, [sp, #28]
 8009f38:	e014      	b.n	8009f64 <_svfiprintf_r+0x110>
 8009f3a:	eba0 0308 	sub.w	r3, r0, r8
 8009f3e:	fa09 f303 	lsl.w	r3, r9, r3
 8009f42:	4313      	orrs	r3, r2
 8009f44:	9304      	str	r3, [sp, #16]
 8009f46:	46a2      	mov	sl, r4
 8009f48:	e7d2      	b.n	8009ef0 <_svfiprintf_r+0x9c>
 8009f4a:	9b03      	ldr	r3, [sp, #12]
 8009f4c:	1d19      	adds	r1, r3, #4
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	9103      	str	r1, [sp, #12]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	bfbb      	ittet	lt
 8009f56:	425b      	neglt	r3, r3
 8009f58:	f042 0202 	orrlt.w	r2, r2, #2
 8009f5c:	9307      	strge	r3, [sp, #28]
 8009f5e:	9307      	strlt	r3, [sp, #28]
 8009f60:	bfb8      	it	lt
 8009f62:	9204      	strlt	r2, [sp, #16]
 8009f64:	7823      	ldrb	r3, [r4, #0]
 8009f66:	2b2e      	cmp	r3, #46	; 0x2e
 8009f68:	d10c      	bne.n	8009f84 <_svfiprintf_r+0x130>
 8009f6a:	7863      	ldrb	r3, [r4, #1]
 8009f6c:	2b2a      	cmp	r3, #42	; 0x2a
 8009f6e:	d135      	bne.n	8009fdc <_svfiprintf_r+0x188>
 8009f70:	9b03      	ldr	r3, [sp, #12]
 8009f72:	1d1a      	adds	r2, r3, #4
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	9203      	str	r2, [sp, #12]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	bfb8      	it	lt
 8009f7c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009f80:	3402      	adds	r4, #2
 8009f82:	9305      	str	r3, [sp, #20]
 8009f84:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a050 <_svfiprintf_r+0x1fc>
 8009f88:	7821      	ldrb	r1, [r4, #0]
 8009f8a:	2203      	movs	r2, #3
 8009f8c:	4650      	mov	r0, sl
 8009f8e:	f7f6 f927 	bl	80001e0 <memchr>
 8009f92:	b140      	cbz	r0, 8009fa6 <_svfiprintf_r+0x152>
 8009f94:	2340      	movs	r3, #64	; 0x40
 8009f96:	eba0 000a 	sub.w	r0, r0, sl
 8009f9a:	fa03 f000 	lsl.w	r0, r3, r0
 8009f9e:	9b04      	ldr	r3, [sp, #16]
 8009fa0:	4303      	orrs	r3, r0
 8009fa2:	3401      	adds	r4, #1
 8009fa4:	9304      	str	r3, [sp, #16]
 8009fa6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009faa:	4826      	ldr	r0, [pc, #152]	; (800a044 <_svfiprintf_r+0x1f0>)
 8009fac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009fb0:	2206      	movs	r2, #6
 8009fb2:	f7f6 f915 	bl	80001e0 <memchr>
 8009fb6:	2800      	cmp	r0, #0
 8009fb8:	d038      	beq.n	800a02c <_svfiprintf_r+0x1d8>
 8009fba:	4b23      	ldr	r3, [pc, #140]	; (800a048 <_svfiprintf_r+0x1f4>)
 8009fbc:	bb1b      	cbnz	r3, 800a006 <_svfiprintf_r+0x1b2>
 8009fbe:	9b03      	ldr	r3, [sp, #12]
 8009fc0:	3307      	adds	r3, #7
 8009fc2:	f023 0307 	bic.w	r3, r3, #7
 8009fc6:	3308      	adds	r3, #8
 8009fc8:	9303      	str	r3, [sp, #12]
 8009fca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fcc:	4433      	add	r3, r6
 8009fce:	9309      	str	r3, [sp, #36]	; 0x24
 8009fd0:	e767      	b.n	8009ea2 <_svfiprintf_r+0x4e>
 8009fd2:	fb0c 3202 	mla	r2, ip, r2, r3
 8009fd6:	460c      	mov	r4, r1
 8009fd8:	2001      	movs	r0, #1
 8009fda:	e7a5      	b.n	8009f28 <_svfiprintf_r+0xd4>
 8009fdc:	2300      	movs	r3, #0
 8009fde:	3401      	adds	r4, #1
 8009fe0:	9305      	str	r3, [sp, #20]
 8009fe2:	4619      	mov	r1, r3
 8009fe4:	f04f 0c0a 	mov.w	ip, #10
 8009fe8:	4620      	mov	r0, r4
 8009fea:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009fee:	3a30      	subs	r2, #48	; 0x30
 8009ff0:	2a09      	cmp	r2, #9
 8009ff2:	d903      	bls.n	8009ffc <_svfiprintf_r+0x1a8>
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d0c5      	beq.n	8009f84 <_svfiprintf_r+0x130>
 8009ff8:	9105      	str	r1, [sp, #20]
 8009ffa:	e7c3      	b.n	8009f84 <_svfiprintf_r+0x130>
 8009ffc:	fb0c 2101 	mla	r1, ip, r1, r2
 800a000:	4604      	mov	r4, r0
 800a002:	2301      	movs	r3, #1
 800a004:	e7f0      	b.n	8009fe8 <_svfiprintf_r+0x194>
 800a006:	ab03      	add	r3, sp, #12
 800a008:	9300      	str	r3, [sp, #0]
 800a00a:	462a      	mov	r2, r5
 800a00c:	4b0f      	ldr	r3, [pc, #60]	; (800a04c <_svfiprintf_r+0x1f8>)
 800a00e:	a904      	add	r1, sp, #16
 800a010:	4638      	mov	r0, r7
 800a012:	f7fc fa49 	bl	80064a8 <_printf_float>
 800a016:	1c42      	adds	r2, r0, #1
 800a018:	4606      	mov	r6, r0
 800a01a:	d1d6      	bne.n	8009fca <_svfiprintf_r+0x176>
 800a01c:	89ab      	ldrh	r3, [r5, #12]
 800a01e:	065b      	lsls	r3, r3, #25
 800a020:	f53f af2c 	bmi.w	8009e7c <_svfiprintf_r+0x28>
 800a024:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a026:	b01d      	add	sp, #116	; 0x74
 800a028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a02c:	ab03      	add	r3, sp, #12
 800a02e:	9300      	str	r3, [sp, #0]
 800a030:	462a      	mov	r2, r5
 800a032:	4b06      	ldr	r3, [pc, #24]	; (800a04c <_svfiprintf_r+0x1f8>)
 800a034:	a904      	add	r1, sp, #16
 800a036:	4638      	mov	r0, r7
 800a038:	f7fc fcda 	bl	80069f0 <_printf_i>
 800a03c:	e7eb      	b.n	800a016 <_svfiprintf_r+0x1c2>
 800a03e:	bf00      	nop
 800a040:	0800b834 	.word	0x0800b834
 800a044:	0800b83e 	.word	0x0800b83e
 800a048:	080064a9 	.word	0x080064a9
 800a04c:	08009d9d 	.word	0x08009d9d
 800a050:	0800b83a 	.word	0x0800b83a
 800a054:	00000000 	.word	0x00000000

0800a058 <nan>:
 800a058:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a060 <nan+0x8>
 800a05c:	4770      	bx	lr
 800a05e:	bf00      	nop
 800a060:	00000000 	.word	0x00000000
 800a064:	7ff80000 	.word	0x7ff80000

0800a068 <_sbrk_r>:
 800a068:	b538      	push	{r3, r4, r5, lr}
 800a06a:	4d06      	ldr	r5, [pc, #24]	; (800a084 <_sbrk_r+0x1c>)
 800a06c:	2300      	movs	r3, #0
 800a06e:	4604      	mov	r4, r0
 800a070:	4608      	mov	r0, r1
 800a072:	602b      	str	r3, [r5, #0]
 800a074:	f7f7 fee4 	bl	8001e40 <_sbrk>
 800a078:	1c43      	adds	r3, r0, #1
 800a07a:	d102      	bne.n	800a082 <_sbrk_r+0x1a>
 800a07c:	682b      	ldr	r3, [r5, #0]
 800a07e:	b103      	cbz	r3, 800a082 <_sbrk_r+0x1a>
 800a080:	6023      	str	r3, [r4, #0]
 800a082:	bd38      	pop	{r3, r4, r5, pc}
 800a084:	20000384 	.word	0x20000384

0800a088 <strncmp>:
 800a088:	b510      	push	{r4, lr}
 800a08a:	b17a      	cbz	r2, 800a0ac <strncmp+0x24>
 800a08c:	4603      	mov	r3, r0
 800a08e:	3901      	subs	r1, #1
 800a090:	1884      	adds	r4, r0, r2
 800a092:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a096:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a09a:	4290      	cmp	r0, r2
 800a09c:	d101      	bne.n	800a0a2 <strncmp+0x1a>
 800a09e:	42a3      	cmp	r3, r4
 800a0a0:	d101      	bne.n	800a0a6 <strncmp+0x1e>
 800a0a2:	1a80      	subs	r0, r0, r2
 800a0a4:	bd10      	pop	{r4, pc}
 800a0a6:	2800      	cmp	r0, #0
 800a0a8:	d1f3      	bne.n	800a092 <strncmp+0xa>
 800a0aa:	e7fa      	b.n	800a0a2 <strncmp+0x1a>
 800a0ac:	4610      	mov	r0, r2
 800a0ae:	e7f9      	b.n	800a0a4 <strncmp+0x1c>

0800a0b0 <__ascii_wctomb>:
 800a0b0:	b149      	cbz	r1, 800a0c6 <__ascii_wctomb+0x16>
 800a0b2:	2aff      	cmp	r2, #255	; 0xff
 800a0b4:	bf85      	ittet	hi
 800a0b6:	238a      	movhi	r3, #138	; 0x8a
 800a0b8:	6003      	strhi	r3, [r0, #0]
 800a0ba:	700a      	strbls	r2, [r1, #0]
 800a0bc:	f04f 30ff 	movhi.w	r0, #4294967295
 800a0c0:	bf98      	it	ls
 800a0c2:	2001      	movls	r0, #1
 800a0c4:	4770      	bx	lr
 800a0c6:	4608      	mov	r0, r1
 800a0c8:	4770      	bx	lr
	...

0800a0cc <__assert_func>:
 800a0cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a0ce:	4614      	mov	r4, r2
 800a0d0:	461a      	mov	r2, r3
 800a0d2:	4b09      	ldr	r3, [pc, #36]	; (800a0f8 <__assert_func+0x2c>)
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	4605      	mov	r5, r0
 800a0d8:	68d8      	ldr	r0, [r3, #12]
 800a0da:	b14c      	cbz	r4, 800a0f0 <__assert_func+0x24>
 800a0dc:	4b07      	ldr	r3, [pc, #28]	; (800a0fc <__assert_func+0x30>)
 800a0de:	9100      	str	r1, [sp, #0]
 800a0e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a0e4:	4906      	ldr	r1, [pc, #24]	; (800a100 <__assert_func+0x34>)
 800a0e6:	462b      	mov	r3, r5
 800a0e8:	f000 f80e 	bl	800a108 <fiprintf>
 800a0ec:	f000 fa8c 	bl	800a608 <abort>
 800a0f0:	4b04      	ldr	r3, [pc, #16]	; (800a104 <__assert_func+0x38>)
 800a0f2:	461c      	mov	r4, r3
 800a0f4:	e7f3      	b.n	800a0de <__assert_func+0x12>
 800a0f6:	bf00      	nop
 800a0f8:	2000000c 	.word	0x2000000c
 800a0fc:	0800b845 	.word	0x0800b845
 800a100:	0800b852 	.word	0x0800b852
 800a104:	0800b880 	.word	0x0800b880

0800a108 <fiprintf>:
 800a108:	b40e      	push	{r1, r2, r3}
 800a10a:	b503      	push	{r0, r1, lr}
 800a10c:	4601      	mov	r1, r0
 800a10e:	ab03      	add	r3, sp, #12
 800a110:	4805      	ldr	r0, [pc, #20]	; (800a128 <fiprintf+0x20>)
 800a112:	f853 2b04 	ldr.w	r2, [r3], #4
 800a116:	6800      	ldr	r0, [r0, #0]
 800a118:	9301      	str	r3, [sp, #4]
 800a11a:	f000 f885 	bl	800a228 <_vfiprintf_r>
 800a11e:	b002      	add	sp, #8
 800a120:	f85d eb04 	ldr.w	lr, [sp], #4
 800a124:	b003      	add	sp, #12
 800a126:	4770      	bx	lr
 800a128:	2000000c 	.word	0x2000000c

0800a12c <memmove>:
 800a12c:	4288      	cmp	r0, r1
 800a12e:	b510      	push	{r4, lr}
 800a130:	eb01 0402 	add.w	r4, r1, r2
 800a134:	d902      	bls.n	800a13c <memmove+0x10>
 800a136:	4284      	cmp	r4, r0
 800a138:	4623      	mov	r3, r4
 800a13a:	d807      	bhi.n	800a14c <memmove+0x20>
 800a13c:	1e43      	subs	r3, r0, #1
 800a13e:	42a1      	cmp	r1, r4
 800a140:	d008      	beq.n	800a154 <memmove+0x28>
 800a142:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a146:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a14a:	e7f8      	b.n	800a13e <memmove+0x12>
 800a14c:	4402      	add	r2, r0
 800a14e:	4601      	mov	r1, r0
 800a150:	428a      	cmp	r2, r1
 800a152:	d100      	bne.n	800a156 <memmove+0x2a>
 800a154:	bd10      	pop	{r4, pc}
 800a156:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a15a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a15e:	e7f7      	b.n	800a150 <memmove+0x24>

0800a160 <__malloc_lock>:
 800a160:	4801      	ldr	r0, [pc, #4]	; (800a168 <__malloc_lock+0x8>)
 800a162:	f000 bc11 	b.w	800a988 <__retarget_lock_acquire_recursive>
 800a166:	bf00      	nop
 800a168:	20000388 	.word	0x20000388

0800a16c <__malloc_unlock>:
 800a16c:	4801      	ldr	r0, [pc, #4]	; (800a174 <__malloc_unlock+0x8>)
 800a16e:	f000 bc0c 	b.w	800a98a <__retarget_lock_release_recursive>
 800a172:	bf00      	nop
 800a174:	20000388 	.word	0x20000388

0800a178 <_realloc_r>:
 800a178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a17c:	4680      	mov	r8, r0
 800a17e:	4614      	mov	r4, r2
 800a180:	460e      	mov	r6, r1
 800a182:	b921      	cbnz	r1, 800a18e <_realloc_r+0x16>
 800a184:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a188:	4611      	mov	r1, r2
 800a18a:	f7ff bd93 	b.w	8009cb4 <_malloc_r>
 800a18e:	b92a      	cbnz	r2, 800a19c <_realloc_r+0x24>
 800a190:	f7ff fd24 	bl	8009bdc <_free_r>
 800a194:	4625      	mov	r5, r4
 800a196:	4628      	mov	r0, r5
 800a198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a19c:	f000 fc5c 	bl	800aa58 <_malloc_usable_size_r>
 800a1a0:	4284      	cmp	r4, r0
 800a1a2:	4607      	mov	r7, r0
 800a1a4:	d802      	bhi.n	800a1ac <_realloc_r+0x34>
 800a1a6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a1aa:	d812      	bhi.n	800a1d2 <_realloc_r+0x5a>
 800a1ac:	4621      	mov	r1, r4
 800a1ae:	4640      	mov	r0, r8
 800a1b0:	f7ff fd80 	bl	8009cb4 <_malloc_r>
 800a1b4:	4605      	mov	r5, r0
 800a1b6:	2800      	cmp	r0, #0
 800a1b8:	d0ed      	beq.n	800a196 <_realloc_r+0x1e>
 800a1ba:	42bc      	cmp	r4, r7
 800a1bc:	4622      	mov	r2, r4
 800a1be:	4631      	mov	r1, r6
 800a1c0:	bf28      	it	cs
 800a1c2:	463a      	movcs	r2, r7
 800a1c4:	f7ff f824 	bl	8009210 <memcpy>
 800a1c8:	4631      	mov	r1, r6
 800a1ca:	4640      	mov	r0, r8
 800a1cc:	f7ff fd06 	bl	8009bdc <_free_r>
 800a1d0:	e7e1      	b.n	800a196 <_realloc_r+0x1e>
 800a1d2:	4635      	mov	r5, r6
 800a1d4:	e7df      	b.n	800a196 <_realloc_r+0x1e>

0800a1d6 <__sfputc_r>:
 800a1d6:	6893      	ldr	r3, [r2, #8]
 800a1d8:	3b01      	subs	r3, #1
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	b410      	push	{r4}
 800a1de:	6093      	str	r3, [r2, #8]
 800a1e0:	da08      	bge.n	800a1f4 <__sfputc_r+0x1e>
 800a1e2:	6994      	ldr	r4, [r2, #24]
 800a1e4:	42a3      	cmp	r3, r4
 800a1e6:	db01      	blt.n	800a1ec <__sfputc_r+0x16>
 800a1e8:	290a      	cmp	r1, #10
 800a1ea:	d103      	bne.n	800a1f4 <__sfputc_r+0x1e>
 800a1ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a1f0:	f000 b94a 	b.w	800a488 <__swbuf_r>
 800a1f4:	6813      	ldr	r3, [r2, #0]
 800a1f6:	1c58      	adds	r0, r3, #1
 800a1f8:	6010      	str	r0, [r2, #0]
 800a1fa:	7019      	strb	r1, [r3, #0]
 800a1fc:	4608      	mov	r0, r1
 800a1fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a202:	4770      	bx	lr

0800a204 <__sfputs_r>:
 800a204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a206:	4606      	mov	r6, r0
 800a208:	460f      	mov	r7, r1
 800a20a:	4614      	mov	r4, r2
 800a20c:	18d5      	adds	r5, r2, r3
 800a20e:	42ac      	cmp	r4, r5
 800a210:	d101      	bne.n	800a216 <__sfputs_r+0x12>
 800a212:	2000      	movs	r0, #0
 800a214:	e007      	b.n	800a226 <__sfputs_r+0x22>
 800a216:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a21a:	463a      	mov	r2, r7
 800a21c:	4630      	mov	r0, r6
 800a21e:	f7ff ffda 	bl	800a1d6 <__sfputc_r>
 800a222:	1c43      	adds	r3, r0, #1
 800a224:	d1f3      	bne.n	800a20e <__sfputs_r+0xa>
 800a226:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a228 <_vfiprintf_r>:
 800a228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a22c:	460d      	mov	r5, r1
 800a22e:	b09d      	sub	sp, #116	; 0x74
 800a230:	4614      	mov	r4, r2
 800a232:	4698      	mov	r8, r3
 800a234:	4606      	mov	r6, r0
 800a236:	b118      	cbz	r0, 800a240 <_vfiprintf_r+0x18>
 800a238:	6983      	ldr	r3, [r0, #24]
 800a23a:	b90b      	cbnz	r3, 800a240 <_vfiprintf_r+0x18>
 800a23c:	f000 fb06 	bl	800a84c <__sinit>
 800a240:	4b89      	ldr	r3, [pc, #548]	; (800a468 <_vfiprintf_r+0x240>)
 800a242:	429d      	cmp	r5, r3
 800a244:	d11b      	bne.n	800a27e <_vfiprintf_r+0x56>
 800a246:	6875      	ldr	r5, [r6, #4]
 800a248:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a24a:	07d9      	lsls	r1, r3, #31
 800a24c:	d405      	bmi.n	800a25a <_vfiprintf_r+0x32>
 800a24e:	89ab      	ldrh	r3, [r5, #12]
 800a250:	059a      	lsls	r2, r3, #22
 800a252:	d402      	bmi.n	800a25a <_vfiprintf_r+0x32>
 800a254:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a256:	f000 fb97 	bl	800a988 <__retarget_lock_acquire_recursive>
 800a25a:	89ab      	ldrh	r3, [r5, #12]
 800a25c:	071b      	lsls	r3, r3, #28
 800a25e:	d501      	bpl.n	800a264 <_vfiprintf_r+0x3c>
 800a260:	692b      	ldr	r3, [r5, #16]
 800a262:	b9eb      	cbnz	r3, 800a2a0 <_vfiprintf_r+0x78>
 800a264:	4629      	mov	r1, r5
 800a266:	4630      	mov	r0, r6
 800a268:	f000 f960 	bl	800a52c <__swsetup_r>
 800a26c:	b1c0      	cbz	r0, 800a2a0 <_vfiprintf_r+0x78>
 800a26e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a270:	07dc      	lsls	r4, r3, #31
 800a272:	d50e      	bpl.n	800a292 <_vfiprintf_r+0x6a>
 800a274:	f04f 30ff 	mov.w	r0, #4294967295
 800a278:	b01d      	add	sp, #116	; 0x74
 800a27a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a27e:	4b7b      	ldr	r3, [pc, #492]	; (800a46c <_vfiprintf_r+0x244>)
 800a280:	429d      	cmp	r5, r3
 800a282:	d101      	bne.n	800a288 <_vfiprintf_r+0x60>
 800a284:	68b5      	ldr	r5, [r6, #8]
 800a286:	e7df      	b.n	800a248 <_vfiprintf_r+0x20>
 800a288:	4b79      	ldr	r3, [pc, #484]	; (800a470 <_vfiprintf_r+0x248>)
 800a28a:	429d      	cmp	r5, r3
 800a28c:	bf08      	it	eq
 800a28e:	68f5      	ldreq	r5, [r6, #12]
 800a290:	e7da      	b.n	800a248 <_vfiprintf_r+0x20>
 800a292:	89ab      	ldrh	r3, [r5, #12]
 800a294:	0598      	lsls	r0, r3, #22
 800a296:	d4ed      	bmi.n	800a274 <_vfiprintf_r+0x4c>
 800a298:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a29a:	f000 fb76 	bl	800a98a <__retarget_lock_release_recursive>
 800a29e:	e7e9      	b.n	800a274 <_vfiprintf_r+0x4c>
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	9309      	str	r3, [sp, #36]	; 0x24
 800a2a4:	2320      	movs	r3, #32
 800a2a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a2aa:	f8cd 800c 	str.w	r8, [sp, #12]
 800a2ae:	2330      	movs	r3, #48	; 0x30
 800a2b0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a474 <_vfiprintf_r+0x24c>
 800a2b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a2b8:	f04f 0901 	mov.w	r9, #1
 800a2bc:	4623      	mov	r3, r4
 800a2be:	469a      	mov	sl, r3
 800a2c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a2c4:	b10a      	cbz	r2, 800a2ca <_vfiprintf_r+0xa2>
 800a2c6:	2a25      	cmp	r2, #37	; 0x25
 800a2c8:	d1f9      	bne.n	800a2be <_vfiprintf_r+0x96>
 800a2ca:	ebba 0b04 	subs.w	fp, sl, r4
 800a2ce:	d00b      	beq.n	800a2e8 <_vfiprintf_r+0xc0>
 800a2d0:	465b      	mov	r3, fp
 800a2d2:	4622      	mov	r2, r4
 800a2d4:	4629      	mov	r1, r5
 800a2d6:	4630      	mov	r0, r6
 800a2d8:	f7ff ff94 	bl	800a204 <__sfputs_r>
 800a2dc:	3001      	adds	r0, #1
 800a2de:	f000 80aa 	beq.w	800a436 <_vfiprintf_r+0x20e>
 800a2e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a2e4:	445a      	add	r2, fp
 800a2e6:	9209      	str	r2, [sp, #36]	; 0x24
 800a2e8:	f89a 3000 	ldrb.w	r3, [sl]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	f000 80a2 	beq.w	800a436 <_vfiprintf_r+0x20e>
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	f04f 32ff 	mov.w	r2, #4294967295
 800a2f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a2fc:	f10a 0a01 	add.w	sl, sl, #1
 800a300:	9304      	str	r3, [sp, #16]
 800a302:	9307      	str	r3, [sp, #28]
 800a304:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a308:	931a      	str	r3, [sp, #104]	; 0x68
 800a30a:	4654      	mov	r4, sl
 800a30c:	2205      	movs	r2, #5
 800a30e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a312:	4858      	ldr	r0, [pc, #352]	; (800a474 <_vfiprintf_r+0x24c>)
 800a314:	f7f5 ff64 	bl	80001e0 <memchr>
 800a318:	9a04      	ldr	r2, [sp, #16]
 800a31a:	b9d8      	cbnz	r0, 800a354 <_vfiprintf_r+0x12c>
 800a31c:	06d1      	lsls	r1, r2, #27
 800a31e:	bf44      	itt	mi
 800a320:	2320      	movmi	r3, #32
 800a322:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a326:	0713      	lsls	r3, r2, #28
 800a328:	bf44      	itt	mi
 800a32a:	232b      	movmi	r3, #43	; 0x2b
 800a32c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a330:	f89a 3000 	ldrb.w	r3, [sl]
 800a334:	2b2a      	cmp	r3, #42	; 0x2a
 800a336:	d015      	beq.n	800a364 <_vfiprintf_r+0x13c>
 800a338:	9a07      	ldr	r2, [sp, #28]
 800a33a:	4654      	mov	r4, sl
 800a33c:	2000      	movs	r0, #0
 800a33e:	f04f 0c0a 	mov.w	ip, #10
 800a342:	4621      	mov	r1, r4
 800a344:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a348:	3b30      	subs	r3, #48	; 0x30
 800a34a:	2b09      	cmp	r3, #9
 800a34c:	d94e      	bls.n	800a3ec <_vfiprintf_r+0x1c4>
 800a34e:	b1b0      	cbz	r0, 800a37e <_vfiprintf_r+0x156>
 800a350:	9207      	str	r2, [sp, #28]
 800a352:	e014      	b.n	800a37e <_vfiprintf_r+0x156>
 800a354:	eba0 0308 	sub.w	r3, r0, r8
 800a358:	fa09 f303 	lsl.w	r3, r9, r3
 800a35c:	4313      	orrs	r3, r2
 800a35e:	9304      	str	r3, [sp, #16]
 800a360:	46a2      	mov	sl, r4
 800a362:	e7d2      	b.n	800a30a <_vfiprintf_r+0xe2>
 800a364:	9b03      	ldr	r3, [sp, #12]
 800a366:	1d19      	adds	r1, r3, #4
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	9103      	str	r1, [sp, #12]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	bfbb      	ittet	lt
 800a370:	425b      	neglt	r3, r3
 800a372:	f042 0202 	orrlt.w	r2, r2, #2
 800a376:	9307      	strge	r3, [sp, #28]
 800a378:	9307      	strlt	r3, [sp, #28]
 800a37a:	bfb8      	it	lt
 800a37c:	9204      	strlt	r2, [sp, #16]
 800a37e:	7823      	ldrb	r3, [r4, #0]
 800a380:	2b2e      	cmp	r3, #46	; 0x2e
 800a382:	d10c      	bne.n	800a39e <_vfiprintf_r+0x176>
 800a384:	7863      	ldrb	r3, [r4, #1]
 800a386:	2b2a      	cmp	r3, #42	; 0x2a
 800a388:	d135      	bne.n	800a3f6 <_vfiprintf_r+0x1ce>
 800a38a:	9b03      	ldr	r3, [sp, #12]
 800a38c:	1d1a      	adds	r2, r3, #4
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	9203      	str	r2, [sp, #12]
 800a392:	2b00      	cmp	r3, #0
 800a394:	bfb8      	it	lt
 800a396:	f04f 33ff 	movlt.w	r3, #4294967295
 800a39a:	3402      	adds	r4, #2
 800a39c:	9305      	str	r3, [sp, #20]
 800a39e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a484 <_vfiprintf_r+0x25c>
 800a3a2:	7821      	ldrb	r1, [r4, #0]
 800a3a4:	2203      	movs	r2, #3
 800a3a6:	4650      	mov	r0, sl
 800a3a8:	f7f5 ff1a 	bl	80001e0 <memchr>
 800a3ac:	b140      	cbz	r0, 800a3c0 <_vfiprintf_r+0x198>
 800a3ae:	2340      	movs	r3, #64	; 0x40
 800a3b0:	eba0 000a 	sub.w	r0, r0, sl
 800a3b4:	fa03 f000 	lsl.w	r0, r3, r0
 800a3b8:	9b04      	ldr	r3, [sp, #16]
 800a3ba:	4303      	orrs	r3, r0
 800a3bc:	3401      	adds	r4, #1
 800a3be:	9304      	str	r3, [sp, #16]
 800a3c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3c4:	482c      	ldr	r0, [pc, #176]	; (800a478 <_vfiprintf_r+0x250>)
 800a3c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a3ca:	2206      	movs	r2, #6
 800a3cc:	f7f5 ff08 	bl	80001e0 <memchr>
 800a3d0:	2800      	cmp	r0, #0
 800a3d2:	d03f      	beq.n	800a454 <_vfiprintf_r+0x22c>
 800a3d4:	4b29      	ldr	r3, [pc, #164]	; (800a47c <_vfiprintf_r+0x254>)
 800a3d6:	bb1b      	cbnz	r3, 800a420 <_vfiprintf_r+0x1f8>
 800a3d8:	9b03      	ldr	r3, [sp, #12]
 800a3da:	3307      	adds	r3, #7
 800a3dc:	f023 0307 	bic.w	r3, r3, #7
 800a3e0:	3308      	adds	r3, #8
 800a3e2:	9303      	str	r3, [sp, #12]
 800a3e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3e6:	443b      	add	r3, r7
 800a3e8:	9309      	str	r3, [sp, #36]	; 0x24
 800a3ea:	e767      	b.n	800a2bc <_vfiprintf_r+0x94>
 800a3ec:	fb0c 3202 	mla	r2, ip, r2, r3
 800a3f0:	460c      	mov	r4, r1
 800a3f2:	2001      	movs	r0, #1
 800a3f4:	e7a5      	b.n	800a342 <_vfiprintf_r+0x11a>
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	3401      	adds	r4, #1
 800a3fa:	9305      	str	r3, [sp, #20]
 800a3fc:	4619      	mov	r1, r3
 800a3fe:	f04f 0c0a 	mov.w	ip, #10
 800a402:	4620      	mov	r0, r4
 800a404:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a408:	3a30      	subs	r2, #48	; 0x30
 800a40a:	2a09      	cmp	r2, #9
 800a40c:	d903      	bls.n	800a416 <_vfiprintf_r+0x1ee>
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d0c5      	beq.n	800a39e <_vfiprintf_r+0x176>
 800a412:	9105      	str	r1, [sp, #20]
 800a414:	e7c3      	b.n	800a39e <_vfiprintf_r+0x176>
 800a416:	fb0c 2101 	mla	r1, ip, r1, r2
 800a41a:	4604      	mov	r4, r0
 800a41c:	2301      	movs	r3, #1
 800a41e:	e7f0      	b.n	800a402 <_vfiprintf_r+0x1da>
 800a420:	ab03      	add	r3, sp, #12
 800a422:	9300      	str	r3, [sp, #0]
 800a424:	462a      	mov	r2, r5
 800a426:	4b16      	ldr	r3, [pc, #88]	; (800a480 <_vfiprintf_r+0x258>)
 800a428:	a904      	add	r1, sp, #16
 800a42a:	4630      	mov	r0, r6
 800a42c:	f7fc f83c 	bl	80064a8 <_printf_float>
 800a430:	4607      	mov	r7, r0
 800a432:	1c78      	adds	r0, r7, #1
 800a434:	d1d6      	bne.n	800a3e4 <_vfiprintf_r+0x1bc>
 800a436:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a438:	07d9      	lsls	r1, r3, #31
 800a43a:	d405      	bmi.n	800a448 <_vfiprintf_r+0x220>
 800a43c:	89ab      	ldrh	r3, [r5, #12]
 800a43e:	059a      	lsls	r2, r3, #22
 800a440:	d402      	bmi.n	800a448 <_vfiprintf_r+0x220>
 800a442:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a444:	f000 faa1 	bl	800a98a <__retarget_lock_release_recursive>
 800a448:	89ab      	ldrh	r3, [r5, #12]
 800a44a:	065b      	lsls	r3, r3, #25
 800a44c:	f53f af12 	bmi.w	800a274 <_vfiprintf_r+0x4c>
 800a450:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a452:	e711      	b.n	800a278 <_vfiprintf_r+0x50>
 800a454:	ab03      	add	r3, sp, #12
 800a456:	9300      	str	r3, [sp, #0]
 800a458:	462a      	mov	r2, r5
 800a45a:	4b09      	ldr	r3, [pc, #36]	; (800a480 <_vfiprintf_r+0x258>)
 800a45c:	a904      	add	r1, sp, #16
 800a45e:	4630      	mov	r0, r6
 800a460:	f7fc fac6 	bl	80069f0 <_printf_i>
 800a464:	e7e4      	b.n	800a430 <_vfiprintf_r+0x208>
 800a466:	bf00      	nop
 800a468:	0800b8a4 	.word	0x0800b8a4
 800a46c:	0800b8c4 	.word	0x0800b8c4
 800a470:	0800b884 	.word	0x0800b884
 800a474:	0800b834 	.word	0x0800b834
 800a478:	0800b83e 	.word	0x0800b83e
 800a47c:	080064a9 	.word	0x080064a9
 800a480:	0800a205 	.word	0x0800a205
 800a484:	0800b83a 	.word	0x0800b83a

0800a488 <__swbuf_r>:
 800a488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a48a:	460e      	mov	r6, r1
 800a48c:	4614      	mov	r4, r2
 800a48e:	4605      	mov	r5, r0
 800a490:	b118      	cbz	r0, 800a49a <__swbuf_r+0x12>
 800a492:	6983      	ldr	r3, [r0, #24]
 800a494:	b90b      	cbnz	r3, 800a49a <__swbuf_r+0x12>
 800a496:	f000 f9d9 	bl	800a84c <__sinit>
 800a49a:	4b21      	ldr	r3, [pc, #132]	; (800a520 <__swbuf_r+0x98>)
 800a49c:	429c      	cmp	r4, r3
 800a49e:	d12b      	bne.n	800a4f8 <__swbuf_r+0x70>
 800a4a0:	686c      	ldr	r4, [r5, #4]
 800a4a2:	69a3      	ldr	r3, [r4, #24]
 800a4a4:	60a3      	str	r3, [r4, #8]
 800a4a6:	89a3      	ldrh	r3, [r4, #12]
 800a4a8:	071a      	lsls	r2, r3, #28
 800a4aa:	d52f      	bpl.n	800a50c <__swbuf_r+0x84>
 800a4ac:	6923      	ldr	r3, [r4, #16]
 800a4ae:	b36b      	cbz	r3, 800a50c <__swbuf_r+0x84>
 800a4b0:	6923      	ldr	r3, [r4, #16]
 800a4b2:	6820      	ldr	r0, [r4, #0]
 800a4b4:	1ac0      	subs	r0, r0, r3
 800a4b6:	6963      	ldr	r3, [r4, #20]
 800a4b8:	b2f6      	uxtb	r6, r6
 800a4ba:	4283      	cmp	r3, r0
 800a4bc:	4637      	mov	r7, r6
 800a4be:	dc04      	bgt.n	800a4ca <__swbuf_r+0x42>
 800a4c0:	4621      	mov	r1, r4
 800a4c2:	4628      	mov	r0, r5
 800a4c4:	f000 f92e 	bl	800a724 <_fflush_r>
 800a4c8:	bb30      	cbnz	r0, 800a518 <__swbuf_r+0x90>
 800a4ca:	68a3      	ldr	r3, [r4, #8]
 800a4cc:	3b01      	subs	r3, #1
 800a4ce:	60a3      	str	r3, [r4, #8]
 800a4d0:	6823      	ldr	r3, [r4, #0]
 800a4d2:	1c5a      	adds	r2, r3, #1
 800a4d4:	6022      	str	r2, [r4, #0]
 800a4d6:	701e      	strb	r6, [r3, #0]
 800a4d8:	6963      	ldr	r3, [r4, #20]
 800a4da:	3001      	adds	r0, #1
 800a4dc:	4283      	cmp	r3, r0
 800a4de:	d004      	beq.n	800a4ea <__swbuf_r+0x62>
 800a4e0:	89a3      	ldrh	r3, [r4, #12]
 800a4e2:	07db      	lsls	r3, r3, #31
 800a4e4:	d506      	bpl.n	800a4f4 <__swbuf_r+0x6c>
 800a4e6:	2e0a      	cmp	r6, #10
 800a4e8:	d104      	bne.n	800a4f4 <__swbuf_r+0x6c>
 800a4ea:	4621      	mov	r1, r4
 800a4ec:	4628      	mov	r0, r5
 800a4ee:	f000 f919 	bl	800a724 <_fflush_r>
 800a4f2:	b988      	cbnz	r0, 800a518 <__swbuf_r+0x90>
 800a4f4:	4638      	mov	r0, r7
 800a4f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4f8:	4b0a      	ldr	r3, [pc, #40]	; (800a524 <__swbuf_r+0x9c>)
 800a4fa:	429c      	cmp	r4, r3
 800a4fc:	d101      	bne.n	800a502 <__swbuf_r+0x7a>
 800a4fe:	68ac      	ldr	r4, [r5, #8]
 800a500:	e7cf      	b.n	800a4a2 <__swbuf_r+0x1a>
 800a502:	4b09      	ldr	r3, [pc, #36]	; (800a528 <__swbuf_r+0xa0>)
 800a504:	429c      	cmp	r4, r3
 800a506:	bf08      	it	eq
 800a508:	68ec      	ldreq	r4, [r5, #12]
 800a50a:	e7ca      	b.n	800a4a2 <__swbuf_r+0x1a>
 800a50c:	4621      	mov	r1, r4
 800a50e:	4628      	mov	r0, r5
 800a510:	f000 f80c 	bl	800a52c <__swsetup_r>
 800a514:	2800      	cmp	r0, #0
 800a516:	d0cb      	beq.n	800a4b0 <__swbuf_r+0x28>
 800a518:	f04f 37ff 	mov.w	r7, #4294967295
 800a51c:	e7ea      	b.n	800a4f4 <__swbuf_r+0x6c>
 800a51e:	bf00      	nop
 800a520:	0800b8a4 	.word	0x0800b8a4
 800a524:	0800b8c4 	.word	0x0800b8c4
 800a528:	0800b884 	.word	0x0800b884

0800a52c <__swsetup_r>:
 800a52c:	4b32      	ldr	r3, [pc, #200]	; (800a5f8 <__swsetup_r+0xcc>)
 800a52e:	b570      	push	{r4, r5, r6, lr}
 800a530:	681d      	ldr	r5, [r3, #0]
 800a532:	4606      	mov	r6, r0
 800a534:	460c      	mov	r4, r1
 800a536:	b125      	cbz	r5, 800a542 <__swsetup_r+0x16>
 800a538:	69ab      	ldr	r3, [r5, #24]
 800a53a:	b913      	cbnz	r3, 800a542 <__swsetup_r+0x16>
 800a53c:	4628      	mov	r0, r5
 800a53e:	f000 f985 	bl	800a84c <__sinit>
 800a542:	4b2e      	ldr	r3, [pc, #184]	; (800a5fc <__swsetup_r+0xd0>)
 800a544:	429c      	cmp	r4, r3
 800a546:	d10f      	bne.n	800a568 <__swsetup_r+0x3c>
 800a548:	686c      	ldr	r4, [r5, #4]
 800a54a:	89a3      	ldrh	r3, [r4, #12]
 800a54c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a550:	0719      	lsls	r1, r3, #28
 800a552:	d42c      	bmi.n	800a5ae <__swsetup_r+0x82>
 800a554:	06dd      	lsls	r5, r3, #27
 800a556:	d411      	bmi.n	800a57c <__swsetup_r+0x50>
 800a558:	2309      	movs	r3, #9
 800a55a:	6033      	str	r3, [r6, #0]
 800a55c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a560:	81a3      	strh	r3, [r4, #12]
 800a562:	f04f 30ff 	mov.w	r0, #4294967295
 800a566:	e03e      	b.n	800a5e6 <__swsetup_r+0xba>
 800a568:	4b25      	ldr	r3, [pc, #148]	; (800a600 <__swsetup_r+0xd4>)
 800a56a:	429c      	cmp	r4, r3
 800a56c:	d101      	bne.n	800a572 <__swsetup_r+0x46>
 800a56e:	68ac      	ldr	r4, [r5, #8]
 800a570:	e7eb      	b.n	800a54a <__swsetup_r+0x1e>
 800a572:	4b24      	ldr	r3, [pc, #144]	; (800a604 <__swsetup_r+0xd8>)
 800a574:	429c      	cmp	r4, r3
 800a576:	bf08      	it	eq
 800a578:	68ec      	ldreq	r4, [r5, #12]
 800a57a:	e7e6      	b.n	800a54a <__swsetup_r+0x1e>
 800a57c:	0758      	lsls	r0, r3, #29
 800a57e:	d512      	bpl.n	800a5a6 <__swsetup_r+0x7a>
 800a580:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a582:	b141      	cbz	r1, 800a596 <__swsetup_r+0x6a>
 800a584:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a588:	4299      	cmp	r1, r3
 800a58a:	d002      	beq.n	800a592 <__swsetup_r+0x66>
 800a58c:	4630      	mov	r0, r6
 800a58e:	f7ff fb25 	bl	8009bdc <_free_r>
 800a592:	2300      	movs	r3, #0
 800a594:	6363      	str	r3, [r4, #52]	; 0x34
 800a596:	89a3      	ldrh	r3, [r4, #12]
 800a598:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a59c:	81a3      	strh	r3, [r4, #12]
 800a59e:	2300      	movs	r3, #0
 800a5a0:	6063      	str	r3, [r4, #4]
 800a5a2:	6923      	ldr	r3, [r4, #16]
 800a5a4:	6023      	str	r3, [r4, #0]
 800a5a6:	89a3      	ldrh	r3, [r4, #12]
 800a5a8:	f043 0308 	orr.w	r3, r3, #8
 800a5ac:	81a3      	strh	r3, [r4, #12]
 800a5ae:	6923      	ldr	r3, [r4, #16]
 800a5b0:	b94b      	cbnz	r3, 800a5c6 <__swsetup_r+0x9a>
 800a5b2:	89a3      	ldrh	r3, [r4, #12]
 800a5b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a5b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a5bc:	d003      	beq.n	800a5c6 <__swsetup_r+0x9a>
 800a5be:	4621      	mov	r1, r4
 800a5c0:	4630      	mov	r0, r6
 800a5c2:	f000 fa09 	bl	800a9d8 <__smakebuf_r>
 800a5c6:	89a0      	ldrh	r0, [r4, #12]
 800a5c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a5cc:	f010 0301 	ands.w	r3, r0, #1
 800a5d0:	d00a      	beq.n	800a5e8 <__swsetup_r+0xbc>
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	60a3      	str	r3, [r4, #8]
 800a5d6:	6963      	ldr	r3, [r4, #20]
 800a5d8:	425b      	negs	r3, r3
 800a5da:	61a3      	str	r3, [r4, #24]
 800a5dc:	6923      	ldr	r3, [r4, #16]
 800a5de:	b943      	cbnz	r3, 800a5f2 <__swsetup_r+0xc6>
 800a5e0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a5e4:	d1ba      	bne.n	800a55c <__swsetup_r+0x30>
 800a5e6:	bd70      	pop	{r4, r5, r6, pc}
 800a5e8:	0781      	lsls	r1, r0, #30
 800a5ea:	bf58      	it	pl
 800a5ec:	6963      	ldrpl	r3, [r4, #20]
 800a5ee:	60a3      	str	r3, [r4, #8]
 800a5f0:	e7f4      	b.n	800a5dc <__swsetup_r+0xb0>
 800a5f2:	2000      	movs	r0, #0
 800a5f4:	e7f7      	b.n	800a5e6 <__swsetup_r+0xba>
 800a5f6:	bf00      	nop
 800a5f8:	2000000c 	.word	0x2000000c
 800a5fc:	0800b8a4 	.word	0x0800b8a4
 800a600:	0800b8c4 	.word	0x0800b8c4
 800a604:	0800b884 	.word	0x0800b884

0800a608 <abort>:
 800a608:	b508      	push	{r3, lr}
 800a60a:	2006      	movs	r0, #6
 800a60c:	f000 fa54 	bl	800aab8 <raise>
 800a610:	2001      	movs	r0, #1
 800a612:	f7f7 fb9d 	bl	8001d50 <_exit>
	...

0800a618 <__sflush_r>:
 800a618:	898a      	ldrh	r2, [r1, #12]
 800a61a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a61e:	4605      	mov	r5, r0
 800a620:	0710      	lsls	r0, r2, #28
 800a622:	460c      	mov	r4, r1
 800a624:	d458      	bmi.n	800a6d8 <__sflush_r+0xc0>
 800a626:	684b      	ldr	r3, [r1, #4]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	dc05      	bgt.n	800a638 <__sflush_r+0x20>
 800a62c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a62e:	2b00      	cmp	r3, #0
 800a630:	dc02      	bgt.n	800a638 <__sflush_r+0x20>
 800a632:	2000      	movs	r0, #0
 800a634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a638:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a63a:	2e00      	cmp	r6, #0
 800a63c:	d0f9      	beq.n	800a632 <__sflush_r+0x1a>
 800a63e:	2300      	movs	r3, #0
 800a640:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a644:	682f      	ldr	r7, [r5, #0]
 800a646:	602b      	str	r3, [r5, #0]
 800a648:	d032      	beq.n	800a6b0 <__sflush_r+0x98>
 800a64a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a64c:	89a3      	ldrh	r3, [r4, #12]
 800a64e:	075a      	lsls	r2, r3, #29
 800a650:	d505      	bpl.n	800a65e <__sflush_r+0x46>
 800a652:	6863      	ldr	r3, [r4, #4]
 800a654:	1ac0      	subs	r0, r0, r3
 800a656:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a658:	b10b      	cbz	r3, 800a65e <__sflush_r+0x46>
 800a65a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a65c:	1ac0      	subs	r0, r0, r3
 800a65e:	2300      	movs	r3, #0
 800a660:	4602      	mov	r2, r0
 800a662:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a664:	6a21      	ldr	r1, [r4, #32]
 800a666:	4628      	mov	r0, r5
 800a668:	47b0      	blx	r6
 800a66a:	1c43      	adds	r3, r0, #1
 800a66c:	89a3      	ldrh	r3, [r4, #12]
 800a66e:	d106      	bne.n	800a67e <__sflush_r+0x66>
 800a670:	6829      	ldr	r1, [r5, #0]
 800a672:	291d      	cmp	r1, #29
 800a674:	d82c      	bhi.n	800a6d0 <__sflush_r+0xb8>
 800a676:	4a2a      	ldr	r2, [pc, #168]	; (800a720 <__sflush_r+0x108>)
 800a678:	40ca      	lsrs	r2, r1
 800a67a:	07d6      	lsls	r6, r2, #31
 800a67c:	d528      	bpl.n	800a6d0 <__sflush_r+0xb8>
 800a67e:	2200      	movs	r2, #0
 800a680:	6062      	str	r2, [r4, #4]
 800a682:	04d9      	lsls	r1, r3, #19
 800a684:	6922      	ldr	r2, [r4, #16]
 800a686:	6022      	str	r2, [r4, #0]
 800a688:	d504      	bpl.n	800a694 <__sflush_r+0x7c>
 800a68a:	1c42      	adds	r2, r0, #1
 800a68c:	d101      	bne.n	800a692 <__sflush_r+0x7a>
 800a68e:	682b      	ldr	r3, [r5, #0]
 800a690:	b903      	cbnz	r3, 800a694 <__sflush_r+0x7c>
 800a692:	6560      	str	r0, [r4, #84]	; 0x54
 800a694:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a696:	602f      	str	r7, [r5, #0]
 800a698:	2900      	cmp	r1, #0
 800a69a:	d0ca      	beq.n	800a632 <__sflush_r+0x1a>
 800a69c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a6a0:	4299      	cmp	r1, r3
 800a6a2:	d002      	beq.n	800a6aa <__sflush_r+0x92>
 800a6a4:	4628      	mov	r0, r5
 800a6a6:	f7ff fa99 	bl	8009bdc <_free_r>
 800a6aa:	2000      	movs	r0, #0
 800a6ac:	6360      	str	r0, [r4, #52]	; 0x34
 800a6ae:	e7c1      	b.n	800a634 <__sflush_r+0x1c>
 800a6b0:	6a21      	ldr	r1, [r4, #32]
 800a6b2:	2301      	movs	r3, #1
 800a6b4:	4628      	mov	r0, r5
 800a6b6:	47b0      	blx	r6
 800a6b8:	1c41      	adds	r1, r0, #1
 800a6ba:	d1c7      	bne.n	800a64c <__sflush_r+0x34>
 800a6bc:	682b      	ldr	r3, [r5, #0]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d0c4      	beq.n	800a64c <__sflush_r+0x34>
 800a6c2:	2b1d      	cmp	r3, #29
 800a6c4:	d001      	beq.n	800a6ca <__sflush_r+0xb2>
 800a6c6:	2b16      	cmp	r3, #22
 800a6c8:	d101      	bne.n	800a6ce <__sflush_r+0xb6>
 800a6ca:	602f      	str	r7, [r5, #0]
 800a6cc:	e7b1      	b.n	800a632 <__sflush_r+0x1a>
 800a6ce:	89a3      	ldrh	r3, [r4, #12]
 800a6d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a6d4:	81a3      	strh	r3, [r4, #12]
 800a6d6:	e7ad      	b.n	800a634 <__sflush_r+0x1c>
 800a6d8:	690f      	ldr	r7, [r1, #16]
 800a6da:	2f00      	cmp	r7, #0
 800a6dc:	d0a9      	beq.n	800a632 <__sflush_r+0x1a>
 800a6de:	0793      	lsls	r3, r2, #30
 800a6e0:	680e      	ldr	r6, [r1, #0]
 800a6e2:	bf08      	it	eq
 800a6e4:	694b      	ldreq	r3, [r1, #20]
 800a6e6:	600f      	str	r7, [r1, #0]
 800a6e8:	bf18      	it	ne
 800a6ea:	2300      	movne	r3, #0
 800a6ec:	eba6 0807 	sub.w	r8, r6, r7
 800a6f0:	608b      	str	r3, [r1, #8]
 800a6f2:	f1b8 0f00 	cmp.w	r8, #0
 800a6f6:	dd9c      	ble.n	800a632 <__sflush_r+0x1a>
 800a6f8:	6a21      	ldr	r1, [r4, #32]
 800a6fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a6fc:	4643      	mov	r3, r8
 800a6fe:	463a      	mov	r2, r7
 800a700:	4628      	mov	r0, r5
 800a702:	47b0      	blx	r6
 800a704:	2800      	cmp	r0, #0
 800a706:	dc06      	bgt.n	800a716 <__sflush_r+0xfe>
 800a708:	89a3      	ldrh	r3, [r4, #12]
 800a70a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a70e:	81a3      	strh	r3, [r4, #12]
 800a710:	f04f 30ff 	mov.w	r0, #4294967295
 800a714:	e78e      	b.n	800a634 <__sflush_r+0x1c>
 800a716:	4407      	add	r7, r0
 800a718:	eba8 0800 	sub.w	r8, r8, r0
 800a71c:	e7e9      	b.n	800a6f2 <__sflush_r+0xda>
 800a71e:	bf00      	nop
 800a720:	20400001 	.word	0x20400001

0800a724 <_fflush_r>:
 800a724:	b538      	push	{r3, r4, r5, lr}
 800a726:	690b      	ldr	r3, [r1, #16]
 800a728:	4605      	mov	r5, r0
 800a72a:	460c      	mov	r4, r1
 800a72c:	b913      	cbnz	r3, 800a734 <_fflush_r+0x10>
 800a72e:	2500      	movs	r5, #0
 800a730:	4628      	mov	r0, r5
 800a732:	bd38      	pop	{r3, r4, r5, pc}
 800a734:	b118      	cbz	r0, 800a73e <_fflush_r+0x1a>
 800a736:	6983      	ldr	r3, [r0, #24]
 800a738:	b90b      	cbnz	r3, 800a73e <_fflush_r+0x1a>
 800a73a:	f000 f887 	bl	800a84c <__sinit>
 800a73e:	4b14      	ldr	r3, [pc, #80]	; (800a790 <_fflush_r+0x6c>)
 800a740:	429c      	cmp	r4, r3
 800a742:	d11b      	bne.n	800a77c <_fflush_r+0x58>
 800a744:	686c      	ldr	r4, [r5, #4]
 800a746:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d0ef      	beq.n	800a72e <_fflush_r+0xa>
 800a74e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a750:	07d0      	lsls	r0, r2, #31
 800a752:	d404      	bmi.n	800a75e <_fflush_r+0x3a>
 800a754:	0599      	lsls	r1, r3, #22
 800a756:	d402      	bmi.n	800a75e <_fflush_r+0x3a>
 800a758:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a75a:	f000 f915 	bl	800a988 <__retarget_lock_acquire_recursive>
 800a75e:	4628      	mov	r0, r5
 800a760:	4621      	mov	r1, r4
 800a762:	f7ff ff59 	bl	800a618 <__sflush_r>
 800a766:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a768:	07da      	lsls	r2, r3, #31
 800a76a:	4605      	mov	r5, r0
 800a76c:	d4e0      	bmi.n	800a730 <_fflush_r+0xc>
 800a76e:	89a3      	ldrh	r3, [r4, #12]
 800a770:	059b      	lsls	r3, r3, #22
 800a772:	d4dd      	bmi.n	800a730 <_fflush_r+0xc>
 800a774:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a776:	f000 f908 	bl	800a98a <__retarget_lock_release_recursive>
 800a77a:	e7d9      	b.n	800a730 <_fflush_r+0xc>
 800a77c:	4b05      	ldr	r3, [pc, #20]	; (800a794 <_fflush_r+0x70>)
 800a77e:	429c      	cmp	r4, r3
 800a780:	d101      	bne.n	800a786 <_fflush_r+0x62>
 800a782:	68ac      	ldr	r4, [r5, #8]
 800a784:	e7df      	b.n	800a746 <_fflush_r+0x22>
 800a786:	4b04      	ldr	r3, [pc, #16]	; (800a798 <_fflush_r+0x74>)
 800a788:	429c      	cmp	r4, r3
 800a78a:	bf08      	it	eq
 800a78c:	68ec      	ldreq	r4, [r5, #12]
 800a78e:	e7da      	b.n	800a746 <_fflush_r+0x22>
 800a790:	0800b8a4 	.word	0x0800b8a4
 800a794:	0800b8c4 	.word	0x0800b8c4
 800a798:	0800b884 	.word	0x0800b884

0800a79c <std>:
 800a79c:	2300      	movs	r3, #0
 800a79e:	b510      	push	{r4, lr}
 800a7a0:	4604      	mov	r4, r0
 800a7a2:	e9c0 3300 	strd	r3, r3, [r0]
 800a7a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a7aa:	6083      	str	r3, [r0, #8]
 800a7ac:	8181      	strh	r1, [r0, #12]
 800a7ae:	6643      	str	r3, [r0, #100]	; 0x64
 800a7b0:	81c2      	strh	r2, [r0, #14]
 800a7b2:	6183      	str	r3, [r0, #24]
 800a7b4:	4619      	mov	r1, r3
 800a7b6:	2208      	movs	r2, #8
 800a7b8:	305c      	adds	r0, #92	; 0x5c
 800a7ba:	f7fb fdcd 	bl	8006358 <memset>
 800a7be:	4b05      	ldr	r3, [pc, #20]	; (800a7d4 <std+0x38>)
 800a7c0:	6263      	str	r3, [r4, #36]	; 0x24
 800a7c2:	4b05      	ldr	r3, [pc, #20]	; (800a7d8 <std+0x3c>)
 800a7c4:	62a3      	str	r3, [r4, #40]	; 0x28
 800a7c6:	4b05      	ldr	r3, [pc, #20]	; (800a7dc <std+0x40>)
 800a7c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a7ca:	4b05      	ldr	r3, [pc, #20]	; (800a7e0 <std+0x44>)
 800a7cc:	6224      	str	r4, [r4, #32]
 800a7ce:	6323      	str	r3, [r4, #48]	; 0x30
 800a7d0:	bd10      	pop	{r4, pc}
 800a7d2:	bf00      	nop
 800a7d4:	0800aaf1 	.word	0x0800aaf1
 800a7d8:	0800ab13 	.word	0x0800ab13
 800a7dc:	0800ab4b 	.word	0x0800ab4b
 800a7e0:	0800ab6f 	.word	0x0800ab6f

0800a7e4 <_cleanup_r>:
 800a7e4:	4901      	ldr	r1, [pc, #4]	; (800a7ec <_cleanup_r+0x8>)
 800a7e6:	f000 b8af 	b.w	800a948 <_fwalk_reent>
 800a7ea:	bf00      	nop
 800a7ec:	0800a725 	.word	0x0800a725

0800a7f0 <__sfmoreglue>:
 800a7f0:	b570      	push	{r4, r5, r6, lr}
 800a7f2:	2268      	movs	r2, #104	; 0x68
 800a7f4:	1e4d      	subs	r5, r1, #1
 800a7f6:	4355      	muls	r5, r2
 800a7f8:	460e      	mov	r6, r1
 800a7fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a7fe:	f7ff fa59 	bl	8009cb4 <_malloc_r>
 800a802:	4604      	mov	r4, r0
 800a804:	b140      	cbz	r0, 800a818 <__sfmoreglue+0x28>
 800a806:	2100      	movs	r1, #0
 800a808:	e9c0 1600 	strd	r1, r6, [r0]
 800a80c:	300c      	adds	r0, #12
 800a80e:	60a0      	str	r0, [r4, #8]
 800a810:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a814:	f7fb fda0 	bl	8006358 <memset>
 800a818:	4620      	mov	r0, r4
 800a81a:	bd70      	pop	{r4, r5, r6, pc}

0800a81c <__sfp_lock_acquire>:
 800a81c:	4801      	ldr	r0, [pc, #4]	; (800a824 <__sfp_lock_acquire+0x8>)
 800a81e:	f000 b8b3 	b.w	800a988 <__retarget_lock_acquire_recursive>
 800a822:	bf00      	nop
 800a824:	20000389 	.word	0x20000389

0800a828 <__sfp_lock_release>:
 800a828:	4801      	ldr	r0, [pc, #4]	; (800a830 <__sfp_lock_release+0x8>)
 800a82a:	f000 b8ae 	b.w	800a98a <__retarget_lock_release_recursive>
 800a82e:	bf00      	nop
 800a830:	20000389 	.word	0x20000389

0800a834 <__sinit_lock_acquire>:
 800a834:	4801      	ldr	r0, [pc, #4]	; (800a83c <__sinit_lock_acquire+0x8>)
 800a836:	f000 b8a7 	b.w	800a988 <__retarget_lock_acquire_recursive>
 800a83a:	bf00      	nop
 800a83c:	2000038a 	.word	0x2000038a

0800a840 <__sinit_lock_release>:
 800a840:	4801      	ldr	r0, [pc, #4]	; (800a848 <__sinit_lock_release+0x8>)
 800a842:	f000 b8a2 	b.w	800a98a <__retarget_lock_release_recursive>
 800a846:	bf00      	nop
 800a848:	2000038a 	.word	0x2000038a

0800a84c <__sinit>:
 800a84c:	b510      	push	{r4, lr}
 800a84e:	4604      	mov	r4, r0
 800a850:	f7ff fff0 	bl	800a834 <__sinit_lock_acquire>
 800a854:	69a3      	ldr	r3, [r4, #24]
 800a856:	b11b      	cbz	r3, 800a860 <__sinit+0x14>
 800a858:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a85c:	f7ff bff0 	b.w	800a840 <__sinit_lock_release>
 800a860:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a864:	6523      	str	r3, [r4, #80]	; 0x50
 800a866:	4b13      	ldr	r3, [pc, #76]	; (800a8b4 <__sinit+0x68>)
 800a868:	4a13      	ldr	r2, [pc, #76]	; (800a8b8 <__sinit+0x6c>)
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	62a2      	str	r2, [r4, #40]	; 0x28
 800a86e:	42a3      	cmp	r3, r4
 800a870:	bf04      	itt	eq
 800a872:	2301      	moveq	r3, #1
 800a874:	61a3      	streq	r3, [r4, #24]
 800a876:	4620      	mov	r0, r4
 800a878:	f000 f820 	bl	800a8bc <__sfp>
 800a87c:	6060      	str	r0, [r4, #4]
 800a87e:	4620      	mov	r0, r4
 800a880:	f000 f81c 	bl	800a8bc <__sfp>
 800a884:	60a0      	str	r0, [r4, #8]
 800a886:	4620      	mov	r0, r4
 800a888:	f000 f818 	bl	800a8bc <__sfp>
 800a88c:	2200      	movs	r2, #0
 800a88e:	60e0      	str	r0, [r4, #12]
 800a890:	2104      	movs	r1, #4
 800a892:	6860      	ldr	r0, [r4, #4]
 800a894:	f7ff ff82 	bl	800a79c <std>
 800a898:	68a0      	ldr	r0, [r4, #8]
 800a89a:	2201      	movs	r2, #1
 800a89c:	2109      	movs	r1, #9
 800a89e:	f7ff ff7d 	bl	800a79c <std>
 800a8a2:	68e0      	ldr	r0, [r4, #12]
 800a8a4:	2202      	movs	r2, #2
 800a8a6:	2112      	movs	r1, #18
 800a8a8:	f7ff ff78 	bl	800a79c <std>
 800a8ac:	2301      	movs	r3, #1
 800a8ae:	61a3      	str	r3, [r4, #24]
 800a8b0:	e7d2      	b.n	800a858 <__sinit+0xc>
 800a8b2:	bf00      	nop
 800a8b4:	0800b440 	.word	0x0800b440
 800a8b8:	0800a7e5 	.word	0x0800a7e5

0800a8bc <__sfp>:
 800a8bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8be:	4607      	mov	r7, r0
 800a8c0:	f7ff ffac 	bl	800a81c <__sfp_lock_acquire>
 800a8c4:	4b1e      	ldr	r3, [pc, #120]	; (800a940 <__sfp+0x84>)
 800a8c6:	681e      	ldr	r6, [r3, #0]
 800a8c8:	69b3      	ldr	r3, [r6, #24]
 800a8ca:	b913      	cbnz	r3, 800a8d2 <__sfp+0x16>
 800a8cc:	4630      	mov	r0, r6
 800a8ce:	f7ff ffbd 	bl	800a84c <__sinit>
 800a8d2:	3648      	adds	r6, #72	; 0x48
 800a8d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a8d8:	3b01      	subs	r3, #1
 800a8da:	d503      	bpl.n	800a8e4 <__sfp+0x28>
 800a8dc:	6833      	ldr	r3, [r6, #0]
 800a8de:	b30b      	cbz	r3, 800a924 <__sfp+0x68>
 800a8e0:	6836      	ldr	r6, [r6, #0]
 800a8e2:	e7f7      	b.n	800a8d4 <__sfp+0x18>
 800a8e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a8e8:	b9d5      	cbnz	r5, 800a920 <__sfp+0x64>
 800a8ea:	4b16      	ldr	r3, [pc, #88]	; (800a944 <__sfp+0x88>)
 800a8ec:	60e3      	str	r3, [r4, #12]
 800a8ee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a8f2:	6665      	str	r5, [r4, #100]	; 0x64
 800a8f4:	f000 f847 	bl	800a986 <__retarget_lock_init_recursive>
 800a8f8:	f7ff ff96 	bl	800a828 <__sfp_lock_release>
 800a8fc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a900:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a904:	6025      	str	r5, [r4, #0]
 800a906:	61a5      	str	r5, [r4, #24]
 800a908:	2208      	movs	r2, #8
 800a90a:	4629      	mov	r1, r5
 800a90c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a910:	f7fb fd22 	bl	8006358 <memset>
 800a914:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a918:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a91c:	4620      	mov	r0, r4
 800a91e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a920:	3468      	adds	r4, #104	; 0x68
 800a922:	e7d9      	b.n	800a8d8 <__sfp+0x1c>
 800a924:	2104      	movs	r1, #4
 800a926:	4638      	mov	r0, r7
 800a928:	f7ff ff62 	bl	800a7f0 <__sfmoreglue>
 800a92c:	4604      	mov	r4, r0
 800a92e:	6030      	str	r0, [r6, #0]
 800a930:	2800      	cmp	r0, #0
 800a932:	d1d5      	bne.n	800a8e0 <__sfp+0x24>
 800a934:	f7ff ff78 	bl	800a828 <__sfp_lock_release>
 800a938:	230c      	movs	r3, #12
 800a93a:	603b      	str	r3, [r7, #0]
 800a93c:	e7ee      	b.n	800a91c <__sfp+0x60>
 800a93e:	bf00      	nop
 800a940:	0800b440 	.word	0x0800b440
 800a944:	ffff0001 	.word	0xffff0001

0800a948 <_fwalk_reent>:
 800a948:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a94c:	4606      	mov	r6, r0
 800a94e:	4688      	mov	r8, r1
 800a950:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a954:	2700      	movs	r7, #0
 800a956:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a95a:	f1b9 0901 	subs.w	r9, r9, #1
 800a95e:	d505      	bpl.n	800a96c <_fwalk_reent+0x24>
 800a960:	6824      	ldr	r4, [r4, #0]
 800a962:	2c00      	cmp	r4, #0
 800a964:	d1f7      	bne.n	800a956 <_fwalk_reent+0xe>
 800a966:	4638      	mov	r0, r7
 800a968:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a96c:	89ab      	ldrh	r3, [r5, #12]
 800a96e:	2b01      	cmp	r3, #1
 800a970:	d907      	bls.n	800a982 <_fwalk_reent+0x3a>
 800a972:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a976:	3301      	adds	r3, #1
 800a978:	d003      	beq.n	800a982 <_fwalk_reent+0x3a>
 800a97a:	4629      	mov	r1, r5
 800a97c:	4630      	mov	r0, r6
 800a97e:	47c0      	blx	r8
 800a980:	4307      	orrs	r7, r0
 800a982:	3568      	adds	r5, #104	; 0x68
 800a984:	e7e9      	b.n	800a95a <_fwalk_reent+0x12>

0800a986 <__retarget_lock_init_recursive>:
 800a986:	4770      	bx	lr

0800a988 <__retarget_lock_acquire_recursive>:
 800a988:	4770      	bx	lr

0800a98a <__retarget_lock_release_recursive>:
 800a98a:	4770      	bx	lr

0800a98c <__swhatbuf_r>:
 800a98c:	b570      	push	{r4, r5, r6, lr}
 800a98e:	460e      	mov	r6, r1
 800a990:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a994:	2900      	cmp	r1, #0
 800a996:	b096      	sub	sp, #88	; 0x58
 800a998:	4614      	mov	r4, r2
 800a99a:	461d      	mov	r5, r3
 800a99c:	da08      	bge.n	800a9b0 <__swhatbuf_r+0x24>
 800a99e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	602a      	str	r2, [r5, #0]
 800a9a6:	061a      	lsls	r2, r3, #24
 800a9a8:	d410      	bmi.n	800a9cc <__swhatbuf_r+0x40>
 800a9aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a9ae:	e00e      	b.n	800a9ce <__swhatbuf_r+0x42>
 800a9b0:	466a      	mov	r2, sp
 800a9b2:	f000 f903 	bl	800abbc <_fstat_r>
 800a9b6:	2800      	cmp	r0, #0
 800a9b8:	dbf1      	blt.n	800a99e <__swhatbuf_r+0x12>
 800a9ba:	9a01      	ldr	r2, [sp, #4]
 800a9bc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a9c0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a9c4:	425a      	negs	r2, r3
 800a9c6:	415a      	adcs	r2, r3
 800a9c8:	602a      	str	r2, [r5, #0]
 800a9ca:	e7ee      	b.n	800a9aa <__swhatbuf_r+0x1e>
 800a9cc:	2340      	movs	r3, #64	; 0x40
 800a9ce:	2000      	movs	r0, #0
 800a9d0:	6023      	str	r3, [r4, #0]
 800a9d2:	b016      	add	sp, #88	; 0x58
 800a9d4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a9d8 <__smakebuf_r>:
 800a9d8:	898b      	ldrh	r3, [r1, #12]
 800a9da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a9dc:	079d      	lsls	r5, r3, #30
 800a9de:	4606      	mov	r6, r0
 800a9e0:	460c      	mov	r4, r1
 800a9e2:	d507      	bpl.n	800a9f4 <__smakebuf_r+0x1c>
 800a9e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a9e8:	6023      	str	r3, [r4, #0]
 800a9ea:	6123      	str	r3, [r4, #16]
 800a9ec:	2301      	movs	r3, #1
 800a9ee:	6163      	str	r3, [r4, #20]
 800a9f0:	b002      	add	sp, #8
 800a9f2:	bd70      	pop	{r4, r5, r6, pc}
 800a9f4:	ab01      	add	r3, sp, #4
 800a9f6:	466a      	mov	r2, sp
 800a9f8:	f7ff ffc8 	bl	800a98c <__swhatbuf_r>
 800a9fc:	9900      	ldr	r1, [sp, #0]
 800a9fe:	4605      	mov	r5, r0
 800aa00:	4630      	mov	r0, r6
 800aa02:	f7ff f957 	bl	8009cb4 <_malloc_r>
 800aa06:	b948      	cbnz	r0, 800aa1c <__smakebuf_r+0x44>
 800aa08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa0c:	059a      	lsls	r2, r3, #22
 800aa0e:	d4ef      	bmi.n	800a9f0 <__smakebuf_r+0x18>
 800aa10:	f023 0303 	bic.w	r3, r3, #3
 800aa14:	f043 0302 	orr.w	r3, r3, #2
 800aa18:	81a3      	strh	r3, [r4, #12]
 800aa1a:	e7e3      	b.n	800a9e4 <__smakebuf_r+0xc>
 800aa1c:	4b0d      	ldr	r3, [pc, #52]	; (800aa54 <__smakebuf_r+0x7c>)
 800aa1e:	62b3      	str	r3, [r6, #40]	; 0x28
 800aa20:	89a3      	ldrh	r3, [r4, #12]
 800aa22:	6020      	str	r0, [r4, #0]
 800aa24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa28:	81a3      	strh	r3, [r4, #12]
 800aa2a:	9b00      	ldr	r3, [sp, #0]
 800aa2c:	6163      	str	r3, [r4, #20]
 800aa2e:	9b01      	ldr	r3, [sp, #4]
 800aa30:	6120      	str	r0, [r4, #16]
 800aa32:	b15b      	cbz	r3, 800aa4c <__smakebuf_r+0x74>
 800aa34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aa38:	4630      	mov	r0, r6
 800aa3a:	f000 f8d1 	bl	800abe0 <_isatty_r>
 800aa3e:	b128      	cbz	r0, 800aa4c <__smakebuf_r+0x74>
 800aa40:	89a3      	ldrh	r3, [r4, #12]
 800aa42:	f023 0303 	bic.w	r3, r3, #3
 800aa46:	f043 0301 	orr.w	r3, r3, #1
 800aa4a:	81a3      	strh	r3, [r4, #12]
 800aa4c:	89a0      	ldrh	r0, [r4, #12]
 800aa4e:	4305      	orrs	r5, r0
 800aa50:	81a5      	strh	r5, [r4, #12]
 800aa52:	e7cd      	b.n	800a9f0 <__smakebuf_r+0x18>
 800aa54:	0800a7e5 	.word	0x0800a7e5

0800aa58 <_malloc_usable_size_r>:
 800aa58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa5c:	1f18      	subs	r0, r3, #4
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	bfbc      	itt	lt
 800aa62:	580b      	ldrlt	r3, [r1, r0]
 800aa64:	18c0      	addlt	r0, r0, r3
 800aa66:	4770      	bx	lr

0800aa68 <_raise_r>:
 800aa68:	291f      	cmp	r1, #31
 800aa6a:	b538      	push	{r3, r4, r5, lr}
 800aa6c:	4604      	mov	r4, r0
 800aa6e:	460d      	mov	r5, r1
 800aa70:	d904      	bls.n	800aa7c <_raise_r+0x14>
 800aa72:	2316      	movs	r3, #22
 800aa74:	6003      	str	r3, [r0, #0]
 800aa76:	f04f 30ff 	mov.w	r0, #4294967295
 800aa7a:	bd38      	pop	{r3, r4, r5, pc}
 800aa7c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800aa7e:	b112      	cbz	r2, 800aa86 <_raise_r+0x1e>
 800aa80:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800aa84:	b94b      	cbnz	r3, 800aa9a <_raise_r+0x32>
 800aa86:	4620      	mov	r0, r4
 800aa88:	f000 f830 	bl	800aaec <_getpid_r>
 800aa8c:	462a      	mov	r2, r5
 800aa8e:	4601      	mov	r1, r0
 800aa90:	4620      	mov	r0, r4
 800aa92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aa96:	f000 b817 	b.w	800aac8 <_kill_r>
 800aa9a:	2b01      	cmp	r3, #1
 800aa9c:	d00a      	beq.n	800aab4 <_raise_r+0x4c>
 800aa9e:	1c59      	adds	r1, r3, #1
 800aaa0:	d103      	bne.n	800aaaa <_raise_r+0x42>
 800aaa2:	2316      	movs	r3, #22
 800aaa4:	6003      	str	r3, [r0, #0]
 800aaa6:	2001      	movs	r0, #1
 800aaa8:	e7e7      	b.n	800aa7a <_raise_r+0x12>
 800aaaa:	2400      	movs	r4, #0
 800aaac:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800aab0:	4628      	mov	r0, r5
 800aab2:	4798      	blx	r3
 800aab4:	2000      	movs	r0, #0
 800aab6:	e7e0      	b.n	800aa7a <_raise_r+0x12>

0800aab8 <raise>:
 800aab8:	4b02      	ldr	r3, [pc, #8]	; (800aac4 <raise+0xc>)
 800aaba:	4601      	mov	r1, r0
 800aabc:	6818      	ldr	r0, [r3, #0]
 800aabe:	f7ff bfd3 	b.w	800aa68 <_raise_r>
 800aac2:	bf00      	nop
 800aac4:	2000000c 	.word	0x2000000c

0800aac8 <_kill_r>:
 800aac8:	b538      	push	{r3, r4, r5, lr}
 800aaca:	4d07      	ldr	r5, [pc, #28]	; (800aae8 <_kill_r+0x20>)
 800aacc:	2300      	movs	r3, #0
 800aace:	4604      	mov	r4, r0
 800aad0:	4608      	mov	r0, r1
 800aad2:	4611      	mov	r1, r2
 800aad4:	602b      	str	r3, [r5, #0]
 800aad6:	f7f7 f92b 	bl	8001d30 <_kill>
 800aada:	1c43      	adds	r3, r0, #1
 800aadc:	d102      	bne.n	800aae4 <_kill_r+0x1c>
 800aade:	682b      	ldr	r3, [r5, #0]
 800aae0:	b103      	cbz	r3, 800aae4 <_kill_r+0x1c>
 800aae2:	6023      	str	r3, [r4, #0]
 800aae4:	bd38      	pop	{r3, r4, r5, pc}
 800aae6:	bf00      	nop
 800aae8:	20000384 	.word	0x20000384

0800aaec <_getpid_r>:
 800aaec:	f7f7 b918 	b.w	8001d20 <_getpid>

0800aaf0 <__sread>:
 800aaf0:	b510      	push	{r4, lr}
 800aaf2:	460c      	mov	r4, r1
 800aaf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aaf8:	f000 f894 	bl	800ac24 <_read_r>
 800aafc:	2800      	cmp	r0, #0
 800aafe:	bfab      	itete	ge
 800ab00:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ab02:	89a3      	ldrhlt	r3, [r4, #12]
 800ab04:	181b      	addge	r3, r3, r0
 800ab06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ab0a:	bfac      	ite	ge
 800ab0c:	6563      	strge	r3, [r4, #84]	; 0x54
 800ab0e:	81a3      	strhlt	r3, [r4, #12]
 800ab10:	bd10      	pop	{r4, pc}

0800ab12 <__swrite>:
 800ab12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab16:	461f      	mov	r7, r3
 800ab18:	898b      	ldrh	r3, [r1, #12]
 800ab1a:	05db      	lsls	r3, r3, #23
 800ab1c:	4605      	mov	r5, r0
 800ab1e:	460c      	mov	r4, r1
 800ab20:	4616      	mov	r6, r2
 800ab22:	d505      	bpl.n	800ab30 <__swrite+0x1e>
 800ab24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab28:	2302      	movs	r3, #2
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	f000 f868 	bl	800ac00 <_lseek_r>
 800ab30:	89a3      	ldrh	r3, [r4, #12]
 800ab32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ab3a:	81a3      	strh	r3, [r4, #12]
 800ab3c:	4632      	mov	r2, r6
 800ab3e:	463b      	mov	r3, r7
 800ab40:	4628      	mov	r0, r5
 800ab42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab46:	f000 b817 	b.w	800ab78 <_write_r>

0800ab4a <__sseek>:
 800ab4a:	b510      	push	{r4, lr}
 800ab4c:	460c      	mov	r4, r1
 800ab4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab52:	f000 f855 	bl	800ac00 <_lseek_r>
 800ab56:	1c43      	adds	r3, r0, #1
 800ab58:	89a3      	ldrh	r3, [r4, #12]
 800ab5a:	bf15      	itete	ne
 800ab5c:	6560      	strne	r0, [r4, #84]	; 0x54
 800ab5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ab62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ab66:	81a3      	strheq	r3, [r4, #12]
 800ab68:	bf18      	it	ne
 800ab6a:	81a3      	strhne	r3, [r4, #12]
 800ab6c:	bd10      	pop	{r4, pc}

0800ab6e <__sclose>:
 800ab6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab72:	f000 b813 	b.w	800ab9c <_close_r>
	...

0800ab78 <_write_r>:
 800ab78:	b538      	push	{r3, r4, r5, lr}
 800ab7a:	4d07      	ldr	r5, [pc, #28]	; (800ab98 <_write_r+0x20>)
 800ab7c:	4604      	mov	r4, r0
 800ab7e:	4608      	mov	r0, r1
 800ab80:	4611      	mov	r1, r2
 800ab82:	2200      	movs	r2, #0
 800ab84:	602a      	str	r2, [r5, #0]
 800ab86:	461a      	mov	r2, r3
 800ab88:	f7f7 f909 	bl	8001d9e <_write>
 800ab8c:	1c43      	adds	r3, r0, #1
 800ab8e:	d102      	bne.n	800ab96 <_write_r+0x1e>
 800ab90:	682b      	ldr	r3, [r5, #0]
 800ab92:	b103      	cbz	r3, 800ab96 <_write_r+0x1e>
 800ab94:	6023      	str	r3, [r4, #0]
 800ab96:	bd38      	pop	{r3, r4, r5, pc}
 800ab98:	20000384 	.word	0x20000384

0800ab9c <_close_r>:
 800ab9c:	b538      	push	{r3, r4, r5, lr}
 800ab9e:	4d06      	ldr	r5, [pc, #24]	; (800abb8 <_close_r+0x1c>)
 800aba0:	2300      	movs	r3, #0
 800aba2:	4604      	mov	r4, r0
 800aba4:	4608      	mov	r0, r1
 800aba6:	602b      	str	r3, [r5, #0]
 800aba8:	f7f7 f915 	bl	8001dd6 <_close>
 800abac:	1c43      	adds	r3, r0, #1
 800abae:	d102      	bne.n	800abb6 <_close_r+0x1a>
 800abb0:	682b      	ldr	r3, [r5, #0]
 800abb2:	b103      	cbz	r3, 800abb6 <_close_r+0x1a>
 800abb4:	6023      	str	r3, [r4, #0]
 800abb6:	bd38      	pop	{r3, r4, r5, pc}
 800abb8:	20000384 	.word	0x20000384

0800abbc <_fstat_r>:
 800abbc:	b538      	push	{r3, r4, r5, lr}
 800abbe:	4d07      	ldr	r5, [pc, #28]	; (800abdc <_fstat_r+0x20>)
 800abc0:	2300      	movs	r3, #0
 800abc2:	4604      	mov	r4, r0
 800abc4:	4608      	mov	r0, r1
 800abc6:	4611      	mov	r1, r2
 800abc8:	602b      	str	r3, [r5, #0]
 800abca:	f7f7 f910 	bl	8001dee <_fstat>
 800abce:	1c43      	adds	r3, r0, #1
 800abd0:	d102      	bne.n	800abd8 <_fstat_r+0x1c>
 800abd2:	682b      	ldr	r3, [r5, #0]
 800abd4:	b103      	cbz	r3, 800abd8 <_fstat_r+0x1c>
 800abd6:	6023      	str	r3, [r4, #0]
 800abd8:	bd38      	pop	{r3, r4, r5, pc}
 800abda:	bf00      	nop
 800abdc:	20000384 	.word	0x20000384

0800abe0 <_isatty_r>:
 800abe0:	b538      	push	{r3, r4, r5, lr}
 800abe2:	4d06      	ldr	r5, [pc, #24]	; (800abfc <_isatty_r+0x1c>)
 800abe4:	2300      	movs	r3, #0
 800abe6:	4604      	mov	r4, r0
 800abe8:	4608      	mov	r0, r1
 800abea:	602b      	str	r3, [r5, #0]
 800abec:	f7f7 f90f 	bl	8001e0e <_isatty>
 800abf0:	1c43      	adds	r3, r0, #1
 800abf2:	d102      	bne.n	800abfa <_isatty_r+0x1a>
 800abf4:	682b      	ldr	r3, [r5, #0]
 800abf6:	b103      	cbz	r3, 800abfa <_isatty_r+0x1a>
 800abf8:	6023      	str	r3, [r4, #0]
 800abfa:	bd38      	pop	{r3, r4, r5, pc}
 800abfc:	20000384 	.word	0x20000384

0800ac00 <_lseek_r>:
 800ac00:	b538      	push	{r3, r4, r5, lr}
 800ac02:	4d07      	ldr	r5, [pc, #28]	; (800ac20 <_lseek_r+0x20>)
 800ac04:	4604      	mov	r4, r0
 800ac06:	4608      	mov	r0, r1
 800ac08:	4611      	mov	r1, r2
 800ac0a:	2200      	movs	r2, #0
 800ac0c:	602a      	str	r2, [r5, #0]
 800ac0e:	461a      	mov	r2, r3
 800ac10:	f7f7 f908 	bl	8001e24 <_lseek>
 800ac14:	1c43      	adds	r3, r0, #1
 800ac16:	d102      	bne.n	800ac1e <_lseek_r+0x1e>
 800ac18:	682b      	ldr	r3, [r5, #0]
 800ac1a:	b103      	cbz	r3, 800ac1e <_lseek_r+0x1e>
 800ac1c:	6023      	str	r3, [r4, #0]
 800ac1e:	bd38      	pop	{r3, r4, r5, pc}
 800ac20:	20000384 	.word	0x20000384

0800ac24 <_read_r>:
 800ac24:	b538      	push	{r3, r4, r5, lr}
 800ac26:	4d07      	ldr	r5, [pc, #28]	; (800ac44 <_read_r+0x20>)
 800ac28:	4604      	mov	r4, r0
 800ac2a:	4608      	mov	r0, r1
 800ac2c:	4611      	mov	r1, r2
 800ac2e:	2200      	movs	r2, #0
 800ac30:	602a      	str	r2, [r5, #0]
 800ac32:	461a      	mov	r2, r3
 800ac34:	f7f7 f896 	bl	8001d64 <_read>
 800ac38:	1c43      	adds	r3, r0, #1
 800ac3a:	d102      	bne.n	800ac42 <_read_r+0x1e>
 800ac3c:	682b      	ldr	r3, [r5, #0]
 800ac3e:	b103      	cbz	r3, 800ac42 <_read_r+0x1e>
 800ac40:	6023      	str	r3, [r4, #0]
 800ac42:	bd38      	pop	{r3, r4, r5, pc}
 800ac44:	20000384 	.word	0x20000384

0800ac48 <powf>:
 800ac48:	b508      	push	{r3, lr}
 800ac4a:	ed2d 8b04 	vpush	{d8-d9}
 800ac4e:	eeb0 8a60 	vmov.f32	s16, s1
 800ac52:	eeb0 9a40 	vmov.f32	s18, s0
 800ac56:	f000 f84f 	bl	800acf8 <__ieee754_powf>
 800ac5a:	eeb4 8a48 	vcmp.f32	s16, s16
 800ac5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac62:	eef0 8a40 	vmov.f32	s17, s0
 800ac66:	d63e      	bvs.n	800ace6 <powf+0x9e>
 800ac68:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800ac6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac70:	d112      	bne.n	800ac98 <powf+0x50>
 800ac72:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800ac76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac7a:	d039      	beq.n	800acf0 <powf+0xa8>
 800ac7c:	eeb0 0a48 	vmov.f32	s0, s16
 800ac80:	f000 fb35 	bl	800b2ee <finitef>
 800ac84:	b378      	cbz	r0, 800ace6 <powf+0x9e>
 800ac86:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800ac8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac8e:	d52a      	bpl.n	800ace6 <powf+0x9e>
 800ac90:	f7fb fb38 	bl	8006304 <__errno>
 800ac94:	2322      	movs	r3, #34	; 0x22
 800ac96:	e014      	b.n	800acc2 <powf+0x7a>
 800ac98:	f000 fb29 	bl	800b2ee <finitef>
 800ac9c:	b998      	cbnz	r0, 800acc6 <powf+0x7e>
 800ac9e:	eeb0 0a49 	vmov.f32	s0, s18
 800aca2:	f000 fb24 	bl	800b2ee <finitef>
 800aca6:	b170      	cbz	r0, 800acc6 <powf+0x7e>
 800aca8:	eeb0 0a48 	vmov.f32	s0, s16
 800acac:	f000 fb1f 	bl	800b2ee <finitef>
 800acb0:	b148      	cbz	r0, 800acc6 <powf+0x7e>
 800acb2:	eef4 8a68 	vcmp.f32	s17, s17
 800acb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acba:	d7e9      	bvc.n	800ac90 <powf+0x48>
 800acbc:	f7fb fb22 	bl	8006304 <__errno>
 800acc0:	2321      	movs	r3, #33	; 0x21
 800acc2:	6003      	str	r3, [r0, #0]
 800acc4:	e00f      	b.n	800ace6 <powf+0x9e>
 800acc6:	eef5 8a40 	vcmp.f32	s17, #0.0
 800acca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acce:	d10a      	bne.n	800ace6 <powf+0x9e>
 800acd0:	eeb0 0a49 	vmov.f32	s0, s18
 800acd4:	f000 fb0b 	bl	800b2ee <finitef>
 800acd8:	b128      	cbz	r0, 800ace6 <powf+0x9e>
 800acda:	eeb0 0a48 	vmov.f32	s0, s16
 800acde:	f000 fb06 	bl	800b2ee <finitef>
 800ace2:	2800      	cmp	r0, #0
 800ace4:	d1d4      	bne.n	800ac90 <powf+0x48>
 800ace6:	eeb0 0a68 	vmov.f32	s0, s17
 800acea:	ecbd 8b04 	vpop	{d8-d9}
 800acee:	bd08      	pop	{r3, pc}
 800acf0:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800acf4:	e7f7      	b.n	800ace6 <powf+0x9e>
	...

0800acf8 <__ieee754_powf>:
 800acf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acfc:	ee10 4a90 	vmov	r4, s1
 800ad00:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 800ad04:	ed2d 8b02 	vpush	{d8}
 800ad08:	ee10 6a10 	vmov	r6, s0
 800ad0c:	eeb0 8a40 	vmov.f32	s16, s0
 800ad10:	eef0 8a60 	vmov.f32	s17, s1
 800ad14:	d10c      	bne.n	800ad30 <__ieee754_powf+0x38>
 800ad16:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 800ad1a:	0076      	lsls	r6, r6, #1
 800ad1c:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 800ad20:	f240 8296 	bls.w	800b250 <__ieee754_powf+0x558>
 800ad24:	ee38 0a28 	vadd.f32	s0, s16, s17
 800ad28:	ecbd 8b02 	vpop	{d8}
 800ad2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad30:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800ad34:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800ad38:	dcf4      	bgt.n	800ad24 <__ieee754_powf+0x2c>
 800ad3a:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800ad3e:	dd08      	ble.n	800ad52 <__ieee754_powf+0x5a>
 800ad40:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 800ad44:	d1ee      	bne.n	800ad24 <__ieee754_powf+0x2c>
 800ad46:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 800ad4a:	0064      	lsls	r4, r4, #1
 800ad4c:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 800ad50:	e7e6      	b.n	800ad20 <__ieee754_powf+0x28>
 800ad52:	2e00      	cmp	r6, #0
 800ad54:	da20      	bge.n	800ad98 <__ieee754_powf+0xa0>
 800ad56:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 800ad5a:	da2d      	bge.n	800adb8 <__ieee754_powf+0xc0>
 800ad5c:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800ad60:	f2c0 827f 	blt.w	800b262 <__ieee754_powf+0x56a>
 800ad64:	ea4f 53e8 	mov.w	r3, r8, asr #23
 800ad68:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800ad6c:	fa48 f703 	asr.w	r7, r8, r3
 800ad70:	fa07 f303 	lsl.w	r3, r7, r3
 800ad74:	4543      	cmp	r3, r8
 800ad76:	f040 8274 	bne.w	800b262 <__ieee754_powf+0x56a>
 800ad7a:	f007 0701 	and.w	r7, r7, #1
 800ad7e:	f1c7 0702 	rsb	r7, r7, #2
 800ad82:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800ad86:	d11f      	bne.n	800adc8 <__ieee754_powf+0xd0>
 800ad88:	2c00      	cmp	r4, #0
 800ad8a:	f280 8267 	bge.w	800b25c <__ieee754_powf+0x564>
 800ad8e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ad92:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800ad96:	e7c7      	b.n	800ad28 <__ieee754_powf+0x30>
 800ad98:	2700      	movs	r7, #0
 800ad9a:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800ad9e:	d1f0      	bne.n	800ad82 <__ieee754_powf+0x8a>
 800ada0:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 800ada4:	f000 8254 	beq.w	800b250 <__ieee754_powf+0x558>
 800ada8:	dd08      	ble.n	800adbc <__ieee754_powf+0xc4>
 800adaa:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 800b0b4 <__ieee754_powf+0x3bc>
 800adae:	2c00      	cmp	r4, #0
 800adb0:	bfa8      	it	ge
 800adb2:	eeb0 0a68 	vmovge.f32	s0, s17
 800adb6:	e7b7      	b.n	800ad28 <__ieee754_powf+0x30>
 800adb8:	2702      	movs	r7, #2
 800adba:	e7ee      	b.n	800ad9a <__ieee754_powf+0xa2>
 800adbc:	2c00      	cmp	r4, #0
 800adbe:	f280 824a 	bge.w	800b256 <__ieee754_powf+0x55e>
 800adc2:	eeb1 0a68 	vneg.f32	s0, s17
 800adc6:	e7af      	b.n	800ad28 <__ieee754_powf+0x30>
 800adc8:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800adcc:	d102      	bne.n	800add4 <__ieee754_powf+0xdc>
 800adce:	ee28 0a08 	vmul.f32	s0, s16, s16
 800add2:	e7a9      	b.n	800ad28 <__ieee754_powf+0x30>
 800add4:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800add8:	eeb0 0a48 	vmov.f32	s0, s16
 800addc:	d107      	bne.n	800adee <__ieee754_powf+0xf6>
 800adde:	2e00      	cmp	r6, #0
 800ade0:	db05      	blt.n	800adee <__ieee754_powf+0xf6>
 800ade2:	ecbd 8b02 	vpop	{d8}
 800ade6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800adea:	f000 ba53 	b.w	800b294 <__ieee754_sqrtf>
 800adee:	f000 fa77 	bl	800b2e0 <fabsf>
 800adf2:	b125      	cbz	r5, 800adfe <__ieee754_powf+0x106>
 800adf4:	f026 4340 	bic.w	r3, r6, #3221225472	; 0xc0000000
 800adf8:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800adfc:	d116      	bne.n	800ae2c <__ieee754_powf+0x134>
 800adfe:	2c00      	cmp	r4, #0
 800ae00:	bfbc      	itt	lt
 800ae02:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800ae06:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800ae0a:	2e00      	cmp	r6, #0
 800ae0c:	da8c      	bge.n	800ad28 <__ieee754_powf+0x30>
 800ae0e:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 800ae12:	ea55 0307 	orrs.w	r3, r5, r7
 800ae16:	d104      	bne.n	800ae22 <__ieee754_powf+0x12a>
 800ae18:	ee70 7a40 	vsub.f32	s15, s0, s0
 800ae1c:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800ae20:	e782      	b.n	800ad28 <__ieee754_powf+0x30>
 800ae22:	2f01      	cmp	r7, #1
 800ae24:	d180      	bne.n	800ad28 <__ieee754_powf+0x30>
 800ae26:	eeb1 0a40 	vneg.f32	s0, s0
 800ae2a:	e77d      	b.n	800ad28 <__ieee754_powf+0x30>
 800ae2c:	0ff0      	lsrs	r0, r6, #31
 800ae2e:	3801      	subs	r0, #1
 800ae30:	ea57 0300 	orrs.w	r3, r7, r0
 800ae34:	d104      	bne.n	800ae40 <__ieee754_powf+0x148>
 800ae36:	ee38 8a48 	vsub.f32	s16, s16, s16
 800ae3a:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800ae3e:	e773      	b.n	800ad28 <__ieee754_powf+0x30>
 800ae40:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 800ae44:	dd74      	ble.n	800af30 <__ieee754_powf+0x238>
 800ae46:	4b9c      	ldr	r3, [pc, #624]	; (800b0b8 <__ieee754_powf+0x3c0>)
 800ae48:	429d      	cmp	r5, r3
 800ae4a:	dc08      	bgt.n	800ae5e <__ieee754_powf+0x166>
 800ae4c:	2c00      	cmp	r4, #0
 800ae4e:	da0b      	bge.n	800ae68 <__ieee754_powf+0x170>
 800ae50:	2000      	movs	r0, #0
 800ae52:	ecbd 8b02 	vpop	{d8}
 800ae56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae5a:	f000 ba3b 	b.w	800b2d4 <__math_oflowf>
 800ae5e:	4b97      	ldr	r3, [pc, #604]	; (800b0bc <__ieee754_powf+0x3c4>)
 800ae60:	429d      	cmp	r5, r3
 800ae62:	dd08      	ble.n	800ae76 <__ieee754_powf+0x17e>
 800ae64:	2c00      	cmp	r4, #0
 800ae66:	dcf3      	bgt.n	800ae50 <__ieee754_powf+0x158>
 800ae68:	2000      	movs	r0, #0
 800ae6a:	ecbd 8b02 	vpop	{d8}
 800ae6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae72:	f000 ba29 	b.w	800b2c8 <__math_uflowf>
 800ae76:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ae7a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ae7e:	eddf 6a90 	vldr	s13, [pc, #576]	; 800b0c0 <__ieee754_powf+0x3c8>
 800ae82:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800ae86:	eee0 6a67 	vfms.f32	s13, s0, s15
 800ae8a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800ae8e:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800ae92:	ee20 7a00 	vmul.f32	s14, s0, s0
 800ae96:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae9a:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800b0c4 <__ieee754_powf+0x3cc>
 800ae9e:	ee67 7a67 	vnmul.f32	s15, s14, s15
 800aea2:	ed9f 7a89 	vldr	s14, [pc, #548]	; 800b0c8 <__ieee754_powf+0x3d0>
 800aea6:	eee0 7a07 	vfma.f32	s15, s0, s14
 800aeaa:	ed9f 7a88 	vldr	s14, [pc, #544]	; 800b0cc <__ieee754_powf+0x3d4>
 800aeae:	eef0 6a67 	vmov.f32	s13, s15
 800aeb2:	eee0 6a07 	vfma.f32	s13, s0, s14
 800aeb6:	ee16 3a90 	vmov	r3, s13
 800aeba:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800aebe:	f023 030f 	bic.w	r3, r3, #15
 800aec2:	ee00 3a90 	vmov	s1, r3
 800aec6:	eee0 0a47 	vfms.f32	s1, s0, s14
 800aeca:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800aece:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 800aed2:	f024 040f 	bic.w	r4, r4, #15
 800aed6:	ee07 4a10 	vmov	s14, r4
 800aeda:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800aede:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800aee2:	ee07 3a90 	vmov	s15, r3
 800aee6:	eee7 0a27 	vfma.f32	s1, s14, s15
 800aeea:	3f01      	subs	r7, #1
 800aeec:	ea57 0200 	orrs.w	r2, r7, r0
 800aef0:	ee07 4a10 	vmov	s14, r4
 800aef4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800aef8:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800aefc:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800af00:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800af04:	ee17 4a10 	vmov	r4, s14
 800af08:	bf08      	it	eq
 800af0a:	eeb0 8a40 	vmoveq.f32	s16, s0
 800af0e:	2c00      	cmp	r4, #0
 800af10:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800af14:	f340 817e 	ble.w	800b214 <__ieee754_powf+0x51c>
 800af18:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800af1c:	f340 80f8 	ble.w	800b110 <__ieee754_powf+0x418>
 800af20:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800af24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af28:	bf4c      	ite	mi
 800af2a:	2001      	movmi	r0, #1
 800af2c:	2000      	movpl	r0, #0
 800af2e:	e790      	b.n	800ae52 <__ieee754_powf+0x15a>
 800af30:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 800af34:	bf01      	itttt	eq
 800af36:	eddf 7a66 	vldreq	s15, [pc, #408]	; 800b0d0 <__ieee754_powf+0x3d8>
 800af3a:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800af3e:	f06f 0217 	mvneq.w	r2, #23
 800af42:	ee17 5a90 	vmoveq	r5, s15
 800af46:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800af4a:	bf18      	it	ne
 800af4c:	2200      	movne	r2, #0
 800af4e:	3b7f      	subs	r3, #127	; 0x7f
 800af50:	4413      	add	r3, r2
 800af52:	4a60      	ldr	r2, [pc, #384]	; (800b0d4 <__ieee754_powf+0x3dc>)
 800af54:	f3c5 0516 	ubfx	r5, r5, #0, #23
 800af58:	4295      	cmp	r5, r2
 800af5a:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 800af5e:	dd06      	ble.n	800af6e <__ieee754_powf+0x276>
 800af60:	4a5d      	ldr	r2, [pc, #372]	; (800b0d8 <__ieee754_powf+0x3e0>)
 800af62:	4295      	cmp	r5, r2
 800af64:	f340 80a4 	ble.w	800b0b0 <__ieee754_powf+0x3b8>
 800af68:	3301      	adds	r3, #1
 800af6a:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800af6e:	2500      	movs	r5, #0
 800af70:	4a5a      	ldr	r2, [pc, #360]	; (800b0dc <__ieee754_powf+0x3e4>)
 800af72:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 800af76:	ee07 1a90 	vmov	s15, r1
 800af7a:	ed92 7a00 	vldr	s14, [r2]
 800af7e:	4a58      	ldr	r2, [pc, #352]	; (800b0e0 <__ieee754_powf+0x3e8>)
 800af80:	ee37 6a27 	vadd.f32	s12, s14, s15
 800af84:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800af88:	eec5 6a86 	vdiv.f32	s13, s11, s12
 800af8c:	1049      	asrs	r1, r1, #1
 800af8e:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800af92:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800af96:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 800af9a:	ee37 5ac7 	vsub.f32	s10, s15, s14
 800af9e:	ee06 1a10 	vmov	s12, r1
 800afa2:	ee65 4a26 	vmul.f32	s9, s10, s13
 800afa6:	ee36 7a47 	vsub.f32	s14, s12, s14
 800afaa:	ee14 6a90 	vmov	r6, s9
 800afae:	4016      	ands	r6, r2
 800afb0:	ee05 6a90 	vmov	s11, r6
 800afb4:	eea5 5ac6 	vfms.f32	s10, s11, s12
 800afb8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800afbc:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800b0e4 <__ieee754_powf+0x3ec>
 800afc0:	eea5 5ae7 	vfms.f32	s10, s11, s15
 800afc4:	ee64 7aa4 	vmul.f32	s15, s9, s9
 800afc8:	ee25 6a26 	vmul.f32	s12, s10, s13
 800afcc:	eddf 6a46 	vldr	s13, [pc, #280]	; 800b0e8 <__ieee754_powf+0x3f0>
 800afd0:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800afd4:	eddf 6a45 	vldr	s13, [pc, #276]	; 800b0ec <__ieee754_powf+0x3f4>
 800afd8:	eee7 6a27 	vfma.f32	s13, s14, s15
 800afdc:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800b0c0 <__ieee754_powf+0x3c8>
 800afe0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800afe4:	eddf 6a42 	vldr	s13, [pc, #264]	; 800b0f0 <__ieee754_powf+0x3f8>
 800afe8:	eee7 6a27 	vfma.f32	s13, s14, s15
 800afec:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800b0f4 <__ieee754_powf+0x3fc>
 800aff0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800aff4:	ee74 6aa5 	vadd.f32	s13, s9, s11
 800aff8:	ee27 5aa7 	vmul.f32	s10, s15, s15
 800affc:	ee66 6a86 	vmul.f32	s13, s13, s12
 800b000:	eee5 6a07 	vfma.f32	s13, s10, s14
 800b004:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 800b008:	eef0 7a45 	vmov.f32	s15, s10
 800b00c:	eee5 7aa5 	vfma.f32	s15, s11, s11
 800b010:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b014:	ee17 1a90 	vmov	r1, s15
 800b018:	4011      	ands	r1, r2
 800b01a:	ee07 1a90 	vmov	s15, r1
 800b01e:	ee37 7ac5 	vsub.f32	s14, s15, s10
 800b022:	eea5 7ae5 	vfms.f32	s14, s11, s11
 800b026:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800b02a:	ee27 7a24 	vmul.f32	s14, s14, s9
 800b02e:	eea6 7a27 	vfma.f32	s14, s12, s15
 800b032:	eeb0 6a47 	vmov.f32	s12, s14
 800b036:	eea5 6aa7 	vfma.f32	s12, s11, s15
 800b03a:	ee16 1a10 	vmov	r1, s12
 800b03e:	4011      	ands	r1, r2
 800b040:	ee06 1a90 	vmov	s13, r1
 800b044:	eee5 6ae7 	vfms.f32	s13, s11, s15
 800b048:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800b0f8 <__ieee754_powf+0x400>
 800b04c:	eddf 5a2b 	vldr	s11, [pc, #172]	; 800b0fc <__ieee754_powf+0x404>
 800b050:	ee37 7a66 	vsub.f32	s14, s14, s13
 800b054:	ee06 1a10 	vmov	s12, r1
 800b058:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b05c:	eddf 7a28 	vldr	s15, [pc, #160]	; 800b100 <__ieee754_powf+0x408>
 800b060:	4928      	ldr	r1, [pc, #160]	; (800b104 <__ieee754_powf+0x40c>)
 800b062:	eea6 7a27 	vfma.f32	s14, s12, s15
 800b066:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 800b06a:	edd1 7a00 	vldr	s15, [r1]
 800b06e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b072:	ee07 3a90 	vmov	s15, r3
 800b076:	4b24      	ldr	r3, [pc, #144]	; (800b108 <__ieee754_powf+0x410>)
 800b078:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800b07c:	eef0 7a47 	vmov.f32	s15, s14
 800b080:	eee6 7a25 	vfma.f32	s15, s12, s11
 800b084:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800b088:	edd5 0a00 	vldr	s1, [r5]
 800b08c:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800b090:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b094:	ee17 3a90 	vmov	r3, s15
 800b098:	4013      	ands	r3, r2
 800b09a:	ee07 3a90 	vmov	s15, r3
 800b09e:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800b0a2:	ee76 6ae0 	vsub.f32	s13, s13, s1
 800b0a6:	eee6 6a65 	vfms.f32	s13, s12, s11
 800b0aa:	ee77 7a66 	vsub.f32	s15, s14, s13
 800b0ae:	e70e      	b.n	800aece <__ieee754_powf+0x1d6>
 800b0b0:	2501      	movs	r5, #1
 800b0b2:	e75d      	b.n	800af70 <__ieee754_powf+0x278>
 800b0b4:	00000000 	.word	0x00000000
 800b0b8:	3f7ffff3 	.word	0x3f7ffff3
 800b0bc:	3f800007 	.word	0x3f800007
 800b0c0:	3eaaaaab 	.word	0x3eaaaaab
 800b0c4:	3fb8aa3b 	.word	0x3fb8aa3b
 800b0c8:	36eca570 	.word	0x36eca570
 800b0cc:	3fb8aa00 	.word	0x3fb8aa00
 800b0d0:	4b800000 	.word	0x4b800000
 800b0d4:	001cc471 	.word	0x001cc471
 800b0d8:	005db3d6 	.word	0x005db3d6
 800b0dc:	0800b8e4 	.word	0x0800b8e4
 800b0e0:	fffff000 	.word	0xfffff000
 800b0e4:	3e6c3255 	.word	0x3e6c3255
 800b0e8:	3e53f142 	.word	0x3e53f142
 800b0ec:	3e8ba305 	.word	0x3e8ba305
 800b0f0:	3edb6db7 	.word	0x3edb6db7
 800b0f4:	3f19999a 	.word	0x3f19999a
 800b0f8:	3f76384f 	.word	0x3f76384f
 800b0fc:	3f763800 	.word	0x3f763800
 800b100:	369dc3a0 	.word	0x369dc3a0
 800b104:	0800b8f4 	.word	0x0800b8f4
 800b108:	0800b8ec 	.word	0x0800b8ec
 800b10c:	3338aa3c 	.word	0x3338aa3c
 800b110:	f040 8095 	bne.w	800b23e <__ieee754_powf+0x546>
 800b114:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800b10c <__ieee754_powf+0x414>
 800b118:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b11c:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800b120:	eef4 6ac7 	vcmpe.f32	s13, s14
 800b124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b128:	f73f aefa 	bgt.w	800af20 <__ieee754_powf+0x228>
 800b12c:	15db      	asrs	r3, r3, #23
 800b12e:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 800b132:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b136:	4103      	asrs	r3, r0
 800b138:	4423      	add	r3, r4
 800b13a:	494b      	ldr	r1, [pc, #300]	; (800b268 <__ieee754_powf+0x570>)
 800b13c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800b140:	3a7f      	subs	r2, #127	; 0x7f
 800b142:	4111      	asrs	r1, r2
 800b144:	ea23 0101 	bic.w	r1, r3, r1
 800b148:	ee07 1a10 	vmov	s14, r1
 800b14c:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800b150:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800b154:	f1c2 0217 	rsb	r2, r2, #23
 800b158:	4110      	asrs	r0, r2
 800b15a:	2c00      	cmp	r4, #0
 800b15c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b160:	bfb8      	it	lt
 800b162:	4240      	neglt	r0, r0
 800b164:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800b168:	ed9f 0a40 	vldr	s0, [pc, #256]	; 800b26c <__ieee754_powf+0x574>
 800b16c:	eddf 6a40 	vldr	s13, [pc, #256]	; 800b270 <__ieee754_powf+0x578>
 800b170:	ee17 3a10 	vmov	r3, s14
 800b174:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800b178:	f023 030f 	bic.w	r3, r3, #15
 800b17c:	ee07 3a10 	vmov	s14, r3
 800b180:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b184:	ee27 0a00 	vmul.f32	s0, s14, s0
 800b188:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800b18c:	eddf 7a39 	vldr	s15, [pc, #228]	; 800b274 <__ieee754_powf+0x57c>
 800b190:	eea0 0aa7 	vfma.f32	s0, s1, s15
 800b194:	eef0 7a40 	vmov.f32	s15, s0
 800b198:	eee7 7a26 	vfma.f32	s15, s14, s13
 800b19c:	eeb0 6a67 	vmov.f32	s12, s15
 800b1a0:	eea7 6a66 	vfms.f32	s12, s14, s13
 800b1a4:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800b1a8:	ee30 0a46 	vsub.f32	s0, s0, s12
 800b1ac:	eddf 6a32 	vldr	s13, [pc, #200]	; 800b278 <__ieee754_powf+0x580>
 800b1b0:	ed9f 6a32 	vldr	s12, [pc, #200]	; 800b27c <__ieee754_powf+0x584>
 800b1b4:	eee7 6a06 	vfma.f32	s13, s14, s12
 800b1b8:	ed9f 6a31 	vldr	s12, [pc, #196]	; 800b280 <__ieee754_powf+0x588>
 800b1bc:	eea6 6a87 	vfma.f32	s12, s13, s14
 800b1c0:	eddf 6a30 	vldr	s13, [pc, #192]	; 800b284 <__ieee754_powf+0x58c>
 800b1c4:	eee6 6a07 	vfma.f32	s13, s12, s14
 800b1c8:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 800b288 <__ieee754_powf+0x590>
 800b1cc:	eea6 6a87 	vfma.f32	s12, s13, s14
 800b1d0:	eef0 6a67 	vmov.f32	s13, s15
 800b1d4:	eee6 6a47 	vfms.f32	s13, s12, s14
 800b1d8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800b1dc:	ee27 6aa6 	vmul.f32	s12, s15, s13
 800b1e0:	ee76 6ac7 	vsub.f32	s13, s13, s14
 800b1e4:	eea7 0a80 	vfma.f32	s0, s15, s0
 800b1e8:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800b1ec:	ee37 0a40 	vsub.f32	s0, s14, s0
 800b1f0:	ee70 7a67 	vsub.f32	s15, s0, s15
 800b1f4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800b1f8:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b1fc:	ee10 3a10 	vmov	r3, s0
 800b200:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800b204:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b208:	da1f      	bge.n	800b24a <__ieee754_powf+0x552>
 800b20a:	f000 f87d 	bl	800b308 <scalbnf>
 800b20e:	ee20 0a08 	vmul.f32	s0, s0, s16
 800b212:	e589      	b.n	800ad28 <__ieee754_powf+0x30>
 800b214:	4a1d      	ldr	r2, [pc, #116]	; (800b28c <__ieee754_powf+0x594>)
 800b216:	4293      	cmp	r3, r2
 800b218:	dd07      	ble.n	800b22a <__ieee754_powf+0x532>
 800b21a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800b21e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b222:	bf4c      	ite	mi
 800b224:	2001      	movmi	r0, #1
 800b226:	2000      	movpl	r0, #0
 800b228:	e61f      	b.n	800ae6a <__ieee754_powf+0x172>
 800b22a:	d108      	bne.n	800b23e <__ieee754_powf+0x546>
 800b22c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b230:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800b234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b238:	f6ff af78 	blt.w	800b12c <__ieee754_powf+0x434>
 800b23c:	e7ed      	b.n	800b21a <__ieee754_powf+0x522>
 800b23e:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800b242:	f73f af73 	bgt.w	800b12c <__ieee754_powf+0x434>
 800b246:	2000      	movs	r0, #0
 800b248:	e78c      	b.n	800b164 <__ieee754_powf+0x46c>
 800b24a:	ee00 3a10 	vmov	s0, r3
 800b24e:	e7de      	b.n	800b20e <__ieee754_powf+0x516>
 800b250:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800b254:	e568      	b.n	800ad28 <__ieee754_powf+0x30>
 800b256:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800b290 <__ieee754_powf+0x598>
 800b25a:	e565      	b.n	800ad28 <__ieee754_powf+0x30>
 800b25c:	eeb0 0a48 	vmov.f32	s0, s16
 800b260:	e562      	b.n	800ad28 <__ieee754_powf+0x30>
 800b262:	2700      	movs	r7, #0
 800b264:	e58d      	b.n	800ad82 <__ieee754_powf+0x8a>
 800b266:	bf00      	nop
 800b268:	007fffff 	.word	0x007fffff
 800b26c:	35bfbe8c 	.word	0x35bfbe8c
 800b270:	3f317200 	.word	0x3f317200
 800b274:	3f317218 	.word	0x3f317218
 800b278:	b5ddea0e 	.word	0xb5ddea0e
 800b27c:	3331bb4c 	.word	0x3331bb4c
 800b280:	388ab355 	.word	0x388ab355
 800b284:	bb360b61 	.word	0xbb360b61
 800b288:	3e2aaaab 	.word	0x3e2aaaab
 800b28c:	43160000 	.word	0x43160000
 800b290:	00000000 	.word	0x00000000

0800b294 <__ieee754_sqrtf>:
 800b294:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800b298:	4770      	bx	lr

0800b29a <with_errnof>:
 800b29a:	b513      	push	{r0, r1, r4, lr}
 800b29c:	4604      	mov	r4, r0
 800b29e:	ed8d 0a01 	vstr	s0, [sp, #4]
 800b2a2:	f7fb f82f 	bl	8006304 <__errno>
 800b2a6:	ed9d 0a01 	vldr	s0, [sp, #4]
 800b2aa:	6004      	str	r4, [r0, #0]
 800b2ac:	b002      	add	sp, #8
 800b2ae:	bd10      	pop	{r4, pc}

0800b2b0 <xflowf>:
 800b2b0:	b130      	cbz	r0, 800b2c0 <xflowf+0x10>
 800b2b2:	eef1 7a40 	vneg.f32	s15, s0
 800b2b6:	ee27 0a80 	vmul.f32	s0, s15, s0
 800b2ba:	2022      	movs	r0, #34	; 0x22
 800b2bc:	f7ff bfed 	b.w	800b29a <with_errnof>
 800b2c0:	eef0 7a40 	vmov.f32	s15, s0
 800b2c4:	e7f7      	b.n	800b2b6 <xflowf+0x6>
	...

0800b2c8 <__math_uflowf>:
 800b2c8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b2d0 <__math_uflowf+0x8>
 800b2cc:	f7ff bff0 	b.w	800b2b0 <xflowf>
 800b2d0:	10000000 	.word	0x10000000

0800b2d4 <__math_oflowf>:
 800b2d4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b2dc <__math_oflowf+0x8>
 800b2d8:	f7ff bfea 	b.w	800b2b0 <xflowf>
 800b2dc:	70000000 	.word	0x70000000

0800b2e0 <fabsf>:
 800b2e0:	ee10 3a10 	vmov	r3, s0
 800b2e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b2e8:	ee00 3a10 	vmov	s0, r3
 800b2ec:	4770      	bx	lr

0800b2ee <finitef>:
 800b2ee:	b082      	sub	sp, #8
 800b2f0:	ed8d 0a01 	vstr	s0, [sp, #4]
 800b2f4:	9801      	ldr	r0, [sp, #4]
 800b2f6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800b2fa:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800b2fe:	bfac      	ite	ge
 800b300:	2000      	movge	r0, #0
 800b302:	2001      	movlt	r0, #1
 800b304:	b002      	add	sp, #8
 800b306:	4770      	bx	lr

0800b308 <scalbnf>:
 800b308:	ee10 3a10 	vmov	r3, s0
 800b30c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800b310:	d025      	beq.n	800b35e <scalbnf+0x56>
 800b312:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800b316:	d302      	bcc.n	800b31e <scalbnf+0x16>
 800b318:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b31c:	4770      	bx	lr
 800b31e:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800b322:	d122      	bne.n	800b36a <scalbnf+0x62>
 800b324:	4b2a      	ldr	r3, [pc, #168]	; (800b3d0 <scalbnf+0xc8>)
 800b326:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800b3d4 <scalbnf+0xcc>
 800b32a:	4298      	cmp	r0, r3
 800b32c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800b330:	db16      	blt.n	800b360 <scalbnf+0x58>
 800b332:	ee10 3a10 	vmov	r3, s0
 800b336:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800b33a:	3a19      	subs	r2, #25
 800b33c:	4402      	add	r2, r0
 800b33e:	2afe      	cmp	r2, #254	; 0xfe
 800b340:	dd15      	ble.n	800b36e <scalbnf+0x66>
 800b342:	ee10 3a10 	vmov	r3, s0
 800b346:	eddf 7a24 	vldr	s15, [pc, #144]	; 800b3d8 <scalbnf+0xd0>
 800b34a:	eddf 6a24 	vldr	s13, [pc, #144]	; 800b3dc <scalbnf+0xd4>
 800b34e:	2b00      	cmp	r3, #0
 800b350:	eeb0 7a67 	vmov.f32	s14, s15
 800b354:	bfb8      	it	lt
 800b356:	eef0 7a66 	vmovlt.f32	s15, s13
 800b35a:	ee27 0a27 	vmul.f32	s0, s14, s15
 800b35e:	4770      	bx	lr
 800b360:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800b3e0 <scalbnf+0xd8>
 800b364:	ee20 0a27 	vmul.f32	s0, s0, s15
 800b368:	4770      	bx	lr
 800b36a:	0dd2      	lsrs	r2, r2, #23
 800b36c:	e7e6      	b.n	800b33c <scalbnf+0x34>
 800b36e:	2a00      	cmp	r2, #0
 800b370:	dd06      	ble.n	800b380 <scalbnf+0x78>
 800b372:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b376:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800b37a:	ee00 3a10 	vmov	s0, r3
 800b37e:	4770      	bx	lr
 800b380:	f112 0f16 	cmn.w	r2, #22
 800b384:	da1a      	bge.n	800b3bc <scalbnf+0xb4>
 800b386:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b38a:	4298      	cmp	r0, r3
 800b38c:	ee10 3a10 	vmov	r3, s0
 800b390:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b394:	dd0a      	ble.n	800b3ac <scalbnf+0xa4>
 800b396:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800b3d8 <scalbnf+0xd0>
 800b39a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800b3dc <scalbnf+0xd4>
 800b39e:	eef0 7a40 	vmov.f32	s15, s0
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	bf18      	it	ne
 800b3a6:	eeb0 0a47 	vmovne.f32	s0, s14
 800b3aa:	e7db      	b.n	800b364 <scalbnf+0x5c>
 800b3ac:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800b3e0 <scalbnf+0xd8>
 800b3b0:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800b3e4 <scalbnf+0xdc>
 800b3b4:	eef0 7a40 	vmov.f32	s15, s0
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	e7f3      	b.n	800b3a4 <scalbnf+0x9c>
 800b3bc:	3219      	adds	r2, #25
 800b3be:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b3c2:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800b3c6:	eddf 7a08 	vldr	s15, [pc, #32]	; 800b3e8 <scalbnf+0xe0>
 800b3ca:	ee07 3a10 	vmov	s14, r3
 800b3ce:	e7c4      	b.n	800b35a <scalbnf+0x52>
 800b3d0:	ffff3cb0 	.word	0xffff3cb0
 800b3d4:	4c000000 	.word	0x4c000000
 800b3d8:	7149f2ca 	.word	0x7149f2ca
 800b3dc:	f149f2ca 	.word	0xf149f2ca
 800b3e0:	0da24260 	.word	0x0da24260
 800b3e4:	8da24260 	.word	0x8da24260
 800b3e8:	33000000 	.word	0x33000000

0800b3ec <_init>:
 800b3ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3ee:	bf00      	nop
 800b3f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3f2:	bc08      	pop	{r3}
 800b3f4:	469e      	mov	lr, r3
 800b3f6:	4770      	bx	lr

0800b3f8 <_fini>:
 800b3f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3fa:	bf00      	nop
 800b3fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3fe:	bc08      	pop	{r3}
 800b400:	469e      	mov	lr, r3
 800b402:	4770      	bx	lr
