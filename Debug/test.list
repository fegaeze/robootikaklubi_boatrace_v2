
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae94  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f4  0800b028  0800b028  0001b028  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b51c  0800b51c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800b51c  0800b51c  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b51c  0800b51c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b51c  0800b51c  0001b51c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b520  0800b520  0001b520  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800b524  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
 10 .bss          000001ac  200001e0  200001e0  000201e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000038c  2000038c  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010442  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f19  00000000  00000000  00030652  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e50  00000000  00000000  00032570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d88  00000000  00000000  000333c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ce3d  00000000  00000000  00034148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011744  00000000  00000000  00050f85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000adcda  00000000  00000000  000626c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001103a3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000053ec  00000000  00000000  001103f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b00c 	.word	0x0800b00c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800b00c 	.word	0x0800b00c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff23 	bl	8000adc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc99 	bl	80005f8 <__aeabi_dmul>
 8000cc6:	f7ff ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fad2 	bl	8000288 <__aeabi_dsub>
 8000ce4:	f7ff ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <togglePowerBtn>:


/*
 * Toggle Robot Start Button
 */
int togglePowerBtn(int powerBtnState) {
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
	if (powerBtnState) {
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d027      	beq.n	8000d52 <togglePowerBtn+0x5e>
		block = 0;
 8000d02:	4b19      	ldr	r3, [pc, #100]	; (8000d68 <togglePowerBtn+0x74>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
		if (!byteStream && buttonState) {
 8000d08:	4b18      	ldr	r3, [pc, #96]	; (8000d6c <togglePowerBtn+0x78>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d10c      	bne.n	8000d2a <togglePowerBtn+0x36>
 8000d10:	4b17      	ldr	r3, [pc, #92]	; (8000d70 <togglePowerBtn+0x7c>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d008      	beq.n	8000d2a <togglePowerBtn+0x36>
		  byteStream = 1;
 8000d18:	4b14      	ldr	r3, [pc, #80]	; (8000d6c <togglePowerBtn+0x78>)
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	601a      	str	r2, [r3, #0]
		  buttonState = 0;
 8000d1e:	4b14      	ldr	r3, [pc, #80]	; (8000d70 <togglePowerBtn+0x7c>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
		  return buttonState;
 8000d24:	4b12      	ldr	r3, [pc, #72]	; (8000d70 <togglePowerBtn+0x7c>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	e018      	b.n	8000d5c <togglePowerBtn+0x68>
		} else if (!byteStream && !buttonState) {
 8000d2a:	4b10      	ldr	r3, [pc, #64]	; (8000d6c <togglePowerBtn+0x78>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d10c      	bne.n	8000d4c <togglePowerBtn+0x58>
 8000d32:	4b0f      	ldr	r3, [pc, #60]	; (8000d70 <togglePowerBtn+0x7c>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d108      	bne.n	8000d4c <togglePowerBtn+0x58>
		  byteStream = 1;
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <togglePowerBtn+0x78>)
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	601a      	str	r2, [r3, #0]
		  buttonState = 1;
 8000d40:	4b0b      	ldr	r3, [pc, #44]	; (8000d70 <togglePowerBtn+0x7c>)
 8000d42:	2201      	movs	r2, #1
 8000d44:	601a      	str	r2, [r3, #0]
		  return buttonState;
 8000d46:	4b0a      	ldr	r3, [pc, #40]	; (8000d70 <togglePowerBtn+0x7c>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	e007      	b.n	8000d5c <togglePowerBtn+0x68>
		} else {
		  return buttonState;
 8000d4c:	4b08      	ldr	r3, [pc, #32]	; (8000d70 <togglePowerBtn+0x7c>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	e004      	b.n	8000d5c <togglePowerBtn+0x68>
		}
	} else {
		byteStream = 0;
 8000d52:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <togglePowerBtn+0x78>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
		return buttonState;
 8000d58:	4b05      	ldr	r3, [pc, #20]	; (8000d70 <togglePowerBtn+0x7c>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
	}
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	370c      	adds	r7, #12
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr
 8000d68:	20000368 	.word	0x20000368
 8000d6c:	2000036c 	.word	0x2000036c
 8000d70:	20000370 	.word	0x20000370

08000d74 <ADC_Read>:
 * Read IR sensor value:
 * Update ADC channel config
 * Start, convert and read sensor value
 */
uint16_t ADC_Read(ADC_HandleTypeDef* hadc, uint8_t channel)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b088      	sub	sp, #32
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	460b      	mov	r3, r1
 8000d7e:	70fb      	strb	r3, [r7, #3]
  ADC_ChannelConfTypeDef sConfig;

  sConfig.Channel = channel;
 8000d80:	78fb      	ldrb	r3, [r7, #3]
 8000d82:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = 1;
 8000d84:	2301      	movs	r3, #1
 8000d86:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	613b      	str	r3, [r7, #16]

  HAL_ADC_ConfigChannel(hadc, &sConfig);
 8000d8c:	f107 0308 	add.w	r3, r7, #8
 8000d90:	4619      	mov	r1, r3
 8000d92:	6878      	ldr	r0, [r7, #4]
 8000d94:	f001 fa82 	bl	800229c <HAL_ADC_ConfigChannel>

  HAL_ADC_Start(hadc);
 8000d98:	6878      	ldr	r0, [r7, #4]
 8000d9a:	f001 f8ed 	bl	8001f78 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(hadc, 10);
 8000d9e:	210a      	movs	r1, #10
 8000da0:	6878      	ldr	r0, [r7, #4]
 8000da2:	f001 f99f 	bl	80020e4 <HAL_ADC_PollForConversion>

  return HAL_ADC_GetValue(hadc);
 8000da6:	6878      	ldr	r0, [r7, #4]
 8000da8:	f001 fa6a 	bl	8002280 <HAL_ADC_GetValue>
 8000dac:	4603      	mov	r3, r0
 8000dae:	b29b      	uxth	r3, r3
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	3720      	adds	r7, #32
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <setInitialState>:
/*
 * Set Initial State:
 * Set speed to highest settings
 */
void setInitialState(uint8_t powerBtnState)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	71fb      	strb	r3, [r7, #7]
	if (togglePowerBtn(powerBtnState) == 1) {
 8000dc2:	79fb      	ldrb	r3, [r7, #7]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff ff95 	bl	8000cf4 <togglePowerBtn>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b01      	cmp	r3, #1
 8000dce:	d103      	bne.n	8000dd8 <setInitialState+0x20>
	  setMotorSpeed(255, 255);
 8000dd0:	21ff      	movs	r1, #255	; 0xff
 8000dd2:	20ff      	movs	r0, #255	; 0xff
 8000dd4:	f000 f804 	bl	8000de0 <setMotorSpeed>
	}
}
 8000dd8:	bf00      	nop
 8000dda:	3708      	adds	r7, #8
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <setMotorSpeed>:
/*
 * Set Motor Speed:
 * motor_speed => 0 -> 255
 */
void setMotorSpeed(uint8_t ms_right, uint8_t ms_left)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	460a      	mov	r2, r1
 8000dea:	71fb      	strb	r3, [r7, #7]
 8000dec:	4613      	mov	r3, r2
 8000dee:	71bb      	strb	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, ms_right);
 8000df0:	4b06      	ldr	r3, [pc, #24]	; (8000e0c <setMotorSpeed+0x2c>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	79fa      	ldrb	r2, [r7, #7]
 8000df6:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, ms_left);
 8000df8:	4b04      	ldr	r3, [pc, #16]	; (8000e0c <setMotorSpeed+0x2c>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	79ba      	ldrb	r2, [r7, #6]
 8000dfe:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000e00:	bf00      	nop
 8000e02:	370c      	adds	r7, #12
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr
 8000e0c:	2000024c 	.word	0x2000024c

08000e10 <getDistance>:
 * Then based on the IR sensor datasheet graph, we determine
 * an equation to get accurate distance levels in centimeters.
 */

float getDistance(float adcVal)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b086      	sub	sp, #24
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	ed87 0a01 	vstr	s0, [r7, #4]
  float voltageVal = (3.3 * adcVal) / 4096;
 8000e1a:	6878      	ldr	r0, [r7, #4]
 8000e1c:	f7ff fb94 	bl	8000548 <__aeabi_f2d>
 8000e20:	a330      	add	r3, pc, #192	; (adr r3, 8000ee4 <getDistance+0xd4>)
 8000e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e26:	f7ff fbe7 	bl	80005f8 <__aeabi_dmul>
 8000e2a:	4602      	mov	r2, r0
 8000e2c:	460b      	mov	r3, r1
 8000e2e:	4610      	mov	r0, r2
 8000e30:	4619      	mov	r1, r3
 8000e32:	f04f 0200 	mov.w	r2, #0
 8000e36:	4b26      	ldr	r3, [pc, #152]	; (8000ed0 <getDistance+0xc0>)
 8000e38:	f7ff fd08 	bl	800084c <__aeabi_ddiv>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	460b      	mov	r3, r1
 8000e40:	4610      	mov	r0, r2
 8000e42:	4619      	mov	r1, r3
 8000e44:	f7ff fed0 	bl	8000be8 <__aeabi_d2f>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	617b      	str	r3, [r7, #20]

  float max_distance = DISTANCE_MAX;
 8000e4c:	4b21      	ldr	r3, [pc, #132]	; (8000ed4 <getDistance+0xc4>)
 8000e4e:	613b      	str	r3, [r7, #16]
  float min_distance = DISTANCE_MIN;
 8000e50:	4b21      	ldr	r3, [pc, #132]	; (8000ed8 <getDistance+0xc8>)
 8000e52:	60fb      	str	r3, [r7, #12]

  float distance = 23.4993 / powf(voltageVal, 1.7);
 8000e54:	eddf 0a21 	vldr	s1, [pc, #132]	; 8000edc <getDistance+0xcc>
 8000e58:	ed97 0a05 	vldr	s0, [r7, #20]
 8000e5c:	f009 fd04 	bl	800a868 <powf>
 8000e60:	ee10 3a10 	vmov	r3, s0
 8000e64:	4618      	mov	r0, r3
 8000e66:	f7ff fb6f 	bl	8000548 <__aeabi_f2d>
 8000e6a:	4602      	mov	r2, r0
 8000e6c:	460b      	mov	r3, r1
 8000e6e:	a116      	add	r1, pc, #88	; (adr r1, 8000ec8 <getDistance+0xb8>)
 8000e70:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000e74:	f7ff fcea 	bl	800084c <__aeabi_ddiv>
 8000e78:	4602      	mov	r2, r0
 8000e7a:	460b      	mov	r3, r1
 8000e7c:	4610      	mov	r0, r2
 8000e7e:	4619      	mov	r1, r3
 8000e80:	f7ff feb2 	bl	8000be8 <__aeabi_d2f>
 8000e84:	4603      	mov	r3, r0
 8000e86:	60bb      	str	r3, [r7, #8]

  distance -= DISTANCE_THRESHOLD;

  if(distance >= DISTANCE_MAX) {
 8000e88:	edd7 7a02 	vldr	s15, [r7, #8]
 8000e8c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8000ee0 <getDistance+0xd0>
 8000e90:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e98:	db01      	blt.n	8000e9e <getDistance+0x8e>
	  return max_distance;
 8000e9a:	693b      	ldr	r3, [r7, #16]
 8000e9c:	e00b      	b.n	8000eb6 <getDistance+0xa6>
  } else if(distance <= DISTANCE_MIN) {
 8000e9e:	edd7 7a02 	vldr	s15, [r7, #8]
 8000ea2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000ea6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000eaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000eae:	d801      	bhi.n	8000eb4 <getDistance+0xa4>
	  return min_distance;
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	e000      	b.n	8000eb6 <getDistance+0xa6>
  } else {
	  return distance;
 8000eb4:	68bb      	ldr	r3, [r7, #8]
  }
}
 8000eb6:	ee07 3a90 	vmov	s15, r3
 8000eba:	eeb0 0a67 	vmov.f32	s0, s15
 8000ebe:	3718      	adds	r7, #24
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	f3af 8000 	nop.w
 8000ec8:	1ff2e48f 	.word	0x1ff2e48f
 8000ecc:	40377fd2 	.word	0x40377fd2
 8000ed0:	40b00000 	.word	0x40b00000
 8000ed4:	43160000 	.word	0x43160000
 8000ed8:	41200000 	.word	0x41200000
 8000edc:	3fd9999a 	.word	0x3fd9999a
 8000ee0:	43160000 	.word	0x43160000
 8000ee4:	66666666 	.word	0x66666666
 8000ee8:	400a6666 	.word	0x400a6666

08000eec <calcMotorSpeed>:
 *
 * Formular:
 * https://stackoverflow.com/questions/5731863/mapping-a-numeric-range-onto-another
 * (output_end - output_start) / (input_end - input_start)
 */
float calcMotorSpeed(float dist_diff) {
 8000eec:	b480      	push	{r7}
 8000eee:	b085      	sub	sp, #20
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	ed87 0a01 	vstr	s0, [r7, #4]
	float speed = MIN_SPEED + ((dist_diff / (DISTANCE_MAX - DISTANCE_MIN)) * (MAX_SPEED - MIN_SPEED));
 8000ef6:	ed97 7a01 	vldr	s14, [r7, #4]
 8000efa:	eddf 6a17 	vldr	s13, [pc, #92]	; 8000f58 <calcMotorSpeed+0x6c>
 8000efe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f02:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8000f5c <calcMotorSpeed+0x70>
 8000f06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f0a:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8000f60 <calcMotorSpeed+0x74>
 8000f0e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000f12:	edc7 7a03 	vstr	s15, [r7, #12]

	if(speed <= MIN_SPEED) {
 8000f16:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f1a:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8000f60 <calcMotorSpeed+0x74>
 8000f1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f26:	d801      	bhi.n	8000f2c <calcMotorSpeed+0x40>
		return MIN_SPEED;
 8000f28:	4b0e      	ldr	r3, [pc, #56]	; (8000f64 <calcMotorSpeed+0x78>)
 8000f2a:	e00b      	b.n	8000f44 <calcMotorSpeed+0x58>
	} else if (speed >= MAX_SPEED) {
 8000f2c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f30:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8000f68 <calcMotorSpeed+0x7c>
 8000f34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f3c:	db01      	blt.n	8000f42 <calcMotorSpeed+0x56>
		return MAX_SPEED;
 8000f3e:	4b0b      	ldr	r3, [pc, #44]	; (8000f6c <calcMotorSpeed+0x80>)
 8000f40:	e000      	b.n	8000f44 <calcMotorSpeed+0x58>
	} else {
		return speed;
 8000f42:	68fb      	ldr	r3, [r7, #12]
	}
}
 8000f44:	ee07 3a90 	vmov	s15, r3
 8000f48:	eeb0 0a67 	vmov.f32	s0, s15
 8000f4c:	3714      	adds	r7, #20
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	430c0000 	.word	0x430c0000
 8000f5c:	43020000 	.word	0x43020000
 8000f60:	42fa0000 	.word	0x42fa0000
 8000f64:	42fa0000 	.word	0x42fa0000
 8000f68:	437f0000 	.word	0x437f0000
 8000f6c:	437f0000 	.word	0x437f0000

08000f70 <steerBoat>:
 * if turn amount is negative, the boat needs to turn right
 * Constraint: 0 <= turn_amount <= 140
 */

void steerBoat(float left_dist, float right_dist)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b086      	sub	sp, #24
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	ed87 0a03 	vstr	s0, [r7, #12]
 8000f7a:	edc7 0a02 	vstr	s1, [r7, #8]
	float dist_diff = left_dist - right_dist;
 8000f7e:	ed97 7a03 	vldr	s14, [r7, #12]
 8000f82:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f8a:	edc7 7a05 	vstr	s15, [r7, #20]
	float speed = calcMotorSpeed(fabs(dist_diff));
 8000f8e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f92:	eef0 7ae7 	vabs.f32	s15, s15
 8000f96:	eeb0 0a67 	vmov.f32	s0, s15
 8000f9a:	f7ff ffa7 	bl	8000eec <calcMotorSpeed>
 8000f9e:	ed87 0a04 	vstr	s0, [r7, #16]

	if(dist_diff < 0) {
 8000fa2:	edd7 7a05 	vldr	s15, [r7, #20]
 8000fa6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000faa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fae:	d50c      	bpl.n	8000fca <steerBoat+0x5a>
		setMotorSpeed(255, speed);
 8000fb0:	edd7 7a04 	vldr	s15, [r7, #16]
 8000fb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fb8:	edc7 7a01 	vstr	s15, [r7, #4]
 8000fbc:	793b      	ldrb	r3, [r7, #4]
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	20ff      	movs	r0, #255	; 0xff
 8000fc4:	f7ff ff0c 	bl	8000de0 <setMotorSpeed>
	} else if(dist_diff > 0) {
		setMotorSpeed(speed, 255);
	} else {
		setMotorSpeed(255, 255);
	}
}
 8000fc8:	e017      	b.n	8000ffa <steerBoat+0x8a>
	} else if(dist_diff > 0) {
 8000fca:	edd7 7a05 	vldr	s15, [r7, #20]
 8000fce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000fd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fd6:	dd0c      	ble.n	8000ff2 <steerBoat+0x82>
		setMotorSpeed(speed, 255);
 8000fd8:	edd7 7a04 	vldr	s15, [r7, #16]
 8000fdc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fe0:	edc7 7a01 	vstr	s15, [r7, #4]
 8000fe4:	793b      	ldrb	r3, [r7, #4]
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	21ff      	movs	r1, #255	; 0xff
 8000fea:	4618      	mov	r0, r3
 8000fec:	f7ff fef8 	bl	8000de0 <setMotorSpeed>
}
 8000ff0:	e003      	b.n	8000ffa <steerBoat+0x8a>
		setMotorSpeed(255, 255);
 8000ff2:	21ff      	movs	r1, #255	; 0xff
 8000ff4:	20ff      	movs	r0, #255	; 0xff
 8000ff6:	f7ff fef3 	bl	8000de0 <setMotorSpeed>
}
 8000ffa:	bf00      	nop
 8000ffc:	3718      	adds	r7, #24
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
	...

08001004 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b08a      	sub	sp, #40	; 0x28
 8001008:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800100a:	f000 fdbd 	bl	8001b88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800100e:	f000 f8df 	bl	80011d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001012:	f000 fb03 	bl	800161c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001016:	f000 fad1 	bl	80015bc <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800101a:	f000 f99d 	bl	8001358 <MX_TIM1_Init>
  MX_ADC1_Init();
 800101e:	f000 f92b 	bl	8001278 <MX_ADC1_Init>
  MX_TIM17_Init();
 8001022:	f000 fa51 	bl	80014c8 <MX_TIM17_Init>

  uint8_t powerBtnState;

  float left_dist, front_dist, right_dist;

  uint16_t ir_left = 0;
 8001026:	2300      	movs	r3, #0
 8001028:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t ir_front = 0;
 800102a:	2300      	movs	r3, #0
 800102c:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint16_t ir_right = 0;
 800102e:	2300      	movs	r3, #0
 8001030:	847b      	strh	r3, [r7, #34]	; 0x22

  float left_stored_dist = 0;
 8001032:	f04f 0300 	mov.w	r3, #0
 8001036:	61fb      	str	r3, [r7, #28]
  float right_stored_dist = 0;
 8001038:	f04f 0300 	mov.w	r3, #0
 800103c:	61bb      	str	r3, [r7, #24]

  HAL_TIM_Base_Start(&htim1);
 800103e:	4860      	ldr	r0, [pc, #384]	; (80011c0 <main+0x1bc>)
 8001040:	f003 fbf6 	bl	8004830 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim17);
 8001044:	485f      	ldr	r0, [pc, #380]	; (80011c4 <main+0x1c0>)
 8001046:	f003 fbf3 	bl	8004830 <HAL_TIM_Base_Start>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800104a:	2100      	movs	r1, #0
 800104c:	485c      	ldr	r0, [pc, #368]	; (80011c0 <main+0x1bc>)
 800104e:	f003 fca5 	bl	800499c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001052:	2104      	movs	r1, #4
 8001054:	485a      	ldr	r0, [pc, #360]	; (80011c0 <main+0x1bc>)
 8001056:	f003 fca1 	bl	800499c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 800105a:	2100      	movs	r1, #0
 800105c:	4859      	ldr	r0, [pc, #356]	; (80011c4 <main+0x1c0>)
 800105e:	f003 fc9d 	bl	800499c <HAL_TIM_PWM_Start>

  powerBtnState = HAL_GPIO_ReadPin(POWER_BTN_GPIO_Port, POWER_BTN_Pin);
 8001062:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001066:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800106a:	f001 ffbf 	bl	8002fec <HAL_GPIO_ReadPin>
 800106e:	4603      	mov	r3, r0
 8001070:	74fb      	strb	r3, [r7, #19]
  setInitialState(powerBtnState);
 8001072:	7cfb      	ldrb	r3, [r7, #19]
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff fe9f 	bl	8000db8 <setInitialState>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		powerBtnState = HAL_GPIO_ReadPin(POWER_BTN_GPIO_Port, POWER_BTN_Pin);
 800107a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800107e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001082:	f001 ffb3 	bl	8002fec <HAL_GPIO_ReadPin>
 8001086:	4603      	mov	r3, r0
 8001088:	74fb      	strb	r3, [r7, #19]

		if (togglePowerBtn(powerBtnState) == 1) {
 800108a:	7cfb      	ldrb	r3, [r7, #19]
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff fe31 	bl	8000cf4 <togglePowerBtn>
 8001092:	4603      	mov	r3, r0
 8001094:	2b01      	cmp	r3, #1
 8001096:	f040 808e 	bne.w	80011b6 <main+0x1b2>

			// Average out readings from sensor to get more accurate data
			for(int i = 0; i < 3; i++) {
 800109a:	2300      	movs	r3, #0
 800109c:	617b      	str	r3, [r7, #20]
 800109e:	e01d      	b.n	80010dc <main+0xd8>
				ir_left += ADC_Read(&hadc1, ADC_CHANNEL_1);
 80010a0:	2101      	movs	r1, #1
 80010a2:	4849      	ldr	r0, [pc, #292]	; (80011c8 <main+0x1c4>)
 80010a4:	f7ff fe66 	bl	8000d74 <ADC_Read>
 80010a8:	4603      	mov	r3, r0
 80010aa:	461a      	mov	r2, r3
 80010ac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80010ae:	4413      	add	r3, r2
 80010b0:	84fb      	strh	r3, [r7, #38]	; 0x26
				ir_front += ADC_Read(&hadc1, ADC_CHANNEL_2);
 80010b2:	2102      	movs	r1, #2
 80010b4:	4844      	ldr	r0, [pc, #272]	; (80011c8 <main+0x1c4>)
 80010b6:	f7ff fe5d 	bl	8000d74 <ADC_Read>
 80010ba:	4603      	mov	r3, r0
 80010bc:	461a      	mov	r2, r3
 80010be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80010c0:	4413      	add	r3, r2
 80010c2:	84bb      	strh	r3, [r7, #36]	; 0x24
				ir_right += ADC_Read(&hadc1, ADC_CHANNEL_4);
 80010c4:	2104      	movs	r1, #4
 80010c6:	4840      	ldr	r0, [pc, #256]	; (80011c8 <main+0x1c4>)
 80010c8:	f7ff fe54 	bl	8000d74 <ADC_Read>
 80010cc:	4603      	mov	r3, r0
 80010ce:	461a      	mov	r2, r3
 80010d0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80010d2:	4413      	add	r3, r2
 80010d4:	847b      	strh	r3, [r7, #34]	; 0x22
			for(int i = 0; i < 3; i++) {
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	3301      	adds	r3, #1
 80010da:	617b      	str	r3, [r7, #20]
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	2b02      	cmp	r3, #2
 80010e0:	ddde      	ble.n	80010a0 <main+0x9c>
			}

			// Get distance in cm for all three sensors
			left_dist = getDistance(ir_left / 3);
 80010e2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80010e4:	4a39      	ldr	r2, [pc, #228]	; (80011cc <main+0x1c8>)
 80010e6:	fba2 2303 	umull	r2, r3, r2, r3
 80010ea:	085b      	lsrs	r3, r3, #1
 80010ec:	b29b      	uxth	r3, r3
 80010ee:	ee07 3a90 	vmov	s15, r3
 80010f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010f6:	eeb0 0a67 	vmov.f32	s0, s15
 80010fa:	f7ff fe89 	bl	8000e10 <getDistance>
 80010fe:	ed87 0a03 	vstr	s0, [r7, #12]
			front_dist = getDistance(ir_front / 3);
 8001102:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001104:	4a31      	ldr	r2, [pc, #196]	; (80011cc <main+0x1c8>)
 8001106:	fba2 2303 	umull	r2, r3, r2, r3
 800110a:	085b      	lsrs	r3, r3, #1
 800110c:	b29b      	uxth	r3, r3
 800110e:	ee07 3a90 	vmov	s15, r3
 8001112:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001116:	eeb0 0a67 	vmov.f32	s0, s15
 800111a:	f7ff fe79 	bl	8000e10 <getDistance>
 800111e:	ed87 0a02 	vstr	s0, [r7, #8]
			right_dist = getDistance(ir_right / 3);
 8001122:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001124:	4a29      	ldr	r2, [pc, #164]	; (80011cc <main+0x1c8>)
 8001126:	fba2 2303 	umull	r2, r3, r2, r3
 800112a:	085b      	lsrs	r3, r3, #1
 800112c:	b29b      	uxth	r3, r3
 800112e:	ee07 3a90 	vmov	s15, r3
 8001132:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001136:	eeb0 0a67 	vmov.f32	s0, s15
 800113a:	f7ff fe69 	bl	8000e10 <getDistance>
 800113e:	ed87 0a01 	vstr	s0, [r7, #4]

			// Store distance values to know which turn position to favor
			if(left_stored_dist > 0 && right_stored_dist > 0) {
 8001142:	edd7 7a07 	vldr	s15, [r7, #28]
 8001146:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800114a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800114e:	dd27      	ble.n	80011a0 <main+0x19c>
 8001150:	edd7 7a06 	vldr	s15, [r7, #24]
 8001154:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001158:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800115c:	dd20      	ble.n	80011a0 <main+0x19c>
				left_stored_dist += left_dist;
 800115e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001162:	edd7 7a03 	vldr	s15, [r7, #12]
 8001166:	ee77 7a27 	vadd.f32	s15, s14, s15
 800116a:	edc7 7a07 	vstr	s15, [r7, #28]
				right_stored_dist += right_dist;
 800116e:	ed97 7a06 	vldr	s14, [r7, #24]
 8001172:	edd7 7a01 	vldr	s15, [r7, #4]
 8001176:	ee77 7a27 	vadd.f32	s15, s14, s15
 800117a:	edc7 7a06 	vstr	s15, [r7, #24]

				left_stored_dist /= 2;
 800117e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001182:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001186:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800118a:	edc7 7a07 	vstr	s15, [r7, #28]
				right_stored_dist /= 2;
 800118e:	ed97 7a06 	vldr	s14, [r7, #24]
 8001192:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001196:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800119a:	edc7 7a06 	vstr	s15, [r7, #24]
 800119e:	e003      	b.n	80011a8 <main+0x1a4>
			} else {
				left_stored_dist = left_dist;
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	61fb      	str	r3, [r7, #28]
				right_stored_dist = right_dist;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	61bb      	str	r3, [r7, #24]
			}

			// Base Steering
			steerBoat(left_dist, right_dist);
 80011a8:	edd7 0a01 	vldr	s1, [r7, #4]
 80011ac:	ed97 0a03 	vldr	s0, [r7, #12]
 80011b0:	f7ff fede 	bl	8000f70 <steerBoat>
 80011b4:	e761      	b.n	800107a <main+0x76>

		} else {
			setMotorSpeed(0, 0);
 80011b6:	2100      	movs	r1, #0
 80011b8:	2000      	movs	r0, #0
 80011ba:	f7ff fe11 	bl	8000de0 <setMotorSpeed>
		powerBtnState = HAL_GPIO_ReadPin(POWER_BTN_GPIO_Port, POWER_BTN_Pin);
 80011be:	e75c      	b.n	800107a <main+0x76>
 80011c0:	2000024c 	.word	0x2000024c
 80011c4:	20000298 	.word	0x20000298
 80011c8:	200001fc 	.word	0x200001fc
 80011cc:	aaaaaaab 	.word	0xaaaaaaab

080011d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b096      	sub	sp, #88	; 0x58
 80011d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011da:	2228      	movs	r2, #40	; 0x28
 80011dc:	2100      	movs	r1, #0
 80011de:	4618      	mov	r0, r3
 80011e0:	f004 fec8 	bl	8005f74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011e4:	f107 031c 	add.w	r3, r7, #28
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	605a      	str	r2, [r3, #4]
 80011ee:	609a      	str	r2, [r3, #8]
 80011f0:	60da      	str	r2, [r3, #12]
 80011f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011f4:	1d3b      	adds	r3, r7, #4
 80011f6:	2200      	movs	r2, #0
 80011f8:	601a      	str	r2, [r3, #0]
 80011fa:	605a      	str	r2, [r3, #4]
 80011fc:	609a      	str	r2, [r3, #8]
 80011fe:	60da      	str	r2, [r3, #12]
 8001200:	611a      	str	r2, [r3, #16]
 8001202:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001204:	2302      	movs	r3, #2
 8001206:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001208:	2301      	movs	r3, #1
 800120a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800120c:	2310      	movs	r3, #16
 800120e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001210:	2300      	movs	r3, #0
 8001212:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001214:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001218:	4618      	mov	r0, r3
 800121a:	f001 ff17 	bl	800304c <HAL_RCC_OscConfig>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001224:	f000 fa48 	bl	80016b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001228:	230f      	movs	r3, #15
 800122a:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800122c:	2300      	movs	r3, #0
 800122e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001230:	2300      	movs	r3, #0
 8001232:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001234:	2300      	movs	r3, #0
 8001236:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001238:	2300      	movs	r3, #0
 800123a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800123c:	f107 031c 	add.w	r3, r7, #28
 8001240:	2100      	movs	r1, #0
 8001242:	4618      	mov	r0, r3
 8001244:	f002 ff40 	bl	80040c8 <HAL_RCC_ClockConfig>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800124e:	f000 fa33 	bl	80016b8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8001252:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001256:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8001258:	2300      	movs	r3, #0
 800125a:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800125c:	1d3b      	adds	r3, r7, #4
 800125e:	4618      	mov	r0, r3
 8001260:	f003 f968 	bl	8004534 <HAL_RCCEx_PeriphCLKConfig>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800126a:	f000 fa25 	bl	80016b8 <Error_Handler>
  }
}
 800126e:	bf00      	nop
 8001270:	3758      	adds	r7, #88	; 0x58
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
	...

08001278 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b08a      	sub	sp, #40	; 0x28
 800127c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800127e:	f107 031c 	add.w	r3, r7, #28
 8001282:	2200      	movs	r2, #0
 8001284:	601a      	str	r2, [r3, #0]
 8001286:	605a      	str	r2, [r3, #4]
 8001288:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800128a:	1d3b      	adds	r3, r7, #4
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	605a      	str	r2, [r3, #4]
 8001292:	609a      	str	r2, [r3, #8]
 8001294:	60da      	str	r2, [r3, #12]
 8001296:	611a      	str	r2, [r3, #16]
 8001298:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800129a:	4b2e      	ldr	r3, [pc, #184]	; (8001354 <MX_ADC1_Init+0xdc>)
 800129c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80012a0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80012a2:	4b2c      	ldr	r3, [pc, #176]	; (8001354 <MX_ADC1_Init+0xdc>)
 80012a4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80012a8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012aa:	4b2a      	ldr	r3, [pc, #168]	; (8001354 <MX_ADC1_Init+0xdc>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80012b0:	4b28      	ldr	r3, [pc, #160]	; (8001354 <MX_ADC1_Init+0xdc>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80012b6:	4b27      	ldr	r3, [pc, #156]	; (8001354 <MX_ADC1_Init+0xdc>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012bc:	4b25      	ldr	r3, [pc, #148]	; (8001354 <MX_ADC1_Init+0xdc>)
 80012be:	2200      	movs	r2, #0
 80012c0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012c4:	4b23      	ldr	r3, [pc, #140]	; (8001354 <MX_ADC1_Init+0xdc>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012ca:	4b22      	ldr	r3, [pc, #136]	; (8001354 <MX_ADC1_Init+0xdc>)
 80012cc:	2201      	movs	r2, #1
 80012ce:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012d0:	4b20      	ldr	r3, [pc, #128]	; (8001354 <MX_ADC1_Init+0xdc>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80012d6:	4b1f      	ldr	r3, [pc, #124]	; (8001354 <MX_ADC1_Init+0xdc>)
 80012d8:	2201      	movs	r2, #1
 80012da:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80012dc:	4b1d      	ldr	r3, [pc, #116]	; (8001354 <MX_ADC1_Init+0xdc>)
 80012de:	2200      	movs	r2, #0
 80012e0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012e4:	4b1b      	ldr	r3, [pc, #108]	; (8001354 <MX_ADC1_Init+0xdc>)
 80012e6:	2204      	movs	r2, #4
 80012e8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80012ea:	4b1a      	ldr	r3, [pc, #104]	; (8001354 <MX_ADC1_Init+0xdc>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80012f0:	4b18      	ldr	r3, [pc, #96]	; (8001354 <MX_ADC1_Init+0xdc>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012f6:	4817      	ldr	r0, [pc, #92]	; (8001354 <MX_ADC1_Init+0xdc>)
 80012f8:	f000 fcac 	bl	8001c54 <HAL_ADC_Init>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001302:	f000 f9d9 	bl	80016b8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001306:	2300      	movs	r3, #0
 8001308:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800130a:	f107 031c 	add.w	r3, r7, #28
 800130e:	4619      	mov	r1, r3
 8001310:	4810      	ldr	r0, [pc, #64]	; (8001354 <MX_ADC1_Init+0xdc>)
 8001312:	f001 fa83 	bl	800281c <HAL_ADCEx_MultiModeConfigChannel>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 800131c:	f000 f9cc 	bl	80016b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001320:	2301      	movs	r3, #1
 8001322:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001324:	2301      	movs	r3, #1
 8001326:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001328:	2300      	movs	r3, #0
 800132a:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800132c:	2300      	movs	r3, #0
 800132e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001330:	2300      	movs	r3, #0
 8001332:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001334:	2300      	movs	r3, #0
 8001336:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001338:	1d3b      	adds	r3, r7, #4
 800133a:	4619      	mov	r1, r3
 800133c:	4805      	ldr	r0, [pc, #20]	; (8001354 <MX_ADC1_Init+0xdc>)
 800133e:	f000 ffad 	bl	800229c <HAL_ADC_ConfigChannel>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 8001348:	f000 f9b6 	bl	80016b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800134c:	bf00      	nop
 800134e:	3728      	adds	r7, #40	; 0x28
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	200001fc 	.word	0x200001fc

08001358 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b09a      	sub	sp, #104	; 0x68
 800135c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800135e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	605a      	str	r2, [r3, #4]
 8001368:	609a      	str	r2, [r3, #8]
 800136a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800136c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	605a      	str	r2, [r3, #4]
 8001376:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001378:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	605a      	str	r2, [r3, #4]
 8001382:	609a      	str	r2, [r3, #8]
 8001384:	60da      	str	r2, [r3, #12]
 8001386:	611a      	str	r2, [r3, #16]
 8001388:	615a      	str	r2, [r3, #20]
 800138a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800138c:	1d3b      	adds	r3, r7, #4
 800138e:	222c      	movs	r2, #44	; 0x2c
 8001390:	2100      	movs	r1, #0
 8001392:	4618      	mov	r0, r3
 8001394:	f004 fdee 	bl	8005f74 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001398:	4b49      	ldr	r3, [pc, #292]	; (80014c0 <MX_TIM1_Init+0x168>)
 800139a:	4a4a      	ldr	r2, [pc, #296]	; (80014c4 <MX_TIM1_Init+0x16c>)
 800139c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 625-1;
 800139e:	4b48      	ldr	r3, [pc, #288]	; (80014c0 <MX_TIM1_Init+0x168>)
 80013a0:	f44f 721c 	mov.w	r2, #624	; 0x270
 80013a4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013a6:	4b46      	ldr	r3, [pc, #280]	; (80014c0 <MX_TIM1_Init+0x168>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 256-1;
 80013ac:	4b44      	ldr	r3, [pc, #272]	; (80014c0 <MX_TIM1_Init+0x168>)
 80013ae:	22ff      	movs	r2, #255	; 0xff
 80013b0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013b2:	4b43      	ldr	r3, [pc, #268]	; (80014c0 <MX_TIM1_Init+0x168>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013b8:	4b41      	ldr	r3, [pc, #260]	; (80014c0 <MX_TIM1_Init+0x168>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80013be:	4b40      	ldr	r3, [pc, #256]	; (80014c0 <MX_TIM1_Init+0x168>)
 80013c0:	2280      	movs	r2, #128	; 0x80
 80013c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80013c4:	483e      	ldr	r0, [pc, #248]	; (80014c0 <MX_TIM1_Init+0x168>)
 80013c6:	f003 f9db 	bl	8004780 <HAL_TIM_Base_Init>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80013d0:	f000 f972 	bl	80016b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013d8:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80013da:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80013de:	4619      	mov	r1, r3
 80013e0:	4837      	ldr	r0, [pc, #220]	; (80014c0 <MX_TIM1_Init+0x168>)
 80013e2:	f003 fcdb 	bl	8004d9c <HAL_TIM_ConfigClockSource>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80013ec:	f000 f964 	bl	80016b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80013f0:	4833      	ldr	r0, [pc, #204]	; (80014c0 <MX_TIM1_Init+0x168>)
 80013f2:	f003 fa71 	bl	80048d8 <HAL_TIM_PWM_Init>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80013fc:	f000 f95c 	bl	80016b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001400:	2300      	movs	r3, #0
 8001402:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001404:	2300      	movs	r3, #0
 8001406:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001408:	2300      	movs	r3, #0
 800140a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800140c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001410:	4619      	mov	r1, r3
 8001412:	482b      	ldr	r0, [pc, #172]	; (80014c0 <MX_TIM1_Init+0x168>)
 8001414:	f004 f96a 	bl	80056ec <HAL_TIMEx_MasterConfigSynchronization>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800141e:	f000 f94b 	bl	80016b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001422:	2360      	movs	r3, #96	; 0x60
 8001424:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001426:	2300      	movs	r3, #0
 8001428:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800142a:	2300      	movs	r3, #0
 800142c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800142e:	2300      	movs	r3, #0
 8001430:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001432:	2300      	movs	r3, #0
 8001434:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001436:	2300      	movs	r3, #0
 8001438:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800143a:	2300      	movs	r3, #0
 800143c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800143e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001442:	2200      	movs	r2, #0
 8001444:	4619      	mov	r1, r3
 8001446:	481e      	ldr	r0, [pc, #120]	; (80014c0 <MX_TIM1_Init+0x168>)
 8001448:	f003 fb94 	bl	8004b74 <HAL_TIM_PWM_ConfigChannel>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001452:	f000 f931 	bl	80016b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001456:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800145a:	2204      	movs	r2, #4
 800145c:	4619      	mov	r1, r3
 800145e:	4818      	ldr	r0, [pc, #96]	; (80014c0 <MX_TIM1_Init+0x168>)
 8001460:	f003 fb88 	bl	8004b74 <HAL_TIM_PWM_ConfigChannel>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800146a:	f000 f925 	bl	80016b8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800146e:	2300      	movs	r3, #0
 8001470:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001472:	2300      	movs	r3, #0
 8001474:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001476:	2300      	movs	r3, #0
 8001478:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800147a:	2300      	movs	r3, #0
 800147c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800147e:	2300      	movs	r3, #0
 8001480:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001482:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001486:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001488:	2300      	movs	r3, #0
 800148a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800148c:	2300      	movs	r3, #0
 800148e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001490:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001494:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001496:	2300      	movs	r3, #0
 8001498:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800149a:	2300      	movs	r3, #0
 800149c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800149e:	1d3b      	adds	r3, r7, #4
 80014a0:	4619      	mov	r1, r3
 80014a2:	4807      	ldr	r0, [pc, #28]	; (80014c0 <MX_TIM1_Init+0x168>)
 80014a4:	f004 f990 	bl	80057c8 <HAL_TIMEx_ConfigBreakDeadTime>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 80014ae:	f000 f903 	bl	80016b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80014b2:	4803      	ldr	r0, [pc, #12]	; (80014c0 <MX_TIM1_Init+0x168>)
 80014b4:	f000 f99a 	bl	80017ec <HAL_TIM_MspPostInit>

}
 80014b8:	bf00      	nop
 80014ba:	3768      	adds	r7, #104	; 0x68
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	2000024c 	.word	0x2000024c
 80014c4:	40012c00 	.word	0x40012c00

080014c8 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b092      	sub	sp, #72	; 0x48
 80014cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80014ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014d2:	2200      	movs	r2, #0
 80014d4:	601a      	str	r2, [r3, #0]
 80014d6:	605a      	str	r2, [r3, #4]
 80014d8:	609a      	str	r2, [r3, #8]
 80014da:	60da      	str	r2, [r3, #12]
 80014dc:	611a      	str	r2, [r3, #16]
 80014de:	615a      	str	r2, [r3, #20]
 80014e0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014e2:	463b      	mov	r3, r7
 80014e4:	222c      	movs	r2, #44	; 0x2c
 80014e6:	2100      	movs	r1, #0
 80014e8:	4618      	mov	r0, r3
 80014ea:	f004 fd43 	bl	8005f74 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80014ee:	4b31      	ldr	r3, [pc, #196]	; (80015b4 <MX_TIM17_Init+0xec>)
 80014f0:	4a31      	ldr	r2, [pc, #196]	; (80015b8 <MX_TIM17_Init+0xf0>)
 80014f2:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 8-1;
 80014f4:	4b2f      	ldr	r3, [pc, #188]	; (80015b4 <MX_TIM17_Init+0xec>)
 80014f6:	2207      	movs	r2, #7
 80014f8:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014fa:	4b2e      	ldr	r3, [pc, #184]	; (80015b4 <MX_TIM17_Init+0xec>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 20000-1;
 8001500:	4b2c      	ldr	r3, [pc, #176]	; (80015b4 <MX_TIM17_Init+0xec>)
 8001502:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001506:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001508:	4b2a      	ldr	r3, [pc, #168]	; (80015b4 <MX_TIM17_Init+0xec>)
 800150a:	2200      	movs	r2, #0
 800150c:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800150e:	4b29      	ldr	r3, [pc, #164]	; (80015b4 <MX_TIM17_Init+0xec>)
 8001510:	2200      	movs	r2, #0
 8001512:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001514:	4b27      	ldr	r3, [pc, #156]	; (80015b4 <MX_TIM17_Init+0xec>)
 8001516:	2280      	movs	r2, #128	; 0x80
 8001518:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800151a:	4826      	ldr	r0, [pc, #152]	; (80015b4 <MX_TIM17_Init+0xec>)
 800151c:	f003 f930 	bl	8004780 <HAL_TIM_Base_Init>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8001526:	f000 f8c7 	bl	80016b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 800152a:	4822      	ldr	r0, [pc, #136]	; (80015b4 <MX_TIM17_Init+0xec>)
 800152c:	f003 f9d4 	bl	80048d8 <HAL_TIM_PWM_Init>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8001536:	f000 f8bf 	bl	80016b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800153a:	2360      	movs	r3, #96	; 0x60
 800153c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 800153e:	2300      	movs	r3, #0
 8001540:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001542:	2300      	movs	r3, #0
 8001544:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001546:	2300      	movs	r3, #0
 8001548:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800154a:	2300      	movs	r3, #0
 800154c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800154e:	2300      	movs	r3, #0
 8001550:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001552:	2300      	movs	r3, #0
 8001554:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001556:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800155a:	2200      	movs	r2, #0
 800155c:	4619      	mov	r1, r3
 800155e:	4815      	ldr	r0, [pc, #84]	; (80015b4 <MX_TIM17_Init+0xec>)
 8001560:	f003 fb08 	bl	8004b74 <HAL_TIM_PWM_ConfigChannel>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 800156a:	f000 f8a5 	bl	80016b8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800156e:	2300      	movs	r3, #0
 8001570:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001572:	2300      	movs	r3, #0
 8001574:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001576:	2300      	movs	r3, #0
 8001578:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800157a:	2300      	movs	r3, #0
 800157c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800157e:	2300      	movs	r3, #0
 8001580:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001582:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001586:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001588:	2300      	movs	r3, #0
 800158a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800158c:	2300      	movs	r3, #0
 800158e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8001590:	463b      	mov	r3, r7
 8001592:	4619      	mov	r1, r3
 8001594:	4807      	ldr	r0, [pc, #28]	; (80015b4 <MX_TIM17_Init+0xec>)
 8001596:	f004 f917 	bl	80057c8 <HAL_TIMEx_ConfigBreakDeadTime>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 80015a0:	f000 f88a 	bl	80016b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 80015a4:	4803      	ldr	r0, [pc, #12]	; (80015b4 <MX_TIM17_Init+0xec>)
 80015a6:	f000 f921 	bl	80017ec <HAL_TIM_MspPostInit>

}
 80015aa:	bf00      	nop
 80015ac:	3748      	adds	r7, #72	; 0x48
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	20000298 	.word	0x20000298
 80015b8:	40014800 	.word	0x40014800

080015bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015c0:	4b14      	ldr	r3, [pc, #80]	; (8001614 <MX_USART2_UART_Init+0x58>)
 80015c2:	4a15      	ldr	r2, [pc, #84]	; (8001618 <MX_USART2_UART_Init+0x5c>)
 80015c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80015c6:	4b13      	ldr	r3, [pc, #76]	; (8001614 <MX_USART2_UART_Init+0x58>)
 80015c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015ce:	4b11      	ldr	r3, [pc, #68]	; (8001614 <MX_USART2_UART_Init+0x58>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015d4:	4b0f      	ldr	r3, [pc, #60]	; (8001614 <MX_USART2_UART_Init+0x58>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015da:	4b0e      	ldr	r3, [pc, #56]	; (8001614 <MX_USART2_UART_Init+0x58>)
 80015dc:	2200      	movs	r2, #0
 80015de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015e0:	4b0c      	ldr	r3, [pc, #48]	; (8001614 <MX_USART2_UART_Init+0x58>)
 80015e2:	220c      	movs	r2, #12
 80015e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015e6:	4b0b      	ldr	r3, [pc, #44]	; (8001614 <MX_USART2_UART_Init+0x58>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015ec:	4b09      	ldr	r3, [pc, #36]	; (8001614 <MX_USART2_UART_Init+0x58>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015f2:	4b08      	ldr	r3, [pc, #32]	; (8001614 <MX_USART2_UART_Init+0x58>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015f8:	4b06      	ldr	r3, [pc, #24]	; (8001614 <MX_USART2_UART_Init+0x58>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015fe:	4805      	ldr	r0, [pc, #20]	; (8001614 <MX_USART2_UART_Init+0x58>)
 8001600:	f004 f95a 	bl	80058b8 <HAL_UART_Init>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800160a:	f000 f855 	bl	80016b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800160e:	bf00      	nop
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	200002e4 	.word	0x200002e4
 8001618:	40004400 	.word	0x40004400

0800161c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b088      	sub	sp, #32
 8001620:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001622:	f107 030c 	add.w	r3, r7, #12
 8001626:	2200      	movs	r2, #0
 8001628:	601a      	str	r2, [r3, #0]
 800162a:	605a      	str	r2, [r3, #4]
 800162c:	609a      	str	r2, [r3, #8]
 800162e:	60da      	str	r2, [r3, #12]
 8001630:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001632:	4b20      	ldr	r3, [pc, #128]	; (80016b4 <MX_GPIO_Init+0x98>)
 8001634:	695b      	ldr	r3, [r3, #20]
 8001636:	4a1f      	ldr	r2, [pc, #124]	; (80016b4 <MX_GPIO_Init+0x98>)
 8001638:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800163c:	6153      	str	r3, [r2, #20]
 800163e:	4b1d      	ldr	r3, [pc, #116]	; (80016b4 <MX_GPIO_Init+0x98>)
 8001640:	695b      	ldr	r3, [r3, #20]
 8001642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001646:	60bb      	str	r3, [r7, #8]
 8001648:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800164a:	4b1a      	ldr	r3, [pc, #104]	; (80016b4 <MX_GPIO_Init+0x98>)
 800164c:	695b      	ldr	r3, [r3, #20]
 800164e:	4a19      	ldr	r2, [pc, #100]	; (80016b4 <MX_GPIO_Init+0x98>)
 8001650:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001654:	6153      	str	r3, [r2, #20]
 8001656:	4b17      	ldr	r3, [pc, #92]	; (80016b4 <MX_GPIO_Init+0x98>)
 8001658:	695b      	ldr	r3, [r3, #20]
 800165a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800165e:	607b      	str	r3, [r7, #4]
 8001660:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RIGHT_DM_PHASE_Pin|LEFT_DM_PHASE_Pin, GPIO_PIN_RESET);
 8001662:	2200      	movs	r2, #0
 8001664:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8001668:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800166c:	f001 fcd6 	bl	800301c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RIGHT_DM_PHASE_Pin LEFT_DM_PHASE_Pin */
  GPIO_InitStruct.Pin = RIGHT_DM_PHASE_Pin|LEFT_DM_PHASE_Pin;
 8001670:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001674:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001676:	2301      	movs	r3, #1
 8001678:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167a:	2300      	movs	r3, #0
 800167c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800167e:	2300      	movs	r3, #0
 8001680:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001682:	f107 030c 	add.w	r3, r7, #12
 8001686:	4619      	mov	r1, r3
 8001688:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800168c:	f001 fb3c 	bl	8002d08 <HAL_GPIO_Init>

  /*Configure GPIO pin : POWER_BTN_Pin */
  GPIO_InitStruct.Pin = POWER_BTN_Pin;
 8001690:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001694:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001696:	2300      	movs	r3, #0
 8001698:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800169a:	2302      	movs	r3, #2
 800169c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(POWER_BTN_GPIO_Port, &GPIO_InitStruct);
 800169e:	f107 030c 	add.w	r3, r7, #12
 80016a2:	4619      	mov	r1, r3
 80016a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016a8:	f001 fb2e 	bl	8002d08 <HAL_GPIO_Init>

}
 80016ac:	bf00      	nop
 80016ae:	3720      	adds	r7, #32
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	40021000 	.word	0x40021000

080016b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016bc:	b672      	cpsid	i
}
 80016be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016c0:	e7fe      	b.n	80016c0 <Error_Handler+0x8>
	...

080016c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ca:	4b0f      	ldr	r3, [pc, #60]	; (8001708 <HAL_MspInit+0x44>)
 80016cc:	699b      	ldr	r3, [r3, #24]
 80016ce:	4a0e      	ldr	r2, [pc, #56]	; (8001708 <HAL_MspInit+0x44>)
 80016d0:	f043 0301 	orr.w	r3, r3, #1
 80016d4:	6193      	str	r3, [r2, #24]
 80016d6:	4b0c      	ldr	r3, [pc, #48]	; (8001708 <HAL_MspInit+0x44>)
 80016d8:	699b      	ldr	r3, [r3, #24]
 80016da:	f003 0301 	and.w	r3, r3, #1
 80016de:	607b      	str	r3, [r7, #4]
 80016e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016e2:	4b09      	ldr	r3, [pc, #36]	; (8001708 <HAL_MspInit+0x44>)
 80016e4:	69db      	ldr	r3, [r3, #28]
 80016e6:	4a08      	ldr	r2, [pc, #32]	; (8001708 <HAL_MspInit+0x44>)
 80016e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016ec:	61d3      	str	r3, [r2, #28]
 80016ee:	4b06      	ldr	r3, [pc, #24]	; (8001708 <HAL_MspInit+0x44>)
 80016f0:	69db      	ldr	r3, [r3, #28]
 80016f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016f6:	603b      	str	r3, [r7, #0]
 80016f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016fa:	bf00      	nop
 80016fc:	370c      	adds	r7, #12
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	40021000 	.word	0x40021000

0800170c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b08a      	sub	sp, #40	; 0x28
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001714:	f107 0314 	add.w	r3, r7, #20
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]
 800171c:	605a      	str	r2, [r3, #4]
 800171e:	609a      	str	r2, [r3, #8]
 8001720:	60da      	str	r2, [r3, #12]
 8001722:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800172c:	d124      	bne.n	8001778 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800172e:	4b14      	ldr	r3, [pc, #80]	; (8001780 <HAL_ADC_MspInit+0x74>)
 8001730:	695b      	ldr	r3, [r3, #20]
 8001732:	4a13      	ldr	r2, [pc, #76]	; (8001780 <HAL_ADC_MspInit+0x74>)
 8001734:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001738:	6153      	str	r3, [r2, #20]
 800173a:	4b11      	ldr	r3, [pc, #68]	; (8001780 <HAL_ADC_MspInit+0x74>)
 800173c:	695b      	ldr	r3, [r3, #20]
 800173e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001742:	613b      	str	r3, [r7, #16]
 8001744:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001746:	4b0e      	ldr	r3, [pc, #56]	; (8001780 <HAL_ADC_MspInit+0x74>)
 8001748:	695b      	ldr	r3, [r3, #20]
 800174a:	4a0d      	ldr	r2, [pc, #52]	; (8001780 <HAL_ADC_MspInit+0x74>)
 800174c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001750:	6153      	str	r3, [r2, #20]
 8001752:	4b0b      	ldr	r3, [pc, #44]	; (8001780 <HAL_ADC_MspInit+0x74>)
 8001754:	695b      	ldr	r3, [r3, #20]
 8001756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800175a:	60fb      	str	r3, [r7, #12]
 800175c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = IR_LEFT_Pin|IR_CENTER_Pin|IR_RIGHT_Pin;
 800175e:	230b      	movs	r3, #11
 8001760:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001762:	2303      	movs	r3, #3
 8001764:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001766:	2300      	movs	r3, #0
 8001768:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800176a:	f107 0314 	add.w	r3, r7, #20
 800176e:	4619      	mov	r1, r3
 8001770:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001774:	f001 fac8 	bl	8002d08 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001778:	bf00      	nop
 800177a:	3728      	adds	r7, #40	; 0x28
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	40021000 	.word	0x40021000

08001784 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001784:	b480      	push	{r7}
 8001786:	b085      	sub	sp, #20
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a13      	ldr	r2, [pc, #76]	; (80017e0 <HAL_TIM_Base_MspInit+0x5c>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d10c      	bne.n	80017b0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001796:	4b13      	ldr	r3, [pc, #76]	; (80017e4 <HAL_TIM_Base_MspInit+0x60>)
 8001798:	699b      	ldr	r3, [r3, #24]
 800179a:	4a12      	ldr	r2, [pc, #72]	; (80017e4 <HAL_TIM_Base_MspInit+0x60>)
 800179c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80017a0:	6193      	str	r3, [r2, #24]
 80017a2:	4b10      	ldr	r3, [pc, #64]	; (80017e4 <HAL_TIM_Base_MspInit+0x60>)
 80017a4:	699b      	ldr	r3, [r3, #24]
 80017a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017aa:	60fb      	str	r3, [r7, #12]
 80017ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80017ae:	e010      	b.n	80017d2 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM17)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a0c      	ldr	r2, [pc, #48]	; (80017e8 <HAL_TIM_Base_MspInit+0x64>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d10b      	bne.n	80017d2 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80017ba:	4b0a      	ldr	r3, [pc, #40]	; (80017e4 <HAL_TIM_Base_MspInit+0x60>)
 80017bc:	699b      	ldr	r3, [r3, #24]
 80017be:	4a09      	ldr	r2, [pc, #36]	; (80017e4 <HAL_TIM_Base_MspInit+0x60>)
 80017c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017c4:	6193      	str	r3, [r2, #24]
 80017c6:	4b07      	ldr	r3, [pc, #28]	; (80017e4 <HAL_TIM_Base_MspInit+0x60>)
 80017c8:	699b      	ldr	r3, [r3, #24]
 80017ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017ce:	60bb      	str	r3, [r7, #8]
 80017d0:	68bb      	ldr	r3, [r7, #8]
}
 80017d2:	bf00      	nop
 80017d4:	3714      	adds	r7, #20
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	40012c00 	.word	0x40012c00
 80017e4:	40021000 	.word	0x40021000
 80017e8:	40014800 	.word	0x40014800

080017ec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b08a      	sub	sp, #40	; 0x28
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f4:	f107 0314 	add.w	r3, r7, #20
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]
 80017fc:	605a      	str	r2, [r3, #4]
 80017fe:	609a      	str	r2, [r3, #8]
 8001800:	60da      	str	r2, [r3, #12]
 8001802:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a23      	ldr	r2, [pc, #140]	; (8001898 <HAL_TIM_MspPostInit+0xac>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d11e      	bne.n	800184c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800180e:	4b23      	ldr	r3, [pc, #140]	; (800189c <HAL_TIM_MspPostInit+0xb0>)
 8001810:	695b      	ldr	r3, [r3, #20]
 8001812:	4a22      	ldr	r2, [pc, #136]	; (800189c <HAL_TIM_MspPostInit+0xb0>)
 8001814:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001818:	6153      	str	r3, [r2, #20]
 800181a:	4b20      	ldr	r3, [pc, #128]	; (800189c <HAL_TIM_MspPostInit+0xb0>)
 800181c:	695b      	ldr	r3, [r3, #20]
 800181e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001822:	613b      	str	r3, [r7, #16]
 8001824:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = RIGHT_DM_ENBL_Pin|LEFT_DM_ENBL_Pin;
 8001826:	f44f 7340 	mov.w	r3, #768	; 0x300
 800182a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800182c:	2302      	movs	r3, #2
 800182e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001830:	2300      	movs	r3, #0
 8001832:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001834:	2300      	movs	r3, #0
 8001836:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001838:	2306      	movs	r3, #6
 800183a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800183c:	f107 0314 	add.w	r3, r7, #20
 8001840:	4619      	mov	r1, r3
 8001842:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001846:	f001 fa5f 	bl	8002d08 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 800184a:	e020      	b.n	800188e <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM17)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a13      	ldr	r2, [pc, #76]	; (80018a0 <HAL_TIM_MspPostInit+0xb4>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d11b      	bne.n	800188e <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001856:	4b11      	ldr	r3, [pc, #68]	; (800189c <HAL_TIM_MspPostInit+0xb0>)
 8001858:	695b      	ldr	r3, [r3, #20]
 800185a:	4a10      	ldr	r2, [pc, #64]	; (800189c <HAL_TIM_MspPostInit+0xb0>)
 800185c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001860:	6153      	str	r3, [r2, #20]
 8001862:	4b0e      	ldr	r3, [pc, #56]	; (800189c <HAL_TIM_MspPostInit+0xb0>)
 8001864:	695b      	ldr	r3, [r3, #20]
 8001866:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800186a:	60fb      	str	r3, [r7, #12]
 800186c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SERVO_MOTOR_Pin;
 800186e:	2320      	movs	r3, #32
 8001870:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001872:	2302      	movs	r3, #2
 8001874:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001876:	2300      	movs	r3, #0
 8001878:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187a:	2300      	movs	r3, #0
 800187c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM17;
 800187e:	230a      	movs	r3, #10
 8001880:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SERVO_MOTOR_GPIO_Port, &GPIO_InitStruct);
 8001882:	f107 0314 	add.w	r3, r7, #20
 8001886:	4619      	mov	r1, r3
 8001888:	4806      	ldr	r0, [pc, #24]	; (80018a4 <HAL_TIM_MspPostInit+0xb8>)
 800188a:	f001 fa3d 	bl	8002d08 <HAL_GPIO_Init>
}
 800188e:	bf00      	nop
 8001890:	3728      	adds	r7, #40	; 0x28
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	40012c00 	.word	0x40012c00
 800189c:	40021000 	.word	0x40021000
 80018a0:	40014800 	.word	0x40014800
 80018a4:	48000400 	.word	0x48000400

080018a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b08a      	sub	sp, #40	; 0x28
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b0:	f107 0314 	add.w	r3, r7, #20
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]
 80018b8:	605a      	str	r2, [r3, #4]
 80018ba:	609a      	str	r2, [r3, #8]
 80018bc:	60da      	str	r2, [r3, #12]
 80018be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a18      	ldr	r2, [pc, #96]	; (8001928 <HAL_UART_MspInit+0x80>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d129      	bne.n	800191e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80018ca:	4b18      	ldr	r3, [pc, #96]	; (800192c <HAL_UART_MspInit+0x84>)
 80018cc:	69db      	ldr	r3, [r3, #28]
 80018ce:	4a17      	ldr	r2, [pc, #92]	; (800192c <HAL_UART_MspInit+0x84>)
 80018d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018d4:	61d3      	str	r3, [r2, #28]
 80018d6:	4b15      	ldr	r3, [pc, #84]	; (800192c <HAL_UART_MspInit+0x84>)
 80018d8:	69db      	ldr	r3, [r3, #28]
 80018da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018de:	613b      	str	r3, [r7, #16]
 80018e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018e2:	4b12      	ldr	r3, [pc, #72]	; (800192c <HAL_UART_MspInit+0x84>)
 80018e4:	695b      	ldr	r3, [r3, #20]
 80018e6:	4a11      	ldr	r2, [pc, #68]	; (800192c <HAL_UART_MspInit+0x84>)
 80018e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018ec:	6153      	str	r3, [r2, #20]
 80018ee:	4b0f      	ldr	r3, [pc, #60]	; (800192c <HAL_UART_MspInit+0x84>)
 80018f0:	695b      	ldr	r3, [r3, #20]
 80018f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f6:	60fb      	str	r3, [r7, #12]
 80018f8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80018fa:	f248 0304 	movw	r3, #32772	; 0x8004
 80018fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001900:	2302      	movs	r3, #2
 8001902:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001904:	2300      	movs	r3, #0
 8001906:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001908:	2303      	movs	r3, #3
 800190a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800190c:	2307      	movs	r3, #7
 800190e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001910:	f107 0314 	add.w	r3, r7, #20
 8001914:	4619      	mov	r1, r3
 8001916:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800191a:	f001 f9f5 	bl	8002d08 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800191e:	bf00      	nop
 8001920:	3728      	adds	r7, #40	; 0x28
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	40004400 	.word	0x40004400
 800192c:	40021000 	.word	0x40021000

08001930 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001934:	e7fe      	b.n	8001934 <NMI_Handler+0x4>

08001936 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001936:	b480      	push	{r7}
 8001938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800193a:	e7fe      	b.n	800193a <HardFault_Handler+0x4>

0800193c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001940:	e7fe      	b.n	8001940 <MemManage_Handler+0x4>

08001942 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001942:	b480      	push	{r7}
 8001944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001946:	e7fe      	b.n	8001946 <BusFault_Handler+0x4>

08001948 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800194c:	e7fe      	b.n	800194c <UsageFault_Handler+0x4>

0800194e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800194e:	b480      	push	{r7}
 8001950:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001952:	bf00      	nop
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr

0800195c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001960:	bf00      	nop
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr

0800196a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800196a:	b480      	push	{r7}
 800196c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800196e:	bf00      	nop
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800197c:	f000 f94a 	bl	8001c14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001980:	bf00      	nop
 8001982:	bd80      	pop	{r7, pc}

08001984 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
	return 1;
 8001988:	2301      	movs	r3, #1
}
 800198a:	4618      	mov	r0, r3
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <_kill>:

int _kill(int pid, int sig)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800199e:	f004 fabf 	bl	8005f20 <__errno>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2216      	movs	r2, #22
 80019a6:	601a      	str	r2, [r3, #0]
	return -1;
 80019a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	3708      	adds	r7, #8
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <_exit>:

void _exit (int status)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80019bc:	f04f 31ff 	mov.w	r1, #4294967295
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f7ff ffe7 	bl	8001994 <_kill>
	while (1) {}		/* Make sure we hang here */
 80019c6:	e7fe      	b.n	80019c6 <_exit+0x12>

080019c8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b086      	sub	sp, #24
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	60f8      	str	r0, [r7, #12]
 80019d0:	60b9      	str	r1, [r7, #8]
 80019d2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019d4:	2300      	movs	r3, #0
 80019d6:	617b      	str	r3, [r7, #20]
 80019d8:	e00a      	b.n	80019f0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80019da:	f3af 8000 	nop.w
 80019de:	4601      	mov	r1, r0
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	1c5a      	adds	r2, r3, #1
 80019e4:	60ba      	str	r2, [r7, #8]
 80019e6:	b2ca      	uxtb	r2, r1
 80019e8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	3301      	adds	r3, #1
 80019ee:	617b      	str	r3, [r7, #20]
 80019f0:	697a      	ldr	r2, [r7, #20]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	dbf0      	blt.n	80019da <_read+0x12>
	}

return len;
 80019f8:	687b      	ldr	r3, [r7, #4]
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3718      	adds	r7, #24
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}

08001a02 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a02:	b580      	push	{r7, lr}
 8001a04:	b086      	sub	sp, #24
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	60f8      	str	r0, [r7, #12]
 8001a0a:	60b9      	str	r1, [r7, #8]
 8001a0c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a0e:	2300      	movs	r3, #0
 8001a10:	617b      	str	r3, [r7, #20]
 8001a12:	e009      	b.n	8001a28 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	1c5a      	adds	r2, r3, #1
 8001a18:	60ba      	str	r2, [r7, #8]
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	3301      	adds	r3, #1
 8001a26:	617b      	str	r3, [r7, #20]
 8001a28:	697a      	ldr	r2, [r7, #20]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	dbf1      	blt.n	8001a14 <_write+0x12>
	}
	return len;
 8001a30:	687b      	ldr	r3, [r7, #4]
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3718      	adds	r7, #24
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <_close>:

int _close(int file)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	b083      	sub	sp, #12
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
	return -1;
 8001a42:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	370c      	adds	r7, #12
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr

08001a52 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a52:	b480      	push	{r7}
 8001a54:	b083      	sub	sp, #12
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	6078      	str	r0, [r7, #4]
 8001a5a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a62:	605a      	str	r2, [r3, #4]
	return 0;
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	370c      	adds	r7, #12
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr

08001a72 <_isatty>:

int _isatty(int file)
{
 8001a72:	b480      	push	{r7}
 8001a74:	b083      	sub	sp, #12
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	6078      	str	r0, [r7, #4]
	return 1;
 8001a7a:	2301      	movs	r3, #1
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	60b9      	str	r1, [r7, #8]
 8001a92:	607a      	str	r2, [r7, #4]
	return 0;
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3714      	adds	r7, #20
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
	...

08001aa4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b086      	sub	sp, #24
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001aac:	4a14      	ldr	r2, [pc, #80]	; (8001b00 <_sbrk+0x5c>)
 8001aae:	4b15      	ldr	r3, [pc, #84]	; (8001b04 <_sbrk+0x60>)
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ab8:	4b13      	ldr	r3, [pc, #76]	; (8001b08 <_sbrk+0x64>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d102      	bne.n	8001ac6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ac0:	4b11      	ldr	r3, [pc, #68]	; (8001b08 <_sbrk+0x64>)
 8001ac2:	4a12      	ldr	r2, [pc, #72]	; (8001b0c <_sbrk+0x68>)
 8001ac4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ac6:	4b10      	ldr	r3, [pc, #64]	; (8001b08 <_sbrk+0x64>)
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4413      	add	r3, r2
 8001ace:	693a      	ldr	r2, [r7, #16]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d207      	bcs.n	8001ae4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ad4:	f004 fa24 	bl	8005f20 <__errno>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	220c      	movs	r2, #12
 8001adc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ade:	f04f 33ff 	mov.w	r3, #4294967295
 8001ae2:	e009      	b.n	8001af8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ae4:	4b08      	ldr	r3, [pc, #32]	; (8001b08 <_sbrk+0x64>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001aea:	4b07      	ldr	r3, [pc, #28]	; (8001b08 <_sbrk+0x64>)
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4413      	add	r3, r2
 8001af2:	4a05      	ldr	r2, [pc, #20]	; (8001b08 <_sbrk+0x64>)
 8001af4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001af6:	68fb      	ldr	r3, [r7, #12]
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3718      	adds	r7, #24
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	20003000 	.word	0x20003000
 8001b04:	00000400 	.word	0x00000400
 8001b08:	20000374 	.word	0x20000374
 8001b0c:	20000390 	.word	0x20000390

08001b10 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b14:	4b06      	ldr	r3, [pc, #24]	; (8001b30 <SystemInit+0x20>)
 8001b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b1a:	4a05      	ldr	r2, [pc, #20]	; (8001b30 <SystemInit+0x20>)
 8001b1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b24:	bf00      	nop
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	e000ed00 	.word	0xe000ed00

08001b34 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001b34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b6c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b38:	480d      	ldr	r0, [pc, #52]	; (8001b70 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b3a:	490e      	ldr	r1, [pc, #56]	; (8001b74 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b3c:	4a0e      	ldr	r2, [pc, #56]	; (8001b78 <LoopForever+0xe>)
  movs r3, #0
 8001b3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b40:	e002      	b.n	8001b48 <LoopCopyDataInit>

08001b42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b46:	3304      	adds	r3, #4

08001b48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b4c:	d3f9      	bcc.n	8001b42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b4e:	4a0b      	ldr	r2, [pc, #44]	; (8001b7c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b50:	4c0b      	ldr	r4, [pc, #44]	; (8001b80 <LoopForever+0x16>)
  movs r3, #0
 8001b52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b54:	e001      	b.n	8001b5a <LoopFillZerobss>

08001b56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b58:	3204      	adds	r2, #4

08001b5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b5c:	d3fb      	bcc.n	8001b56 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001b5e:	f7ff ffd7 	bl	8001b10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b62:	f004 f9e3 	bl	8005f2c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b66:	f7ff fa4d 	bl	8001004 <main>

08001b6a <LoopForever>:

LoopForever:
    b LoopForever
 8001b6a:	e7fe      	b.n	8001b6a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001b6c:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001b70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b74:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001b78:	0800b524 	.word	0x0800b524
  ldr r2, =_sbss
 8001b7c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001b80:	2000038c 	.word	0x2000038c

08001b84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b84:	e7fe      	b.n	8001b84 <ADC1_2_IRQHandler>
	...

08001b88 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b8c:	4b08      	ldr	r3, [pc, #32]	; (8001bb0 <HAL_Init+0x28>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a07      	ldr	r2, [pc, #28]	; (8001bb0 <HAL_Init+0x28>)
 8001b92:	f043 0310 	orr.w	r3, r3, #16
 8001b96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b98:	2003      	movs	r0, #3
 8001b9a:	f001 f881 	bl	8002ca0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b9e:	2000      	movs	r0, #0
 8001ba0:	f000 f808 	bl	8001bb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ba4:	f7ff fd8e 	bl	80016c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ba8:	2300      	movs	r3, #0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	40022000 	.word	0x40022000

08001bb4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bbc:	4b12      	ldr	r3, [pc, #72]	; (8001c08 <HAL_InitTick+0x54>)
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	4b12      	ldr	r3, [pc, #72]	; (8001c0c <HAL_InitTick+0x58>)
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bca:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f001 f88b 	bl	8002cee <HAL_SYSTICK_Config>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e00e      	b.n	8001c00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2b0f      	cmp	r3, #15
 8001be6:	d80a      	bhi.n	8001bfe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001be8:	2200      	movs	r2, #0
 8001bea:	6879      	ldr	r1, [r7, #4]
 8001bec:	f04f 30ff 	mov.w	r0, #4294967295
 8001bf0:	f001 f861 	bl	8002cb6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bf4:	4a06      	ldr	r2, [pc, #24]	; (8001c10 <HAL_InitTick+0x5c>)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	e000      	b.n	8001c00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3708      	adds	r7, #8
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	20000000 	.word	0x20000000
 8001c0c:	20000008 	.word	0x20000008
 8001c10:	20000004 	.word	0x20000004

08001c14 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c18:	4b06      	ldr	r3, [pc, #24]	; (8001c34 <HAL_IncTick+0x20>)
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	4b06      	ldr	r3, [pc, #24]	; (8001c38 <HAL_IncTick+0x24>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4413      	add	r3, r2
 8001c24:	4a04      	ldr	r2, [pc, #16]	; (8001c38 <HAL_IncTick+0x24>)
 8001c26:	6013      	str	r3, [r2, #0]
}
 8001c28:	bf00      	nop
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	20000008 	.word	0x20000008
 8001c38:	20000378 	.word	0x20000378

08001c3c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001c40:	4b03      	ldr	r3, [pc, #12]	; (8001c50 <HAL_GetTick+0x14>)
 8001c42:	681b      	ldr	r3, [r3, #0]
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	20000378 	.word	0x20000378

08001c54 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b09a      	sub	sp, #104	; 0x68
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001c62:	2300      	movs	r3, #0
 8001c64:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001c66:	2300      	movs	r3, #0
 8001c68:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d101      	bne.n	8001c74 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e172      	b.n	8001f5a <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	691b      	ldr	r3, [r3, #16]
 8001c78:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7e:	f003 0310 	and.w	r3, r3, #16
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d176      	bne.n	8001d74 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d152      	bne.n	8001d34 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2200      	movs	r2, #0
 8001c92:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2200      	movs	r2, #0
 8001c98:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f7ff fd2f 	bl	800170c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d13b      	bne.n	8001d34 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f000 fed7 	bl	8002a70 <ADC_Disable>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ccc:	f003 0310 	and.w	r3, r3, #16
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d12f      	bne.n	8001d34 <HAL_ADC_Init+0xe0>
 8001cd4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d12b      	bne.n	8001d34 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001ce4:	f023 0302 	bic.w	r3, r3, #2
 8001ce8:	f043 0202 	orr.w	r2, r3, #2
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	689a      	ldr	r2, [r3, #8]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001cfe:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	689a      	ldr	r2, [r3, #8]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001d0e:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001d10:	4b94      	ldr	r3, [pc, #592]	; (8001f64 <HAL_ADC_Init+0x310>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a94      	ldr	r2, [pc, #592]	; (8001f68 <HAL_ADC_Init+0x314>)
 8001d16:	fba2 2303 	umull	r2, r3, r2, r3
 8001d1a:	0c9a      	lsrs	r2, r3, #18
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	4413      	add	r3, r2
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d26:	e002      	b.n	8001d2e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	3b01      	subs	r3, #1
 8001d2c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d1f9      	bne.n	8001d28 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d007      	beq.n	8001d52 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001d4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d50:	d110      	bne.n	8001d74 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d56:	f023 0312 	bic.w	r3, r3, #18
 8001d5a:	f043 0210 	orr.w	r2, r3, #16
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d66:	f043 0201 	orr.w	r2, r3, #1
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d78:	f003 0310 	and.w	r3, r3, #16
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	f040 80df 	bne.w	8001f40 <HAL_ADC_Init+0x2ec>
 8001d82:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	f040 80da 	bne.w	8001f40 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	f040 80d2 	bne.w	8001f40 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001da4:	f043 0202 	orr.w	r2, r3, #2
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001dac:	4b6f      	ldr	r3, [pc, #444]	; (8001f6c <HAL_ADC_Init+0x318>)
 8001dae:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001db8:	d102      	bne.n	8001dc0 <HAL_ADC_Init+0x16c>
 8001dba:	4b6d      	ldr	r3, [pc, #436]	; (8001f70 <HAL_ADC_Init+0x31c>)
 8001dbc:	60fb      	str	r3, [r7, #12]
 8001dbe:	e002      	b.n	8001dc6 <HAL_ADC_Init+0x172>
 8001dc0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001dc4:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	f003 0303 	and.w	r3, r3, #3
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d108      	bne.n	8001de6 <HAL_ADC_Init+0x192>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d101      	bne.n	8001de6 <HAL_ADC_Init+0x192>
 8001de2:	2301      	movs	r3, #1
 8001de4:	e000      	b.n	8001de8 <HAL_ADC_Init+0x194>
 8001de6:	2300      	movs	r3, #0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d11c      	bne.n	8001e26 <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001dec:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d010      	beq.n	8001e14 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	f003 0303 	and.w	r3, r3, #3
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d107      	bne.n	8001e0e <HAL_ADC_Init+0x1ba>
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0301 	and.w	r3, r3, #1
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d101      	bne.n	8001e0e <HAL_ADC_Init+0x1ba>
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e000      	b.n	8001e10 <HAL_ADC_Init+0x1bc>
 8001e0e:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d108      	bne.n	8001e26 <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001e14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	431a      	orrs	r2, r3
 8001e22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e24:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	7e5b      	ldrb	r3, [r3, #25]
 8001e2a:	035b      	lsls	r3, r3, #13
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e30:	2a01      	cmp	r2, #1
 8001e32:	d002      	beq.n	8001e3a <HAL_ADC_Init+0x1e6>
 8001e34:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e38:	e000      	b.n	8001e3c <HAL_ADC_Init+0x1e8>
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	431a      	orrs	r2, r3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	68db      	ldr	r3, [r3, #12]
 8001e42:	431a      	orrs	r2, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d11b      	bne.n	8001e92 <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	7e5b      	ldrb	r3, [r3, #25]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d109      	bne.n	8001e76 <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e66:	3b01      	subs	r3, #1
 8001e68:	045a      	lsls	r2, r3, #17
 8001e6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e72:	663b      	str	r3, [r7, #96]	; 0x60
 8001e74:	e00d      	b.n	8001e92 <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001e7e:	f043 0220 	orr.w	r2, r3, #32
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e8a:	f043 0201 	orr.w	r2, r3, #1
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d007      	beq.n	8001eaa <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	f003 030c 	and.w	r3, r3, #12
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d114      	bne.n	8001ee2 <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	68db      	ldr	r3, [r3, #12]
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	6812      	ldr	r2, [r2, #0]
 8001ec2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ec6:	f023 0302 	bic.w	r3, r3, #2
 8001eca:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	7e1b      	ldrb	r3, [r3, #24]
 8001ed0:	039a      	lsls	r2, r3, #14
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ed8:	005b      	lsls	r3, r3, #1
 8001eda:	4313      	orrs	r3, r2
 8001edc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	68da      	ldr	r2, [r3, #12]
 8001ee8:	4b22      	ldr	r3, [pc, #136]	; (8001f74 <HAL_ADC_Init+0x320>)
 8001eea:	4013      	ands	r3, r2
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	6812      	ldr	r2, [r2, #0]
 8001ef0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001ef2:	430b      	orrs	r3, r1
 8001ef4:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	691b      	ldr	r3, [r3, #16]
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d10c      	bne.n	8001f18 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f04:	f023 010f 	bic.w	r1, r3, #15
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	69db      	ldr	r3, [r3, #28]
 8001f0c:	1e5a      	subs	r2, r3, #1
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	430a      	orrs	r2, r1
 8001f14:	631a      	str	r2, [r3, #48]	; 0x30
 8001f16:	e007      	b.n	8001f28 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f022 020f 	bic.w	r2, r2, #15
 8001f26:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f32:	f023 0303 	bic.w	r3, r3, #3
 8001f36:	f043 0201 	orr.w	r2, r3, #1
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	641a      	str	r2, [r3, #64]	; 0x40
 8001f3e:	e00a      	b.n	8001f56 <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f44:	f023 0312 	bic.w	r3, r3, #18
 8001f48:	f043 0210 	orr.w	r2, r3, #16
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001f50:	2301      	movs	r3, #1
 8001f52:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001f56:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3768      	adds	r7, #104	; 0x68
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	20000000 	.word	0x20000000
 8001f68:	431bde83 	.word	0x431bde83
 8001f6c:	50000300 	.word	0x50000300
 8001f70:	50000100 	.word	0x50000100
 8001f74:	fff0c007 	.word	0xfff0c007

08001f78 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f80:	2300      	movs	r3, #0
 8001f82:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	f003 0304 	and.w	r3, r3, #4
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	f040 809c 	bne.w	80020cc <HAL_ADC_Start+0x154>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d101      	bne.n	8001fa2 <HAL_ADC_Start+0x2a>
 8001f9e:	2302      	movs	r3, #2
 8001fa0:	e097      	b.n	80020d2 <HAL_ADC_Start+0x15a>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f000 fcfc 	bl	80029a8 <ADC_Enable>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001fb4:	7bfb      	ldrb	r3, [r7, #15]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	f040 8083 	bne.w	80020c2 <HAL_ADC_Start+0x14a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001fc4:	f023 0301 	bic.w	r3, r3, #1
 8001fc8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001fd0:	4b42      	ldr	r3, [pc, #264]	; (80020dc <HAL_ADC_Start+0x164>)
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	f003 031f 	and.w	r3, r3, #31
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d004      	beq.n	8001fe6 <HAL_ADC_Start+0x6e>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001fe4:	d115      	bne.n	8002012 <HAL_ADC_Start+0x9a>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fea:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d027      	beq.n	8002050 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002004:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002008:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002010:	e01e      	b.n	8002050 <HAL_ADC_Start+0xd8>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002016:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002026:	d004      	beq.n	8002032 <HAL_ADC_Start+0xba>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a2c      	ldr	r2, [pc, #176]	; (80020e0 <HAL_ADC_Start+0x168>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d10e      	bne.n	8002050 <HAL_ADC_Start+0xd8>
 8002032:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d007      	beq.n	8002050 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002044:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002048:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002054:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002058:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800205c:	d106      	bne.n	800206c <HAL_ADC_Start+0xf4>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002062:	f023 0206 	bic.w	r2, r3, #6
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	645a      	str	r2, [r3, #68]	; 0x44
 800206a:	e002      	b.n	8002072 <HAL_ADC_Start+0xfa>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2200      	movs	r2, #0
 8002070:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2200      	movs	r2, #0
 8002076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	221c      	movs	r2, #28
 8002080:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002082:	4b16      	ldr	r3, [pc, #88]	; (80020dc <HAL_ADC_Start+0x164>)
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	f003 031f 	and.w	r3, r3, #31
 800208a:	2b00      	cmp	r3, #0
 800208c:	d010      	beq.n	80020b0 <HAL_ADC_Start+0x138>
 800208e:	4b13      	ldr	r3, [pc, #76]	; (80020dc <HAL_ADC_Start+0x164>)
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	f003 031f 	and.w	r3, r3, #31
 8002096:	2b05      	cmp	r3, #5
 8002098:	d00a      	beq.n	80020b0 <HAL_ADC_Start+0x138>
 800209a:	4b10      	ldr	r3, [pc, #64]	; (80020dc <HAL_ADC_Start+0x164>)
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	f003 031f 	and.w	r3, r3, #31
 80020a2:	2b09      	cmp	r3, #9
 80020a4:	d004      	beq.n	80020b0 <HAL_ADC_Start+0x138>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80020ae:	d10f      	bne.n	80020d0 <HAL_ADC_Start+0x158>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	689a      	ldr	r2, [r3, #8]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f042 0204 	orr.w	r2, r2, #4
 80020be:	609a      	str	r2, [r3, #8]
 80020c0:	e006      	b.n	80020d0 <HAL_ADC_Start+0x158>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80020ca:	e001      	b.n	80020d0 <HAL_ADC_Start+0x158>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80020cc:	2302      	movs	r3, #2
 80020ce:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80020d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3710      	adds	r7, #16
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	50000300 	.word	0x50000300
 80020e0:	50000100 	.word	0x50000100

080020e4 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b086      	sub	sp, #24
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 80020ee:	2300      	movs	r3, #0
 80020f0:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	695b      	ldr	r3, [r3, #20]
 80020f6:	2b08      	cmp	r3, #8
 80020f8:	d102      	bne.n	8002100 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80020fa:	2308      	movs	r3, #8
 80020fc:	617b      	str	r3, [r7, #20]
 80020fe:	e02e      	b.n	800215e <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002100:	4b5e      	ldr	r3, [pc, #376]	; (800227c <HAL_ADC_PollForConversion+0x198>)
 8002102:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	f003 031f 	and.w	r3, r3, #31
 800210c:	2b00      	cmp	r3, #0
 800210e:	d112      	bne.n	8002136 <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	f003 0301 	and.w	r3, r3, #1
 800211a:	2b01      	cmp	r3, #1
 800211c:	d11d      	bne.n	800215a <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002122:	f043 0220 	orr.w	r2, r3, #32
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2200      	movs	r2, #0
 800212e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e09d      	b.n	8002272 <HAL_ADC_PollForConversion+0x18e>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d00b      	beq.n	800215a <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002146:	f043 0220 	orr.w	r2, r3, #32
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2200      	movs	r2, #0
 8002152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e08b      	b.n	8002272 <HAL_ADC_PollForConversion+0x18e>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800215a:	230c      	movs	r3, #12
 800215c:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800215e:	4b47      	ldr	r3, [pc, #284]	; (800227c <HAL_ADC_PollForConversion+0x198>)
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	f003 031f 	and.w	r3, r3, #31
 8002166:	2b00      	cmp	r3, #0
 8002168:	d004      	beq.n	8002174 <HAL_ADC_PollForConversion+0x90>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002172:	d104      	bne.n	800217e <HAL_ADC_PollForConversion+0x9a>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	613b      	str	r3, [r7, #16]
 800217c:	e003      	b.n	8002186 <HAL_ADC_PollForConversion+0xa2>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800217e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8002186:	f7ff fd59 	bl	8001c3c <HAL_GetTick>
 800218a:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800218c:	e021      	b.n	80021d2 <HAL_ADC_PollForConversion+0xee>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002194:	d01d      	beq.n	80021d2 <HAL_ADC_PollForConversion+0xee>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d007      	beq.n	80021ac <HAL_ADC_PollForConversion+0xc8>
 800219c:	f7ff fd4e 	bl	8001c3c <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	683a      	ldr	r2, [r7, #0]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d212      	bcs.n	80021d2 <HAL_ADC_PollForConversion+0xee>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	4013      	ands	r3, r2
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d10b      	bne.n	80021d2 <HAL_ADC_PollForConversion+0xee>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021be:	f043 0204 	orr.w	r2, r3, #4
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2200      	movs	r2, #0
 80021ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e04f      	b.n	8002272 <HAL_ADC_PollForConversion+0x18e>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	4013      	ands	r3, r2
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d0d6      	beq.n	800218e <HAL_ADC_PollForConversion+0xaa>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	68db      	ldr	r3, [r3, #12]
 80021f2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d131      	bne.n	800225e <HAL_ADC_PollForConversion+0x17a>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8002200:	2b00      	cmp	r3, #0
 8002202:	d12c      	bne.n	800225e <HAL_ADC_PollForConversion+0x17a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0308 	and.w	r3, r3, #8
 800220e:	2b08      	cmp	r3, #8
 8002210:	d125      	bne.n	800225e <HAL_ADC_PollForConversion+0x17a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	f003 0304 	and.w	r3, r3, #4
 800221c:	2b00      	cmp	r3, #0
 800221e:	d112      	bne.n	8002246 <HAL_ADC_PollForConversion+0x162>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002224:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002230:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002234:	2b00      	cmp	r3, #0
 8002236:	d112      	bne.n	800225e <HAL_ADC_PollForConversion+0x17a>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223c:	f043 0201 	orr.w	r2, r3, #1
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	641a      	str	r2, [r3, #64]	; 0x40
 8002244:	e00b      	b.n	800225e <HAL_ADC_PollForConversion+0x17a>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224a:	f043 0220 	orr.w	r2, r3, #32
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002256:	f043 0201 	orr.w	r2, r3, #1
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d103      	bne.n	8002270 <HAL_ADC_PollForConversion+0x18c>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	697a      	ldr	r2, [r7, #20]
 800226e:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002270:	2300      	movs	r3, #0
}
 8002272:	4618      	mov	r0, r3
 8002274:	3718      	adds	r7, #24
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	50000300 	.word	0x50000300

08002280 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800228e:	4618      	mov	r0, r3
 8002290:	370c      	adds	r7, #12
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
	...

0800229c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800229c:	b480      	push	{r7}
 800229e:	b09b      	sub	sp, #108	; 0x6c
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022a6:	2300      	movs	r3, #0
 80022a8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80022ac:	2300      	movs	r3, #0
 80022ae:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d101      	bne.n	80022be <HAL_ADC_ConfigChannel+0x22>
 80022ba:	2302      	movs	r3, #2
 80022bc:	e2a4      	b.n	8002808 <HAL_ADC_ConfigChannel+0x56c>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2201      	movs	r2, #1
 80022c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	f003 0304 	and.w	r3, r3, #4
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	f040 8288 	bne.w	80027e6 <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	2b04      	cmp	r3, #4
 80022dc:	d81c      	bhi.n	8002318 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685a      	ldr	r2, [r3, #4]
 80022e8:	4613      	mov	r3, r2
 80022ea:	005b      	lsls	r3, r3, #1
 80022ec:	4413      	add	r3, r2
 80022ee:	005b      	lsls	r3, r3, #1
 80022f0:	461a      	mov	r2, r3
 80022f2:	231f      	movs	r3, #31
 80022f4:	4093      	lsls	r3, r2
 80022f6:	43db      	mvns	r3, r3
 80022f8:	4019      	ands	r1, r3
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	6818      	ldr	r0, [r3, #0]
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	685a      	ldr	r2, [r3, #4]
 8002302:	4613      	mov	r3, r2
 8002304:	005b      	lsls	r3, r3, #1
 8002306:	4413      	add	r3, r2
 8002308:	005b      	lsls	r3, r3, #1
 800230a:	fa00 f203 	lsl.w	r2, r0, r3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	430a      	orrs	r2, r1
 8002314:	631a      	str	r2, [r3, #48]	; 0x30
 8002316:	e063      	b.n	80023e0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	2b09      	cmp	r3, #9
 800231e:	d81e      	bhi.n	800235e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	685a      	ldr	r2, [r3, #4]
 800232a:	4613      	mov	r3, r2
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	4413      	add	r3, r2
 8002330:	005b      	lsls	r3, r3, #1
 8002332:	3b1e      	subs	r3, #30
 8002334:	221f      	movs	r2, #31
 8002336:	fa02 f303 	lsl.w	r3, r2, r3
 800233a:	43db      	mvns	r3, r3
 800233c:	4019      	ands	r1, r3
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	6818      	ldr	r0, [r3, #0]
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	685a      	ldr	r2, [r3, #4]
 8002346:	4613      	mov	r3, r2
 8002348:	005b      	lsls	r3, r3, #1
 800234a:	4413      	add	r3, r2
 800234c:	005b      	lsls	r3, r3, #1
 800234e:	3b1e      	subs	r3, #30
 8002350:	fa00 f203 	lsl.w	r2, r0, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	430a      	orrs	r2, r1
 800235a:	635a      	str	r2, [r3, #52]	; 0x34
 800235c:	e040      	b.n	80023e0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	2b0e      	cmp	r3, #14
 8002364:	d81e      	bhi.n	80023a4 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	685a      	ldr	r2, [r3, #4]
 8002370:	4613      	mov	r3, r2
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	4413      	add	r3, r2
 8002376:	005b      	lsls	r3, r3, #1
 8002378:	3b3c      	subs	r3, #60	; 0x3c
 800237a:	221f      	movs	r2, #31
 800237c:	fa02 f303 	lsl.w	r3, r2, r3
 8002380:	43db      	mvns	r3, r3
 8002382:	4019      	ands	r1, r3
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	6818      	ldr	r0, [r3, #0]
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685a      	ldr	r2, [r3, #4]
 800238c:	4613      	mov	r3, r2
 800238e:	005b      	lsls	r3, r3, #1
 8002390:	4413      	add	r3, r2
 8002392:	005b      	lsls	r3, r3, #1
 8002394:	3b3c      	subs	r3, #60	; 0x3c
 8002396:	fa00 f203 	lsl.w	r2, r0, r3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	430a      	orrs	r2, r1
 80023a0:	639a      	str	r2, [r3, #56]	; 0x38
 80023a2:	e01d      	b.n	80023e0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	685a      	ldr	r2, [r3, #4]
 80023ae:	4613      	mov	r3, r2
 80023b0:	005b      	lsls	r3, r3, #1
 80023b2:	4413      	add	r3, r2
 80023b4:	005b      	lsls	r3, r3, #1
 80023b6:	3b5a      	subs	r3, #90	; 0x5a
 80023b8:	221f      	movs	r2, #31
 80023ba:	fa02 f303 	lsl.w	r3, r2, r3
 80023be:	43db      	mvns	r3, r3
 80023c0:	4019      	ands	r1, r3
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	6818      	ldr	r0, [r3, #0]
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	685a      	ldr	r2, [r3, #4]
 80023ca:	4613      	mov	r3, r2
 80023cc:	005b      	lsls	r3, r3, #1
 80023ce:	4413      	add	r3, r2
 80023d0:	005b      	lsls	r3, r3, #1
 80023d2:	3b5a      	subs	r3, #90	; 0x5a
 80023d4:	fa00 f203 	lsl.w	r2, r0, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	430a      	orrs	r2, r1
 80023de:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f003 030c 	and.w	r3, r3, #12
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	f040 80e5 	bne.w	80025ba <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2b09      	cmp	r3, #9
 80023f6:	d91c      	bls.n	8002432 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	6999      	ldr	r1, [r3, #24]
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	4613      	mov	r3, r2
 8002404:	005b      	lsls	r3, r3, #1
 8002406:	4413      	add	r3, r2
 8002408:	3b1e      	subs	r3, #30
 800240a:	2207      	movs	r2, #7
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	43db      	mvns	r3, r3
 8002412:	4019      	ands	r1, r3
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	6898      	ldr	r0, [r3, #8]
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	4613      	mov	r3, r2
 800241e:	005b      	lsls	r3, r3, #1
 8002420:	4413      	add	r3, r2
 8002422:	3b1e      	subs	r3, #30
 8002424:	fa00 f203 	lsl.w	r2, r0, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	430a      	orrs	r2, r1
 800242e:	619a      	str	r2, [r3, #24]
 8002430:	e019      	b.n	8002466 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	6959      	ldr	r1, [r3, #20]
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	4613      	mov	r3, r2
 800243e:	005b      	lsls	r3, r3, #1
 8002440:	4413      	add	r3, r2
 8002442:	2207      	movs	r2, #7
 8002444:	fa02 f303 	lsl.w	r3, r2, r3
 8002448:	43db      	mvns	r3, r3
 800244a:	4019      	ands	r1, r3
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	6898      	ldr	r0, [r3, #8]
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	4613      	mov	r3, r2
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	4413      	add	r3, r2
 800245a:	fa00 f203 	lsl.w	r2, r0, r3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	430a      	orrs	r2, r1
 8002464:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	695a      	ldr	r2, [r3, #20]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	08db      	lsrs	r3, r3, #3
 8002472:	f003 0303 	and.w	r3, r3, #3
 8002476:	005b      	lsls	r3, r3, #1
 8002478:	fa02 f303 	lsl.w	r3, r2, r3
 800247c:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	691b      	ldr	r3, [r3, #16]
 8002482:	3b01      	subs	r3, #1
 8002484:	2b03      	cmp	r3, #3
 8002486:	d84f      	bhi.n	8002528 <HAL_ADC_ConfigChannel+0x28c>
 8002488:	a201      	add	r2, pc, #4	; (adr r2, 8002490 <HAL_ADC_ConfigChannel+0x1f4>)
 800248a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800248e:	bf00      	nop
 8002490:	080024a1 	.word	0x080024a1
 8002494:	080024c3 	.word	0x080024c3
 8002498:	080024e5 	.word	0x080024e5
 800249c:	08002507 	.word	0x08002507
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80024a6:	4b94      	ldr	r3, [pc, #592]	; (80026f8 <HAL_ADC_ConfigChannel+0x45c>)
 80024a8:	4013      	ands	r3, r2
 80024aa:	683a      	ldr	r2, [r7, #0]
 80024ac:	6812      	ldr	r2, [r2, #0]
 80024ae:	0691      	lsls	r1, r2, #26
 80024b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80024b2:	430a      	orrs	r2, r1
 80024b4:	431a      	orrs	r2, r3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80024be:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80024c0:	e07e      	b.n	80025c0 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80024c8:	4b8b      	ldr	r3, [pc, #556]	; (80026f8 <HAL_ADC_ConfigChannel+0x45c>)
 80024ca:	4013      	ands	r3, r2
 80024cc:	683a      	ldr	r2, [r7, #0]
 80024ce:	6812      	ldr	r2, [r2, #0]
 80024d0:	0691      	lsls	r1, r2, #26
 80024d2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80024d4:	430a      	orrs	r2, r1
 80024d6:	431a      	orrs	r2, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80024e0:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80024e2:	e06d      	b.n	80025c0 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80024ea:	4b83      	ldr	r3, [pc, #524]	; (80026f8 <HAL_ADC_ConfigChannel+0x45c>)
 80024ec:	4013      	ands	r3, r2
 80024ee:	683a      	ldr	r2, [r7, #0]
 80024f0:	6812      	ldr	r2, [r2, #0]
 80024f2:	0691      	lsls	r1, r2, #26
 80024f4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80024f6:	430a      	orrs	r2, r1
 80024f8:	431a      	orrs	r2, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002502:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002504:	e05c      	b.n	80025c0 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800250c:	4b7a      	ldr	r3, [pc, #488]	; (80026f8 <HAL_ADC_ConfigChannel+0x45c>)
 800250e:	4013      	ands	r3, r2
 8002510:	683a      	ldr	r2, [r7, #0]
 8002512:	6812      	ldr	r2, [r2, #0]
 8002514:	0691      	lsls	r1, r2, #26
 8002516:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002518:	430a      	orrs	r2, r1
 800251a:	431a      	orrs	r2, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002524:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002526:	e04b      	b.n	80025c0 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800252e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	069b      	lsls	r3, r3, #26
 8002538:	429a      	cmp	r2, r3
 800253a:	d107      	bne.n	800254c <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800254a:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002552:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	069b      	lsls	r3, r3, #26
 800255c:	429a      	cmp	r2, r3
 800255e:	d107      	bne.n	8002570 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800256e:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002576:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	069b      	lsls	r3, r3, #26
 8002580:	429a      	cmp	r2, r3
 8002582:	d107      	bne.n	8002594 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002592:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800259a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	069b      	lsls	r3, r3, #26
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d10a      	bne.n	80025be <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80025b6:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80025b8:	e001      	b.n	80025be <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80025ba:	bf00      	nop
 80025bc:	e000      	b.n	80025c0 <HAL_ADC_ConfigChannel+0x324>
      break;
 80025be:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	f003 0303 	and.w	r3, r3, #3
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d108      	bne.n	80025e0 <HAL_ADC_ConfigChannel+0x344>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0301 	and.w	r3, r3, #1
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d101      	bne.n	80025e0 <HAL_ADC_ConfigChannel+0x344>
 80025dc:	2301      	movs	r3, #1
 80025de:	e000      	b.n	80025e2 <HAL_ADC_ConfigChannel+0x346>
 80025e0:	2300      	movs	r3, #0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	f040 810a 	bne.w	80027fc <HAL_ADC_ConfigChannel+0x560>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d00f      	beq.n	8002610 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	2201      	movs	r2, #1
 80025fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002602:	43da      	mvns	r2, r3
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	400a      	ands	r2, r1
 800260a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800260e:	e049      	b.n	80026a4 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	2201      	movs	r2, #1
 800261e:	409a      	lsls	r2, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	430a      	orrs	r2, r1
 8002626:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	2b09      	cmp	r3, #9
 8002630:	d91c      	bls.n	800266c <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	6999      	ldr	r1, [r3, #24]
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	4613      	mov	r3, r2
 800263e:	005b      	lsls	r3, r3, #1
 8002640:	4413      	add	r3, r2
 8002642:	3b1b      	subs	r3, #27
 8002644:	2207      	movs	r2, #7
 8002646:	fa02 f303 	lsl.w	r3, r2, r3
 800264a:	43db      	mvns	r3, r3
 800264c:	4019      	ands	r1, r3
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	6898      	ldr	r0, [r3, #8]
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	4613      	mov	r3, r2
 8002658:	005b      	lsls	r3, r3, #1
 800265a:	4413      	add	r3, r2
 800265c:	3b1b      	subs	r3, #27
 800265e:	fa00 f203 	lsl.w	r2, r0, r3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	430a      	orrs	r2, r1
 8002668:	619a      	str	r2, [r3, #24]
 800266a:	e01b      	b.n	80026a4 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	6959      	ldr	r1, [r3, #20]
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	1c5a      	adds	r2, r3, #1
 8002678:	4613      	mov	r3, r2
 800267a:	005b      	lsls	r3, r3, #1
 800267c:	4413      	add	r3, r2
 800267e:	2207      	movs	r2, #7
 8002680:	fa02 f303 	lsl.w	r3, r2, r3
 8002684:	43db      	mvns	r3, r3
 8002686:	4019      	ands	r1, r3
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	6898      	ldr	r0, [r3, #8]
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	1c5a      	adds	r2, r3, #1
 8002692:	4613      	mov	r3, r2
 8002694:	005b      	lsls	r3, r3, #1
 8002696:	4413      	add	r3, r2
 8002698:	fa00 f203 	lsl.w	r2, r0, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	430a      	orrs	r2, r1
 80026a2:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026a4:	4b15      	ldr	r3, [pc, #84]	; (80026fc <HAL_ADC_ConfigChannel+0x460>)
 80026a6:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	2b10      	cmp	r3, #16
 80026ae:	d105      	bne.n	80026bc <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80026b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d015      	beq.n	80026e8 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80026c0:	2b11      	cmp	r3, #17
 80026c2:	d105      	bne.n	80026d0 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80026c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d00b      	beq.n	80026e8 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80026d4:	2b12      	cmp	r3, #18
 80026d6:	f040 8091 	bne.w	80027fc <HAL_ADC_ConfigChannel+0x560>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80026da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	f040 808a 	bne.w	80027fc <HAL_ADC_ConfigChannel+0x560>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026f0:	d108      	bne.n	8002704 <HAL_ADC_ConfigChannel+0x468>
 80026f2:	4b03      	ldr	r3, [pc, #12]	; (8002700 <HAL_ADC_ConfigChannel+0x464>)
 80026f4:	60fb      	str	r3, [r7, #12]
 80026f6:	e008      	b.n	800270a <HAL_ADC_ConfigChannel+0x46e>
 80026f8:	83fff000 	.word	0x83fff000
 80026fc:	50000300 	.word	0x50000300
 8002700:	50000100 	.word	0x50000100
 8002704:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002708:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	f003 0303 	and.w	r3, r3, #3
 8002714:	2b01      	cmp	r3, #1
 8002716:	d108      	bne.n	800272a <HAL_ADC_ConfigChannel+0x48e>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0301 	and.w	r3, r3, #1
 8002722:	2b01      	cmp	r3, #1
 8002724:	d101      	bne.n	800272a <HAL_ADC_ConfigChannel+0x48e>
 8002726:	2301      	movs	r3, #1
 8002728:	e000      	b.n	800272c <HAL_ADC_ConfigChannel+0x490>
 800272a:	2300      	movs	r3, #0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d150      	bne.n	80027d2 <HAL_ADC_ConfigChannel+0x536>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002730:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002732:	2b00      	cmp	r3, #0
 8002734:	d010      	beq.n	8002758 <HAL_ADC_ConfigChannel+0x4bc>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	f003 0303 	and.w	r3, r3, #3
 800273e:	2b01      	cmp	r3, #1
 8002740:	d107      	bne.n	8002752 <HAL_ADC_ConfigChannel+0x4b6>
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0301 	and.w	r3, r3, #1
 800274a:	2b01      	cmp	r3, #1
 800274c:	d101      	bne.n	8002752 <HAL_ADC_ConfigChannel+0x4b6>
 800274e:	2301      	movs	r3, #1
 8002750:	e000      	b.n	8002754 <HAL_ADC_ConfigChannel+0x4b8>
 8002752:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002754:	2b00      	cmp	r3, #0
 8002756:	d13c      	bne.n	80027d2 <HAL_ADC_ConfigChannel+0x536>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2b10      	cmp	r3, #16
 800275e:	d11d      	bne.n	800279c <HAL_ADC_ConfigChannel+0x500>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002768:	d118      	bne.n	800279c <HAL_ADC_ConfigChannel+0x500>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800276a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002772:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002774:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002776:	4b27      	ldr	r3, [pc, #156]	; (8002814 <HAL_ADC_ConfigChannel+0x578>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a27      	ldr	r2, [pc, #156]	; (8002818 <HAL_ADC_ConfigChannel+0x57c>)
 800277c:	fba2 2303 	umull	r2, r3, r2, r3
 8002780:	0c9a      	lsrs	r2, r3, #18
 8002782:	4613      	mov	r3, r2
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	4413      	add	r3, r2
 8002788:	005b      	lsls	r3, r3, #1
 800278a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800278c:	e002      	b.n	8002794 <HAL_ADC_ConfigChannel+0x4f8>
          {
            wait_loop_index--;
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	3b01      	subs	r3, #1
 8002792:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d1f9      	bne.n	800278e <HAL_ADC_ConfigChannel+0x4f2>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800279a:	e02e      	b.n	80027fa <HAL_ADC_ConfigChannel+0x55e>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	2b11      	cmp	r3, #17
 80027a2:	d10b      	bne.n	80027bc <HAL_ADC_ConfigChannel+0x520>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027ac:	d106      	bne.n	80027bc <HAL_ADC_ConfigChannel+0x520>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80027ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80027b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027b8:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80027ba:	e01e      	b.n	80027fa <HAL_ADC_ConfigChannel+0x55e>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2b12      	cmp	r3, #18
 80027c2:	d11a      	bne.n	80027fa <HAL_ADC_ConfigChannel+0x55e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80027c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80027cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027ce:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80027d0:	e013      	b.n	80027fa <HAL_ADC_ConfigChannel+0x55e>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d6:	f043 0220 	orr.w	r2, r3, #32
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80027e4:	e00a      	b.n	80027fc <HAL_ADC_ConfigChannel+0x560>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ea:	f043 0220 	orr.w	r2, r3, #32
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80027f8:	e000      	b.n	80027fc <HAL_ADC_ConfigChannel+0x560>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80027fa:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2200      	movs	r2, #0
 8002800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002804:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002808:	4618      	mov	r0, r3
 800280a:	376c      	adds	r7, #108	; 0x6c
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr
 8002814:	20000000 	.word	0x20000000
 8002818:	431bde83 	.word	0x431bde83

0800281c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 800281c:	b480      	push	{r7}
 800281e:	b099      	sub	sp, #100	; 0x64
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002826:	2300      	movs	r3, #0
 8002828:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002834:	d102      	bne.n	800283c <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8002836:	4b5a      	ldr	r3, [pc, #360]	; (80029a0 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8002838:	60bb      	str	r3, [r7, #8]
 800283a:	e002      	b.n	8002842 <HAL_ADCEx_MultiModeConfigChannel+0x26>
 800283c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002840:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d101      	bne.n	800284c <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e0a2      	b.n	8002992 <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002852:	2b01      	cmp	r3, #1
 8002854:	d101      	bne.n	800285a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002856:	2302      	movs	r3, #2
 8002858:	e09b      	b.n	8002992 <HAL_ADCEx_MultiModeConfigChannel+0x176>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2201      	movs	r2, #1
 800285e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f003 0304 	and.w	r3, r3, #4
 800286c:	2b00      	cmp	r3, #0
 800286e:	d17f      	bne.n	8002970 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	f003 0304 	and.w	r3, r3, #4
 8002878:	2b00      	cmp	r3, #0
 800287a:	d179      	bne.n	8002970 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800287c:	4b49      	ldr	r3, [pc, #292]	; (80029a4 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 800287e:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d040      	beq.n	800290a <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002888:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	6859      	ldr	r1, [r3, #4]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800289a:	035b      	lsls	r3, r3, #13
 800289c:	430b      	orrs	r3, r1
 800289e:	431a      	orrs	r2, r3
 80028a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028a2:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	f003 0303 	and.w	r3, r3, #3
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d108      	bne.n	80028c4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0301 	and.w	r3, r3, #1
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d101      	bne.n	80028c4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80028c0:	2301      	movs	r3, #1
 80028c2:	e000      	b.n	80028c6 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 80028c4:	2300      	movs	r3, #0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d15c      	bne.n	8002984 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f003 0303 	and.w	r3, r3, #3
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d107      	bne.n	80028e6 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0301 	and.w	r3, r3, #1
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d101      	bne.n	80028e6 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80028e2:	2301      	movs	r3, #1
 80028e4:	e000      	b.n	80028e8 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 80028e6:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d14b      	bne.n	8002984 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80028ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80028f4:	f023 030f 	bic.w	r3, r3, #15
 80028f8:	683a      	ldr	r2, [r7, #0]
 80028fa:	6811      	ldr	r1, [r2, #0]
 80028fc:	683a      	ldr	r2, [r7, #0]
 80028fe:	6892      	ldr	r2, [r2, #8]
 8002900:	430a      	orrs	r2, r1
 8002902:	431a      	orrs	r2, r3
 8002904:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002906:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002908:	e03c      	b.n	8002984 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800290a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002912:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002914:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	f003 0303 	and.w	r3, r3, #3
 8002920:	2b01      	cmp	r3, #1
 8002922:	d108      	bne.n	8002936 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0301 	and.w	r3, r3, #1
 800292e:	2b01      	cmp	r3, #1
 8002930:	d101      	bne.n	8002936 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8002932:	2301      	movs	r3, #1
 8002934:	e000      	b.n	8002938 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8002936:	2300      	movs	r3, #0
 8002938:	2b00      	cmp	r3, #0
 800293a:	d123      	bne.n	8002984 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	f003 0303 	and.w	r3, r3, #3
 8002944:	2b01      	cmp	r3, #1
 8002946:	d107      	bne.n	8002958 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0301 	and.w	r3, r3, #1
 8002950:	2b01      	cmp	r3, #1
 8002952:	d101      	bne.n	8002958 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8002954:	2301      	movs	r3, #1
 8002956:	e000      	b.n	800295a <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8002958:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800295a:	2b00      	cmp	r3, #0
 800295c:	d112      	bne.n	8002984 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800295e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002966:	f023 030f 	bic.w	r3, r3, #15
 800296a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800296c:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800296e:	e009      	b.n	8002984 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002974:	f043 0220 	orr.w	r2, r3, #32
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002982:	e000      	b.n	8002986 <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002984:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800298e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8002992:	4618      	mov	r0, r3
 8002994:	3764      	adds	r7, #100	; 0x64
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	50000100 	.word	0x50000100
 80029a4:	50000300 	.word	0x50000300

080029a8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80029b0:	2300      	movs	r3, #0
 80029b2:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f003 0303 	and.w	r3, r3, #3
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d108      	bne.n	80029d4 <ADC_Enable+0x2c>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0301 	and.w	r3, r3, #1
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d101      	bne.n	80029d4 <ADC_Enable+0x2c>
 80029d0:	2301      	movs	r3, #1
 80029d2:	e000      	b.n	80029d6 <ADC_Enable+0x2e>
 80029d4:	2300      	movs	r3, #0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d143      	bne.n	8002a62 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	689a      	ldr	r2, [r3, #8]
 80029e0:	4b22      	ldr	r3, [pc, #136]	; (8002a6c <ADC_Enable+0xc4>)
 80029e2:	4013      	ands	r3, r2
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d00d      	beq.n	8002a04 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ec:	f043 0210 	orr.w	r2, r3, #16
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029f8:	f043 0201 	orr.w	r2, r3, #1
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e02f      	b.n	8002a64 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	689a      	ldr	r2, [r3, #8]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f042 0201 	orr.w	r2, r2, #1
 8002a12:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002a14:	f7ff f912 	bl	8001c3c <HAL_GetTick>
 8002a18:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002a1a:	e01b      	b.n	8002a54 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002a1c:	f7ff f90e 	bl	8001c3c <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d914      	bls.n	8002a54 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0301 	and.w	r3, r3, #1
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d00d      	beq.n	8002a54 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3c:	f043 0210 	orr.w	r2, r3, #16
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a48:	f043 0201 	orr.w	r2, r3, #1
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e007      	b.n	8002a64 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0301 	and.w	r3, r3, #1
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d1dc      	bne.n	8002a1c <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002a62:	2300      	movs	r3, #0
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3710      	adds	r7, #16
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	8000003f 	.word	0x8000003f

08002a70 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	f003 0303 	and.w	r3, r3, #3
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d108      	bne.n	8002a9c <ADC_Disable+0x2c>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0301 	and.w	r3, r3, #1
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d101      	bne.n	8002a9c <ADC_Disable+0x2c>
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e000      	b.n	8002a9e <ADC_Disable+0x2e>
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d047      	beq.n	8002b32 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	f003 030d 	and.w	r3, r3, #13
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d10f      	bne.n	8002ad0 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	689a      	ldr	r2, [r3, #8]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f042 0202 	orr.w	r2, r2, #2
 8002abe:	609a      	str	r2, [r3, #8]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2203      	movs	r2, #3
 8002ac6:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002ac8:	f7ff f8b8 	bl	8001c3c <HAL_GetTick>
 8002acc:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002ace:	e029      	b.n	8002b24 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad4:	f043 0210 	orr.w	r2, r3, #16
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ae0:	f043 0201 	orr.w	r2, r3, #1
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e023      	b.n	8002b34 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002aec:	f7ff f8a6 	bl	8001c3c <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d914      	bls.n	8002b24 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	f003 0301 	and.w	r3, r3, #1
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d10d      	bne.n	8002b24 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0c:	f043 0210 	orr.w	r2, r3, #16
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b18:	f043 0201 	orr.w	r2, r3, #1
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e007      	b.n	8002b34 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f003 0301 	and.w	r3, r3, #1
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d0dc      	beq.n	8002aec <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002b32:	2300      	movs	r3, #0
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3710      	adds	r7, #16
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b085      	sub	sp, #20
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f003 0307 	and.w	r3, r3, #7
 8002b4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b4c:	4b0c      	ldr	r3, [pc, #48]	; (8002b80 <__NVIC_SetPriorityGrouping+0x44>)
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b52:	68ba      	ldr	r2, [r7, #8]
 8002b54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b58:	4013      	ands	r3, r2
 8002b5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b6e:	4a04      	ldr	r2, [pc, #16]	; (8002b80 <__NVIC_SetPriorityGrouping+0x44>)
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	60d3      	str	r3, [r2, #12]
}
 8002b74:	bf00      	nop
 8002b76:	3714      	adds	r7, #20
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr
 8002b80:	e000ed00 	.word	0xe000ed00

08002b84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b84:	b480      	push	{r7}
 8002b86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b88:	4b04      	ldr	r3, [pc, #16]	; (8002b9c <__NVIC_GetPriorityGrouping+0x18>)
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	0a1b      	lsrs	r3, r3, #8
 8002b8e:	f003 0307 	and.w	r3, r3, #7
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr
 8002b9c:	e000ed00 	.word	0xe000ed00

08002ba0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	6039      	str	r1, [r7, #0]
 8002baa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	db0a      	blt.n	8002bca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	b2da      	uxtb	r2, r3
 8002bb8:	490c      	ldr	r1, [pc, #48]	; (8002bec <__NVIC_SetPriority+0x4c>)
 8002bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bbe:	0112      	lsls	r2, r2, #4
 8002bc0:	b2d2      	uxtb	r2, r2
 8002bc2:	440b      	add	r3, r1
 8002bc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bc8:	e00a      	b.n	8002be0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	b2da      	uxtb	r2, r3
 8002bce:	4908      	ldr	r1, [pc, #32]	; (8002bf0 <__NVIC_SetPriority+0x50>)
 8002bd0:	79fb      	ldrb	r3, [r7, #7]
 8002bd2:	f003 030f 	and.w	r3, r3, #15
 8002bd6:	3b04      	subs	r3, #4
 8002bd8:	0112      	lsls	r2, r2, #4
 8002bda:	b2d2      	uxtb	r2, r2
 8002bdc:	440b      	add	r3, r1
 8002bde:	761a      	strb	r2, [r3, #24]
}
 8002be0:	bf00      	nop
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr
 8002bec:	e000e100 	.word	0xe000e100
 8002bf0:	e000ed00 	.word	0xe000ed00

08002bf4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b089      	sub	sp, #36	; 0x24
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	60b9      	str	r1, [r7, #8]
 8002bfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f003 0307 	and.w	r3, r3, #7
 8002c06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	f1c3 0307 	rsb	r3, r3, #7
 8002c0e:	2b04      	cmp	r3, #4
 8002c10:	bf28      	it	cs
 8002c12:	2304      	movcs	r3, #4
 8002c14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	3304      	adds	r3, #4
 8002c1a:	2b06      	cmp	r3, #6
 8002c1c:	d902      	bls.n	8002c24 <NVIC_EncodePriority+0x30>
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	3b03      	subs	r3, #3
 8002c22:	e000      	b.n	8002c26 <NVIC_EncodePriority+0x32>
 8002c24:	2300      	movs	r3, #0
 8002c26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c28:	f04f 32ff 	mov.w	r2, #4294967295
 8002c2c:	69bb      	ldr	r3, [r7, #24]
 8002c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c32:	43da      	mvns	r2, r3
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	401a      	ands	r2, r3
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c3c:	f04f 31ff 	mov.w	r1, #4294967295
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	fa01 f303 	lsl.w	r3, r1, r3
 8002c46:	43d9      	mvns	r1, r3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c4c:	4313      	orrs	r3, r2
         );
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3724      	adds	r7, #36	; 0x24
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr
	...

08002c5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b082      	sub	sp, #8
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	3b01      	subs	r3, #1
 8002c68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c6c:	d301      	bcc.n	8002c72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e00f      	b.n	8002c92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c72:	4a0a      	ldr	r2, [pc, #40]	; (8002c9c <SysTick_Config+0x40>)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	3b01      	subs	r3, #1
 8002c78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c7a:	210f      	movs	r1, #15
 8002c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c80:	f7ff ff8e 	bl	8002ba0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c84:	4b05      	ldr	r3, [pc, #20]	; (8002c9c <SysTick_Config+0x40>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c8a:	4b04      	ldr	r3, [pc, #16]	; (8002c9c <SysTick_Config+0x40>)
 8002c8c:	2207      	movs	r2, #7
 8002c8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3708      	adds	r7, #8
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	e000e010 	.word	0xe000e010

08002ca0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f7ff ff47 	bl	8002b3c <__NVIC_SetPriorityGrouping>
}
 8002cae:	bf00      	nop
 8002cb0:	3708      	adds	r7, #8
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}

08002cb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cb6:	b580      	push	{r7, lr}
 8002cb8:	b086      	sub	sp, #24
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	60b9      	str	r1, [r7, #8]
 8002cc0:	607a      	str	r2, [r7, #4]
 8002cc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002cc8:	f7ff ff5c 	bl	8002b84 <__NVIC_GetPriorityGrouping>
 8002ccc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	68b9      	ldr	r1, [r7, #8]
 8002cd2:	6978      	ldr	r0, [r7, #20]
 8002cd4:	f7ff ff8e 	bl	8002bf4 <NVIC_EncodePriority>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cde:	4611      	mov	r1, r2
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f7ff ff5d 	bl	8002ba0 <__NVIC_SetPriority>
}
 8002ce6:	bf00      	nop
 8002ce8:	3718      	adds	r7, #24
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}

08002cee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cee:	b580      	push	{r7, lr}
 8002cf0:	b082      	sub	sp, #8
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f7ff ffb0 	bl	8002c5c <SysTick_Config>
 8002cfc:	4603      	mov	r3, r0
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3708      	adds	r7, #8
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
	...

08002d08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b087      	sub	sp, #28
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d12:	2300      	movs	r3, #0
 8002d14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d16:	e14e      	b.n	8002fb6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	2101      	movs	r1, #1
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	fa01 f303 	lsl.w	r3, r1, r3
 8002d24:	4013      	ands	r3, r2
 8002d26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	f000 8140 	beq.w	8002fb0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f003 0303 	and.w	r3, r3, #3
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d005      	beq.n	8002d48 <HAL_GPIO_Init+0x40>
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f003 0303 	and.w	r3, r3, #3
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	d130      	bne.n	8002daa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	005b      	lsls	r3, r3, #1
 8002d52:	2203      	movs	r2, #3
 8002d54:	fa02 f303 	lsl.w	r3, r2, r3
 8002d58:	43db      	mvns	r3, r3
 8002d5a:	693a      	ldr	r2, [r7, #16]
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	68da      	ldr	r2, [r3, #12]
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	005b      	lsls	r3, r3, #1
 8002d68:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6c:	693a      	ldr	r2, [r7, #16]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	693a      	ldr	r2, [r7, #16]
 8002d76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d7e:	2201      	movs	r2, #1
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	fa02 f303 	lsl.w	r3, r2, r3
 8002d86:	43db      	mvns	r3, r3
 8002d88:	693a      	ldr	r2, [r7, #16]
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	091b      	lsrs	r3, r3, #4
 8002d94:	f003 0201 	and.w	r2, r3, #1
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9e:	693a      	ldr	r2, [r7, #16]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	693a      	ldr	r2, [r7, #16]
 8002da8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	f003 0303 	and.w	r3, r3, #3
 8002db2:	2b03      	cmp	r3, #3
 8002db4:	d017      	beq.n	8002de6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	005b      	lsls	r3, r3, #1
 8002dc0:	2203      	movs	r2, #3
 8002dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc6:	43db      	mvns	r3, r3
 8002dc8:	693a      	ldr	r2, [r7, #16]
 8002dca:	4013      	ands	r3, r2
 8002dcc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	689a      	ldr	r2, [r3, #8]
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	005b      	lsls	r3, r3, #1
 8002dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dda:	693a      	ldr	r2, [r7, #16]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	693a      	ldr	r2, [r7, #16]
 8002de4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f003 0303 	and.w	r3, r3, #3
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d123      	bne.n	8002e3a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	08da      	lsrs	r2, r3, #3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	3208      	adds	r2, #8
 8002dfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dfe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	f003 0307 	and.w	r3, r3, #7
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	220f      	movs	r2, #15
 8002e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0e:	43db      	mvns	r3, r3
 8002e10:	693a      	ldr	r2, [r7, #16]
 8002e12:	4013      	ands	r3, r2
 8002e14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	691a      	ldr	r2, [r3, #16]
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	f003 0307 	and.w	r3, r3, #7
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	fa02 f303 	lsl.w	r3, r2, r3
 8002e26:	693a      	ldr	r2, [r7, #16]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	08da      	lsrs	r2, r3, #3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	3208      	adds	r2, #8
 8002e34:	6939      	ldr	r1, [r7, #16]
 8002e36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	005b      	lsls	r3, r3, #1
 8002e44:	2203      	movs	r2, #3
 8002e46:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4a:	43db      	mvns	r3, r3
 8002e4c:	693a      	ldr	r2, [r7, #16]
 8002e4e:	4013      	ands	r3, r2
 8002e50:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f003 0203 	and.w	r2, r3, #3
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	005b      	lsls	r3, r3, #1
 8002e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e62:	693a      	ldr	r2, [r7, #16]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	693a      	ldr	r2, [r7, #16]
 8002e6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	f000 809a 	beq.w	8002fb0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e7c:	4b55      	ldr	r3, [pc, #340]	; (8002fd4 <HAL_GPIO_Init+0x2cc>)
 8002e7e:	699b      	ldr	r3, [r3, #24]
 8002e80:	4a54      	ldr	r2, [pc, #336]	; (8002fd4 <HAL_GPIO_Init+0x2cc>)
 8002e82:	f043 0301 	orr.w	r3, r3, #1
 8002e86:	6193      	str	r3, [r2, #24]
 8002e88:	4b52      	ldr	r3, [pc, #328]	; (8002fd4 <HAL_GPIO_Init+0x2cc>)
 8002e8a:	699b      	ldr	r3, [r3, #24]
 8002e8c:	f003 0301 	and.w	r3, r3, #1
 8002e90:	60bb      	str	r3, [r7, #8]
 8002e92:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002e94:	4a50      	ldr	r2, [pc, #320]	; (8002fd8 <HAL_GPIO_Init+0x2d0>)
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	089b      	lsrs	r3, r3, #2
 8002e9a:	3302      	adds	r3, #2
 8002e9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ea0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	f003 0303 	and.w	r3, r3, #3
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	220f      	movs	r2, #15
 8002eac:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb0:	43db      	mvns	r3, r3
 8002eb2:	693a      	ldr	r2, [r7, #16]
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002ebe:	d013      	beq.n	8002ee8 <HAL_GPIO_Init+0x1e0>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	4a46      	ldr	r2, [pc, #280]	; (8002fdc <HAL_GPIO_Init+0x2d4>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d00d      	beq.n	8002ee4 <HAL_GPIO_Init+0x1dc>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	4a45      	ldr	r2, [pc, #276]	; (8002fe0 <HAL_GPIO_Init+0x2d8>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d007      	beq.n	8002ee0 <HAL_GPIO_Init+0x1d8>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	4a44      	ldr	r2, [pc, #272]	; (8002fe4 <HAL_GPIO_Init+0x2dc>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d101      	bne.n	8002edc <HAL_GPIO_Init+0x1d4>
 8002ed8:	2303      	movs	r3, #3
 8002eda:	e006      	b.n	8002eea <HAL_GPIO_Init+0x1e2>
 8002edc:	2305      	movs	r3, #5
 8002ede:	e004      	b.n	8002eea <HAL_GPIO_Init+0x1e2>
 8002ee0:	2302      	movs	r3, #2
 8002ee2:	e002      	b.n	8002eea <HAL_GPIO_Init+0x1e2>
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e000      	b.n	8002eea <HAL_GPIO_Init+0x1e2>
 8002ee8:	2300      	movs	r3, #0
 8002eea:	697a      	ldr	r2, [r7, #20]
 8002eec:	f002 0203 	and.w	r2, r2, #3
 8002ef0:	0092      	lsls	r2, r2, #2
 8002ef2:	4093      	lsls	r3, r2
 8002ef4:	693a      	ldr	r2, [r7, #16]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002efa:	4937      	ldr	r1, [pc, #220]	; (8002fd8 <HAL_GPIO_Init+0x2d0>)
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	089b      	lsrs	r3, r3, #2
 8002f00:	3302      	adds	r3, #2
 8002f02:	693a      	ldr	r2, [r7, #16]
 8002f04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f08:	4b37      	ldr	r3, [pc, #220]	; (8002fe8 <HAL_GPIO_Init+0x2e0>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	43db      	mvns	r3, r3
 8002f12:	693a      	ldr	r2, [r7, #16]
 8002f14:	4013      	ands	r3, r2
 8002f16:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d003      	beq.n	8002f2c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002f24:	693a      	ldr	r2, [r7, #16]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002f2c:	4a2e      	ldr	r2, [pc, #184]	; (8002fe8 <HAL_GPIO_Init+0x2e0>)
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002f32:	4b2d      	ldr	r3, [pc, #180]	; (8002fe8 <HAL_GPIO_Init+0x2e0>)
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	43db      	mvns	r3, r3
 8002f3c:	693a      	ldr	r2, [r7, #16]
 8002f3e:	4013      	ands	r3, r2
 8002f40:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d003      	beq.n	8002f56 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002f4e:	693a      	ldr	r2, [r7, #16]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002f56:	4a24      	ldr	r2, [pc, #144]	; (8002fe8 <HAL_GPIO_Init+0x2e0>)
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f5c:	4b22      	ldr	r3, [pc, #136]	; (8002fe8 <HAL_GPIO_Init+0x2e0>)
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	43db      	mvns	r3, r3
 8002f66:	693a      	ldr	r2, [r7, #16]
 8002f68:	4013      	ands	r3, r2
 8002f6a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d003      	beq.n	8002f80 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002f78:	693a      	ldr	r2, [r7, #16]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002f80:	4a19      	ldr	r2, [pc, #100]	; (8002fe8 <HAL_GPIO_Init+0x2e0>)
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f86:	4b18      	ldr	r3, [pc, #96]	; (8002fe8 <HAL_GPIO_Init+0x2e0>)
 8002f88:	68db      	ldr	r3, [r3, #12]
 8002f8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	43db      	mvns	r3, r3
 8002f90:	693a      	ldr	r2, [r7, #16]
 8002f92:	4013      	ands	r3, r2
 8002f94:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d003      	beq.n	8002faa <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002fa2:	693a      	ldr	r2, [r7, #16]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002faa:	4a0f      	ldr	r2, [pc, #60]	; (8002fe8 <HAL_GPIO_Init+0x2e0>)
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	fa22 f303 	lsr.w	r3, r2, r3
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	f47f aea9 	bne.w	8002d18 <HAL_GPIO_Init+0x10>
  }
}
 8002fc6:	bf00      	nop
 8002fc8:	bf00      	nop
 8002fca:	371c      	adds	r7, #28
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr
 8002fd4:	40021000 	.word	0x40021000
 8002fd8:	40010000 	.word	0x40010000
 8002fdc:	48000400 	.word	0x48000400
 8002fe0:	48000800 	.word	0x48000800
 8002fe4:	48000c00 	.word	0x48000c00
 8002fe8:	40010400 	.word	0x40010400

08002fec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b085      	sub	sp, #20
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	460b      	mov	r3, r1
 8002ff6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	691a      	ldr	r2, [r3, #16]
 8002ffc:	887b      	ldrh	r3, [r7, #2]
 8002ffe:	4013      	ands	r3, r2
 8003000:	2b00      	cmp	r3, #0
 8003002:	d002      	beq.n	800300a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003004:	2301      	movs	r3, #1
 8003006:	73fb      	strb	r3, [r7, #15]
 8003008:	e001      	b.n	800300e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800300a:	2300      	movs	r3, #0
 800300c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800300e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003010:	4618      	mov	r0, r3
 8003012:	3714      	adds	r7, #20
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr

0800301c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800301c:	b480      	push	{r7}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	460b      	mov	r3, r1
 8003026:	807b      	strh	r3, [r7, #2]
 8003028:	4613      	mov	r3, r2
 800302a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800302c:	787b      	ldrb	r3, [r7, #1]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d003      	beq.n	800303a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003032:	887a      	ldrh	r2, [r7, #2]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003038:	e002      	b.n	8003040 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800303a:	887a      	ldrh	r2, [r7, #2]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003040:	bf00      	nop
 8003042:	370c      	adds	r7, #12
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr

0800304c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8003052:	af00      	add	r7, sp, #0
 8003054:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003058:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800305c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800305e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003062:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d102      	bne.n	8003072 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	f001 b823 	b.w	80040b8 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003072:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003076:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0301 	and.w	r3, r3, #1
 8003082:	2b00      	cmp	r3, #0
 8003084:	f000 817d 	beq.w	8003382 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003088:	4bbc      	ldr	r3, [pc, #752]	; (800337c <HAL_RCC_OscConfig+0x330>)
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f003 030c 	and.w	r3, r3, #12
 8003090:	2b04      	cmp	r3, #4
 8003092:	d00c      	beq.n	80030ae <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003094:	4bb9      	ldr	r3, [pc, #740]	; (800337c <HAL_RCC_OscConfig+0x330>)
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f003 030c 	and.w	r3, r3, #12
 800309c:	2b08      	cmp	r3, #8
 800309e:	d15c      	bne.n	800315a <HAL_RCC_OscConfig+0x10e>
 80030a0:	4bb6      	ldr	r3, [pc, #728]	; (800337c <HAL_RCC_OscConfig+0x330>)
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030ac:	d155      	bne.n	800315a <HAL_RCC_OscConfig+0x10e>
 80030ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030b2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80030ba:	fa93 f3a3 	rbit	r3, r3
 80030be:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80030c2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030c6:	fab3 f383 	clz	r3, r3
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	095b      	lsrs	r3, r3, #5
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	f043 0301 	orr.w	r3, r3, #1
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d102      	bne.n	80030e0 <HAL_RCC_OscConfig+0x94>
 80030da:	4ba8      	ldr	r3, [pc, #672]	; (800337c <HAL_RCC_OscConfig+0x330>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	e015      	b.n	800310c <HAL_RCC_OscConfig+0xc0>
 80030e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030e4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e8:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80030ec:	fa93 f3a3 	rbit	r3, r3
 80030f0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80030f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030f8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80030fc:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8003100:	fa93 f3a3 	rbit	r3, r3
 8003104:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8003108:	4b9c      	ldr	r3, [pc, #624]	; (800337c <HAL_RCC_OscConfig+0x330>)
 800310a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003110:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8003114:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003118:	fa92 f2a2 	rbit	r2, r2
 800311c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8003120:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8003124:	fab2 f282 	clz	r2, r2
 8003128:	b2d2      	uxtb	r2, r2
 800312a:	f042 0220 	orr.w	r2, r2, #32
 800312e:	b2d2      	uxtb	r2, r2
 8003130:	f002 021f 	and.w	r2, r2, #31
 8003134:	2101      	movs	r1, #1
 8003136:	fa01 f202 	lsl.w	r2, r1, r2
 800313a:	4013      	ands	r3, r2
 800313c:	2b00      	cmp	r3, #0
 800313e:	f000 811f 	beq.w	8003380 <HAL_RCC_OscConfig+0x334>
 8003142:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003146:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	2b00      	cmp	r3, #0
 8003150:	f040 8116 	bne.w	8003380 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	f000 bfaf 	b.w	80040b8 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800315a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800315e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800316a:	d106      	bne.n	800317a <HAL_RCC_OscConfig+0x12e>
 800316c:	4b83      	ldr	r3, [pc, #524]	; (800337c <HAL_RCC_OscConfig+0x330>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a82      	ldr	r2, [pc, #520]	; (800337c <HAL_RCC_OscConfig+0x330>)
 8003172:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003176:	6013      	str	r3, [r2, #0]
 8003178:	e036      	b.n	80031e8 <HAL_RCC_OscConfig+0x19c>
 800317a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800317e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d10c      	bne.n	80031a4 <HAL_RCC_OscConfig+0x158>
 800318a:	4b7c      	ldr	r3, [pc, #496]	; (800337c <HAL_RCC_OscConfig+0x330>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a7b      	ldr	r2, [pc, #492]	; (800337c <HAL_RCC_OscConfig+0x330>)
 8003190:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003194:	6013      	str	r3, [r2, #0]
 8003196:	4b79      	ldr	r3, [pc, #484]	; (800337c <HAL_RCC_OscConfig+0x330>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a78      	ldr	r2, [pc, #480]	; (800337c <HAL_RCC_OscConfig+0x330>)
 800319c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031a0:	6013      	str	r3, [r2, #0]
 80031a2:	e021      	b.n	80031e8 <HAL_RCC_OscConfig+0x19c>
 80031a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031a8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031b4:	d10c      	bne.n	80031d0 <HAL_RCC_OscConfig+0x184>
 80031b6:	4b71      	ldr	r3, [pc, #452]	; (800337c <HAL_RCC_OscConfig+0x330>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a70      	ldr	r2, [pc, #448]	; (800337c <HAL_RCC_OscConfig+0x330>)
 80031bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031c0:	6013      	str	r3, [r2, #0]
 80031c2:	4b6e      	ldr	r3, [pc, #440]	; (800337c <HAL_RCC_OscConfig+0x330>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a6d      	ldr	r2, [pc, #436]	; (800337c <HAL_RCC_OscConfig+0x330>)
 80031c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031cc:	6013      	str	r3, [r2, #0]
 80031ce:	e00b      	b.n	80031e8 <HAL_RCC_OscConfig+0x19c>
 80031d0:	4b6a      	ldr	r3, [pc, #424]	; (800337c <HAL_RCC_OscConfig+0x330>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a69      	ldr	r2, [pc, #420]	; (800337c <HAL_RCC_OscConfig+0x330>)
 80031d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031da:	6013      	str	r3, [r2, #0]
 80031dc:	4b67      	ldr	r3, [pc, #412]	; (800337c <HAL_RCC_OscConfig+0x330>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a66      	ldr	r2, [pc, #408]	; (800337c <HAL_RCC_OscConfig+0x330>)
 80031e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031e6:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80031e8:	4b64      	ldr	r3, [pc, #400]	; (800337c <HAL_RCC_OscConfig+0x330>)
 80031ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ec:	f023 020f 	bic.w	r2, r3, #15
 80031f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031f4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	495f      	ldr	r1, [pc, #380]	; (800337c <HAL_RCC_OscConfig+0x330>)
 80031fe:	4313      	orrs	r3, r2
 8003200:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003202:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003206:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d059      	beq.n	80032c6 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003212:	f7fe fd13 	bl	8001c3c <HAL_GetTick>
 8003216:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800321a:	e00a      	b.n	8003232 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800321c:	f7fe fd0e 	bl	8001c3c <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	2b64      	cmp	r3, #100	; 0x64
 800322a:	d902      	bls.n	8003232 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800322c:	2303      	movs	r3, #3
 800322e:	f000 bf43 	b.w	80040b8 <HAL_RCC_OscConfig+0x106c>
 8003232:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003236:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800323a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800323e:	fa93 f3a3 	rbit	r3, r3
 8003242:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8003246:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800324a:	fab3 f383 	clz	r3, r3
 800324e:	b2db      	uxtb	r3, r3
 8003250:	095b      	lsrs	r3, r3, #5
 8003252:	b2db      	uxtb	r3, r3
 8003254:	f043 0301 	orr.w	r3, r3, #1
 8003258:	b2db      	uxtb	r3, r3
 800325a:	2b01      	cmp	r3, #1
 800325c:	d102      	bne.n	8003264 <HAL_RCC_OscConfig+0x218>
 800325e:	4b47      	ldr	r3, [pc, #284]	; (800337c <HAL_RCC_OscConfig+0x330>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	e015      	b.n	8003290 <HAL_RCC_OscConfig+0x244>
 8003264:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003268:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800326c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003270:	fa93 f3a3 	rbit	r3, r3
 8003274:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003278:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800327c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003280:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003284:	fa93 f3a3 	rbit	r3, r3
 8003288:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800328c:	4b3b      	ldr	r3, [pc, #236]	; (800337c <HAL_RCC_OscConfig+0x330>)
 800328e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003290:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003294:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8003298:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800329c:	fa92 f2a2 	rbit	r2, r2
 80032a0:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80032a4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80032a8:	fab2 f282 	clz	r2, r2
 80032ac:	b2d2      	uxtb	r2, r2
 80032ae:	f042 0220 	orr.w	r2, r2, #32
 80032b2:	b2d2      	uxtb	r2, r2
 80032b4:	f002 021f 	and.w	r2, r2, #31
 80032b8:	2101      	movs	r1, #1
 80032ba:	fa01 f202 	lsl.w	r2, r1, r2
 80032be:	4013      	ands	r3, r2
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d0ab      	beq.n	800321c <HAL_RCC_OscConfig+0x1d0>
 80032c4:	e05d      	b.n	8003382 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c6:	f7fe fcb9 	bl	8001c3c <HAL_GetTick>
 80032ca:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032ce:	e00a      	b.n	80032e6 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032d0:	f7fe fcb4 	bl	8001c3c <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	2b64      	cmp	r3, #100	; 0x64
 80032de:	d902      	bls.n	80032e6 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80032e0:	2303      	movs	r3, #3
 80032e2:	f000 bee9 	b.w	80040b8 <HAL_RCC_OscConfig+0x106c>
 80032e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032ea:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ee:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80032f2:	fa93 f3a3 	rbit	r3, r3
 80032f6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80032fa:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032fe:	fab3 f383 	clz	r3, r3
 8003302:	b2db      	uxtb	r3, r3
 8003304:	095b      	lsrs	r3, r3, #5
 8003306:	b2db      	uxtb	r3, r3
 8003308:	f043 0301 	orr.w	r3, r3, #1
 800330c:	b2db      	uxtb	r3, r3
 800330e:	2b01      	cmp	r3, #1
 8003310:	d102      	bne.n	8003318 <HAL_RCC_OscConfig+0x2cc>
 8003312:	4b1a      	ldr	r3, [pc, #104]	; (800337c <HAL_RCC_OscConfig+0x330>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	e015      	b.n	8003344 <HAL_RCC_OscConfig+0x2f8>
 8003318:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800331c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003320:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003324:	fa93 f3a3 	rbit	r3, r3
 8003328:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800332c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003330:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003334:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003338:	fa93 f3a3 	rbit	r3, r3
 800333c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003340:	4b0e      	ldr	r3, [pc, #56]	; (800337c <HAL_RCC_OscConfig+0x330>)
 8003342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003344:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003348:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800334c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003350:	fa92 f2a2 	rbit	r2, r2
 8003354:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8003358:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800335c:	fab2 f282 	clz	r2, r2
 8003360:	b2d2      	uxtb	r2, r2
 8003362:	f042 0220 	orr.w	r2, r2, #32
 8003366:	b2d2      	uxtb	r2, r2
 8003368:	f002 021f 	and.w	r2, r2, #31
 800336c:	2101      	movs	r1, #1
 800336e:	fa01 f202 	lsl.w	r2, r1, r2
 8003372:	4013      	ands	r3, r2
 8003374:	2b00      	cmp	r3, #0
 8003376:	d1ab      	bne.n	80032d0 <HAL_RCC_OscConfig+0x284>
 8003378:	e003      	b.n	8003382 <HAL_RCC_OscConfig+0x336>
 800337a:	bf00      	nop
 800337c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003380:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003382:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003386:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0302 	and.w	r3, r3, #2
 8003392:	2b00      	cmp	r3, #0
 8003394:	f000 817d 	beq.w	8003692 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003398:	4ba6      	ldr	r3, [pc, #664]	; (8003634 <HAL_RCC_OscConfig+0x5e8>)
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f003 030c 	and.w	r3, r3, #12
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d00b      	beq.n	80033bc <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80033a4:	4ba3      	ldr	r3, [pc, #652]	; (8003634 <HAL_RCC_OscConfig+0x5e8>)
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f003 030c 	and.w	r3, r3, #12
 80033ac:	2b08      	cmp	r3, #8
 80033ae:	d172      	bne.n	8003496 <HAL_RCC_OscConfig+0x44a>
 80033b0:	4ba0      	ldr	r3, [pc, #640]	; (8003634 <HAL_RCC_OscConfig+0x5e8>)
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d16c      	bne.n	8003496 <HAL_RCC_OscConfig+0x44a>
 80033bc:	2302      	movs	r3, #2
 80033be:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033c2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80033c6:	fa93 f3a3 	rbit	r3, r3
 80033ca:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80033ce:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033d2:	fab3 f383 	clz	r3, r3
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	095b      	lsrs	r3, r3, #5
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	f043 0301 	orr.w	r3, r3, #1
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d102      	bne.n	80033ec <HAL_RCC_OscConfig+0x3a0>
 80033e6:	4b93      	ldr	r3, [pc, #588]	; (8003634 <HAL_RCC_OscConfig+0x5e8>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	e013      	b.n	8003414 <HAL_RCC_OscConfig+0x3c8>
 80033ec:	2302      	movs	r3, #2
 80033ee:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f2:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80033f6:	fa93 f3a3 	rbit	r3, r3
 80033fa:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80033fe:	2302      	movs	r3, #2
 8003400:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003404:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003408:	fa93 f3a3 	rbit	r3, r3
 800340c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003410:	4b88      	ldr	r3, [pc, #544]	; (8003634 <HAL_RCC_OscConfig+0x5e8>)
 8003412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003414:	2202      	movs	r2, #2
 8003416:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800341a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800341e:	fa92 f2a2 	rbit	r2, r2
 8003422:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003426:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800342a:	fab2 f282 	clz	r2, r2
 800342e:	b2d2      	uxtb	r2, r2
 8003430:	f042 0220 	orr.w	r2, r2, #32
 8003434:	b2d2      	uxtb	r2, r2
 8003436:	f002 021f 	and.w	r2, r2, #31
 800343a:	2101      	movs	r1, #1
 800343c:	fa01 f202 	lsl.w	r2, r1, r2
 8003440:	4013      	ands	r3, r2
 8003442:	2b00      	cmp	r3, #0
 8003444:	d00a      	beq.n	800345c <HAL_RCC_OscConfig+0x410>
 8003446:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800344a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	691b      	ldr	r3, [r3, #16]
 8003452:	2b01      	cmp	r3, #1
 8003454:	d002      	beq.n	800345c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	f000 be2e 	b.w	80040b8 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800345c:	4b75      	ldr	r3, [pc, #468]	; (8003634 <HAL_RCC_OscConfig+0x5e8>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003464:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003468:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	695b      	ldr	r3, [r3, #20]
 8003470:	21f8      	movs	r1, #248	; 0xf8
 8003472:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003476:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800347a:	fa91 f1a1 	rbit	r1, r1
 800347e:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003482:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8003486:	fab1 f181 	clz	r1, r1
 800348a:	b2c9      	uxtb	r1, r1
 800348c:	408b      	lsls	r3, r1
 800348e:	4969      	ldr	r1, [pc, #420]	; (8003634 <HAL_RCC_OscConfig+0x5e8>)
 8003490:	4313      	orrs	r3, r2
 8003492:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003494:	e0fd      	b.n	8003692 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003496:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800349a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	691b      	ldr	r3, [r3, #16]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	f000 8088 	beq.w	80035b8 <HAL_RCC_OscConfig+0x56c>
 80034a8:	2301      	movs	r3, #1
 80034aa:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ae:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80034b2:	fa93 f3a3 	rbit	r3, r3
 80034b6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80034ba:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034be:	fab3 f383 	clz	r3, r3
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80034c8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	461a      	mov	r2, r3
 80034d0:	2301      	movs	r3, #1
 80034d2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034d4:	f7fe fbb2 	bl	8001c3c <HAL_GetTick>
 80034d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034dc:	e00a      	b.n	80034f4 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034de:	f7fe fbad 	bl	8001c3c <HAL_GetTick>
 80034e2:	4602      	mov	r2, r0
 80034e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d902      	bls.n	80034f4 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	f000 bde2 	b.w	80040b8 <HAL_RCC_OscConfig+0x106c>
 80034f4:	2302      	movs	r3, #2
 80034f6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034fa:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80034fe:	fa93 f3a3 	rbit	r3, r3
 8003502:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003506:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800350a:	fab3 f383 	clz	r3, r3
 800350e:	b2db      	uxtb	r3, r3
 8003510:	095b      	lsrs	r3, r3, #5
 8003512:	b2db      	uxtb	r3, r3
 8003514:	f043 0301 	orr.w	r3, r3, #1
 8003518:	b2db      	uxtb	r3, r3
 800351a:	2b01      	cmp	r3, #1
 800351c:	d102      	bne.n	8003524 <HAL_RCC_OscConfig+0x4d8>
 800351e:	4b45      	ldr	r3, [pc, #276]	; (8003634 <HAL_RCC_OscConfig+0x5e8>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	e013      	b.n	800354c <HAL_RCC_OscConfig+0x500>
 8003524:	2302      	movs	r3, #2
 8003526:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800352a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800352e:	fa93 f3a3 	rbit	r3, r3
 8003532:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003536:	2302      	movs	r3, #2
 8003538:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800353c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003540:	fa93 f3a3 	rbit	r3, r3
 8003544:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003548:	4b3a      	ldr	r3, [pc, #232]	; (8003634 <HAL_RCC_OscConfig+0x5e8>)
 800354a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354c:	2202      	movs	r2, #2
 800354e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003552:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003556:	fa92 f2a2 	rbit	r2, r2
 800355a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800355e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003562:	fab2 f282 	clz	r2, r2
 8003566:	b2d2      	uxtb	r2, r2
 8003568:	f042 0220 	orr.w	r2, r2, #32
 800356c:	b2d2      	uxtb	r2, r2
 800356e:	f002 021f 	and.w	r2, r2, #31
 8003572:	2101      	movs	r1, #1
 8003574:	fa01 f202 	lsl.w	r2, r1, r2
 8003578:	4013      	ands	r3, r2
 800357a:	2b00      	cmp	r3, #0
 800357c:	d0af      	beq.n	80034de <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800357e:	4b2d      	ldr	r3, [pc, #180]	; (8003634 <HAL_RCC_OscConfig+0x5e8>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003586:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800358a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	695b      	ldr	r3, [r3, #20]
 8003592:	21f8      	movs	r1, #248	; 0xf8
 8003594:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003598:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800359c:	fa91 f1a1 	rbit	r1, r1
 80035a0:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80035a4:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80035a8:	fab1 f181 	clz	r1, r1
 80035ac:	b2c9      	uxtb	r1, r1
 80035ae:	408b      	lsls	r3, r1
 80035b0:	4920      	ldr	r1, [pc, #128]	; (8003634 <HAL_RCC_OscConfig+0x5e8>)
 80035b2:	4313      	orrs	r3, r2
 80035b4:	600b      	str	r3, [r1, #0]
 80035b6:	e06c      	b.n	8003692 <HAL_RCC_OscConfig+0x646>
 80035b8:	2301      	movs	r3, #1
 80035ba:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035be:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80035c2:	fa93 f3a3 	rbit	r3, r3
 80035c6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80035ca:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035ce:	fab3 f383 	clz	r3, r3
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80035d8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	461a      	mov	r2, r3
 80035e0:	2300      	movs	r3, #0
 80035e2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035e4:	f7fe fb2a 	bl	8001c3c <HAL_GetTick>
 80035e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035ec:	e00a      	b.n	8003604 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035ee:	f7fe fb25 	bl	8001c3c <HAL_GetTick>
 80035f2:	4602      	mov	r2, r0
 80035f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d902      	bls.n	8003604 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	f000 bd5a 	b.w	80040b8 <HAL_RCC_OscConfig+0x106c>
 8003604:	2302      	movs	r3, #2
 8003606:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800360a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800360e:	fa93 f3a3 	rbit	r3, r3
 8003612:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003616:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800361a:	fab3 f383 	clz	r3, r3
 800361e:	b2db      	uxtb	r3, r3
 8003620:	095b      	lsrs	r3, r3, #5
 8003622:	b2db      	uxtb	r3, r3
 8003624:	f043 0301 	orr.w	r3, r3, #1
 8003628:	b2db      	uxtb	r3, r3
 800362a:	2b01      	cmp	r3, #1
 800362c:	d104      	bne.n	8003638 <HAL_RCC_OscConfig+0x5ec>
 800362e:	4b01      	ldr	r3, [pc, #4]	; (8003634 <HAL_RCC_OscConfig+0x5e8>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	e015      	b.n	8003660 <HAL_RCC_OscConfig+0x614>
 8003634:	40021000 	.word	0x40021000
 8003638:	2302      	movs	r3, #2
 800363a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800363e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003642:	fa93 f3a3 	rbit	r3, r3
 8003646:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800364a:	2302      	movs	r3, #2
 800364c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003650:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003654:	fa93 f3a3 	rbit	r3, r3
 8003658:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800365c:	4bc8      	ldr	r3, [pc, #800]	; (8003980 <HAL_RCC_OscConfig+0x934>)
 800365e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003660:	2202      	movs	r2, #2
 8003662:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003666:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800366a:	fa92 f2a2 	rbit	r2, r2
 800366e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003672:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003676:	fab2 f282 	clz	r2, r2
 800367a:	b2d2      	uxtb	r2, r2
 800367c:	f042 0220 	orr.w	r2, r2, #32
 8003680:	b2d2      	uxtb	r2, r2
 8003682:	f002 021f 	and.w	r2, r2, #31
 8003686:	2101      	movs	r1, #1
 8003688:	fa01 f202 	lsl.w	r2, r1, r2
 800368c:	4013      	ands	r3, r2
 800368e:	2b00      	cmp	r3, #0
 8003690:	d1ad      	bne.n	80035ee <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003692:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003696:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 0308 	and.w	r3, r3, #8
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	f000 8110 	beq.w	80038c8 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036ac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	699b      	ldr	r3, [r3, #24]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d079      	beq.n	80037ac <HAL_RCC_OscConfig+0x760>
 80036b8:	2301      	movs	r3, #1
 80036ba:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036be:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80036c2:	fa93 f3a3 	rbit	r3, r3
 80036c6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80036ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036ce:	fab3 f383 	clz	r3, r3
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	461a      	mov	r2, r3
 80036d6:	4bab      	ldr	r3, [pc, #684]	; (8003984 <HAL_RCC_OscConfig+0x938>)
 80036d8:	4413      	add	r3, r2
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	461a      	mov	r2, r3
 80036de:	2301      	movs	r3, #1
 80036e0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036e2:	f7fe faab 	bl	8001c3c <HAL_GetTick>
 80036e6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036ea:	e00a      	b.n	8003702 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036ec:	f7fe faa6 	bl	8001c3c <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d902      	bls.n	8003702 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	f000 bcdb 	b.w	80040b8 <HAL_RCC_OscConfig+0x106c>
 8003702:	2302      	movs	r3, #2
 8003704:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003708:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800370c:	fa93 f3a3 	rbit	r3, r3
 8003710:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003714:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003718:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800371c:	2202      	movs	r2, #2
 800371e:	601a      	str	r2, [r3, #0]
 8003720:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003724:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	fa93 f2a3 	rbit	r2, r3
 800372e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003732:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003736:	601a      	str	r2, [r3, #0]
 8003738:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800373c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003740:	2202      	movs	r2, #2
 8003742:	601a      	str	r2, [r3, #0]
 8003744:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003748:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	fa93 f2a3 	rbit	r2, r3
 8003752:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003756:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800375a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800375c:	4b88      	ldr	r3, [pc, #544]	; (8003980 <HAL_RCC_OscConfig+0x934>)
 800375e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003760:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003764:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003768:	2102      	movs	r1, #2
 800376a:	6019      	str	r1, [r3, #0]
 800376c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003770:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	fa93 f1a3 	rbit	r1, r3
 800377a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800377e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003782:	6019      	str	r1, [r3, #0]
  return result;
 8003784:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003788:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	fab3 f383 	clz	r3, r3
 8003792:	b2db      	uxtb	r3, r3
 8003794:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003798:	b2db      	uxtb	r3, r3
 800379a:	f003 031f 	and.w	r3, r3, #31
 800379e:	2101      	movs	r1, #1
 80037a0:	fa01 f303 	lsl.w	r3, r1, r3
 80037a4:	4013      	ands	r3, r2
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d0a0      	beq.n	80036ec <HAL_RCC_OscConfig+0x6a0>
 80037aa:	e08d      	b.n	80038c8 <HAL_RCC_OscConfig+0x87c>
 80037ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037b0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80037b4:	2201      	movs	r2, #1
 80037b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037bc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	fa93 f2a3 	rbit	r2, r3
 80037c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037ca:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80037ce:	601a      	str	r2, [r3, #0]
  return result;
 80037d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037d4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80037d8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037da:	fab3 f383 	clz	r3, r3
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	461a      	mov	r2, r3
 80037e2:	4b68      	ldr	r3, [pc, #416]	; (8003984 <HAL_RCC_OscConfig+0x938>)
 80037e4:	4413      	add	r3, r2
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	461a      	mov	r2, r3
 80037ea:	2300      	movs	r3, #0
 80037ec:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037ee:	f7fe fa25 	bl	8001c3c <HAL_GetTick>
 80037f2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037f6:	e00a      	b.n	800380e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037f8:	f7fe fa20 	bl	8001c3c <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	2b02      	cmp	r3, #2
 8003806:	d902      	bls.n	800380e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003808:	2303      	movs	r3, #3
 800380a:	f000 bc55 	b.w	80040b8 <HAL_RCC_OscConfig+0x106c>
 800380e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003812:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003816:	2202      	movs	r2, #2
 8003818:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800381a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800381e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	fa93 f2a3 	rbit	r2, r3
 8003828:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800382c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003830:	601a      	str	r2, [r3, #0]
 8003832:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003836:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800383a:	2202      	movs	r2, #2
 800383c:	601a      	str	r2, [r3, #0]
 800383e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003842:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	fa93 f2a3 	rbit	r2, r3
 800384c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003850:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003854:	601a      	str	r2, [r3, #0]
 8003856:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800385a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800385e:	2202      	movs	r2, #2
 8003860:	601a      	str	r2, [r3, #0]
 8003862:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003866:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	fa93 f2a3 	rbit	r2, r3
 8003870:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003874:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003878:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800387a:	4b41      	ldr	r3, [pc, #260]	; (8003980 <HAL_RCC_OscConfig+0x934>)
 800387c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800387e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003882:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003886:	2102      	movs	r1, #2
 8003888:	6019      	str	r1, [r3, #0]
 800388a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800388e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	fa93 f1a3 	rbit	r1, r3
 8003898:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800389c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80038a0:	6019      	str	r1, [r3, #0]
  return result;
 80038a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038a6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	fab3 f383 	clz	r3, r3
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	f003 031f 	and.w	r3, r3, #31
 80038bc:	2101      	movs	r1, #1
 80038be:	fa01 f303 	lsl.w	r3, r1, r3
 80038c2:	4013      	ands	r3, r2
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d197      	bne.n	80037f8 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038cc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0304 	and.w	r3, r3, #4
 80038d8:	2b00      	cmp	r3, #0
 80038da:	f000 81a1 	beq.w	8003c20 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038de:	2300      	movs	r3, #0
 80038e0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038e4:	4b26      	ldr	r3, [pc, #152]	; (8003980 <HAL_RCC_OscConfig+0x934>)
 80038e6:	69db      	ldr	r3, [r3, #28]
 80038e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d116      	bne.n	800391e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038f0:	4b23      	ldr	r3, [pc, #140]	; (8003980 <HAL_RCC_OscConfig+0x934>)
 80038f2:	69db      	ldr	r3, [r3, #28]
 80038f4:	4a22      	ldr	r2, [pc, #136]	; (8003980 <HAL_RCC_OscConfig+0x934>)
 80038f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038fa:	61d3      	str	r3, [r2, #28]
 80038fc:	4b20      	ldr	r3, [pc, #128]	; (8003980 <HAL_RCC_OscConfig+0x934>)
 80038fe:	69db      	ldr	r3, [r3, #28]
 8003900:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003904:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003908:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800390c:	601a      	str	r2, [r3, #0]
 800390e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003912:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003916:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003918:	2301      	movs	r3, #1
 800391a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800391e:	4b1a      	ldr	r3, [pc, #104]	; (8003988 <HAL_RCC_OscConfig+0x93c>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003926:	2b00      	cmp	r3, #0
 8003928:	d11a      	bne.n	8003960 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800392a:	4b17      	ldr	r3, [pc, #92]	; (8003988 <HAL_RCC_OscConfig+0x93c>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a16      	ldr	r2, [pc, #88]	; (8003988 <HAL_RCC_OscConfig+0x93c>)
 8003930:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003934:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003936:	f7fe f981 	bl	8001c3c <HAL_GetTick>
 800393a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800393e:	e009      	b.n	8003954 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003940:	f7fe f97c 	bl	8001c3c <HAL_GetTick>
 8003944:	4602      	mov	r2, r0
 8003946:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800394a:	1ad3      	subs	r3, r2, r3
 800394c:	2b64      	cmp	r3, #100	; 0x64
 800394e:	d901      	bls.n	8003954 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003950:	2303      	movs	r3, #3
 8003952:	e3b1      	b.n	80040b8 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003954:	4b0c      	ldr	r3, [pc, #48]	; (8003988 <HAL_RCC_OscConfig+0x93c>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800395c:	2b00      	cmp	r3, #0
 800395e:	d0ef      	beq.n	8003940 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003960:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003964:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	2b01      	cmp	r3, #1
 800396e:	d10d      	bne.n	800398c <HAL_RCC_OscConfig+0x940>
 8003970:	4b03      	ldr	r3, [pc, #12]	; (8003980 <HAL_RCC_OscConfig+0x934>)
 8003972:	6a1b      	ldr	r3, [r3, #32]
 8003974:	4a02      	ldr	r2, [pc, #8]	; (8003980 <HAL_RCC_OscConfig+0x934>)
 8003976:	f043 0301 	orr.w	r3, r3, #1
 800397a:	6213      	str	r3, [r2, #32]
 800397c:	e03c      	b.n	80039f8 <HAL_RCC_OscConfig+0x9ac>
 800397e:	bf00      	nop
 8003980:	40021000 	.word	0x40021000
 8003984:	10908120 	.word	0x10908120
 8003988:	40007000 	.word	0x40007000
 800398c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003990:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d10c      	bne.n	80039b6 <HAL_RCC_OscConfig+0x96a>
 800399c:	4bc1      	ldr	r3, [pc, #772]	; (8003ca4 <HAL_RCC_OscConfig+0xc58>)
 800399e:	6a1b      	ldr	r3, [r3, #32]
 80039a0:	4ac0      	ldr	r2, [pc, #768]	; (8003ca4 <HAL_RCC_OscConfig+0xc58>)
 80039a2:	f023 0301 	bic.w	r3, r3, #1
 80039a6:	6213      	str	r3, [r2, #32]
 80039a8:	4bbe      	ldr	r3, [pc, #760]	; (8003ca4 <HAL_RCC_OscConfig+0xc58>)
 80039aa:	6a1b      	ldr	r3, [r3, #32]
 80039ac:	4abd      	ldr	r2, [pc, #756]	; (8003ca4 <HAL_RCC_OscConfig+0xc58>)
 80039ae:	f023 0304 	bic.w	r3, r3, #4
 80039b2:	6213      	str	r3, [r2, #32]
 80039b4:	e020      	b.n	80039f8 <HAL_RCC_OscConfig+0x9ac>
 80039b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	2b05      	cmp	r3, #5
 80039c4:	d10c      	bne.n	80039e0 <HAL_RCC_OscConfig+0x994>
 80039c6:	4bb7      	ldr	r3, [pc, #732]	; (8003ca4 <HAL_RCC_OscConfig+0xc58>)
 80039c8:	6a1b      	ldr	r3, [r3, #32]
 80039ca:	4ab6      	ldr	r2, [pc, #728]	; (8003ca4 <HAL_RCC_OscConfig+0xc58>)
 80039cc:	f043 0304 	orr.w	r3, r3, #4
 80039d0:	6213      	str	r3, [r2, #32]
 80039d2:	4bb4      	ldr	r3, [pc, #720]	; (8003ca4 <HAL_RCC_OscConfig+0xc58>)
 80039d4:	6a1b      	ldr	r3, [r3, #32]
 80039d6:	4ab3      	ldr	r2, [pc, #716]	; (8003ca4 <HAL_RCC_OscConfig+0xc58>)
 80039d8:	f043 0301 	orr.w	r3, r3, #1
 80039dc:	6213      	str	r3, [r2, #32]
 80039de:	e00b      	b.n	80039f8 <HAL_RCC_OscConfig+0x9ac>
 80039e0:	4bb0      	ldr	r3, [pc, #704]	; (8003ca4 <HAL_RCC_OscConfig+0xc58>)
 80039e2:	6a1b      	ldr	r3, [r3, #32]
 80039e4:	4aaf      	ldr	r2, [pc, #700]	; (8003ca4 <HAL_RCC_OscConfig+0xc58>)
 80039e6:	f023 0301 	bic.w	r3, r3, #1
 80039ea:	6213      	str	r3, [r2, #32]
 80039ec:	4bad      	ldr	r3, [pc, #692]	; (8003ca4 <HAL_RCC_OscConfig+0xc58>)
 80039ee:	6a1b      	ldr	r3, [r3, #32]
 80039f0:	4aac      	ldr	r2, [pc, #688]	; (8003ca4 <HAL_RCC_OscConfig+0xc58>)
 80039f2:	f023 0304 	bic.w	r3, r3, #4
 80039f6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80039f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039fc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	f000 8081 	beq.w	8003b0c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a0a:	f7fe f917 	bl	8001c3c <HAL_GetTick>
 8003a0e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a12:	e00b      	b.n	8003a2c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a14:	f7fe f912 	bl	8001c3c <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a1e:	1ad3      	subs	r3, r2, r3
 8003a20:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d901      	bls.n	8003a2c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003a28:	2303      	movs	r3, #3
 8003a2a:	e345      	b.n	80040b8 <HAL_RCC_OscConfig+0x106c>
 8003a2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a30:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003a34:	2202      	movs	r2, #2
 8003a36:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a3c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	fa93 f2a3 	rbit	r2, r3
 8003a46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a4a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003a4e:	601a      	str	r2, [r3, #0]
 8003a50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a54:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003a58:	2202      	movs	r2, #2
 8003a5a:	601a      	str	r2, [r3, #0]
 8003a5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a60:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	fa93 f2a3 	rbit	r2, r3
 8003a6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a6e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003a72:	601a      	str	r2, [r3, #0]
  return result;
 8003a74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a78:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003a7c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a7e:	fab3 f383 	clz	r3, r3
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	095b      	lsrs	r3, r3, #5
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	f043 0302 	orr.w	r3, r3, #2
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d102      	bne.n	8003a98 <HAL_RCC_OscConfig+0xa4c>
 8003a92:	4b84      	ldr	r3, [pc, #528]	; (8003ca4 <HAL_RCC_OscConfig+0xc58>)
 8003a94:	6a1b      	ldr	r3, [r3, #32]
 8003a96:	e013      	b.n	8003ac0 <HAL_RCC_OscConfig+0xa74>
 8003a98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a9c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003aa0:	2202      	movs	r2, #2
 8003aa2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aa4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aa8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	fa93 f2a3 	rbit	r2, r3
 8003ab2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ab6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003aba:	601a      	str	r2, [r3, #0]
 8003abc:	4b79      	ldr	r3, [pc, #484]	; (8003ca4 <HAL_RCC_OscConfig+0xc58>)
 8003abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ac4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003ac8:	2102      	movs	r1, #2
 8003aca:	6011      	str	r1, [r2, #0]
 8003acc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ad0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003ad4:	6812      	ldr	r2, [r2, #0]
 8003ad6:	fa92 f1a2 	rbit	r1, r2
 8003ada:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ade:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003ae2:	6011      	str	r1, [r2, #0]
  return result;
 8003ae4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ae8:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003aec:	6812      	ldr	r2, [r2, #0]
 8003aee:	fab2 f282 	clz	r2, r2
 8003af2:	b2d2      	uxtb	r2, r2
 8003af4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003af8:	b2d2      	uxtb	r2, r2
 8003afa:	f002 021f 	and.w	r2, r2, #31
 8003afe:	2101      	movs	r1, #1
 8003b00:	fa01 f202 	lsl.w	r2, r1, r2
 8003b04:	4013      	ands	r3, r2
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d084      	beq.n	8003a14 <HAL_RCC_OscConfig+0x9c8>
 8003b0a:	e07f      	b.n	8003c0c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b0c:	f7fe f896 	bl	8001c3c <HAL_GetTick>
 8003b10:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b14:	e00b      	b.n	8003b2e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b16:	f7fe f891 	bl	8001c3c <HAL_GetTick>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d901      	bls.n	8003b2e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e2c4      	b.n	80040b8 <HAL_RCC_OscConfig+0x106c>
 8003b2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b32:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003b36:	2202      	movs	r2, #2
 8003b38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b3e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	fa93 f2a3 	rbit	r2, r3
 8003b48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b4c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003b50:	601a      	str	r2, [r3, #0]
 8003b52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b56:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003b5a:	2202      	movs	r2, #2
 8003b5c:	601a      	str	r2, [r3, #0]
 8003b5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b62:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	fa93 f2a3 	rbit	r2, r3
 8003b6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b70:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003b74:	601a      	str	r2, [r3, #0]
  return result;
 8003b76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b7a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003b7e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b80:	fab3 f383 	clz	r3, r3
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	095b      	lsrs	r3, r3, #5
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	f043 0302 	orr.w	r3, r3, #2
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	2b02      	cmp	r3, #2
 8003b92:	d102      	bne.n	8003b9a <HAL_RCC_OscConfig+0xb4e>
 8003b94:	4b43      	ldr	r3, [pc, #268]	; (8003ca4 <HAL_RCC_OscConfig+0xc58>)
 8003b96:	6a1b      	ldr	r3, [r3, #32]
 8003b98:	e013      	b.n	8003bc2 <HAL_RCC_OscConfig+0xb76>
 8003b9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b9e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003ba2:	2202      	movs	r2, #2
 8003ba4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ba6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003baa:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	fa93 f2a3 	rbit	r2, r3
 8003bb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bb8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003bbc:	601a      	str	r2, [r3, #0]
 8003bbe:	4b39      	ldr	r3, [pc, #228]	; (8003ca4 <HAL_RCC_OscConfig+0xc58>)
 8003bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003bc6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003bca:	2102      	movs	r1, #2
 8003bcc:	6011      	str	r1, [r2, #0]
 8003bce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003bd2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003bd6:	6812      	ldr	r2, [r2, #0]
 8003bd8:	fa92 f1a2 	rbit	r1, r2
 8003bdc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003be0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003be4:	6011      	str	r1, [r2, #0]
  return result;
 8003be6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003bea:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003bee:	6812      	ldr	r2, [r2, #0]
 8003bf0:	fab2 f282 	clz	r2, r2
 8003bf4:	b2d2      	uxtb	r2, r2
 8003bf6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003bfa:	b2d2      	uxtb	r2, r2
 8003bfc:	f002 021f 	and.w	r2, r2, #31
 8003c00:	2101      	movs	r1, #1
 8003c02:	fa01 f202 	lsl.w	r2, r1, r2
 8003c06:	4013      	ands	r3, r2
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d184      	bne.n	8003b16 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003c0c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d105      	bne.n	8003c20 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c14:	4b23      	ldr	r3, [pc, #140]	; (8003ca4 <HAL_RCC_OscConfig+0xc58>)
 8003c16:	69db      	ldr	r3, [r3, #28]
 8003c18:	4a22      	ldr	r2, [pc, #136]	; (8003ca4 <HAL_RCC_OscConfig+0xc58>)
 8003c1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c1e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c24:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	69db      	ldr	r3, [r3, #28]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	f000 8242 	beq.w	80040b6 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c32:	4b1c      	ldr	r3, [pc, #112]	; (8003ca4 <HAL_RCC_OscConfig+0xc58>)
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	f003 030c 	and.w	r3, r3, #12
 8003c3a:	2b08      	cmp	r3, #8
 8003c3c:	f000 8213 	beq.w	8004066 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c44:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	69db      	ldr	r3, [r3, #28]
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	f040 8162 	bne.w	8003f16 <HAL_RCC_OscConfig+0xeca>
 8003c52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c56:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003c5a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003c5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c64:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	fa93 f2a3 	rbit	r2, r3
 8003c6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c72:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003c76:	601a      	str	r2, [r3, #0]
  return result;
 8003c78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c7c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003c80:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c82:	fab3 f383 	clz	r3, r3
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003c8c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	461a      	mov	r2, r3
 8003c94:	2300      	movs	r3, #0
 8003c96:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c98:	f7fd ffd0 	bl	8001c3c <HAL_GetTick>
 8003c9c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ca0:	e00c      	b.n	8003cbc <HAL_RCC_OscConfig+0xc70>
 8003ca2:	bf00      	nop
 8003ca4:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ca8:	f7fd ffc8 	bl	8001c3c <HAL_GetTick>
 8003cac:	4602      	mov	r2, r0
 8003cae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	2b02      	cmp	r3, #2
 8003cb6:	d901      	bls.n	8003cbc <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003cb8:	2303      	movs	r3, #3
 8003cba:	e1fd      	b.n	80040b8 <HAL_RCC_OscConfig+0x106c>
 8003cbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cc0:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003cc4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003cc8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cce:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	fa93 f2a3 	rbit	r2, r3
 8003cd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cdc:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003ce0:	601a      	str	r2, [r3, #0]
  return result;
 8003ce2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ce6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003cea:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cec:	fab3 f383 	clz	r3, r3
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	095b      	lsrs	r3, r3, #5
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	f043 0301 	orr.w	r3, r3, #1
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d102      	bne.n	8003d06 <HAL_RCC_OscConfig+0xcba>
 8003d00:	4bb0      	ldr	r3, [pc, #704]	; (8003fc4 <HAL_RCC_OscConfig+0xf78>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	e027      	b.n	8003d56 <HAL_RCC_OscConfig+0xd0a>
 8003d06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d0a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003d0e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d18:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	fa93 f2a3 	rbit	r2, r3
 8003d22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d26:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003d2a:	601a      	str	r2, [r3, #0]
 8003d2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d30:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003d34:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d38:	601a      	str	r2, [r3, #0]
 8003d3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d3e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	fa93 f2a3 	rbit	r2, r3
 8003d48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d4c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003d50:	601a      	str	r2, [r3, #0]
 8003d52:	4b9c      	ldr	r3, [pc, #624]	; (8003fc4 <HAL_RCC_OscConfig+0xf78>)
 8003d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d56:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003d5a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003d5e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003d62:	6011      	str	r1, [r2, #0]
 8003d64:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003d68:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003d6c:	6812      	ldr	r2, [r2, #0]
 8003d6e:	fa92 f1a2 	rbit	r1, r2
 8003d72:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003d76:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003d7a:	6011      	str	r1, [r2, #0]
  return result;
 8003d7c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003d80:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003d84:	6812      	ldr	r2, [r2, #0]
 8003d86:	fab2 f282 	clz	r2, r2
 8003d8a:	b2d2      	uxtb	r2, r2
 8003d8c:	f042 0220 	orr.w	r2, r2, #32
 8003d90:	b2d2      	uxtb	r2, r2
 8003d92:	f002 021f 	and.w	r2, r2, #31
 8003d96:	2101      	movs	r1, #1
 8003d98:	fa01 f202 	lsl.w	r2, r1, r2
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d182      	bne.n	8003ca8 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003da2:	4b88      	ldr	r3, [pc, #544]	; (8003fc4 <HAL_RCC_OscConfig+0xf78>)
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003daa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003db6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	6a1b      	ldr	r3, [r3, #32]
 8003dc2:	430b      	orrs	r3, r1
 8003dc4:	497f      	ldr	r1, [pc, #508]	; (8003fc4 <HAL_RCC_OscConfig+0xf78>)
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	604b      	str	r3, [r1, #4]
 8003dca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dce:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003dd2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003dd6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ddc:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	fa93 f2a3 	rbit	r2, r3
 8003de6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dea:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003dee:	601a      	str	r2, [r3, #0]
  return result;
 8003df0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003df4:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003df8:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003dfa:	fab3 f383 	clz	r3, r3
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003e04:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003e08:	009b      	lsls	r3, r3, #2
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e10:	f7fd ff14 	bl	8001c3c <HAL_GetTick>
 8003e14:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e18:	e009      	b.n	8003e2e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e1a:	f7fd ff0f 	bl	8001c3c <HAL_GetTick>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	2b02      	cmp	r3, #2
 8003e28:	d901      	bls.n	8003e2e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	e144      	b.n	80040b8 <HAL_RCC_OscConfig+0x106c>
 8003e2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e32:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003e36:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e3a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e40:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	fa93 f2a3 	rbit	r2, r3
 8003e4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e4e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003e52:	601a      	str	r2, [r3, #0]
  return result;
 8003e54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e58:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003e5c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e5e:	fab3 f383 	clz	r3, r3
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	095b      	lsrs	r3, r3, #5
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	f043 0301 	orr.w	r3, r3, #1
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d102      	bne.n	8003e78 <HAL_RCC_OscConfig+0xe2c>
 8003e72:	4b54      	ldr	r3, [pc, #336]	; (8003fc4 <HAL_RCC_OscConfig+0xf78>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	e027      	b.n	8003ec8 <HAL_RCC_OscConfig+0xe7c>
 8003e78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e7c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003e80:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e8a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	fa93 f2a3 	rbit	r2, r3
 8003e94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e98:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003e9c:	601a      	str	r2, [r3, #0]
 8003e9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ea2:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003ea6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003eaa:	601a      	str	r2, [r3, #0]
 8003eac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003eb0:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	fa93 f2a3 	rbit	r2, r3
 8003eba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ebe:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003ec2:	601a      	str	r2, [r3, #0]
 8003ec4:	4b3f      	ldr	r3, [pc, #252]	; (8003fc4 <HAL_RCC_OscConfig+0xf78>)
 8003ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ecc:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003ed0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003ed4:	6011      	str	r1, [r2, #0]
 8003ed6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003eda:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003ede:	6812      	ldr	r2, [r2, #0]
 8003ee0:	fa92 f1a2 	rbit	r1, r2
 8003ee4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ee8:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003eec:	6011      	str	r1, [r2, #0]
  return result;
 8003eee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ef2:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003ef6:	6812      	ldr	r2, [r2, #0]
 8003ef8:	fab2 f282 	clz	r2, r2
 8003efc:	b2d2      	uxtb	r2, r2
 8003efe:	f042 0220 	orr.w	r2, r2, #32
 8003f02:	b2d2      	uxtb	r2, r2
 8003f04:	f002 021f 	and.w	r2, r2, #31
 8003f08:	2101      	movs	r1, #1
 8003f0a:	fa01 f202 	lsl.w	r2, r1, r2
 8003f0e:	4013      	ands	r3, r2
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d082      	beq.n	8003e1a <HAL_RCC_OscConfig+0xdce>
 8003f14:	e0cf      	b.n	80040b6 <HAL_RCC_OscConfig+0x106a>
 8003f16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f1a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003f1e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003f22:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f28:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	fa93 f2a3 	rbit	r2, r3
 8003f32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f36:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003f3a:	601a      	str	r2, [r3, #0]
  return result;
 8003f3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f40:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003f44:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f46:	fab3 f383 	clz	r3, r3
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003f50:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	461a      	mov	r2, r3
 8003f58:	2300      	movs	r3, #0
 8003f5a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f5c:	f7fd fe6e 	bl	8001c3c <HAL_GetTick>
 8003f60:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f64:	e009      	b.n	8003f7a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f66:	f7fd fe69 	bl	8001c3c <HAL_GetTick>
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	2b02      	cmp	r3, #2
 8003f74:	d901      	bls.n	8003f7a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	e09e      	b.n	80040b8 <HAL_RCC_OscConfig+0x106c>
 8003f7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f7e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003f82:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f8c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	fa93 f2a3 	rbit	r2, r3
 8003f96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f9a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003f9e:	601a      	str	r2, [r3, #0]
  return result;
 8003fa0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fa4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003fa8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003faa:	fab3 f383 	clz	r3, r3
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	095b      	lsrs	r3, r3, #5
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	f043 0301 	orr.w	r3, r3, #1
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d104      	bne.n	8003fc8 <HAL_RCC_OscConfig+0xf7c>
 8003fbe:	4b01      	ldr	r3, [pc, #4]	; (8003fc4 <HAL_RCC_OscConfig+0xf78>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	e029      	b.n	8004018 <HAL_RCC_OscConfig+0xfcc>
 8003fc4:	40021000 	.word	0x40021000
 8003fc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fcc:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003fd0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003fd4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fda:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	fa93 f2a3 	rbit	r2, r3
 8003fe4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fe8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003fec:	601a      	str	r2, [r3, #0]
 8003fee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ff2:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003ff6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ffa:	601a      	str	r2, [r3, #0]
 8003ffc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004000:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	fa93 f2a3 	rbit	r2, r3
 800400a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800400e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004012:	601a      	str	r2, [r3, #0]
 8004014:	4b2b      	ldr	r3, [pc, #172]	; (80040c4 <HAL_RCC_OscConfig+0x1078>)
 8004016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004018:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800401c:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004020:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004024:	6011      	str	r1, [r2, #0]
 8004026:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800402a:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800402e:	6812      	ldr	r2, [r2, #0]
 8004030:	fa92 f1a2 	rbit	r1, r2
 8004034:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004038:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800403c:	6011      	str	r1, [r2, #0]
  return result;
 800403e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004042:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004046:	6812      	ldr	r2, [r2, #0]
 8004048:	fab2 f282 	clz	r2, r2
 800404c:	b2d2      	uxtb	r2, r2
 800404e:	f042 0220 	orr.w	r2, r2, #32
 8004052:	b2d2      	uxtb	r2, r2
 8004054:	f002 021f 	and.w	r2, r2, #31
 8004058:	2101      	movs	r1, #1
 800405a:	fa01 f202 	lsl.w	r2, r1, r2
 800405e:	4013      	ands	r3, r2
 8004060:	2b00      	cmp	r3, #0
 8004062:	d180      	bne.n	8003f66 <HAL_RCC_OscConfig+0xf1a>
 8004064:	e027      	b.n	80040b6 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004066:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800406a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	69db      	ldr	r3, [r3, #28]
 8004072:	2b01      	cmp	r3, #1
 8004074:	d101      	bne.n	800407a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e01e      	b.n	80040b8 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800407a:	4b12      	ldr	r3, [pc, #72]	; (80040c4 <HAL_RCC_OscConfig+0x1078>)
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004082:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004086:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800408a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800408e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	6a1b      	ldr	r3, [r3, #32]
 8004096:	429a      	cmp	r2, r3
 8004098:	d10b      	bne.n	80040b2 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800409a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800409e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80040a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d001      	beq.n	80040b6 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e000      	b.n	80040b8 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80040b6:	2300      	movs	r3, #0
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	40021000 	.word	0x40021000

080040c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b09e      	sub	sp, #120	; 0x78
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80040d2:	2300      	movs	r3, #0
 80040d4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d101      	bne.n	80040e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	e162      	b.n	80043a6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040e0:	4b90      	ldr	r3, [pc, #576]	; (8004324 <HAL_RCC_ClockConfig+0x25c>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 0307 	and.w	r3, r3, #7
 80040e8:	683a      	ldr	r2, [r7, #0]
 80040ea:	429a      	cmp	r2, r3
 80040ec:	d910      	bls.n	8004110 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040ee:	4b8d      	ldr	r3, [pc, #564]	; (8004324 <HAL_RCC_ClockConfig+0x25c>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f023 0207 	bic.w	r2, r3, #7
 80040f6:	498b      	ldr	r1, [pc, #556]	; (8004324 <HAL_RCC_ClockConfig+0x25c>)
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040fe:	4b89      	ldr	r3, [pc, #548]	; (8004324 <HAL_RCC_ClockConfig+0x25c>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 0307 	and.w	r3, r3, #7
 8004106:	683a      	ldr	r2, [r7, #0]
 8004108:	429a      	cmp	r2, r3
 800410a:	d001      	beq.n	8004110 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	e14a      	b.n	80043a6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 0302 	and.w	r3, r3, #2
 8004118:	2b00      	cmp	r3, #0
 800411a:	d008      	beq.n	800412e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800411c:	4b82      	ldr	r3, [pc, #520]	; (8004328 <HAL_RCC_ClockConfig+0x260>)
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	497f      	ldr	r1, [pc, #508]	; (8004328 <HAL_RCC_ClockConfig+0x260>)
 800412a:	4313      	orrs	r3, r2
 800412c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 0301 	and.w	r3, r3, #1
 8004136:	2b00      	cmp	r3, #0
 8004138:	f000 80dc 	beq.w	80042f4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	2b01      	cmp	r3, #1
 8004142:	d13c      	bne.n	80041be <HAL_RCC_ClockConfig+0xf6>
 8004144:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004148:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800414a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800414c:	fa93 f3a3 	rbit	r3, r3
 8004150:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004152:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004154:	fab3 f383 	clz	r3, r3
 8004158:	b2db      	uxtb	r3, r3
 800415a:	095b      	lsrs	r3, r3, #5
 800415c:	b2db      	uxtb	r3, r3
 800415e:	f043 0301 	orr.w	r3, r3, #1
 8004162:	b2db      	uxtb	r3, r3
 8004164:	2b01      	cmp	r3, #1
 8004166:	d102      	bne.n	800416e <HAL_RCC_ClockConfig+0xa6>
 8004168:	4b6f      	ldr	r3, [pc, #444]	; (8004328 <HAL_RCC_ClockConfig+0x260>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	e00f      	b.n	800418e <HAL_RCC_ClockConfig+0xc6>
 800416e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004172:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004174:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004176:	fa93 f3a3 	rbit	r3, r3
 800417a:	667b      	str	r3, [r7, #100]	; 0x64
 800417c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004180:	663b      	str	r3, [r7, #96]	; 0x60
 8004182:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004184:	fa93 f3a3 	rbit	r3, r3
 8004188:	65fb      	str	r3, [r7, #92]	; 0x5c
 800418a:	4b67      	ldr	r3, [pc, #412]	; (8004328 <HAL_RCC_ClockConfig+0x260>)
 800418c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004192:	65ba      	str	r2, [r7, #88]	; 0x58
 8004194:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004196:	fa92 f2a2 	rbit	r2, r2
 800419a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800419c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800419e:	fab2 f282 	clz	r2, r2
 80041a2:	b2d2      	uxtb	r2, r2
 80041a4:	f042 0220 	orr.w	r2, r2, #32
 80041a8:	b2d2      	uxtb	r2, r2
 80041aa:	f002 021f 	and.w	r2, r2, #31
 80041ae:	2101      	movs	r1, #1
 80041b0:	fa01 f202 	lsl.w	r2, r1, r2
 80041b4:	4013      	ands	r3, r2
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d17b      	bne.n	80042b2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e0f3      	b.n	80043a6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	2b02      	cmp	r3, #2
 80041c4:	d13c      	bne.n	8004240 <HAL_RCC_ClockConfig+0x178>
 80041c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80041ca:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041ce:	fa93 f3a3 	rbit	r3, r3
 80041d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80041d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041d6:	fab3 f383 	clz	r3, r3
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	095b      	lsrs	r3, r3, #5
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	f043 0301 	orr.w	r3, r3, #1
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d102      	bne.n	80041f0 <HAL_RCC_ClockConfig+0x128>
 80041ea:	4b4f      	ldr	r3, [pc, #316]	; (8004328 <HAL_RCC_ClockConfig+0x260>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	e00f      	b.n	8004210 <HAL_RCC_ClockConfig+0x148>
 80041f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80041f4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041f8:	fa93 f3a3 	rbit	r3, r3
 80041fc:	647b      	str	r3, [r7, #68]	; 0x44
 80041fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004202:	643b      	str	r3, [r7, #64]	; 0x40
 8004204:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004206:	fa93 f3a3 	rbit	r3, r3
 800420a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800420c:	4b46      	ldr	r3, [pc, #280]	; (8004328 <HAL_RCC_ClockConfig+0x260>)
 800420e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004210:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004214:	63ba      	str	r2, [r7, #56]	; 0x38
 8004216:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004218:	fa92 f2a2 	rbit	r2, r2
 800421c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800421e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004220:	fab2 f282 	clz	r2, r2
 8004224:	b2d2      	uxtb	r2, r2
 8004226:	f042 0220 	orr.w	r2, r2, #32
 800422a:	b2d2      	uxtb	r2, r2
 800422c:	f002 021f 	and.w	r2, r2, #31
 8004230:	2101      	movs	r1, #1
 8004232:	fa01 f202 	lsl.w	r2, r1, r2
 8004236:	4013      	ands	r3, r2
 8004238:	2b00      	cmp	r3, #0
 800423a:	d13a      	bne.n	80042b2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e0b2      	b.n	80043a6 <HAL_RCC_ClockConfig+0x2de>
 8004240:	2302      	movs	r3, #2
 8004242:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004246:	fa93 f3a3 	rbit	r3, r3
 800424a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800424c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800424e:	fab3 f383 	clz	r3, r3
 8004252:	b2db      	uxtb	r3, r3
 8004254:	095b      	lsrs	r3, r3, #5
 8004256:	b2db      	uxtb	r3, r3
 8004258:	f043 0301 	orr.w	r3, r3, #1
 800425c:	b2db      	uxtb	r3, r3
 800425e:	2b01      	cmp	r3, #1
 8004260:	d102      	bne.n	8004268 <HAL_RCC_ClockConfig+0x1a0>
 8004262:	4b31      	ldr	r3, [pc, #196]	; (8004328 <HAL_RCC_ClockConfig+0x260>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	e00d      	b.n	8004284 <HAL_RCC_ClockConfig+0x1bc>
 8004268:	2302      	movs	r3, #2
 800426a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800426c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800426e:	fa93 f3a3 	rbit	r3, r3
 8004272:	627b      	str	r3, [r7, #36]	; 0x24
 8004274:	2302      	movs	r3, #2
 8004276:	623b      	str	r3, [r7, #32]
 8004278:	6a3b      	ldr	r3, [r7, #32]
 800427a:	fa93 f3a3 	rbit	r3, r3
 800427e:	61fb      	str	r3, [r7, #28]
 8004280:	4b29      	ldr	r3, [pc, #164]	; (8004328 <HAL_RCC_ClockConfig+0x260>)
 8004282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004284:	2202      	movs	r2, #2
 8004286:	61ba      	str	r2, [r7, #24]
 8004288:	69ba      	ldr	r2, [r7, #24]
 800428a:	fa92 f2a2 	rbit	r2, r2
 800428e:	617a      	str	r2, [r7, #20]
  return result;
 8004290:	697a      	ldr	r2, [r7, #20]
 8004292:	fab2 f282 	clz	r2, r2
 8004296:	b2d2      	uxtb	r2, r2
 8004298:	f042 0220 	orr.w	r2, r2, #32
 800429c:	b2d2      	uxtb	r2, r2
 800429e:	f002 021f 	and.w	r2, r2, #31
 80042a2:	2101      	movs	r1, #1
 80042a4:	fa01 f202 	lsl.w	r2, r1, r2
 80042a8:	4013      	ands	r3, r2
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d101      	bne.n	80042b2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e079      	b.n	80043a6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042b2:	4b1d      	ldr	r3, [pc, #116]	; (8004328 <HAL_RCC_ClockConfig+0x260>)
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	f023 0203 	bic.w	r2, r3, #3
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	491a      	ldr	r1, [pc, #104]	; (8004328 <HAL_RCC_ClockConfig+0x260>)
 80042c0:	4313      	orrs	r3, r2
 80042c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042c4:	f7fd fcba 	bl	8001c3c <HAL_GetTick>
 80042c8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042ca:	e00a      	b.n	80042e2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042cc:	f7fd fcb6 	bl	8001c3c <HAL_GetTick>
 80042d0:	4602      	mov	r2, r0
 80042d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80042da:	4293      	cmp	r3, r2
 80042dc:	d901      	bls.n	80042e2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	e061      	b.n	80043a6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042e2:	4b11      	ldr	r3, [pc, #68]	; (8004328 <HAL_RCC_ClockConfig+0x260>)
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	f003 020c 	and.w	r2, r3, #12
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d1eb      	bne.n	80042cc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042f4:	4b0b      	ldr	r3, [pc, #44]	; (8004324 <HAL_RCC_ClockConfig+0x25c>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 0307 	and.w	r3, r3, #7
 80042fc:	683a      	ldr	r2, [r7, #0]
 80042fe:	429a      	cmp	r2, r3
 8004300:	d214      	bcs.n	800432c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004302:	4b08      	ldr	r3, [pc, #32]	; (8004324 <HAL_RCC_ClockConfig+0x25c>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f023 0207 	bic.w	r2, r3, #7
 800430a:	4906      	ldr	r1, [pc, #24]	; (8004324 <HAL_RCC_ClockConfig+0x25c>)
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	4313      	orrs	r3, r2
 8004310:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004312:	4b04      	ldr	r3, [pc, #16]	; (8004324 <HAL_RCC_ClockConfig+0x25c>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 0307 	and.w	r3, r3, #7
 800431a:	683a      	ldr	r2, [r7, #0]
 800431c:	429a      	cmp	r2, r3
 800431e:	d005      	beq.n	800432c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e040      	b.n	80043a6 <HAL_RCC_ClockConfig+0x2de>
 8004324:	40022000 	.word	0x40022000
 8004328:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 0304 	and.w	r3, r3, #4
 8004334:	2b00      	cmp	r3, #0
 8004336:	d008      	beq.n	800434a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004338:	4b1d      	ldr	r3, [pc, #116]	; (80043b0 <HAL_RCC_ClockConfig+0x2e8>)
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	491a      	ldr	r1, [pc, #104]	; (80043b0 <HAL_RCC_ClockConfig+0x2e8>)
 8004346:	4313      	orrs	r3, r2
 8004348:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0308 	and.w	r3, r3, #8
 8004352:	2b00      	cmp	r3, #0
 8004354:	d009      	beq.n	800436a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004356:	4b16      	ldr	r3, [pc, #88]	; (80043b0 <HAL_RCC_ClockConfig+0x2e8>)
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	691b      	ldr	r3, [r3, #16]
 8004362:	00db      	lsls	r3, r3, #3
 8004364:	4912      	ldr	r1, [pc, #72]	; (80043b0 <HAL_RCC_ClockConfig+0x2e8>)
 8004366:	4313      	orrs	r3, r2
 8004368:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800436a:	f000 f829 	bl	80043c0 <HAL_RCC_GetSysClockFreq>
 800436e:	4601      	mov	r1, r0
 8004370:	4b0f      	ldr	r3, [pc, #60]	; (80043b0 <HAL_RCC_ClockConfig+0x2e8>)
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004378:	22f0      	movs	r2, #240	; 0xf0
 800437a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800437c:	693a      	ldr	r2, [r7, #16]
 800437e:	fa92 f2a2 	rbit	r2, r2
 8004382:	60fa      	str	r2, [r7, #12]
  return result;
 8004384:	68fa      	ldr	r2, [r7, #12]
 8004386:	fab2 f282 	clz	r2, r2
 800438a:	b2d2      	uxtb	r2, r2
 800438c:	40d3      	lsrs	r3, r2
 800438e:	4a09      	ldr	r2, [pc, #36]	; (80043b4 <HAL_RCC_ClockConfig+0x2ec>)
 8004390:	5cd3      	ldrb	r3, [r2, r3]
 8004392:	fa21 f303 	lsr.w	r3, r1, r3
 8004396:	4a08      	ldr	r2, [pc, #32]	; (80043b8 <HAL_RCC_ClockConfig+0x2f0>)
 8004398:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800439a:	4b08      	ldr	r3, [pc, #32]	; (80043bc <HAL_RCC_ClockConfig+0x2f4>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4618      	mov	r0, r3
 80043a0:	f7fd fc08 	bl	8001bb4 <HAL_InitTick>
  
  return HAL_OK;
 80043a4:	2300      	movs	r3, #0
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3778      	adds	r7, #120	; 0x78
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
 80043ae:	bf00      	nop
 80043b0:	40021000 	.word	0x40021000
 80043b4:	0800b028 	.word	0x0800b028
 80043b8:	20000000 	.word	0x20000000
 80043bc:	20000004 	.word	0x20000004

080043c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b08b      	sub	sp, #44	; 0x2c
 80043c4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80043c6:	2300      	movs	r3, #0
 80043c8:	61fb      	str	r3, [r7, #28]
 80043ca:	2300      	movs	r3, #0
 80043cc:	61bb      	str	r3, [r7, #24]
 80043ce:	2300      	movs	r3, #0
 80043d0:	627b      	str	r3, [r7, #36]	; 0x24
 80043d2:	2300      	movs	r3, #0
 80043d4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80043d6:	2300      	movs	r3, #0
 80043d8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80043da:	4b29      	ldr	r3, [pc, #164]	; (8004480 <HAL_RCC_GetSysClockFreq+0xc0>)
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80043e0:	69fb      	ldr	r3, [r7, #28]
 80043e2:	f003 030c 	and.w	r3, r3, #12
 80043e6:	2b04      	cmp	r3, #4
 80043e8:	d002      	beq.n	80043f0 <HAL_RCC_GetSysClockFreq+0x30>
 80043ea:	2b08      	cmp	r3, #8
 80043ec:	d003      	beq.n	80043f6 <HAL_RCC_GetSysClockFreq+0x36>
 80043ee:	e03c      	b.n	800446a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80043f0:	4b24      	ldr	r3, [pc, #144]	; (8004484 <HAL_RCC_GetSysClockFreq+0xc4>)
 80043f2:	623b      	str	r3, [r7, #32]
      break;
 80043f4:	e03c      	b.n	8004470 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80043f6:	69fb      	ldr	r3, [r7, #28]
 80043f8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80043fc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004400:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004402:	68ba      	ldr	r2, [r7, #8]
 8004404:	fa92 f2a2 	rbit	r2, r2
 8004408:	607a      	str	r2, [r7, #4]
  return result;
 800440a:	687a      	ldr	r2, [r7, #4]
 800440c:	fab2 f282 	clz	r2, r2
 8004410:	b2d2      	uxtb	r2, r2
 8004412:	40d3      	lsrs	r3, r2
 8004414:	4a1c      	ldr	r2, [pc, #112]	; (8004488 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004416:	5cd3      	ldrb	r3, [r2, r3]
 8004418:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800441a:	4b19      	ldr	r3, [pc, #100]	; (8004480 <HAL_RCC_GetSysClockFreq+0xc0>)
 800441c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800441e:	f003 030f 	and.w	r3, r3, #15
 8004422:	220f      	movs	r2, #15
 8004424:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004426:	693a      	ldr	r2, [r7, #16]
 8004428:	fa92 f2a2 	rbit	r2, r2
 800442c:	60fa      	str	r2, [r7, #12]
  return result;
 800442e:	68fa      	ldr	r2, [r7, #12]
 8004430:	fab2 f282 	clz	r2, r2
 8004434:	b2d2      	uxtb	r2, r2
 8004436:	40d3      	lsrs	r3, r2
 8004438:	4a14      	ldr	r2, [pc, #80]	; (800448c <HAL_RCC_GetSysClockFreq+0xcc>)
 800443a:	5cd3      	ldrb	r3, [r2, r3]
 800443c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800443e:	69fb      	ldr	r3, [r7, #28]
 8004440:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004444:	2b00      	cmp	r3, #0
 8004446:	d008      	beq.n	800445a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004448:	4a0e      	ldr	r2, [pc, #56]	; (8004484 <HAL_RCC_GetSysClockFreq+0xc4>)
 800444a:	69bb      	ldr	r3, [r7, #24]
 800444c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	fb02 f303 	mul.w	r3, r2, r3
 8004456:	627b      	str	r3, [r7, #36]	; 0x24
 8004458:	e004      	b.n	8004464 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	4a0c      	ldr	r2, [pc, #48]	; (8004490 <HAL_RCC_GetSysClockFreq+0xd0>)
 800445e:	fb02 f303 	mul.w	r3, r2, r3
 8004462:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004466:	623b      	str	r3, [r7, #32]
      break;
 8004468:	e002      	b.n	8004470 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800446a:	4b06      	ldr	r3, [pc, #24]	; (8004484 <HAL_RCC_GetSysClockFreq+0xc4>)
 800446c:	623b      	str	r3, [r7, #32]
      break;
 800446e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004470:	6a3b      	ldr	r3, [r7, #32]
}
 8004472:	4618      	mov	r0, r3
 8004474:	372c      	adds	r7, #44	; 0x2c
 8004476:	46bd      	mov	sp, r7
 8004478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447c:	4770      	bx	lr
 800447e:	bf00      	nop
 8004480:	40021000 	.word	0x40021000
 8004484:	007a1200 	.word	0x007a1200
 8004488:	0800b040 	.word	0x0800b040
 800448c:	0800b050 	.word	0x0800b050
 8004490:	003d0900 	.word	0x003d0900

08004494 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004494:	b480      	push	{r7}
 8004496:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004498:	4b03      	ldr	r3, [pc, #12]	; (80044a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800449a:	681b      	ldr	r3, [r3, #0]
}
 800449c:	4618      	mov	r0, r3
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr
 80044a6:	bf00      	nop
 80044a8:	20000000 	.word	0x20000000

080044ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b082      	sub	sp, #8
 80044b0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80044b2:	f7ff ffef 	bl	8004494 <HAL_RCC_GetHCLKFreq>
 80044b6:	4601      	mov	r1, r0
 80044b8:	4b0b      	ldr	r3, [pc, #44]	; (80044e8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80044c0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80044c4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	fa92 f2a2 	rbit	r2, r2
 80044cc:	603a      	str	r2, [r7, #0]
  return result;
 80044ce:	683a      	ldr	r2, [r7, #0]
 80044d0:	fab2 f282 	clz	r2, r2
 80044d4:	b2d2      	uxtb	r2, r2
 80044d6:	40d3      	lsrs	r3, r2
 80044d8:	4a04      	ldr	r2, [pc, #16]	; (80044ec <HAL_RCC_GetPCLK1Freq+0x40>)
 80044da:	5cd3      	ldrb	r3, [r2, r3]
 80044dc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80044e0:	4618      	mov	r0, r3
 80044e2:	3708      	adds	r7, #8
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}
 80044e8:	40021000 	.word	0x40021000
 80044ec:	0800b038 	.word	0x0800b038

080044f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b082      	sub	sp, #8
 80044f4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80044f6:	f7ff ffcd 	bl	8004494 <HAL_RCC_GetHCLKFreq>
 80044fa:	4601      	mov	r1, r0
 80044fc:	4b0b      	ldr	r3, [pc, #44]	; (800452c <HAL_RCC_GetPCLK2Freq+0x3c>)
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004504:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004508:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	fa92 f2a2 	rbit	r2, r2
 8004510:	603a      	str	r2, [r7, #0]
  return result;
 8004512:	683a      	ldr	r2, [r7, #0]
 8004514:	fab2 f282 	clz	r2, r2
 8004518:	b2d2      	uxtb	r2, r2
 800451a:	40d3      	lsrs	r3, r2
 800451c:	4a04      	ldr	r2, [pc, #16]	; (8004530 <HAL_RCC_GetPCLK2Freq+0x40>)
 800451e:	5cd3      	ldrb	r3, [r2, r3]
 8004520:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004524:	4618      	mov	r0, r3
 8004526:	3708      	adds	r7, #8
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}
 800452c:	40021000 	.word	0x40021000
 8004530:	0800b038 	.word	0x0800b038

08004534 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b092      	sub	sp, #72	; 0x48
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800453c:	2300      	movs	r3, #0
 800453e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004540:	2300      	movs	r3, #0
 8004542:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004544:	2300      	movs	r3, #0
 8004546:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004552:	2b00      	cmp	r3, #0
 8004554:	f000 80cd 	beq.w	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004558:	4b86      	ldr	r3, [pc, #536]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800455a:	69db      	ldr	r3, [r3, #28]
 800455c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004560:	2b00      	cmp	r3, #0
 8004562:	d10e      	bne.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004564:	4b83      	ldr	r3, [pc, #524]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004566:	69db      	ldr	r3, [r3, #28]
 8004568:	4a82      	ldr	r2, [pc, #520]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800456a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800456e:	61d3      	str	r3, [r2, #28]
 8004570:	4b80      	ldr	r3, [pc, #512]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004572:	69db      	ldr	r3, [r3, #28]
 8004574:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004578:	60bb      	str	r3, [r7, #8]
 800457a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800457c:	2301      	movs	r3, #1
 800457e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004582:	4b7d      	ldr	r3, [pc, #500]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800458a:	2b00      	cmp	r3, #0
 800458c:	d118      	bne.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800458e:	4b7a      	ldr	r3, [pc, #488]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a79      	ldr	r2, [pc, #484]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004594:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004598:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800459a:	f7fd fb4f 	bl	8001c3c <HAL_GetTick>
 800459e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045a0:	e008      	b.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045a2:	f7fd fb4b 	bl	8001c3c <HAL_GetTick>
 80045a6:	4602      	mov	r2, r0
 80045a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045aa:	1ad3      	subs	r3, r2, r3
 80045ac:	2b64      	cmp	r3, #100	; 0x64
 80045ae:	d901      	bls.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80045b0:	2303      	movs	r3, #3
 80045b2:	e0db      	b.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045b4:	4b70      	ldr	r3, [pc, #448]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d0f0      	beq.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80045c0:	4b6c      	ldr	r3, [pc, #432]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80045c2:	6a1b      	ldr	r3, [r3, #32]
 80045c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045c8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80045ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d07d      	beq.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x198>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80045da:	429a      	cmp	r2, r3
 80045dc:	d076      	beq.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80045de:	4b65      	ldr	r3, [pc, #404]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80045e0:	6a1b      	ldr	r3, [r3, #32]
 80045e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80045ec:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045f0:	fa93 f3a3 	rbit	r3, r3
 80045f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80045f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80045f8:	fab3 f383 	clz	r3, r3
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	461a      	mov	r2, r3
 8004600:	4b5e      	ldr	r3, [pc, #376]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004602:	4413      	add	r3, r2
 8004604:	009b      	lsls	r3, r3, #2
 8004606:	461a      	mov	r2, r3
 8004608:	2301      	movs	r3, #1
 800460a:	6013      	str	r3, [r2, #0]
 800460c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004610:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004614:	fa93 f3a3 	rbit	r3, r3
 8004618:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800461a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800461c:	fab3 f383 	clz	r3, r3
 8004620:	b2db      	uxtb	r3, r3
 8004622:	461a      	mov	r2, r3
 8004624:	4b55      	ldr	r3, [pc, #340]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004626:	4413      	add	r3, r2
 8004628:	009b      	lsls	r3, r3, #2
 800462a:	461a      	mov	r2, r3
 800462c:	2300      	movs	r3, #0
 800462e:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004630:	4a50      	ldr	r2, [pc, #320]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004632:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004634:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004636:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004638:	f003 0301 	and.w	r3, r3, #1
 800463c:	2b00      	cmp	r3, #0
 800463e:	d045      	beq.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004640:	f7fd fafc 	bl	8001c3c <HAL_GetTick>
 8004644:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004646:	e00a      	b.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004648:	f7fd faf8 	bl	8001c3c <HAL_GetTick>
 800464c:	4602      	mov	r2, r0
 800464e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	f241 3288 	movw	r2, #5000	; 0x1388
 8004656:	4293      	cmp	r3, r2
 8004658:	d901      	bls.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e086      	b.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x238>
 800465e:	2302      	movs	r3, #2
 8004660:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004664:	fa93 f3a3 	rbit	r3, r3
 8004668:	627b      	str	r3, [r7, #36]	; 0x24
 800466a:	2302      	movs	r3, #2
 800466c:	623b      	str	r3, [r7, #32]
 800466e:	6a3b      	ldr	r3, [r7, #32]
 8004670:	fa93 f3a3 	rbit	r3, r3
 8004674:	61fb      	str	r3, [r7, #28]
  return result;
 8004676:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004678:	fab3 f383 	clz	r3, r3
 800467c:	b2db      	uxtb	r3, r3
 800467e:	095b      	lsrs	r3, r3, #5
 8004680:	b2db      	uxtb	r3, r3
 8004682:	f043 0302 	orr.w	r3, r3, #2
 8004686:	b2db      	uxtb	r3, r3
 8004688:	2b02      	cmp	r3, #2
 800468a:	d102      	bne.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800468c:	4b39      	ldr	r3, [pc, #228]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800468e:	6a1b      	ldr	r3, [r3, #32]
 8004690:	e007      	b.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8004692:	2302      	movs	r3, #2
 8004694:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004696:	69bb      	ldr	r3, [r7, #24]
 8004698:	fa93 f3a3 	rbit	r3, r3
 800469c:	617b      	str	r3, [r7, #20]
 800469e:	4b35      	ldr	r3, [pc, #212]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80046a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a2:	2202      	movs	r2, #2
 80046a4:	613a      	str	r2, [r7, #16]
 80046a6:	693a      	ldr	r2, [r7, #16]
 80046a8:	fa92 f2a2 	rbit	r2, r2
 80046ac:	60fa      	str	r2, [r7, #12]
  return result;
 80046ae:	68fa      	ldr	r2, [r7, #12]
 80046b0:	fab2 f282 	clz	r2, r2
 80046b4:	b2d2      	uxtb	r2, r2
 80046b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80046ba:	b2d2      	uxtb	r2, r2
 80046bc:	f002 021f 	and.w	r2, r2, #31
 80046c0:	2101      	movs	r1, #1
 80046c2:	fa01 f202 	lsl.w	r2, r1, r2
 80046c6:	4013      	ands	r3, r2
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d0bd      	beq.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80046cc:	4b29      	ldr	r3, [pc, #164]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80046ce:	6a1b      	ldr	r3, [r3, #32]
 80046d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	4926      	ldr	r1, [pc, #152]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80046da:	4313      	orrs	r3, r2
 80046dc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80046de:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d105      	bne.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046e6:	4b23      	ldr	r3, [pc, #140]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80046e8:	69db      	ldr	r3, [r3, #28]
 80046ea:	4a22      	ldr	r2, [pc, #136]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80046ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046f0:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 0301 	and.w	r3, r3, #1
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d008      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80046fe:	4b1d      	ldr	r3, [pc, #116]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004702:	f023 0203 	bic.w	r2, r3, #3
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	491a      	ldr	r1, [pc, #104]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800470c:	4313      	orrs	r3, r2
 800470e:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 0320 	and.w	r3, r3, #32
 8004718:	2b00      	cmp	r3, #0
 800471a:	d008      	beq.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800471c:	4b15      	ldr	r3, [pc, #84]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800471e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004720:	f023 0210 	bic.w	r2, r3, #16
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	68db      	ldr	r3, [r3, #12]
 8004728:	4912      	ldr	r1, [pc, #72]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800472a:	4313      	orrs	r3, r2
 800472c:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004736:	2b00      	cmp	r3, #0
 8004738:	d008      	beq.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800473a:	4b0e      	ldr	r3, [pc, #56]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800473c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800473e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	691b      	ldr	r3, [r3, #16]
 8004746:	490b      	ldr	r1, [pc, #44]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004748:	4313      	orrs	r3, r2
 800474a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004754:	2b00      	cmp	r3, #0
 8004756:	d008      	beq.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004758:	4b06      	ldr	r3, [pc, #24]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800475a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800475c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	695b      	ldr	r3, [r3, #20]
 8004764:	4903      	ldr	r1, [pc, #12]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004766:	4313      	orrs	r3, r2
 8004768:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800476a:	2300      	movs	r3, #0
}
 800476c:	4618      	mov	r0, r3
 800476e:	3748      	adds	r7, #72	; 0x48
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}
 8004774:	40021000 	.word	0x40021000
 8004778:	40007000 	.word	0x40007000
 800477c:	10908100 	.word	0x10908100

08004780 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b082      	sub	sp, #8
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d101      	bne.n	8004792 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	e049      	b.n	8004826 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004798:	b2db      	uxtb	r3, r3
 800479a:	2b00      	cmp	r3, #0
 800479c:	d106      	bne.n	80047ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f7fc ffec 	bl	8001784 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2202      	movs	r2, #2
 80047b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	3304      	adds	r3, #4
 80047bc:	4619      	mov	r1, r3
 80047be:	4610      	mov	r0, r2
 80047c0:	f000 fbb6 	bl	8004f30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2201      	movs	r2, #1
 80047c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2201      	movs	r2, #1
 80047d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2201      	movs	r2, #1
 80047d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2201      	movs	r2, #1
 80047f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2201      	movs	r2, #1
 80047f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2201      	movs	r2, #1
 8004808:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2201      	movs	r2, #1
 8004810:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2201      	movs	r2, #1
 8004818:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004824:	2300      	movs	r3, #0
}
 8004826:	4618      	mov	r0, r3
 8004828:	3708      	adds	r7, #8
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}
	...

08004830 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004830:	b480      	push	{r7}
 8004832:	b085      	sub	sp, #20
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800483e:	b2db      	uxtb	r3, r3
 8004840:	2b01      	cmp	r3, #1
 8004842:	d001      	beq.n	8004848 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	e038      	b.n	80048ba <HAL_TIM_Base_Start+0x8a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2202      	movs	r2, #2
 800484c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a1c      	ldr	r2, [pc, #112]	; (80048c8 <HAL_TIM_Base_Start+0x98>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d00e      	beq.n	8004878 <HAL_TIM_Base_Start+0x48>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004862:	d009      	beq.n	8004878 <HAL_TIM_Base_Start+0x48>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a18      	ldr	r2, [pc, #96]	; (80048cc <HAL_TIM_Base_Start+0x9c>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d004      	beq.n	8004878 <HAL_TIM_Base_Start+0x48>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a17      	ldr	r2, [pc, #92]	; (80048d0 <HAL_TIM_Base_Start+0xa0>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d115      	bne.n	80048a4 <HAL_TIM_Base_Start+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	689a      	ldr	r2, [r3, #8]
 800487e:	4b15      	ldr	r3, [pc, #84]	; (80048d4 <HAL_TIM_Base_Start+0xa4>)
 8004880:	4013      	ands	r3, r2
 8004882:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2b06      	cmp	r3, #6
 8004888:	d015      	beq.n	80048b6 <HAL_TIM_Base_Start+0x86>
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004890:	d011      	beq.n	80048b6 <HAL_TIM_Base_Start+0x86>
    {
      __HAL_TIM_ENABLE(htim);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f042 0201 	orr.w	r2, r2, #1
 80048a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048a2:	e008      	b.n	80048b6 <HAL_TIM_Base_Start+0x86>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f042 0201 	orr.w	r2, r2, #1
 80048b2:	601a      	str	r2, [r3, #0]
 80048b4:	e000      	b.n	80048b8 <HAL_TIM_Base_Start+0x88>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048b6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80048b8:	2300      	movs	r3, #0
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3714      	adds	r7, #20
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr
 80048c6:	bf00      	nop
 80048c8:	40012c00 	.word	0x40012c00
 80048cc:	40000400 	.word	0x40000400
 80048d0:	40014000 	.word	0x40014000
 80048d4:	00010007 	.word	0x00010007

080048d8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b082      	sub	sp, #8
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d101      	bne.n	80048ea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e049      	b.n	800497e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048f0:	b2db      	uxtb	r3, r3
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d106      	bne.n	8004904 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2200      	movs	r2, #0
 80048fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f000 f841 	bl	8004986 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2202      	movs	r2, #2
 8004908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	3304      	adds	r3, #4
 8004914:	4619      	mov	r1, r3
 8004916:	4610      	mov	r0, r2
 8004918:	f000 fb0a 	bl	8004f30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2201      	movs	r2, #1
 8004928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2201      	movs	r2, #1
 8004940:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2201      	movs	r2, #1
 8004948:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800497c:	2300      	movs	r3, #0
}
 800497e:	4618      	mov	r0, r3
 8004980:	3708      	adds	r7, #8
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}

08004986 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004986:	b480      	push	{r7}
 8004988:	b083      	sub	sp, #12
 800498a:	af00      	add	r7, sp, #0
 800498c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800498e:	bf00      	nop
 8004990:	370c      	adds	r7, #12
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr
	...

0800499c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b084      	sub	sp, #16
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d109      	bne.n	80049c0 <HAL_TIM_PWM_Start+0x24>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	bf14      	ite	ne
 80049b8:	2301      	movne	r3, #1
 80049ba:	2300      	moveq	r3, #0
 80049bc:	b2db      	uxtb	r3, r3
 80049be:	e03c      	b.n	8004a3a <HAL_TIM_PWM_Start+0x9e>
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	2b04      	cmp	r3, #4
 80049c4:	d109      	bne.n	80049da <HAL_TIM_PWM_Start+0x3e>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	bf14      	ite	ne
 80049d2:	2301      	movne	r3, #1
 80049d4:	2300      	moveq	r3, #0
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	e02f      	b.n	8004a3a <HAL_TIM_PWM_Start+0x9e>
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	2b08      	cmp	r3, #8
 80049de:	d109      	bne.n	80049f4 <HAL_TIM_PWM_Start+0x58>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80049e6:	b2db      	uxtb	r3, r3
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	bf14      	ite	ne
 80049ec:	2301      	movne	r3, #1
 80049ee:	2300      	moveq	r3, #0
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	e022      	b.n	8004a3a <HAL_TIM_PWM_Start+0x9e>
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	2b0c      	cmp	r3, #12
 80049f8:	d109      	bne.n	8004a0e <HAL_TIM_PWM_Start+0x72>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	bf14      	ite	ne
 8004a06:	2301      	movne	r3, #1
 8004a08:	2300      	moveq	r3, #0
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	e015      	b.n	8004a3a <HAL_TIM_PWM_Start+0x9e>
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	2b10      	cmp	r3, #16
 8004a12:	d109      	bne.n	8004a28 <HAL_TIM_PWM_Start+0x8c>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004a1a:	b2db      	uxtb	r3, r3
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	bf14      	ite	ne
 8004a20:	2301      	movne	r3, #1
 8004a22:	2300      	moveq	r3, #0
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	e008      	b.n	8004a3a <HAL_TIM_PWM_Start+0x9e>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	bf14      	ite	ne
 8004a34:	2301      	movne	r3, #1
 8004a36:	2300      	moveq	r3, #0
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d001      	beq.n	8004a42 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e088      	b.n	8004b54 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d104      	bne.n	8004a52 <HAL_TIM_PWM_Start+0xb6>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2202      	movs	r2, #2
 8004a4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a50:	e023      	b.n	8004a9a <HAL_TIM_PWM_Start+0xfe>
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	2b04      	cmp	r3, #4
 8004a56:	d104      	bne.n	8004a62 <HAL_TIM_PWM_Start+0xc6>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2202      	movs	r2, #2
 8004a5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a60:	e01b      	b.n	8004a9a <HAL_TIM_PWM_Start+0xfe>
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	2b08      	cmp	r3, #8
 8004a66:	d104      	bne.n	8004a72 <HAL_TIM_PWM_Start+0xd6>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2202      	movs	r2, #2
 8004a6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a70:	e013      	b.n	8004a9a <HAL_TIM_PWM_Start+0xfe>
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	2b0c      	cmp	r3, #12
 8004a76:	d104      	bne.n	8004a82 <HAL_TIM_PWM_Start+0xe6>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2202      	movs	r2, #2
 8004a7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a80:	e00b      	b.n	8004a9a <HAL_TIM_PWM_Start+0xfe>
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	2b10      	cmp	r3, #16
 8004a86:	d104      	bne.n	8004a92 <HAL_TIM_PWM_Start+0xf6>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2202      	movs	r2, #2
 8004a8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a90:	e003      	b.n	8004a9a <HAL_TIM_PWM_Start+0xfe>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2202      	movs	r2, #2
 8004a96:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	6839      	ldr	r1, [r7, #0]
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f000 fdfc 	bl	80056a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a2b      	ldr	r2, [pc, #172]	; (8004b5c <HAL_TIM_PWM_Start+0x1c0>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d00e      	beq.n	8004ad0 <HAL_TIM_PWM_Start+0x134>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a2a      	ldr	r2, [pc, #168]	; (8004b60 <HAL_TIM_PWM_Start+0x1c4>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d009      	beq.n	8004ad0 <HAL_TIM_PWM_Start+0x134>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a28      	ldr	r2, [pc, #160]	; (8004b64 <HAL_TIM_PWM_Start+0x1c8>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d004      	beq.n	8004ad0 <HAL_TIM_PWM_Start+0x134>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a27      	ldr	r2, [pc, #156]	; (8004b68 <HAL_TIM_PWM_Start+0x1cc>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d101      	bne.n	8004ad4 <HAL_TIM_PWM_Start+0x138>
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e000      	b.n	8004ad6 <HAL_TIM_PWM_Start+0x13a>
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d007      	beq.n	8004aea <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ae8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a1b      	ldr	r2, [pc, #108]	; (8004b5c <HAL_TIM_PWM_Start+0x1c0>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d00e      	beq.n	8004b12 <HAL_TIM_PWM_Start+0x176>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004afc:	d009      	beq.n	8004b12 <HAL_TIM_PWM_Start+0x176>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a1a      	ldr	r2, [pc, #104]	; (8004b6c <HAL_TIM_PWM_Start+0x1d0>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d004      	beq.n	8004b12 <HAL_TIM_PWM_Start+0x176>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a14      	ldr	r2, [pc, #80]	; (8004b60 <HAL_TIM_PWM_Start+0x1c4>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d115      	bne.n	8004b3e <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	689a      	ldr	r2, [r3, #8]
 8004b18:	4b15      	ldr	r3, [pc, #84]	; (8004b70 <HAL_TIM_PWM_Start+0x1d4>)
 8004b1a:	4013      	ands	r3, r2
 8004b1c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2b06      	cmp	r3, #6
 8004b22:	d015      	beq.n	8004b50 <HAL_TIM_PWM_Start+0x1b4>
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b2a:	d011      	beq.n	8004b50 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f042 0201 	orr.w	r2, r2, #1
 8004b3a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b3c:	e008      	b.n	8004b50 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f042 0201 	orr.w	r2, r2, #1
 8004b4c:	601a      	str	r2, [r3, #0]
 8004b4e:	e000      	b.n	8004b52 <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b50:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004b52:	2300      	movs	r3, #0
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3710      	adds	r7, #16
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}
 8004b5c:	40012c00 	.word	0x40012c00
 8004b60:	40014000 	.word	0x40014000
 8004b64:	40014400 	.word	0x40014400
 8004b68:	40014800 	.word	0x40014800
 8004b6c:	40000400 	.word	0x40000400
 8004b70:	00010007 	.word	0x00010007

08004b74 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b086      	sub	sp, #24
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	60f8      	str	r0, [r7, #12]
 8004b7c:	60b9      	str	r1, [r7, #8]
 8004b7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b80:	2300      	movs	r3, #0
 8004b82:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d101      	bne.n	8004b92 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004b8e:	2302      	movs	r3, #2
 8004b90:	e0ff      	b.n	8004d92 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2201      	movs	r2, #1
 8004b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2b14      	cmp	r3, #20
 8004b9e:	f200 80f0 	bhi.w	8004d82 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004ba2:	a201      	add	r2, pc, #4	; (adr r2, 8004ba8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ba8:	08004bfd 	.word	0x08004bfd
 8004bac:	08004d83 	.word	0x08004d83
 8004bb0:	08004d83 	.word	0x08004d83
 8004bb4:	08004d83 	.word	0x08004d83
 8004bb8:	08004c3d 	.word	0x08004c3d
 8004bbc:	08004d83 	.word	0x08004d83
 8004bc0:	08004d83 	.word	0x08004d83
 8004bc4:	08004d83 	.word	0x08004d83
 8004bc8:	08004c7f 	.word	0x08004c7f
 8004bcc:	08004d83 	.word	0x08004d83
 8004bd0:	08004d83 	.word	0x08004d83
 8004bd4:	08004d83 	.word	0x08004d83
 8004bd8:	08004cbf 	.word	0x08004cbf
 8004bdc:	08004d83 	.word	0x08004d83
 8004be0:	08004d83 	.word	0x08004d83
 8004be4:	08004d83 	.word	0x08004d83
 8004be8:	08004d01 	.word	0x08004d01
 8004bec:	08004d83 	.word	0x08004d83
 8004bf0:	08004d83 	.word	0x08004d83
 8004bf4:	08004d83 	.word	0x08004d83
 8004bf8:	08004d41 	.word	0x08004d41
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	68b9      	ldr	r1, [r7, #8]
 8004c02:	4618      	mov	r0, r3
 8004c04:	f000 fa0c 	bl	8005020 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	699a      	ldr	r2, [r3, #24]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f042 0208 	orr.w	r2, r2, #8
 8004c16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	699a      	ldr	r2, [r3, #24]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f022 0204 	bic.w	r2, r2, #4
 8004c26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	6999      	ldr	r1, [r3, #24]
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	691a      	ldr	r2, [r3, #16]
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	430a      	orrs	r2, r1
 8004c38:	619a      	str	r2, [r3, #24]
      break;
 8004c3a:	e0a5      	b.n	8004d88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	68b9      	ldr	r1, [r7, #8]
 8004c42:	4618      	mov	r0, r3
 8004c44:	f000 fa72 	bl	800512c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	699a      	ldr	r2, [r3, #24]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	699a      	ldr	r2, [r3, #24]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	6999      	ldr	r1, [r3, #24]
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	691b      	ldr	r3, [r3, #16]
 8004c72:	021a      	lsls	r2, r3, #8
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	430a      	orrs	r2, r1
 8004c7a:	619a      	str	r2, [r3, #24]
      break;
 8004c7c:	e084      	b.n	8004d88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	68b9      	ldr	r1, [r7, #8]
 8004c84:	4618      	mov	r0, r3
 8004c86:	f000 fad1 	bl	800522c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	69da      	ldr	r2, [r3, #28]
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f042 0208 	orr.w	r2, r2, #8
 8004c98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	69da      	ldr	r2, [r3, #28]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f022 0204 	bic.w	r2, r2, #4
 8004ca8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	69d9      	ldr	r1, [r3, #28]
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	691a      	ldr	r2, [r3, #16]
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	430a      	orrs	r2, r1
 8004cba:	61da      	str	r2, [r3, #28]
      break;
 8004cbc:	e064      	b.n	8004d88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	68b9      	ldr	r1, [r7, #8]
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f000 fb2f 	bl	8005328 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	69da      	ldr	r2, [r3, #28]
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	69da      	ldr	r2, [r3, #28]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ce8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	69d9      	ldr	r1, [r3, #28]
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	691b      	ldr	r3, [r3, #16]
 8004cf4:	021a      	lsls	r2, r3, #8
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	430a      	orrs	r2, r1
 8004cfc:	61da      	str	r2, [r3, #28]
      break;
 8004cfe:	e043      	b.n	8004d88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	68b9      	ldr	r1, [r7, #8]
 8004d06:	4618      	mov	r0, r3
 8004d08:	f000 fb72 	bl	80053f0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f042 0208 	orr.w	r2, r2, #8
 8004d1a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f022 0204 	bic.w	r2, r2, #4
 8004d2a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	691a      	ldr	r2, [r3, #16]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	430a      	orrs	r2, r1
 8004d3c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004d3e:	e023      	b.n	8004d88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	68b9      	ldr	r1, [r7, #8]
 8004d46:	4618      	mov	r0, r3
 8004d48:	f000 fbb0 	bl	80054ac <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d5a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d6a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	691b      	ldr	r3, [r3, #16]
 8004d76:	021a      	lsls	r2, r3, #8
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	430a      	orrs	r2, r1
 8004d7e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004d80:	e002      	b.n	8004d88 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	75fb      	strb	r3, [r7, #23]
      break;
 8004d86:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d90:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3718      	adds	r7, #24
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}
 8004d9a:	bf00      	nop

08004d9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b084      	sub	sp, #16
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004da6:	2300      	movs	r3, #0
 8004da8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	d101      	bne.n	8004db8 <HAL_TIM_ConfigClockSource+0x1c>
 8004db4:	2302      	movs	r3, #2
 8004db6:	e0b6      	b.n	8004f26 <HAL_TIM_ConfigClockSource+0x18a>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2202      	movs	r2, #2
 8004dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dd6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004dda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004de2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	68ba      	ldr	r2, [r7, #8]
 8004dea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004df4:	d03e      	beq.n	8004e74 <HAL_TIM_ConfigClockSource+0xd8>
 8004df6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dfa:	f200 8087 	bhi.w	8004f0c <HAL_TIM_ConfigClockSource+0x170>
 8004dfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e02:	f000 8086 	beq.w	8004f12 <HAL_TIM_ConfigClockSource+0x176>
 8004e06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e0a:	d87f      	bhi.n	8004f0c <HAL_TIM_ConfigClockSource+0x170>
 8004e0c:	2b70      	cmp	r3, #112	; 0x70
 8004e0e:	d01a      	beq.n	8004e46 <HAL_TIM_ConfigClockSource+0xaa>
 8004e10:	2b70      	cmp	r3, #112	; 0x70
 8004e12:	d87b      	bhi.n	8004f0c <HAL_TIM_ConfigClockSource+0x170>
 8004e14:	2b60      	cmp	r3, #96	; 0x60
 8004e16:	d050      	beq.n	8004eba <HAL_TIM_ConfigClockSource+0x11e>
 8004e18:	2b60      	cmp	r3, #96	; 0x60
 8004e1a:	d877      	bhi.n	8004f0c <HAL_TIM_ConfigClockSource+0x170>
 8004e1c:	2b50      	cmp	r3, #80	; 0x50
 8004e1e:	d03c      	beq.n	8004e9a <HAL_TIM_ConfigClockSource+0xfe>
 8004e20:	2b50      	cmp	r3, #80	; 0x50
 8004e22:	d873      	bhi.n	8004f0c <HAL_TIM_ConfigClockSource+0x170>
 8004e24:	2b40      	cmp	r3, #64	; 0x40
 8004e26:	d058      	beq.n	8004eda <HAL_TIM_ConfigClockSource+0x13e>
 8004e28:	2b40      	cmp	r3, #64	; 0x40
 8004e2a:	d86f      	bhi.n	8004f0c <HAL_TIM_ConfigClockSource+0x170>
 8004e2c:	2b30      	cmp	r3, #48	; 0x30
 8004e2e:	d064      	beq.n	8004efa <HAL_TIM_ConfigClockSource+0x15e>
 8004e30:	2b30      	cmp	r3, #48	; 0x30
 8004e32:	d86b      	bhi.n	8004f0c <HAL_TIM_ConfigClockSource+0x170>
 8004e34:	2b20      	cmp	r3, #32
 8004e36:	d060      	beq.n	8004efa <HAL_TIM_ConfigClockSource+0x15e>
 8004e38:	2b20      	cmp	r3, #32
 8004e3a:	d867      	bhi.n	8004f0c <HAL_TIM_ConfigClockSource+0x170>
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d05c      	beq.n	8004efa <HAL_TIM_ConfigClockSource+0x15e>
 8004e40:	2b10      	cmp	r3, #16
 8004e42:	d05a      	beq.n	8004efa <HAL_TIM_ConfigClockSource+0x15e>
 8004e44:	e062      	b.n	8004f0c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6818      	ldr	r0, [r3, #0]
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	6899      	ldr	r1, [r3, #8]
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	685a      	ldr	r2, [r3, #4]
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	68db      	ldr	r3, [r3, #12]
 8004e56:	f000 fc03 	bl	8005660 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004e68:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	68ba      	ldr	r2, [r7, #8]
 8004e70:	609a      	str	r2, [r3, #8]
      break;
 8004e72:	e04f      	b.n	8004f14 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6818      	ldr	r0, [r3, #0]
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	6899      	ldr	r1, [r3, #8]
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	685a      	ldr	r2, [r3, #4]
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	68db      	ldr	r3, [r3, #12]
 8004e84:	f000 fbec 	bl	8005660 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	689a      	ldr	r2, [r3, #8]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e96:	609a      	str	r2, [r3, #8]
      break;
 8004e98:	e03c      	b.n	8004f14 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6818      	ldr	r0, [r3, #0]
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	6859      	ldr	r1, [r3, #4]
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	68db      	ldr	r3, [r3, #12]
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	f000 fb60 	bl	800556c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	2150      	movs	r1, #80	; 0x50
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f000 fbb9 	bl	800562a <TIM_ITRx_SetConfig>
      break;
 8004eb8:	e02c      	b.n	8004f14 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6818      	ldr	r0, [r3, #0]
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	6859      	ldr	r1, [r3, #4]
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	68db      	ldr	r3, [r3, #12]
 8004ec6:	461a      	mov	r2, r3
 8004ec8:	f000 fb7f 	bl	80055ca <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	2160      	movs	r1, #96	; 0x60
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f000 fba9 	bl	800562a <TIM_ITRx_SetConfig>
      break;
 8004ed8:	e01c      	b.n	8004f14 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6818      	ldr	r0, [r3, #0]
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	6859      	ldr	r1, [r3, #4]
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	68db      	ldr	r3, [r3, #12]
 8004ee6:	461a      	mov	r2, r3
 8004ee8:	f000 fb40 	bl	800556c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	2140      	movs	r1, #64	; 0x40
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f000 fb99 	bl	800562a <TIM_ITRx_SetConfig>
      break;
 8004ef8:	e00c      	b.n	8004f14 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4619      	mov	r1, r3
 8004f04:	4610      	mov	r0, r2
 8004f06:	f000 fb90 	bl	800562a <TIM_ITRx_SetConfig>
      break;
 8004f0a:	e003      	b.n	8004f14 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	73fb      	strb	r3, [r7, #15]
      break;
 8004f10:	e000      	b.n	8004f14 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004f12:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2201      	movs	r2, #1
 8004f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3710      	adds	r7, #16
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}
	...

08004f30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b085      	sub	sp, #20
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	4a32      	ldr	r2, [pc, #200]	; (800500c <TIM_Base_SetConfig+0xdc>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d007      	beq.n	8004f58 <TIM_Base_SetConfig+0x28>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f4e:	d003      	beq.n	8004f58 <TIM_Base_SetConfig+0x28>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	4a2f      	ldr	r2, [pc, #188]	; (8005010 <TIM_Base_SetConfig+0xe0>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d108      	bne.n	8004f6a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	68fa      	ldr	r2, [r7, #12]
 8004f66:	4313      	orrs	r3, r2
 8004f68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4a27      	ldr	r2, [pc, #156]	; (800500c <TIM_Base_SetConfig+0xdc>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d013      	beq.n	8004f9a <TIM_Base_SetConfig+0x6a>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f78:	d00f      	beq.n	8004f9a <TIM_Base_SetConfig+0x6a>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4a24      	ldr	r2, [pc, #144]	; (8005010 <TIM_Base_SetConfig+0xe0>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d00b      	beq.n	8004f9a <TIM_Base_SetConfig+0x6a>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4a23      	ldr	r2, [pc, #140]	; (8005014 <TIM_Base_SetConfig+0xe4>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d007      	beq.n	8004f9a <TIM_Base_SetConfig+0x6a>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4a22      	ldr	r2, [pc, #136]	; (8005018 <TIM_Base_SetConfig+0xe8>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d003      	beq.n	8004f9a <TIM_Base_SetConfig+0x6a>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4a21      	ldr	r2, [pc, #132]	; (800501c <TIM_Base_SetConfig+0xec>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d108      	bne.n	8004fac <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fa0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	68db      	ldr	r3, [r3, #12]
 8004fa6:	68fa      	ldr	r2, [r7, #12]
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	695b      	ldr	r3, [r3, #20]
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	68fa      	ldr	r2, [r7, #12]
 8004fbe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	689a      	ldr	r2, [r3, #8]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	4a0e      	ldr	r2, [pc, #56]	; (800500c <TIM_Base_SetConfig+0xdc>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d00b      	beq.n	8004ff0 <TIM_Base_SetConfig+0xc0>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	4a0e      	ldr	r2, [pc, #56]	; (8005014 <TIM_Base_SetConfig+0xe4>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d007      	beq.n	8004ff0 <TIM_Base_SetConfig+0xc0>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	4a0d      	ldr	r2, [pc, #52]	; (8005018 <TIM_Base_SetConfig+0xe8>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d003      	beq.n	8004ff0 <TIM_Base_SetConfig+0xc0>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	4a0c      	ldr	r2, [pc, #48]	; (800501c <TIM_Base_SetConfig+0xec>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d103      	bne.n	8004ff8 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	691a      	ldr	r2, [r3, #16]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	615a      	str	r2, [r3, #20]
}
 8004ffe:	bf00      	nop
 8005000:	3714      	adds	r7, #20
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr
 800500a:	bf00      	nop
 800500c:	40012c00 	.word	0x40012c00
 8005010:	40000400 	.word	0x40000400
 8005014:	40014000 	.word	0x40014000
 8005018:	40014400 	.word	0x40014400
 800501c:	40014800 	.word	0x40014800

08005020 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005020:	b480      	push	{r7}
 8005022:	b087      	sub	sp, #28
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6a1b      	ldr	r3, [r3, #32]
 800502e:	f023 0201 	bic.w	r2, r3, #1
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6a1b      	ldr	r3, [r3, #32]
 800503a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	699b      	ldr	r3, [r3, #24]
 8005046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800504e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005052:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f023 0303 	bic.w	r3, r3, #3
 800505a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	68fa      	ldr	r2, [r7, #12]
 8005062:	4313      	orrs	r3, r2
 8005064:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	f023 0302 	bic.w	r3, r3, #2
 800506c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	697a      	ldr	r2, [r7, #20]
 8005074:	4313      	orrs	r3, r2
 8005076:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	4a28      	ldr	r2, [pc, #160]	; (800511c <TIM_OC1_SetConfig+0xfc>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d00b      	beq.n	8005098 <TIM_OC1_SetConfig+0x78>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	4a27      	ldr	r2, [pc, #156]	; (8005120 <TIM_OC1_SetConfig+0x100>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d007      	beq.n	8005098 <TIM_OC1_SetConfig+0x78>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	4a26      	ldr	r2, [pc, #152]	; (8005124 <TIM_OC1_SetConfig+0x104>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d003      	beq.n	8005098 <TIM_OC1_SetConfig+0x78>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	4a25      	ldr	r2, [pc, #148]	; (8005128 <TIM_OC1_SetConfig+0x108>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d10c      	bne.n	80050b2 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	f023 0308 	bic.w	r3, r3, #8
 800509e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	68db      	ldr	r3, [r3, #12]
 80050a4:	697a      	ldr	r2, [r7, #20]
 80050a6:	4313      	orrs	r3, r2
 80050a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	f023 0304 	bic.w	r3, r3, #4
 80050b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	4a19      	ldr	r2, [pc, #100]	; (800511c <TIM_OC1_SetConfig+0xfc>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d00b      	beq.n	80050d2 <TIM_OC1_SetConfig+0xb2>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	4a18      	ldr	r2, [pc, #96]	; (8005120 <TIM_OC1_SetConfig+0x100>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d007      	beq.n	80050d2 <TIM_OC1_SetConfig+0xb2>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	4a17      	ldr	r2, [pc, #92]	; (8005124 <TIM_OC1_SetConfig+0x104>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d003      	beq.n	80050d2 <TIM_OC1_SetConfig+0xb2>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	4a16      	ldr	r2, [pc, #88]	; (8005128 <TIM_OC1_SetConfig+0x108>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d111      	bne.n	80050f6 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80050e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	695b      	ldr	r3, [r3, #20]
 80050e6:	693a      	ldr	r2, [r7, #16]
 80050e8:	4313      	orrs	r3, r2
 80050ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	699b      	ldr	r3, [r3, #24]
 80050f0:	693a      	ldr	r2, [r7, #16]
 80050f2:	4313      	orrs	r3, r2
 80050f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	693a      	ldr	r2, [r7, #16]
 80050fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	68fa      	ldr	r2, [r7, #12]
 8005100:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	685a      	ldr	r2, [r3, #4]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	697a      	ldr	r2, [r7, #20]
 800510e:	621a      	str	r2, [r3, #32]
}
 8005110:	bf00      	nop
 8005112:	371c      	adds	r7, #28
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr
 800511c:	40012c00 	.word	0x40012c00
 8005120:	40014000 	.word	0x40014000
 8005124:	40014400 	.word	0x40014400
 8005128:	40014800 	.word	0x40014800

0800512c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800512c:	b480      	push	{r7}
 800512e:	b087      	sub	sp, #28
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6a1b      	ldr	r3, [r3, #32]
 800513a:	f023 0210 	bic.w	r2, r3, #16
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6a1b      	ldr	r3, [r3, #32]
 8005146:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	699b      	ldr	r3, [r3, #24]
 8005152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800515a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800515e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005166:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	021b      	lsls	r3, r3, #8
 800516e:	68fa      	ldr	r2, [r7, #12]
 8005170:	4313      	orrs	r3, r2
 8005172:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	f023 0320 	bic.w	r3, r3, #32
 800517a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	011b      	lsls	r3, r3, #4
 8005182:	697a      	ldr	r2, [r7, #20]
 8005184:	4313      	orrs	r3, r2
 8005186:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	4a24      	ldr	r2, [pc, #144]	; (800521c <TIM_OC2_SetConfig+0xf0>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d10d      	bne.n	80051ac <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005196:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	68db      	ldr	r3, [r3, #12]
 800519c:	011b      	lsls	r3, r3, #4
 800519e:	697a      	ldr	r2, [r7, #20]
 80051a0:	4313      	orrs	r3, r2
 80051a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	4a1b      	ldr	r2, [pc, #108]	; (800521c <TIM_OC2_SetConfig+0xf0>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d00b      	beq.n	80051cc <TIM_OC2_SetConfig+0xa0>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	4a1a      	ldr	r2, [pc, #104]	; (8005220 <TIM_OC2_SetConfig+0xf4>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d007      	beq.n	80051cc <TIM_OC2_SetConfig+0xa0>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	4a19      	ldr	r2, [pc, #100]	; (8005224 <TIM_OC2_SetConfig+0xf8>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d003      	beq.n	80051cc <TIM_OC2_SetConfig+0xa0>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	4a18      	ldr	r2, [pc, #96]	; (8005228 <TIM_OC2_SetConfig+0xfc>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d113      	bne.n	80051f4 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80051d2:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80051da:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	695b      	ldr	r3, [r3, #20]
 80051e0:	009b      	lsls	r3, r3, #2
 80051e2:	693a      	ldr	r2, [r7, #16]
 80051e4:	4313      	orrs	r3, r2
 80051e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	699b      	ldr	r3, [r3, #24]
 80051ec:	009b      	lsls	r3, r3, #2
 80051ee:	693a      	ldr	r2, [r7, #16]
 80051f0:	4313      	orrs	r3, r2
 80051f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	693a      	ldr	r2, [r7, #16]
 80051f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	68fa      	ldr	r2, [r7, #12]
 80051fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	685a      	ldr	r2, [r3, #4]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	697a      	ldr	r2, [r7, #20]
 800520c:	621a      	str	r2, [r3, #32]
}
 800520e:	bf00      	nop
 8005210:	371c      	adds	r7, #28
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr
 800521a:	bf00      	nop
 800521c:	40012c00 	.word	0x40012c00
 8005220:	40014000 	.word	0x40014000
 8005224:	40014400 	.word	0x40014400
 8005228:	40014800 	.word	0x40014800

0800522c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800522c:	b480      	push	{r7}
 800522e:	b087      	sub	sp, #28
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6a1b      	ldr	r3, [r3, #32]
 800523a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6a1b      	ldr	r3, [r3, #32]
 8005246:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	69db      	ldr	r3, [r3, #28]
 8005252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800525a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800525e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f023 0303 	bic.w	r3, r3, #3
 8005266:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	68fa      	ldr	r2, [r7, #12]
 800526e:	4313      	orrs	r3, r2
 8005270:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005278:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	021b      	lsls	r3, r3, #8
 8005280:	697a      	ldr	r2, [r7, #20]
 8005282:	4313      	orrs	r3, r2
 8005284:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	4a23      	ldr	r2, [pc, #140]	; (8005318 <TIM_OC3_SetConfig+0xec>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d10d      	bne.n	80052aa <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005294:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	68db      	ldr	r3, [r3, #12]
 800529a:	021b      	lsls	r3, r3, #8
 800529c:	697a      	ldr	r2, [r7, #20]
 800529e:	4313      	orrs	r3, r2
 80052a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80052a8:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4a1a      	ldr	r2, [pc, #104]	; (8005318 <TIM_OC3_SetConfig+0xec>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d00b      	beq.n	80052ca <TIM_OC3_SetConfig+0x9e>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	4a19      	ldr	r2, [pc, #100]	; (800531c <TIM_OC3_SetConfig+0xf0>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d007      	beq.n	80052ca <TIM_OC3_SetConfig+0x9e>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4a18      	ldr	r2, [pc, #96]	; (8005320 <TIM_OC3_SetConfig+0xf4>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d003      	beq.n	80052ca <TIM_OC3_SetConfig+0x9e>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	4a17      	ldr	r2, [pc, #92]	; (8005324 <TIM_OC3_SetConfig+0xf8>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d113      	bne.n	80052f2 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80052d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80052d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	695b      	ldr	r3, [r3, #20]
 80052de:	011b      	lsls	r3, r3, #4
 80052e0:	693a      	ldr	r2, [r7, #16]
 80052e2:	4313      	orrs	r3, r2
 80052e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	699b      	ldr	r3, [r3, #24]
 80052ea:	011b      	lsls	r3, r3, #4
 80052ec:	693a      	ldr	r2, [r7, #16]
 80052ee:	4313      	orrs	r3, r2
 80052f0:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	693a      	ldr	r2, [r7, #16]
 80052f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	68fa      	ldr	r2, [r7, #12]
 80052fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	685a      	ldr	r2, [r3, #4]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	697a      	ldr	r2, [r7, #20]
 800530a:	621a      	str	r2, [r3, #32]
}
 800530c:	bf00      	nop
 800530e:	371c      	adds	r7, #28
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr
 8005318:	40012c00 	.word	0x40012c00
 800531c:	40014000 	.word	0x40014000
 8005320:	40014400 	.word	0x40014400
 8005324:	40014800 	.word	0x40014800

08005328 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005328:	b480      	push	{r7}
 800532a:	b087      	sub	sp, #28
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6a1b      	ldr	r3, [r3, #32]
 8005336:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6a1b      	ldr	r3, [r3, #32]
 8005342:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	69db      	ldr	r3, [r3, #28]
 800534e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005356:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800535a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005362:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	021b      	lsls	r3, r3, #8
 800536a:	68fa      	ldr	r2, [r7, #12]
 800536c:	4313      	orrs	r3, r2
 800536e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005376:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	031b      	lsls	r3, r3, #12
 800537e:	693a      	ldr	r2, [r7, #16]
 8005380:	4313      	orrs	r3, r2
 8005382:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	4a16      	ldr	r2, [pc, #88]	; (80053e0 <TIM_OC4_SetConfig+0xb8>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d00b      	beq.n	80053a4 <TIM_OC4_SetConfig+0x7c>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	4a15      	ldr	r2, [pc, #84]	; (80053e4 <TIM_OC4_SetConfig+0xbc>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d007      	beq.n	80053a4 <TIM_OC4_SetConfig+0x7c>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	4a14      	ldr	r2, [pc, #80]	; (80053e8 <TIM_OC4_SetConfig+0xc0>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d003      	beq.n	80053a4 <TIM_OC4_SetConfig+0x7c>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	4a13      	ldr	r2, [pc, #76]	; (80053ec <TIM_OC4_SetConfig+0xc4>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d109      	bne.n	80053b8 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	695b      	ldr	r3, [r3, #20]
 80053b0:	019b      	lsls	r3, r3, #6
 80053b2:	697a      	ldr	r2, [r7, #20]
 80053b4:	4313      	orrs	r3, r2
 80053b6:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	697a      	ldr	r2, [r7, #20]
 80053bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	68fa      	ldr	r2, [r7, #12]
 80053c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	685a      	ldr	r2, [r3, #4]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	693a      	ldr	r2, [r7, #16]
 80053d0:	621a      	str	r2, [r3, #32]
}
 80053d2:	bf00      	nop
 80053d4:	371c      	adds	r7, #28
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr
 80053de:	bf00      	nop
 80053e0:	40012c00 	.word	0x40012c00
 80053e4:	40014000 	.word	0x40014000
 80053e8:	40014400 	.word	0x40014400
 80053ec:	40014800 	.word	0x40014800

080053f0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b087      	sub	sp, #28
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
 80053f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6a1b      	ldr	r3, [r3, #32]
 80053fe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6a1b      	ldr	r3, [r3, #32]
 800540a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800541e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005422:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	68fa      	ldr	r2, [r7, #12]
 800542a:	4313      	orrs	r3, r2
 800542c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005434:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	041b      	lsls	r3, r3, #16
 800543c:	693a      	ldr	r2, [r7, #16]
 800543e:	4313      	orrs	r3, r2
 8005440:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	4a15      	ldr	r2, [pc, #84]	; (800549c <TIM_OC5_SetConfig+0xac>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d00b      	beq.n	8005462 <TIM_OC5_SetConfig+0x72>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	4a14      	ldr	r2, [pc, #80]	; (80054a0 <TIM_OC5_SetConfig+0xb0>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d007      	beq.n	8005462 <TIM_OC5_SetConfig+0x72>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	4a13      	ldr	r2, [pc, #76]	; (80054a4 <TIM_OC5_SetConfig+0xb4>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d003      	beq.n	8005462 <TIM_OC5_SetConfig+0x72>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	4a12      	ldr	r2, [pc, #72]	; (80054a8 <TIM_OC5_SetConfig+0xb8>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d109      	bne.n	8005476 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005468:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	695b      	ldr	r3, [r3, #20]
 800546e:	021b      	lsls	r3, r3, #8
 8005470:	697a      	ldr	r2, [r7, #20]
 8005472:	4313      	orrs	r3, r2
 8005474:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	697a      	ldr	r2, [r7, #20]
 800547a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	68fa      	ldr	r2, [r7, #12]
 8005480:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	685a      	ldr	r2, [r3, #4]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	693a      	ldr	r2, [r7, #16]
 800548e:	621a      	str	r2, [r3, #32]
}
 8005490:	bf00      	nop
 8005492:	371c      	adds	r7, #28
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr
 800549c:	40012c00 	.word	0x40012c00
 80054a0:	40014000 	.word	0x40014000
 80054a4:	40014400 	.word	0x40014400
 80054a8:	40014800 	.word	0x40014800

080054ac <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b087      	sub	sp, #28
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
 80054b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6a1b      	ldr	r3, [r3, #32]
 80054ba:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6a1b      	ldr	r3, [r3, #32]
 80054c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80054da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	021b      	lsls	r3, r3, #8
 80054e6:	68fa      	ldr	r2, [r7, #12]
 80054e8:	4313      	orrs	r3, r2
 80054ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80054f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	051b      	lsls	r3, r3, #20
 80054fa:	693a      	ldr	r2, [r7, #16]
 80054fc:	4313      	orrs	r3, r2
 80054fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	4a16      	ldr	r2, [pc, #88]	; (800555c <TIM_OC6_SetConfig+0xb0>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d00b      	beq.n	8005520 <TIM_OC6_SetConfig+0x74>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	4a15      	ldr	r2, [pc, #84]	; (8005560 <TIM_OC6_SetConfig+0xb4>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d007      	beq.n	8005520 <TIM_OC6_SetConfig+0x74>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	4a14      	ldr	r2, [pc, #80]	; (8005564 <TIM_OC6_SetConfig+0xb8>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d003      	beq.n	8005520 <TIM_OC6_SetConfig+0x74>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	4a13      	ldr	r2, [pc, #76]	; (8005568 <TIM_OC6_SetConfig+0xbc>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d109      	bne.n	8005534 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005526:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	695b      	ldr	r3, [r3, #20]
 800552c:	029b      	lsls	r3, r3, #10
 800552e:	697a      	ldr	r2, [r7, #20]
 8005530:	4313      	orrs	r3, r2
 8005532:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	697a      	ldr	r2, [r7, #20]
 8005538:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	68fa      	ldr	r2, [r7, #12]
 800553e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	685a      	ldr	r2, [r3, #4]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	693a      	ldr	r2, [r7, #16]
 800554c:	621a      	str	r2, [r3, #32]
}
 800554e:	bf00      	nop
 8005550:	371c      	adds	r7, #28
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr
 800555a:	bf00      	nop
 800555c:	40012c00 	.word	0x40012c00
 8005560:	40014000 	.word	0x40014000
 8005564:	40014400 	.word	0x40014400
 8005568:	40014800 	.word	0x40014800

0800556c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800556c:	b480      	push	{r7}
 800556e:	b087      	sub	sp, #28
 8005570:	af00      	add	r7, sp, #0
 8005572:	60f8      	str	r0, [r7, #12]
 8005574:	60b9      	str	r1, [r7, #8]
 8005576:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	6a1b      	ldr	r3, [r3, #32]
 800557c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	6a1b      	ldr	r3, [r3, #32]
 8005582:	f023 0201 	bic.w	r2, r3, #1
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	699b      	ldr	r3, [r3, #24]
 800558e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005596:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	011b      	lsls	r3, r3, #4
 800559c:	693a      	ldr	r2, [r7, #16]
 800559e:	4313      	orrs	r3, r2
 80055a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	f023 030a 	bic.w	r3, r3, #10
 80055a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80055aa:	697a      	ldr	r2, [r7, #20]
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	4313      	orrs	r3, r2
 80055b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	693a      	ldr	r2, [r7, #16]
 80055b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	697a      	ldr	r2, [r7, #20]
 80055bc:	621a      	str	r2, [r3, #32]
}
 80055be:	bf00      	nop
 80055c0:	371c      	adds	r7, #28
 80055c2:	46bd      	mov	sp, r7
 80055c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c8:	4770      	bx	lr

080055ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055ca:	b480      	push	{r7}
 80055cc:	b087      	sub	sp, #28
 80055ce:	af00      	add	r7, sp, #0
 80055d0:	60f8      	str	r0, [r7, #12]
 80055d2:	60b9      	str	r1, [r7, #8]
 80055d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	6a1b      	ldr	r3, [r3, #32]
 80055da:	f023 0210 	bic.w	r2, r3, #16
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	699b      	ldr	r3, [r3, #24]
 80055e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	6a1b      	ldr	r3, [r3, #32]
 80055ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80055f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	031b      	lsls	r3, r3, #12
 80055fa:	697a      	ldr	r2, [r7, #20]
 80055fc:	4313      	orrs	r3, r2
 80055fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005606:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	011b      	lsls	r3, r3, #4
 800560c:	693a      	ldr	r2, [r7, #16]
 800560e:	4313      	orrs	r3, r2
 8005610:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	697a      	ldr	r2, [r7, #20]
 8005616:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	693a      	ldr	r2, [r7, #16]
 800561c:	621a      	str	r2, [r3, #32]
}
 800561e:	bf00      	nop
 8005620:	371c      	adds	r7, #28
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr

0800562a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800562a:	b480      	push	{r7}
 800562c:	b085      	sub	sp, #20
 800562e:	af00      	add	r7, sp, #0
 8005630:	6078      	str	r0, [r7, #4]
 8005632:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005640:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005642:	683a      	ldr	r2, [r7, #0]
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	4313      	orrs	r3, r2
 8005648:	f043 0307 	orr.w	r3, r3, #7
 800564c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	68fa      	ldr	r2, [r7, #12]
 8005652:	609a      	str	r2, [r3, #8]
}
 8005654:	bf00      	nop
 8005656:	3714      	adds	r7, #20
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr

08005660 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005660:	b480      	push	{r7}
 8005662:	b087      	sub	sp, #28
 8005664:	af00      	add	r7, sp, #0
 8005666:	60f8      	str	r0, [r7, #12]
 8005668:	60b9      	str	r1, [r7, #8]
 800566a:	607a      	str	r2, [r7, #4]
 800566c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800567a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	021a      	lsls	r2, r3, #8
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	431a      	orrs	r2, r3
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	4313      	orrs	r3, r2
 8005688:	697a      	ldr	r2, [r7, #20]
 800568a:	4313      	orrs	r3, r2
 800568c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	697a      	ldr	r2, [r7, #20]
 8005692:	609a      	str	r2, [r3, #8]
}
 8005694:	bf00      	nop
 8005696:	371c      	adds	r7, #28
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr

080056a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b087      	sub	sp, #28
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	60f8      	str	r0, [r7, #12]
 80056a8:	60b9      	str	r1, [r7, #8]
 80056aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	f003 031f 	and.w	r3, r3, #31
 80056b2:	2201      	movs	r2, #1
 80056b4:	fa02 f303 	lsl.w	r3, r2, r3
 80056b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	6a1a      	ldr	r2, [r3, #32]
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	43db      	mvns	r3, r3
 80056c2:	401a      	ands	r2, r3
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	6a1a      	ldr	r2, [r3, #32]
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	f003 031f 	and.w	r3, r3, #31
 80056d2:	6879      	ldr	r1, [r7, #4]
 80056d4:	fa01 f303 	lsl.w	r3, r1, r3
 80056d8:	431a      	orrs	r2, r3
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	621a      	str	r2, [r3, #32]
}
 80056de:	bf00      	nop
 80056e0:	371c      	adds	r7, #28
 80056e2:	46bd      	mov	sp, r7
 80056e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e8:	4770      	bx	lr
	...

080056ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b085      	sub	sp, #20
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d101      	bne.n	8005704 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005700:	2302      	movs	r3, #2
 8005702:	e054      	b.n	80057ae <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2201      	movs	r2, #1
 8005708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2202      	movs	r2, #2
 8005710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a24      	ldr	r2, [pc, #144]	; (80057bc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d108      	bne.n	8005740 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005734:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	68fa      	ldr	r2, [r7, #12]
 800573c:	4313      	orrs	r3, r2
 800573e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005746:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	68fa      	ldr	r2, [r7, #12]
 800574e:	4313      	orrs	r3, r2
 8005750:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	68fa      	ldr	r2, [r7, #12]
 8005758:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a17      	ldr	r2, [pc, #92]	; (80057bc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d00e      	beq.n	8005782 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800576c:	d009      	beq.n	8005782 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a13      	ldr	r2, [pc, #76]	; (80057c0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d004      	beq.n	8005782 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a11      	ldr	r2, [pc, #68]	; (80057c4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d10c      	bne.n	800579c <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005788:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	68ba      	ldr	r2, [r7, #8]
 8005790:	4313      	orrs	r3, r2
 8005792:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	68ba      	ldr	r2, [r7, #8]
 800579a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2201      	movs	r2, #1
 80057a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2200      	movs	r2, #0
 80057a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057ac:	2300      	movs	r3, #0
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3714      	adds	r7, #20
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr
 80057ba:	bf00      	nop
 80057bc:	40012c00 	.word	0x40012c00
 80057c0:	40000400 	.word	0x40000400
 80057c4:	40014000 	.word	0x40014000

080057c8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b085      	sub	sp, #20
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80057d2:	2300      	movs	r3, #0
 80057d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d101      	bne.n	80057e4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80057e0:	2302      	movs	r3, #2
 80057e2:	e060      	b.n	80058a6 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2201      	movs	r2, #1
 80057e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	68db      	ldr	r3, [r3, #12]
 80057f6:	4313      	orrs	r3, r2
 80057f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	4313      	orrs	r3, r2
 8005806:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	4313      	orrs	r3, r2
 8005814:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4313      	orrs	r3, r2
 8005822:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	691b      	ldr	r3, [r3, #16]
 800582e:	4313      	orrs	r3, r2
 8005830:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	695b      	ldr	r3, [r3, #20]
 800583c:	4313      	orrs	r3, r2
 800583e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800584a:	4313      	orrs	r3, r2
 800584c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	699b      	ldr	r3, [r3, #24]
 8005858:	041b      	lsls	r3, r3, #16
 800585a:	4313      	orrs	r3, r2
 800585c:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a14      	ldr	r2, [pc, #80]	; (80058b4 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d115      	bne.n	8005894 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005872:	051b      	lsls	r3, r3, #20
 8005874:	4313      	orrs	r3, r2
 8005876:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	69db      	ldr	r3, [r3, #28]
 8005882:	4313      	orrs	r3, r2
 8005884:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	6a1b      	ldr	r3, [r3, #32]
 8005890:	4313      	orrs	r3, r2
 8005892:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	68fa      	ldr	r2, [r7, #12]
 800589a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2200      	movs	r2, #0
 80058a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80058a4:	2300      	movs	r3, #0
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3714      	adds	r7, #20
 80058aa:	46bd      	mov	sp, r7
 80058ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b0:	4770      	bx	lr
 80058b2:	bf00      	nop
 80058b4:	40012c00 	.word	0x40012c00

080058b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b082      	sub	sp, #8
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d101      	bne.n	80058ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80058c6:	2301      	movs	r3, #1
 80058c8:	e040      	b.n	800594c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d106      	bne.n	80058e0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2200      	movs	r2, #0
 80058d6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f7fb ffe4 	bl	80018a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2224      	movs	r2, #36	; 0x24
 80058e4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	681a      	ldr	r2, [r3, #0]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f022 0201 	bic.w	r2, r2, #1
 80058f4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f000 f82c 	bl	8005954 <UART_SetConfig>
 80058fc:	4603      	mov	r3, r0
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d101      	bne.n	8005906 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	e022      	b.n	800594c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800590a:	2b00      	cmp	r3, #0
 800590c:	d002      	beq.n	8005914 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f000 f956 	bl	8005bc0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	685a      	ldr	r2, [r3, #4]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005922:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	689a      	ldr	r2, [r3, #8]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005932:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	681a      	ldr	r2, [r3, #0]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f042 0201 	orr.w	r2, r2, #1
 8005942:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f000 f9dd 	bl	8005d04 <UART_CheckIdleState>
 800594a:	4603      	mov	r3, r0
}
 800594c:	4618      	mov	r0, r3
 800594e:	3708      	adds	r7, #8
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}

08005954 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b088      	sub	sp, #32
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800595c:	2300      	movs	r3, #0
 800595e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	689a      	ldr	r2, [r3, #8]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	691b      	ldr	r3, [r3, #16]
 8005968:	431a      	orrs	r2, r3
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	695b      	ldr	r3, [r3, #20]
 800596e:	431a      	orrs	r2, r3
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	69db      	ldr	r3, [r3, #28]
 8005974:	4313      	orrs	r3, r2
 8005976:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	681a      	ldr	r2, [r3, #0]
 800597e:	4b8a      	ldr	r3, [pc, #552]	; (8005ba8 <UART_SetConfig+0x254>)
 8005980:	4013      	ands	r3, r2
 8005982:	687a      	ldr	r2, [r7, #4]
 8005984:	6812      	ldr	r2, [r2, #0]
 8005986:	6979      	ldr	r1, [r7, #20]
 8005988:	430b      	orrs	r3, r1
 800598a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	68da      	ldr	r2, [r3, #12]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	430a      	orrs	r2, r1
 80059a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	699b      	ldr	r3, [r3, #24]
 80059a6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6a1b      	ldr	r3, [r3, #32]
 80059ac:	697a      	ldr	r2, [r7, #20]
 80059ae:	4313      	orrs	r3, r2
 80059b0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	697a      	ldr	r2, [r7, #20]
 80059c2:	430a      	orrs	r2, r1
 80059c4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a78      	ldr	r2, [pc, #480]	; (8005bac <UART_SetConfig+0x258>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d120      	bne.n	8005a12 <UART_SetConfig+0xbe>
 80059d0:	4b77      	ldr	r3, [pc, #476]	; (8005bb0 <UART_SetConfig+0x25c>)
 80059d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059d4:	f003 0303 	and.w	r3, r3, #3
 80059d8:	2b03      	cmp	r3, #3
 80059da:	d817      	bhi.n	8005a0c <UART_SetConfig+0xb8>
 80059dc:	a201      	add	r2, pc, #4	; (adr r2, 80059e4 <UART_SetConfig+0x90>)
 80059de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059e2:	bf00      	nop
 80059e4:	080059f5 	.word	0x080059f5
 80059e8:	08005a01 	.word	0x08005a01
 80059ec:	08005a07 	.word	0x08005a07
 80059f0:	080059fb 	.word	0x080059fb
 80059f4:	2300      	movs	r3, #0
 80059f6:	77fb      	strb	r3, [r7, #31]
 80059f8:	e01d      	b.n	8005a36 <UART_SetConfig+0xe2>
 80059fa:	2302      	movs	r3, #2
 80059fc:	77fb      	strb	r3, [r7, #31]
 80059fe:	e01a      	b.n	8005a36 <UART_SetConfig+0xe2>
 8005a00:	2304      	movs	r3, #4
 8005a02:	77fb      	strb	r3, [r7, #31]
 8005a04:	e017      	b.n	8005a36 <UART_SetConfig+0xe2>
 8005a06:	2308      	movs	r3, #8
 8005a08:	77fb      	strb	r3, [r7, #31]
 8005a0a:	e014      	b.n	8005a36 <UART_SetConfig+0xe2>
 8005a0c:	2310      	movs	r3, #16
 8005a0e:	77fb      	strb	r3, [r7, #31]
 8005a10:	e011      	b.n	8005a36 <UART_SetConfig+0xe2>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a67      	ldr	r2, [pc, #412]	; (8005bb4 <UART_SetConfig+0x260>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d102      	bne.n	8005a22 <UART_SetConfig+0xce>
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	77fb      	strb	r3, [r7, #31]
 8005a20:	e009      	b.n	8005a36 <UART_SetConfig+0xe2>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a64      	ldr	r2, [pc, #400]	; (8005bb8 <UART_SetConfig+0x264>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d102      	bne.n	8005a32 <UART_SetConfig+0xde>
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	77fb      	strb	r3, [r7, #31]
 8005a30:	e001      	b.n	8005a36 <UART_SetConfig+0xe2>
 8005a32:	2310      	movs	r3, #16
 8005a34:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	69db      	ldr	r3, [r3, #28]
 8005a3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a3e:	d15b      	bne.n	8005af8 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8005a40:	7ffb      	ldrb	r3, [r7, #31]
 8005a42:	2b08      	cmp	r3, #8
 8005a44:	d827      	bhi.n	8005a96 <UART_SetConfig+0x142>
 8005a46:	a201      	add	r2, pc, #4	; (adr r2, 8005a4c <UART_SetConfig+0xf8>)
 8005a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a4c:	08005a71 	.word	0x08005a71
 8005a50:	08005a79 	.word	0x08005a79
 8005a54:	08005a81 	.word	0x08005a81
 8005a58:	08005a97 	.word	0x08005a97
 8005a5c:	08005a87 	.word	0x08005a87
 8005a60:	08005a97 	.word	0x08005a97
 8005a64:	08005a97 	.word	0x08005a97
 8005a68:	08005a97 	.word	0x08005a97
 8005a6c:	08005a8f 	.word	0x08005a8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a70:	f7fe fd1c 	bl	80044ac <HAL_RCC_GetPCLK1Freq>
 8005a74:	61b8      	str	r0, [r7, #24]
        break;
 8005a76:	e013      	b.n	8005aa0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a78:	f7fe fd3a 	bl	80044f0 <HAL_RCC_GetPCLK2Freq>
 8005a7c:	61b8      	str	r0, [r7, #24]
        break;
 8005a7e:	e00f      	b.n	8005aa0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a80:	4b4e      	ldr	r3, [pc, #312]	; (8005bbc <UART_SetConfig+0x268>)
 8005a82:	61bb      	str	r3, [r7, #24]
        break;
 8005a84:	e00c      	b.n	8005aa0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a86:	f7fe fc9b 	bl	80043c0 <HAL_RCC_GetSysClockFreq>
 8005a8a:	61b8      	str	r0, [r7, #24]
        break;
 8005a8c:	e008      	b.n	8005aa0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a92:	61bb      	str	r3, [r7, #24]
        break;
 8005a94:	e004      	b.n	8005aa0 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8005a96:	2300      	movs	r3, #0
 8005a98:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	77bb      	strb	r3, [r7, #30]
        break;
 8005a9e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005aa0:	69bb      	ldr	r3, [r7, #24]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d074      	beq.n	8005b90 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005aa6:	69bb      	ldr	r3, [r7, #24]
 8005aa8:	005a      	lsls	r2, r3, #1
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	085b      	lsrs	r3, r3, #1
 8005ab0:	441a      	add	r2, r3
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aba:	b29b      	uxth	r3, r3
 8005abc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	2b0f      	cmp	r3, #15
 8005ac2:	d916      	bls.n	8005af2 <UART_SetConfig+0x19e>
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005aca:	d212      	bcs.n	8005af2 <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	b29b      	uxth	r3, r3
 8005ad0:	f023 030f 	bic.w	r3, r3, #15
 8005ad4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	085b      	lsrs	r3, r3, #1
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	f003 0307 	and.w	r3, r3, #7
 8005ae0:	b29a      	uxth	r2, r3
 8005ae2:	89fb      	ldrh	r3, [r7, #14]
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	89fa      	ldrh	r2, [r7, #14]
 8005aee:	60da      	str	r2, [r3, #12]
 8005af0:	e04e      	b.n	8005b90 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	77bb      	strb	r3, [r7, #30]
 8005af6:	e04b      	b.n	8005b90 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005af8:	7ffb      	ldrb	r3, [r7, #31]
 8005afa:	2b08      	cmp	r3, #8
 8005afc:	d827      	bhi.n	8005b4e <UART_SetConfig+0x1fa>
 8005afe:	a201      	add	r2, pc, #4	; (adr r2, 8005b04 <UART_SetConfig+0x1b0>)
 8005b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b04:	08005b29 	.word	0x08005b29
 8005b08:	08005b31 	.word	0x08005b31
 8005b0c:	08005b39 	.word	0x08005b39
 8005b10:	08005b4f 	.word	0x08005b4f
 8005b14:	08005b3f 	.word	0x08005b3f
 8005b18:	08005b4f 	.word	0x08005b4f
 8005b1c:	08005b4f 	.word	0x08005b4f
 8005b20:	08005b4f 	.word	0x08005b4f
 8005b24:	08005b47 	.word	0x08005b47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b28:	f7fe fcc0 	bl	80044ac <HAL_RCC_GetPCLK1Freq>
 8005b2c:	61b8      	str	r0, [r7, #24]
        break;
 8005b2e:	e013      	b.n	8005b58 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b30:	f7fe fcde 	bl	80044f0 <HAL_RCC_GetPCLK2Freq>
 8005b34:	61b8      	str	r0, [r7, #24]
        break;
 8005b36:	e00f      	b.n	8005b58 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b38:	4b20      	ldr	r3, [pc, #128]	; (8005bbc <UART_SetConfig+0x268>)
 8005b3a:	61bb      	str	r3, [r7, #24]
        break;
 8005b3c:	e00c      	b.n	8005b58 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b3e:	f7fe fc3f 	bl	80043c0 <HAL_RCC_GetSysClockFreq>
 8005b42:	61b8      	str	r0, [r7, #24]
        break;
 8005b44:	e008      	b.n	8005b58 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b4a:	61bb      	str	r3, [r7, #24]
        break;
 8005b4c:	e004      	b.n	8005b58 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	77bb      	strb	r3, [r7, #30]
        break;
 8005b56:	bf00      	nop
    }

    if (pclk != 0U)
 8005b58:	69bb      	ldr	r3, [r7, #24]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d018      	beq.n	8005b90 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	085a      	lsrs	r2, r3, #1
 8005b64:	69bb      	ldr	r3, [r7, #24]
 8005b66:	441a      	add	r2, r3
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b70:	b29b      	uxth	r3, r3
 8005b72:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	2b0f      	cmp	r3, #15
 8005b78:	d908      	bls.n	8005b8c <UART_SetConfig+0x238>
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b80:	d204      	bcs.n	8005b8c <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	693a      	ldr	r2, [r7, #16]
 8005b88:	60da      	str	r2, [r3, #12]
 8005b8a:	e001      	b.n	8005b90 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2200      	movs	r2, #0
 8005b94:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005b9c:	7fbb      	ldrb	r3, [r7, #30]
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	3720      	adds	r7, #32
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}
 8005ba6:	bf00      	nop
 8005ba8:	efff69f3 	.word	0xefff69f3
 8005bac:	40013800 	.word	0x40013800
 8005bb0:	40021000 	.word	0x40021000
 8005bb4:	40004400 	.word	0x40004400
 8005bb8:	40004800 	.word	0x40004800
 8005bbc:	007a1200 	.word	0x007a1200

08005bc0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b083      	sub	sp, #12
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bcc:	f003 0301 	and.w	r3, r3, #1
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d00a      	beq.n	8005bea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	430a      	orrs	r2, r1
 8005be8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bee:	f003 0302 	and.w	r3, r3, #2
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d00a      	beq.n	8005c0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	430a      	orrs	r2, r1
 8005c0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c10:	f003 0304 	and.w	r3, r3, #4
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d00a      	beq.n	8005c2e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	430a      	orrs	r2, r1
 8005c2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c32:	f003 0308 	and.w	r3, r3, #8
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d00a      	beq.n	8005c50 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	430a      	orrs	r2, r1
 8005c4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c54:	f003 0310 	and.w	r3, r3, #16
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d00a      	beq.n	8005c72 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	430a      	orrs	r2, r1
 8005c70:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c76:	f003 0320 	and.w	r3, r3, #32
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d00a      	beq.n	8005c94 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	689b      	ldr	r3, [r3, #8]
 8005c84:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	430a      	orrs	r2, r1
 8005c92:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d01a      	beq.n	8005cd6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	430a      	orrs	r2, r1
 8005cb4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005cbe:	d10a      	bne.n	8005cd6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	430a      	orrs	r2, r1
 8005cd4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d00a      	beq.n	8005cf8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	430a      	orrs	r2, r1
 8005cf6:	605a      	str	r2, [r3, #4]
  }
}
 8005cf8:	bf00      	nop
 8005cfa:	370c      	adds	r7, #12
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d02:	4770      	bx	lr

08005d04 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b086      	sub	sp, #24
 8005d08:	af02      	add	r7, sp, #8
 8005d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005d14:	f7fb ff92 	bl	8001c3c <HAL_GetTick>
 8005d18:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f003 0308 	and.w	r3, r3, #8
 8005d24:	2b08      	cmp	r3, #8
 8005d26:	d10e      	bne.n	8005d46 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005d2c:	9300      	str	r3, [sp, #0]
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2200      	movs	r2, #0
 8005d32:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f000 f82d 	bl	8005d96 <UART_WaitOnFlagUntilTimeout>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d001      	beq.n	8005d46 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d42:	2303      	movs	r3, #3
 8005d44:	e023      	b.n	8005d8e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f003 0304 	and.w	r3, r3, #4
 8005d50:	2b04      	cmp	r3, #4
 8005d52:	d10e      	bne.n	8005d72 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d54:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005d58:	9300      	str	r3, [sp, #0]
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f000 f817 	bl	8005d96 <UART_WaitOnFlagUntilTimeout>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d001      	beq.n	8005d72 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d6e:	2303      	movs	r3, #3
 8005d70:	e00d      	b.n	8005d8e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2220      	movs	r2, #32
 8005d76:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2220      	movs	r2, #32
 8005d7c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2200      	movs	r2, #0
 8005d82:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2200      	movs	r2, #0
 8005d88:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005d8c:	2300      	movs	r3, #0
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3710      	adds	r7, #16
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}

08005d96 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005d96:	b580      	push	{r7, lr}
 8005d98:	b09c      	sub	sp, #112	; 0x70
 8005d9a:	af00      	add	r7, sp, #0
 8005d9c:	60f8      	str	r0, [r7, #12]
 8005d9e:	60b9      	str	r1, [r7, #8]
 8005da0:	603b      	str	r3, [r7, #0]
 8005da2:	4613      	mov	r3, r2
 8005da4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005da6:	e0a5      	b.n	8005ef4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005da8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dae:	f000 80a1 	beq.w	8005ef4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005db2:	f7fb ff43 	bl	8001c3c <HAL_GetTick>
 8005db6:	4602      	mov	r2, r0
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	1ad3      	subs	r3, r2, r3
 8005dbc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005dbe:	429a      	cmp	r2, r3
 8005dc0:	d302      	bcc.n	8005dc8 <UART_WaitOnFlagUntilTimeout+0x32>
 8005dc2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d13e      	bne.n	8005e46 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005dd0:	e853 3f00 	ldrex	r3, [r3]
 8005dd4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005dd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dd8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005ddc:	667b      	str	r3, [r7, #100]	; 0x64
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	461a      	mov	r2, r3
 8005de4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005de6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005de8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005dec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005dee:	e841 2300 	strex	r3, r2, [r1]
 8005df2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005df4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d1e6      	bne.n	8005dc8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	3308      	adds	r3, #8
 8005e00:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e04:	e853 3f00 	ldrex	r3, [r3]
 8005e08:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e0c:	f023 0301 	bic.w	r3, r3, #1
 8005e10:	663b      	str	r3, [r7, #96]	; 0x60
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	3308      	adds	r3, #8
 8005e18:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005e1a:	64ba      	str	r2, [r7, #72]	; 0x48
 8005e1c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e1e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005e20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e22:	e841 2300 	strex	r3, r2, [r1]
 8005e26:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005e28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d1e5      	bne.n	8005dfa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2220      	movs	r2, #32
 8005e32:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2220      	movs	r2, #32
 8005e38:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005e42:	2303      	movs	r3, #3
 8005e44:	e067      	b.n	8005f16 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f003 0304 	and.w	r3, r3, #4
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d04f      	beq.n	8005ef4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	69db      	ldr	r3, [r3, #28]
 8005e5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e62:	d147      	bne.n	8005ef4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e6c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e76:	e853 3f00 	ldrex	r3, [r3]
 8005e7a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e7e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005e82:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	461a      	mov	r2, r3
 8005e8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e8c:	637b      	str	r3, [r7, #52]	; 0x34
 8005e8e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e90:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005e92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e94:	e841 2300 	strex	r3, r2, [r1]
 8005e98:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d1e6      	bne.n	8005e6e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	3308      	adds	r3, #8
 8005ea6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	e853 3f00 	ldrex	r3, [r3]
 8005eae:	613b      	str	r3, [r7, #16]
   return(result);
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	f023 0301 	bic.w	r3, r3, #1
 8005eb6:	66bb      	str	r3, [r7, #104]	; 0x68
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	3308      	adds	r3, #8
 8005ebe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005ec0:	623a      	str	r2, [r7, #32]
 8005ec2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ec4:	69f9      	ldr	r1, [r7, #28]
 8005ec6:	6a3a      	ldr	r2, [r7, #32]
 8005ec8:	e841 2300 	strex	r3, r2, [r1]
 8005ecc:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ece:	69bb      	ldr	r3, [r7, #24]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d1e5      	bne.n	8005ea0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2220      	movs	r2, #32
 8005ed8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2220      	movs	r2, #32
 8005ede:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2220      	movs	r2, #32
 8005ee4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2200      	movs	r2, #0
 8005eec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005ef0:	2303      	movs	r3, #3
 8005ef2:	e010      	b.n	8005f16 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	69da      	ldr	r2, [r3, #28]
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	4013      	ands	r3, r2
 8005efe:	68ba      	ldr	r2, [r7, #8]
 8005f00:	429a      	cmp	r2, r3
 8005f02:	bf0c      	ite	eq
 8005f04:	2301      	moveq	r3, #1
 8005f06:	2300      	movne	r3, #0
 8005f08:	b2db      	uxtb	r3, r3
 8005f0a:	461a      	mov	r2, r3
 8005f0c:	79fb      	ldrb	r3, [r7, #7]
 8005f0e:	429a      	cmp	r2, r3
 8005f10:	f43f af4a 	beq.w	8005da8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f14:	2300      	movs	r3, #0
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3770      	adds	r7, #112	; 0x70
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}
	...

08005f20 <__errno>:
 8005f20:	4b01      	ldr	r3, [pc, #4]	; (8005f28 <__errno+0x8>)
 8005f22:	6818      	ldr	r0, [r3, #0]
 8005f24:	4770      	bx	lr
 8005f26:	bf00      	nop
 8005f28:	2000000c 	.word	0x2000000c

08005f2c <__libc_init_array>:
 8005f2c:	b570      	push	{r4, r5, r6, lr}
 8005f2e:	4d0d      	ldr	r5, [pc, #52]	; (8005f64 <__libc_init_array+0x38>)
 8005f30:	4c0d      	ldr	r4, [pc, #52]	; (8005f68 <__libc_init_array+0x3c>)
 8005f32:	1b64      	subs	r4, r4, r5
 8005f34:	10a4      	asrs	r4, r4, #2
 8005f36:	2600      	movs	r6, #0
 8005f38:	42a6      	cmp	r6, r4
 8005f3a:	d109      	bne.n	8005f50 <__libc_init_array+0x24>
 8005f3c:	4d0b      	ldr	r5, [pc, #44]	; (8005f6c <__libc_init_array+0x40>)
 8005f3e:	4c0c      	ldr	r4, [pc, #48]	; (8005f70 <__libc_init_array+0x44>)
 8005f40:	f005 f864 	bl	800b00c <_init>
 8005f44:	1b64      	subs	r4, r4, r5
 8005f46:	10a4      	asrs	r4, r4, #2
 8005f48:	2600      	movs	r6, #0
 8005f4a:	42a6      	cmp	r6, r4
 8005f4c:	d105      	bne.n	8005f5a <__libc_init_array+0x2e>
 8005f4e:	bd70      	pop	{r4, r5, r6, pc}
 8005f50:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f54:	4798      	blx	r3
 8005f56:	3601      	adds	r6, #1
 8005f58:	e7ee      	b.n	8005f38 <__libc_init_array+0xc>
 8005f5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f5e:	4798      	blx	r3
 8005f60:	3601      	adds	r6, #1
 8005f62:	e7f2      	b.n	8005f4a <__libc_init_array+0x1e>
 8005f64:	0800b51c 	.word	0x0800b51c
 8005f68:	0800b51c 	.word	0x0800b51c
 8005f6c:	0800b51c 	.word	0x0800b51c
 8005f70:	0800b520 	.word	0x0800b520

08005f74 <memset>:
 8005f74:	4402      	add	r2, r0
 8005f76:	4603      	mov	r3, r0
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d100      	bne.n	8005f7e <memset+0xa>
 8005f7c:	4770      	bx	lr
 8005f7e:	f803 1b01 	strb.w	r1, [r3], #1
 8005f82:	e7f9      	b.n	8005f78 <memset+0x4>

08005f84 <__cvt>:
 8005f84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f88:	ec55 4b10 	vmov	r4, r5, d0
 8005f8c:	2d00      	cmp	r5, #0
 8005f8e:	460e      	mov	r6, r1
 8005f90:	4619      	mov	r1, r3
 8005f92:	462b      	mov	r3, r5
 8005f94:	bfbb      	ittet	lt
 8005f96:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005f9a:	461d      	movlt	r5, r3
 8005f9c:	2300      	movge	r3, #0
 8005f9e:	232d      	movlt	r3, #45	; 0x2d
 8005fa0:	700b      	strb	r3, [r1, #0]
 8005fa2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005fa4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005fa8:	4691      	mov	r9, r2
 8005faa:	f023 0820 	bic.w	r8, r3, #32
 8005fae:	bfbc      	itt	lt
 8005fb0:	4622      	movlt	r2, r4
 8005fb2:	4614      	movlt	r4, r2
 8005fb4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005fb8:	d005      	beq.n	8005fc6 <__cvt+0x42>
 8005fba:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005fbe:	d100      	bne.n	8005fc2 <__cvt+0x3e>
 8005fc0:	3601      	adds	r6, #1
 8005fc2:	2102      	movs	r1, #2
 8005fc4:	e000      	b.n	8005fc8 <__cvt+0x44>
 8005fc6:	2103      	movs	r1, #3
 8005fc8:	ab03      	add	r3, sp, #12
 8005fca:	9301      	str	r3, [sp, #4]
 8005fcc:	ab02      	add	r3, sp, #8
 8005fce:	9300      	str	r3, [sp, #0]
 8005fd0:	ec45 4b10 	vmov	d0, r4, r5
 8005fd4:	4653      	mov	r3, sl
 8005fd6:	4632      	mov	r2, r6
 8005fd8:	f001 fdae 	bl	8007b38 <_dtoa_r>
 8005fdc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005fe0:	4607      	mov	r7, r0
 8005fe2:	d102      	bne.n	8005fea <__cvt+0x66>
 8005fe4:	f019 0f01 	tst.w	r9, #1
 8005fe8:	d022      	beq.n	8006030 <__cvt+0xac>
 8005fea:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005fee:	eb07 0906 	add.w	r9, r7, r6
 8005ff2:	d110      	bne.n	8006016 <__cvt+0x92>
 8005ff4:	783b      	ldrb	r3, [r7, #0]
 8005ff6:	2b30      	cmp	r3, #48	; 0x30
 8005ff8:	d10a      	bne.n	8006010 <__cvt+0x8c>
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	4620      	mov	r0, r4
 8006000:	4629      	mov	r1, r5
 8006002:	f7fa fd61 	bl	8000ac8 <__aeabi_dcmpeq>
 8006006:	b918      	cbnz	r0, 8006010 <__cvt+0x8c>
 8006008:	f1c6 0601 	rsb	r6, r6, #1
 800600c:	f8ca 6000 	str.w	r6, [sl]
 8006010:	f8da 3000 	ldr.w	r3, [sl]
 8006014:	4499      	add	r9, r3
 8006016:	2200      	movs	r2, #0
 8006018:	2300      	movs	r3, #0
 800601a:	4620      	mov	r0, r4
 800601c:	4629      	mov	r1, r5
 800601e:	f7fa fd53 	bl	8000ac8 <__aeabi_dcmpeq>
 8006022:	b108      	cbz	r0, 8006028 <__cvt+0xa4>
 8006024:	f8cd 900c 	str.w	r9, [sp, #12]
 8006028:	2230      	movs	r2, #48	; 0x30
 800602a:	9b03      	ldr	r3, [sp, #12]
 800602c:	454b      	cmp	r3, r9
 800602e:	d307      	bcc.n	8006040 <__cvt+0xbc>
 8006030:	9b03      	ldr	r3, [sp, #12]
 8006032:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006034:	1bdb      	subs	r3, r3, r7
 8006036:	4638      	mov	r0, r7
 8006038:	6013      	str	r3, [r2, #0]
 800603a:	b004      	add	sp, #16
 800603c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006040:	1c59      	adds	r1, r3, #1
 8006042:	9103      	str	r1, [sp, #12]
 8006044:	701a      	strb	r2, [r3, #0]
 8006046:	e7f0      	b.n	800602a <__cvt+0xa6>

08006048 <__exponent>:
 8006048:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800604a:	4603      	mov	r3, r0
 800604c:	2900      	cmp	r1, #0
 800604e:	bfb8      	it	lt
 8006050:	4249      	neglt	r1, r1
 8006052:	f803 2b02 	strb.w	r2, [r3], #2
 8006056:	bfb4      	ite	lt
 8006058:	222d      	movlt	r2, #45	; 0x2d
 800605a:	222b      	movge	r2, #43	; 0x2b
 800605c:	2909      	cmp	r1, #9
 800605e:	7042      	strb	r2, [r0, #1]
 8006060:	dd2a      	ble.n	80060b8 <__exponent+0x70>
 8006062:	f10d 0407 	add.w	r4, sp, #7
 8006066:	46a4      	mov	ip, r4
 8006068:	270a      	movs	r7, #10
 800606a:	46a6      	mov	lr, r4
 800606c:	460a      	mov	r2, r1
 800606e:	fb91 f6f7 	sdiv	r6, r1, r7
 8006072:	fb07 1516 	mls	r5, r7, r6, r1
 8006076:	3530      	adds	r5, #48	; 0x30
 8006078:	2a63      	cmp	r2, #99	; 0x63
 800607a:	f104 34ff 	add.w	r4, r4, #4294967295
 800607e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006082:	4631      	mov	r1, r6
 8006084:	dcf1      	bgt.n	800606a <__exponent+0x22>
 8006086:	3130      	adds	r1, #48	; 0x30
 8006088:	f1ae 0502 	sub.w	r5, lr, #2
 800608c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006090:	1c44      	adds	r4, r0, #1
 8006092:	4629      	mov	r1, r5
 8006094:	4561      	cmp	r1, ip
 8006096:	d30a      	bcc.n	80060ae <__exponent+0x66>
 8006098:	f10d 0209 	add.w	r2, sp, #9
 800609c:	eba2 020e 	sub.w	r2, r2, lr
 80060a0:	4565      	cmp	r5, ip
 80060a2:	bf88      	it	hi
 80060a4:	2200      	movhi	r2, #0
 80060a6:	4413      	add	r3, r2
 80060a8:	1a18      	subs	r0, r3, r0
 80060aa:	b003      	add	sp, #12
 80060ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80060b2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80060b6:	e7ed      	b.n	8006094 <__exponent+0x4c>
 80060b8:	2330      	movs	r3, #48	; 0x30
 80060ba:	3130      	adds	r1, #48	; 0x30
 80060bc:	7083      	strb	r3, [r0, #2]
 80060be:	70c1      	strb	r1, [r0, #3]
 80060c0:	1d03      	adds	r3, r0, #4
 80060c2:	e7f1      	b.n	80060a8 <__exponent+0x60>

080060c4 <_printf_float>:
 80060c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060c8:	ed2d 8b02 	vpush	{d8}
 80060cc:	b08d      	sub	sp, #52	; 0x34
 80060ce:	460c      	mov	r4, r1
 80060d0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80060d4:	4616      	mov	r6, r2
 80060d6:	461f      	mov	r7, r3
 80060d8:	4605      	mov	r5, r0
 80060da:	f002 fe8b 	bl	8008df4 <_localeconv_r>
 80060de:	f8d0 a000 	ldr.w	sl, [r0]
 80060e2:	4650      	mov	r0, sl
 80060e4:	f7fa f874 	bl	80001d0 <strlen>
 80060e8:	2300      	movs	r3, #0
 80060ea:	930a      	str	r3, [sp, #40]	; 0x28
 80060ec:	6823      	ldr	r3, [r4, #0]
 80060ee:	9305      	str	r3, [sp, #20]
 80060f0:	f8d8 3000 	ldr.w	r3, [r8]
 80060f4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80060f8:	3307      	adds	r3, #7
 80060fa:	f023 0307 	bic.w	r3, r3, #7
 80060fe:	f103 0208 	add.w	r2, r3, #8
 8006102:	f8c8 2000 	str.w	r2, [r8]
 8006106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800610a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800610e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006112:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006116:	9307      	str	r3, [sp, #28]
 8006118:	f8cd 8018 	str.w	r8, [sp, #24]
 800611c:	ee08 0a10 	vmov	s16, r0
 8006120:	4b9f      	ldr	r3, [pc, #636]	; (80063a0 <_printf_float+0x2dc>)
 8006122:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006126:	f04f 32ff 	mov.w	r2, #4294967295
 800612a:	f7fa fcff 	bl	8000b2c <__aeabi_dcmpun>
 800612e:	bb88      	cbnz	r0, 8006194 <_printf_float+0xd0>
 8006130:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006134:	4b9a      	ldr	r3, [pc, #616]	; (80063a0 <_printf_float+0x2dc>)
 8006136:	f04f 32ff 	mov.w	r2, #4294967295
 800613a:	f7fa fcd9 	bl	8000af0 <__aeabi_dcmple>
 800613e:	bb48      	cbnz	r0, 8006194 <_printf_float+0xd0>
 8006140:	2200      	movs	r2, #0
 8006142:	2300      	movs	r3, #0
 8006144:	4640      	mov	r0, r8
 8006146:	4649      	mov	r1, r9
 8006148:	f7fa fcc8 	bl	8000adc <__aeabi_dcmplt>
 800614c:	b110      	cbz	r0, 8006154 <_printf_float+0x90>
 800614e:	232d      	movs	r3, #45	; 0x2d
 8006150:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006154:	4b93      	ldr	r3, [pc, #588]	; (80063a4 <_printf_float+0x2e0>)
 8006156:	4894      	ldr	r0, [pc, #592]	; (80063a8 <_printf_float+0x2e4>)
 8006158:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800615c:	bf94      	ite	ls
 800615e:	4698      	movls	r8, r3
 8006160:	4680      	movhi	r8, r0
 8006162:	2303      	movs	r3, #3
 8006164:	6123      	str	r3, [r4, #16]
 8006166:	9b05      	ldr	r3, [sp, #20]
 8006168:	f023 0204 	bic.w	r2, r3, #4
 800616c:	6022      	str	r2, [r4, #0]
 800616e:	f04f 0900 	mov.w	r9, #0
 8006172:	9700      	str	r7, [sp, #0]
 8006174:	4633      	mov	r3, r6
 8006176:	aa0b      	add	r2, sp, #44	; 0x2c
 8006178:	4621      	mov	r1, r4
 800617a:	4628      	mov	r0, r5
 800617c:	f000 f9d8 	bl	8006530 <_printf_common>
 8006180:	3001      	adds	r0, #1
 8006182:	f040 8090 	bne.w	80062a6 <_printf_float+0x1e2>
 8006186:	f04f 30ff 	mov.w	r0, #4294967295
 800618a:	b00d      	add	sp, #52	; 0x34
 800618c:	ecbd 8b02 	vpop	{d8}
 8006190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006194:	4642      	mov	r2, r8
 8006196:	464b      	mov	r3, r9
 8006198:	4640      	mov	r0, r8
 800619a:	4649      	mov	r1, r9
 800619c:	f7fa fcc6 	bl	8000b2c <__aeabi_dcmpun>
 80061a0:	b140      	cbz	r0, 80061b4 <_printf_float+0xf0>
 80061a2:	464b      	mov	r3, r9
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	bfbc      	itt	lt
 80061a8:	232d      	movlt	r3, #45	; 0x2d
 80061aa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80061ae:	487f      	ldr	r0, [pc, #508]	; (80063ac <_printf_float+0x2e8>)
 80061b0:	4b7f      	ldr	r3, [pc, #508]	; (80063b0 <_printf_float+0x2ec>)
 80061b2:	e7d1      	b.n	8006158 <_printf_float+0x94>
 80061b4:	6863      	ldr	r3, [r4, #4]
 80061b6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80061ba:	9206      	str	r2, [sp, #24]
 80061bc:	1c5a      	adds	r2, r3, #1
 80061be:	d13f      	bne.n	8006240 <_printf_float+0x17c>
 80061c0:	2306      	movs	r3, #6
 80061c2:	6063      	str	r3, [r4, #4]
 80061c4:	9b05      	ldr	r3, [sp, #20]
 80061c6:	6861      	ldr	r1, [r4, #4]
 80061c8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80061cc:	2300      	movs	r3, #0
 80061ce:	9303      	str	r3, [sp, #12]
 80061d0:	ab0a      	add	r3, sp, #40	; 0x28
 80061d2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80061d6:	ab09      	add	r3, sp, #36	; 0x24
 80061d8:	ec49 8b10 	vmov	d0, r8, r9
 80061dc:	9300      	str	r3, [sp, #0]
 80061de:	6022      	str	r2, [r4, #0]
 80061e0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80061e4:	4628      	mov	r0, r5
 80061e6:	f7ff fecd 	bl	8005f84 <__cvt>
 80061ea:	9b06      	ldr	r3, [sp, #24]
 80061ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 80061ee:	2b47      	cmp	r3, #71	; 0x47
 80061f0:	4680      	mov	r8, r0
 80061f2:	d108      	bne.n	8006206 <_printf_float+0x142>
 80061f4:	1cc8      	adds	r0, r1, #3
 80061f6:	db02      	blt.n	80061fe <_printf_float+0x13a>
 80061f8:	6863      	ldr	r3, [r4, #4]
 80061fa:	4299      	cmp	r1, r3
 80061fc:	dd41      	ble.n	8006282 <_printf_float+0x1be>
 80061fe:	f1ab 0b02 	sub.w	fp, fp, #2
 8006202:	fa5f fb8b 	uxtb.w	fp, fp
 8006206:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800620a:	d820      	bhi.n	800624e <_printf_float+0x18a>
 800620c:	3901      	subs	r1, #1
 800620e:	465a      	mov	r2, fp
 8006210:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006214:	9109      	str	r1, [sp, #36]	; 0x24
 8006216:	f7ff ff17 	bl	8006048 <__exponent>
 800621a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800621c:	1813      	adds	r3, r2, r0
 800621e:	2a01      	cmp	r2, #1
 8006220:	4681      	mov	r9, r0
 8006222:	6123      	str	r3, [r4, #16]
 8006224:	dc02      	bgt.n	800622c <_printf_float+0x168>
 8006226:	6822      	ldr	r2, [r4, #0]
 8006228:	07d2      	lsls	r2, r2, #31
 800622a:	d501      	bpl.n	8006230 <_printf_float+0x16c>
 800622c:	3301      	adds	r3, #1
 800622e:	6123      	str	r3, [r4, #16]
 8006230:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006234:	2b00      	cmp	r3, #0
 8006236:	d09c      	beq.n	8006172 <_printf_float+0xae>
 8006238:	232d      	movs	r3, #45	; 0x2d
 800623a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800623e:	e798      	b.n	8006172 <_printf_float+0xae>
 8006240:	9a06      	ldr	r2, [sp, #24]
 8006242:	2a47      	cmp	r2, #71	; 0x47
 8006244:	d1be      	bne.n	80061c4 <_printf_float+0x100>
 8006246:	2b00      	cmp	r3, #0
 8006248:	d1bc      	bne.n	80061c4 <_printf_float+0x100>
 800624a:	2301      	movs	r3, #1
 800624c:	e7b9      	b.n	80061c2 <_printf_float+0xfe>
 800624e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006252:	d118      	bne.n	8006286 <_printf_float+0x1c2>
 8006254:	2900      	cmp	r1, #0
 8006256:	6863      	ldr	r3, [r4, #4]
 8006258:	dd0b      	ble.n	8006272 <_printf_float+0x1ae>
 800625a:	6121      	str	r1, [r4, #16]
 800625c:	b913      	cbnz	r3, 8006264 <_printf_float+0x1a0>
 800625e:	6822      	ldr	r2, [r4, #0]
 8006260:	07d0      	lsls	r0, r2, #31
 8006262:	d502      	bpl.n	800626a <_printf_float+0x1a6>
 8006264:	3301      	adds	r3, #1
 8006266:	440b      	add	r3, r1
 8006268:	6123      	str	r3, [r4, #16]
 800626a:	65a1      	str	r1, [r4, #88]	; 0x58
 800626c:	f04f 0900 	mov.w	r9, #0
 8006270:	e7de      	b.n	8006230 <_printf_float+0x16c>
 8006272:	b913      	cbnz	r3, 800627a <_printf_float+0x1b6>
 8006274:	6822      	ldr	r2, [r4, #0]
 8006276:	07d2      	lsls	r2, r2, #31
 8006278:	d501      	bpl.n	800627e <_printf_float+0x1ba>
 800627a:	3302      	adds	r3, #2
 800627c:	e7f4      	b.n	8006268 <_printf_float+0x1a4>
 800627e:	2301      	movs	r3, #1
 8006280:	e7f2      	b.n	8006268 <_printf_float+0x1a4>
 8006282:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006286:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006288:	4299      	cmp	r1, r3
 800628a:	db05      	blt.n	8006298 <_printf_float+0x1d4>
 800628c:	6823      	ldr	r3, [r4, #0]
 800628e:	6121      	str	r1, [r4, #16]
 8006290:	07d8      	lsls	r0, r3, #31
 8006292:	d5ea      	bpl.n	800626a <_printf_float+0x1a6>
 8006294:	1c4b      	adds	r3, r1, #1
 8006296:	e7e7      	b.n	8006268 <_printf_float+0x1a4>
 8006298:	2900      	cmp	r1, #0
 800629a:	bfd4      	ite	le
 800629c:	f1c1 0202 	rsble	r2, r1, #2
 80062a0:	2201      	movgt	r2, #1
 80062a2:	4413      	add	r3, r2
 80062a4:	e7e0      	b.n	8006268 <_printf_float+0x1a4>
 80062a6:	6823      	ldr	r3, [r4, #0]
 80062a8:	055a      	lsls	r2, r3, #21
 80062aa:	d407      	bmi.n	80062bc <_printf_float+0x1f8>
 80062ac:	6923      	ldr	r3, [r4, #16]
 80062ae:	4642      	mov	r2, r8
 80062b0:	4631      	mov	r1, r6
 80062b2:	4628      	mov	r0, r5
 80062b4:	47b8      	blx	r7
 80062b6:	3001      	adds	r0, #1
 80062b8:	d12c      	bne.n	8006314 <_printf_float+0x250>
 80062ba:	e764      	b.n	8006186 <_printf_float+0xc2>
 80062bc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80062c0:	f240 80e0 	bls.w	8006484 <_printf_float+0x3c0>
 80062c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80062c8:	2200      	movs	r2, #0
 80062ca:	2300      	movs	r3, #0
 80062cc:	f7fa fbfc 	bl	8000ac8 <__aeabi_dcmpeq>
 80062d0:	2800      	cmp	r0, #0
 80062d2:	d034      	beq.n	800633e <_printf_float+0x27a>
 80062d4:	4a37      	ldr	r2, [pc, #220]	; (80063b4 <_printf_float+0x2f0>)
 80062d6:	2301      	movs	r3, #1
 80062d8:	4631      	mov	r1, r6
 80062da:	4628      	mov	r0, r5
 80062dc:	47b8      	blx	r7
 80062de:	3001      	adds	r0, #1
 80062e0:	f43f af51 	beq.w	8006186 <_printf_float+0xc2>
 80062e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80062e8:	429a      	cmp	r2, r3
 80062ea:	db02      	blt.n	80062f2 <_printf_float+0x22e>
 80062ec:	6823      	ldr	r3, [r4, #0]
 80062ee:	07d8      	lsls	r0, r3, #31
 80062f0:	d510      	bpl.n	8006314 <_printf_float+0x250>
 80062f2:	ee18 3a10 	vmov	r3, s16
 80062f6:	4652      	mov	r2, sl
 80062f8:	4631      	mov	r1, r6
 80062fa:	4628      	mov	r0, r5
 80062fc:	47b8      	blx	r7
 80062fe:	3001      	adds	r0, #1
 8006300:	f43f af41 	beq.w	8006186 <_printf_float+0xc2>
 8006304:	f04f 0800 	mov.w	r8, #0
 8006308:	f104 091a 	add.w	r9, r4, #26
 800630c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800630e:	3b01      	subs	r3, #1
 8006310:	4543      	cmp	r3, r8
 8006312:	dc09      	bgt.n	8006328 <_printf_float+0x264>
 8006314:	6823      	ldr	r3, [r4, #0]
 8006316:	079b      	lsls	r3, r3, #30
 8006318:	f100 8105 	bmi.w	8006526 <_printf_float+0x462>
 800631c:	68e0      	ldr	r0, [r4, #12]
 800631e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006320:	4298      	cmp	r0, r3
 8006322:	bfb8      	it	lt
 8006324:	4618      	movlt	r0, r3
 8006326:	e730      	b.n	800618a <_printf_float+0xc6>
 8006328:	2301      	movs	r3, #1
 800632a:	464a      	mov	r2, r9
 800632c:	4631      	mov	r1, r6
 800632e:	4628      	mov	r0, r5
 8006330:	47b8      	blx	r7
 8006332:	3001      	adds	r0, #1
 8006334:	f43f af27 	beq.w	8006186 <_printf_float+0xc2>
 8006338:	f108 0801 	add.w	r8, r8, #1
 800633c:	e7e6      	b.n	800630c <_printf_float+0x248>
 800633e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006340:	2b00      	cmp	r3, #0
 8006342:	dc39      	bgt.n	80063b8 <_printf_float+0x2f4>
 8006344:	4a1b      	ldr	r2, [pc, #108]	; (80063b4 <_printf_float+0x2f0>)
 8006346:	2301      	movs	r3, #1
 8006348:	4631      	mov	r1, r6
 800634a:	4628      	mov	r0, r5
 800634c:	47b8      	blx	r7
 800634e:	3001      	adds	r0, #1
 8006350:	f43f af19 	beq.w	8006186 <_printf_float+0xc2>
 8006354:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006358:	4313      	orrs	r3, r2
 800635a:	d102      	bne.n	8006362 <_printf_float+0x29e>
 800635c:	6823      	ldr	r3, [r4, #0]
 800635e:	07d9      	lsls	r1, r3, #31
 8006360:	d5d8      	bpl.n	8006314 <_printf_float+0x250>
 8006362:	ee18 3a10 	vmov	r3, s16
 8006366:	4652      	mov	r2, sl
 8006368:	4631      	mov	r1, r6
 800636a:	4628      	mov	r0, r5
 800636c:	47b8      	blx	r7
 800636e:	3001      	adds	r0, #1
 8006370:	f43f af09 	beq.w	8006186 <_printf_float+0xc2>
 8006374:	f04f 0900 	mov.w	r9, #0
 8006378:	f104 0a1a 	add.w	sl, r4, #26
 800637c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800637e:	425b      	negs	r3, r3
 8006380:	454b      	cmp	r3, r9
 8006382:	dc01      	bgt.n	8006388 <_printf_float+0x2c4>
 8006384:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006386:	e792      	b.n	80062ae <_printf_float+0x1ea>
 8006388:	2301      	movs	r3, #1
 800638a:	4652      	mov	r2, sl
 800638c:	4631      	mov	r1, r6
 800638e:	4628      	mov	r0, r5
 8006390:	47b8      	blx	r7
 8006392:	3001      	adds	r0, #1
 8006394:	f43f aef7 	beq.w	8006186 <_printf_float+0xc2>
 8006398:	f109 0901 	add.w	r9, r9, #1
 800639c:	e7ee      	b.n	800637c <_printf_float+0x2b8>
 800639e:	bf00      	nop
 80063a0:	7fefffff 	.word	0x7fefffff
 80063a4:	0800b064 	.word	0x0800b064
 80063a8:	0800b068 	.word	0x0800b068
 80063ac:	0800b070 	.word	0x0800b070
 80063b0:	0800b06c 	.word	0x0800b06c
 80063b4:	0800b074 	.word	0x0800b074
 80063b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80063ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80063bc:	429a      	cmp	r2, r3
 80063be:	bfa8      	it	ge
 80063c0:	461a      	movge	r2, r3
 80063c2:	2a00      	cmp	r2, #0
 80063c4:	4691      	mov	r9, r2
 80063c6:	dc37      	bgt.n	8006438 <_printf_float+0x374>
 80063c8:	f04f 0b00 	mov.w	fp, #0
 80063cc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80063d0:	f104 021a 	add.w	r2, r4, #26
 80063d4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80063d6:	9305      	str	r3, [sp, #20]
 80063d8:	eba3 0309 	sub.w	r3, r3, r9
 80063dc:	455b      	cmp	r3, fp
 80063de:	dc33      	bgt.n	8006448 <_printf_float+0x384>
 80063e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80063e4:	429a      	cmp	r2, r3
 80063e6:	db3b      	blt.n	8006460 <_printf_float+0x39c>
 80063e8:	6823      	ldr	r3, [r4, #0]
 80063ea:	07da      	lsls	r2, r3, #31
 80063ec:	d438      	bmi.n	8006460 <_printf_float+0x39c>
 80063ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063f0:	9a05      	ldr	r2, [sp, #20]
 80063f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80063f4:	1a9a      	subs	r2, r3, r2
 80063f6:	eba3 0901 	sub.w	r9, r3, r1
 80063fa:	4591      	cmp	r9, r2
 80063fc:	bfa8      	it	ge
 80063fe:	4691      	movge	r9, r2
 8006400:	f1b9 0f00 	cmp.w	r9, #0
 8006404:	dc35      	bgt.n	8006472 <_printf_float+0x3ae>
 8006406:	f04f 0800 	mov.w	r8, #0
 800640a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800640e:	f104 0a1a 	add.w	sl, r4, #26
 8006412:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006416:	1a9b      	subs	r3, r3, r2
 8006418:	eba3 0309 	sub.w	r3, r3, r9
 800641c:	4543      	cmp	r3, r8
 800641e:	f77f af79 	ble.w	8006314 <_printf_float+0x250>
 8006422:	2301      	movs	r3, #1
 8006424:	4652      	mov	r2, sl
 8006426:	4631      	mov	r1, r6
 8006428:	4628      	mov	r0, r5
 800642a:	47b8      	blx	r7
 800642c:	3001      	adds	r0, #1
 800642e:	f43f aeaa 	beq.w	8006186 <_printf_float+0xc2>
 8006432:	f108 0801 	add.w	r8, r8, #1
 8006436:	e7ec      	b.n	8006412 <_printf_float+0x34e>
 8006438:	4613      	mov	r3, r2
 800643a:	4631      	mov	r1, r6
 800643c:	4642      	mov	r2, r8
 800643e:	4628      	mov	r0, r5
 8006440:	47b8      	blx	r7
 8006442:	3001      	adds	r0, #1
 8006444:	d1c0      	bne.n	80063c8 <_printf_float+0x304>
 8006446:	e69e      	b.n	8006186 <_printf_float+0xc2>
 8006448:	2301      	movs	r3, #1
 800644a:	4631      	mov	r1, r6
 800644c:	4628      	mov	r0, r5
 800644e:	9205      	str	r2, [sp, #20]
 8006450:	47b8      	blx	r7
 8006452:	3001      	adds	r0, #1
 8006454:	f43f ae97 	beq.w	8006186 <_printf_float+0xc2>
 8006458:	9a05      	ldr	r2, [sp, #20]
 800645a:	f10b 0b01 	add.w	fp, fp, #1
 800645e:	e7b9      	b.n	80063d4 <_printf_float+0x310>
 8006460:	ee18 3a10 	vmov	r3, s16
 8006464:	4652      	mov	r2, sl
 8006466:	4631      	mov	r1, r6
 8006468:	4628      	mov	r0, r5
 800646a:	47b8      	blx	r7
 800646c:	3001      	adds	r0, #1
 800646e:	d1be      	bne.n	80063ee <_printf_float+0x32a>
 8006470:	e689      	b.n	8006186 <_printf_float+0xc2>
 8006472:	9a05      	ldr	r2, [sp, #20]
 8006474:	464b      	mov	r3, r9
 8006476:	4442      	add	r2, r8
 8006478:	4631      	mov	r1, r6
 800647a:	4628      	mov	r0, r5
 800647c:	47b8      	blx	r7
 800647e:	3001      	adds	r0, #1
 8006480:	d1c1      	bne.n	8006406 <_printf_float+0x342>
 8006482:	e680      	b.n	8006186 <_printf_float+0xc2>
 8006484:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006486:	2a01      	cmp	r2, #1
 8006488:	dc01      	bgt.n	800648e <_printf_float+0x3ca>
 800648a:	07db      	lsls	r3, r3, #31
 800648c:	d538      	bpl.n	8006500 <_printf_float+0x43c>
 800648e:	2301      	movs	r3, #1
 8006490:	4642      	mov	r2, r8
 8006492:	4631      	mov	r1, r6
 8006494:	4628      	mov	r0, r5
 8006496:	47b8      	blx	r7
 8006498:	3001      	adds	r0, #1
 800649a:	f43f ae74 	beq.w	8006186 <_printf_float+0xc2>
 800649e:	ee18 3a10 	vmov	r3, s16
 80064a2:	4652      	mov	r2, sl
 80064a4:	4631      	mov	r1, r6
 80064a6:	4628      	mov	r0, r5
 80064a8:	47b8      	blx	r7
 80064aa:	3001      	adds	r0, #1
 80064ac:	f43f ae6b 	beq.w	8006186 <_printf_float+0xc2>
 80064b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80064b4:	2200      	movs	r2, #0
 80064b6:	2300      	movs	r3, #0
 80064b8:	f7fa fb06 	bl	8000ac8 <__aeabi_dcmpeq>
 80064bc:	b9d8      	cbnz	r0, 80064f6 <_printf_float+0x432>
 80064be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064c0:	f108 0201 	add.w	r2, r8, #1
 80064c4:	3b01      	subs	r3, #1
 80064c6:	4631      	mov	r1, r6
 80064c8:	4628      	mov	r0, r5
 80064ca:	47b8      	blx	r7
 80064cc:	3001      	adds	r0, #1
 80064ce:	d10e      	bne.n	80064ee <_printf_float+0x42a>
 80064d0:	e659      	b.n	8006186 <_printf_float+0xc2>
 80064d2:	2301      	movs	r3, #1
 80064d4:	4652      	mov	r2, sl
 80064d6:	4631      	mov	r1, r6
 80064d8:	4628      	mov	r0, r5
 80064da:	47b8      	blx	r7
 80064dc:	3001      	adds	r0, #1
 80064de:	f43f ae52 	beq.w	8006186 <_printf_float+0xc2>
 80064e2:	f108 0801 	add.w	r8, r8, #1
 80064e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064e8:	3b01      	subs	r3, #1
 80064ea:	4543      	cmp	r3, r8
 80064ec:	dcf1      	bgt.n	80064d2 <_printf_float+0x40e>
 80064ee:	464b      	mov	r3, r9
 80064f0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80064f4:	e6dc      	b.n	80062b0 <_printf_float+0x1ec>
 80064f6:	f04f 0800 	mov.w	r8, #0
 80064fa:	f104 0a1a 	add.w	sl, r4, #26
 80064fe:	e7f2      	b.n	80064e6 <_printf_float+0x422>
 8006500:	2301      	movs	r3, #1
 8006502:	4642      	mov	r2, r8
 8006504:	e7df      	b.n	80064c6 <_printf_float+0x402>
 8006506:	2301      	movs	r3, #1
 8006508:	464a      	mov	r2, r9
 800650a:	4631      	mov	r1, r6
 800650c:	4628      	mov	r0, r5
 800650e:	47b8      	blx	r7
 8006510:	3001      	adds	r0, #1
 8006512:	f43f ae38 	beq.w	8006186 <_printf_float+0xc2>
 8006516:	f108 0801 	add.w	r8, r8, #1
 800651a:	68e3      	ldr	r3, [r4, #12]
 800651c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800651e:	1a5b      	subs	r3, r3, r1
 8006520:	4543      	cmp	r3, r8
 8006522:	dcf0      	bgt.n	8006506 <_printf_float+0x442>
 8006524:	e6fa      	b.n	800631c <_printf_float+0x258>
 8006526:	f04f 0800 	mov.w	r8, #0
 800652a:	f104 0919 	add.w	r9, r4, #25
 800652e:	e7f4      	b.n	800651a <_printf_float+0x456>

08006530 <_printf_common>:
 8006530:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006534:	4616      	mov	r6, r2
 8006536:	4699      	mov	r9, r3
 8006538:	688a      	ldr	r2, [r1, #8]
 800653a:	690b      	ldr	r3, [r1, #16]
 800653c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006540:	4293      	cmp	r3, r2
 8006542:	bfb8      	it	lt
 8006544:	4613      	movlt	r3, r2
 8006546:	6033      	str	r3, [r6, #0]
 8006548:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800654c:	4607      	mov	r7, r0
 800654e:	460c      	mov	r4, r1
 8006550:	b10a      	cbz	r2, 8006556 <_printf_common+0x26>
 8006552:	3301      	adds	r3, #1
 8006554:	6033      	str	r3, [r6, #0]
 8006556:	6823      	ldr	r3, [r4, #0]
 8006558:	0699      	lsls	r1, r3, #26
 800655a:	bf42      	ittt	mi
 800655c:	6833      	ldrmi	r3, [r6, #0]
 800655e:	3302      	addmi	r3, #2
 8006560:	6033      	strmi	r3, [r6, #0]
 8006562:	6825      	ldr	r5, [r4, #0]
 8006564:	f015 0506 	ands.w	r5, r5, #6
 8006568:	d106      	bne.n	8006578 <_printf_common+0x48>
 800656a:	f104 0a19 	add.w	sl, r4, #25
 800656e:	68e3      	ldr	r3, [r4, #12]
 8006570:	6832      	ldr	r2, [r6, #0]
 8006572:	1a9b      	subs	r3, r3, r2
 8006574:	42ab      	cmp	r3, r5
 8006576:	dc26      	bgt.n	80065c6 <_printf_common+0x96>
 8006578:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800657c:	1e13      	subs	r3, r2, #0
 800657e:	6822      	ldr	r2, [r4, #0]
 8006580:	bf18      	it	ne
 8006582:	2301      	movne	r3, #1
 8006584:	0692      	lsls	r2, r2, #26
 8006586:	d42b      	bmi.n	80065e0 <_printf_common+0xb0>
 8006588:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800658c:	4649      	mov	r1, r9
 800658e:	4638      	mov	r0, r7
 8006590:	47c0      	blx	r8
 8006592:	3001      	adds	r0, #1
 8006594:	d01e      	beq.n	80065d4 <_printf_common+0xa4>
 8006596:	6823      	ldr	r3, [r4, #0]
 8006598:	68e5      	ldr	r5, [r4, #12]
 800659a:	6832      	ldr	r2, [r6, #0]
 800659c:	f003 0306 	and.w	r3, r3, #6
 80065a0:	2b04      	cmp	r3, #4
 80065a2:	bf08      	it	eq
 80065a4:	1aad      	subeq	r5, r5, r2
 80065a6:	68a3      	ldr	r3, [r4, #8]
 80065a8:	6922      	ldr	r2, [r4, #16]
 80065aa:	bf0c      	ite	eq
 80065ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80065b0:	2500      	movne	r5, #0
 80065b2:	4293      	cmp	r3, r2
 80065b4:	bfc4      	itt	gt
 80065b6:	1a9b      	subgt	r3, r3, r2
 80065b8:	18ed      	addgt	r5, r5, r3
 80065ba:	2600      	movs	r6, #0
 80065bc:	341a      	adds	r4, #26
 80065be:	42b5      	cmp	r5, r6
 80065c0:	d11a      	bne.n	80065f8 <_printf_common+0xc8>
 80065c2:	2000      	movs	r0, #0
 80065c4:	e008      	b.n	80065d8 <_printf_common+0xa8>
 80065c6:	2301      	movs	r3, #1
 80065c8:	4652      	mov	r2, sl
 80065ca:	4649      	mov	r1, r9
 80065cc:	4638      	mov	r0, r7
 80065ce:	47c0      	blx	r8
 80065d0:	3001      	adds	r0, #1
 80065d2:	d103      	bne.n	80065dc <_printf_common+0xac>
 80065d4:	f04f 30ff 	mov.w	r0, #4294967295
 80065d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065dc:	3501      	adds	r5, #1
 80065de:	e7c6      	b.n	800656e <_printf_common+0x3e>
 80065e0:	18e1      	adds	r1, r4, r3
 80065e2:	1c5a      	adds	r2, r3, #1
 80065e4:	2030      	movs	r0, #48	; 0x30
 80065e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80065ea:	4422      	add	r2, r4
 80065ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80065f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80065f4:	3302      	adds	r3, #2
 80065f6:	e7c7      	b.n	8006588 <_printf_common+0x58>
 80065f8:	2301      	movs	r3, #1
 80065fa:	4622      	mov	r2, r4
 80065fc:	4649      	mov	r1, r9
 80065fe:	4638      	mov	r0, r7
 8006600:	47c0      	blx	r8
 8006602:	3001      	adds	r0, #1
 8006604:	d0e6      	beq.n	80065d4 <_printf_common+0xa4>
 8006606:	3601      	adds	r6, #1
 8006608:	e7d9      	b.n	80065be <_printf_common+0x8e>
	...

0800660c <_printf_i>:
 800660c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006610:	7e0f      	ldrb	r7, [r1, #24]
 8006612:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006614:	2f78      	cmp	r7, #120	; 0x78
 8006616:	4691      	mov	r9, r2
 8006618:	4680      	mov	r8, r0
 800661a:	460c      	mov	r4, r1
 800661c:	469a      	mov	sl, r3
 800661e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006622:	d807      	bhi.n	8006634 <_printf_i+0x28>
 8006624:	2f62      	cmp	r7, #98	; 0x62
 8006626:	d80a      	bhi.n	800663e <_printf_i+0x32>
 8006628:	2f00      	cmp	r7, #0
 800662a:	f000 80d8 	beq.w	80067de <_printf_i+0x1d2>
 800662e:	2f58      	cmp	r7, #88	; 0x58
 8006630:	f000 80a3 	beq.w	800677a <_printf_i+0x16e>
 8006634:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006638:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800663c:	e03a      	b.n	80066b4 <_printf_i+0xa8>
 800663e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006642:	2b15      	cmp	r3, #21
 8006644:	d8f6      	bhi.n	8006634 <_printf_i+0x28>
 8006646:	a101      	add	r1, pc, #4	; (adr r1, 800664c <_printf_i+0x40>)
 8006648:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800664c:	080066a5 	.word	0x080066a5
 8006650:	080066b9 	.word	0x080066b9
 8006654:	08006635 	.word	0x08006635
 8006658:	08006635 	.word	0x08006635
 800665c:	08006635 	.word	0x08006635
 8006660:	08006635 	.word	0x08006635
 8006664:	080066b9 	.word	0x080066b9
 8006668:	08006635 	.word	0x08006635
 800666c:	08006635 	.word	0x08006635
 8006670:	08006635 	.word	0x08006635
 8006674:	08006635 	.word	0x08006635
 8006678:	080067c5 	.word	0x080067c5
 800667c:	080066e9 	.word	0x080066e9
 8006680:	080067a7 	.word	0x080067a7
 8006684:	08006635 	.word	0x08006635
 8006688:	08006635 	.word	0x08006635
 800668c:	080067e7 	.word	0x080067e7
 8006690:	08006635 	.word	0x08006635
 8006694:	080066e9 	.word	0x080066e9
 8006698:	08006635 	.word	0x08006635
 800669c:	08006635 	.word	0x08006635
 80066a0:	080067af 	.word	0x080067af
 80066a4:	682b      	ldr	r3, [r5, #0]
 80066a6:	1d1a      	adds	r2, r3, #4
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	602a      	str	r2, [r5, #0]
 80066ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80066b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80066b4:	2301      	movs	r3, #1
 80066b6:	e0a3      	b.n	8006800 <_printf_i+0x1f4>
 80066b8:	6820      	ldr	r0, [r4, #0]
 80066ba:	6829      	ldr	r1, [r5, #0]
 80066bc:	0606      	lsls	r6, r0, #24
 80066be:	f101 0304 	add.w	r3, r1, #4
 80066c2:	d50a      	bpl.n	80066da <_printf_i+0xce>
 80066c4:	680e      	ldr	r6, [r1, #0]
 80066c6:	602b      	str	r3, [r5, #0]
 80066c8:	2e00      	cmp	r6, #0
 80066ca:	da03      	bge.n	80066d4 <_printf_i+0xc8>
 80066cc:	232d      	movs	r3, #45	; 0x2d
 80066ce:	4276      	negs	r6, r6
 80066d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066d4:	485e      	ldr	r0, [pc, #376]	; (8006850 <_printf_i+0x244>)
 80066d6:	230a      	movs	r3, #10
 80066d8:	e019      	b.n	800670e <_printf_i+0x102>
 80066da:	680e      	ldr	r6, [r1, #0]
 80066dc:	602b      	str	r3, [r5, #0]
 80066de:	f010 0f40 	tst.w	r0, #64	; 0x40
 80066e2:	bf18      	it	ne
 80066e4:	b236      	sxthne	r6, r6
 80066e6:	e7ef      	b.n	80066c8 <_printf_i+0xbc>
 80066e8:	682b      	ldr	r3, [r5, #0]
 80066ea:	6820      	ldr	r0, [r4, #0]
 80066ec:	1d19      	adds	r1, r3, #4
 80066ee:	6029      	str	r1, [r5, #0]
 80066f0:	0601      	lsls	r1, r0, #24
 80066f2:	d501      	bpl.n	80066f8 <_printf_i+0xec>
 80066f4:	681e      	ldr	r6, [r3, #0]
 80066f6:	e002      	b.n	80066fe <_printf_i+0xf2>
 80066f8:	0646      	lsls	r6, r0, #25
 80066fa:	d5fb      	bpl.n	80066f4 <_printf_i+0xe8>
 80066fc:	881e      	ldrh	r6, [r3, #0]
 80066fe:	4854      	ldr	r0, [pc, #336]	; (8006850 <_printf_i+0x244>)
 8006700:	2f6f      	cmp	r7, #111	; 0x6f
 8006702:	bf0c      	ite	eq
 8006704:	2308      	moveq	r3, #8
 8006706:	230a      	movne	r3, #10
 8006708:	2100      	movs	r1, #0
 800670a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800670e:	6865      	ldr	r5, [r4, #4]
 8006710:	60a5      	str	r5, [r4, #8]
 8006712:	2d00      	cmp	r5, #0
 8006714:	bfa2      	ittt	ge
 8006716:	6821      	ldrge	r1, [r4, #0]
 8006718:	f021 0104 	bicge.w	r1, r1, #4
 800671c:	6021      	strge	r1, [r4, #0]
 800671e:	b90e      	cbnz	r6, 8006724 <_printf_i+0x118>
 8006720:	2d00      	cmp	r5, #0
 8006722:	d04d      	beq.n	80067c0 <_printf_i+0x1b4>
 8006724:	4615      	mov	r5, r2
 8006726:	fbb6 f1f3 	udiv	r1, r6, r3
 800672a:	fb03 6711 	mls	r7, r3, r1, r6
 800672e:	5dc7      	ldrb	r7, [r0, r7]
 8006730:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006734:	4637      	mov	r7, r6
 8006736:	42bb      	cmp	r3, r7
 8006738:	460e      	mov	r6, r1
 800673a:	d9f4      	bls.n	8006726 <_printf_i+0x11a>
 800673c:	2b08      	cmp	r3, #8
 800673e:	d10b      	bne.n	8006758 <_printf_i+0x14c>
 8006740:	6823      	ldr	r3, [r4, #0]
 8006742:	07de      	lsls	r6, r3, #31
 8006744:	d508      	bpl.n	8006758 <_printf_i+0x14c>
 8006746:	6923      	ldr	r3, [r4, #16]
 8006748:	6861      	ldr	r1, [r4, #4]
 800674a:	4299      	cmp	r1, r3
 800674c:	bfde      	ittt	le
 800674e:	2330      	movle	r3, #48	; 0x30
 8006750:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006754:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006758:	1b52      	subs	r2, r2, r5
 800675a:	6122      	str	r2, [r4, #16]
 800675c:	f8cd a000 	str.w	sl, [sp]
 8006760:	464b      	mov	r3, r9
 8006762:	aa03      	add	r2, sp, #12
 8006764:	4621      	mov	r1, r4
 8006766:	4640      	mov	r0, r8
 8006768:	f7ff fee2 	bl	8006530 <_printf_common>
 800676c:	3001      	adds	r0, #1
 800676e:	d14c      	bne.n	800680a <_printf_i+0x1fe>
 8006770:	f04f 30ff 	mov.w	r0, #4294967295
 8006774:	b004      	add	sp, #16
 8006776:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800677a:	4835      	ldr	r0, [pc, #212]	; (8006850 <_printf_i+0x244>)
 800677c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006780:	6829      	ldr	r1, [r5, #0]
 8006782:	6823      	ldr	r3, [r4, #0]
 8006784:	f851 6b04 	ldr.w	r6, [r1], #4
 8006788:	6029      	str	r1, [r5, #0]
 800678a:	061d      	lsls	r5, r3, #24
 800678c:	d514      	bpl.n	80067b8 <_printf_i+0x1ac>
 800678e:	07df      	lsls	r7, r3, #31
 8006790:	bf44      	itt	mi
 8006792:	f043 0320 	orrmi.w	r3, r3, #32
 8006796:	6023      	strmi	r3, [r4, #0]
 8006798:	b91e      	cbnz	r6, 80067a2 <_printf_i+0x196>
 800679a:	6823      	ldr	r3, [r4, #0]
 800679c:	f023 0320 	bic.w	r3, r3, #32
 80067a0:	6023      	str	r3, [r4, #0]
 80067a2:	2310      	movs	r3, #16
 80067a4:	e7b0      	b.n	8006708 <_printf_i+0xfc>
 80067a6:	6823      	ldr	r3, [r4, #0]
 80067a8:	f043 0320 	orr.w	r3, r3, #32
 80067ac:	6023      	str	r3, [r4, #0]
 80067ae:	2378      	movs	r3, #120	; 0x78
 80067b0:	4828      	ldr	r0, [pc, #160]	; (8006854 <_printf_i+0x248>)
 80067b2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80067b6:	e7e3      	b.n	8006780 <_printf_i+0x174>
 80067b8:	0659      	lsls	r1, r3, #25
 80067ba:	bf48      	it	mi
 80067bc:	b2b6      	uxthmi	r6, r6
 80067be:	e7e6      	b.n	800678e <_printf_i+0x182>
 80067c0:	4615      	mov	r5, r2
 80067c2:	e7bb      	b.n	800673c <_printf_i+0x130>
 80067c4:	682b      	ldr	r3, [r5, #0]
 80067c6:	6826      	ldr	r6, [r4, #0]
 80067c8:	6961      	ldr	r1, [r4, #20]
 80067ca:	1d18      	adds	r0, r3, #4
 80067cc:	6028      	str	r0, [r5, #0]
 80067ce:	0635      	lsls	r5, r6, #24
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	d501      	bpl.n	80067d8 <_printf_i+0x1cc>
 80067d4:	6019      	str	r1, [r3, #0]
 80067d6:	e002      	b.n	80067de <_printf_i+0x1d2>
 80067d8:	0670      	lsls	r0, r6, #25
 80067da:	d5fb      	bpl.n	80067d4 <_printf_i+0x1c8>
 80067dc:	8019      	strh	r1, [r3, #0]
 80067de:	2300      	movs	r3, #0
 80067e0:	6123      	str	r3, [r4, #16]
 80067e2:	4615      	mov	r5, r2
 80067e4:	e7ba      	b.n	800675c <_printf_i+0x150>
 80067e6:	682b      	ldr	r3, [r5, #0]
 80067e8:	1d1a      	adds	r2, r3, #4
 80067ea:	602a      	str	r2, [r5, #0]
 80067ec:	681d      	ldr	r5, [r3, #0]
 80067ee:	6862      	ldr	r2, [r4, #4]
 80067f0:	2100      	movs	r1, #0
 80067f2:	4628      	mov	r0, r5
 80067f4:	f7f9 fcf4 	bl	80001e0 <memchr>
 80067f8:	b108      	cbz	r0, 80067fe <_printf_i+0x1f2>
 80067fa:	1b40      	subs	r0, r0, r5
 80067fc:	6060      	str	r0, [r4, #4]
 80067fe:	6863      	ldr	r3, [r4, #4]
 8006800:	6123      	str	r3, [r4, #16]
 8006802:	2300      	movs	r3, #0
 8006804:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006808:	e7a8      	b.n	800675c <_printf_i+0x150>
 800680a:	6923      	ldr	r3, [r4, #16]
 800680c:	462a      	mov	r2, r5
 800680e:	4649      	mov	r1, r9
 8006810:	4640      	mov	r0, r8
 8006812:	47d0      	blx	sl
 8006814:	3001      	adds	r0, #1
 8006816:	d0ab      	beq.n	8006770 <_printf_i+0x164>
 8006818:	6823      	ldr	r3, [r4, #0]
 800681a:	079b      	lsls	r3, r3, #30
 800681c:	d413      	bmi.n	8006846 <_printf_i+0x23a>
 800681e:	68e0      	ldr	r0, [r4, #12]
 8006820:	9b03      	ldr	r3, [sp, #12]
 8006822:	4298      	cmp	r0, r3
 8006824:	bfb8      	it	lt
 8006826:	4618      	movlt	r0, r3
 8006828:	e7a4      	b.n	8006774 <_printf_i+0x168>
 800682a:	2301      	movs	r3, #1
 800682c:	4632      	mov	r2, r6
 800682e:	4649      	mov	r1, r9
 8006830:	4640      	mov	r0, r8
 8006832:	47d0      	blx	sl
 8006834:	3001      	adds	r0, #1
 8006836:	d09b      	beq.n	8006770 <_printf_i+0x164>
 8006838:	3501      	adds	r5, #1
 800683a:	68e3      	ldr	r3, [r4, #12]
 800683c:	9903      	ldr	r1, [sp, #12]
 800683e:	1a5b      	subs	r3, r3, r1
 8006840:	42ab      	cmp	r3, r5
 8006842:	dcf2      	bgt.n	800682a <_printf_i+0x21e>
 8006844:	e7eb      	b.n	800681e <_printf_i+0x212>
 8006846:	2500      	movs	r5, #0
 8006848:	f104 0619 	add.w	r6, r4, #25
 800684c:	e7f5      	b.n	800683a <_printf_i+0x22e>
 800684e:	bf00      	nop
 8006850:	0800b076 	.word	0x0800b076
 8006854:	0800b087 	.word	0x0800b087

08006858 <_scanf_float>:
 8006858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800685c:	b087      	sub	sp, #28
 800685e:	4617      	mov	r7, r2
 8006860:	9303      	str	r3, [sp, #12]
 8006862:	688b      	ldr	r3, [r1, #8]
 8006864:	1e5a      	subs	r2, r3, #1
 8006866:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800686a:	bf83      	ittte	hi
 800686c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006870:	195b      	addhi	r3, r3, r5
 8006872:	9302      	strhi	r3, [sp, #8]
 8006874:	2300      	movls	r3, #0
 8006876:	bf86      	itte	hi
 8006878:	f240 135d 	movwhi	r3, #349	; 0x15d
 800687c:	608b      	strhi	r3, [r1, #8]
 800687e:	9302      	strls	r3, [sp, #8]
 8006880:	680b      	ldr	r3, [r1, #0]
 8006882:	468b      	mov	fp, r1
 8006884:	2500      	movs	r5, #0
 8006886:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800688a:	f84b 3b1c 	str.w	r3, [fp], #28
 800688e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006892:	4680      	mov	r8, r0
 8006894:	460c      	mov	r4, r1
 8006896:	465e      	mov	r6, fp
 8006898:	46aa      	mov	sl, r5
 800689a:	46a9      	mov	r9, r5
 800689c:	9501      	str	r5, [sp, #4]
 800689e:	68a2      	ldr	r2, [r4, #8]
 80068a0:	b152      	cbz	r2, 80068b8 <_scanf_float+0x60>
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	781b      	ldrb	r3, [r3, #0]
 80068a6:	2b4e      	cmp	r3, #78	; 0x4e
 80068a8:	d864      	bhi.n	8006974 <_scanf_float+0x11c>
 80068aa:	2b40      	cmp	r3, #64	; 0x40
 80068ac:	d83c      	bhi.n	8006928 <_scanf_float+0xd0>
 80068ae:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80068b2:	b2c8      	uxtb	r0, r1
 80068b4:	280e      	cmp	r0, #14
 80068b6:	d93a      	bls.n	800692e <_scanf_float+0xd6>
 80068b8:	f1b9 0f00 	cmp.w	r9, #0
 80068bc:	d003      	beq.n	80068c6 <_scanf_float+0x6e>
 80068be:	6823      	ldr	r3, [r4, #0]
 80068c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068c4:	6023      	str	r3, [r4, #0]
 80068c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80068ca:	f1ba 0f01 	cmp.w	sl, #1
 80068ce:	f200 8113 	bhi.w	8006af8 <_scanf_float+0x2a0>
 80068d2:	455e      	cmp	r6, fp
 80068d4:	f200 8105 	bhi.w	8006ae2 <_scanf_float+0x28a>
 80068d8:	2501      	movs	r5, #1
 80068da:	4628      	mov	r0, r5
 80068dc:	b007      	add	sp, #28
 80068de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068e2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80068e6:	2a0d      	cmp	r2, #13
 80068e8:	d8e6      	bhi.n	80068b8 <_scanf_float+0x60>
 80068ea:	a101      	add	r1, pc, #4	; (adr r1, 80068f0 <_scanf_float+0x98>)
 80068ec:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80068f0:	08006a2f 	.word	0x08006a2f
 80068f4:	080068b9 	.word	0x080068b9
 80068f8:	080068b9 	.word	0x080068b9
 80068fc:	080068b9 	.word	0x080068b9
 8006900:	08006a8f 	.word	0x08006a8f
 8006904:	08006a67 	.word	0x08006a67
 8006908:	080068b9 	.word	0x080068b9
 800690c:	080068b9 	.word	0x080068b9
 8006910:	08006a3d 	.word	0x08006a3d
 8006914:	080068b9 	.word	0x080068b9
 8006918:	080068b9 	.word	0x080068b9
 800691c:	080068b9 	.word	0x080068b9
 8006920:	080068b9 	.word	0x080068b9
 8006924:	080069f5 	.word	0x080069f5
 8006928:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800692c:	e7db      	b.n	80068e6 <_scanf_float+0x8e>
 800692e:	290e      	cmp	r1, #14
 8006930:	d8c2      	bhi.n	80068b8 <_scanf_float+0x60>
 8006932:	a001      	add	r0, pc, #4	; (adr r0, 8006938 <_scanf_float+0xe0>)
 8006934:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006938:	080069e7 	.word	0x080069e7
 800693c:	080068b9 	.word	0x080068b9
 8006940:	080069e7 	.word	0x080069e7
 8006944:	08006a7b 	.word	0x08006a7b
 8006948:	080068b9 	.word	0x080068b9
 800694c:	08006995 	.word	0x08006995
 8006950:	080069d1 	.word	0x080069d1
 8006954:	080069d1 	.word	0x080069d1
 8006958:	080069d1 	.word	0x080069d1
 800695c:	080069d1 	.word	0x080069d1
 8006960:	080069d1 	.word	0x080069d1
 8006964:	080069d1 	.word	0x080069d1
 8006968:	080069d1 	.word	0x080069d1
 800696c:	080069d1 	.word	0x080069d1
 8006970:	080069d1 	.word	0x080069d1
 8006974:	2b6e      	cmp	r3, #110	; 0x6e
 8006976:	d809      	bhi.n	800698c <_scanf_float+0x134>
 8006978:	2b60      	cmp	r3, #96	; 0x60
 800697a:	d8b2      	bhi.n	80068e2 <_scanf_float+0x8a>
 800697c:	2b54      	cmp	r3, #84	; 0x54
 800697e:	d077      	beq.n	8006a70 <_scanf_float+0x218>
 8006980:	2b59      	cmp	r3, #89	; 0x59
 8006982:	d199      	bne.n	80068b8 <_scanf_float+0x60>
 8006984:	2d07      	cmp	r5, #7
 8006986:	d197      	bne.n	80068b8 <_scanf_float+0x60>
 8006988:	2508      	movs	r5, #8
 800698a:	e029      	b.n	80069e0 <_scanf_float+0x188>
 800698c:	2b74      	cmp	r3, #116	; 0x74
 800698e:	d06f      	beq.n	8006a70 <_scanf_float+0x218>
 8006990:	2b79      	cmp	r3, #121	; 0x79
 8006992:	e7f6      	b.n	8006982 <_scanf_float+0x12a>
 8006994:	6821      	ldr	r1, [r4, #0]
 8006996:	05c8      	lsls	r0, r1, #23
 8006998:	d51a      	bpl.n	80069d0 <_scanf_float+0x178>
 800699a:	9b02      	ldr	r3, [sp, #8]
 800699c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80069a0:	6021      	str	r1, [r4, #0]
 80069a2:	f109 0901 	add.w	r9, r9, #1
 80069a6:	b11b      	cbz	r3, 80069b0 <_scanf_float+0x158>
 80069a8:	3b01      	subs	r3, #1
 80069aa:	3201      	adds	r2, #1
 80069ac:	9302      	str	r3, [sp, #8]
 80069ae:	60a2      	str	r2, [r4, #8]
 80069b0:	68a3      	ldr	r3, [r4, #8]
 80069b2:	3b01      	subs	r3, #1
 80069b4:	60a3      	str	r3, [r4, #8]
 80069b6:	6923      	ldr	r3, [r4, #16]
 80069b8:	3301      	adds	r3, #1
 80069ba:	6123      	str	r3, [r4, #16]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	3b01      	subs	r3, #1
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	607b      	str	r3, [r7, #4]
 80069c4:	f340 8084 	ble.w	8006ad0 <_scanf_float+0x278>
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	3301      	adds	r3, #1
 80069cc:	603b      	str	r3, [r7, #0]
 80069ce:	e766      	b.n	800689e <_scanf_float+0x46>
 80069d0:	eb1a 0f05 	cmn.w	sl, r5
 80069d4:	f47f af70 	bne.w	80068b8 <_scanf_float+0x60>
 80069d8:	6822      	ldr	r2, [r4, #0]
 80069da:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80069de:	6022      	str	r2, [r4, #0]
 80069e0:	f806 3b01 	strb.w	r3, [r6], #1
 80069e4:	e7e4      	b.n	80069b0 <_scanf_float+0x158>
 80069e6:	6822      	ldr	r2, [r4, #0]
 80069e8:	0610      	lsls	r0, r2, #24
 80069ea:	f57f af65 	bpl.w	80068b8 <_scanf_float+0x60>
 80069ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80069f2:	e7f4      	b.n	80069de <_scanf_float+0x186>
 80069f4:	f1ba 0f00 	cmp.w	sl, #0
 80069f8:	d10e      	bne.n	8006a18 <_scanf_float+0x1c0>
 80069fa:	f1b9 0f00 	cmp.w	r9, #0
 80069fe:	d10e      	bne.n	8006a1e <_scanf_float+0x1c6>
 8006a00:	6822      	ldr	r2, [r4, #0]
 8006a02:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006a06:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006a0a:	d108      	bne.n	8006a1e <_scanf_float+0x1c6>
 8006a0c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006a10:	6022      	str	r2, [r4, #0]
 8006a12:	f04f 0a01 	mov.w	sl, #1
 8006a16:	e7e3      	b.n	80069e0 <_scanf_float+0x188>
 8006a18:	f1ba 0f02 	cmp.w	sl, #2
 8006a1c:	d055      	beq.n	8006aca <_scanf_float+0x272>
 8006a1e:	2d01      	cmp	r5, #1
 8006a20:	d002      	beq.n	8006a28 <_scanf_float+0x1d0>
 8006a22:	2d04      	cmp	r5, #4
 8006a24:	f47f af48 	bne.w	80068b8 <_scanf_float+0x60>
 8006a28:	3501      	adds	r5, #1
 8006a2a:	b2ed      	uxtb	r5, r5
 8006a2c:	e7d8      	b.n	80069e0 <_scanf_float+0x188>
 8006a2e:	f1ba 0f01 	cmp.w	sl, #1
 8006a32:	f47f af41 	bne.w	80068b8 <_scanf_float+0x60>
 8006a36:	f04f 0a02 	mov.w	sl, #2
 8006a3a:	e7d1      	b.n	80069e0 <_scanf_float+0x188>
 8006a3c:	b97d      	cbnz	r5, 8006a5e <_scanf_float+0x206>
 8006a3e:	f1b9 0f00 	cmp.w	r9, #0
 8006a42:	f47f af3c 	bne.w	80068be <_scanf_float+0x66>
 8006a46:	6822      	ldr	r2, [r4, #0]
 8006a48:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006a4c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006a50:	f47f af39 	bne.w	80068c6 <_scanf_float+0x6e>
 8006a54:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006a58:	6022      	str	r2, [r4, #0]
 8006a5a:	2501      	movs	r5, #1
 8006a5c:	e7c0      	b.n	80069e0 <_scanf_float+0x188>
 8006a5e:	2d03      	cmp	r5, #3
 8006a60:	d0e2      	beq.n	8006a28 <_scanf_float+0x1d0>
 8006a62:	2d05      	cmp	r5, #5
 8006a64:	e7de      	b.n	8006a24 <_scanf_float+0x1cc>
 8006a66:	2d02      	cmp	r5, #2
 8006a68:	f47f af26 	bne.w	80068b8 <_scanf_float+0x60>
 8006a6c:	2503      	movs	r5, #3
 8006a6e:	e7b7      	b.n	80069e0 <_scanf_float+0x188>
 8006a70:	2d06      	cmp	r5, #6
 8006a72:	f47f af21 	bne.w	80068b8 <_scanf_float+0x60>
 8006a76:	2507      	movs	r5, #7
 8006a78:	e7b2      	b.n	80069e0 <_scanf_float+0x188>
 8006a7a:	6822      	ldr	r2, [r4, #0]
 8006a7c:	0591      	lsls	r1, r2, #22
 8006a7e:	f57f af1b 	bpl.w	80068b8 <_scanf_float+0x60>
 8006a82:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006a86:	6022      	str	r2, [r4, #0]
 8006a88:	f8cd 9004 	str.w	r9, [sp, #4]
 8006a8c:	e7a8      	b.n	80069e0 <_scanf_float+0x188>
 8006a8e:	6822      	ldr	r2, [r4, #0]
 8006a90:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006a94:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006a98:	d006      	beq.n	8006aa8 <_scanf_float+0x250>
 8006a9a:	0550      	lsls	r0, r2, #21
 8006a9c:	f57f af0c 	bpl.w	80068b8 <_scanf_float+0x60>
 8006aa0:	f1b9 0f00 	cmp.w	r9, #0
 8006aa4:	f43f af0f 	beq.w	80068c6 <_scanf_float+0x6e>
 8006aa8:	0591      	lsls	r1, r2, #22
 8006aaa:	bf58      	it	pl
 8006aac:	9901      	ldrpl	r1, [sp, #4]
 8006aae:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006ab2:	bf58      	it	pl
 8006ab4:	eba9 0101 	subpl.w	r1, r9, r1
 8006ab8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006abc:	bf58      	it	pl
 8006abe:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006ac2:	6022      	str	r2, [r4, #0]
 8006ac4:	f04f 0900 	mov.w	r9, #0
 8006ac8:	e78a      	b.n	80069e0 <_scanf_float+0x188>
 8006aca:	f04f 0a03 	mov.w	sl, #3
 8006ace:	e787      	b.n	80069e0 <_scanf_float+0x188>
 8006ad0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006ad4:	4639      	mov	r1, r7
 8006ad6:	4640      	mov	r0, r8
 8006ad8:	4798      	blx	r3
 8006ada:	2800      	cmp	r0, #0
 8006adc:	f43f aedf 	beq.w	800689e <_scanf_float+0x46>
 8006ae0:	e6ea      	b.n	80068b8 <_scanf_float+0x60>
 8006ae2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006ae6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006aea:	463a      	mov	r2, r7
 8006aec:	4640      	mov	r0, r8
 8006aee:	4798      	blx	r3
 8006af0:	6923      	ldr	r3, [r4, #16]
 8006af2:	3b01      	subs	r3, #1
 8006af4:	6123      	str	r3, [r4, #16]
 8006af6:	e6ec      	b.n	80068d2 <_scanf_float+0x7a>
 8006af8:	1e6b      	subs	r3, r5, #1
 8006afa:	2b06      	cmp	r3, #6
 8006afc:	d825      	bhi.n	8006b4a <_scanf_float+0x2f2>
 8006afe:	2d02      	cmp	r5, #2
 8006b00:	d836      	bhi.n	8006b70 <_scanf_float+0x318>
 8006b02:	455e      	cmp	r6, fp
 8006b04:	f67f aee8 	bls.w	80068d8 <_scanf_float+0x80>
 8006b08:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006b0c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006b10:	463a      	mov	r2, r7
 8006b12:	4640      	mov	r0, r8
 8006b14:	4798      	blx	r3
 8006b16:	6923      	ldr	r3, [r4, #16]
 8006b18:	3b01      	subs	r3, #1
 8006b1a:	6123      	str	r3, [r4, #16]
 8006b1c:	e7f1      	b.n	8006b02 <_scanf_float+0x2aa>
 8006b1e:	9802      	ldr	r0, [sp, #8]
 8006b20:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006b24:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006b28:	9002      	str	r0, [sp, #8]
 8006b2a:	463a      	mov	r2, r7
 8006b2c:	4640      	mov	r0, r8
 8006b2e:	4798      	blx	r3
 8006b30:	6923      	ldr	r3, [r4, #16]
 8006b32:	3b01      	subs	r3, #1
 8006b34:	6123      	str	r3, [r4, #16]
 8006b36:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006b3a:	fa5f fa8a 	uxtb.w	sl, sl
 8006b3e:	f1ba 0f02 	cmp.w	sl, #2
 8006b42:	d1ec      	bne.n	8006b1e <_scanf_float+0x2c6>
 8006b44:	3d03      	subs	r5, #3
 8006b46:	b2ed      	uxtb	r5, r5
 8006b48:	1b76      	subs	r6, r6, r5
 8006b4a:	6823      	ldr	r3, [r4, #0]
 8006b4c:	05da      	lsls	r2, r3, #23
 8006b4e:	d52f      	bpl.n	8006bb0 <_scanf_float+0x358>
 8006b50:	055b      	lsls	r3, r3, #21
 8006b52:	d510      	bpl.n	8006b76 <_scanf_float+0x31e>
 8006b54:	455e      	cmp	r6, fp
 8006b56:	f67f aebf 	bls.w	80068d8 <_scanf_float+0x80>
 8006b5a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006b5e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006b62:	463a      	mov	r2, r7
 8006b64:	4640      	mov	r0, r8
 8006b66:	4798      	blx	r3
 8006b68:	6923      	ldr	r3, [r4, #16]
 8006b6a:	3b01      	subs	r3, #1
 8006b6c:	6123      	str	r3, [r4, #16]
 8006b6e:	e7f1      	b.n	8006b54 <_scanf_float+0x2fc>
 8006b70:	46aa      	mov	sl, r5
 8006b72:	9602      	str	r6, [sp, #8]
 8006b74:	e7df      	b.n	8006b36 <_scanf_float+0x2de>
 8006b76:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006b7a:	6923      	ldr	r3, [r4, #16]
 8006b7c:	2965      	cmp	r1, #101	; 0x65
 8006b7e:	f103 33ff 	add.w	r3, r3, #4294967295
 8006b82:	f106 35ff 	add.w	r5, r6, #4294967295
 8006b86:	6123      	str	r3, [r4, #16]
 8006b88:	d00c      	beq.n	8006ba4 <_scanf_float+0x34c>
 8006b8a:	2945      	cmp	r1, #69	; 0x45
 8006b8c:	d00a      	beq.n	8006ba4 <_scanf_float+0x34c>
 8006b8e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006b92:	463a      	mov	r2, r7
 8006b94:	4640      	mov	r0, r8
 8006b96:	4798      	blx	r3
 8006b98:	6923      	ldr	r3, [r4, #16]
 8006b9a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006b9e:	3b01      	subs	r3, #1
 8006ba0:	1eb5      	subs	r5, r6, #2
 8006ba2:	6123      	str	r3, [r4, #16]
 8006ba4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006ba8:	463a      	mov	r2, r7
 8006baa:	4640      	mov	r0, r8
 8006bac:	4798      	blx	r3
 8006bae:	462e      	mov	r6, r5
 8006bb0:	6825      	ldr	r5, [r4, #0]
 8006bb2:	f015 0510 	ands.w	r5, r5, #16
 8006bb6:	d159      	bne.n	8006c6c <_scanf_float+0x414>
 8006bb8:	7035      	strb	r5, [r6, #0]
 8006bba:	6823      	ldr	r3, [r4, #0]
 8006bbc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006bc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bc4:	d11b      	bne.n	8006bfe <_scanf_float+0x3a6>
 8006bc6:	9b01      	ldr	r3, [sp, #4]
 8006bc8:	454b      	cmp	r3, r9
 8006bca:	eba3 0209 	sub.w	r2, r3, r9
 8006bce:	d123      	bne.n	8006c18 <_scanf_float+0x3c0>
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	4659      	mov	r1, fp
 8006bd4:	4640      	mov	r0, r8
 8006bd6:	f000 fe99 	bl	800790c <_strtod_r>
 8006bda:	6822      	ldr	r2, [r4, #0]
 8006bdc:	9b03      	ldr	r3, [sp, #12]
 8006bde:	f012 0f02 	tst.w	r2, #2
 8006be2:	ec57 6b10 	vmov	r6, r7, d0
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	d021      	beq.n	8006c2e <_scanf_float+0x3d6>
 8006bea:	9903      	ldr	r1, [sp, #12]
 8006bec:	1d1a      	adds	r2, r3, #4
 8006bee:	600a      	str	r2, [r1, #0]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	e9c3 6700 	strd	r6, r7, [r3]
 8006bf6:	68e3      	ldr	r3, [r4, #12]
 8006bf8:	3301      	adds	r3, #1
 8006bfa:	60e3      	str	r3, [r4, #12]
 8006bfc:	e66d      	b.n	80068da <_scanf_float+0x82>
 8006bfe:	9b04      	ldr	r3, [sp, #16]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d0e5      	beq.n	8006bd0 <_scanf_float+0x378>
 8006c04:	9905      	ldr	r1, [sp, #20]
 8006c06:	230a      	movs	r3, #10
 8006c08:	462a      	mov	r2, r5
 8006c0a:	3101      	adds	r1, #1
 8006c0c:	4640      	mov	r0, r8
 8006c0e:	f000 ff05 	bl	8007a1c <_strtol_r>
 8006c12:	9b04      	ldr	r3, [sp, #16]
 8006c14:	9e05      	ldr	r6, [sp, #20]
 8006c16:	1ac2      	subs	r2, r0, r3
 8006c18:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006c1c:	429e      	cmp	r6, r3
 8006c1e:	bf28      	it	cs
 8006c20:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006c24:	4912      	ldr	r1, [pc, #72]	; (8006c70 <_scanf_float+0x418>)
 8006c26:	4630      	mov	r0, r6
 8006c28:	f000 f82c 	bl	8006c84 <siprintf>
 8006c2c:	e7d0      	b.n	8006bd0 <_scanf_float+0x378>
 8006c2e:	9903      	ldr	r1, [sp, #12]
 8006c30:	f012 0f04 	tst.w	r2, #4
 8006c34:	f103 0204 	add.w	r2, r3, #4
 8006c38:	600a      	str	r2, [r1, #0]
 8006c3a:	d1d9      	bne.n	8006bf0 <_scanf_float+0x398>
 8006c3c:	f8d3 8000 	ldr.w	r8, [r3]
 8006c40:	ee10 2a10 	vmov	r2, s0
 8006c44:	ee10 0a10 	vmov	r0, s0
 8006c48:	463b      	mov	r3, r7
 8006c4a:	4639      	mov	r1, r7
 8006c4c:	f7f9 ff6e 	bl	8000b2c <__aeabi_dcmpun>
 8006c50:	b128      	cbz	r0, 8006c5e <_scanf_float+0x406>
 8006c52:	4808      	ldr	r0, [pc, #32]	; (8006c74 <_scanf_float+0x41c>)
 8006c54:	f000 f810 	bl	8006c78 <nanf>
 8006c58:	ed88 0a00 	vstr	s0, [r8]
 8006c5c:	e7cb      	b.n	8006bf6 <_scanf_float+0x39e>
 8006c5e:	4630      	mov	r0, r6
 8006c60:	4639      	mov	r1, r7
 8006c62:	f7f9 ffc1 	bl	8000be8 <__aeabi_d2f>
 8006c66:	f8c8 0000 	str.w	r0, [r8]
 8006c6a:	e7c4      	b.n	8006bf6 <_scanf_float+0x39e>
 8006c6c:	2500      	movs	r5, #0
 8006c6e:	e634      	b.n	80068da <_scanf_float+0x82>
 8006c70:	0800b098 	.word	0x0800b098
 8006c74:	0800b4a0 	.word	0x0800b4a0

08006c78 <nanf>:
 8006c78:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006c80 <nanf+0x8>
 8006c7c:	4770      	bx	lr
 8006c7e:	bf00      	nop
 8006c80:	7fc00000 	.word	0x7fc00000

08006c84 <siprintf>:
 8006c84:	b40e      	push	{r1, r2, r3}
 8006c86:	b500      	push	{lr}
 8006c88:	b09c      	sub	sp, #112	; 0x70
 8006c8a:	ab1d      	add	r3, sp, #116	; 0x74
 8006c8c:	9002      	str	r0, [sp, #8]
 8006c8e:	9006      	str	r0, [sp, #24]
 8006c90:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006c94:	4809      	ldr	r0, [pc, #36]	; (8006cbc <siprintf+0x38>)
 8006c96:	9107      	str	r1, [sp, #28]
 8006c98:	9104      	str	r1, [sp, #16]
 8006c9a:	4909      	ldr	r1, [pc, #36]	; (8006cc0 <siprintf+0x3c>)
 8006c9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ca0:	9105      	str	r1, [sp, #20]
 8006ca2:	6800      	ldr	r0, [r0, #0]
 8006ca4:	9301      	str	r3, [sp, #4]
 8006ca6:	a902      	add	r1, sp, #8
 8006ca8:	f002 fee4 	bl	8009a74 <_svfiprintf_r>
 8006cac:	9b02      	ldr	r3, [sp, #8]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	701a      	strb	r2, [r3, #0]
 8006cb2:	b01c      	add	sp, #112	; 0x70
 8006cb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8006cb8:	b003      	add	sp, #12
 8006cba:	4770      	bx	lr
 8006cbc:	2000000c 	.word	0x2000000c
 8006cc0:	ffff0208 	.word	0xffff0208

08006cc4 <sulp>:
 8006cc4:	b570      	push	{r4, r5, r6, lr}
 8006cc6:	4604      	mov	r4, r0
 8006cc8:	460d      	mov	r5, r1
 8006cca:	ec45 4b10 	vmov	d0, r4, r5
 8006cce:	4616      	mov	r6, r2
 8006cd0:	f002 fc2e 	bl	8009530 <__ulp>
 8006cd4:	ec51 0b10 	vmov	r0, r1, d0
 8006cd8:	b17e      	cbz	r6, 8006cfa <sulp+0x36>
 8006cda:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006cde:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	dd09      	ble.n	8006cfa <sulp+0x36>
 8006ce6:	051b      	lsls	r3, r3, #20
 8006ce8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006cec:	2400      	movs	r4, #0
 8006cee:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006cf2:	4622      	mov	r2, r4
 8006cf4:	462b      	mov	r3, r5
 8006cf6:	f7f9 fc7f 	bl	80005f8 <__aeabi_dmul>
 8006cfa:	bd70      	pop	{r4, r5, r6, pc}
 8006cfc:	0000      	movs	r0, r0
	...

08006d00 <_strtod_l>:
 8006d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d04:	ed2d 8b02 	vpush	{d8}
 8006d08:	b09d      	sub	sp, #116	; 0x74
 8006d0a:	461f      	mov	r7, r3
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	9318      	str	r3, [sp, #96]	; 0x60
 8006d10:	4ba2      	ldr	r3, [pc, #648]	; (8006f9c <_strtod_l+0x29c>)
 8006d12:	9213      	str	r2, [sp, #76]	; 0x4c
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	9305      	str	r3, [sp, #20]
 8006d18:	4604      	mov	r4, r0
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	4688      	mov	r8, r1
 8006d1e:	f7f9 fa57 	bl	80001d0 <strlen>
 8006d22:	f04f 0a00 	mov.w	sl, #0
 8006d26:	4605      	mov	r5, r0
 8006d28:	f04f 0b00 	mov.w	fp, #0
 8006d2c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006d30:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006d32:	781a      	ldrb	r2, [r3, #0]
 8006d34:	2a2b      	cmp	r2, #43	; 0x2b
 8006d36:	d04e      	beq.n	8006dd6 <_strtod_l+0xd6>
 8006d38:	d83b      	bhi.n	8006db2 <_strtod_l+0xb2>
 8006d3a:	2a0d      	cmp	r2, #13
 8006d3c:	d834      	bhi.n	8006da8 <_strtod_l+0xa8>
 8006d3e:	2a08      	cmp	r2, #8
 8006d40:	d834      	bhi.n	8006dac <_strtod_l+0xac>
 8006d42:	2a00      	cmp	r2, #0
 8006d44:	d03e      	beq.n	8006dc4 <_strtod_l+0xc4>
 8006d46:	2300      	movs	r3, #0
 8006d48:	930a      	str	r3, [sp, #40]	; 0x28
 8006d4a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8006d4c:	7833      	ldrb	r3, [r6, #0]
 8006d4e:	2b30      	cmp	r3, #48	; 0x30
 8006d50:	f040 80b0 	bne.w	8006eb4 <_strtod_l+0x1b4>
 8006d54:	7873      	ldrb	r3, [r6, #1]
 8006d56:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006d5a:	2b58      	cmp	r3, #88	; 0x58
 8006d5c:	d168      	bne.n	8006e30 <_strtod_l+0x130>
 8006d5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d60:	9301      	str	r3, [sp, #4]
 8006d62:	ab18      	add	r3, sp, #96	; 0x60
 8006d64:	9702      	str	r7, [sp, #8]
 8006d66:	9300      	str	r3, [sp, #0]
 8006d68:	4a8d      	ldr	r2, [pc, #564]	; (8006fa0 <_strtod_l+0x2a0>)
 8006d6a:	ab19      	add	r3, sp, #100	; 0x64
 8006d6c:	a917      	add	r1, sp, #92	; 0x5c
 8006d6e:	4620      	mov	r0, r4
 8006d70:	f001 fd38 	bl	80087e4 <__gethex>
 8006d74:	f010 0707 	ands.w	r7, r0, #7
 8006d78:	4605      	mov	r5, r0
 8006d7a:	d005      	beq.n	8006d88 <_strtod_l+0x88>
 8006d7c:	2f06      	cmp	r7, #6
 8006d7e:	d12c      	bne.n	8006dda <_strtod_l+0xda>
 8006d80:	3601      	adds	r6, #1
 8006d82:	2300      	movs	r3, #0
 8006d84:	9617      	str	r6, [sp, #92]	; 0x5c
 8006d86:	930a      	str	r3, [sp, #40]	; 0x28
 8006d88:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	f040 8590 	bne.w	80078b0 <_strtod_l+0xbb0>
 8006d90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d92:	b1eb      	cbz	r3, 8006dd0 <_strtod_l+0xd0>
 8006d94:	4652      	mov	r2, sl
 8006d96:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006d9a:	ec43 2b10 	vmov	d0, r2, r3
 8006d9e:	b01d      	add	sp, #116	; 0x74
 8006da0:	ecbd 8b02 	vpop	{d8}
 8006da4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006da8:	2a20      	cmp	r2, #32
 8006daa:	d1cc      	bne.n	8006d46 <_strtod_l+0x46>
 8006dac:	3301      	adds	r3, #1
 8006dae:	9317      	str	r3, [sp, #92]	; 0x5c
 8006db0:	e7be      	b.n	8006d30 <_strtod_l+0x30>
 8006db2:	2a2d      	cmp	r2, #45	; 0x2d
 8006db4:	d1c7      	bne.n	8006d46 <_strtod_l+0x46>
 8006db6:	2201      	movs	r2, #1
 8006db8:	920a      	str	r2, [sp, #40]	; 0x28
 8006dba:	1c5a      	adds	r2, r3, #1
 8006dbc:	9217      	str	r2, [sp, #92]	; 0x5c
 8006dbe:	785b      	ldrb	r3, [r3, #1]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d1c2      	bne.n	8006d4a <_strtod_l+0x4a>
 8006dc4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006dc6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	f040 856e 	bne.w	80078ac <_strtod_l+0xbac>
 8006dd0:	4652      	mov	r2, sl
 8006dd2:	465b      	mov	r3, fp
 8006dd4:	e7e1      	b.n	8006d9a <_strtod_l+0x9a>
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	e7ee      	b.n	8006db8 <_strtod_l+0xb8>
 8006dda:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006ddc:	b13a      	cbz	r2, 8006dee <_strtod_l+0xee>
 8006dde:	2135      	movs	r1, #53	; 0x35
 8006de0:	a81a      	add	r0, sp, #104	; 0x68
 8006de2:	f002 fcb0 	bl	8009746 <__copybits>
 8006de6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006de8:	4620      	mov	r0, r4
 8006dea:	f002 f86f 	bl	8008ecc <_Bfree>
 8006dee:	3f01      	subs	r7, #1
 8006df0:	2f04      	cmp	r7, #4
 8006df2:	d806      	bhi.n	8006e02 <_strtod_l+0x102>
 8006df4:	e8df f007 	tbb	[pc, r7]
 8006df8:	1714030a 	.word	0x1714030a
 8006dfc:	0a          	.byte	0x0a
 8006dfd:	00          	.byte	0x00
 8006dfe:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8006e02:	0728      	lsls	r0, r5, #28
 8006e04:	d5c0      	bpl.n	8006d88 <_strtod_l+0x88>
 8006e06:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8006e0a:	e7bd      	b.n	8006d88 <_strtod_l+0x88>
 8006e0c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8006e10:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006e12:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006e16:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006e1a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006e1e:	e7f0      	b.n	8006e02 <_strtod_l+0x102>
 8006e20:	f8df b180 	ldr.w	fp, [pc, #384]	; 8006fa4 <_strtod_l+0x2a4>
 8006e24:	e7ed      	b.n	8006e02 <_strtod_l+0x102>
 8006e26:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8006e2a:	f04f 3aff 	mov.w	sl, #4294967295
 8006e2e:	e7e8      	b.n	8006e02 <_strtod_l+0x102>
 8006e30:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006e32:	1c5a      	adds	r2, r3, #1
 8006e34:	9217      	str	r2, [sp, #92]	; 0x5c
 8006e36:	785b      	ldrb	r3, [r3, #1]
 8006e38:	2b30      	cmp	r3, #48	; 0x30
 8006e3a:	d0f9      	beq.n	8006e30 <_strtod_l+0x130>
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d0a3      	beq.n	8006d88 <_strtod_l+0x88>
 8006e40:	2301      	movs	r3, #1
 8006e42:	f04f 0900 	mov.w	r9, #0
 8006e46:	9304      	str	r3, [sp, #16]
 8006e48:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006e4a:	9308      	str	r3, [sp, #32]
 8006e4c:	f8cd 901c 	str.w	r9, [sp, #28]
 8006e50:	464f      	mov	r7, r9
 8006e52:	220a      	movs	r2, #10
 8006e54:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8006e56:	7806      	ldrb	r6, [r0, #0]
 8006e58:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8006e5c:	b2d9      	uxtb	r1, r3
 8006e5e:	2909      	cmp	r1, #9
 8006e60:	d92a      	bls.n	8006eb8 <_strtod_l+0x1b8>
 8006e62:	9905      	ldr	r1, [sp, #20]
 8006e64:	462a      	mov	r2, r5
 8006e66:	f002 ff1f 	bl	8009ca8 <strncmp>
 8006e6a:	b398      	cbz	r0, 8006ed4 <_strtod_l+0x1d4>
 8006e6c:	2000      	movs	r0, #0
 8006e6e:	4632      	mov	r2, r6
 8006e70:	463d      	mov	r5, r7
 8006e72:	9005      	str	r0, [sp, #20]
 8006e74:	4603      	mov	r3, r0
 8006e76:	2a65      	cmp	r2, #101	; 0x65
 8006e78:	d001      	beq.n	8006e7e <_strtod_l+0x17e>
 8006e7a:	2a45      	cmp	r2, #69	; 0x45
 8006e7c:	d118      	bne.n	8006eb0 <_strtod_l+0x1b0>
 8006e7e:	b91d      	cbnz	r5, 8006e88 <_strtod_l+0x188>
 8006e80:	9a04      	ldr	r2, [sp, #16]
 8006e82:	4302      	orrs	r2, r0
 8006e84:	d09e      	beq.n	8006dc4 <_strtod_l+0xc4>
 8006e86:	2500      	movs	r5, #0
 8006e88:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8006e8c:	f108 0201 	add.w	r2, r8, #1
 8006e90:	9217      	str	r2, [sp, #92]	; 0x5c
 8006e92:	f898 2001 	ldrb.w	r2, [r8, #1]
 8006e96:	2a2b      	cmp	r2, #43	; 0x2b
 8006e98:	d075      	beq.n	8006f86 <_strtod_l+0x286>
 8006e9a:	2a2d      	cmp	r2, #45	; 0x2d
 8006e9c:	d07b      	beq.n	8006f96 <_strtod_l+0x296>
 8006e9e:	f04f 0c00 	mov.w	ip, #0
 8006ea2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006ea6:	2909      	cmp	r1, #9
 8006ea8:	f240 8082 	bls.w	8006fb0 <_strtod_l+0x2b0>
 8006eac:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006eb0:	2600      	movs	r6, #0
 8006eb2:	e09d      	b.n	8006ff0 <_strtod_l+0x2f0>
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	e7c4      	b.n	8006e42 <_strtod_l+0x142>
 8006eb8:	2f08      	cmp	r7, #8
 8006eba:	bfd8      	it	le
 8006ebc:	9907      	ldrle	r1, [sp, #28]
 8006ebe:	f100 0001 	add.w	r0, r0, #1
 8006ec2:	bfda      	itte	le
 8006ec4:	fb02 3301 	mlale	r3, r2, r1, r3
 8006ec8:	9307      	strle	r3, [sp, #28]
 8006eca:	fb02 3909 	mlagt	r9, r2, r9, r3
 8006ece:	3701      	adds	r7, #1
 8006ed0:	9017      	str	r0, [sp, #92]	; 0x5c
 8006ed2:	e7bf      	b.n	8006e54 <_strtod_l+0x154>
 8006ed4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006ed6:	195a      	adds	r2, r3, r5
 8006ed8:	9217      	str	r2, [sp, #92]	; 0x5c
 8006eda:	5d5a      	ldrb	r2, [r3, r5]
 8006edc:	2f00      	cmp	r7, #0
 8006ede:	d037      	beq.n	8006f50 <_strtod_l+0x250>
 8006ee0:	9005      	str	r0, [sp, #20]
 8006ee2:	463d      	mov	r5, r7
 8006ee4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006ee8:	2b09      	cmp	r3, #9
 8006eea:	d912      	bls.n	8006f12 <_strtod_l+0x212>
 8006eec:	2301      	movs	r3, #1
 8006eee:	e7c2      	b.n	8006e76 <_strtod_l+0x176>
 8006ef0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006ef2:	1c5a      	adds	r2, r3, #1
 8006ef4:	9217      	str	r2, [sp, #92]	; 0x5c
 8006ef6:	785a      	ldrb	r2, [r3, #1]
 8006ef8:	3001      	adds	r0, #1
 8006efa:	2a30      	cmp	r2, #48	; 0x30
 8006efc:	d0f8      	beq.n	8006ef0 <_strtod_l+0x1f0>
 8006efe:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006f02:	2b08      	cmp	r3, #8
 8006f04:	f200 84d9 	bhi.w	80078ba <_strtod_l+0xbba>
 8006f08:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006f0a:	9005      	str	r0, [sp, #20]
 8006f0c:	2000      	movs	r0, #0
 8006f0e:	9308      	str	r3, [sp, #32]
 8006f10:	4605      	mov	r5, r0
 8006f12:	3a30      	subs	r2, #48	; 0x30
 8006f14:	f100 0301 	add.w	r3, r0, #1
 8006f18:	d014      	beq.n	8006f44 <_strtod_l+0x244>
 8006f1a:	9905      	ldr	r1, [sp, #20]
 8006f1c:	4419      	add	r1, r3
 8006f1e:	9105      	str	r1, [sp, #20]
 8006f20:	462b      	mov	r3, r5
 8006f22:	eb00 0e05 	add.w	lr, r0, r5
 8006f26:	210a      	movs	r1, #10
 8006f28:	4573      	cmp	r3, lr
 8006f2a:	d113      	bne.n	8006f54 <_strtod_l+0x254>
 8006f2c:	182b      	adds	r3, r5, r0
 8006f2e:	2b08      	cmp	r3, #8
 8006f30:	f105 0501 	add.w	r5, r5, #1
 8006f34:	4405      	add	r5, r0
 8006f36:	dc1c      	bgt.n	8006f72 <_strtod_l+0x272>
 8006f38:	9907      	ldr	r1, [sp, #28]
 8006f3a:	230a      	movs	r3, #10
 8006f3c:	fb03 2301 	mla	r3, r3, r1, r2
 8006f40:	9307      	str	r3, [sp, #28]
 8006f42:	2300      	movs	r3, #0
 8006f44:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006f46:	1c51      	adds	r1, r2, #1
 8006f48:	9117      	str	r1, [sp, #92]	; 0x5c
 8006f4a:	7852      	ldrb	r2, [r2, #1]
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	e7c9      	b.n	8006ee4 <_strtod_l+0x1e4>
 8006f50:	4638      	mov	r0, r7
 8006f52:	e7d2      	b.n	8006efa <_strtod_l+0x1fa>
 8006f54:	2b08      	cmp	r3, #8
 8006f56:	dc04      	bgt.n	8006f62 <_strtod_l+0x262>
 8006f58:	9e07      	ldr	r6, [sp, #28]
 8006f5a:	434e      	muls	r6, r1
 8006f5c:	9607      	str	r6, [sp, #28]
 8006f5e:	3301      	adds	r3, #1
 8006f60:	e7e2      	b.n	8006f28 <_strtod_l+0x228>
 8006f62:	f103 0c01 	add.w	ip, r3, #1
 8006f66:	f1bc 0f10 	cmp.w	ip, #16
 8006f6a:	bfd8      	it	le
 8006f6c:	fb01 f909 	mulle.w	r9, r1, r9
 8006f70:	e7f5      	b.n	8006f5e <_strtod_l+0x25e>
 8006f72:	2d10      	cmp	r5, #16
 8006f74:	bfdc      	itt	le
 8006f76:	230a      	movle	r3, #10
 8006f78:	fb03 2909 	mlale	r9, r3, r9, r2
 8006f7c:	e7e1      	b.n	8006f42 <_strtod_l+0x242>
 8006f7e:	2300      	movs	r3, #0
 8006f80:	9305      	str	r3, [sp, #20]
 8006f82:	2301      	movs	r3, #1
 8006f84:	e77c      	b.n	8006e80 <_strtod_l+0x180>
 8006f86:	f04f 0c00 	mov.w	ip, #0
 8006f8a:	f108 0202 	add.w	r2, r8, #2
 8006f8e:	9217      	str	r2, [sp, #92]	; 0x5c
 8006f90:	f898 2002 	ldrb.w	r2, [r8, #2]
 8006f94:	e785      	b.n	8006ea2 <_strtod_l+0x1a2>
 8006f96:	f04f 0c01 	mov.w	ip, #1
 8006f9a:	e7f6      	b.n	8006f8a <_strtod_l+0x28a>
 8006f9c:	0800b2e8 	.word	0x0800b2e8
 8006fa0:	0800b0a0 	.word	0x0800b0a0
 8006fa4:	7ff00000 	.word	0x7ff00000
 8006fa8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006faa:	1c51      	adds	r1, r2, #1
 8006fac:	9117      	str	r1, [sp, #92]	; 0x5c
 8006fae:	7852      	ldrb	r2, [r2, #1]
 8006fb0:	2a30      	cmp	r2, #48	; 0x30
 8006fb2:	d0f9      	beq.n	8006fa8 <_strtod_l+0x2a8>
 8006fb4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8006fb8:	2908      	cmp	r1, #8
 8006fba:	f63f af79 	bhi.w	8006eb0 <_strtod_l+0x1b0>
 8006fbe:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8006fc2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006fc4:	9206      	str	r2, [sp, #24]
 8006fc6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006fc8:	1c51      	adds	r1, r2, #1
 8006fca:	9117      	str	r1, [sp, #92]	; 0x5c
 8006fcc:	7852      	ldrb	r2, [r2, #1]
 8006fce:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8006fd2:	2e09      	cmp	r6, #9
 8006fd4:	d937      	bls.n	8007046 <_strtod_l+0x346>
 8006fd6:	9e06      	ldr	r6, [sp, #24]
 8006fd8:	1b89      	subs	r1, r1, r6
 8006fda:	2908      	cmp	r1, #8
 8006fdc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8006fe0:	dc02      	bgt.n	8006fe8 <_strtod_l+0x2e8>
 8006fe2:	4576      	cmp	r6, lr
 8006fe4:	bfa8      	it	ge
 8006fe6:	4676      	movge	r6, lr
 8006fe8:	f1bc 0f00 	cmp.w	ip, #0
 8006fec:	d000      	beq.n	8006ff0 <_strtod_l+0x2f0>
 8006fee:	4276      	negs	r6, r6
 8006ff0:	2d00      	cmp	r5, #0
 8006ff2:	d14d      	bne.n	8007090 <_strtod_l+0x390>
 8006ff4:	9904      	ldr	r1, [sp, #16]
 8006ff6:	4301      	orrs	r1, r0
 8006ff8:	f47f aec6 	bne.w	8006d88 <_strtod_l+0x88>
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	f47f aee1 	bne.w	8006dc4 <_strtod_l+0xc4>
 8007002:	2a69      	cmp	r2, #105	; 0x69
 8007004:	d027      	beq.n	8007056 <_strtod_l+0x356>
 8007006:	dc24      	bgt.n	8007052 <_strtod_l+0x352>
 8007008:	2a49      	cmp	r2, #73	; 0x49
 800700a:	d024      	beq.n	8007056 <_strtod_l+0x356>
 800700c:	2a4e      	cmp	r2, #78	; 0x4e
 800700e:	f47f aed9 	bne.w	8006dc4 <_strtod_l+0xc4>
 8007012:	499f      	ldr	r1, [pc, #636]	; (8007290 <_strtod_l+0x590>)
 8007014:	a817      	add	r0, sp, #92	; 0x5c
 8007016:	f001 fe3d 	bl	8008c94 <__match>
 800701a:	2800      	cmp	r0, #0
 800701c:	f43f aed2 	beq.w	8006dc4 <_strtod_l+0xc4>
 8007020:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007022:	781b      	ldrb	r3, [r3, #0]
 8007024:	2b28      	cmp	r3, #40	; 0x28
 8007026:	d12d      	bne.n	8007084 <_strtod_l+0x384>
 8007028:	499a      	ldr	r1, [pc, #616]	; (8007294 <_strtod_l+0x594>)
 800702a:	aa1a      	add	r2, sp, #104	; 0x68
 800702c:	a817      	add	r0, sp, #92	; 0x5c
 800702e:	f001 fe45 	bl	8008cbc <__hexnan>
 8007032:	2805      	cmp	r0, #5
 8007034:	d126      	bne.n	8007084 <_strtod_l+0x384>
 8007036:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007038:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800703c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007040:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007044:	e6a0      	b.n	8006d88 <_strtod_l+0x88>
 8007046:	210a      	movs	r1, #10
 8007048:	fb01 2e0e 	mla	lr, r1, lr, r2
 800704c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007050:	e7b9      	b.n	8006fc6 <_strtod_l+0x2c6>
 8007052:	2a6e      	cmp	r2, #110	; 0x6e
 8007054:	e7db      	b.n	800700e <_strtod_l+0x30e>
 8007056:	4990      	ldr	r1, [pc, #576]	; (8007298 <_strtod_l+0x598>)
 8007058:	a817      	add	r0, sp, #92	; 0x5c
 800705a:	f001 fe1b 	bl	8008c94 <__match>
 800705e:	2800      	cmp	r0, #0
 8007060:	f43f aeb0 	beq.w	8006dc4 <_strtod_l+0xc4>
 8007064:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007066:	498d      	ldr	r1, [pc, #564]	; (800729c <_strtod_l+0x59c>)
 8007068:	3b01      	subs	r3, #1
 800706a:	a817      	add	r0, sp, #92	; 0x5c
 800706c:	9317      	str	r3, [sp, #92]	; 0x5c
 800706e:	f001 fe11 	bl	8008c94 <__match>
 8007072:	b910      	cbnz	r0, 800707a <_strtod_l+0x37a>
 8007074:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007076:	3301      	adds	r3, #1
 8007078:	9317      	str	r3, [sp, #92]	; 0x5c
 800707a:	f8df b230 	ldr.w	fp, [pc, #560]	; 80072ac <_strtod_l+0x5ac>
 800707e:	f04f 0a00 	mov.w	sl, #0
 8007082:	e681      	b.n	8006d88 <_strtod_l+0x88>
 8007084:	4886      	ldr	r0, [pc, #536]	; (80072a0 <_strtod_l+0x5a0>)
 8007086:	f002 fdf7 	bl	8009c78 <nan>
 800708a:	ec5b ab10 	vmov	sl, fp, d0
 800708e:	e67b      	b.n	8006d88 <_strtod_l+0x88>
 8007090:	9b05      	ldr	r3, [sp, #20]
 8007092:	9807      	ldr	r0, [sp, #28]
 8007094:	1af3      	subs	r3, r6, r3
 8007096:	2f00      	cmp	r7, #0
 8007098:	bf08      	it	eq
 800709a:	462f      	moveq	r7, r5
 800709c:	2d10      	cmp	r5, #16
 800709e:	9306      	str	r3, [sp, #24]
 80070a0:	46a8      	mov	r8, r5
 80070a2:	bfa8      	it	ge
 80070a4:	f04f 0810 	movge.w	r8, #16
 80070a8:	f7f9 fa2c 	bl	8000504 <__aeabi_ui2d>
 80070ac:	2d09      	cmp	r5, #9
 80070ae:	4682      	mov	sl, r0
 80070b0:	468b      	mov	fp, r1
 80070b2:	dd13      	ble.n	80070dc <_strtod_l+0x3dc>
 80070b4:	4b7b      	ldr	r3, [pc, #492]	; (80072a4 <_strtod_l+0x5a4>)
 80070b6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80070ba:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80070be:	f7f9 fa9b 	bl	80005f8 <__aeabi_dmul>
 80070c2:	4682      	mov	sl, r0
 80070c4:	4648      	mov	r0, r9
 80070c6:	468b      	mov	fp, r1
 80070c8:	f7f9 fa1c 	bl	8000504 <__aeabi_ui2d>
 80070cc:	4602      	mov	r2, r0
 80070ce:	460b      	mov	r3, r1
 80070d0:	4650      	mov	r0, sl
 80070d2:	4659      	mov	r1, fp
 80070d4:	f7f9 f8da 	bl	800028c <__adddf3>
 80070d8:	4682      	mov	sl, r0
 80070da:	468b      	mov	fp, r1
 80070dc:	2d0f      	cmp	r5, #15
 80070de:	dc38      	bgt.n	8007152 <_strtod_l+0x452>
 80070e0:	9b06      	ldr	r3, [sp, #24]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	f43f ae50 	beq.w	8006d88 <_strtod_l+0x88>
 80070e8:	dd24      	ble.n	8007134 <_strtod_l+0x434>
 80070ea:	2b16      	cmp	r3, #22
 80070ec:	dc0b      	bgt.n	8007106 <_strtod_l+0x406>
 80070ee:	496d      	ldr	r1, [pc, #436]	; (80072a4 <_strtod_l+0x5a4>)
 80070f0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80070f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80070f8:	4652      	mov	r2, sl
 80070fa:	465b      	mov	r3, fp
 80070fc:	f7f9 fa7c 	bl	80005f8 <__aeabi_dmul>
 8007100:	4682      	mov	sl, r0
 8007102:	468b      	mov	fp, r1
 8007104:	e640      	b.n	8006d88 <_strtod_l+0x88>
 8007106:	9a06      	ldr	r2, [sp, #24]
 8007108:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800710c:	4293      	cmp	r3, r2
 800710e:	db20      	blt.n	8007152 <_strtod_l+0x452>
 8007110:	4c64      	ldr	r4, [pc, #400]	; (80072a4 <_strtod_l+0x5a4>)
 8007112:	f1c5 050f 	rsb	r5, r5, #15
 8007116:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800711a:	4652      	mov	r2, sl
 800711c:	465b      	mov	r3, fp
 800711e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007122:	f7f9 fa69 	bl	80005f8 <__aeabi_dmul>
 8007126:	9b06      	ldr	r3, [sp, #24]
 8007128:	1b5d      	subs	r5, r3, r5
 800712a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800712e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007132:	e7e3      	b.n	80070fc <_strtod_l+0x3fc>
 8007134:	9b06      	ldr	r3, [sp, #24]
 8007136:	3316      	adds	r3, #22
 8007138:	db0b      	blt.n	8007152 <_strtod_l+0x452>
 800713a:	9b05      	ldr	r3, [sp, #20]
 800713c:	1b9e      	subs	r6, r3, r6
 800713e:	4b59      	ldr	r3, [pc, #356]	; (80072a4 <_strtod_l+0x5a4>)
 8007140:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8007144:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007148:	4650      	mov	r0, sl
 800714a:	4659      	mov	r1, fp
 800714c:	f7f9 fb7e 	bl	800084c <__aeabi_ddiv>
 8007150:	e7d6      	b.n	8007100 <_strtod_l+0x400>
 8007152:	9b06      	ldr	r3, [sp, #24]
 8007154:	eba5 0808 	sub.w	r8, r5, r8
 8007158:	4498      	add	r8, r3
 800715a:	f1b8 0f00 	cmp.w	r8, #0
 800715e:	dd74      	ble.n	800724a <_strtod_l+0x54a>
 8007160:	f018 030f 	ands.w	r3, r8, #15
 8007164:	d00a      	beq.n	800717c <_strtod_l+0x47c>
 8007166:	494f      	ldr	r1, [pc, #316]	; (80072a4 <_strtod_l+0x5a4>)
 8007168:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800716c:	4652      	mov	r2, sl
 800716e:	465b      	mov	r3, fp
 8007170:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007174:	f7f9 fa40 	bl	80005f8 <__aeabi_dmul>
 8007178:	4682      	mov	sl, r0
 800717a:	468b      	mov	fp, r1
 800717c:	f038 080f 	bics.w	r8, r8, #15
 8007180:	d04f      	beq.n	8007222 <_strtod_l+0x522>
 8007182:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8007186:	dd22      	ble.n	80071ce <_strtod_l+0x4ce>
 8007188:	2500      	movs	r5, #0
 800718a:	462e      	mov	r6, r5
 800718c:	9507      	str	r5, [sp, #28]
 800718e:	9505      	str	r5, [sp, #20]
 8007190:	2322      	movs	r3, #34	; 0x22
 8007192:	f8df b118 	ldr.w	fp, [pc, #280]	; 80072ac <_strtod_l+0x5ac>
 8007196:	6023      	str	r3, [r4, #0]
 8007198:	f04f 0a00 	mov.w	sl, #0
 800719c:	9b07      	ldr	r3, [sp, #28]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	f43f adf2 	beq.w	8006d88 <_strtod_l+0x88>
 80071a4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80071a6:	4620      	mov	r0, r4
 80071a8:	f001 fe90 	bl	8008ecc <_Bfree>
 80071ac:	9905      	ldr	r1, [sp, #20]
 80071ae:	4620      	mov	r0, r4
 80071b0:	f001 fe8c 	bl	8008ecc <_Bfree>
 80071b4:	4631      	mov	r1, r6
 80071b6:	4620      	mov	r0, r4
 80071b8:	f001 fe88 	bl	8008ecc <_Bfree>
 80071bc:	9907      	ldr	r1, [sp, #28]
 80071be:	4620      	mov	r0, r4
 80071c0:	f001 fe84 	bl	8008ecc <_Bfree>
 80071c4:	4629      	mov	r1, r5
 80071c6:	4620      	mov	r0, r4
 80071c8:	f001 fe80 	bl	8008ecc <_Bfree>
 80071cc:	e5dc      	b.n	8006d88 <_strtod_l+0x88>
 80071ce:	4b36      	ldr	r3, [pc, #216]	; (80072a8 <_strtod_l+0x5a8>)
 80071d0:	9304      	str	r3, [sp, #16]
 80071d2:	2300      	movs	r3, #0
 80071d4:	ea4f 1828 	mov.w	r8, r8, asr #4
 80071d8:	4650      	mov	r0, sl
 80071da:	4659      	mov	r1, fp
 80071dc:	4699      	mov	r9, r3
 80071de:	f1b8 0f01 	cmp.w	r8, #1
 80071e2:	dc21      	bgt.n	8007228 <_strtod_l+0x528>
 80071e4:	b10b      	cbz	r3, 80071ea <_strtod_l+0x4ea>
 80071e6:	4682      	mov	sl, r0
 80071e8:	468b      	mov	fp, r1
 80071ea:	4b2f      	ldr	r3, [pc, #188]	; (80072a8 <_strtod_l+0x5a8>)
 80071ec:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80071f0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80071f4:	4652      	mov	r2, sl
 80071f6:	465b      	mov	r3, fp
 80071f8:	e9d9 0100 	ldrd	r0, r1, [r9]
 80071fc:	f7f9 f9fc 	bl	80005f8 <__aeabi_dmul>
 8007200:	4b2a      	ldr	r3, [pc, #168]	; (80072ac <_strtod_l+0x5ac>)
 8007202:	460a      	mov	r2, r1
 8007204:	400b      	ands	r3, r1
 8007206:	492a      	ldr	r1, [pc, #168]	; (80072b0 <_strtod_l+0x5b0>)
 8007208:	428b      	cmp	r3, r1
 800720a:	4682      	mov	sl, r0
 800720c:	d8bc      	bhi.n	8007188 <_strtod_l+0x488>
 800720e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007212:	428b      	cmp	r3, r1
 8007214:	bf86      	itte	hi
 8007216:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80072b4 <_strtod_l+0x5b4>
 800721a:	f04f 3aff 	movhi.w	sl, #4294967295
 800721e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8007222:	2300      	movs	r3, #0
 8007224:	9304      	str	r3, [sp, #16]
 8007226:	e084      	b.n	8007332 <_strtod_l+0x632>
 8007228:	f018 0f01 	tst.w	r8, #1
 800722c:	d005      	beq.n	800723a <_strtod_l+0x53a>
 800722e:	9b04      	ldr	r3, [sp, #16]
 8007230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007234:	f7f9 f9e0 	bl	80005f8 <__aeabi_dmul>
 8007238:	2301      	movs	r3, #1
 800723a:	9a04      	ldr	r2, [sp, #16]
 800723c:	3208      	adds	r2, #8
 800723e:	f109 0901 	add.w	r9, r9, #1
 8007242:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007246:	9204      	str	r2, [sp, #16]
 8007248:	e7c9      	b.n	80071de <_strtod_l+0x4de>
 800724a:	d0ea      	beq.n	8007222 <_strtod_l+0x522>
 800724c:	f1c8 0800 	rsb	r8, r8, #0
 8007250:	f018 020f 	ands.w	r2, r8, #15
 8007254:	d00a      	beq.n	800726c <_strtod_l+0x56c>
 8007256:	4b13      	ldr	r3, [pc, #76]	; (80072a4 <_strtod_l+0x5a4>)
 8007258:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800725c:	4650      	mov	r0, sl
 800725e:	4659      	mov	r1, fp
 8007260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007264:	f7f9 faf2 	bl	800084c <__aeabi_ddiv>
 8007268:	4682      	mov	sl, r0
 800726a:	468b      	mov	fp, r1
 800726c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007270:	d0d7      	beq.n	8007222 <_strtod_l+0x522>
 8007272:	f1b8 0f1f 	cmp.w	r8, #31
 8007276:	dd1f      	ble.n	80072b8 <_strtod_l+0x5b8>
 8007278:	2500      	movs	r5, #0
 800727a:	462e      	mov	r6, r5
 800727c:	9507      	str	r5, [sp, #28]
 800727e:	9505      	str	r5, [sp, #20]
 8007280:	2322      	movs	r3, #34	; 0x22
 8007282:	f04f 0a00 	mov.w	sl, #0
 8007286:	f04f 0b00 	mov.w	fp, #0
 800728a:	6023      	str	r3, [r4, #0]
 800728c:	e786      	b.n	800719c <_strtod_l+0x49c>
 800728e:	bf00      	nop
 8007290:	0800b071 	.word	0x0800b071
 8007294:	0800b0b4 	.word	0x0800b0b4
 8007298:	0800b069 	.word	0x0800b069
 800729c:	0800b1f4 	.word	0x0800b1f4
 80072a0:	0800b4a0 	.word	0x0800b4a0
 80072a4:	0800b380 	.word	0x0800b380
 80072a8:	0800b358 	.word	0x0800b358
 80072ac:	7ff00000 	.word	0x7ff00000
 80072b0:	7ca00000 	.word	0x7ca00000
 80072b4:	7fefffff 	.word	0x7fefffff
 80072b8:	f018 0310 	ands.w	r3, r8, #16
 80072bc:	bf18      	it	ne
 80072be:	236a      	movne	r3, #106	; 0x6a
 80072c0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8007670 <_strtod_l+0x970>
 80072c4:	9304      	str	r3, [sp, #16]
 80072c6:	4650      	mov	r0, sl
 80072c8:	4659      	mov	r1, fp
 80072ca:	2300      	movs	r3, #0
 80072cc:	f018 0f01 	tst.w	r8, #1
 80072d0:	d004      	beq.n	80072dc <_strtod_l+0x5dc>
 80072d2:	e9d9 2300 	ldrd	r2, r3, [r9]
 80072d6:	f7f9 f98f 	bl	80005f8 <__aeabi_dmul>
 80072da:	2301      	movs	r3, #1
 80072dc:	ea5f 0868 	movs.w	r8, r8, asr #1
 80072e0:	f109 0908 	add.w	r9, r9, #8
 80072e4:	d1f2      	bne.n	80072cc <_strtod_l+0x5cc>
 80072e6:	b10b      	cbz	r3, 80072ec <_strtod_l+0x5ec>
 80072e8:	4682      	mov	sl, r0
 80072ea:	468b      	mov	fp, r1
 80072ec:	9b04      	ldr	r3, [sp, #16]
 80072ee:	b1c3      	cbz	r3, 8007322 <_strtod_l+0x622>
 80072f0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80072f4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	4659      	mov	r1, fp
 80072fc:	dd11      	ble.n	8007322 <_strtod_l+0x622>
 80072fe:	2b1f      	cmp	r3, #31
 8007300:	f340 8124 	ble.w	800754c <_strtod_l+0x84c>
 8007304:	2b34      	cmp	r3, #52	; 0x34
 8007306:	bfde      	ittt	le
 8007308:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800730c:	f04f 33ff 	movle.w	r3, #4294967295
 8007310:	fa03 f202 	lslle.w	r2, r3, r2
 8007314:	f04f 0a00 	mov.w	sl, #0
 8007318:	bfcc      	ite	gt
 800731a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800731e:	ea02 0b01 	andle.w	fp, r2, r1
 8007322:	2200      	movs	r2, #0
 8007324:	2300      	movs	r3, #0
 8007326:	4650      	mov	r0, sl
 8007328:	4659      	mov	r1, fp
 800732a:	f7f9 fbcd 	bl	8000ac8 <__aeabi_dcmpeq>
 800732e:	2800      	cmp	r0, #0
 8007330:	d1a2      	bne.n	8007278 <_strtod_l+0x578>
 8007332:	9b07      	ldr	r3, [sp, #28]
 8007334:	9300      	str	r3, [sp, #0]
 8007336:	9908      	ldr	r1, [sp, #32]
 8007338:	462b      	mov	r3, r5
 800733a:	463a      	mov	r2, r7
 800733c:	4620      	mov	r0, r4
 800733e:	f001 fe2d 	bl	8008f9c <__s2b>
 8007342:	9007      	str	r0, [sp, #28]
 8007344:	2800      	cmp	r0, #0
 8007346:	f43f af1f 	beq.w	8007188 <_strtod_l+0x488>
 800734a:	9b05      	ldr	r3, [sp, #20]
 800734c:	1b9e      	subs	r6, r3, r6
 800734e:	9b06      	ldr	r3, [sp, #24]
 8007350:	2b00      	cmp	r3, #0
 8007352:	bfb4      	ite	lt
 8007354:	4633      	movlt	r3, r6
 8007356:	2300      	movge	r3, #0
 8007358:	930c      	str	r3, [sp, #48]	; 0x30
 800735a:	9b06      	ldr	r3, [sp, #24]
 800735c:	2500      	movs	r5, #0
 800735e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007362:	9312      	str	r3, [sp, #72]	; 0x48
 8007364:	462e      	mov	r6, r5
 8007366:	9b07      	ldr	r3, [sp, #28]
 8007368:	4620      	mov	r0, r4
 800736a:	6859      	ldr	r1, [r3, #4]
 800736c:	f001 fd6e 	bl	8008e4c <_Balloc>
 8007370:	9005      	str	r0, [sp, #20]
 8007372:	2800      	cmp	r0, #0
 8007374:	f43f af0c 	beq.w	8007190 <_strtod_l+0x490>
 8007378:	9b07      	ldr	r3, [sp, #28]
 800737a:	691a      	ldr	r2, [r3, #16]
 800737c:	3202      	adds	r2, #2
 800737e:	f103 010c 	add.w	r1, r3, #12
 8007382:	0092      	lsls	r2, r2, #2
 8007384:	300c      	adds	r0, #12
 8007386:	f001 fd53 	bl	8008e30 <memcpy>
 800738a:	ec4b ab10 	vmov	d0, sl, fp
 800738e:	aa1a      	add	r2, sp, #104	; 0x68
 8007390:	a919      	add	r1, sp, #100	; 0x64
 8007392:	4620      	mov	r0, r4
 8007394:	f002 f948 	bl	8009628 <__d2b>
 8007398:	ec4b ab18 	vmov	d8, sl, fp
 800739c:	9018      	str	r0, [sp, #96]	; 0x60
 800739e:	2800      	cmp	r0, #0
 80073a0:	f43f aef6 	beq.w	8007190 <_strtod_l+0x490>
 80073a4:	2101      	movs	r1, #1
 80073a6:	4620      	mov	r0, r4
 80073a8:	f001 fe92 	bl	80090d0 <__i2b>
 80073ac:	4606      	mov	r6, r0
 80073ae:	2800      	cmp	r0, #0
 80073b0:	f43f aeee 	beq.w	8007190 <_strtod_l+0x490>
 80073b4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80073b6:	9904      	ldr	r1, [sp, #16]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	bfab      	itete	ge
 80073bc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80073be:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80073c0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80073c2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80073c6:	bfac      	ite	ge
 80073c8:	eb03 0902 	addge.w	r9, r3, r2
 80073cc:	1ad7      	sublt	r7, r2, r3
 80073ce:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80073d0:	eba3 0801 	sub.w	r8, r3, r1
 80073d4:	4490      	add	r8, r2
 80073d6:	4ba1      	ldr	r3, [pc, #644]	; (800765c <_strtod_l+0x95c>)
 80073d8:	f108 38ff 	add.w	r8, r8, #4294967295
 80073dc:	4598      	cmp	r8, r3
 80073de:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80073e2:	f280 80c7 	bge.w	8007574 <_strtod_l+0x874>
 80073e6:	eba3 0308 	sub.w	r3, r3, r8
 80073ea:	2b1f      	cmp	r3, #31
 80073ec:	eba2 0203 	sub.w	r2, r2, r3
 80073f0:	f04f 0101 	mov.w	r1, #1
 80073f4:	f300 80b1 	bgt.w	800755a <_strtod_l+0x85a>
 80073f8:	fa01 f303 	lsl.w	r3, r1, r3
 80073fc:	930d      	str	r3, [sp, #52]	; 0x34
 80073fe:	2300      	movs	r3, #0
 8007400:	9308      	str	r3, [sp, #32]
 8007402:	eb09 0802 	add.w	r8, r9, r2
 8007406:	9b04      	ldr	r3, [sp, #16]
 8007408:	45c1      	cmp	r9, r8
 800740a:	4417      	add	r7, r2
 800740c:	441f      	add	r7, r3
 800740e:	464b      	mov	r3, r9
 8007410:	bfa8      	it	ge
 8007412:	4643      	movge	r3, r8
 8007414:	42bb      	cmp	r3, r7
 8007416:	bfa8      	it	ge
 8007418:	463b      	movge	r3, r7
 800741a:	2b00      	cmp	r3, #0
 800741c:	bfc2      	ittt	gt
 800741e:	eba8 0803 	subgt.w	r8, r8, r3
 8007422:	1aff      	subgt	r7, r7, r3
 8007424:	eba9 0903 	subgt.w	r9, r9, r3
 8007428:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800742a:	2b00      	cmp	r3, #0
 800742c:	dd17      	ble.n	800745e <_strtod_l+0x75e>
 800742e:	4631      	mov	r1, r6
 8007430:	461a      	mov	r2, r3
 8007432:	4620      	mov	r0, r4
 8007434:	f001 ff0c 	bl	8009250 <__pow5mult>
 8007438:	4606      	mov	r6, r0
 800743a:	2800      	cmp	r0, #0
 800743c:	f43f aea8 	beq.w	8007190 <_strtod_l+0x490>
 8007440:	4601      	mov	r1, r0
 8007442:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007444:	4620      	mov	r0, r4
 8007446:	f001 fe59 	bl	80090fc <__multiply>
 800744a:	900b      	str	r0, [sp, #44]	; 0x2c
 800744c:	2800      	cmp	r0, #0
 800744e:	f43f ae9f 	beq.w	8007190 <_strtod_l+0x490>
 8007452:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007454:	4620      	mov	r0, r4
 8007456:	f001 fd39 	bl	8008ecc <_Bfree>
 800745a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800745c:	9318      	str	r3, [sp, #96]	; 0x60
 800745e:	f1b8 0f00 	cmp.w	r8, #0
 8007462:	f300 808c 	bgt.w	800757e <_strtod_l+0x87e>
 8007466:	9b06      	ldr	r3, [sp, #24]
 8007468:	2b00      	cmp	r3, #0
 800746a:	dd08      	ble.n	800747e <_strtod_l+0x77e>
 800746c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800746e:	9905      	ldr	r1, [sp, #20]
 8007470:	4620      	mov	r0, r4
 8007472:	f001 feed 	bl	8009250 <__pow5mult>
 8007476:	9005      	str	r0, [sp, #20]
 8007478:	2800      	cmp	r0, #0
 800747a:	f43f ae89 	beq.w	8007190 <_strtod_l+0x490>
 800747e:	2f00      	cmp	r7, #0
 8007480:	dd08      	ble.n	8007494 <_strtod_l+0x794>
 8007482:	9905      	ldr	r1, [sp, #20]
 8007484:	463a      	mov	r2, r7
 8007486:	4620      	mov	r0, r4
 8007488:	f001 ff3c 	bl	8009304 <__lshift>
 800748c:	9005      	str	r0, [sp, #20]
 800748e:	2800      	cmp	r0, #0
 8007490:	f43f ae7e 	beq.w	8007190 <_strtod_l+0x490>
 8007494:	f1b9 0f00 	cmp.w	r9, #0
 8007498:	dd08      	ble.n	80074ac <_strtod_l+0x7ac>
 800749a:	4631      	mov	r1, r6
 800749c:	464a      	mov	r2, r9
 800749e:	4620      	mov	r0, r4
 80074a0:	f001 ff30 	bl	8009304 <__lshift>
 80074a4:	4606      	mov	r6, r0
 80074a6:	2800      	cmp	r0, #0
 80074a8:	f43f ae72 	beq.w	8007190 <_strtod_l+0x490>
 80074ac:	9a05      	ldr	r2, [sp, #20]
 80074ae:	9918      	ldr	r1, [sp, #96]	; 0x60
 80074b0:	4620      	mov	r0, r4
 80074b2:	f001 ffb3 	bl	800941c <__mdiff>
 80074b6:	4605      	mov	r5, r0
 80074b8:	2800      	cmp	r0, #0
 80074ba:	f43f ae69 	beq.w	8007190 <_strtod_l+0x490>
 80074be:	68c3      	ldr	r3, [r0, #12]
 80074c0:	930b      	str	r3, [sp, #44]	; 0x2c
 80074c2:	2300      	movs	r3, #0
 80074c4:	60c3      	str	r3, [r0, #12]
 80074c6:	4631      	mov	r1, r6
 80074c8:	f001 ff8c 	bl	80093e4 <__mcmp>
 80074cc:	2800      	cmp	r0, #0
 80074ce:	da60      	bge.n	8007592 <_strtod_l+0x892>
 80074d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80074d2:	ea53 030a 	orrs.w	r3, r3, sl
 80074d6:	f040 8082 	bne.w	80075de <_strtod_l+0x8de>
 80074da:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d17d      	bne.n	80075de <_strtod_l+0x8de>
 80074e2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80074e6:	0d1b      	lsrs	r3, r3, #20
 80074e8:	051b      	lsls	r3, r3, #20
 80074ea:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80074ee:	d976      	bls.n	80075de <_strtod_l+0x8de>
 80074f0:	696b      	ldr	r3, [r5, #20]
 80074f2:	b913      	cbnz	r3, 80074fa <_strtod_l+0x7fa>
 80074f4:	692b      	ldr	r3, [r5, #16]
 80074f6:	2b01      	cmp	r3, #1
 80074f8:	dd71      	ble.n	80075de <_strtod_l+0x8de>
 80074fa:	4629      	mov	r1, r5
 80074fc:	2201      	movs	r2, #1
 80074fe:	4620      	mov	r0, r4
 8007500:	f001 ff00 	bl	8009304 <__lshift>
 8007504:	4631      	mov	r1, r6
 8007506:	4605      	mov	r5, r0
 8007508:	f001 ff6c 	bl	80093e4 <__mcmp>
 800750c:	2800      	cmp	r0, #0
 800750e:	dd66      	ble.n	80075de <_strtod_l+0x8de>
 8007510:	9904      	ldr	r1, [sp, #16]
 8007512:	4a53      	ldr	r2, [pc, #332]	; (8007660 <_strtod_l+0x960>)
 8007514:	465b      	mov	r3, fp
 8007516:	2900      	cmp	r1, #0
 8007518:	f000 8081 	beq.w	800761e <_strtod_l+0x91e>
 800751c:	ea02 010b 	and.w	r1, r2, fp
 8007520:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007524:	dc7b      	bgt.n	800761e <_strtod_l+0x91e>
 8007526:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800752a:	f77f aea9 	ble.w	8007280 <_strtod_l+0x580>
 800752e:	4b4d      	ldr	r3, [pc, #308]	; (8007664 <_strtod_l+0x964>)
 8007530:	4650      	mov	r0, sl
 8007532:	4659      	mov	r1, fp
 8007534:	2200      	movs	r2, #0
 8007536:	f7f9 f85f 	bl	80005f8 <__aeabi_dmul>
 800753a:	460b      	mov	r3, r1
 800753c:	4303      	orrs	r3, r0
 800753e:	bf08      	it	eq
 8007540:	2322      	moveq	r3, #34	; 0x22
 8007542:	4682      	mov	sl, r0
 8007544:	468b      	mov	fp, r1
 8007546:	bf08      	it	eq
 8007548:	6023      	streq	r3, [r4, #0]
 800754a:	e62b      	b.n	80071a4 <_strtod_l+0x4a4>
 800754c:	f04f 32ff 	mov.w	r2, #4294967295
 8007550:	fa02 f303 	lsl.w	r3, r2, r3
 8007554:	ea03 0a0a 	and.w	sl, r3, sl
 8007558:	e6e3      	b.n	8007322 <_strtod_l+0x622>
 800755a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800755e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8007562:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8007566:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800756a:	fa01 f308 	lsl.w	r3, r1, r8
 800756e:	9308      	str	r3, [sp, #32]
 8007570:	910d      	str	r1, [sp, #52]	; 0x34
 8007572:	e746      	b.n	8007402 <_strtod_l+0x702>
 8007574:	2300      	movs	r3, #0
 8007576:	9308      	str	r3, [sp, #32]
 8007578:	2301      	movs	r3, #1
 800757a:	930d      	str	r3, [sp, #52]	; 0x34
 800757c:	e741      	b.n	8007402 <_strtod_l+0x702>
 800757e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007580:	4642      	mov	r2, r8
 8007582:	4620      	mov	r0, r4
 8007584:	f001 febe 	bl	8009304 <__lshift>
 8007588:	9018      	str	r0, [sp, #96]	; 0x60
 800758a:	2800      	cmp	r0, #0
 800758c:	f47f af6b 	bne.w	8007466 <_strtod_l+0x766>
 8007590:	e5fe      	b.n	8007190 <_strtod_l+0x490>
 8007592:	465f      	mov	r7, fp
 8007594:	d16e      	bne.n	8007674 <_strtod_l+0x974>
 8007596:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007598:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800759c:	b342      	cbz	r2, 80075f0 <_strtod_l+0x8f0>
 800759e:	4a32      	ldr	r2, [pc, #200]	; (8007668 <_strtod_l+0x968>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d128      	bne.n	80075f6 <_strtod_l+0x8f6>
 80075a4:	9b04      	ldr	r3, [sp, #16]
 80075a6:	4651      	mov	r1, sl
 80075a8:	b1eb      	cbz	r3, 80075e6 <_strtod_l+0x8e6>
 80075aa:	4b2d      	ldr	r3, [pc, #180]	; (8007660 <_strtod_l+0x960>)
 80075ac:	403b      	ands	r3, r7
 80075ae:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80075b2:	f04f 32ff 	mov.w	r2, #4294967295
 80075b6:	d819      	bhi.n	80075ec <_strtod_l+0x8ec>
 80075b8:	0d1b      	lsrs	r3, r3, #20
 80075ba:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80075be:	fa02 f303 	lsl.w	r3, r2, r3
 80075c2:	4299      	cmp	r1, r3
 80075c4:	d117      	bne.n	80075f6 <_strtod_l+0x8f6>
 80075c6:	4b29      	ldr	r3, [pc, #164]	; (800766c <_strtod_l+0x96c>)
 80075c8:	429f      	cmp	r7, r3
 80075ca:	d102      	bne.n	80075d2 <_strtod_l+0x8d2>
 80075cc:	3101      	adds	r1, #1
 80075ce:	f43f addf 	beq.w	8007190 <_strtod_l+0x490>
 80075d2:	4b23      	ldr	r3, [pc, #140]	; (8007660 <_strtod_l+0x960>)
 80075d4:	403b      	ands	r3, r7
 80075d6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80075da:	f04f 0a00 	mov.w	sl, #0
 80075de:	9b04      	ldr	r3, [sp, #16]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d1a4      	bne.n	800752e <_strtod_l+0x82e>
 80075e4:	e5de      	b.n	80071a4 <_strtod_l+0x4a4>
 80075e6:	f04f 33ff 	mov.w	r3, #4294967295
 80075ea:	e7ea      	b.n	80075c2 <_strtod_l+0x8c2>
 80075ec:	4613      	mov	r3, r2
 80075ee:	e7e8      	b.n	80075c2 <_strtod_l+0x8c2>
 80075f0:	ea53 030a 	orrs.w	r3, r3, sl
 80075f4:	d08c      	beq.n	8007510 <_strtod_l+0x810>
 80075f6:	9b08      	ldr	r3, [sp, #32]
 80075f8:	b1db      	cbz	r3, 8007632 <_strtod_l+0x932>
 80075fa:	423b      	tst	r3, r7
 80075fc:	d0ef      	beq.n	80075de <_strtod_l+0x8de>
 80075fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007600:	9a04      	ldr	r2, [sp, #16]
 8007602:	4650      	mov	r0, sl
 8007604:	4659      	mov	r1, fp
 8007606:	b1c3      	cbz	r3, 800763a <_strtod_l+0x93a>
 8007608:	f7ff fb5c 	bl	8006cc4 <sulp>
 800760c:	4602      	mov	r2, r0
 800760e:	460b      	mov	r3, r1
 8007610:	ec51 0b18 	vmov	r0, r1, d8
 8007614:	f7f8 fe3a 	bl	800028c <__adddf3>
 8007618:	4682      	mov	sl, r0
 800761a:	468b      	mov	fp, r1
 800761c:	e7df      	b.n	80075de <_strtod_l+0x8de>
 800761e:	4013      	ands	r3, r2
 8007620:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007624:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007628:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800762c:	f04f 3aff 	mov.w	sl, #4294967295
 8007630:	e7d5      	b.n	80075de <_strtod_l+0x8de>
 8007632:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007634:	ea13 0f0a 	tst.w	r3, sl
 8007638:	e7e0      	b.n	80075fc <_strtod_l+0x8fc>
 800763a:	f7ff fb43 	bl	8006cc4 <sulp>
 800763e:	4602      	mov	r2, r0
 8007640:	460b      	mov	r3, r1
 8007642:	ec51 0b18 	vmov	r0, r1, d8
 8007646:	f7f8 fe1f 	bl	8000288 <__aeabi_dsub>
 800764a:	2200      	movs	r2, #0
 800764c:	2300      	movs	r3, #0
 800764e:	4682      	mov	sl, r0
 8007650:	468b      	mov	fp, r1
 8007652:	f7f9 fa39 	bl	8000ac8 <__aeabi_dcmpeq>
 8007656:	2800      	cmp	r0, #0
 8007658:	d0c1      	beq.n	80075de <_strtod_l+0x8de>
 800765a:	e611      	b.n	8007280 <_strtod_l+0x580>
 800765c:	fffffc02 	.word	0xfffffc02
 8007660:	7ff00000 	.word	0x7ff00000
 8007664:	39500000 	.word	0x39500000
 8007668:	000fffff 	.word	0x000fffff
 800766c:	7fefffff 	.word	0x7fefffff
 8007670:	0800b0c8 	.word	0x0800b0c8
 8007674:	4631      	mov	r1, r6
 8007676:	4628      	mov	r0, r5
 8007678:	f002 f832 	bl	80096e0 <__ratio>
 800767c:	ec59 8b10 	vmov	r8, r9, d0
 8007680:	ee10 0a10 	vmov	r0, s0
 8007684:	2200      	movs	r2, #0
 8007686:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800768a:	4649      	mov	r1, r9
 800768c:	f7f9 fa30 	bl	8000af0 <__aeabi_dcmple>
 8007690:	2800      	cmp	r0, #0
 8007692:	d07a      	beq.n	800778a <_strtod_l+0xa8a>
 8007694:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007696:	2b00      	cmp	r3, #0
 8007698:	d04a      	beq.n	8007730 <_strtod_l+0xa30>
 800769a:	4b95      	ldr	r3, [pc, #596]	; (80078f0 <_strtod_l+0xbf0>)
 800769c:	2200      	movs	r2, #0
 800769e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80076a2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80078f0 <_strtod_l+0xbf0>
 80076a6:	f04f 0800 	mov.w	r8, #0
 80076aa:	4b92      	ldr	r3, [pc, #584]	; (80078f4 <_strtod_l+0xbf4>)
 80076ac:	403b      	ands	r3, r7
 80076ae:	930d      	str	r3, [sp, #52]	; 0x34
 80076b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80076b2:	4b91      	ldr	r3, [pc, #580]	; (80078f8 <_strtod_l+0xbf8>)
 80076b4:	429a      	cmp	r2, r3
 80076b6:	f040 80b0 	bne.w	800781a <_strtod_l+0xb1a>
 80076ba:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80076be:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80076c2:	ec4b ab10 	vmov	d0, sl, fp
 80076c6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80076ca:	f001 ff31 	bl	8009530 <__ulp>
 80076ce:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80076d2:	ec53 2b10 	vmov	r2, r3, d0
 80076d6:	f7f8 ff8f 	bl	80005f8 <__aeabi_dmul>
 80076da:	4652      	mov	r2, sl
 80076dc:	465b      	mov	r3, fp
 80076de:	f7f8 fdd5 	bl	800028c <__adddf3>
 80076e2:	460b      	mov	r3, r1
 80076e4:	4983      	ldr	r1, [pc, #524]	; (80078f4 <_strtod_l+0xbf4>)
 80076e6:	4a85      	ldr	r2, [pc, #532]	; (80078fc <_strtod_l+0xbfc>)
 80076e8:	4019      	ands	r1, r3
 80076ea:	4291      	cmp	r1, r2
 80076ec:	4682      	mov	sl, r0
 80076ee:	d960      	bls.n	80077b2 <_strtod_l+0xab2>
 80076f0:	ee18 3a90 	vmov	r3, s17
 80076f4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d104      	bne.n	8007706 <_strtod_l+0xa06>
 80076fc:	ee18 3a10 	vmov	r3, s16
 8007700:	3301      	adds	r3, #1
 8007702:	f43f ad45 	beq.w	8007190 <_strtod_l+0x490>
 8007706:	f8df b200 	ldr.w	fp, [pc, #512]	; 8007908 <_strtod_l+0xc08>
 800770a:	f04f 3aff 	mov.w	sl, #4294967295
 800770e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007710:	4620      	mov	r0, r4
 8007712:	f001 fbdb 	bl	8008ecc <_Bfree>
 8007716:	9905      	ldr	r1, [sp, #20]
 8007718:	4620      	mov	r0, r4
 800771a:	f001 fbd7 	bl	8008ecc <_Bfree>
 800771e:	4631      	mov	r1, r6
 8007720:	4620      	mov	r0, r4
 8007722:	f001 fbd3 	bl	8008ecc <_Bfree>
 8007726:	4629      	mov	r1, r5
 8007728:	4620      	mov	r0, r4
 800772a:	f001 fbcf 	bl	8008ecc <_Bfree>
 800772e:	e61a      	b.n	8007366 <_strtod_l+0x666>
 8007730:	f1ba 0f00 	cmp.w	sl, #0
 8007734:	d11b      	bne.n	800776e <_strtod_l+0xa6e>
 8007736:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800773a:	b9f3      	cbnz	r3, 800777a <_strtod_l+0xa7a>
 800773c:	4b6c      	ldr	r3, [pc, #432]	; (80078f0 <_strtod_l+0xbf0>)
 800773e:	2200      	movs	r2, #0
 8007740:	4640      	mov	r0, r8
 8007742:	4649      	mov	r1, r9
 8007744:	f7f9 f9ca 	bl	8000adc <__aeabi_dcmplt>
 8007748:	b9d0      	cbnz	r0, 8007780 <_strtod_l+0xa80>
 800774a:	4640      	mov	r0, r8
 800774c:	4649      	mov	r1, r9
 800774e:	4b6c      	ldr	r3, [pc, #432]	; (8007900 <_strtod_l+0xc00>)
 8007750:	2200      	movs	r2, #0
 8007752:	f7f8 ff51 	bl	80005f8 <__aeabi_dmul>
 8007756:	4680      	mov	r8, r0
 8007758:	4689      	mov	r9, r1
 800775a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800775e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8007762:	9315      	str	r3, [sp, #84]	; 0x54
 8007764:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007768:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800776c:	e79d      	b.n	80076aa <_strtod_l+0x9aa>
 800776e:	f1ba 0f01 	cmp.w	sl, #1
 8007772:	d102      	bne.n	800777a <_strtod_l+0xa7a>
 8007774:	2f00      	cmp	r7, #0
 8007776:	f43f ad83 	beq.w	8007280 <_strtod_l+0x580>
 800777a:	4b62      	ldr	r3, [pc, #392]	; (8007904 <_strtod_l+0xc04>)
 800777c:	2200      	movs	r2, #0
 800777e:	e78e      	b.n	800769e <_strtod_l+0x99e>
 8007780:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8007900 <_strtod_l+0xc00>
 8007784:	f04f 0800 	mov.w	r8, #0
 8007788:	e7e7      	b.n	800775a <_strtod_l+0xa5a>
 800778a:	4b5d      	ldr	r3, [pc, #372]	; (8007900 <_strtod_l+0xc00>)
 800778c:	4640      	mov	r0, r8
 800778e:	4649      	mov	r1, r9
 8007790:	2200      	movs	r2, #0
 8007792:	f7f8 ff31 	bl	80005f8 <__aeabi_dmul>
 8007796:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007798:	4680      	mov	r8, r0
 800779a:	4689      	mov	r9, r1
 800779c:	b933      	cbnz	r3, 80077ac <_strtod_l+0xaac>
 800779e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80077a2:	900e      	str	r0, [sp, #56]	; 0x38
 80077a4:	930f      	str	r3, [sp, #60]	; 0x3c
 80077a6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80077aa:	e7dd      	b.n	8007768 <_strtod_l+0xa68>
 80077ac:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80077b0:	e7f9      	b.n	80077a6 <_strtod_l+0xaa6>
 80077b2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80077b6:	9b04      	ldr	r3, [sp, #16]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d1a8      	bne.n	800770e <_strtod_l+0xa0e>
 80077bc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80077c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80077c2:	0d1b      	lsrs	r3, r3, #20
 80077c4:	051b      	lsls	r3, r3, #20
 80077c6:	429a      	cmp	r2, r3
 80077c8:	d1a1      	bne.n	800770e <_strtod_l+0xa0e>
 80077ca:	4640      	mov	r0, r8
 80077cc:	4649      	mov	r1, r9
 80077ce:	f7f9 fa5b 	bl	8000c88 <__aeabi_d2lz>
 80077d2:	f7f8 fee3 	bl	800059c <__aeabi_l2d>
 80077d6:	4602      	mov	r2, r0
 80077d8:	460b      	mov	r3, r1
 80077da:	4640      	mov	r0, r8
 80077dc:	4649      	mov	r1, r9
 80077de:	f7f8 fd53 	bl	8000288 <__aeabi_dsub>
 80077e2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80077e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80077e8:	ea43 030a 	orr.w	r3, r3, sl
 80077ec:	4313      	orrs	r3, r2
 80077ee:	4680      	mov	r8, r0
 80077f0:	4689      	mov	r9, r1
 80077f2:	d055      	beq.n	80078a0 <_strtod_l+0xba0>
 80077f4:	a336      	add	r3, pc, #216	; (adr r3, 80078d0 <_strtod_l+0xbd0>)
 80077f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077fa:	f7f9 f96f 	bl	8000adc <__aeabi_dcmplt>
 80077fe:	2800      	cmp	r0, #0
 8007800:	f47f acd0 	bne.w	80071a4 <_strtod_l+0x4a4>
 8007804:	a334      	add	r3, pc, #208	; (adr r3, 80078d8 <_strtod_l+0xbd8>)
 8007806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800780a:	4640      	mov	r0, r8
 800780c:	4649      	mov	r1, r9
 800780e:	f7f9 f983 	bl	8000b18 <__aeabi_dcmpgt>
 8007812:	2800      	cmp	r0, #0
 8007814:	f43f af7b 	beq.w	800770e <_strtod_l+0xa0e>
 8007818:	e4c4      	b.n	80071a4 <_strtod_l+0x4a4>
 800781a:	9b04      	ldr	r3, [sp, #16]
 800781c:	b333      	cbz	r3, 800786c <_strtod_l+0xb6c>
 800781e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007820:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007824:	d822      	bhi.n	800786c <_strtod_l+0xb6c>
 8007826:	a32e      	add	r3, pc, #184	; (adr r3, 80078e0 <_strtod_l+0xbe0>)
 8007828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800782c:	4640      	mov	r0, r8
 800782e:	4649      	mov	r1, r9
 8007830:	f7f9 f95e 	bl	8000af0 <__aeabi_dcmple>
 8007834:	b1a0      	cbz	r0, 8007860 <_strtod_l+0xb60>
 8007836:	4649      	mov	r1, r9
 8007838:	4640      	mov	r0, r8
 800783a:	f7f9 f9b5 	bl	8000ba8 <__aeabi_d2uiz>
 800783e:	2801      	cmp	r0, #1
 8007840:	bf38      	it	cc
 8007842:	2001      	movcc	r0, #1
 8007844:	f7f8 fe5e 	bl	8000504 <__aeabi_ui2d>
 8007848:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800784a:	4680      	mov	r8, r0
 800784c:	4689      	mov	r9, r1
 800784e:	bb23      	cbnz	r3, 800789a <_strtod_l+0xb9a>
 8007850:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007854:	9010      	str	r0, [sp, #64]	; 0x40
 8007856:	9311      	str	r3, [sp, #68]	; 0x44
 8007858:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800785c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007860:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007862:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007864:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007868:	1a9b      	subs	r3, r3, r2
 800786a:	9309      	str	r3, [sp, #36]	; 0x24
 800786c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007870:	eeb0 0a48 	vmov.f32	s0, s16
 8007874:	eef0 0a68 	vmov.f32	s1, s17
 8007878:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800787c:	f001 fe58 	bl	8009530 <__ulp>
 8007880:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007884:	ec53 2b10 	vmov	r2, r3, d0
 8007888:	f7f8 feb6 	bl	80005f8 <__aeabi_dmul>
 800788c:	ec53 2b18 	vmov	r2, r3, d8
 8007890:	f7f8 fcfc 	bl	800028c <__adddf3>
 8007894:	4682      	mov	sl, r0
 8007896:	468b      	mov	fp, r1
 8007898:	e78d      	b.n	80077b6 <_strtod_l+0xab6>
 800789a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800789e:	e7db      	b.n	8007858 <_strtod_l+0xb58>
 80078a0:	a311      	add	r3, pc, #68	; (adr r3, 80078e8 <_strtod_l+0xbe8>)
 80078a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078a6:	f7f9 f919 	bl	8000adc <__aeabi_dcmplt>
 80078aa:	e7b2      	b.n	8007812 <_strtod_l+0xb12>
 80078ac:	2300      	movs	r3, #0
 80078ae:	930a      	str	r3, [sp, #40]	; 0x28
 80078b0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80078b2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80078b4:	6013      	str	r3, [r2, #0]
 80078b6:	f7ff ba6b 	b.w	8006d90 <_strtod_l+0x90>
 80078ba:	2a65      	cmp	r2, #101	; 0x65
 80078bc:	f43f ab5f 	beq.w	8006f7e <_strtod_l+0x27e>
 80078c0:	2a45      	cmp	r2, #69	; 0x45
 80078c2:	f43f ab5c 	beq.w	8006f7e <_strtod_l+0x27e>
 80078c6:	2301      	movs	r3, #1
 80078c8:	f7ff bb94 	b.w	8006ff4 <_strtod_l+0x2f4>
 80078cc:	f3af 8000 	nop.w
 80078d0:	94a03595 	.word	0x94a03595
 80078d4:	3fdfffff 	.word	0x3fdfffff
 80078d8:	35afe535 	.word	0x35afe535
 80078dc:	3fe00000 	.word	0x3fe00000
 80078e0:	ffc00000 	.word	0xffc00000
 80078e4:	41dfffff 	.word	0x41dfffff
 80078e8:	94a03595 	.word	0x94a03595
 80078ec:	3fcfffff 	.word	0x3fcfffff
 80078f0:	3ff00000 	.word	0x3ff00000
 80078f4:	7ff00000 	.word	0x7ff00000
 80078f8:	7fe00000 	.word	0x7fe00000
 80078fc:	7c9fffff 	.word	0x7c9fffff
 8007900:	3fe00000 	.word	0x3fe00000
 8007904:	bff00000 	.word	0xbff00000
 8007908:	7fefffff 	.word	0x7fefffff

0800790c <_strtod_r>:
 800790c:	4b01      	ldr	r3, [pc, #4]	; (8007914 <_strtod_r+0x8>)
 800790e:	f7ff b9f7 	b.w	8006d00 <_strtod_l>
 8007912:	bf00      	nop
 8007914:	20000074 	.word	0x20000074

08007918 <_strtol_l.constprop.0>:
 8007918:	2b01      	cmp	r3, #1
 800791a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800791e:	d001      	beq.n	8007924 <_strtol_l.constprop.0+0xc>
 8007920:	2b24      	cmp	r3, #36	; 0x24
 8007922:	d906      	bls.n	8007932 <_strtol_l.constprop.0+0x1a>
 8007924:	f7fe fafc 	bl	8005f20 <__errno>
 8007928:	2316      	movs	r3, #22
 800792a:	6003      	str	r3, [r0, #0]
 800792c:	2000      	movs	r0, #0
 800792e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007932:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007a18 <_strtol_l.constprop.0+0x100>
 8007936:	460d      	mov	r5, r1
 8007938:	462e      	mov	r6, r5
 800793a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800793e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8007942:	f017 0708 	ands.w	r7, r7, #8
 8007946:	d1f7      	bne.n	8007938 <_strtol_l.constprop.0+0x20>
 8007948:	2c2d      	cmp	r4, #45	; 0x2d
 800794a:	d132      	bne.n	80079b2 <_strtol_l.constprop.0+0x9a>
 800794c:	782c      	ldrb	r4, [r5, #0]
 800794e:	2701      	movs	r7, #1
 8007950:	1cb5      	adds	r5, r6, #2
 8007952:	2b00      	cmp	r3, #0
 8007954:	d05b      	beq.n	8007a0e <_strtol_l.constprop.0+0xf6>
 8007956:	2b10      	cmp	r3, #16
 8007958:	d109      	bne.n	800796e <_strtol_l.constprop.0+0x56>
 800795a:	2c30      	cmp	r4, #48	; 0x30
 800795c:	d107      	bne.n	800796e <_strtol_l.constprop.0+0x56>
 800795e:	782c      	ldrb	r4, [r5, #0]
 8007960:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007964:	2c58      	cmp	r4, #88	; 0x58
 8007966:	d14d      	bne.n	8007a04 <_strtol_l.constprop.0+0xec>
 8007968:	786c      	ldrb	r4, [r5, #1]
 800796a:	2310      	movs	r3, #16
 800796c:	3502      	adds	r5, #2
 800796e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007972:	f108 38ff 	add.w	r8, r8, #4294967295
 8007976:	f04f 0c00 	mov.w	ip, #0
 800797a:	fbb8 f9f3 	udiv	r9, r8, r3
 800797e:	4666      	mov	r6, ip
 8007980:	fb03 8a19 	mls	sl, r3, r9, r8
 8007984:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8007988:	f1be 0f09 	cmp.w	lr, #9
 800798c:	d816      	bhi.n	80079bc <_strtol_l.constprop.0+0xa4>
 800798e:	4674      	mov	r4, lr
 8007990:	42a3      	cmp	r3, r4
 8007992:	dd24      	ble.n	80079de <_strtol_l.constprop.0+0xc6>
 8007994:	f1bc 0f00 	cmp.w	ip, #0
 8007998:	db1e      	blt.n	80079d8 <_strtol_l.constprop.0+0xc0>
 800799a:	45b1      	cmp	r9, r6
 800799c:	d31c      	bcc.n	80079d8 <_strtol_l.constprop.0+0xc0>
 800799e:	d101      	bne.n	80079a4 <_strtol_l.constprop.0+0x8c>
 80079a0:	45a2      	cmp	sl, r4
 80079a2:	db19      	blt.n	80079d8 <_strtol_l.constprop.0+0xc0>
 80079a4:	fb06 4603 	mla	r6, r6, r3, r4
 80079a8:	f04f 0c01 	mov.w	ip, #1
 80079ac:	f815 4b01 	ldrb.w	r4, [r5], #1
 80079b0:	e7e8      	b.n	8007984 <_strtol_l.constprop.0+0x6c>
 80079b2:	2c2b      	cmp	r4, #43	; 0x2b
 80079b4:	bf04      	itt	eq
 80079b6:	782c      	ldrbeq	r4, [r5, #0]
 80079b8:	1cb5      	addeq	r5, r6, #2
 80079ba:	e7ca      	b.n	8007952 <_strtol_l.constprop.0+0x3a>
 80079bc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80079c0:	f1be 0f19 	cmp.w	lr, #25
 80079c4:	d801      	bhi.n	80079ca <_strtol_l.constprop.0+0xb2>
 80079c6:	3c37      	subs	r4, #55	; 0x37
 80079c8:	e7e2      	b.n	8007990 <_strtol_l.constprop.0+0x78>
 80079ca:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80079ce:	f1be 0f19 	cmp.w	lr, #25
 80079d2:	d804      	bhi.n	80079de <_strtol_l.constprop.0+0xc6>
 80079d4:	3c57      	subs	r4, #87	; 0x57
 80079d6:	e7db      	b.n	8007990 <_strtol_l.constprop.0+0x78>
 80079d8:	f04f 3cff 	mov.w	ip, #4294967295
 80079dc:	e7e6      	b.n	80079ac <_strtol_l.constprop.0+0x94>
 80079de:	f1bc 0f00 	cmp.w	ip, #0
 80079e2:	da05      	bge.n	80079f0 <_strtol_l.constprop.0+0xd8>
 80079e4:	2322      	movs	r3, #34	; 0x22
 80079e6:	6003      	str	r3, [r0, #0]
 80079e8:	4646      	mov	r6, r8
 80079ea:	b942      	cbnz	r2, 80079fe <_strtol_l.constprop.0+0xe6>
 80079ec:	4630      	mov	r0, r6
 80079ee:	e79e      	b.n	800792e <_strtol_l.constprop.0+0x16>
 80079f0:	b107      	cbz	r7, 80079f4 <_strtol_l.constprop.0+0xdc>
 80079f2:	4276      	negs	r6, r6
 80079f4:	2a00      	cmp	r2, #0
 80079f6:	d0f9      	beq.n	80079ec <_strtol_l.constprop.0+0xd4>
 80079f8:	f1bc 0f00 	cmp.w	ip, #0
 80079fc:	d000      	beq.n	8007a00 <_strtol_l.constprop.0+0xe8>
 80079fe:	1e69      	subs	r1, r5, #1
 8007a00:	6011      	str	r1, [r2, #0]
 8007a02:	e7f3      	b.n	80079ec <_strtol_l.constprop.0+0xd4>
 8007a04:	2430      	movs	r4, #48	; 0x30
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d1b1      	bne.n	800796e <_strtol_l.constprop.0+0x56>
 8007a0a:	2308      	movs	r3, #8
 8007a0c:	e7af      	b.n	800796e <_strtol_l.constprop.0+0x56>
 8007a0e:	2c30      	cmp	r4, #48	; 0x30
 8007a10:	d0a5      	beq.n	800795e <_strtol_l.constprop.0+0x46>
 8007a12:	230a      	movs	r3, #10
 8007a14:	e7ab      	b.n	800796e <_strtol_l.constprop.0+0x56>
 8007a16:	bf00      	nop
 8007a18:	0800b0f1 	.word	0x0800b0f1

08007a1c <_strtol_r>:
 8007a1c:	f7ff bf7c 	b.w	8007918 <_strtol_l.constprop.0>

08007a20 <quorem>:
 8007a20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a24:	6903      	ldr	r3, [r0, #16]
 8007a26:	690c      	ldr	r4, [r1, #16]
 8007a28:	42a3      	cmp	r3, r4
 8007a2a:	4607      	mov	r7, r0
 8007a2c:	f2c0 8081 	blt.w	8007b32 <quorem+0x112>
 8007a30:	3c01      	subs	r4, #1
 8007a32:	f101 0814 	add.w	r8, r1, #20
 8007a36:	f100 0514 	add.w	r5, r0, #20
 8007a3a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007a3e:	9301      	str	r3, [sp, #4]
 8007a40:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007a44:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007a48:	3301      	adds	r3, #1
 8007a4a:	429a      	cmp	r2, r3
 8007a4c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007a50:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007a54:	fbb2 f6f3 	udiv	r6, r2, r3
 8007a58:	d331      	bcc.n	8007abe <quorem+0x9e>
 8007a5a:	f04f 0e00 	mov.w	lr, #0
 8007a5e:	4640      	mov	r0, r8
 8007a60:	46ac      	mov	ip, r5
 8007a62:	46f2      	mov	sl, lr
 8007a64:	f850 2b04 	ldr.w	r2, [r0], #4
 8007a68:	b293      	uxth	r3, r2
 8007a6a:	fb06 e303 	mla	r3, r6, r3, lr
 8007a6e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007a72:	b29b      	uxth	r3, r3
 8007a74:	ebaa 0303 	sub.w	r3, sl, r3
 8007a78:	f8dc a000 	ldr.w	sl, [ip]
 8007a7c:	0c12      	lsrs	r2, r2, #16
 8007a7e:	fa13 f38a 	uxtah	r3, r3, sl
 8007a82:	fb06 e202 	mla	r2, r6, r2, lr
 8007a86:	9300      	str	r3, [sp, #0]
 8007a88:	9b00      	ldr	r3, [sp, #0]
 8007a8a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007a8e:	b292      	uxth	r2, r2
 8007a90:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007a94:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007a98:	f8bd 3000 	ldrh.w	r3, [sp]
 8007a9c:	4581      	cmp	r9, r0
 8007a9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007aa2:	f84c 3b04 	str.w	r3, [ip], #4
 8007aa6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007aaa:	d2db      	bcs.n	8007a64 <quorem+0x44>
 8007aac:	f855 300b 	ldr.w	r3, [r5, fp]
 8007ab0:	b92b      	cbnz	r3, 8007abe <quorem+0x9e>
 8007ab2:	9b01      	ldr	r3, [sp, #4]
 8007ab4:	3b04      	subs	r3, #4
 8007ab6:	429d      	cmp	r5, r3
 8007ab8:	461a      	mov	r2, r3
 8007aba:	d32e      	bcc.n	8007b1a <quorem+0xfa>
 8007abc:	613c      	str	r4, [r7, #16]
 8007abe:	4638      	mov	r0, r7
 8007ac0:	f001 fc90 	bl	80093e4 <__mcmp>
 8007ac4:	2800      	cmp	r0, #0
 8007ac6:	db24      	blt.n	8007b12 <quorem+0xf2>
 8007ac8:	3601      	adds	r6, #1
 8007aca:	4628      	mov	r0, r5
 8007acc:	f04f 0c00 	mov.w	ip, #0
 8007ad0:	f858 2b04 	ldr.w	r2, [r8], #4
 8007ad4:	f8d0 e000 	ldr.w	lr, [r0]
 8007ad8:	b293      	uxth	r3, r2
 8007ada:	ebac 0303 	sub.w	r3, ip, r3
 8007ade:	0c12      	lsrs	r2, r2, #16
 8007ae0:	fa13 f38e 	uxtah	r3, r3, lr
 8007ae4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007ae8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007aec:	b29b      	uxth	r3, r3
 8007aee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007af2:	45c1      	cmp	r9, r8
 8007af4:	f840 3b04 	str.w	r3, [r0], #4
 8007af8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007afc:	d2e8      	bcs.n	8007ad0 <quorem+0xb0>
 8007afe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007b02:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007b06:	b922      	cbnz	r2, 8007b12 <quorem+0xf2>
 8007b08:	3b04      	subs	r3, #4
 8007b0a:	429d      	cmp	r5, r3
 8007b0c:	461a      	mov	r2, r3
 8007b0e:	d30a      	bcc.n	8007b26 <quorem+0x106>
 8007b10:	613c      	str	r4, [r7, #16]
 8007b12:	4630      	mov	r0, r6
 8007b14:	b003      	add	sp, #12
 8007b16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b1a:	6812      	ldr	r2, [r2, #0]
 8007b1c:	3b04      	subs	r3, #4
 8007b1e:	2a00      	cmp	r2, #0
 8007b20:	d1cc      	bne.n	8007abc <quorem+0x9c>
 8007b22:	3c01      	subs	r4, #1
 8007b24:	e7c7      	b.n	8007ab6 <quorem+0x96>
 8007b26:	6812      	ldr	r2, [r2, #0]
 8007b28:	3b04      	subs	r3, #4
 8007b2a:	2a00      	cmp	r2, #0
 8007b2c:	d1f0      	bne.n	8007b10 <quorem+0xf0>
 8007b2e:	3c01      	subs	r4, #1
 8007b30:	e7eb      	b.n	8007b0a <quorem+0xea>
 8007b32:	2000      	movs	r0, #0
 8007b34:	e7ee      	b.n	8007b14 <quorem+0xf4>
	...

08007b38 <_dtoa_r>:
 8007b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b3c:	ed2d 8b04 	vpush	{d8-d9}
 8007b40:	ec57 6b10 	vmov	r6, r7, d0
 8007b44:	b093      	sub	sp, #76	; 0x4c
 8007b46:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007b48:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007b4c:	9106      	str	r1, [sp, #24]
 8007b4e:	ee10 aa10 	vmov	sl, s0
 8007b52:	4604      	mov	r4, r0
 8007b54:	9209      	str	r2, [sp, #36]	; 0x24
 8007b56:	930c      	str	r3, [sp, #48]	; 0x30
 8007b58:	46bb      	mov	fp, r7
 8007b5a:	b975      	cbnz	r5, 8007b7a <_dtoa_r+0x42>
 8007b5c:	2010      	movs	r0, #16
 8007b5e:	f001 f94d 	bl	8008dfc <malloc>
 8007b62:	4602      	mov	r2, r0
 8007b64:	6260      	str	r0, [r4, #36]	; 0x24
 8007b66:	b920      	cbnz	r0, 8007b72 <_dtoa_r+0x3a>
 8007b68:	4ba7      	ldr	r3, [pc, #668]	; (8007e08 <_dtoa_r+0x2d0>)
 8007b6a:	21ea      	movs	r1, #234	; 0xea
 8007b6c:	48a7      	ldr	r0, [pc, #668]	; (8007e0c <_dtoa_r+0x2d4>)
 8007b6e:	f002 f8bd 	bl	8009cec <__assert_func>
 8007b72:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007b76:	6005      	str	r5, [r0, #0]
 8007b78:	60c5      	str	r5, [r0, #12]
 8007b7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b7c:	6819      	ldr	r1, [r3, #0]
 8007b7e:	b151      	cbz	r1, 8007b96 <_dtoa_r+0x5e>
 8007b80:	685a      	ldr	r2, [r3, #4]
 8007b82:	604a      	str	r2, [r1, #4]
 8007b84:	2301      	movs	r3, #1
 8007b86:	4093      	lsls	r3, r2
 8007b88:	608b      	str	r3, [r1, #8]
 8007b8a:	4620      	mov	r0, r4
 8007b8c:	f001 f99e 	bl	8008ecc <_Bfree>
 8007b90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b92:	2200      	movs	r2, #0
 8007b94:	601a      	str	r2, [r3, #0]
 8007b96:	1e3b      	subs	r3, r7, #0
 8007b98:	bfaa      	itet	ge
 8007b9a:	2300      	movge	r3, #0
 8007b9c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007ba0:	f8c8 3000 	strge.w	r3, [r8]
 8007ba4:	4b9a      	ldr	r3, [pc, #616]	; (8007e10 <_dtoa_r+0x2d8>)
 8007ba6:	bfbc      	itt	lt
 8007ba8:	2201      	movlt	r2, #1
 8007baa:	f8c8 2000 	strlt.w	r2, [r8]
 8007bae:	ea33 030b 	bics.w	r3, r3, fp
 8007bb2:	d11b      	bne.n	8007bec <_dtoa_r+0xb4>
 8007bb4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007bb6:	f242 730f 	movw	r3, #9999	; 0x270f
 8007bba:	6013      	str	r3, [r2, #0]
 8007bbc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007bc0:	4333      	orrs	r3, r6
 8007bc2:	f000 8592 	beq.w	80086ea <_dtoa_r+0xbb2>
 8007bc6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007bc8:	b963      	cbnz	r3, 8007be4 <_dtoa_r+0xac>
 8007bca:	4b92      	ldr	r3, [pc, #584]	; (8007e14 <_dtoa_r+0x2dc>)
 8007bcc:	e022      	b.n	8007c14 <_dtoa_r+0xdc>
 8007bce:	4b92      	ldr	r3, [pc, #584]	; (8007e18 <_dtoa_r+0x2e0>)
 8007bd0:	9301      	str	r3, [sp, #4]
 8007bd2:	3308      	adds	r3, #8
 8007bd4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007bd6:	6013      	str	r3, [r2, #0]
 8007bd8:	9801      	ldr	r0, [sp, #4]
 8007bda:	b013      	add	sp, #76	; 0x4c
 8007bdc:	ecbd 8b04 	vpop	{d8-d9}
 8007be0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007be4:	4b8b      	ldr	r3, [pc, #556]	; (8007e14 <_dtoa_r+0x2dc>)
 8007be6:	9301      	str	r3, [sp, #4]
 8007be8:	3303      	adds	r3, #3
 8007bea:	e7f3      	b.n	8007bd4 <_dtoa_r+0x9c>
 8007bec:	2200      	movs	r2, #0
 8007bee:	2300      	movs	r3, #0
 8007bf0:	4650      	mov	r0, sl
 8007bf2:	4659      	mov	r1, fp
 8007bf4:	f7f8 ff68 	bl	8000ac8 <__aeabi_dcmpeq>
 8007bf8:	ec4b ab19 	vmov	d9, sl, fp
 8007bfc:	4680      	mov	r8, r0
 8007bfe:	b158      	cbz	r0, 8007c18 <_dtoa_r+0xe0>
 8007c00:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007c02:	2301      	movs	r3, #1
 8007c04:	6013      	str	r3, [r2, #0]
 8007c06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	f000 856b 	beq.w	80086e4 <_dtoa_r+0xbac>
 8007c0e:	4883      	ldr	r0, [pc, #524]	; (8007e1c <_dtoa_r+0x2e4>)
 8007c10:	6018      	str	r0, [r3, #0]
 8007c12:	1e43      	subs	r3, r0, #1
 8007c14:	9301      	str	r3, [sp, #4]
 8007c16:	e7df      	b.n	8007bd8 <_dtoa_r+0xa0>
 8007c18:	ec4b ab10 	vmov	d0, sl, fp
 8007c1c:	aa10      	add	r2, sp, #64	; 0x40
 8007c1e:	a911      	add	r1, sp, #68	; 0x44
 8007c20:	4620      	mov	r0, r4
 8007c22:	f001 fd01 	bl	8009628 <__d2b>
 8007c26:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007c2a:	ee08 0a10 	vmov	s16, r0
 8007c2e:	2d00      	cmp	r5, #0
 8007c30:	f000 8084 	beq.w	8007d3c <_dtoa_r+0x204>
 8007c34:	ee19 3a90 	vmov	r3, s19
 8007c38:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007c3c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007c40:	4656      	mov	r6, sl
 8007c42:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007c46:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007c4a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007c4e:	4b74      	ldr	r3, [pc, #464]	; (8007e20 <_dtoa_r+0x2e8>)
 8007c50:	2200      	movs	r2, #0
 8007c52:	4630      	mov	r0, r6
 8007c54:	4639      	mov	r1, r7
 8007c56:	f7f8 fb17 	bl	8000288 <__aeabi_dsub>
 8007c5a:	a365      	add	r3, pc, #404	; (adr r3, 8007df0 <_dtoa_r+0x2b8>)
 8007c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c60:	f7f8 fcca 	bl	80005f8 <__aeabi_dmul>
 8007c64:	a364      	add	r3, pc, #400	; (adr r3, 8007df8 <_dtoa_r+0x2c0>)
 8007c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c6a:	f7f8 fb0f 	bl	800028c <__adddf3>
 8007c6e:	4606      	mov	r6, r0
 8007c70:	4628      	mov	r0, r5
 8007c72:	460f      	mov	r7, r1
 8007c74:	f7f8 fc56 	bl	8000524 <__aeabi_i2d>
 8007c78:	a361      	add	r3, pc, #388	; (adr r3, 8007e00 <_dtoa_r+0x2c8>)
 8007c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c7e:	f7f8 fcbb 	bl	80005f8 <__aeabi_dmul>
 8007c82:	4602      	mov	r2, r0
 8007c84:	460b      	mov	r3, r1
 8007c86:	4630      	mov	r0, r6
 8007c88:	4639      	mov	r1, r7
 8007c8a:	f7f8 faff 	bl	800028c <__adddf3>
 8007c8e:	4606      	mov	r6, r0
 8007c90:	460f      	mov	r7, r1
 8007c92:	f7f8 ff61 	bl	8000b58 <__aeabi_d2iz>
 8007c96:	2200      	movs	r2, #0
 8007c98:	9000      	str	r0, [sp, #0]
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	4630      	mov	r0, r6
 8007c9e:	4639      	mov	r1, r7
 8007ca0:	f7f8 ff1c 	bl	8000adc <__aeabi_dcmplt>
 8007ca4:	b150      	cbz	r0, 8007cbc <_dtoa_r+0x184>
 8007ca6:	9800      	ldr	r0, [sp, #0]
 8007ca8:	f7f8 fc3c 	bl	8000524 <__aeabi_i2d>
 8007cac:	4632      	mov	r2, r6
 8007cae:	463b      	mov	r3, r7
 8007cb0:	f7f8 ff0a 	bl	8000ac8 <__aeabi_dcmpeq>
 8007cb4:	b910      	cbnz	r0, 8007cbc <_dtoa_r+0x184>
 8007cb6:	9b00      	ldr	r3, [sp, #0]
 8007cb8:	3b01      	subs	r3, #1
 8007cba:	9300      	str	r3, [sp, #0]
 8007cbc:	9b00      	ldr	r3, [sp, #0]
 8007cbe:	2b16      	cmp	r3, #22
 8007cc0:	d85a      	bhi.n	8007d78 <_dtoa_r+0x240>
 8007cc2:	9a00      	ldr	r2, [sp, #0]
 8007cc4:	4b57      	ldr	r3, [pc, #348]	; (8007e24 <_dtoa_r+0x2ec>)
 8007cc6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cce:	ec51 0b19 	vmov	r0, r1, d9
 8007cd2:	f7f8 ff03 	bl	8000adc <__aeabi_dcmplt>
 8007cd6:	2800      	cmp	r0, #0
 8007cd8:	d050      	beq.n	8007d7c <_dtoa_r+0x244>
 8007cda:	9b00      	ldr	r3, [sp, #0]
 8007cdc:	3b01      	subs	r3, #1
 8007cde:	9300      	str	r3, [sp, #0]
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	930b      	str	r3, [sp, #44]	; 0x2c
 8007ce4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007ce6:	1b5d      	subs	r5, r3, r5
 8007ce8:	1e6b      	subs	r3, r5, #1
 8007cea:	9305      	str	r3, [sp, #20]
 8007cec:	bf45      	ittet	mi
 8007cee:	f1c5 0301 	rsbmi	r3, r5, #1
 8007cf2:	9304      	strmi	r3, [sp, #16]
 8007cf4:	2300      	movpl	r3, #0
 8007cf6:	2300      	movmi	r3, #0
 8007cf8:	bf4c      	ite	mi
 8007cfa:	9305      	strmi	r3, [sp, #20]
 8007cfc:	9304      	strpl	r3, [sp, #16]
 8007cfe:	9b00      	ldr	r3, [sp, #0]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	db3d      	blt.n	8007d80 <_dtoa_r+0x248>
 8007d04:	9b05      	ldr	r3, [sp, #20]
 8007d06:	9a00      	ldr	r2, [sp, #0]
 8007d08:	920a      	str	r2, [sp, #40]	; 0x28
 8007d0a:	4413      	add	r3, r2
 8007d0c:	9305      	str	r3, [sp, #20]
 8007d0e:	2300      	movs	r3, #0
 8007d10:	9307      	str	r3, [sp, #28]
 8007d12:	9b06      	ldr	r3, [sp, #24]
 8007d14:	2b09      	cmp	r3, #9
 8007d16:	f200 8089 	bhi.w	8007e2c <_dtoa_r+0x2f4>
 8007d1a:	2b05      	cmp	r3, #5
 8007d1c:	bfc4      	itt	gt
 8007d1e:	3b04      	subgt	r3, #4
 8007d20:	9306      	strgt	r3, [sp, #24]
 8007d22:	9b06      	ldr	r3, [sp, #24]
 8007d24:	f1a3 0302 	sub.w	r3, r3, #2
 8007d28:	bfcc      	ite	gt
 8007d2a:	2500      	movgt	r5, #0
 8007d2c:	2501      	movle	r5, #1
 8007d2e:	2b03      	cmp	r3, #3
 8007d30:	f200 8087 	bhi.w	8007e42 <_dtoa_r+0x30a>
 8007d34:	e8df f003 	tbb	[pc, r3]
 8007d38:	59383a2d 	.word	0x59383a2d
 8007d3c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007d40:	441d      	add	r5, r3
 8007d42:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007d46:	2b20      	cmp	r3, #32
 8007d48:	bfc1      	itttt	gt
 8007d4a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007d4e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007d52:	fa0b f303 	lslgt.w	r3, fp, r3
 8007d56:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007d5a:	bfda      	itte	le
 8007d5c:	f1c3 0320 	rsble	r3, r3, #32
 8007d60:	fa06 f003 	lslle.w	r0, r6, r3
 8007d64:	4318      	orrgt	r0, r3
 8007d66:	f7f8 fbcd 	bl	8000504 <__aeabi_ui2d>
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	4606      	mov	r6, r0
 8007d6e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007d72:	3d01      	subs	r5, #1
 8007d74:	930e      	str	r3, [sp, #56]	; 0x38
 8007d76:	e76a      	b.n	8007c4e <_dtoa_r+0x116>
 8007d78:	2301      	movs	r3, #1
 8007d7a:	e7b2      	b.n	8007ce2 <_dtoa_r+0x1aa>
 8007d7c:	900b      	str	r0, [sp, #44]	; 0x2c
 8007d7e:	e7b1      	b.n	8007ce4 <_dtoa_r+0x1ac>
 8007d80:	9b04      	ldr	r3, [sp, #16]
 8007d82:	9a00      	ldr	r2, [sp, #0]
 8007d84:	1a9b      	subs	r3, r3, r2
 8007d86:	9304      	str	r3, [sp, #16]
 8007d88:	4253      	negs	r3, r2
 8007d8a:	9307      	str	r3, [sp, #28]
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	930a      	str	r3, [sp, #40]	; 0x28
 8007d90:	e7bf      	b.n	8007d12 <_dtoa_r+0x1da>
 8007d92:	2300      	movs	r3, #0
 8007d94:	9308      	str	r3, [sp, #32]
 8007d96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	dc55      	bgt.n	8007e48 <_dtoa_r+0x310>
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007da2:	461a      	mov	r2, r3
 8007da4:	9209      	str	r2, [sp, #36]	; 0x24
 8007da6:	e00c      	b.n	8007dc2 <_dtoa_r+0x28a>
 8007da8:	2301      	movs	r3, #1
 8007daa:	e7f3      	b.n	8007d94 <_dtoa_r+0x25c>
 8007dac:	2300      	movs	r3, #0
 8007dae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007db0:	9308      	str	r3, [sp, #32]
 8007db2:	9b00      	ldr	r3, [sp, #0]
 8007db4:	4413      	add	r3, r2
 8007db6:	9302      	str	r3, [sp, #8]
 8007db8:	3301      	adds	r3, #1
 8007dba:	2b01      	cmp	r3, #1
 8007dbc:	9303      	str	r3, [sp, #12]
 8007dbe:	bfb8      	it	lt
 8007dc0:	2301      	movlt	r3, #1
 8007dc2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	6042      	str	r2, [r0, #4]
 8007dc8:	2204      	movs	r2, #4
 8007dca:	f102 0614 	add.w	r6, r2, #20
 8007dce:	429e      	cmp	r6, r3
 8007dd0:	6841      	ldr	r1, [r0, #4]
 8007dd2:	d93d      	bls.n	8007e50 <_dtoa_r+0x318>
 8007dd4:	4620      	mov	r0, r4
 8007dd6:	f001 f839 	bl	8008e4c <_Balloc>
 8007dda:	9001      	str	r0, [sp, #4]
 8007ddc:	2800      	cmp	r0, #0
 8007dde:	d13b      	bne.n	8007e58 <_dtoa_r+0x320>
 8007de0:	4b11      	ldr	r3, [pc, #68]	; (8007e28 <_dtoa_r+0x2f0>)
 8007de2:	4602      	mov	r2, r0
 8007de4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007de8:	e6c0      	b.n	8007b6c <_dtoa_r+0x34>
 8007dea:	2301      	movs	r3, #1
 8007dec:	e7df      	b.n	8007dae <_dtoa_r+0x276>
 8007dee:	bf00      	nop
 8007df0:	636f4361 	.word	0x636f4361
 8007df4:	3fd287a7 	.word	0x3fd287a7
 8007df8:	8b60c8b3 	.word	0x8b60c8b3
 8007dfc:	3fc68a28 	.word	0x3fc68a28
 8007e00:	509f79fb 	.word	0x509f79fb
 8007e04:	3fd34413 	.word	0x3fd34413
 8007e08:	0800b1fe 	.word	0x0800b1fe
 8007e0c:	0800b215 	.word	0x0800b215
 8007e10:	7ff00000 	.word	0x7ff00000
 8007e14:	0800b1fa 	.word	0x0800b1fa
 8007e18:	0800b1f1 	.word	0x0800b1f1
 8007e1c:	0800b075 	.word	0x0800b075
 8007e20:	3ff80000 	.word	0x3ff80000
 8007e24:	0800b380 	.word	0x0800b380
 8007e28:	0800b270 	.word	0x0800b270
 8007e2c:	2501      	movs	r5, #1
 8007e2e:	2300      	movs	r3, #0
 8007e30:	9306      	str	r3, [sp, #24]
 8007e32:	9508      	str	r5, [sp, #32]
 8007e34:	f04f 33ff 	mov.w	r3, #4294967295
 8007e38:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	2312      	movs	r3, #18
 8007e40:	e7b0      	b.n	8007da4 <_dtoa_r+0x26c>
 8007e42:	2301      	movs	r3, #1
 8007e44:	9308      	str	r3, [sp, #32]
 8007e46:	e7f5      	b.n	8007e34 <_dtoa_r+0x2fc>
 8007e48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e4a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007e4e:	e7b8      	b.n	8007dc2 <_dtoa_r+0x28a>
 8007e50:	3101      	adds	r1, #1
 8007e52:	6041      	str	r1, [r0, #4]
 8007e54:	0052      	lsls	r2, r2, #1
 8007e56:	e7b8      	b.n	8007dca <_dtoa_r+0x292>
 8007e58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e5a:	9a01      	ldr	r2, [sp, #4]
 8007e5c:	601a      	str	r2, [r3, #0]
 8007e5e:	9b03      	ldr	r3, [sp, #12]
 8007e60:	2b0e      	cmp	r3, #14
 8007e62:	f200 809d 	bhi.w	8007fa0 <_dtoa_r+0x468>
 8007e66:	2d00      	cmp	r5, #0
 8007e68:	f000 809a 	beq.w	8007fa0 <_dtoa_r+0x468>
 8007e6c:	9b00      	ldr	r3, [sp, #0]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	dd32      	ble.n	8007ed8 <_dtoa_r+0x3a0>
 8007e72:	4ab7      	ldr	r2, [pc, #732]	; (8008150 <_dtoa_r+0x618>)
 8007e74:	f003 030f 	and.w	r3, r3, #15
 8007e78:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007e7c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007e80:	9b00      	ldr	r3, [sp, #0]
 8007e82:	05d8      	lsls	r0, r3, #23
 8007e84:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007e88:	d516      	bpl.n	8007eb8 <_dtoa_r+0x380>
 8007e8a:	4bb2      	ldr	r3, [pc, #712]	; (8008154 <_dtoa_r+0x61c>)
 8007e8c:	ec51 0b19 	vmov	r0, r1, d9
 8007e90:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007e94:	f7f8 fcda 	bl	800084c <__aeabi_ddiv>
 8007e98:	f007 070f 	and.w	r7, r7, #15
 8007e9c:	4682      	mov	sl, r0
 8007e9e:	468b      	mov	fp, r1
 8007ea0:	2503      	movs	r5, #3
 8007ea2:	4eac      	ldr	r6, [pc, #688]	; (8008154 <_dtoa_r+0x61c>)
 8007ea4:	b957      	cbnz	r7, 8007ebc <_dtoa_r+0x384>
 8007ea6:	4642      	mov	r2, r8
 8007ea8:	464b      	mov	r3, r9
 8007eaa:	4650      	mov	r0, sl
 8007eac:	4659      	mov	r1, fp
 8007eae:	f7f8 fccd 	bl	800084c <__aeabi_ddiv>
 8007eb2:	4682      	mov	sl, r0
 8007eb4:	468b      	mov	fp, r1
 8007eb6:	e028      	b.n	8007f0a <_dtoa_r+0x3d2>
 8007eb8:	2502      	movs	r5, #2
 8007eba:	e7f2      	b.n	8007ea2 <_dtoa_r+0x36a>
 8007ebc:	07f9      	lsls	r1, r7, #31
 8007ebe:	d508      	bpl.n	8007ed2 <_dtoa_r+0x39a>
 8007ec0:	4640      	mov	r0, r8
 8007ec2:	4649      	mov	r1, r9
 8007ec4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007ec8:	f7f8 fb96 	bl	80005f8 <__aeabi_dmul>
 8007ecc:	3501      	adds	r5, #1
 8007ece:	4680      	mov	r8, r0
 8007ed0:	4689      	mov	r9, r1
 8007ed2:	107f      	asrs	r7, r7, #1
 8007ed4:	3608      	adds	r6, #8
 8007ed6:	e7e5      	b.n	8007ea4 <_dtoa_r+0x36c>
 8007ed8:	f000 809b 	beq.w	8008012 <_dtoa_r+0x4da>
 8007edc:	9b00      	ldr	r3, [sp, #0]
 8007ede:	4f9d      	ldr	r7, [pc, #628]	; (8008154 <_dtoa_r+0x61c>)
 8007ee0:	425e      	negs	r6, r3
 8007ee2:	4b9b      	ldr	r3, [pc, #620]	; (8008150 <_dtoa_r+0x618>)
 8007ee4:	f006 020f 	and.w	r2, r6, #15
 8007ee8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ef0:	ec51 0b19 	vmov	r0, r1, d9
 8007ef4:	f7f8 fb80 	bl	80005f8 <__aeabi_dmul>
 8007ef8:	1136      	asrs	r6, r6, #4
 8007efa:	4682      	mov	sl, r0
 8007efc:	468b      	mov	fp, r1
 8007efe:	2300      	movs	r3, #0
 8007f00:	2502      	movs	r5, #2
 8007f02:	2e00      	cmp	r6, #0
 8007f04:	d17a      	bne.n	8007ffc <_dtoa_r+0x4c4>
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d1d3      	bne.n	8007eb2 <_dtoa_r+0x37a>
 8007f0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	f000 8082 	beq.w	8008016 <_dtoa_r+0x4de>
 8007f12:	4b91      	ldr	r3, [pc, #580]	; (8008158 <_dtoa_r+0x620>)
 8007f14:	2200      	movs	r2, #0
 8007f16:	4650      	mov	r0, sl
 8007f18:	4659      	mov	r1, fp
 8007f1a:	f7f8 fddf 	bl	8000adc <__aeabi_dcmplt>
 8007f1e:	2800      	cmp	r0, #0
 8007f20:	d079      	beq.n	8008016 <_dtoa_r+0x4de>
 8007f22:	9b03      	ldr	r3, [sp, #12]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d076      	beq.n	8008016 <_dtoa_r+0x4de>
 8007f28:	9b02      	ldr	r3, [sp, #8]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	dd36      	ble.n	8007f9c <_dtoa_r+0x464>
 8007f2e:	9b00      	ldr	r3, [sp, #0]
 8007f30:	4650      	mov	r0, sl
 8007f32:	4659      	mov	r1, fp
 8007f34:	1e5f      	subs	r7, r3, #1
 8007f36:	2200      	movs	r2, #0
 8007f38:	4b88      	ldr	r3, [pc, #544]	; (800815c <_dtoa_r+0x624>)
 8007f3a:	f7f8 fb5d 	bl	80005f8 <__aeabi_dmul>
 8007f3e:	9e02      	ldr	r6, [sp, #8]
 8007f40:	4682      	mov	sl, r0
 8007f42:	468b      	mov	fp, r1
 8007f44:	3501      	adds	r5, #1
 8007f46:	4628      	mov	r0, r5
 8007f48:	f7f8 faec 	bl	8000524 <__aeabi_i2d>
 8007f4c:	4652      	mov	r2, sl
 8007f4e:	465b      	mov	r3, fp
 8007f50:	f7f8 fb52 	bl	80005f8 <__aeabi_dmul>
 8007f54:	4b82      	ldr	r3, [pc, #520]	; (8008160 <_dtoa_r+0x628>)
 8007f56:	2200      	movs	r2, #0
 8007f58:	f7f8 f998 	bl	800028c <__adddf3>
 8007f5c:	46d0      	mov	r8, sl
 8007f5e:	46d9      	mov	r9, fp
 8007f60:	4682      	mov	sl, r0
 8007f62:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007f66:	2e00      	cmp	r6, #0
 8007f68:	d158      	bne.n	800801c <_dtoa_r+0x4e4>
 8007f6a:	4b7e      	ldr	r3, [pc, #504]	; (8008164 <_dtoa_r+0x62c>)
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	4640      	mov	r0, r8
 8007f70:	4649      	mov	r1, r9
 8007f72:	f7f8 f989 	bl	8000288 <__aeabi_dsub>
 8007f76:	4652      	mov	r2, sl
 8007f78:	465b      	mov	r3, fp
 8007f7a:	4680      	mov	r8, r0
 8007f7c:	4689      	mov	r9, r1
 8007f7e:	f7f8 fdcb 	bl	8000b18 <__aeabi_dcmpgt>
 8007f82:	2800      	cmp	r0, #0
 8007f84:	f040 8295 	bne.w	80084b2 <_dtoa_r+0x97a>
 8007f88:	4652      	mov	r2, sl
 8007f8a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007f8e:	4640      	mov	r0, r8
 8007f90:	4649      	mov	r1, r9
 8007f92:	f7f8 fda3 	bl	8000adc <__aeabi_dcmplt>
 8007f96:	2800      	cmp	r0, #0
 8007f98:	f040 8289 	bne.w	80084ae <_dtoa_r+0x976>
 8007f9c:	ec5b ab19 	vmov	sl, fp, d9
 8007fa0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	f2c0 8148 	blt.w	8008238 <_dtoa_r+0x700>
 8007fa8:	9a00      	ldr	r2, [sp, #0]
 8007faa:	2a0e      	cmp	r2, #14
 8007fac:	f300 8144 	bgt.w	8008238 <_dtoa_r+0x700>
 8007fb0:	4b67      	ldr	r3, [pc, #412]	; (8008150 <_dtoa_r+0x618>)
 8007fb2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007fb6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007fba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	f280 80d5 	bge.w	800816c <_dtoa_r+0x634>
 8007fc2:	9b03      	ldr	r3, [sp, #12]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	f300 80d1 	bgt.w	800816c <_dtoa_r+0x634>
 8007fca:	f040 826f 	bne.w	80084ac <_dtoa_r+0x974>
 8007fce:	4b65      	ldr	r3, [pc, #404]	; (8008164 <_dtoa_r+0x62c>)
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	4640      	mov	r0, r8
 8007fd4:	4649      	mov	r1, r9
 8007fd6:	f7f8 fb0f 	bl	80005f8 <__aeabi_dmul>
 8007fda:	4652      	mov	r2, sl
 8007fdc:	465b      	mov	r3, fp
 8007fde:	f7f8 fd91 	bl	8000b04 <__aeabi_dcmpge>
 8007fe2:	9e03      	ldr	r6, [sp, #12]
 8007fe4:	4637      	mov	r7, r6
 8007fe6:	2800      	cmp	r0, #0
 8007fe8:	f040 8245 	bne.w	8008476 <_dtoa_r+0x93e>
 8007fec:	9d01      	ldr	r5, [sp, #4]
 8007fee:	2331      	movs	r3, #49	; 0x31
 8007ff0:	f805 3b01 	strb.w	r3, [r5], #1
 8007ff4:	9b00      	ldr	r3, [sp, #0]
 8007ff6:	3301      	adds	r3, #1
 8007ff8:	9300      	str	r3, [sp, #0]
 8007ffa:	e240      	b.n	800847e <_dtoa_r+0x946>
 8007ffc:	07f2      	lsls	r2, r6, #31
 8007ffe:	d505      	bpl.n	800800c <_dtoa_r+0x4d4>
 8008000:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008004:	f7f8 faf8 	bl	80005f8 <__aeabi_dmul>
 8008008:	3501      	adds	r5, #1
 800800a:	2301      	movs	r3, #1
 800800c:	1076      	asrs	r6, r6, #1
 800800e:	3708      	adds	r7, #8
 8008010:	e777      	b.n	8007f02 <_dtoa_r+0x3ca>
 8008012:	2502      	movs	r5, #2
 8008014:	e779      	b.n	8007f0a <_dtoa_r+0x3d2>
 8008016:	9f00      	ldr	r7, [sp, #0]
 8008018:	9e03      	ldr	r6, [sp, #12]
 800801a:	e794      	b.n	8007f46 <_dtoa_r+0x40e>
 800801c:	9901      	ldr	r1, [sp, #4]
 800801e:	4b4c      	ldr	r3, [pc, #304]	; (8008150 <_dtoa_r+0x618>)
 8008020:	4431      	add	r1, r6
 8008022:	910d      	str	r1, [sp, #52]	; 0x34
 8008024:	9908      	ldr	r1, [sp, #32]
 8008026:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800802a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800802e:	2900      	cmp	r1, #0
 8008030:	d043      	beq.n	80080ba <_dtoa_r+0x582>
 8008032:	494d      	ldr	r1, [pc, #308]	; (8008168 <_dtoa_r+0x630>)
 8008034:	2000      	movs	r0, #0
 8008036:	f7f8 fc09 	bl	800084c <__aeabi_ddiv>
 800803a:	4652      	mov	r2, sl
 800803c:	465b      	mov	r3, fp
 800803e:	f7f8 f923 	bl	8000288 <__aeabi_dsub>
 8008042:	9d01      	ldr	r5, [sp, #4]
 8008044:	4682      	mov	sl, r0
 8008046:	468b      	mov	fp, r1
 8008048:	4649      	mov	r1, r9
 800804a:	4640      	mov	r0, r8
 800804c:	f7f8 fd84 	bl	8000b58 <__aeabi_d2iz>
 8008050:	4606      	mov	r6, r0
 8008052:	f7f8 fa67 	bl	8000524 <__aeabi_i2d>
 8008056:	4602      	mov	r2, r0
 8008058:	460b      	mov	r3, r1
 800805a:	4640      	mov	r0, r8
 800805c:	4649      	mov	r1, r9
 800805e:	f7f8 f913 	bl	8000288 <__aeabi_dsub>
 8008062:	3630      	adds	r6, #48	; 0x30
 8008064:	f805 6b01 	strb.w	r6, [r5], #1
 8008068:	4652      	mov	r2, sl
 800806a:	465b      	mov	r3, fp
 800806c:	4680      	mov	r8, r0
 800806e:	4689      	mov	r9, r1
 8008070:	f7f8 fd34 	bl	8000adc <__aeabi_dcmplt>
 8008074:	2800      	cmp	r0, #0
 8008076:	d163      	bne.n	8008140 <_dtoa_r+0x608>
 8008078:	4642      	mov	r2, r8
 800807a:	464b      	mov	r3, r9
 800807c:	4936      	ldr	r1, [pc, #216]	; (8008158 <_dtoa_r+0x620>)
 800807e:	2000      	movs	r0, #0
 8008080:	f7f8 f902 	bl	8000288 <__aeabi_dsub>
 8008084:	4652      	mov	r2, sl
 8008086:	465b      	mov	r3, fp
 8008088:	f7f8 fd28 	bl	8000adc <__aeabi_dcmplt>
 800808c:	2800      	cmp	r0, #0
 800808e:	f040 80b5 	bne.w	80081fc <_dtoa_r+0x6c4>
 8008092:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008094:	429d      	cmp	r5, r3
 8008096:	d081      	beq.n	8007f9c <_dtoa_r+0x464>
 8008098:	4b30      	ldr	r3, [pc, #192]	; (800815c <_dtoa_r+0x624>)
 800809a:	2200      	movs	r2, #0
 800809c:	4650      	mov	r0, sl
 800809e:	4659      	mov	r1, fp
 80080a0:	f7f8 faaa 	bl	80005f8 <__aeabi_dmul>
 80080a4:	4b2d      	ldr	r3, [pc, #180]	; (800815c <_dtoa_r+0x624>)
 80080a6:	4682      	mov	sl, r0
 80080a8:	468b      	mov	fp, r1
 80080aa:	4640      	mov	r0, r8
 80080ac:	4649      	mov	r1, r9
 80080ae:	2200      	movs	r2, #0
 80080b0:	f7f8 faa2 	bl	80005f8 <__aeabi_dmul>
 80080b4:	4680      	mov	r8, r0
 80080b6:	4689      	mov	r9, r1
 80080b8:	e7c6      	b.n	8008048 <_dtoa_r+0x510>
 80080ba:	4650      	mov	r0, sl
 80080bc:	4659      	mov	r1, fp
 80080be:	f7f8 fa9b 	bl	80005f8 <__aeabi_dmul>
 80080c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80080c4:	9d01      	ldr	r5, [sp, #4]
 80080c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80080c8:	4682      	mov	sl, r0
 80080ca:	468b      	mov	fp, r1
 80080cc:	4649      	mov	r1, r9
 80080ce:	4640      	mov	r0, r8
 80080d0:	f7f8 fd42 	bl	8000b58 <__aeabi_d2iz>
 80080d4:	4606      	mov	r6, r0
 80080d6:	f7f8 fa25 	bl	8000524 <__aeabi_i2d>
 80080da:	3630      	adds	r6, #48	; 0x30
 80080dc:	4602      	mov	r2, r0
 80080de:	460b      	mov	r3, r1
 80080e0:	4640      	mov	r0, r8
 80080e2:	4649      	mov	r1, r9
 80080e4:	f7f8 f8d0 	bl	8000288 <__aeabi_dsub>
 80080e8:	f805 6b01 	strb.w	r6, [r5], #1
 80080ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80080ee:	429d      	cmp	r5, r3
 80080f0:	4680      	mov	r8, r0
 80080f2:	4689      	mov	r9, r1
 80080f4:	f04f 0200 	mov.w	r2, #0
 80080f8:	d124      	bne.n	8008144 <_dtoa_r+0x60c>
 80080fa:	4b1b      	ldr	r3, [pc, #108]	; (8008168 <_dtoa_r+0x630>)
 80080fc:	4650      	mov	r0, sl
 80080fe:	4659      	mov	r1, fp
 8008100:	f7f8 f8c4 	bl	800028c <__adddf3>
 8008104:	4602      	mov	r2, r0
 8008106:	460b      	mov	r3, r1
 8008108:	4640      	mov	r0, r8
 800810a:	4649      	mov	r1, r9
 800810c:	f7f8 fd04 	bl	8000b18 <__aeabi_dcmpgt>
 8008110:	2800      	cmp	r0, #0
 8008112:	d173      	bne.n	80081fc <_dtoa_r+0x6c4>
 8008114:	4652      	mov	r2, sl
 8008116:	465b      	mov	r3, fp
 8008118:	4913      	ldr	r1, [pc, #76]	; (8008168 <_dtoa_r+0x630>)
 800811a:	2000      	movs	r0, #0
 800811c:	f7f8 f8b4 	bl	8000288 <__aeabi_dsub>
 8008120:	4602      	mov	r2, r0
 8008122:	460b      	mov	r3, r1
 8008124:	4640      	mov	r0, r8
 8008126:	4649      	mov	r1, r9
 8008128:	f7f8 fcd8 	bl	8000adc <__aeabi_dcmplt>
 800812c:	2800      	cmp	r0, #0
 800812e:	f43f af35 	beq.w	8007f9c <_dtoa_r+0x464>
 8008132:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008134:	1e6b      	subs	r3, r5, #1
 8008136:	930f      	str	r3, [sp, #60]	; 0x3c
 8008138:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800813c:	2b30      	cmp	r3, #48	; 0x30
 800813e:	d0f8      	beq.n	8008132 <_dtoa_r+0x5fa>
 8008140:	9700      	str	r7, [sp, #0]
 8008142:	e049      	b.n	80081d8 <_dtoa_r+0x6a0>
 8008144:	4b05      	ldr	r3, [pc, #20]	; (800815c <_dtoa_r+0x624>)
 8008146:	f7f8 fa57 	bl	80005f8 <__aeabi_dmul>
 800814a:	4680      	mov	r8, r0
 800814c:	4689      	mov	r9, r1
 800814e:	e7bd      	b.n	80080cc <_dtoa_r+0x594>
 8008150:	0800b380 	.word	0x0800b380
 8008154:	0800b358 	.word	0x0800b358
 8008158:	3ff00000 	.word	0x3ff00000
 800815c:	40240000 	.word	0x40240000
 8008160:	401c0000 	.word	0x401c0000
 8008164:	40140000 	.word	0x40140000
 8008168:	3fe00000 	.word	0x3fe00000
 800816c:	9d01      	ldr	r5, [sp, #4]
 800816e:	4656      	mov	r6, sl
 8008170:	465f      	mov	r7, fp
 8008172:	4642      	mov	r2, r8
 8008174:	464b      	mov	r3, r9
 8008176:	4630      	mov	r0, r6
 8008178:	4639      	mov	r1, r7
 800817a:	f7f8 fb67 	bl	800084c <__aeabi_ddiv>
 800817e:	f7f8 fceb 	bl	8000b58 <__aeabi_d2iz>
 8008182:	4682      	mov	sl, r0
 8008184:	f7f8 f9ce 	bl	8000524 <__aeabi_i2d>
 8008188:	4642      	mov	r2, r8
 800818a:	464b      	mov	r3, r9
 800818c:	f7f8 fa34 	bl	80005f8 <__aeabi_dmul>
 8008190:	4602      	mov	r2, r0
 8008192:	460b      	mov	r3, r1
 8008194:	4630      	mov	r0, r6
 8008196:	4639      	mov	r1, r7
 8008198:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800819c:	f7f8 f874 	bl	8000288 <__aeabi_dsub>
 80081a0:	f805 6b01 	strb.w	r6, [r5], #1
 80081a4:	9e01      	ldr	r6, [sp, #4]
 80081a6:	9f03      	ldr	r7, [sp, #12]
 80081a8:	1bae      	subs	r6, r5, r6
 80081aa:	42b7      	cmp	r7, r6
 80081ac:	4602      	mov	r2, r0
 80081ae:	460b      	mov	r3, r1
 80081b0:	d135      	bne.n	800821e <_dtoa_r+0x6e6>
 80081b2:	f7f8 f86b 	bl	800028c <__adddf3>
 80081b6:	4642      	mov	r2, r8
 80081b8:	464b      	mov	r3, r9
 80081ba:	4606      	mov	r6, r0
 80081bc:	460f      	mov	r7, r1
 80081be:	f7f8 fcab 	bl	8000b18 <__aeabi_dcmpgt>
 80081c2:	b9d0      	cbnz	r0, 80081fa <_dtoa_r+0x6c2>
 80081c4:	4642      	mov	r2, r8
 80081c6:	464b      	mov	r3, r9
 80081c8:	4630      	mov	r0, r6
 80081ca:	4639      	mov	r1, r7
 80081cc:	f7f8 fc7c 	bl	8000ac8 <__aeabi_dcmpeq>
 80081d0:	b110      	cbz	r0, 80081d8 <_dtoa_r+0x6a0>
 80081d2:	f01a 0f01 	tst.w	sl, #1
 80081d6:	d110      	bne.n	80081fa <_dtoa_r+0x6c2>
 80081d8:	4620      	mov	r0, r4
 80081da:	ee18 1a10 	vmov	r1, s16
 80081de:	f000 fe75 	bl	8008ecc <_Bfree>
 80081e2:	2300      	movs	r3, #0
 80081e4:	9800      	ldr	r0, [sp, #0]
 80081e6:	702b      	strb	r3, [r5, #0]
 80081e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80081ea:	3001      	adds	r0, #1
 80081ec:	6018      	str	r0, [r3, #0]
 80081ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	f43f acf1 	beq.w	8007bd8 <_dtoa_r+0xa0>
 80081f6:	601d      	str	r5, [r3, #0]
 80081f8:	e4ee      	b.n	8007bd8 <_dtoa_r+0xa0>
 80081fa:	9f00      	ldr	r7, [sp, #0]
 80081fc:	462b      	mov	r3, r5
 80081fe:	461d      	mov	r5, r3
 8008200:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008204:	2a39      	cmp	r2, #57	; 0x39
 8008206:	d106      	bne.n	8008216 <_dtoa_r+0x6de>
 8008208:	9a01      	ldr	r2, [sp, #4]
 800820a:	429a      	cmp	r2, r3
 800820c:	d1f7      	bne.n	80081fe <_dtoa_r+0x6c6>
 800820e:	9901      	ldr	r1, [sp, #4]
 8008210:	2230      	movs	r2, #48	; 0x30
 8008212:	3701      	adds	r7, #1
 8008214:	700a      	strb	r2, [r1, #0]
 8008216:	781a      	ldrb	r2, [r3, #0]
 8008218:	3201      	adds	r2, #1
 800821a:	701a      	strb	r2, [r3, #0]
 800821c:	e790      	b.n	8008140 <_dtoa_r+0x608>
 800821e:	4ba6      	ldr	r3, [pc, #664]	; (80084b8 <_dtoa_r+0x980>)
 8008220:	2200      	movs	r2, #0
 8008222:	f7f8 f9e9 	bl	80005f8 <__aeabi_dmul>
 8008226:	2200      	movs	r2, #0
 8008228:	2300      	movs	r3, #0
 800822a:	4606      	mov	r6, r0
 800822c:	460f      	mov	r7, r1
 800822e:	f7f8 fc4b 	bl	8000ac8 <__aeabi_dcmpeq>
 8008232:	2800      	cmp	r0, #0
 8008234:	d09d      	beq.n	8008172 <_dtoa_r+0x63a>
 8008236:	e7cf      	b.n	80081d8 <_dtoa_r+0x6a0>
 8008238:	9a08      	ldr	r2, [sp, #32]
 800823a:	2a00      	cmp	r2, #0
 800823c:	f000 80d7 	beq.w	80083ee <_dtoa_r+0x8b6>
 8008240:	9a06      	ldr	r2, [sp, #24]
 8008242:	2a01      	cmp	r2, #1
 8008244:	f300 80ba 	bgt.w	80083bc <_dtoa_r+0x884>
 8008248:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800824a:	2a00      	cmp	r2, #0
 800824c:	f000 80b2 	beq.w	80083b4 <_dtoa_r+0x87c>
 8008250:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008254:	9e07      	ldr	r6, [sp, #28]
 8008256:	9d04      	ldr	r5, [sp, #16]
 8008258:	9a04      	ldr	r2, [sp, #16]
 800825a:	441a      	add	r2, r3
 800825c:	9204      	str	r2, [sp, #16]
 800825e:	9a05      	ldr	r2, [sp, #20]
 8008260:	2101      	movs	r1, #1
 8008262:	441a      	add	r2, r3
 8008264:	4620      	mov	r0, r4
 8008266:	9205      	str	r2, [sp, #20]
 8008268:	f000 ff32 	bl	80090d0 <__i2b>
 800826c:	4607      	mov	r7, r0
 800826e:	2d00      	cmp	r5, #0
 8008270:	dd0c      	ble.n	800828c <_dtoa_r+0x754>
 8008272:	9b05      	ldr	r3, [sp, #20]
 8008274:	2b00      	cmp	r3, #0
 8008276:	dd09      	ble.n	800828c <_dtoa_r+0x754>
 8008278:	42ab      	cmp	r3, r5
 800827a:	9a04      	ldr	r2, [sp, #16]
 800827c:	bfa8      	it	ge
 800827e:	462b      	movge	r3, r5
 8008280:	1ad2      	subs	r2, r2, r3
 8008282:	9204      	str	r2, [sp, #16]
 8008284:	9a05      	ldr	r2, [sp, #20]
 8008286:	1aed      	subs	r5, r5, r3
 8008288:	1ad3      	subs	r3, r2, r3
 800828a:	9305      	str	r3, [sp, #20]
 800828c:	9b07      	ldr	r3, [sp, #28]
 800828e:	b31b      	cbz	r3, 80082d8 <_dtoa_r+0x7a0>
 8008290:	9b08      	ldr	r3, [sp, #32]
 8008292:	2b00      	cmp	r3, #0
 8008294:	f000 80af 	beq.w	80083f6 <_dtoa_r+0x8be>
 8008298:	2e00      	cmp	r6, #0
 800829a:	dd13      	ble.n	80082c4 <_dtoa_r+0x78c>
 800829c:	4639      	mov	r1, r7
 800829e:	4632      	mov	r2, r6
 80082a0:	4620      	mov	r0, r4
 80082a2:	f000 ffd5 	bl	8009250 <__pow5mult>
 80082a6:	ee18 2a10 	vmov	r2, s16
 80082aa:	4601      	mov	r1, r0
 80082ac:	4607      	mov	r7, r0
 80082ae:	4620      	mov	r0, r4
 80082b0:	f000 ff24 	bl	80090fc <__multiply>
 80082b4:	ee18 1a10 	vmov	r1, s16
 80082b8:	4680      	mov	r8, r0
 80082ba:	4620      	mov	r0, r4
 80082bc:	f000 fe06 	bl	8008ecc <_Bfree>
 80082c0:	ee08 8a10 	vmov	s16, r8
 80082c4:	9b07      	ldr	r3, [sp, #28]
 80082c6:	1b9a      	subs	r2, r3, r6
 80082c8:	d006      	beq.n	80082d8 <_dtoa_r+0x7a0>
 80082ca:	ee18 1a10 	vmov	r1, s16
 80082ce:	4620      	mov	r0, r4
 80082d0:	f000 ffbe 	bl	8009250 <__pow5mult>
 80082d4:	ee08 0a10 	vmov	s16, r0
 80082d8:	2101      	movs	r1, #1
 80082da:	4620      	mov	r0, r4
 80082dc:	f000 fef8 	bl	80090d0 <__i2b>
 80082e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	4606      	mov	r6, r0
 80082e6:	f340 8088 	ble.w	80083fa <_dtoa_r+0x8c2>
 80082ea:	461a      	mov	r2, r3
 80082ec:	4601      	mov	r1, r0
 80082ee:	4620      	mov	r0, r4
 80082f0:	f000 ffae 	bl	8009250 <__pow5mult>
 80082f4:	9b06      	ldr	r3, [sp, #24]
 80082f6:	2b01      	cmp	r3, #1
 80082f8:	4606      	mov	r6, r0
 80082fa:	f340 8081 	ble.w	8008400 <_dtoa_r+0x8c8>
 80082fe:	f04f 0800 	mov.w	r8, #0
 8008302:	6933      	ldr	r3, [r6, #16]
 8008304:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008308:	6918      	ldr	r0, [r3, #16]
 800830a:	f000 fe91 	bl	8009030 <__hi0bits>
 800830e:	f1c0 0020 	rsb	r0, r0, #32
 8008312:	9b05      	ldr	r3, [sp, #20]
 8008314:	4418      	add	r0, r3
 8008316:	f010 001f 	ands.w	r0, r0, #31
 800831a:	f000 8092 	beq.w	8008442 <_dtoa_r+0x90a>
 800831e:	f1c0 0320 	rsb	r3, r0, #32
 8008322:	2b04      	cmp	r3, #4
 8008324:	f340 808a 	ble.w	800843c <_dtoa_r+0x904>
 8008328:	f1c0 001c 	rsb	r0, r0, #28
 800832c:	9b04      	ldr	r3, [sp, #16]
 800832e:	4403      	add	r3, r0
 8008330:	9304      	str	r3, [sp, #16]
 8008332:	9b05      	ldr	r3, [sp, #20]
 8008334:	4403      	add	r3, r0
 8008336:	4405      	add	r5, r0
 8008338:	9305      	str	r3, [sp, #20]
 800833a:	9b04      	ldr	r3, [sp, #16]
 800833c:	2b00      	cmp	r3, #0
 800833e:	dd07      	ble.n	8008350 <_dtoa_r+0x818>
 8008340:	ee18 1a10 	vmov	r1, s16
 8008344:	461a      	mov	r2, r3
 8008346:	4620      	mov	r0, r4
 8008348:	f000 ffdc 	bl	8009304 <__lshift>
 800834c:	ee08 0a10 	vmov	s16, r0
 8008350:	9b05      	ldr	r3, [sp, #20]
 8008352:	2b00      	cmp	r3, #0
 8008354:	dd05      	ble.n	8008362 <_dtoa_r+0x82a>
 8008356:	4631      	mov	r1, r6
 8008358:	461a      	mov	r2, r3
 800835a:	4620      	mov	r0, r4
 800835c:	f000 ffd2 	bl	8009304 <__lshift>
 8008360:	4606      	mov	r6, r0
 8008362:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008364:	2b00      	cmp	r3, #0
 8008366:	d06e      	beq.n	8008446 <_dtoa_r+0x90e>
 8008368:	ee18 0a10 	vmov	r0, s16
 800836c:	4631      	mov	r1, r6
 800836e:	f001 f839 	bl	80093e4 <__mcmp>
 8008372:	2800      	cmp	r0, #0
 8008374:	da67      	bge.n	8008446 <_dtoa_r+0x90e>
 8008376:	9b00      	ldr	r3, [sp, #0]
 8008378:	3b01      	subs	r3, #1
 800837a:	ee18 1a10 	vmov	r1, s16
 800837e:	9300      	str	r3, [sp, #0]
 8008380:	220a      	movs	r2, #10
 8008382:	2300      	movs	r3, #0
 8008384:	4620      	mov	r0, r4
 8008386:	f000 fdc3 	bl	8008f10 <__multadd>
 800838a:	9b08      	ldr	r3, [sp, #32]
 800838c:	ee08 0a10 	vmov	s16, r0
 8008390:	2b00      	cmp	r3, #0
 8008392:	f000 81b1 	beq.w	80086f8 <_dtoa_r+0xbc0>
 8008396:	2300      	movs	r3, #0
 8008398:	4639      	mov	r1, r7
 800839a:	220a      	movs	r2, #10
 800839c:	4620      	mov	r0, r4
 800839e:	f000 fdb7 	bl	8008f10 <__multadd>
 80083a2:	9b02      	ldr	r3, [sp, #8]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	4607      	mov	r7, r0
 80083a8:	f300 808e 	bgt.w	80084c8 <_dtoa_r+0x990>
 80083ac:	9b06      	ldr	r3, [sp, #24]
 80083ae:	2b02      	cmp	r3, #2
 80083b0:	dc51      	bgt.n	8008456 <_dtoa_r+0x91e>
 80083b2:	e089      	b.n	80084c8 <_dtoa_r+0x990>
 80083b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80083b6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80083ba:	e74b      	b.n	8008254 <_dtoa_r+0x71c>
 80083bc:	9b03      	ldr	r3, [sp, #12]
 80083be:	1e5e      	subs	r6, r3, #1
 80083c0:	9b07      	ldr	r3, [sp, #28]
 80083c2:	42b3      	cmp	r3, r6
 80083c4:	bfbf      	itttt	lt
 80083c6:	9b07      	ldrlt	r3, [sp, #28]
 80083c8:	9607      	strlt	r6, [sp, #28]
 80083ca:	1af2      	sublt	r2, r6, r3
 80083cc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80083ce:	bfb6      	itet	lt
 80083d0:	189b      	addlt	r3, r3, r2
 80083d2:	1b9e      	subge	r6, r3, r6
 80083d4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80083d6:	9b03      	ldr	r3, [sp, #12]
 80083d8:	bfb8      	it	lt
 80083da:	2600      	movlt	r6, #0
 80083dc:	2b00      	cmp	r3, #0
 80083de:	bfb7      	itett	lt
 80083e0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80083e4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80083e8:	1a9d      	sublt	r5, r3, r2
 80083ea:	2300      	movlt	r3, #0
 80083ec:	e734      	b.n	8008258 <_dtoa_r+0x720>
 80083ee:	9e07      	ldr	r6, [sp, #28]
 80083f0:	9d04      	ldr	r5, [sp, #16]
 80083f2:	9f08      	ldr	r7, [sp, #32]
 80083f4:	e73b      	b.n	800826e <_dtoa_r+0x736>
 80083f6:	9a07      	ldr	r2, [sp, #28]
 80083f8:	e767      	b.n	80082ca <_dtoa_r+0x792>
 80083fa:	9b06      	ldr	r3, [sp, #24]
 80083fc:	2b01      	cmp	r3, #1
 80083fe:	dc18      	bgt.n	8008432 <_dtoa_r+0x8fa>
 8008400:	f1ba 0f00 	cmp.w	sl, #0
 8008404:	d115      	bne.n	8008432 <_dtoa_r+0x8fa>
 8008406:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800840a:	b993      	cbnz	r3, 8008432 <_dtoa_r+0x8fa>
 800840c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008410:	0d1b      	lsrs	r3, r3, #20
 8008412:	051b      	lsls	r3, r3, #20
 8008414:	b183      	cbz	r3, 8008438 <_dtoa_r+0x900>
 8008416:	9b04      	ldr	r3, [sp, #16]
 8008418:	3301      	adds	r3, #1
 800841a:	9304      	str	r3, [sp, #16]
 800841c:	9b05      	ldr	r3, [sp, #20]
 800841e:	3301      	adds	r3, #1
 8008420:	9305      	str	r3, [sp, #20]
 8008422:	f04f 0801 	mov.w	r8, #1
 8008426:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008428:	2b00      	cmp	r3, #0
 800842a:	f47f af6a 	bne.w	8008302 <_dtoa_r+0x7ca>
 800842e:	2001      	movs	r0, #1
 8008430:	e76f      	b.n	8008312 <_dtoa_r+0x7da>
 8008432:	f04f 0800 	mov.w	r8, #0
 8008436:	e7f6      	b.n	8008426 <_dtoa_r+0x8ee>
 8008438:	4698      	mov	r8, r3
 800843a:	e7f4      	b.n	8008426 <_dtoa_r+0x8ee>
 800843c:	f43f af7d 	beq.w	800833a <_dtoa_r+0x802>
 8008440:	4618      	mov	r0, r3
 8008442:	301c      	adds	r0, #28
 8008444:	e772      	b.n	800832c <_dtoa_r+0x7f4>
 8008446:	9b03      	ldr	r3, [sp, #12]
 8008448:	2b00      	cmp	r3, #0
 800844a:	dc37      	bgt.n	80084bc <_dtoa_r+0x984>
 800844c:	9b06      	ldr	r3, [sp, #24]
 800844e:	2b02      	cmp	r3, #2
 8008450:	dd34      	ble.n	80084bc <_dtoa_r+0x984>
 8008452:	9b03      	ldr	r3, [sp, #12]
 8008454:	9302      	str	r3, [sp, #8]
 8008456:	9b02      	ldr	r3, [sp, #8]
 8008458:	b96b      	cbnz	r3, 8008476 <_dtoa_r+0x93e>
 800845a:	4631      	mov	r1, r6
 800845c:	2205      	movs	r2, #5
 800845e:	4620      	mov	r0, r4
 8008460:	f000 fd56 	bl	8008f10 <__multadd>
 8008464:	4601      	mov	r1, r0
 8008466:	4606      	mov	r6, r0
 8008468:	ee18 0a10 	vmov	r0, s16
 800846c:	f000 ffba 	bl	80093e4 <__mcmp>
 8008470:	2800      	cmp	r0, #0
 8008472:	f73f adbb 	bgt.w	8007fec <_dtoa_r+0x4b4>
 8008476:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008478:	9d01      	ldr	r5, [sp, #4]
 800847a:	43db      	mvns	r3, r3
 800847c:	9300      	str	r3, [sp, #0]
 800847e:	f04f 0800 	mov.w	r8, #0
 8008482:	4631      	mov	r1, r6
 8008484:	4620      	mov	r0, r4
 8008486:	f000 fd21 	bl	8008ecc <_Bfree>
 800848a:	2f00      	cmp	r7, #0
 800848c:	f43f aea4 	beq.w	80081d8 <_dtoa_r+0x6a0>
 8008490:	f1b8 0f00 	cmp.w	r8, #0
 8008494:	d005      	beq.n	80084a2 <_dtoa_r+0x96a>
 8008496:	45b8      	cmp	r8, r7
 8008498:	d003      	beq.n	80084a2 <_dtoa_r+0x96a>
 800849a:	4641      	mov	r1, r8
 800849c:	4620      	mov	r0, r4
 800849e:	f000 fd15 	bl	8008ecc <_Bfree>
 80084a2:	4639      	mov	r1, r7
 80084a4:	4620      	mov	r0, r4
 80084a6:	f000 fd11 	bl	8008ecc <_Bfree>
 80084aa:	e695      	b.n	80081d8 <_dtoa_r+0x6a0>
 80084ac:	2600      	movs	r6, #0
 80084ae:	4637      	mov	r7, r6
 80084b0:	e7e1      	b.n	8008476 <_dtoa_r+0x93e>
 80084b2:	9700      	str	r7, [sp, #0]
 80084b4:	4637      	mov	r7, r6
 80084b6:	e599      	b.n	8007fec <_dtoa_r+0x4b4>
 80084b8:	40240000 	.word	0x40240000
 80084bc:	9b08      	ldr	r3, [sp, #32]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	f000 80ca 	beq.w	8008658 <_dtoa_r+0xb20>
 80084c4:	9b03      	ldr	r3, [sp, #12]
 80084c6:	9302      	str	r3, [sp, #8]
 80084c8:	2d00      	cmp	r5, #0
 80084ca:	dd05      	ble.n	80084d8 <_dtoa_r+0x9a0>
 80084cc:	4639      	mov	r1, r7
 80084ce:	462a      	mov	r2, r5
 80084d0:	4620      	mov	r0, r4
 80084d2:	f000 ff17 	bl	8009304 <__lshift>
 80084d6:	4607      	mov	r7, r0
 80084d8:	f1b8 0f00 	cmp.w	r8, #0
 80084dc:	d05b      	beq.n	8008596 <_dtoa_r+0xa5e>
 80084de:	6879      	ldr	r1, [r7, #4]
 80084e0:	4620      	mov	r0, r4
 80084e2:	f000 fcb3 	bl	8008e4c <_Balloc>
 80084e6:	4605      	mov	r5, r0
 80084e8:	b928      	cbnz	r0, 80084f6 <_dtoa_r+0x9be>
 80084ea:	4b87      	ldr	r3, [pc, #540]	; (8008708 <_dtoa_r+0xbd0>)
 80084ec:	4602      	mov	r2, r0
 80084ee:	f240 21ea 	movw	r1, #746	; 0x2ea
 80084f2:	f7ff bb3b 	b.w	8007b6c <_dtoa_r+0x34>
 80084f6:	693a      	ldr	r2, [r7, #16]
 80084f8:	3202      	adds	r2, #2
 80084fa:	0092      	lsls	r2, r2, #2
 80084fc:	f107 010c 	add.w	r1, r7, #12
 8008500:	300c      	adds	r0, #12
 8008502:	f000 fc95 	bl	8008e30 <memcpy>
 8008506:	2201      	movs	r2, #1
 8008508:	4629      	mov	r1, r5
 800850a:	4620      	mov	r0, r4
 800850c:	f000 fefa 	bl	8009304 <__lshift>
 8008510:	9b01      	ldr	r3, [sp, #4]
 8008512:	f103 0901 	add.w	r9, r3, #1
 8008516:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800851a:	4413      	add	r3, r2
 800851c:	9305      	str	r3, [sp, #20]
 800851e:	f00a 0301 	and.w	r3, sl, #1
 8008522:	46b8      	mov	r8, r7
 8008524:	9304      	str	r3, [sp, #16]
 8008526:	4607      	mov	r7, r0
 8008528:	4631      	mov	r1, r6
 800852a:	ee18 0a10 	vmov	r0, s16
 800852e:	f7ff fa77 	bl	8007a20 <quorem>
 8008532:	4641      	mov	r1, r8
 8008534:	9002      	str	r0, [sp, #8]
 8008536:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800853a:	ee18 0a10 	vmov	r0, s16
 800853e:	f000 ff51 	bl	80093e4 <__mcmp>
 8008542:	463a      	mov	r2, r7
 8008544:	9003      	str	r0, [sp, #12]
 8008546:	4631      	mov	r1, r6
 8008548:	4620      	mov	r0, r4
 800854a:	f000 ff67 	bl	800941c <__mdiff>
 800854e:	68c2      	ldr	r2, [r0, #12]
 8008550:	f109 3bff 	add.w	fp, r9, #4294967295
 8008554:	4605      	mov	r5, r0
 8008556:	bb02      	cbnz	r2, 800859a <_dtoa_r+0xa62>
 8008558:	4601      	mov	r1, r0
 800855a:	ee18 0a10 	vmov	r0, s16
 800855e:	f000 ff41 	bl	80093e4 <__mcmp>
 8008562:	4602      	mov	r2, r0
 8008564:	4629      	mov	r1, r5
 8008566:	4620      	mov	r0, r4
 8008568:	9207      	str	r2, [sp, #28]
 800856a:	f000 fcaf 	bl	8008ecc <_Bfree>
 800856e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008572:	ea43 0102 	orr.w	r1, r3, r2
 8008576:	9b04      	ldr	r3, [sp, #16]
 8008578:	430b      	orrs	r3, r1
 800857a:	464d      	mov	r5, r9
 800857c:	d10f      	bne.n	800859e <_dtoa_r+0xa66>
 800857e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008582:	d02a      	beq.n	80085da <_dtoa_r+0xaa2>
 8008584:	9b03      	ldr	r3, [sp, #12]
 8008586:	2b00      	cmp	r3, #0
 8008588:	dd02      	ble.n	8008590 <_dtoa_r+0xa58>
 800858a:	9b02      	ldr	r3, [sp, #8]
 800858c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008590:	f88b a000 	strb.w	sl, [fp]
 8008594:	e775      	b.n	8008482 <_dtoa_r+0x94a>
 8008596:	4638      	mov	r0, r7
 8008598:	e7ba      	b.n	8008510 <_dtoa_r+0x9d8>
 800859a:	2201      	movs	r2, #1
 800859c:	e7e2      	b.n	8008564 <_dtoa_r+0xa2c>
 800859e:	9b03      	ldr	r3, [sp, #12]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	db04      	blt.n	80085ae <_dtoa_r+0xa76>
 80085a4:	9906      	ldr	r1, [sp, #24]
 80085a6:	430b      	orrs	r3, r1
 80085a8:	9904      	ldr	r1, [sp, #16]
 80085aa:	430b      	orrs	r3, r1
 80085ac:	d122      	bne.n	80085f4 <_dtoa_r+0xabc>
 80085ae:	2a00      	cmp	r2, #0
 80085b0:	ddee      	ble.n	8008590 <_dtoa_r+0xa58>
 80085b2:	ee18 1a10 	vmov	r1, s16
 80085b6:	2201      	movs	r2, #1
 80085b8:	4620      	mov	r0, r4
 80085ba:	f000 fea3 	bl	8009304 <__lshift>
 80085be:	4631      	mov	r1, r6
 80085c0:	ee08 0a10 	vmov	s16, r0
 80085c4:	f000 ff0e 	bl	80093e4 <__mcmp>
 80085c8:	2800      	cmp	r0, #0
 80085ca:	dc03      	bgt.n	80085d4 <_dtoa_r+0xa9c>
 80085cc:	d1e0      	bne.n	8008590 <_dtoa_r+0xa58>
 80085ce:	f01a 0f01 	tst.w	sl, #1
 80085d2:	d0dd      	beq.n	8008590 <_dtoa_r+0xa58>
 80085d4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80085d8:	d1d7      	bne.n	800858a <_dtoa_r+0xa52>
 80085da:	2339      	movs	r3, #57	; 0x39
 80085dc:	f88b 3000 	strb.w	r3, [fp]
 80085e0:	462b      	mov	r3, r5
 80085e2:	461d      	mov	r5, r3
 80085e4:	3b01      	subs	r3, #1
 80085e6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80085ea:	2a39      	cmp	r2, #57	; 0x39
 80085ec:	d071      	beq.n	80086d2 <_dtoa_r+0xb9a>
 80085ee:	3201      	adds	r2, #1
 80085f0:	701a      	strb	r2, [r3, #0]
 80085f2:	e746      	b.n	8008482 <_dtoa_r+0x94a>
 80085f4:	2a00      	cmp	r2, #0
 80085f6:	dd07      	ble.n	8008608 <_dtoa_r+0xad0>
 80085f8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80085fc:	d0ed      	beq.n	80085da <_dtoa_r+0xaa2>
 80085fe:	f10a 0301 	add.w	r3, sl, #1
 8008602:	f88b 3000 	strb.w	r3, [fp]
 8008606:	e73c      	b.n	8008482 <_dtoa_r+0x94a>
 8008608:	9b05      	ldr	r3, [sp, #20]
 800860a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800860e:	4599      	cmp	r9, r3
 8008610:	d047      	beq.n	80086a2 <_dtoa_r+0xb6a>
 8008612:	ee18 1a10 	vmov	r1, s16
 8008616:	2300      	movs	r3, #0
 8008618:	220a      	movs	r2, #10
 800861a:	4620      	mov	r0, r4
 800861c:	f000 fc78 	bl	8008f10 <__multadd>
 8008620:	45b8      	cmp	r8, r7
 8008622:	ee08 0a10 	vmov	s16, r0
 8008626:	f04f 0300 	mov.w	r3, #0
 800862a:	f04f 020a 	mov.w	r2, #10
 800862e:	4641      	mov	r1, r8
 8008630:	4620      	mov	r0, r4
 8008632:	d106      	bne.n	8008642 <_dtoa_r+0xb0a>
 8008634:	f000 fc6c 	bl	8008f10 <__multadd>
 8008638:	4680      	mov	r8, r0
 800863a:	4607      	mov	r7, r0
 800863c:	f109 0901 	add.w	r9, r9, #1
 8008640:	e772      	b.n	8008528 <_dtoa_r+0x9f0>
 8008642:	f000 fc65 	bl	8008f10 <__multadd>
 8008646:	4639      	mov	r1, r7
 8008648:	4680      	mov	r8, r0
 800864a:	2300      	movs	r3, #0
 800864c:	220a      	movs	r2, #10
 800864e:	4620      	mov	r0, r4
 8008650:	f000 fc5e 	bl	8008f10 <__multadd>
 8008654:	4607      	mov	r7, r0
 8008656:	e7f1      	b.n	800863c <_dtoa_r+0xb04>
 8008658:	9b03      	ldr	r3, [sp, #12]
 800865a:	9302      	str	r3, [sp, #8]
 800865c:	9d01      	ldr	r5, [sp, #4]
 800865e:	ee18 0a10 	vmov	r0, s16
 8008662:	4631      	mov	r1, r6
 8008664:	f7ff f9dc 	bl	8007a20 <quorem>
 8008668:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800866c:	9b01      	ldr	r3, [sp, #4]
 800866e:	f805 ab01 	strb.w	sl, [r5], #1
 8008672:	1aea      	subs	r2, r5, r3
 8008674:	9b02      	ldr	r3, [sp, #8]
 8008676:	4293      	cmp	r3, r2
 8008678:	dd09      	ble.n	800868e <_dtoa_r+0xb56>
 800867a:	ee18 1a10 	vmov	r1, s16
 800867e:	2300      	movs	r3, #0
 8008680:	220a      	movs	r2, #10
 8008682:	4620      	mov	r0, r4
 8008684:	f000 fc44 	bl	8008f10 <__multadd>
 8008688:	ee08 0a10 	vmov	s16, r0
 800868c:	e7e7      	b.n	800865e <_dtoa_r+0xb26>
 800868e:	9b02      	ldr	r3, [sp, #8]
 8008690:	2b00      	cmp	r3, #0
 8008692:	bfc8      	it	gt
 8008694:	461d      	movgt	r5, r3
 8008696:	9b01      	ldr	r3, [sp, #4]
 8008698:	bfd8      	it	le
 800869a:	2501      	movle	r5, #1
 800869c:	441d      	add	r5, r3
 800869e:	f04f 0800 	mov.w	r8, #0
 80086a2:	ee18 1a10 	vmov	r1, s16
 80086a6:	2201      	movs	r2, #1
 80086a8:	4620      	mov	r0, r4
 80086aa:	f000 fe2b 	bl	8009304 <__lshift>
 80086ae:	4631      	mov	r1, r6
 80086b0:	ee08 0a10 	vmov	s16, r0
 80086b4:	f000 fe96 	bl	80093e4 <__mcmp>
 80086b8:	2800      	cmp	r0, #0
 80086ba:	dc91      	bgt.n	80085e0 <_dtoa_r+0xaa8>
 80086bc:	d102      	bne.n	80086c4 <_dtoa_r+0xb8c>
 80086be:	f01a 0f01 	tst.w	sl, #1
 80086c2:	d18d      	bne.n	80085e0 <_dtoa_r+0xaa8>
 80086c4:	462b      	mov	r3, r5
 80086c6:	461d      	mov	r5, r3
 80086c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80086cc:	2a30      	cmp	r2, #48	; 0x30
 80086ce:	d0fa      	beq.n	80086c6 <_dtoa_r+0xb8e>
 80086d0:	e6d7      	b.n	8008482 <_dtoa_r+0x94a>
 80086d2:	9a01      	ldr	r2, [sp, #4]
 80086d4:	429a      	cmp	r2, r3
 80086d6:	d184      	bne.n	80085e2 <_dtoa_r+0xaaa>
 80086d8:	9b00      	ldr	r3, [sp, #0]
 80086da:	3301      	adds	r3, #1
 80086dc:	9300      	str	r3, [sp, #0]
 80086de:	2331      	movs	r3, #49	; 0x31
 80086e0:	7013      	strb	r3, [r2, #0]
 80086e2:	e6ce      	b.n	8008482 <_dtoa_r+0x94a>
 80086e4:	4b09      	ldr	r3, [pc, #36]	; (800870c <_dtoa_r+0xbd4>)
 80086e6:	f7ff ba95 	b.w	8007c14 <_dtoa_r+0xdc>
 80086ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	f47f aa6e 	bne.w	8007bce <_dtoa_r+0x96>
 80086f2:	4b07      	ldr	r3, [pc, #28]	; (8008710 <_dtoa_r+0xbd8>)
 80086f4:	f7ff ba8e 	b.w	8007c14 <_dtoa_r+0xdc>
 80086f8:	9b02      	ldr	r3, [sp, #8]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	dcae      	bgt.n	800865c <_dtoa_r+0xb24>
 80086fe:	9b06      	ldr	r3, [sp, #24]
 8008700:	2b02      	cmp	r3, #2
 8008702:	f73f aea8 	bgt.w	8008456 <_dtoa_r+0x91e>
 8008706:	e7a9      	b.n	800865c <_dtoa_r+0xb24>
 8008708:	0800b270 	.word	0x0800b270
 800870c:	0800b074 	.word	0x0800b074
 8008710:	0800b1f1 	.word	0x0800b1f1

08008714 <rshift>:
 8008714:	6903      	ldr	r3, [r0, #16]
 8008716:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800871a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800871e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008722:	f100 0414 	add.w	r4, r0, #20
 8008726:	dd45      	ble.n	80087b4 <rshift+0xa0>
 8008728:	f011 011f 	ands.w	r1, r1, #31
 800872c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008730:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008734:	d10c      	bne.n	8008750 <rshift+0x3c>
 8008736:	f100 0710 	add.w	r7, r0, #16
 800873a:	4629      	mov	r1, r5
 800873c:	42b1      	cmp	r1, r6
 800873e:	d334      	bcc.n	80087aa <rshift+0x96>
 8008740:	1a9b      	subs	r3, r3, r2
 8008742:	009b      	lsls	r3, r3, #2
 8008744:	1eea      	subs	r2, r5, #3
 8008746:	4296      	cmp	r6, r2
 8008748:	bf38      	it	cc
 800874a:	2300      	movcc	r3, #0
 800874c:	4423      	add	r3, r4
 800874e:	e015      	b.n	800877c <rshift+0x68>
 8008750:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008754:	f1c1 0820 	rsb	r8, r1, #32
 8008758:	40cf      	lsrs	r7, r1
 800875a:	f105 0e04 	add.w	lr, r5, #4
 800875e:	46a1      	mov	r9, r4
 8008760:	4576      	cmp	r6, lr
 8008762:	46f4      	mov	ip, lr
 8008764:	d815      	bhi.n	8008792 <rshift+0x7e>
 8008766:	1a9a      	subs	r2, r3, r2
 8008768:	0092      	lsls	r2, r2, #2
 800876a:	3a04      	subs	r2, #4
 800876c:	3501      	adds	r5, #1
 800876e:	42ae      	cmp	r6, r5
 8008770:	bf38      	it	cc
 8008772:	2200      	movcc	r2, #0
 8008774:	18a3      	adds	r3, r4, r2
 8008776:	50a7      	str	r7, [r4, r2]
 8008778:	b107      	cbz	r7, 800877c <rshift+0x68>
 800877a:	3304      	adds	r3, #4
 800877c:	1b1a      	subs	r2, r3, r4
 800877e:	42a3      	cmp	r3, r4
 8008780:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008784:	bf08      	it	eq
 8008786:	2300      	moveq	r3, #0
 8008788:	6102      	str	r2, [r0, #16]
 800878a:	bf08      	it	eq
 800878c:	6143      	streq	r3, [r0, #20]
 800878e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008792:	f8dc c000 	ldr.w	ip, [ip]
 8008796:	fa0c fc08 	lsl.w	ip, ip, r8
 800879a:	ea4c 0707 	orr.w	r7, ip, r7
 800879e:	f849 7b04 	str.w	r7, [r9], #4
 80087a2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80087a6:	40cf      	lsrs	r7, r1
 80087a8:	e7da      	b.n	8008760 <rshift+0x4c>
 80087aa:	f851 cb04 	ldr.w	ip, [r1], #4
 80087ae:	f847 cf04 	str.w	ip, [r7, #4]!
 80087b2:	e7c3      	b.n	800873c <rshift+0x28>
 80087b4:	4623      	mov	r3, r4
 80087b6:	e7e1      	b.n	800877c <rshift+0x68>

080087b8 <__hexdig_fun>:
 80087b8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80087bc:	2b09      	cmp	r3, #9
 80087be:	d802      	bhi.n	80087c6 <__hexdig_fun+0xe>
 80087c0:	3820      	subs	r0, #32
 80087c2:	b2c0      	uxtb	r0, r0
 80087c4:	4770      	bx	lr
 80087c6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80087ca:	2b05      	cmp	r3, #5
 80087cc:	d801      	bhi.n	80087d2 <__hexdig_fun+0x1a>
 80087ce:	3847      	subs	r0, #71	; 0x47
 80087d0:	e7f7      	b.n	80087c2 <__hexdig_fun+0xa>
 80087d2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80087d6:	2b05      	cmp	r3, #5
 80087d8:	d801      	bhi.n	80087de <__hexdig_fun+0x26>
 80087da:	3827      	subs	r0, #39	; 0x27
 80087dc:	e7f1      	b.n	80087c2 <__hexdig_fun+0xa>
 80087de:	2000      	movs	r0, #0
 80087e0:	4770      	bx	lr
	...

080087e4 <__gethex>:
 80087e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087e8:	ed2d 8b02 	vpush	{d8}
 80087ec:	b089      	sub	sp, #36	; 0x24
 80087ee:	ee08 0a10 	vmov	s16, r0
 80087f2:	9304      	str	r3, [sp, #16]
 80087f4:	4bb4      	ldr	r3, [pc, #720]	; (8008ac8 <__gethex+0x2e4>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	9301      	str	r3, [sp, #4]
 80087fa:	4618      	mov	r0, r3
 80087fc:	468b      	mov	fp, r1
 80087fe:	4690      	mov	r8, r2
 8008800:	f7f7 fce6 	bl	80001d0 <strlen>
 8008804:	9b01      	ldr	r3, [sp, #4]
 8008806:	f8db 2000 	ldr.w	r2, [fp]
 800880a:	4403      	add	r3, r0
 800880c:	4682      	mov	sl, r0
 800880e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008812:	9305      	str	r3, [sp, #20]
 8008814:	1c93      	adds	r3, r2, #2
 8008816:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800881a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800881e:	32fe      	adds	r2, #254	; 0xfe
 8008820:	18d1      	adds	r1, r2, r3
 8008822:	461f      	mov	r7, r3
 8008824:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008828:	9100      	str	r1, [sp, #0]
 800882a:	2830      	cmp	r0, #48	; 0x30
 800882c:	d0f8      	beq.n	8008820 <__gethex+0x3c>
 800882e:	f7ff ffc3 	bl	80087b8 <__hexdig_fun>
 8008832:	4604      	mov	r4, r0
 8008834:	2800      	cmp	r0, #0
 8008836:	d13a      	bne.n	80088ae <__gethex+0xca>
 8008838:	9901      	ldr	r1, [sp, #4]
 800883a:	4652      	mov	r2, sl
 800883c:	4638      	mov	r0, r7
 800883e:	f001 fa33 	bl	8009ca8 <strncmp>
 8008842:	4605      	mov	r5, r0
 8008844:	2800      	cmp	r0, #0
 8008846:	d168      	bne.n	800891a <__gethex+0x136>
 8008848:	f817 000a 	ldrb.w	r0, [r7, sl]
 800884c:	eb07 060a 	add.w	r6, r7, sl
 8008850:	f7ff ffb2 	bl	80087b8 <__hexdig_fun>
 8008854:	2800      	cmp	r0, #0
 8008856:	d062      	beq.n	800891e <__gethex+0x13a>
 8008858:	4633      	mov	r3, r6
 800885a:	7818      	ldrb	r0, [r3, #0]
 800885c:	2830      	cmp	r0, #48	; 0x30
 800885e:	461f      	mov	r7, r3
 8008860:	f103 0301 	add.w	r3, r3, #1
 8008864:	d0f9      	beq.n	800885a <__gethex+0x76>
 8008866:	f7ff ffa7 	bl	80087b8 <__hexdig_fun>
 800886a:	2301      	movs	r3, #1
 800886c:	fab0 f480 	clz	r4, r0
 8008870:	0964      	lsrs	r4, r4, #5
 8008872:	4635      	mov	r5, r6
 8008874:	9300      	str	r3, [sp, #0]
 8008876:	463a      	mov	r2, r7
 8008878:	4616      	mov	r6, r2
 800887a:	3201      	adds	r2, #1
 800887c:	7830      	ldrb	r0, [r6, #0]
 800887e:	f7ff ff9b 	bl	80087b8 <__hexdig_fun>
 8008882:	2800      	cmp	r0, #0
 8008884:	d1f8      	bne.n	8008878 <__gethex+0x94>
 8008886:	9901      	ldr	r1, [sp, #4]
 8008888:	4652      	mov	r2, sl
 800888a:	4630      	mov	r0, r6
 800888c:	f001 fa0c 	bl	8009ca8 <strncmp>
 8008890:	b980      	cbnz	r0, 80088b4 <__gethex+0xd0>
 8008892:	b94d      	cbnz	r5, 80088a8 <__gethex+0xc4>
 8008894:	eb06 050a 	add.w	r5, r6, sl
 8008898:	462a      	mov	r2, r5
 800889a:	4616      	mov	r6, r2
 800889c:	3201      	adds	r2, #1
 800889e:	7830      	ldrb	r0, [r6, #0]
 80088a0:	f7ff ff8a 	bl	80087b8 <__hexdig_fun>
 80088a4:	2800      	cmp	r0, #0
 80088a6:	d1f8      	bne.n	800889a <__gethex+0xb6>
 80088a8:	1bad      	subs	r5, r5, r6
 80088aa:	00ad      	lsls	r5, r5, #2
 80088ac:	e004      	b.n	80088b8 <__gethex+0xd4>
 80088ae:	2400      	movs	r4, #0
 80088b0:	4625      	mov	r5, r4
 80088b2:	e7e0      	b.n	8008876 <__gethex+0x92>
 80088b4:	2d00      	cmp	r5, #0
 80088b6:	d1f7      	bne.n	80088a8 <__gethex+0xc4>
 80088b8:	7833      	ldrb	r3, [r6, #0]
 80088ba:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80088be:	2b50      	cmp	r3, #80	; 0x50
 80088c0:	d13b      	bne.n	800893a <__gethex+0x156>
 80088c2:	7873      	ldrb	r3, [r6, #1]
 80088c4:	2b2b      	cmp	r3, #43	; 0x2b
 80088c6:	d02c      	beq.n	8008922 <__gethex+0x13e>
 80088c8:	2b2d      	cmp	r3, #45	; 0x2d
 80088ca:	d02e      	beq.n	800892a <__gethex+0x146>
 80088cc:	1c71      	adds	r1, r6, #1
 80088ce:	f04f 0900 	mov.w	r9, #0
 80088d2:	7808      	ldrb	r0, [r1, #0]
 80088d4:	f7ff ff70 	bl	80087b8 <__hexdig_fun>
 80088d8:	1e43      	subs	r3, r0, #1
 80088da:	b2db      	uxtb	r3, r3
 80088dc:	2b18      	cmp	r3, #24
 80088de:	d82c      	bhi.n	800893a <__gethex+0x156>
 80088e0:	f1a0 0210 	sub.w	r2, r0, #16
 80088e4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80088e8:	f7ff ff66 	bl	80087b8 <__hexdig_fun>
 80088ec:	1e43      	subs	r3, r0, #1
 80088ee:	b2db      	uxtb	r3, r3
 80088f0:	2b18      	cmp	r3, #24
 80088f2:	d91d      	bls.n	8008930 <__gethex+0x14c>
 80088f4:	f1b9 0f00 	cmp.w	r9, #0
 80088f8:	d000      	beq.n	80088fc <__gethex+0x118>
 80088fa:	4252      	negs	r2, r2
 80088fc:	4415      	add	r5, r2
 80088fe:	f8cb 1000 	str.w	r1, [fp]
 8008902:	b1e4      	cbz	r4, 800893e <__gethex+0x15a>
 8008904:	9b00      	ldr	r3, [sp, #0]
 8008906:	2b00      	cmp	r3, #0
 8008908:	bf14      	ite	ne
 800890a:	2700      	movne	r7, #0
 800890c:	2706      	moveq	r7, #6
 800890e:	4638      	mov	r0, r7
 8008910:	b009      	add	sp, #36	; 0x24
 8008912:	ecbd 8b02 	vpop	{d8}
 8008916:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800891a:	463e      	mov	r6, r7
 800891c:	4625      	mov	r5, r4
 800891e:	2401      	movs	r4, #1
 8008920:	e7ca      	b.n	80088b8 <__gethex+0xd4>
 8008922:	f04f 0900 	mov.w	r9, #0
 8008926:	1cb1      	adds	r1, r6, #2
 8008928:	e7d3      	b.n	80088d2 <__gethex+0xee>
 800892a:	f04f 0901 	mov.w	r9, #1
 800892e:	e7fa      	b.n	8008926 <__gethex+0x142>
 8008930:	230a      	movs	r3, #10
 8008932:	fb03 0202 	mla	r2, r3, r2, r0
 8008936:	3a10      	subs	r2, #16
 8008938:	e7d4      	b.n	80088e4 <__gethex+0x100>
 800893a:	4631      	mov	r1, r6
 800893c:	e7df      	b.n	80088fe <__gethex+0x11a>
 800893e:	1bf3      	subs	r3, r6, r7
 8008940:	3b01      	subs	r3, #1
 8008942:	4621      	mov	r1, r4
 8008944:	2b07      	cmp	r3, #7
 8008946:	dc0b      	bgt.n	8008960 <__gethex+0x17c>
 8008948:	ee18 0a10 	vmov	r0, s16
 800894c:	f000 fa7e 	bl	8008e4c <_Balloc>
 8008950:	4604      	mov	r4, r0
 8008952:	b940      	cbnz	r0, 8008966 <__gethex+0x182>
 8008954:	4b5d      	ldr	r3, [pc, #372]	; (8008acc <__gethex+0x2e8>)
 8008956:	4602      	mov	r2, r0
 8008958:	21de      	movs	r1, #222	; 0xde
 800895a:	485d      	ldr	r0, [pc, #372]	; (8008ad0 <__gethex+0x2ec>)
 800895c:	f001 f9c6 	bl	8009cec <__assert_func>
 8008960:	3101      	adds	r1, #1
 8008962:	105b      	asrs	r3, r3, #1
 8008964:	e7ee      	b.n	8008944 <__gethex+0x160>
 8008966:	f100 0914 	add.w	r9, r0, #20
 800896a:	f04f 0b00 	mov.w	fp, #0
 800896e:	f1ca 0301 	rsb	r3, sl, #1
 8008972:	f8cd 9008 	str.w	r9, [sp, #8]
 8008976:	f8cd b000 	str.w	fp, [sp]
 800897a:	9306      	str	r3, [sp, #24]
 800897c:	42b7      	cmp	r7, r6
 800897e:	d340      	bcc.n	8008a02 <__gethex+0x21e>
 8008980:	9802      	ldr	r0, [sp, #8]
 8008982:	9b00      	ldr	r3, [sp, #0]
 8008984:	f840 3b04 	str.w	r3, [r0], #4
 8008988:	eba0 0009 	sub.w	r0, r0, r9
 800898c:	1080      	asrs	r0, r0, #2
 800898e:	0146      	lsls	r6, r0, #5
 8008990:	6120      	str	r0, [r4, #16]
 8008992:	4618      	mov	r0, r3
 8008994:	f000 fb4c 	bl	8009030 <__hi0bits>
 8008998:	1a30      	subs	r0, r6, r0
 800899a:	f8d8 6000 	ldr.w	r6, [r8]
 800899e:	42b0      	cmp	r0, r6
 80089a0:	dd63      	ble.n	8008a6a <__gethex+0x286>
 80089a2:	1b87      	subs	r7, r0, r6
 80089a4:	4639      	mov	r1, r7
 80089a6:	4620      	mov	r0, r4
 80089a8:	f000 fef0 	bl	800978c <__any_on>
 80089ac:	4682      	mov	sl, r0
 80089ae:	b1a8      	cbz	r0, 80089dc <__gethex+0x1f8>
 80089b0:	1e7b      	subs	r3, r7, #1
 80089b2:	1159      	asrs	r1, r3, #5
 80089b4:	f003 021f 	and.w	r2, r3, #31
 80089b8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80089bc:	f04f 0a01 	mov.w	sl, #1
 80089c0:	fa0a f202 	lsl.w	r2, sl, r2
 80089c4:	420a      	tst	r2, r1
 80089c6:	d009      	beq.n	80089dc <__gethex+0x1f8>
 80089c8:	4553      	cmp	r3, sl
 80089ca:	dd05      	ble.n	80089d8 <__gethex+0x1f4>
 80089cc:	1eb9      	subs	r1, r7, #2
 80089ce:	4620      	mov	r0, r4
 80089d0:	f000 fedc 	bl	800978c <__any_on>
 80089d4:	2800      	cmp	r0, #0
 80089d6:	d145      	bne.n	8008a64 <__gethex+0x280>
 80089d8:	f04f 0a02 	mov.w	sl, #2
 80089dc:	4639      	mov	r1, r7
 80089de:	4620      	mov	r0, r4
 80089e0:	f7ff fe98 	bl	8008714 <rshift>
 80089e4:	443d      	add	r5, r7
 80089e6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80089ea:	42ab      	cmp	r3, r5
 80089ec:	da4c      	bge.n	8008a88 <__gethex+0x2a4>
 80089ee:	ee18 0a10 	vmov	r0, s16
 80089f2:	4621      	mov	r1, r4
 80089f4:	f000 fa6a 	bl	8008ecc <_Bfree>
 80089f8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80089fa:	2300      	movs	r3, #0
 80089fc:	6013      	str	r3, [r2, #0]
 80089fe:	27a3      	movs	r7, #163	; 0xa3
 8008a00:	e785      	b.n	800890e <__gethex+0x12a>
 8008a02:	1e73      	subs	r3, r6, #1
 8008a04:	9a05      	ldr	r2, [sp, #20]
 8008a06:	9303      	str	r3, [sp, #12]
 8008a08:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008a0c:	4293      	cmp	r3, r2
 8008a0e:	d019      	beq.n	8008a44 <__gethex+0x260>
 8008a10:	f1bb 0f20 	cmp.w	fp, #32
 8008a14:	d107      	bne.n	8008a26 <__gethex+0x242>
 8008a16:	9b02      	ldr	r3, [sp, #8]
 8008a18:	9a00      	ldr	r2, [sp, #0]
 8008a1a:	f843 2b04 	str.w	r2, [r3], #4
 8008a1e:	9302      	str	r3, [sp, #8]
 8008a20:	2300      	movs	r3, #0
 8008a22:	9300      	str	r3, [sp, #0]
 8008a24:	469b      	mov	fp, r3
 8008a26:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008a2a:	f7ff fec5 	bl	80087b8 <__hexdig_fun>
 8008a2e:	9b00      	ldr	r3, [sp, #0]
 8008a30:	f000 000f 	and.w	r0, r0, #15
 8008a34:	fa00 f00b 	lsl.w	r0, r0, fp
 8008a38:	4303      	orrs	r3, r0
 8008a3a:	9300      	str	r3, [sp, #0]
 8008a3c:	f10b 0b04 	add.w	fp, fp, #4
 8008a40:	9b03      	ldr	r3, [sp, #12]
 8008a42:	e00d      	b.n	8008a60 <__gethex+0x27c>
 8008a44:	9b03      	ldr	r3, [sp, #12]
 8008a46:	9a06      	ldr	r2, [sp, #24]
 8008a48:	4413      	add	r3, r2
 8008a4a:	42bb      	cmp	r3, r7
 8008a4c:	d3e0      	bcc.n	8008a10 <__gethex+0x22c>
 8008a4e:	4618      	mov	r0, r3
 8008a50:	9901      	ldr	r1, [sp, #4]
 8008a52:	9307      	str	r3, [sp, #28]
 8008a54:	4652      	mov	r2, sl
 8008a56:	f001 f927 	bl	8009ca8 <strncmp>
 8008a5a:	9b07      	ldr	r3, [sp, #28]
 8008a5c:	2800      	cmp	r0, #0
 8008a5e:	d1d7      	bne.n	8008a10 <__gethex+0x22c>
 8008a60:	461e      	mov	r6, r3
 8008a62:	e78b      	b.n	800897c <__gethex+0x198>
 8008a64:	f04f 0a03 	mov.w	sl, #3
 8008a68:	e7b8      	b.n	80089dc <__gethex+0x1f8>
 8008a6a:	da0a      	bge.n	8008a82 <__gethex+0x29e>
 8008a6c:	1a37      	subs	r7, r6, r0
 8008a6e:	4621      	mov	r1, r4
 8008a70:	ee18 0a10 	vmov	r0, s16
 8008a74:	463a      	mov	r2, r7
 8008a76:	f000 fc45 	bl	8009304 <__lshift>
 8008a7a:	1bed      	subs	r5, r5, r7
 8008a7c:	4604      	mov	r4, r0
 8008a7e:	f100 0914 	add.w	r9, r0, #20
 8008a82:	f04f 0a00 	mov.w	sl, #0
 8008a86:	e7ae      	b.n	80089e6 <__gethex+0x202>
 8008a88:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008a8c:	42a8      	cmp	r0, r5
 8008a8e:	dd72      	ble.n	8008b76 <__gethex+0x392>
 8008a90:	1b45      	subs	r5, r0, r5
 8008a92:	42ae      	cmp	r6, r5
 8008a94:	dc36      	bgt.n	8008b04 <__gethex+0x320>
 8008a96:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008a9a:	2b02      	cmp	r3, #2
 8008a9c:	d02a      	beq.n	8008af4 <__gethex+0x310>
 8008a9e:	2b03      	cmp	r3, #3
 8008aa0:	d02c      	beq.n	8008afc <__gethex+0x318>
 8008aa2:	2b01      	cmp	r3, #1
 8008aa4:	d11c      	bne.n	8008ae0 <__gethex+0x2fc>
 8008aa6:	42ae      	cmp	r6, r5
 8008aa8:	d11a      	bne.n	8008ae0 <__gethex+0x2fc>
 8008aaa:	2e01      	cmp	r6, #1
 8008aac:	d112      	bne.n	8008ad4 <__gethex+0x2f0>
 8008aae:	9a04      	ldr	r2, [sp, #16]
 8008ab0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008ab4:	6013      	str	r3, [r2, #0]
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	6123      	str	r3, [r4, #16]
 8008aba:	f8c9 3000 	str.w	r3, [r9]
 8008abe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008ac0:	2762      	movs	r7, #98	; 0x62
 8008ac2:	601c      	str	r4, [r3, #0]
 8008ac4:	e723      	b.n	800890e <__gethex+0x12a>
 8008ac6:	bf00      	nop
 8008ac8:	0800b2e8 	.word	0x0800b2e8
 8008acc:	0800b270 	.word	0x0800b270
 8008ad0:	0800b281 	.word	0x0800b281
 8008ad4:	1e71      	subs	r1, r6, #1
 8008ad6:	4620      	mov	r0, r4
 8008ad8:	f000 fe58 	bl	800978c <__any_on>
 8008adc:	2800      	cmp	r0, #0
 8008ade:	d1e6      	bne.n	8008aae <__gethex+0x2ca>
 8008ae0:	ee18 0a10 	vmov	r0, s16
 8008ae4:	4621      	mov	r1, r4
 8008ae6:	f000 f9f1 	bl	8008ecc <_Bfree>
 8008aea:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008aec:	2300      	movs	r3, #0
 8008aee:	6013      	str	r3, [r2, #0]
 8008af0:	2750      	movs	r7, #80	; 0x50
 8008af2:	e70c      	b.n	800890e <__gethex+0x12a>
 8008af4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d1f2      	bne.n	8008ae0 <__gethex+0x2fc>
 8008afa:	e7d8      	b.n	8008aae <__gethex+0x2ca>
 8008afc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d1d5      	bne.n	8008aae <__gethex+0x2ca>
 8008b02:	e7ed      	b.n	8008ae0 <__gethex+0x2fc>
 8008b04:	1e6f      	subs	r7, r5, #1
 8008b06:	f1ba 0f00 	cmp.w	sl, #0
 8008b0a:	d131      	bne.n	8008b70 <__gethex+0x38c>
 8008b0c:	b127      	cbz	r7, 8008b18 <__gethex+0x334>
 8008b0e:	4639      	mov	r1, r7
 8008b10:	4620      	mov	r0, r4
 8008b12:	f000 fe3b 	bl	800978c <__any_on>
 8008b16:	4682      	mov	sl, r0
 8008b18:	117b      	asrs	r3, r7, #5
 8008b1a:	2101      	movs	r1, #1
 8008b1c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008b20:	f007 071f 	and.w	r7, r7, #31
 8008b24:	fa01 f707 	lsl.w	r7, r1, r7
 8008b28:	421f      	tst	r7, r3
 8008b2a:	4629      	mov	r1, r5
 8008b2c:	4620      	mov	r0, r4
 8008b2e:	bf18      	it	ne
 8008b30:	f04a 0a02 	orrne.w	sl, sl, #2
 8008b34:	1b76      	subs	r6, r6, r5
 8008b36:	f7ff fded 	bl	8008714 <rshift>
 8008b3a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008b3e:	2702      	movs	r7, #2
 8008b40:	f1ba 0f00 	cmp.w	sl, #0
 8008b44:	d048      	beq.n	8008bd8 <__gethex+0x3f4>
 8008b46:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008b4a:	2b02      	cmp	r3, #2
 8008b4c:	d015      	beq.n	8008b7a <__gethex+0x396>
 8008b4e:	2b03      	cmp	r3, #3
 8008b50:	d017      	beq.n	8008b82 <__gethex+0x39e>
 8008b52:	2b01      	cmp	r3, #1
 8008b54:	d109      	bne.n	8008b6a <__gethex+0x386>
 8008b56:	f01a 0f02 	tst.w	sl, #2
 8008b5a:	d006      	beq.n	8008b6a <__gethex+0x386>
 8008b5c:	f8d9 0000 	ldr.w	r0, [r9]
 8008b60:	ea4a 0a00 	orr.w	sl, sl, r0
 8008b64:	f01a 0f01 	tst.w	sl, #1
 8008b68:	d10e      	bne.n	8008b88 <__gethex+0x3a4>
 8008b6a:	f047 0710 	orr.w	r7, r7, #16
 8008b6e:	e033      	b.n	8008bd8 <__gethex+0x3f4>
 8008b70:	f04f 0a01 	mov.w	sl, #1
 8008b74:	e7d0      	b.n	8008b18 <__gethex+0x334>
 8008b76:	2701      	movs	r7, #1
 8008b78:	e7e2      	b.n	8008b40 <__gethex+0x35c>
 8008b7a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008b7c:	f1c3 0301 	rsb	r3, r3, #1
 8008b80:	9315      	str	r3, [sp, #84]	; 0x54
 8008b82:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d0f0      	beq.n	8008b6a <__gethex+0x386>
 8008b88:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008b8c:	f104 0314 	add.w	r3, r4, #20
 8008b90:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008b94:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008b98:	f04f 0c00 	mov.w	ip, #0
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ba2:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008ba6:	d01c      	beq.n	8008be2 <__gethex+0x3fe>
 8008ba8:	3201      	adds	r2, #1
 8008baa:	6002      	str	r2, [r0, #0]
 8008bac:	2f02      	cmp	r7, #2
 8008bae:	f104 0314 	add.w	r3, r4, #20
 8008bb2:	d13f      	bne.n	8008c34 <__gethex+0x450>
 8008bb4:	f8d8 2000 	ldr.w	r2, [r8]
 8008bb8:	3a01      	subs	r2, #1
 8008bba:	42b2      	cmp	r2, r6
 8008bbc:	d10a      	bne.n	8008bd4 <__gethex+0x3f0>
 8008bbe:	1171      	asrs	r1, r6, #5
 8008bc0:	2201      	movs	r2, #1
 8008bc2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008bc6:	f006 061f 	and.w	r6, r6, #31
 8008bca:	fa02 f606 	lsl.w	r6, r2, r6
 8008bce:	421e      	tst	r6, r3
 8008bd0:	bf18      	it	ne
 8008bd2:	4617      	movne	r7, r2
 8008bd4:	f047 0720 	orr.w	r7, r7, #32
 8008bd8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008bda:	601c      	str	r4, [r3, #0]
 8008bdc:	9b04      	ldr	r3, [sp, #16]
 8008bde:	601d      	str	r5, [r3, #0]
 8008be0:	e695      	b.n	800890e <__gethex+0x12a>
 8008be2:	4299      	cmp	r1, r3
 8008be4:	f843 cc04 	str.w	ip, [r3, #-4]
 8008be8:	d8d8      	bhi.n	8008b9c <__gethex+0x3b8>
 8008bea:	68a3      	ldr	r3, [r4, #8]
 8008bec:	459b      	cmp	fp, r3
 8008bee:	db19      	blt.n	8008c24 <__gethex+0x440>
 8008bf0:	6861      	ldr	r1, [r4, #4]
 8008bf2:	ee18 0a10 	vmov	r0, s16
 8008bf6:	3101      	adds	r1, #1
 8008bf8:	f000 f928 	bl	8008e4c <_Balloc>
 8008bfc:	4681      	mov	r9, r0
 8008bfe:	b918      	cbnz	r0, 8008c08 <__gethex+0x424>
 8008c00:	4b1a      	ldr	r3, [pc, #104]	; (8008c6c <__gethex+0x488>)
 8008c02:	4602      	mov	r2, r0
 8008c04:	2184      	movs	r1, #132	; 0x84
 8008c06:	e6a8      	b.n	800895a <__gethex+0x176>
 8008c08:	6922      	ldr	r2, [r4, #16]
 8008c0a:	3202      	adds	r2, #2
 8008c0c:	f104 010c 	add.w	r1, r4, #12
 8008c10:	0092      	lsls	r2, r2, #2
 8008c12:	300c      	adds	r0, #12
 8008c14:	f000 f90c 	bl	8008e30 <memcpy>
 8008c18:	4621      	mov	r1, r4
 8008c1a:	ee18 0a10 	vmov	r0, s16
 8008c1e:	f000 f955 	bl	8008ecc <_Bfree>
 8008c22:	464c      	mov	r4, r9
 8008c24:	6923      	ldr	r3, [r4, #16]
 8008c26:	1c5a      	adds	r2, r3, #1
 8008c28:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008c2c:	6122      	str	r2, [r4, #16]
 8008c2e:	2201      	movs	r2, #1
 8008c30:	615a      	str	r2, [r3, #20]
 8008c32:	e7bb      	b.n	8008bac <__gethex+0x3c8>
 8008c34:	6922      	ldr	r2, [r4, #16]
 8008c36:	455a      	cmp	r2, fp
 8008c38:	dd0b      	ble.n	8008c52 <__gethex+0x46e>
 8008c3a:	2101      	movs	r1, #1
 8008c3c:	4620      	mov	r0, r4
 8008c3e:	f7ff fd69 	bl	8008714 <rshift>
 8008c42:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008c46:	3501      	adds	r5, #1
 8008c48:	42ab      	cmp	r3, r5
 8008c4a:	f6ff aed0 	blt.w	80089ee <__gethex+0x20a>
 8008c4e:	2701      	movs	r7, #1
 8008c50:	e7c0      	b.n	8008bd4 <__gethex+0x3f0>
 8008c52:	f016 061f 	ands.w	r6, r6, #31
 8008c56:	d0fa      	beq.n	8008c4e <__gethex+0x46a>
 8008c58:	4453      	add	r3, sl
 8008c5a:	f1c6 0620 	rsb	r6, r6, #32
 8008c5e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008c62:	f000 f9e5 	bl	8009030 <__hi0bits>
 8008c66:	42b0      	cmp	r0, r6
 8008c68:	dbe7      	blt.n	8008c3a <__gethex+0x456>
 8008c6a:	e7f0      	b.n	8008c4e <__gethex+0x46a>
 8008c6c:	0800b270 	.word	0x0800b270

08008c70 <L_shift>:
 8008c70:	f1c2 0208 	rsb	r2, r2, #8
 8008c74:	0092      	lsls	r2, r2, #2
 8008c76:	b570      	push	{r4, r5, r6, lr}
 8008c78:	f1c2 0620 	rsb	r6, r2, #32
 8008c7c:	6843      	ldr	r3, [r0, #4]
 8008c7e:	6804      	ldr	r4, [r0, #0]
 8008c80:	fa03 f506 	lsl.w	r5, r3, r6
 8008c84:	432c      	orrs	r4, r5
 8008c86:	40d3      	lsrs	r3, r2
 8008c88:	6004      	str	r4, [r0, #0]
 8008c8a:	f840 3f04 	str.w	r3, [r0, #4]!
 8008c8e:	4288      	cmp	r0, r1
 8008c90:	d3f4      	bcc.n	8008c7c <L_shift+0xc>
 8008c92:	bd70      	pop	{r4, r5, r6, pc}

08008c94 <__match>:
 8008c94:	b530      	push	{r4, r5, lr}
 8008c96:	6803      	ldr	r3, [r0, #0]
 8008c98:	3301      	adds	r3, #1
 8008c9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c9e:	b914      	cbnz	r4, 8008ca6 <__match+0x12>
 8008ca0:	6003      	str	r3, [r0, #0]
 8008ca2:	2001      	movs	r0, #1
 8008ca4:	bd30      	pop	{r4, r5, pc}
 8008ca6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008caa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008cae:	2d19      	cmp	r5, #25
 8008cb0:	bf98      	it	ls
 8008cb2:	3220      	addls	r2, #32
 8008cb4:	42a2      	cmp	r2, r4
 8008cb6:	d0f0      	beq.n	8008c9a <__match+0x6>
 8008cb8:	2000      	movs	r0, #0
 8008cba:	e7f3      	b.n	8008ca4 <__match+0x10>

08008cbc <__hexnan>:
 8008cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cc0:	680b      	ldr	r3, [r1, #0]
 8008cc2:	115e      	asrs	r6, r3, #5
 8008cc4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008cc8:	f013 031f 	ands.w	r3, r3, #31
 8008ccc:	b087      	sub	sp, #28
 8008cce:	bf18      	it	ne
 8008cd0:	3604      	addne	r6, #4
 8008cd2:	2500      	movs	r5, #0
 8008cd4:	1f37      	subs	r7, r6, #4
 8008cd6:	4690      	mov	r8, r2
 8008cd8:	6802      	ldr	r2, [r0, #0]
 8008cda:	9301      	str	r3, [sp, #4]
 8008cdc:	4682      	mov	sl, r0
 8008cde:	f846 5c04 	str.w	r5, [r6, #-4]
 8008ce2:	46b9      	mov	r9, r7
 8008ce4:	463c      	mov	r4, r7
 8008ce6:	9502      	str	r5, [sp, #8]
 8008ce8:	46ab      	mov	fp, r5
 8008cea:	7851      	ldrb	r1, [r2, #1]
 8008cec:	1c53      	adds	r3, r2, #1
 8008cee:	9303      	str	r3, [sp, #12]
 8008cf0:	b341      	cbz	r1, 8008d44 <__hexnan+0x88>
 8008cf2:	4608      	mov	r0, r1
 8008cf4:	9205      	str	r2, [sp, #20]
 8008cf6:	9104      	str	r1, [sp, #16]
 8008cf8:	f7ff fd5e 	bl	80087b8 <__hexdig_fun>
 8008cfc:	2800      	cmp	r0, #0
 8008cfe:	d14f      	bne.n	8008da0 <__hexnan+0xe4>
 8008d00:	9904      	ldr	r1, [sp, #16]
 8008d02:	9a05      	ldr	r2, [sp, #20]
 8008d04:	2920      	cmp	r1, #32
 8008d06:	d818      	bhi.n	8008d3a <__hexnan+0x7e>
 8008d08:	9b02      	ldr	r3, [sp, #8]
 8008d0a:	459b      	cmp	fp, r3
 8008d0c:	dd13      	ble.n	8008d36 <__hexnan+0x7a>
 8008d0e:	454c      	cmp	r4, r9
 8008d10:	d206      	bcs.n	8008d20 <__hexnan+0x64>
 8008d12:	2d07      	cmp	r5, #7
 8008d14:	dc04      	bgt.n	8008d20 <__hexnan+0x64>
 8008d16:	462a      	mov	r2, r5
 8008d18:	4649      	mov	r1, r9
 8008d1a:	4620      	mov	r0, r4
 8008d1c:	f7ff ffa8 	bl	8008c70 <L_shift>
 8008d20:	4544      	cmp	r4, r8
 8008d22:	d950      	bls.n	8008dc6 <__hexnan+0x10a>
 8008d24:	2300      	movs	r3, #0
 8008d26:	f1a4 0904 	sub.w	r9, r4, #4
 8008d2a:	f844 3c04 	str.w	r3, [r4, #-4]
 8008d2e:	f8cd b008 	str.w	fp, [sp, #8]
 8008d32:	464c      	mov	r4, r9
 8008d34:	461d      	mov	r5, r3
 8008d36:	9a03      	ldr	r2, [sp, #12]
 8008d38:	e7d7      	b.n	8008cea <__hexnan+0x2e>
 8008d3a:	2929      	cmp	r1, #41	; 0x29
 8008d3c:	d156      	bne.n	8008dec <__hexnan+0x130>
 8008d3e:	3202      	adds	r2, #2
 8008d40:	f8ca 2000 	str.w	r2, [sl]
 8008d44:	f1bb 0f00 	cmp.w	fp, #0
 8008d48:	d050      	beq.n	8008dec <__hexnan+0x130>
 8008d4a:	454c      	cmp	r4, r9
 8008d4c:	d206      	bcs.n	8008d5c <__hexnan+0xa0>
 8008d4e:	2d07      	cmp	r5, #7
 8008d50:	dc04      	bgt.n	8008d5c <__hexnan+0xa0>
 8008d52:	462a      	mov	r2, r5
 8008d54:	4649      	mov	r1, r9
 8008d56:	4620      	mov	r0, r4
 8008d58:	f7ff ff8a 	bl	8008c70 <L_shift>
 8008d5c:	4544      	cmp	r4, r8
 8008d5e:	d934      	bls.n	8008dca <__hexnan+0x10e>
 8008d60:	f1a8 0204 	sub.w	r2, r8, #4
 8008d64:	4623      	mov	r3, r4
 8008d66:	f853 1b04 	ldr.w	r1, [r3], #4
 8008d6a:	f842 1f04 	str.w	r1, [r2, #4]!
 8008d6e:	429f      	cmp	r7, r3
 8008d70:	d2f9      	bcs.n	8008d66 <__hexnan+0xaa>
 8008d72:	1b3b      	subs	r3, r7, r4
 8008d74:	f023 0303 	bic.w	r3, r3, #3
 8008d78:	3304      	adds	r3, #4
 8008d7a:	3401      	adds	r4, #1
 8008d7c:	3e03      	subs	r6, #3
 8008d7e:	42b4      	cmp	r4, r6
 8008d80:	bf88      	it	hi
 8008d82:	2304      	movhi	r3, #4
 8008d84:	4443      	add	r3, r8
 8008d86:	2200      	movs	r2, #0
 8008d88:	f843 2b04 	str.w	r2, [r3], #4
 8008d8c:	429f      	cmp	r7, r3
 8008d8e:	d2fb      	bcs.n	8008d88 <__hexnan+0xcc>
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	b91b      	cbnz	r3, 8008d9c <__hexnan+0xe0>
 8008d94:	4547      	cmp	r7, r8
 8008d96:	d127      	bne.n	8008de8 <__hexnan+0x12c>
 8008d98:	2301      	movs	r3, #1
 8008d9a:	603b      	str	r3, [r7, #0]
 8008d9c:	2005      	movs	r0, #5
 8008d9e:	e026      	b.n	8008dee <__hexnan+0x132>
 8008da0:	3501      	adds	r5, #1
 8008da2:	2d08      	cmp	r5, #8
 8008da4:	f10b 0b01 	add.w	fp, fp, #1
 8008da8:	dd06      	ble.n	8008db8 <__hexnan+0xfc>
 8008daa:	4544      	cmp	r4, r8
 8008dac:	d9c3      	bls.n	8008d36 <__hexnan+0x7a>
 8008dae:	2300      	movs	r3, #0
 8008db0:	f844 3c04 	str.w	r3, [r4, #-4]
 8008db4:	2501      	movs	r5, #1
 8008db6:	3c04      	subs	r4, #4
 8008db8:	6822      	ldr	r2, [r4, #0]
 8008dba:	f000 000f 	and.w	r0, r0, #15
 8008dbe:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8008dc2:	6022      	str	r2, [r4, #0]
 8008dc4:	e7b7      	b.n	8008d36 <__hexnan+0x7a>
 8008dc6:	2508      	movs	r5, #8
 8008dc8:	e7b5      	b.n	8008d36 <__hexnan+0x7a>
 8008dca:	9b01      	ldr	r3, [sp, #4]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d0df      	beq.n	8008d90 <__hexnan+0xd4>
 8008dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8008dd4:	f1c3 0320 	rsb	r3, r3, #32
 8008dd8:	fa22 f303 	lsr.w	r3, r2, r3
 8008ddc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008de0:	401a      	ands	r2, r3
 8008de2:	f846 2c04 	str.w	r2, [r6, #-4]
 8008de6:	e7d3      	b.n	8008d90 <__hexnan+0xd4>
 8008de8:	3f04      	subs	r7, #4
 8008dea:	e7d1      	b.n	8008d90 <__hexnan+0xd4>
 8008dec:	2004      	movs	r0, #4
 8008dee:	b007      	add	sp, #28
 8008df0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008df4 <_localeconv_r>:
 8008df4:	4800      	ldr	r0, [pc, #0]	; (8008df8 <_localeconv_r+0x4>)
 8008df6:	4770      	bx	lr
 8008df8:	20000164 	.word	0x20000164

08008dfc <malloc>:
 8008dfc:	4b02      	ldr	r3, [pc, #8]	; (8008e08 <malloc+0xc>)
 8008dfe:	4601      	mov	r1, r0
 8008e00:	6818      	ldr	r0, [r3, #0]
 8008e02:	f000 bd67 	b.w	80098d4 <_malloc_r>
 8008e06:	bf00      	nop
 8008e08:	2000000c 	.word	0x2000000c

08008e0c <__ascii_mbtowc>:
 8008e0c:	b082      	sub	sp, #8
 8008e0e:	b901      	cbnz	r1, 8008e12 <__ascii_mbtowc+0x6>
 8008e10:	a901      	add	r1, sp, #4
 8008e12:	b142      	cbz	r2, 8008e26 <__ascii_mbtowc+0x1a>
 8008e14:	b14b      	cbz	r3, 8008e2a <__ascii_mbtowc+0x1e>
 8008e16:	7813      	ldrb	r3, [r2, #0]
 8008e18:	600b      	str	r3, [r1, #0]
 8008e1a:	7812      	ldrb	r2, [r2, #0]
 8008e1c:	1e10      	subs	r0, r2, #0
 8008e1e:	bf18      	it	ne
 8008e20:	2001      	movne	r0, #1
 8008e22:	b002      	add	sp, #8
 8008e24:	4770      	bx	lr
 8008e26:	4610      	mov	r0, r2
 8008e28:	e7fb      	b.n	8008e22 <__ascii_mbtowc+0x16>
 8008e2a:	f06f 0001 	mvn.w	r0, #1
 8008e2e:	e7f8      	b.n	8008e22 <__ascii_mbtowc+0x16>

08008e30 <memcpy>:
 8008e30:	440a      	add	r2, r1
 8008e32:	4291      	cmp	r1, r2
 8008e34:	f100 33ff 	add.w	r3, r0, #4294967295
 8008e38:	d100      	bne.n	8008e3c <memcpy+0xc>
 8008e3a:	4770      	bx	lr
 8008e3c:	b510      	push	{r4, lr}
 8008e3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e42:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e46:	4291      	cmp	r1, r2
 8008e48:	d1f9      	bne.n	8008e3e <memcpy+0xe>
 8008e4a:	bd10      	pop	{r4, pc}

08008e4c <_Balloc>:
 8008e4c:	b570      	push	{r4, r5, r6, lr}
 8008e4e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008e50:	4604      	mov	r4, r0
 8008e52:	460d      	mov	r5, r1
 8008e54:	b976      	cbnz	r6, 8008e74 <_Balloc+0x28>
 8008e56:	2010      	movs	r0, #16
 8008e58:	f7ff ffd0 	bl	8008dfc <malloc>
 8008e5c:	4602      	mov	r2, r0
 8008e5e:	6260      	str	r0, [r4, #36]	; 0x24
 8008e60:	b920      	cbnz	r0, 8008e6c <_Balloc+0x20>
 8008e62:	4b18      	ldr	r3, [pc, #96]	; (8008ec4 <_Balloc+0x78>)
 8008e64:	4818      	ldr	r0, [pc, #96]	; (8008ec8 <_Balloc+0x7c>)
 8008e66:	2166      	movs	r1, #102	; 0x66
 8008e68:	f000 ff40 	bl	8009cec <__assert_func>
 8008e6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008e70:	6006      	str	r6, [r0, #0]
 8008e72:	60c6      	str	r6, [r0, #12]
 8008e74:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008e76:	68f3      	ldr	r3, [r6, #12]
 8008e78:	b183      	cbz	r3, 8008e9c <_Balloc+0x50>
 8008e7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e7c:	68db      	ldr	r3, [r3, #12]
 8008e7e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008e82:	b9b8      	cbnz	r0, 8008eb4 <_Balloc+0x68>
 8008e84:	2101      	movs	r1, #1
 8008e86:	fa01 f605 	lsl.w	r6, r1, r5
 8008e8a:	1d72      	adds	r2, r6, #5
 8008e8c:	0092      	lsls	r2, r2, #2
 8008e8e:	4620      	mov	r0, r4
 8008e90:	f000 fc9d 	bl	80097ce <_calloc_r>
 8008e94:	b160      	cbz	r0, 8008eb0 <_Balloc+0x64>
 8008e96:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008e9a:	e00e      	b.n	8008eba <_Balloc+0x6e>
 8008e9c:	2221      	movs	r2, #33	; 0x21
 8008e9e:	2104      	movs	r1, #4
 8008ea0:	4620      	mov	r0, r4
 8008ea2:	f000 fc94 	bl	80097ce <_calloc_r>
 8008ea6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ea8:	60f0      	str	r0, [r6, #12]
 8008eaa:	68db      	ldr	r3, [r3, #12]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d1e4      	bne.n	8008e7a <_Balloc+0x2e>
 8008eb0:	2000      	movs	r0, #0
 8008eb2:	bd70      	pop	{r4, r5, r6, pc}
 8008eb4:	6802      	ldr	r2, [r0, #0]
 8008eb6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008eba:	2300      	movs	r3, #0
 8008ebc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008ec0:	e7f7      	b.n	8008eb2 <_Balloc+0x66>
 8008ec2:	bf00      	nop
 8008ec4:	0800b1fe 	.word	0x0800b1fe
 8008ec8:	0800b2fc 	.word	0x0800b2fc

08008ecc <_Bfree>:
 8008ecc:	b570      	push	{r4, r5, r6, lr}
 8008ece:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008ed0:	4605      	mov	r5, r0
 8008ed2:	460c      	mov	r4, r1
 8008ed4:	b976      	cbnz	r6, 8008ef4 <_Bfree+0x28>
 8008ed6:	2010      	movs	r0, #16
 8008ed8:	f7ff ff90 	bl	8008dfc <malloc>
 8008edc:	4602      	mov	r2, r0
 8008ede:	6268      	str	r0, [r5, #36]	; 0x24
 8008ee0:	b920      	cbnz	r0, 8008eec <_Bfree+0x20>
 8008ee2:	4b09      	ldr	r3, [pc, #36]	; (8008f08 <_Bfree+0x3c>)
 8008ee4:	4809      	ldr	r0, [pc, #36]	; (8008f0c <_Bfree+0x40>)
 8008ee6:	218a      	movs	r1, #138	; 0x8a
 8008ee8:	f000 ff00 	bl	8009cec <__assert_func>
 8008eec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008ef0:	6006      	str	r6, [r0, #0]
 8008ef2:	60c6      	str	r6, [r0, #12]
 8008ef4:	b13c      	cbz	r4, 8008f06 <_Bfree+0x3a>
 8008ef6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008ef8:	6862      	ldr	r2, [r4, #4]
 8008efa:	68db      	ldr	r3, [r3, #12]
 8008efc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008f00:	6021      	str	r1, [r4, #0]
 8008f02:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008f06:	bd70      	pop	{r4, r5, r6, pc}
 8008f08:	0800b1fe 	.word	0x0800b1fe
 8008f0c:	0800b2fc 	.word	0x0800b2fc

08008f10 <__multadd>:
 8008f10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f14:	690d      	ldr	r5, [r1, #16]
 8008f16:	4607      	mov	r7, r0
 8008f18:	460c      	mov	r4, r1
 8008f1a:	461e      	mov	r6, r3
 8008f1c:	f101 0c14 	add.w	ip, r1, #20
 8008f20:	2000      	movs	r0, #0
 8008f22:	f8dc 3000 	ldr.w	r3, [ip]
 8008f26:	b299      	uxth	r1, r3
 8008f28:	fb02 6101 	mla	r1, r2, r1, r6
 8008f2c:	0c1e      	lsrs	r6, r3, #16
 8008f2e:	0c0b      	lsrs	r3, r1, #16
 8008f30:	fb02 3306 	mla	r3, r2, r6, r3
 8008f34:	b289      	uxth	r1, r1
 8008f36:	3001      	adds	r0, #1
 8008f38:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008f3c:	4285      	cmp	r5, r0
 8008f3e:	f84c 1b04 	str.w	r1, [ip], #4
 8008f42:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008f46:	dcec      	bgt.n	8008f22 <__multadd+0x12>
 8008f48:	b30e      	cbz	r6, 8008f8e <__multadd+0x7e>
 8008f4a:	68a3      	ldr	r3, [r4, #8]
 8008f4c:	42ab      	cmp	r3, r5
 8008f4e:	dc19      	bgt.n	8008f84 <__multadd+0x74>
 8008f50:	6861      	ldr	r1, [r4, #4]
 8008f52:	4638      	mov	r0, r7
 8008f54:	3101      	adds	r1, #1
 8008f56:	f7ff ff79 	bl	8008e4c <_Balloc>
 8008f5a:	4680      	mov	r8, r0
 8008f5c:	b928      	cbnz	r0, 8008f6a <__multadd+0x5a>
 8008f5e:	4602      	mov	r2, r0
 8008f60:	4b0c      	ldr	r3, [pc, #48]	; (8008f94 <__multadd+0x84>)
 8008f62:	480d      	ldr	r0, [pc, #52]	; (8008f98 <__multadd+0x88>)
 8008f64:	21b5      	movs	r1, #181	; 0xb5
 8008f66:	f000 fec1 	bl	8009cec <__assert_func>
 8008f6a:	6922      	ldr	r2, [r4, #16]
 8008f6c:	3202      	adds	r2, #2
 8008f6e:	f104 010c 	add.w	r1, r4, #12
 8008f72:	0092      	lsls	r2, r2, #2
 8008f74:	300c      	adds	r0, #12
 8008f76:	f7ff ff5b 	bl	8008e30 <memcpy>
 8008f7a:	4621      	mov	r1, r4
 8008f7c:	4638      	mov	r0, r7
 8008f7e:	f7ff ffa5 	bl	8008ecc <_Bfree>
 8008f82:	4644      	mov	r4, r8
 8008f84:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008f88:	3501      	adds	r5, #1
 8008f8a:	615e      	str	r6, [r3, #20]
 8008f8c:	6125      	str	r5, [r4, #16]
 8008f8e:	4620      	mov	r0, r4
 8008f90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f94:	0800b270 	.word	0x0800b270
 8008f98:	0800b2fc 	.word	0x0800b2fc

08008f9c <__s2b>:
 8008f9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fa0:	460c      	mov	r4, r1
 8008fa2:	4615      	mov	r5, r2
 8008fa4:	461f      	mov	r7, r3
 8008fa6:	2209      	movs	r2, #9
 8008fa8:	3308      	adds	r3, #8
 8008faa:	4606      	mov	r6, r0
 8008fac:	fb93 f3f2 	sdiv	r3, r3, r2
 8008fb0:	2100      	movs	r1, #0
 8008fb2:	2201      	movs	r2, #1
 8008fb4:	429a      	cmp	r2, r3
 8008fb6:	db09      	blt.n	8008fcc <__s2b+0x30>
 8008fb8:	4630      	mov	r0, r6
 8008fba:	f7ff ff47 	bl	8008e4c <_Balloc>
 8008fbe:	b940      	cbnz	r0, 8008fd2 <__s2b+0x36>
 8008fc0:	4602      	mov	r2, r0
 8008fc2:	4b19      	ldr	r3, [pc, #100]	; (8009028 <__s2b+0x8c>)
 8008fc4:	4819      	ldr	r0, [pc, #100]	; (800902c <__s2b+0x90>)
 8008fc6:	21ce      	movs	r1, #206	; 0xce
 8008fc8:	f000 fe90 	bl	8009cec <__assert_func>
 8008fcc:	0052      	lsls	r2, r2, #1
 8008fce:	3101      	adds	r1, #1
 8008fd0:	e7f0      	b.n	8008fb4 <__s2b+0x18>
 8008fd2:	9b08      	ldr	r3, [sp, #32]
 8008fd4:	6143      	str	r3, [r0, #20]
 8008fd6:	2d09      	cmp	r5, #9
 8008fd8:	f04f 0301 	mov.w	r3, #1
 8008fdc:	6103      	str	r3, [r0, #16]
 8008fde:	dd16      	ble.n	800900e <__s2b+0x72>
 8008fe0:	f104 0909 	add.w	r9, r4, #9
 8008fe4:	46c8      	mov	r8, r9
 8008fe6:	442c      	add	r4, r5
 8008fe8:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008fec:	4601      	mov	r1, r0
 8008fee:	3b30      	subs	r3, #48	; 0x30
 8008ff0:	220a      	movs	r2, #10
 8008ff2:	4630      	mov	r0, r6
 8008ff4:	f7ff ff8c 	bl	8008f10 <__multadd>
 8008ff8:	45a0      	cmp	r8, r4
 8008ffa:	d1f5      	bne.n	8008fe8 <__s2b+0x4c>
 8008ffc:	f1a5 0408 	sub.w	r4, r5, #8
 8009000:	444c      	add	r4, r9
 8009002:	1b2d      	subs	r5, r5, r4
 8009004:	1963      	adds	r3, r4, r5
 8009006:	42bb      	cmp	r3, r7
 8009008:	db04      	blt.n	8009014 <__s2b+0x78>
 800900a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800900e:	340a      	adds	r4, #10
 8009010:	2509      	movs	r5, #9
 8009012:	e7f6      	b.n	8009002 <__s2b+0x66>
 8009014:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009018:	4601      	mov	r1, r0
 800901a:	3b30      	subs	r3, #48	; 0x30
 800901c:	220a      	movs	r2, #10
 800901e:	4630      	mov	r0, r6
 8009020:	f7ff ff76 	bl	8008f10 <__multadd>
 8009024:	e7ee      	b.n	8009004 <__s2b+0x68>
 8009026:	bf00      	nop
 8009028:	0800b270 	.word	0x0800b270
 800902c:	0800b2fc 	.word	0x0800b2fc

08009030 <__hi0bits>:
 8009030:	0c03      	lsrs	r3, r0, #16
 8009032:	041b      	lsls	r3, r3, #16
 8009034:	b9d3      	cbnz	r3, 800906c <__hi0bits+0x3c>
 8009036:	0400      	lsls	r0, r0, #16
 8009038:	2310      	movs	r3, #16
 800903a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800903e:	bf04      	itt	eq
 8009040:	0200      	lsleq	r0, r0, #8
 8009042:	3308      	addeq	r3, #8
 8009044:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009048:	bf04      	itt	eq
 800904a:	0100      	lsleq	r0, r0, #4
 800904c:	3304      	addeq	r3, #4
 800904e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009052:	bf04      	itt	eq
 8009054:	0080      	lsleq	r0, r0, #2
 8009056:	3302      	addeq	r3, #2
 8009058:	2800      	cmp	r0, #0
 800905a:	db05      	blt.n	8009068 <__hi0bits+0x38>
 800905c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009060:	f103 0301 	add.w	r3, r3, #1
 8009064:	bf08      	it	eq
 8009066:	2320      	moveq	r3, #32
 8009068:	4618      	mov	r0, r3
 800906a:	4770      	bx	lr
 800906c:	2300      	movs	r3, #0
 800906e:	e7e4      	b.n	800903a <__hi0bits+0xa>

08009070 <__lo0bits>:
 8009070:	6803      	ldr	r3, [r0, #0]
 8009072:	f013 0207 	ands.w	r2, r3, #7
 8009076:	4601      	mov	r1, r0
 8009078:	d00b      	beq.n	8009092 <__lo0bits+0x22>
 800907a:	07da      	lsls	r2, r3, #31
 800907c:	d423      	bmi.n	80090c6 <__lo0bits+0x56>
 800907e:	0798      	lsls	r0, r3, #30
 8009080:	bf49      	itett	mi
 8009082:	085b      	lsrmi	r3, r3, #1
 8009084:	089b      	lsrpl	r3, r3, #2
 8009086:	2001      	movmi	r0, #1
 8009088:	600b      	strmi	r3, [r1, #0]
 800908a:	bf5c      	itt	pl
 800908c:	600b      	strpl	r3, [r1, #0]
 800908e:	2002      	movpl	r0, #2
 8009090:	4770      	bx	lr
 8009092:	b298      	uxth	r0, r3
 8009094:	b9a8      	cbnz	r0, 80090c2 <__lo0bits+0x52>
 8009096:	0c1b      	lsrs	r3, r3, #16
 8009098:	2010      	movs	r0, #16
 800909a:	b2da      	uxtb	r2, r3
 800909c:	b90a      	cbnz	r2, 80090a2 <__lo0bits+0x32>
 800909e:	3008      	adds	r0, #8
 80090a0:	0a1b      	lsrs	r3, r3, #8
 80090a2:	071a      	lsls	r2, r3, #28
 80090a4:	bf04      	itt	eq
 80090a6:	091b      	lsreq	r3, r3, #4
 80090a8:	3004      	addeq	r0, #4
 80090aa:	079a      	lsls	r2, r3, #30
 80090ac:	bf04      	itt	eq
 80090ae:	089b      	lsreq	r3, r3, #2
 80090b0:	3002      	addeq	r0, #2
 80090b2:	07da      	lsls	r2, r3, #31
 80090b4:	d403      	bmi.n	80090be <__lo0bits+0x4e>
 80090b6:	085b      	lsrs	r3, r3, #1
 80090b8:	f100 0001 	add.w	r0, r0, #1
 80090bc:	d005      	beq.n	80090ca <__lo0bits+0x5a>
 80090be:	600b      	str	r3, [r1, #0]
 80090c0:	4770      	bx	lr
 80090c2:	4610      	mov	r0, r2
 80090c4:	e7e9      	b.n	800909a <__lo0bits+0x2a>
 80090c6:	2000      	movs	r0, #0
 80090c8:	4770      	bx	lr
 80090ca:	2020      	movs	r0, #32
 80090cc:	4770      	bx	lr
	...

080090d0 <__i2b>:
 80090d0:	b510      	push	{r4, lr}
 80090d2:	460c      	mov	r4, r1
 80090d4:	2101      	movs	r1, #1
 80090d6:	f7ff feb9 	bl	8008e4c <_Balloc>
 80090da:	4602      	mov	r2, r0
 80090dc:	b928      	cbnz	r0, 80090ea <__i2b+0x1a>
 80090de:	4b05      	ldr	r3, [pc, #20]	; (80090f4 <__i2b+0x24>)
 80090e0:	4805      	ldr	r0, [pc, #20]	; (80090f8 <__i2b+0x28>)
 80090e2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80090e6:	f000 fe01 	bl	8009cec <__assert_func>
 80090ea:	2301      	movs	r3, #1
 80090ec:	6144      	str	r4, [r0, #20]
 80090ee:	6103      	str	r3, [r0, #16]
 80090f0:	bd10      	pop	{r4, pc}
 80090f2:	bf00      	nop
 80090f4:	0800b270 	.word	0x0800b270
 80090f8:	0800b2fc 	.word	0x0800b2fc

080090fc <__multiply>:
 80090fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009100:	4691      	mov	r9, r2
 8009102:	690a      	ldr	r2, [r1, #16]
 8009104:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009108:	429a      	cmp	r2, r3
 800910a:	bfb8      	it	lt
 800910c:	460b      	movlt	r3, r1
 800910e:	460c      	mov	r4, r1
 8009110:	bfbc      	itt	lt
 8009112:	464c      	movlt	r4, r9
 8009114:	4699      	movlt	r9, r3
 8009116:	6927      	ldr	r7, [r4, #16]
 8009118:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800911c:	68a3      	ldr	r3, [r4, #8]
 800911e:	6861      	ldr	r1, [r4, #4]
 8009120:	eb07 060a 	add.w	r6, r7, sl
 8009124:	42b3      	cmp	r3, r6
 8009126:	b085      	sub	sp, #20
 8009128:	bfb8      	it	lt
 800912a:	3101      	addlt	r1, #1
 800912c:	f7ff fe8e 	bl	8008e4c <_Balloc>
 8009130:	b930      	cbnz	r0, 8009140 <__multiply+0x44>
 8009132:	4602      	mov	r2, r0
 8009134:	4b44      	ldr	r3, [pc, #272]	; (8009248 <__multiply+0x14c>)
 8009136:	4845      	ldr	r0, [pc, #276]	; (800924c <__multiply+0x150>)
 8009138:	f240 115d 	movw	r1, #349	; 0x15d
 800913c:	f000 fdd6 	bl	8009cec <__assert_func>
 8009140:	f100 0514 	add.w	r5, r0, #20
 8009144:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009148:	462b      	mov	r3, r5
 800914a:	2200      	movs	r2, #0
 800914c:	4543      	cmp	r3, r8
 800914e:	d321      	bcc.n	8009194 <__multiply+0x98>
 8009150:	f104 0314 	add.w	r3, r4, #20
 8009154:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009158:	f109 0314 	add.w	r3, r9, #20
 800915c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009160:	9202      	str	r2, [sp, #8]
 8009162:	1b3a      	subs	r2, r7, r4
 8009164:	3a15      	subs	r2, #21
 8009166:	f022 0203 	bic.w	r2, r2, #3
 800916a:	3204      	adds	r2, #4
 800916c:	f104 0115 	add.w	r1, r4, #21
 8009170:	428f      	cmp	r7, r1
 8009172:	bf38      	it	cc
 8009174:	2204      	movcc	r2, #4
 8009176:	9201      	str	r2, [sp, #4]
 8009178:	9a02      	ldr	r2, [sp, #8]
 800917a:	9303      	str	r3, [sp, #12]
 800917c:	429a      	cmp	r2, r3
 800917e:	d80c      	bhi.n	800919a <__multiply+0x9e>
 8009180:	2e00      	cmp	r6, #0
 8009182:	dd03      	ble.n	800918c <__multiply+0x90>
 8009184:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009188:	2b00      	cmp	r3, #0
 800918a:	d05a      	beq.n	8009242 <__multiply+0x146>
 800918c:	6106      	str	r6, [r0, #16]
 800918e:	b005      	add	sp, #20
 8009190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009194:	f843 2b04 	str.w	r2, [r3], #4
 8009198:	e7d8      	b.n	800914c <__multiply+0x50>
 800919a:	f8b3 a000 	ldrh.w	sl, [r3]
 800919e:	f1ba 0f00 	cmp.w	sl, #0
 80091a2:	d024      	beq.n	80091ee <__multiply+0xf2>
 80091a4:	f104 0e14 	add.w	lr, r4, #20
 80091a8:	46a9      	mov	r9, r5
 80091aa:	f04f 0c00 	mov.w	ip, #0
 80091ae:	f85e 2b04 	ldr.w	r2, [lr], #4
 80091b2:	f8d9 1000 	ldr.w	r1, [r9]
 80091b6:	fa1f fb82 	uxth.w	fp, r2
 80091ba:	b289      	uxth	r1, r1
 80091bc:	fb0a 110b 	mla	r1, sl, fp, r1
 80091c0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80091c4:	f8d9 2000 	ldr.w	r2, [r9]
 80091c8:	4461      	add	r1, ip
 80091ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80091ce:	fb0a c20b 	mla	r2, sl, fp, ip
 80091d2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80091d6:	b289      	uxth	r1, r1
 80091d8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80091dc:	4577      	cmp	r7, lr
 80091de:	f849 1b04 	str.w	r1, [r9], #4
 80091e2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80091e6:	d8e2      	bhi.n	80091ae <__multiply+0xb2>
 80091e8:	9a01      	ldr	r2, [sp, #4]
 80091ea:	f845 c002 	str.w	ip, [r5, r2]
 80091ee:	9a03      	ldr	r2, [sp, #12]
 80091f0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80091f4:	3304      	adds	r3, #4
 80091f6:	f1b9 0f00 	cmp.w	r9, #0
 80091fa:	d020      	beq.n	800923e <__multiply+0x142>
 80091fc:	6829      	ldr	r1, [r5, #0]
 80091fe:	f104 0c14 	add.w	ip, r4, #20
 8009202:	46ae      	mov	lr, r5
 8009204:	f04f 0a00 	mov.w	sl, #0
 8009208:	f8bc b000 	ldrh.w	fp, [ip]
 800920c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009210:	fb09 220b 	mla	r2, r9, fp, r2
 8009214:	4492      	add	sl, r2
 8009216:	b289      	uxth	r1, r1
 8009218:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800921c:	f84e 1b04 	str.w	r1, [lr], #4
 8009220:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009224:	f8be 1000 	ldrh.w	r1, [lr]
 8009228:	0c12      	lsrs	r2, r2, #16
 800922a:	fb09 1102 	mla	r1, r9, r2, r1
 800922e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009232:	4567      	cmp	r7, ip
 8009234:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009238:	d8e6      	bhi.n	8009208 <__multiply+0x10c>
 800923a:	9a01      	ldr	r2, [sp, #4]
 800923c:	50a9      	str	r1, [r5, r2]
 800923e:	3504      	adds	r5, #4
 8009240:	e79a      	b.n	8009178 <__multiply+0x7c>
 8009242:	3e01      	subs	r6, #1
 8009244:	e79c      	b.n	8009180 <__multiply+0x84>
 8009246:	bf00      	nop
 8009248:	0800b270 	.word	0x0800b270
 800924c:	0800b2fc 	.word	0x0800b2fc

08009250 <__pow5mult>:
 8009250:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009254:	4615      	mov	r5, r2
 8009256:	f012 0203 	ands.w	r2, r2, #3
 800925a:	4606      	mov	r6, r0
 800925c:	460f      	mov	r7, r1
 800925e:	d007      	beq.n	8009270 <__pow5mult+0x20>
 8009260:	4c25      	ldr	r4, [pc, #148]	; (80092f8 <__pow5mult+0xa8>)
 8009262:	3a01      	subs	r2, #1
 8009264:	2300      	movs	r3, #0
 8009266:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800926a:	f7ff fe51 	bl	8008f10 <__multadd>
 800926e:	4607      	mov	r7, r0
 8009270:	10ad      	asrs	r5, r5, #2
 8009272:	d03d      	beq.n	80092f0 <__pow5mult+0xa0>
 8009274:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009276:	b97c      	cbnz	r4, 8009298 <__pow5mult+0x48>
 8009278:	2010      	movs	r0, #16
 800927a:	f7ff fdbf 	bl	8008dfc <malloc>
 800927e:	4602      	mov	r2, r0
 8009280:	6270      	str	r0, [r6, #36]	; 0x24
 8009282:	b928      	cbnz	r0, 8009290 <__pow5mult+0x40>
 8009284:	4b1d      	ldr	r3, [pc, #116]	; (80092fc <__pow5mult+0xac>)
 8009286:	481e      	ldr	r0, [pc, #120]	; (8009300 <__pow5mult+0xb0>)
 8009288:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800928c:	f000 fd2e 	bl	8009cec <__assert_func>
 8009290:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009294:	6004      	str	r4, [r0, #0]
 8009296:	60c4      	str	r4, [r0, #12]
 8009298:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800929c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80092a0:	b94c      	cbnz	r4, 80092b6 <__pow5mult+0x66>
 80092a2:	f240 2171 	movw	r1, #625	; 0x271
 80092a6:	4630      	mov	r0, r6
 80092a8:	f7ff ff12 	bl	80090d0 <__i2b>
 80092ac:	2300      	movs	r3, #0
 80092ae:	f8c8 0008 	str.w	r0, [r8, #8]
 80092b2:	4604      	mov	r4, r0
 80092b4:	6003      	str	r3, [r0, #0]
 80092b6:	f04f 0900 	mov.w	r9, #0
 80092ba:	07eb      	lsls	r3, r5, #31
 80092bc:	d50a      	bpl.n	80092d4 <__pow5mult+0x84>
 80092be:	4639      	mov	r1, r7
 80092c0:	4622      	mov	r2, r4
 80092c2:	4630      	mov	r0, r6
 80092c4:	f7ff ff1a 	bl	80090fc <__multiply>
 80092c8:	4639      	mov	r1, r7
 80092ca:	4680      	mov	r8, r0
 80092cc:	4630      	mov	r0, r6
 80092ce:	f7ff fdfd 	bl	8008ecc <_Bfree>
 80092d2:	4647      	mov	r7, r8
 80092d4:	106d      	asrs	r5, r5, #1
 80092d6:	d00b      	beq.n	80092f0 <__pow5mult+0xa0>
 80092d8:	6820      	ldr	r0, [r4, #0]
 80092da:	b938      	cbnz	r0, 80092ec <__pow5mult+0x9c>
 80092dc:	4622      	mov	r2, r4
 80092de:	4621      	mov	r1, r4
 80092e0:	4630      	mov	r0, r6
 80092e2:	f7ff ff0b 	bl	80090fc <__multiply>
 80092e6:	6020      	str	r0, [r4, #0]
 80092e8:	f8c0 9000 	str.w	r9, [r0]
 80092ec:	4604      	mov	r4, r0
 80092ee:	e7e4      	b.n	80092ba <__pow5mult+0x6a>
 80092f0:	4638      	mov	r0, r7
 80092f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092f6:	bf00      	nop
 80092f8:	0800b448 	.word	0x0800b448
 80092fc:	0800b1fe 	.word	0x0800b1fe
 8009300:	0800b2fc 	.word	0x0800b2fc

08009304 <__lshift>:
 8009304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009308:	460c      	mov	r4, r1
 800930a:	6849      	ldr	r1, [r1, #4]
 800930c:	6923      	ldr	r3, [r4, #16]
 800930e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009312:	68a3      	ldr	r3, [r4, #8]
 8009314:	4607      	mov	r7, r0
 8009316:	4691      	mov	r9, r2
 8009318:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800931c:	f108 0601 	add.w	r6, r8, #1
 8009320:	42b3      	cmp	r3, r6
 8009322:	db0b      	blt.n	800933c <__lshift+0x38>
 8009324:	4638      	mov	r0, r7
 8009326:	f7ff fd91 	bl	8008e4c <_Balloc>
 800932a:	4605      	mov	r5, r0
 800932c:	b948      	cbnz	r0, 8009342 <__lshift+0x3e>
 800932e:	4602      	mov	r2, r0
 8009330:	4b2a      	ldr	r3, [pc, #168]	; (80093dc <__lshift+0xd8>)
 8009332:	482b      	ldr	r0, [pc, #172]	; (80093e0 <__lshift+0xdc>)
 8009334:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009338:	f000 fcd8 	bl	8009cec <__assert_func>
 800933c:	3101      	adds	r1, #1
 800933e:	005b      	lsls	r3, r3, #1
 8009340:	e7ee      	b.n	8009320 <__lshift+0x1c>
 8009342:	2300      	movs	r3, #0
 8009344:	f100 0114 	add.w	r1, r0, #20
 8009348:	f100 0210 	add.w	r2, r0, #16
 800934c:	4618      	mov	r0, r3
 800934e:	4553      	cmp	r3, sl
 8009350:	db37      	blt.n	80093c2 <__lshift+0xbe>
 8009352:	6920      	ldr	r0, [r4, #16]
 8009354:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009358:	f104 0314 	add.w	r3, r4, #20
 800935c:	f019 091f 	ands.w	r9, r9, #31
 8009360:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009364:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009368:	d02f      	beq.n	80093ca <__lshift+0xc6>
 800936a:	f1c9 0e20 	rsb	lr, r9, #32
 800936e:	468a      	mov	sl, r1
 8009370:	f04f 0c00 	mov.w	ip, #0
 8009374:	681a      	ldr	r2, [r3, #0]
 8009376:	fa02 f209 	lsl.w	r2, r2, r9
 800937a:	ea42 020c 	orr.w	r2, r2, ip
 800937e:	f84a 2b04 	str.w	r2, [sl], #4
 8009382:	f853 2b04 	ldr.w	r2, [r3], #4
 8009386:	4298      	cmp	r0, r3
 8009388:	fa22 fc0e 	lsr.w	ip, r2, lr
 800938c:	d8f2      	bhi.n	8009374 <__lshift+0x70>
 800938e:	1b03      	subs	r3, r0, r4
 8009390:	3b15      	subs	r3, #21
 8009392:	f023 0303 	bic.w	r3, r3, #3
 8009396:	3304      	adds	r3, #4
 8009398:	f104 0215 	add.w	r2, r4, #21
 800939c:	4290      	cmp	r0, r2
 800939e:	bf38      	it	cc
 80093a0:	2304      	movcc	r3, #4
 80093a2:	f841 c003 	str.w	ip, [r1, r3]
 80093a6:	f1bc 0f00 	cmp.w	ip, #0
 80093aa:	d001      	beq.n	80093b0 <__lshift+0xac>
 80093ac:	f108 0602 	add.w	r6, r8, #2
 80093b0:	3e01      	subs	r6, #1
 80093b2:	4638      	mov	r0, r7
 80093b4:	612e      	str	r6, [r5, #16]
 80093b6:	4621      	mov	r1, r4
 80093b8:	f7ff fd88 	bl	8008ecc <_Bfree>
 80093bc:	4628      	mov	r0, r5
 80093be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093c2:	f842 0f04 	str.w	r0, [r2, #4]!
 80093c6:	3301      	adds	r3, #1
 80093c8:	e7c1      	b.n	800934e <__lshift+0x4a>
 80093ca:	3904      	subs	r1, #4
 80093cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80093d0:	f841 2f04 	str.w	r2, [r1, #4]!
 80093d4:	4298      	cmp	r0, r3
 80093d6:	d8f9      	bhi.n	80093cc <__lshift+0xc8>
 80093d8:	e7ea      	b.n	80093b0 <__lshift+0xac>
 80093da:	bf00      	nop
 80093dc:	0800b270 	.word	0x0800b270
 80093e0:	0800b2fc 	.word	0x0800b2fc

080093e4 <__mcmp>:
 80093e4:	b530      	push	{r4, r5, lr}
 80093e6:	6902      	ldr	r2, [r0, #16]
 80093e8:	690c      	ldr	r4, [r1, #16]
 80093ea:	1b12      	subs	r2, r2, r4
 80093ec:	d10e      	bne.n	800940c <__mcmp+0x28>
 80093ee:	f100 0314 	add.w	r3, r0, #20
 80093f2:	3114      	adds	r1, #20
 80093f4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80093f8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80093fc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009400:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009404:	42a5      	cmp	r5, r4
 8009406:	d003      	beq.n	8009410 <__mcmp+0x2c>
 8009408:	d305      	bcc.n	8009416 <__mcmp+0x32>
 800940a:	2201      	movs	r2, #1
 800940c:	4610      	mov	r0, r2
 800940e:	bd30      	pop	{r4, r5, pc}
 8009410:	4283      	cmp	r3, r0
 8009412:	d3f3      	bcc.n	80093fc <__mcmp+0x18>
 8009414:	e7fa      	b.n	800940c <__mcmp+0x28>
 8009416:	f04f 32ff 	mov.w	r2, #4294967295
 800941a:	e7f7      	b.n	800940c <__mcmp+0x28>

0800941c <__mdiff>:
 800941c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009420:	460c      	mov	r4, r1
 8009422:	4606      	mov	r6, r0
 8009424:	4611      	mov	r1, r2
 8009426:	4620      	mov	r0, r4
 8009428:	4690      	mov	r8, r2
 800942a:	f7ff ffdb 	bl	80093e4 <__mcmp>
 800942e:	1e05      	subs	r5, r0, #0
 8009430:	d110      	bne.n	8009454 <__mdiff+0x38>
 8009432:	4629      	mov	r1, r5
 8009434:	4630      	mov	r0, r6
 8009436:	f7ff fd09 	bl	8008e4c <_Balloc>
 800943a:	b930      	cbnz	r0, 800944a <__mdiff+0x2e>
 800943c:	4b3a      	ldr	r3, [pc, #232]	; (8009528 <__mdiff+0x10c>)
 800943e:	4602      	mov	r2, r0
 8009440:	f240 2132 	movw	r1, #562	; 0x232
 8009444:	4839      	ldr	r0, [pc, #228]	; (800952c <__mdiff+0x110>)
 8009446:	f000 fc51 	bl	8009cec <__assert_func>
 800944a:	2301      	movs	r3, #1
 800944c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009450:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009454:	bfa4      	itt	ge
 8009456:	4643      	movge	r3, r8
 8009458:	46a0      	movge	r8, r4
 800945a:	4630      	mov	r0, r6
 800945c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009460:	bfa6      	itte	ge
 8009462:	461c      	movge	r4, r3
 8009464:	2500      	movge	r5, #0
 8009466:	2501      	movlt	r5, #1
 8009468:	f7ff fcf0 	bl	8008e4c <_Balloc>
 800946c:	b920      	cbnz	r0, 8009478 <__mdiff+0x5c>
 800946e:	4b2e      	ldr	r3, [pc, #184]	; (8009528 <__mdiff+0x10c>)
 8009470:	4602      	mov	r2, r0
 8009472:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009476:	e7e5      	b.n	8009444 <__mdiff+0x28>
 8009478:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800947c:	6926      	ldr	r6, [r4, #16]
 800947e:	60c5      	str	r5, [r0, #12]
 8009480:	f104 0914 	add.w	r9, r4, #20
 8009484:	f108 0514 	add.w	r5, r8, #20
 8009488:	f100 0e14 	add.w	lr, r0, #20
 800948c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009490:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009494:	f108 0210 	add.w	r2, r8, #16
 8009498:	46f2      	mov	sl, lr
 800949a:	2100      	movs	r1, #0
 800949c:	f859 3b04 	ldr.w	r3, [r9], #4
 80094a0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80094a4:	fa1f f883 	uxth.w	r8, r3
 80094a8:	fa11 f18b 	uxtah	r1, r1, fp
 80094ac:	0c1b      	lsrs	r3, r3, #16
 80094ae:	eba1 0808 	sub.w	r8, r1, r8
 80094b2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80094b6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80094ba:	fa1f f888 	uxth.w	r8, r8
 80094be:	1419      	asrs	r1, r3, #16
 80094c0:	454e      	cmp	r6, r9
 80094c2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80094c6:	f84a 3b04 	str.w	r3, [sl], #4
 80094ca:	d8e7      	bhi.n	800949c <__mdiff+0x80>
 80094cc:	1b33      	subs	r3, r6, r4
 80094ce:	3b15      	subs	r3, #21
 80094d0:	f023 0303 	bic.w	r3, r3, #3
 80094d4:	3304      	adds	r3, #4
 80094d6:	3415      	adds	r4, #21
 80094d8:	42a6      	cmp	r6, r4
 80094da:	bf38      	it	cc
 80094dc:	2304      	movcc	r3, #4
 80094de:	441d      	add	r5, r3
 80094e0:	4473      	add	r3, lr
 80094e2:	469e      	mov	lr, r3
 80094e4:	462e      	mov	r6, r5
 80094e6:	4566      	cmp	r6, ip
 80094e8:	d30e      	bcc.n	8009508 <__mdiff+0xec>
 80094ea:	f10c 0203 	add.w	r2, ip, #3
 80094ee:	1b52      	subs	r2, r2, r5
 80094f0:	f022 0203 	bic.w	r2, r2, #3
 80094f4:	3d03      	subs	r5, #3
 80094f6:	45ac      	cmp	ip, r5
 80094f8:	bf38      	it	cc
 80094fa:	2200      	movcc	r2, #0
 80094fc:	441a      	add	r2, r3
 80094fe:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009502:	b17b      	cbz	r3, 8009524 <__mdiff+0x108>
 8009504:	6107      	str	r7, [r0, #16]
 8009506:	e7a3      	b.n	8009450 <__mdiff+0x34>
 8009508:	f856 8b04 	ldr.w	r8, [r6], #4
 800950c:	fa11 f288 	uxtah	r2, r1, r8
 8009510:	1414      	asrs	r4, r2, #16
 8009512:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009516:	b292      	uxth	r2, r2
 8009518:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800951c:	f84e 2b04 	str.w	r2, [lr], #4
 8009520:	1421      	asrs	r1, r4, #16
 8009522:	e7e0      	b.n	80094e6 <__mdiff+0xca>
 8009524:	3f01      	subs	r7, #1
 8009526:	e7ea      	b.n	80094fe <__mdiff+0xe2>
 8009528:	0800b270 	.word	0x0800b270
 800952c:	0800b2fc 	.word	0x0800b2fc

08009530 <__ulp>:
 8009530:	b082      	sub	sp, #8
 8009532:	ed8d 0b00 	vstr	d0, [sp]
 8009536:	9b01      	ldr	r3, [sp, #4]
 8009538:	4912      	ldr	r1, [pc, #72]	; (8009584 <__ulp+0x54>)
 800953a:	4019      	ands	r1, r3
 800953c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8009540:	2900      	cmp	r1, #0
 8009542:	dd05      	ble.n	8009550 <__ulp+0x20>
 8009544:	2200      	movs	r2, #0
 8009546:	460b      	mov	r3, r1
 8009548:	ec43 2b10 	vmov	d0, r2, r3
 800954c:	b002      	add	sp, #8
 800954e:	4770      	bx	lr
 8009550:	4249      	negs	r1, r1
 8009552:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8009556:	ea4f 5021 	mov.w	r0, r1, asr #20
 800955a:	f04f 0200 	mov.w	r2, #0
 800955e:	f04f 0300 	mov.w	r3, #0
 8009562:	da04      	bge.n	800956e <__ulp+0x3e>
 8009564:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8009568:	fa41 f300 	asr.w	r3, r1, r0
 800956c:	e7ec      	b.n	8009548 <__ulp+0x18>
 800956e:	f1a0 0114 	sub.w	r1, r0, #20
 8009572:	291e      	cmp	r1, #30
 8009574:	bfda      	itte	le
 8009576:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800957a:	fa20 f101 	lsrle.w	r1, r0, r1
 800957e:	2101      	movgt	r1, #1
 8009580:	460a      	mov	r2, r1
 8009582:	e7e1      	b.n	8009548 <__ulp+0x18>
 8009584:	7ff00000 	.word	0x7ff00000

08009588 <__b2d>:
 8009588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800958a:	6905      	ldr	r5, [r0, #16]
 800958c:	f100 0714 	add.w	r7, r0, #20
 8009590:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009594:	1f2e      	subs	r6, r5, #4
 8009596:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800959a:	4620      	mov	r0, r4
 800959c:	f7ff fd48 	bl	8009030 <__hi0bits>
 80095a0:	f1c0 0320 	rsb	r3, r0, #32
 80095a4:	280a      	cmp	r0, #10
 80095a6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8009624 <__b2d+0x9c>
 80095aa:	600b      	str	r3, [r1, #0]
 80095ac:	dc14      	bgt.n	80095d8 <__b2d+0x50>
 80095ae:	f1c0 0e0b 	rsb	lr, r0, #11
 80095b2:	fa24 f10e 	lsr.w	r1, r4, lr
 80095b6:	42b7      	cmp	r7, r6
 80095b8:	ea41 030c 	orr.w	r3, r1, ip
 80095bc:	bf34      	ite	cc
 80095be:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80095c2:	2100      	movcs	r1, #0
 80095c4:	3015      	adds	r0, #21
 80095c6:	fa04 f000 	lsl.w	r0, r4, r0
 80095ca:	fa21 f10e 	lsr.w	r1, r1, lr
 80095ce:	ea40 0201 	orr.w	r2, r0, r1
 80095d2:	ec43 2b10 	vmov	d0, r2, r3
 80095d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095d8:	42b7      	cmp	r7, r6
 80095da:	bf3a      	itte	cc
 80095dc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80095e0:	f1a5 0608 	subcc.w	r6, r5, #8
 80095e4:	2100      	movcs	r1, #0
 80095e6:	380b      	subs	r0, #11
 80095e8:	d017      	beq.n	800961a <__b2d+0x92>
 80095ea:	f1c0 0c20 	rsb	ip, r0, #32
 80095ee:	fa04 f500 	lsl.w	r5, r4, r0
 80095f2:	42be      	cmp	r6, r7
 80095f4:	fa21 f40c 	lsr.w	r4, r1, ip
 80095f8:	ea45 0504 	orr.w	r5, r5, r4
 80095fc:	bf8c      	ite	hi
 80095fe:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8009602:	2400      	movls	r4, #0
 8009604:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8009608:	fa01 f000 	lsl.w	r0, r1, r0
 800960c:	fa24 f40c 	lsr.w	r4, r4, ip
 8009610:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009614:	ea40 0204 	orr.w	r2, r0, r4
 8009618:	e7db      	b.n	80095d2 <__b2d+0x4a>
 800961a:	ea44 030c 	orr.w	r3, r4, ip
 800961e:	460a      	mov	r2, r1
 8009620:	e7d7      	b.n	80095d2 <__b2d+0x4a>
 8009622:	bf00      	nop
 8009624:	3ff00000 	.word	0x3ff00000

08009628 <__d2b>:
 8009628:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800962c:	4689      	mov	r9, r1
 800962e:	2101      	movs	r1, #1
 8009630:	ec57 6b10 	vmov	r6, r7, d0
 8009634:	4690      	mov	r8, r2
 8009636:	f7ff fc09 	bl	8008e4c <_Balloc>
 800963a:	4604      	mov	r4, r0
 800963c:	b930      	cbnz	r0, 800964c <__d2b+0x24>
 800963e:	4602      	mov	r2, r0
 8009640:	4b25      	ldr	r3, [pc, #148]	; (80096d8 <__d2b+0xb0>)
 8009642:	4826      	ldr	r0, [pc, #152]	; (80096dc <__d2b+0xb4>)
 8009644:	f240 310a 	movw	r1, #778	; 0x30a
 8009648:	f000 fb50 	bl	8009cec <__assert_func>
 800964c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009650:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009654:	bb35      	cbnz	r5, 80096a4 <__d2b+0x7c>
 8009656:	2e00      	cmp	r6, #0
 8009658:	9301      	str	r3, [sp, #4]
 800965a:	d028      	beq.n	80096ae <__d2b+0x86>
 800965c:	4668      	mov	r0, sp
 800965e:	9600      	str	r6, [sp, #0]
 8009660:	f7ff fd06 	bl	8009070 <__lo0bits>
 8009664:	9900      	ldr	r1, [sp, #0]
 8009666:	b300      	cbz	r0, 80096aa <__d2b+0x82>
 8009668:	9a01      	ldr	r2, [sp, #4]
 800966a:	f1c0 0320 	rsb	r3, r0, #32
 800966e:	fa02 f303 	lsl.w	r3, r2, r3
 8009672:	430b      	orrs	r3, r1
 8009674:	40c2      	lsrs	r2, r0
 8009676:	6163      	str	r3, [r4, #20]
 8009678:	9201      	str	r2, [sp, #4]
 800967a:	9b01      	ldr	r3, [sp, #4]
 800967c:	61a3      	str	r3, [r4, #24]
 800967e:	2b00      	cmp	r3, #0
 8009680:	bf14      	ite	ne
 8009682:	2202      	movne	r2, #2
 8009684:	2201      	moveq	r2, #1
 8009686:	6122      	str	r2, [r4, #16]
 8009688:	b1d5      	cbz	r5, 80096c0 <__d2b+0x98>
 800968a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800968e:	4405      	add	r5, r0
 8009690:	f8c9 5000 	str.w	r5, [r9]
 8009694:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009698:	f8c8 0000 	str.w	r0, [r8]
 800969c:	4620      	mov	r0, r4
 800969e:	b003      	add	sp, #12
 80096a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80096a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80096a8:	e7d5      	b.n	8009656 <__d2b+0x2e>
 80096aa:	6161      	str	r1, [r4, #20]
 80096ac:	e7e5      	b.n	800967a <__d2b+0x52>
 80096ae:	a801      	add	r0, sp, #4
 80096b0:	f7ff fcde 	bl	8009070 <__lo0bits>
 80096b4:	9b01      	ldr	r3, [sp, #4]
 80096b6:	6163      	str	r3, [r4, #20]
 80096b8:	2201      	movs	r2, #1
 80096ba:	6122      	str	r2, [r4, #16]
 80096bc:	3020      	adds	r0, #32
 80096be:	e7e3      	b.n	8009688 <__d2b+0x60>
 80096c0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80096c4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80096c8:	f8c9 0000 	str.w	r0, [r9]
 80096cc:	6918      	ldr	r0, [r3, #16]
 80096ce:	f7ff fcaf 	bl	8009030 <__hi0bits>
 80096d2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80096d6:	e7df      	b.n	8009698 <__d2b+0x70>
 80096d8:	0800b270 	.word	0x0800b270
 80096dc:	0800b2fc 	.word	0x0800b2fc

080096e0 <__ratio>:
 80096e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096e4:	4688      	mov	r8, r1
 80096e6:	4669      	mov	r1, sp
 80096e8:	4681      	mov	r9, r0
 80096ea:	f7ff ff4d 	bl	8009588 <__b2d>
 80096ee:	a901      	add	r1, sp, #4
 80096f0:	4640      	mov	r0, r8
 80096f2:	ec55 4b10 	vmov	r4, r5, d0
 80096f6:	f7ff ff47 	bl	8009588 <__b2d>
 80096fa:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80096fe:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009702:	eba3 0c02 	sub.w	ip, r3, r2
 8009706:	e9dd 3200 	ldrd	r3, r2, [sp]
 800970a:	1a9b      	subs	r3, r3, r2
 800970c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009710:	ec51 0b10 	vmov	r0, r1, d0
 8009714:	2b00      	cmp	r3, #0
 8009716:	bfd6      	itet	le
 8009718:	460a      	movle	r2, r1
 800971a:	462a      	movgt	r2, r5
 800971c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009720:	468b      	mov	fp, r1
 8009722:	462f      	mov	r7, r5
 8009724:	bfd4      	ite	le
 8009726:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800972a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800972e:	4620      	mov	r0, r4
 8009730:	ee10 2a10 	vmov	r2, s0
 8009734:	465b      	mov	r3, fp
 8009736:	4639      	mov	r1, r7
 8009738:	f7f7 f888 	bl	800084c <__aeabi_ddiv>
 800973c:	ec41 0b10 	vmov	d0, r0, r1
 8009740:	b003      	add	sp, #12
 8009742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009746 <__copybits>:
 8009746:	3901      	subs	r1, #1
 8009748:	b570      	push	{r4, r5, r6, lr}
 800974a:	1149      	asrs	r1, r1, #5
 800974c:	6914      	ldr	r4, [r2, #16]
 800974e:	3101      	adds	r1, #1
 8009750:	f102 0314 	add.w	r3, r2, #20
 8009754:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009758:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800975c:	1f05      	subs	r5, r0, #4
 800975e:	42a3      	cmp	r3, r4
 8009760:	d30c      	bcc.n	800977c <__copybits+0x36>
 8009762:	1aa3      	subs	r3, r4, r2
 8009764:	3b11      	subs	r3, #17
 8009766:	f023 0303 	bic.w	r3, r3, #3
 800976a:	3211      	adds	r2, #17
 800976c:	42a2      	cmp	r2, r4
 800976e:	bf88      	it	hi
 8009770:	2300      	movhi	r3, #0
 8009772:	4418      	add	r0, r3
 8009774:	2300      	movs	r3, #0
 8009776:	4288      	cmp	r0, r1
 8009778:	d305      	bcc.n	8009786 <__copybits+0x40>
 800977a:	bd70      	pop	{r4, r5, r6, pc}
 800977c:	f853 6b04 	ldr.w	r6, [r3], #4
 8009780:	f845 6f04 	str.w	r6, [r5, #4]!
 8009784:	e7eb      	b.n	800975e <__copybits+0x18>
 8009786:	f840 3b04 	str.w	r3, [r0], #4
 800978a:	e7f4      	b.n	8009776 <__copybits+0x30>

0800978c <__any_on>:
 800978c:	f100 0214 	add.w	r2, r0, #20
 8009790:	6900      	ldr	r0, [r0, #16]
 8009792:	114b      	asrs	r3, r1, #5
 8009794:	4298      	cmp	r0, r3
 8009796:	b510      	push	{r4, lr}
 8009798:	db11      	blt.n	80097be <__any_on+0x32>
 800979a:	dd0a      	ble.n	80097b2 <__any_on+0x26>
 800979c:	f011 011f 	ands.w	r1, r1, #31
 80097a0:	d007      	beq.n	80097b2 <__any_on+0x26>
 80097a2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80097a6:	fa24 f001 	lsr.w	r0, r4, r1
 80097aa:	fa00 f101 	lsl.w	r1, r0, r1
 80097ae:	428c      	cmp	r4, r1
 80097b0:	d10b      	bne.n	80097ca <__any_on+0x3e>
 80097b2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80097b6:	4293      	cmp	r3, r2
 80097b8:	d803      	bhi.n	80097c2 <__any_on+0x36>
 80097ba:	2000      	movs	r0, #0
 80097bc:	bd10      	pop	{r4, pc}
 80097be:	4603      	mov	r3, r0
 80097c0:	e7f7      	b.n	80097b2 <__any_on+0x26>
 80097c2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80097c6:	2900      	cmp	r1, #0
 80097c8:	d0f5      	beq.n	80097b6 <__any_on+0x2a>
 80097ca:	2001      	movs	r0, #1
 80097cc:	e7f6      	b.n	80097bc <__any_on+0x30>

080097ce <_calloc_r>:
 80097ce:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80097d0:	fba1 2402 	umull	r2, r4, r1, r2
 80097d4:	b94c      	cbnz	r4, 80097ea <_calloc_r+0x1c>
 80097d6:	4611      	mov	r1, r2
 80097d8:	9201      	str	r2, [sp, #4]
 80097da:	f000 f87b 	bl	80098d4 <_malloc_r>
 80097de:	9a01      	ldr	r2, [sp, #4]
 80097e0:	4605      	mov	r5, r0
 80097e2:	b930      	cbnz	r0, 80097f2 <_calloc_r+0x24>
 80097e4:	4628      	mov	r0, r5
 80097e6:	b003      	add	sp, #12
 80097e8:	bd30      	pop	{r4, r5, pc}
 80097ea:	220c      	movs	r2, #12
 80097ec:	6002      	str	r2, [r0, #0]
 80097ee:	2500      	movs	r5, #0
 80097f0:	e7f8      	b.n	80097e4 <_calloc_r+0x16>
 80097f2:	4621      	mov	r1, r4
 80097f4:	f7fc fbbe 	bl	8005f74 <memset>
 80097f8:	e7f4      	b.n	80097e4 <_calloc_r+0x16>
	...

080097fc <_free_r>:
 80097fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80097fe:	2900      	cmp	r1, #0
 8009800:	d044      	beq.n	800988c <_free_r+0x90>
 8009802:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009806:	9001      	str	r0, [sp, #4]
 8009808:	2b00      	cmp	r3, #0
 800980a:	f1a1 0404 	sub.w	r4, r1, #4
 800980e:	bfb8      	it	lt
 8009810:	18e4      	addlt	r4, r4, r3
 8009812:	f000 fab5 	bl	8009d80 <__malloc_lock>
 8009816:	4a1e      	ldr	r2, [pc, #120]	; (8009890 <_free_r+0x94>)
 8009818:	9801      	ldr	r0, [sp, #4]
 800981a:	6813      	ldr	r3, [r2, #0]
 800981c:	b933      	cbnz	r3, 800982c <_free_r+0x30>
 800981e:	6063      	str	r3, [r4, #4]
 8009820:	6014      	str	r4, [r2, #0]
 8009822:	b003      	add	sp, #12
 8009824:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009828:	f000 bab0 	b.w	8009d8c <__malloc_unlock>
 800982c:	42a3      	cmp	r3, r4
 800982e:	d908      	bls.n	8009842 <_free_r+0x46>
 8009830:	6825      	ldr	r5, [r4, #0]
 8009832:	1961      	adds	r1, r4, r5
 8009834:	428b      	cmp	r3, r1
 8009836:	bf01      	itttt	eq
 8009838:	6819      	ldreq	r1, [r3, #0]
 800983a:	685b      	ldreq	r3, [r3, #4]
 800983c:	1949      	addeq	r1, r1, r5
 800983e:	6021      	streq	r1, [r4, #0]
 8009840:	e7ed      	b.n	800981e <_free_r+0x22>
 8009842:	461a      	mov	r2, r3
 8009844:	685b      	ldr	r3, [r3, #4]
 8009846:	b10b      	cbz	r3, 800984c <_free_r+0x50>
 8009848:	42a3      	cmp	r3, r4
 800984a:	d9fa      	bls.n	8009842 <_free_r+0x46>
 800984c:	6811      	ldr	r1, [r2, #0]
 800984e:	1855      	adds	r5, r2, r1
 8009850:	42a5      	cmp	r5, r4
 8009852:	d10b      	bne.n	800986c <_free_r+0x70>
 8009854:	6824      	ldr	r4, [r4, #0]
 8009856:	4421      	add	r1, r4
 8009858:	1854      	adds	r4, r2, r1
 800985a:	42a3      	cmp	r3, r4
 800985c:	6011      	str	r1, [r2, #0]
 800985e:	d1e0      	bne.n	8009822 <_free_r+0x26>
 8009860:	681c      	ldr	r4, [r3, #0]
 8009862:	685b      	ldr	r3, [r3, #4]
 8009864:	6053      	str	r3, [r2, #4]
 8009866:	4421      	add	r1, r4
 8009868:	6011      	str	r1, [r2, #0]
 800986a:	e7da      	b.n	8009822 <_free_r+0x26>
 800986c:	d902      	bls.n	8009874 <_free_r+0x78>
 800986e:	230c      	movs	r3, #12
 8009870:	6003      	str	r3, [r0, #0]
 8009872:	e7d6      	b.n	8009822 <_free_r+0x26>
 8009874:	6825      	ldr	r5, [r4, #0]
 8009876:	1961      	adds	r1, r4, r5
 8009878:	428b      	cmp	r3, r1
 800987a:	bf04      	itt	eq
 800987c:	6819      	ldreq	r1, [r3, #0]
 800987e:	685b      	ldreq	r3, [r3, #4]
 8009880:	6063      	str	r3, [r4, #4]
 8009882:	bf04      	itt	eq
 8009884:	1949      	addeq	r1, r1, r5
 8009886:	6021      	streq	r1, [r4, #0]
 8009888:	6054      	str	r4, [r2, #4]
 800988a:	e7ca      	b.n	8009822 <_free_r+0x26>
 800988c:	b003      	add	sp, #12
 800988e:	bd30      	pop	{r4, r5, pc}
 8009890:	2000037c 	.word	0x2000037c

08009894 <sbrk_aligned>:
 8009894:	b570      	push	{r4, r5, r6, lr}
 8009896:	4e0e      	ldr	r6, [pc, #56]	; (80098d0 <sbrk_aligned+0x3c>)
 8009898:	460c      	mov	r4, r1
 800989a:	6831      	ldr	r1, [r6, #0]
 800989c:	4605      	mov	r5, r0
 800989e:	b911      	cbnz	r1, 80098a6 <sbrk_aligned+0x12>
 80098a0:	f000 f9f2 	bl	8009c88 <_sbrk_r>
 80098a4:	6030      	str	r0, [r6, #0]
 80098a6:	4621      	mov	r1, r4
 80098a8:	4628      	mov	r0, r5
 80098aa:	f000 f9ed 	bl	8009c88 <_sbrk_r>
 80098ae:	1c43      	adds	r3, r0, #1
 80098b0:	d00a      	beq.n	80098c8 <sbrk_aligned+0x34>
 80098b2:	1cc4      	adds	r4, r0, #3
 80098b4:	f024 0403 	bic.w	r4, r4, #3
 80098b8:	42a0      	cmp	r0, r4
 80098ba:	d007      	beq.n	80098cc <sbrk_aligned+0x38>
 80098bc:	1a21      	subs	r1, r4, r0
 80098be:	4628      	mov	r0, r5
 80098c0:	f000 f9e2 	bl	8009c88 <_sbrk_r>
 80098c4:	3001      	adds	r0, #1
 80098c6:	d101      	bne.n	80098cc <sbrk_aligned+0x38>
 80098c8:	f04f 34ff 	mov.w	r4, #4294967295
 80098cc:	4620      	mov	r0, r4
 80098ce:	bd70      	pop	{r4, r5, r6, pc}
 80098d0:	20000380 	.word	0x20000380

080098d4 <_malloc_r>:
 80098d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098d8:	1ccd      	adds	r5, r1, #3
 80098da:	f025 0503 	bic.w	r5, r5, #3
 80098de:	3508      	adds	r5, #8
 80098e0:	2d0c      	cmp	r5, #12
 80098e2:	bf38      	it	cc
 80098e4:	250c      	movcc	r5, #12
 80098e6:	2d00      	cmp	r5, #0
 80098e8:	4607      	mov	r7, r0
 80098ea:	db01      	blt.n	80098f0 <_malloc_r+0x1c>
 80098ec:	42a9      	cmp	r1, r5
 80098ee:	d905      	bls.n	80098fc <_malloc_r+0x28>
 80098f0:	230c      	movs	r3, #12
 80098f2:	603b      	str	r3, [r7, #0]
 80098f4:	2600      	movs	r6, #0
 80098f6:	4630      	mov	r0, r6
 80098f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098fc:	4e2e      	ldr	r6, [pc, #184]	; (80099b8 <_malloc_r+0xe4>)
 80098fe:	f000 fa3f 	bl	8009d80 <__malloc_lock>
 8009902:	6833      	ldr	r3, [r6, #0]
 8009904:	461c      	mov	r4, r3
 8009906:	bb34      	cbnz	r4, 8009956 <_malloc_r+0x82>
 8009908:	4629      	mov	r1, r5
 800990a:	4638      	mov	r0, r7
 800990c:	f7ff ffc2 	bl	8009894 <sbrk_aligned>
 8009910:	1c43      	adds	r3, r0, #1
 8009912:	4604      	mov	r4, r0
 8009914:	d14d      	bne.n	80099b2 <_malloc_r+0xde>
 8009916:	6834      	ldr	r4, [r6, #0]
 8009918:	4626      	mov	r6, r4
 800991a:	2e00      	cmp	r6, #0
 800991c:	d140      	bne.n	80099a0 <_malloc_r+0xcc>
 800991e:	6823      	ldr	r3, [r4, #0]
 8009920:	4631      	mov	r1, r6
 8009922:	4638      	mov	r0, r7
 8009924:	eb04 0803 	add.w	r8, r4, r3
 8009928:	f000 f9ae 	bl	8009c88 <_sbrk_r>
 800992c:	4580      	cmp	r8, r0
 800992e:	d13a      	bne.n	80099a6 <_malloc_r+0xd2>
 8009930:	6821      	ldr	r1, [r4, #0]
 8009932:	3503      	adds	r5, #3
 8009934:	1a6d      	subs	r5, r5, r1
 8009936:	f025 0503 	bic.w	r5, r5, #3
 800993a:	3508      	adds	r5, #8
 800993c:	2d0c      	cmp	r5, #12
 800993e:	bf38      	it	cc
 8009940:	250c      	movcc	r5, #12
 8009942:	4629      	mov	r1, r5
 8009944:	4638      	mov	r0, r7
 8009946:	f7ff ffa5 	bl	8009894 <sbrk_aligned>
 800994a:	3001      	adds	r0, #1
 800994c:	d02b      	beq.n	80099a6 <_malloc_r+0xd2>
 800994e:	6823      	ldr	r3, [r4, #0]
 8009950:	442b      	add	r3, r5
 8009952:	6023      	str	r3, [r4, #0]
 8009954:	e00e      	b.n	8009974 <_malloc_r+0xa0>
 8009956:	6822      	ldr	r2, [r4, #0]
 8009958:	1b52      	subs	r2, r2, r5
 800995a:	d41e      	bmi.n	800999a <_malloc_r+0xc6>
 800995c:	2a0b      	cmp	r2, #11
 800995e:	d916      	bls.n	800998e <_malloc_r+0xba>
 8009960:	1961      	adds	r1, r4, r5
 8009962:	42a3      	cmp	r3, r4
 8009964:	6025      	str	r5, [r4, #0]
 8009966:	bf18      	it	ne
 8009968:	6059      	strne	r1, [r3, #4]
 800996a:	6863      	ldr	r3, [r4, #4]
 800996c:	bf08      	it	eq
 800996e:	6031      	streq	r1, [r6, #0]
 8009970:	5162      	str	r2, [r4, r5]
 8009972:	604b      	str	r3, [r1, #4]
 8009974:	4638      	mov	r0, r7
 8009976:	f104 060b 	add.w	r6, r4, #11
 800997a:	f000 fa07 	bl	8009d8c <__malloc_unlock>
 800997e:	f026 0607 	bic.w	r6, r6, #7
 8009982:	1d23      	adds	r3, r4, #4
 8009984:	1af2      	subs	r2, r6, r3
 8009986:	d0b6      	beq.n	80098f6 <_malloc_r+0x22>
 8009988:	1b9b      	subs	r3, r3, r6
 800998a:	50a3      	str	r3, [r4, r2]
 800998c:	e7b3      	b.n	80098f6 <_malloc_r+0x22>
 800998e:	6862      	ldr	r2, [r4, #4]
 8009990:	42a3      	cmp	r3, r4
 8009992:	bf0c      	ite	eq
 8009994:	6032      	streq	r2, [r6, #0]
 8009996:	605a      	strne	r2, [r3, #4]
 8009998:	e7ec      	b.n	8009974 <_malloc_r+0xa0>
 800999a:	4623      	mov	r3, r4
 800999c:	6864      	ldr	r4, [r4, #4]
 800999e:	e7b2      	b.n	8009906 <_malloc_r+0x32>
 80099a0:	4634      	mov	r4, r6
 80099a2:	6876      	ldr	r6, [r6, #4]
 80099a4:	e7b9      	b.n	800991a <_malloc_r+0x46>
 80099a6:	230c      	movs	r3, #12
 80099a8:	603b      	str	r3, [r7, #0]
 80099aa:	4638      	mov	r0, r7
 80099ac:	f000 f9ee 	bl	8009d8c <__malloc_unlock>
 80099b0:	e7a1      	b.n	80098f6 <_malloc_r+0x22>
 80099b2:	6025      	str	r5, [r4, #0]
 80099b4:	e7de      	b.n	8009974 <_malloc_r+0xa0>
 80099b6:	bf00      	nop
 80099b8:	2000037c 	.word	0x2000037c

080099bc <__ssputs_r>:
 80099bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099c0:	688e      	ldr	r6, [r1, #8]
 80099c2:	429e      	cmp	r6, r3
 80099c4:	4682      	mov	sl, r0
 80099c6:	460c      	mov	r4, r1
 80099c8:	4690      	mov	r8, r2
 80099ca:	461f      	mov	r7, r3
 80099cc:	d838      	bhi.n	8009a40 <__ssputs_r+0x84>
 80099ce:	898a      	ldrh	r2, [r1, #12]
 80099d0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80099d4:	d032      	beq.n	8009a3c <__ssputs_r+0x80>
 80099d6:	6825      	ldr	r5, [r4, #0]
 80099d8:	6909      	ldr	r1, [r1, #16]
 80099da:	eba5 0901 	sub.w	r9, r5, r1
 80099de:	6965      	ldr	r5, [r4, #20]
 80099e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80099e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80099e8:	3301      	adds	r3, #1
 80099ea:	444b      	add	r3, r9
 80099ec:	106d      	asrs	r5, r5, #1
 80099ee:	429d      	cmp	r5, r3
 80099f0:	bf38      	it	cc
 80099f2:	461d      	movcc	r5, r3
 80099f4:	0553      	lsls	r3, r2, #21
 80099f6:	d531      	bpl.n	8009a5c <__ssputs_r+0xa0>
 80099f8:	4629      	mov	r1, r5
 80099fa:	f7ff ff6b 	bl	80098d4 <_malloc_r>
 80099fe:	4606      	mov	r6, r0
 8009a00:	b950      	cbnz	r0, 8009a18 <__ssputs_r+0x5c>
 8009a02:	230c      	movs	r3, #12
 8009a04:	f8ca 3000 	str.w	r3, [sl]
 8009a08:	89a3      	ldrh	r3, [r4, #12]
 8009a0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a0e:	81a3      	strh	r3, [r4, #12]
 8009a10:	f04f 30ff 	mov.w	r0, #4294967295
 8009a14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a18:	6921      	ldr	r1, [r4, #16]
 8009a1a:	464a      	mov	r2, r9
 8009a1c:	f7ff fa08 	bl	8008e30 <memcpy>
 8009a20:	89a3      	ldrh	r3, [r4, #12]
 8009a22:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009a26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a2a:	81a3      	strh	r3, [r4, #12]
 8009a2c:	6126      	str	r6, [r4, #16]
 8009a2e:	6165      	str	r5, [r4, #20]
 8009a30:	444e      	add	r6, r9
 8009a32:	eba5 0509 	sub.w	r5, r5, r9
 8009a36:	6026      	str	r6, [r4, #0]
 8009a38:	60a5      	str	r5, [r4, #8]
 8009a3a:	463e      	mov	r6, r7
 8009a3c:	42be      	cmp	r6, r7
 8009a3e:	d900      	bls.n	8009a42 <__ssputs_r+0x86>
 8009a40:	463e      	mov	r6, r7
 8009a42:	6820      	ldr	r0, [r4, #0]
 8009a44:	4632      	mov	r2, r6
 8009a46:	4641      	mov	r1, r8
 8009a48:	f000 f980 	bl	8009d4c <memmove>
 8009a4c:	68a3      	ldr	r3, [r4, #8]
 8009a4e:	1b9b      	subs	r3, r3, r6
 8009a50:	60a3      	str	r3, [r4, #8]
 8009a52:	6823      	ldr	r3, [r4, #0]
 8009a54:	4433      	add	r3, r6
 8009a56:	6023      	str	r3, [r4, #0]
 8009a58:	2000      	movs	r0, #0
 8009a5a:	e7db      	b.n	8009a14 <__ssputs_r+0x58>
 8009a5c:	462a      	mov	r2, r5
 8009a5e:	f000 f99b 	bl	8009d98 <_realloc_r>
 8009a62:	4606      	mov	r6, r0
 8009a64:	2800      	cmp	r0, #0
 8009a66:	d1e1      	bne.n	8009a2c <__ssputs_r+0x70>
 8009a68:	6921      	ldr	r1, [r4, #16]
 8009a6a:	4650      	mov	r0, sl
 8009a6c:	f7ff fec6 	bl	80097fc <_free_r>
 8009a70:	e7c7      	b.n	8009a02 <__ssputs_r+0x46>
	...

08009a74 <_svfiprintf_r>:
 8009a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a78:	4698      	mov	r8, r3
 8009a7a:	898b      	ldrh	r3, [r1, #12]
 8009a7c:	061b      	lsls	r3, r3, #24
 8009a7e:	b09d      	sub	sp, #116	; 0x74
 8009a80:	4607      	mov	r7, r0
 8009a82:	460d      	mov	r5, r1
 8009a84:	4614      	mov	r4, r2
 8009a86:	d50e      	bpl.n	8009aa6 <_svfiprintf_r+0x32>
 8009a88:	690b      	ldr	r3, [r1, #16]
 8009a8a:	b963      	cbnz	r3, 8009aa6 <_svfiprintf_r+0x32>
 8009a8c:	2140      	movs	r1, #64	; 0x40
 8009a8e:	f7ff ff21 	bl	80098d4 <_malloc_r>
 8009a92:	6028      	str	r0, [r5, #0]
 8009a94:	6128      	str	r0, [r5, #16]
 8009a96:	b920      	cbnz	r0, 8009aa2 <_svfiprintf_r+0x2e>
 8009a98:	230c      	movs	r3, #12
 8009a9a:	603b      	str	r3, [r7, #0]
 8009a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8009aa0:	e0d1      	b.n	8009c46 <_svfiprintf_r+0x1d2>
 8009aa2:	2340      	movs	r3, #64	; 0x40
 8009aa4:	616b      	str	r3, [r5, #20]
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	9309      	str	r3, [sp, #36]	; 0x24
 8009aaa:	2320      	movs	r3, #32
 8009aac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009ab0:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ab4:	2330      	movs	r3, #48	; 0x30
 8009ab6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009c60 <_svfiprintf_r+0x1ec>
 8009aba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009abe:	f04f 0901 	mov.w	r9, #1
 8009ac2:	4623      	mov	r3, r4
 8009ac4:	469a      	mov	sl, r3
 8009ac6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009aca:	b10a      	cbz	r2, 8009ad0 <_svfiprintf_r+0x5c>
 8009acc:	2a25      	cmp	r2, #37	; 0x25
 8009ace:	d1f9      	bne.n	8009ac4 <_svfiprintf_r+0x50>
 8009ad0:	ebba 0b04 	subs.w	fp, sl, r4
 8009ad4:	d00b      	beq.n	8009aee <_svfiprintf_r+0x7a>
 8009ad6:	465b      	mov	r3, fp
 8009ad8:	4622      	mov	r2, r4
 8009ada:	4629      	mov	r1, r5
 8009adc:	4638      	mov	r0, r7
 8009ade:	f7ff ff6d 	bl	80099bc <__ssputs_r>
 8009ae2:	3001      	adds	r0, #1
 8009ae4:	f000 80aa 	beq.w	8009c3c <_svfiprintf_r+0x1c8>
 8009ae8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009aea:	445a      	add	r2, fp
 8009aec:	9209      	str	r2, [sp, #36]	; 0x24
 8009aee:	f89a 3000 	ldrb.w	r3, [sl]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	f000 80a2 	beq.w	8009c3c <_svfiprintf_r+0x1c8>
 8009af8:	2300      	movs	r3, #0
 8009afa:	f04f 32ff 	mov.w	r2, #4294967295
 8009afe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b02:	f10a 0a01 	add.w	sl, sl, #1
 8009b06:	9304      	str	r3, [sp, #16]
 8009b08:	9307      	str	r3, [sp, #28]
 8009b0a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009b0e:	931a      	str	r3, [sp, #104]	; 0x68
 8009b10:	4654      	mov	r4, sl
 8009b12:	2205      	movs	r2, #5
 8009b14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b18:	4851      	ldr	r0, [pc, #324]	; (8009c60 <_svfiprintf_r+0x1ec>)
 8009b1a:	f7f6 fb61 	bl	80001e0 <memchr>
 8009b1e:	9a04      	ldr	r2, [sp, #16]
 8009b20:	b9d8      	cbnz	r0, 8009b5a <_svfiprintf_r+0xe6>
 8009b22:	06d0      	lsls	r0, r2, #27
 8009b24:	bf44      	itt	mi
 8009b26:	2320      	movmi	r3, #32
 8009b28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b2c:	0711      	lsls	r1, r2, #28
 8009b2e:	bf44      	itt	mi
 8009b30:	232b      	movmi	r3, #43	; 0x2b
 8009b32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b36:	f89a 3000 	ldrb.w	r3, [sl]
 8009b3a:	2b2a      	cmp	r3, #42	; 0x2a
 8009b3c:	d015      	beq.n	8009b6a <_svfiprintf_r+0xf6>
 8009b3e:	9a07      	ldr	r2, [sp, #28]
 8009b40:	4654      	mov	r4, sl
 8009b42:	2000      	movs	r0, #0
 8009b44:	f04f 0c0a 	mov.w	ip, #10
 8009b48:	4621      	mov	r1, r4
 8009b4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b4e:	3b30      	subs	r3, #48	; 0x30
 8009b50:	2b09      	cmp	r3, #9
 8009b52:	d94e      	bls.n	8009bf2 <_svfiprintf_r+0x17e>
 8009b54:	b1b0      	cbz	r0, 8009b84 <_svfiprintf_r+0x110>
 8009b56:	9207      	str	r2, [sp, #28]
 8009b58:	e014      	b.n	8009b84 <_svfiprintf_r+0x110>
 8009b5a:	eba0 0308 	sub.w	r3, r0, r8
 8009b5e:	fa09 f303 	lsl.w	r3, r9, r3
 8009b62:	4313      	orrs	r3, r2
 8009b64:	9304      	str	r3, [sp, #16]
 8009b66:	46a2      	mov	sl, r4
 8009b68:	e7d2      	b.n	8009b10 <_svfiprintf_r+0x9c>
 8009b6a:	9b03      	ldr	r3, [sp, #12]
 8009b6c:	1d19      	adds	r1, r3, #4
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	9103      	str	r1, [sp, #12]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	bfbb      	ittet	lt
 8009b76:	425b      	neglt	r3, r3
 8009b78:	f042 0202 	orrlt.w	r2, r2, #2
 8009b7c:	9307      	strge	r3, [sp, #28]
 8009b7e:	9307      	strlt	r3, [sp, #28]
 8009b80:	bfb8      	it	lt
 8009b82:	9204      	strlt	r2, [sp, #16]
 8009b84:	7823      	ldrb	r3, [r4, #0]
 8009b86:	2b2e      	cmp	r3, #46	; 0x2e
 8009b88:	d10c      	bne.n	8009ba4 <_svfiprintf_r+0x130>
 8009b8a:	7863      	ldrb	r3, [r4, #1]
 8009b8c:	2b2a      	cmp	r3, #42	; 0x2a
 8009b8e:	d135      	bne.n	8009bfc <_svfiprintf_r+0x188>
 8009b90:	9b03      	ldr	r3, [sp, #12]
 8009b92:	1d1a      	adds	r2, r3, #4
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	9203      	str	r2, [sp, #12]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	bfb8      	it	lt
 8009b9c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009ba0:	3402      	adds	r4, #2
 8009ba2:	9305      	str	r3, [sp, #20]
 8009ba4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009c70 <_svfiprintf_r+0x1fc>
 8009ba8:	7821      	ldrb	r1, [r4, #0]
 8009baa:	2203      	movs	r2, #3
 8009bac:	4650      	mov	r0, sl
 8009bae:	f7f6 fb17 	bl	80001e0 <memchr>
 8009bb2:	b140      	cbz	r0, 8009bc6 <_svfiprintf_r+0x152>
 8009bb4:	2340      	movs	r3, #64	; 0x40
 8009bb6:	eba0 000a 	sub.w	r0, r0, sl
 8009bba:	fa03 f000 	lsl.w	r0, r3, r0
 8009bbe:	9b04      	ldr	r3, [sp, #16]
 8009bc0:	4303      	orrs	r3, r0
 8009bc2:	3401      	adds	r4, #1
 8009bc4:	9304      	str	r3, [sp, #16]
 8009bc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bca:	4826      	ldr	r0, [pc, #152]	; (8009c64 <_svfiprintf_r+0x1f0>)
 8009bcc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009bd0:	2206      	movs	r2, #6
 8009bd2:	f7f6 fb05 	bl	80001e0 <memchr>
 8009bd6:	2800      	cmp	r0, #0
 8009bd8:	d038      	beq.n	8009c4c <_svfiprintf_r+0x1d8>
 8009bda:	4b23      	ldr	r3, [pc, #140]	; (8009c68 <_svfiprintf_r+0x1f4>)
 8009bdc:	bb1b      	cbnz	r3, 8009c26 <_svfiprintf_r+0x1b2>
 8009bde:	9b03      	ldr	r3, [sp, #12]
 8009be0:	3307      	adds	r3, #7
 8009be2:	f023 0307 	bic.w	r3, r3, #7
 8009be6:	3308      	adds	r3, #8
 8009be8:	9303      	str	r3, [sp, #12]
 8009bea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bec:	4433      	add	r3, r6
 8009bee:	9309      	str	r3, [sp, #36]	; 0x24
 8009bf0:	e767      	b.n	8009ac2 <_svfiprintf_r+0x4e>
 8009bf2:	fb0c 3202 	mla	r2, ip, r2, r3
 8009bf6:	460c      	mov	r4, r1
 8009bf8:	2001      	movs	r0, #1
 8009bfa:	e7a5      	b.n	8009b48 <_svfiprintf_r+0xd4>
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	3401      	adds	r4, #1
 8009c00:	9305      	str	r3, [sp, #20]
 8009c02:	4619      	mov	r1, r3
 8009c04:	f04f 0c0a 	mov.w	ip, #10
 8009c08:	4620      	mov	r0, r4
 8009c0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c0e:	3a30      	subs	r2, #48	; 0x30
 8009c10:	2a09      	cmp	r2, #9
 8009c12:	d903      	bls.n	8009c1c <_svfiprintf_r+0x1a8>
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d0c5      	beq.n	8009ba4 <_svfiprintf_r+0x130>
 8009c18:	9105      	str	r1, [sp, #20]
 8009c1a:	e7c3      	b.n	8009ba4 <_svfiprintf_r+0x130>
 8009c1c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c20:	4604      	mov	r4, r0
 8009c22:	2301      	movs	r3, #1
 8009c24:	e7f0      	b.n	8009c08 <_svfiprintf_r+0x194>
 8009c26:	ab03      	add	r3, sp, #12
 8009c28:	9300      	str	r3, [sp, #0]
 8009c2a:	462a      	mov	r2, r5
 8009c2c:	4b0f      	ldr	r3, [pc, #60]	; (8009c6c <_svfiprintf_r+0x1f8>)
 8009c2e:	a904      	add	r1, sp, #16
 8009c30:	4638      	mov	r0, r7
 8009c32:	f7fc fa47 	bl	80060c4 <_printf_float>
 8009c36:	1c42      	adds	r2, r0, #1
 8009c38:	4606      	mov	r6, r0
 8009c3a:	d1d6      	bne.n	8009bea <_svfiprintf_r+0x176>
 8009c3c:	89ab      	ldrh	r3, [r5, #12]
 8009c3e:	065b      	lsls	r3, r3, #25
 8009c40:	f53f af2c 	bmi.w	8009a9c <_svfiprintf_r+0x28>
 8009c44:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009c46:	b01d      	add	sp, #116	; 0x74
 8009c48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c4c:	ab03      	add	r3, sp, #12
 8009c4e:	9300      	str	r3, [sp, #0]
 8009c50:	462a      	mov	r2, r5
 8009c52:	4b06      	ldr	r3, [pc, #24]	; (8009c6c <_svfiprintf_r+0x1f8>)
 8009c54:	a904      	add	r1, sp, #16
 8009c56:	4638      	mov	r0, r7
 8009c58:	f7fc fcd8 	bl	800660c <_printf_i>
 8009c5c:	e7eb      	b.n	8009c36 <_svfiprintf_r+0x1c2>
 8009c5e:	bf00      	nop
 8009c60:	0800b454 	.word	0x0800b454
 8009c64:	0800b45e 	.word	0x0800b45e
 8009c68:	080060c5 	.word	0x080060c5
 8009c6c:	080099bd 	.word	0x080099bd
 8009c70:	0800b45a 	.word	0x0800b45a
 8009c74:	00000000 	.word	0x00000000

08009c78 <nan>:
 8009c78:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009c80 <nan+0x8>
 8009c7c:	4770      	bx	lr
 8009c7e:	bf00      	nop
 8009c80:	00000000 	.word	0x00000000
 8009c84:	7ff80000 	.word	0x7ff80000

08009c88 <_sbrk_r>:
 8009c88:	b538      	push	{r3, r4, r5, lr}
 8009c8a:	4d06      	ldr	r5, [pc, #24]	; (8009ca4 <_sbrk_r+0x1c>)
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	4604      	mov	r4, r0
 8009c90:	4608      	mov	r0, r1
 8009c92:	602b      	str	r3, [r5, #0]
 8009c94:	f7f7 ff06 	bl	8001aa4 <_sbrk>
 8009c98:	1c43      	adds	r3, r0, #1
 8009c9a:	d102      	bne.n	8009ca2 <_sbrk_r+0x1a>
 8009c9c:	682b      	ldr	r3, [r5, #0]
 8009c9e:	b103      	cbz	r3, 8009ca2 <_sbrk_r+0x1a>
 8009ca0:	6023      	str	r3, [r4, #0]
 8009ca2:	bd38      	pop	{r3, r4, r5, pc}
 8009ca4:	20000384 	.word	0x20000384

08009ca8 <strncmp>:
 8009ca8:	b510      	push	{r4, lr}
 8009caa:	b17a      	cbz	r2, 8009ccc <strncmp+0x24>
 8009cac:	4603      	mov	r3, r0
 8009cae:	3901      	subs	r1, #1
 8009cb0:	1884      	adds	r4, r0, r2
 8009cb2:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009cb6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009cba:	4290      	cmp	r0, r2
 8009cbc:	d101      	bne.n	8009cc2 <strncmp+0x1a>
 8009cbe:	42a3      	cmp	r3, r4
 8009cc0:	d101      	bne.n	8009cc6 <strncmp+0x1e>
 8009cc2:	1a80      	subs	r0, r0, r2
 8009cc4:	bd10      	pop	{r4, pc}
 8009cc6:	2800      	cmp	r0, #0
 8009cc8:	d1f3      	bne.n	8009cb2 <strncmp+0xa>
 8009cca:	e7fa      	b.n	8009cc2 <strncmp+0x1a>
 8009ccc:	4610      	mov	r0, r2
 8009cce:	e7f9      	b.n	8009cc4 <strncmp+0x1c>

08009cd0 <__ascii_wctomb>:
 8009cd0:	b149      	cbz	r1, 8009ce6 <__ascii_wctomb+0x16>
 8009cd2:	2aff      	cmp	r2, #255	; 0xff
 8009cd4:	bf85      	ittet	hi
 8009cd6:	238a      	movhi	r3, #138	; 0x8a
 8009cd8:	6003      	strhi	r3, [r0, #0]
 8009cda:	700a      	strbls	r2, [r1, #0]
 8009cdc:	f04f 30ff 	movhi.w	r0, #4294967295
 8009ce0:	bf98      	it	ls
 8009ce2:	2001      	movls	r0, #1
 8009ce4:	4770      	bx	lr
 8009ce6:	4608      	mov	r0, r1
 8009ce8:	4770      	bx	lr
	...

08009cec <__assert_func>:
 8009cec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009cee:	4614      	mov	r4, r2
 8009cf0:	461a      	mov	r2, r3
 8009cf2:	4b09      	ldr	r3, [pc, #36]	; (8009d18 <__assert_func+0x2c>)
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	4605      	mov	r5, r0
 8009cf8:	68d8      	ldr	r0, [r3, #12]
 8009cfa:	b14c      	cbz	r4, 8009d10 <__assert_func+0x24>
 8009cfc:	4b07      	ldr	r3, [pc, #28]	; (8009d1c <__assert_func+0x30>)
 8009cfe:	9100      	str	r1, [sp, #0]
 8009d00:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009d04:	4906      	ldr	r1, [pc, #24]	; (8009d20 <__assert_func+0x34>)
 8009d06:	462b      	mov	r3, r5
 8009d08:	f000 f80e 	bl	8009d28 <fiprintf>
 8009d0c:	f000 fa8c 	bl	800a228 <abort>
 8009d10:	4b04      	ldr	r3, [pc, #16]	; (8009d24 <__assert_func+0x38>)
 8009d12:	461c      	mov	r4, r3
 8009d14:	e7f3      	b.n	8009cfe <__assert_func+0x12>
 8009d16:	bf00      	nop
 8009d18:	2000000c 	.word	0x2000000c
 8009d1c:	0800b465 	.word	0x0800b465
 8009d20:	0800b472 	.word	0x0800b472
 8009d24:	0800b4a0 	.word	0x0800b4a0

08009d28 <fiprintf>:
 8009d28:	b40e      	push	{r1, r2, r3}
 8009d2a:	b503      	push	{r0, r1, lr}
 8009d2c:	4601      	mov	r1, r0
 8009d2e:	ab03      	add	r3, sp, #12
 8009d30:	4805      	ldr	r0, [pc, #20]	; (8009d48 <fiprintf+0x20>)
 8009d32:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d36:	6800      	ldr	r0, [r0, #0]
 8009d38:	9301      	str	r3, [sp, #4]
 8009d3a:	f000 f885 	bl	8009e48 <_vfiprintf_r>
 8009d3e:	b002      	add	sp, #8
 8009d40:	f85d eb04 	ldr.w	lr, [sp], #4
 8009d44:	b003      	add	sp, #12
 8009d46:	4770      	bx	lr
 8009d48:	2000000c 	.word	0x2000000c

08009d4c <memmove>:
 8009d4c:	4288      	cmp	r0, r1
 8009d4e:	b510      	push	{r4, lr}
 8009d50:	eb01 0402 	add.w	r4, r1, r2
 8009d54:	d902      	bls.n	8009d5c <memmove+0x10>
 8009d56:	4284      	cmp	r4, r0
 8009d58:	4623      	mov	r3, r4
 8009d5a:	d807      	bhi.n	8009d6c <memmove+0x20>
 8009d5c:	1e43      	subs	r3, r0, #1
 8009d5e:	42a1      	cmp	r1, r4
 8009d60:	d008      	beq.n	8009d74 <memmove+0x28>
 8009d62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009d66:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009d6a:	e7f8      	b.n	8009d5e <memmove+0x12>
 8009d6c:	4402      	add	r2, r0
 8009d6e:	4601      	mov	r1, r0
 8009d70:	428a      	cmp	r2, r1
 8009d72:	d100      	bne.n	8009d76 <memmove+0x2a>
 8009d74:	bd10      	pop	{r4, pc}
 8009d76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009d7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009d7e:	e7f7      	b.n	8009d70 <memmove+0x24>

08009d80 <__malloc_lock>:
 8009d80:	4801      	ldr	r0, [pc, #4]	; (8009d88 <__malloc_lock+0x8>)
 8009d82:	f000 bc11 	b.w	800a5a8 <__retarget_lock_acquire_recursive>
 8009d86:	bf00      	nop
 8009d88:	20000388 	.word	0x20000388

08009d8c <__malloc_unlock>:
 8009d8c:	4801      	ldr	r0, [pc, #4]	; (8009d94 <__malloc_unlock+0x8>)
 8009d8e:	f000 bc0c 	b.w	800a5aa <__retarget_lock_release_recursive>
 8009d92:	bf00      	nop
 8009d94:	20000388 	.word	0x20000388

08009d98 <_realloc_r>:
 8009d98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d9c:	4680      	mov	r8, r0
 8009d9e:	4614      	mov	r4, r2
 8009da0:	460e      	mov	r6, r1
 8009da2:	b921      	cbnz	r1, 8009dae <_realloc_r+0x16>
 8009da4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009da8:	4611      	mov	r1, r2
 8009daa:	f7ff bd93 	b.w	80098d4 <_malloc_r>
 8009dae:	b92a      	cbnz	r2, 8009dbc <_realloc_r+0x24>
 8009db0:	f7ff fd24 	bl	80097fc <_free_r>
 8009db4:	4625      	mov	r5, r4
 8009db6:	4628      	mov	r0, r5
 8009db8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009dbc:	f000 fc5c 	bl	800a678 <_malloc_usable_size_r>
 8009dc0:	4284      	cmp	r4, r0
 8009dc2:	4607      	mov	r7, r0
 8009dc4:	d802      	bhi.n	8009dcc <_realloc_r+0x34>
 8009dc6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009dca:	d812      	bhi.n	8009df2 <_realloc_r+0x5a>
 8009dcc:	4621      	mov	r1, r4
 8009dce:	4640      	mov	r0, r8
 8009dd0:	f7ff fd80 	bl	80098d4 <_malloc_r>
 8009dd4:	4605      	mov	r5, r0
 8009dd6:	2800      	cmp	r0, #0
 8009dd8:	d0ed      	beq.n	8009db6 <_realloc_r+0x1e>
 8009dda:	42bc      	cmp	r4, r7
 8009ddc:	4622      	mov	r2, r4
 8009dde:	4631      	mov	r1, r6
 8009de0:	bf28      	it	cs
 8009de2:	463a      	movcs	r2, r7
 8009de4:	f7ff f824 	bl	8008e30 <memcpy>
 8009de8:	4631      	mov	r1, r6
 8009dea:	4640      	mov	r0, r8
 8009dec:	f7ff fd06 	bl	80097fc <_free_r>
 8009df0:	e7e1      	b.n	8009db6 <_realloc_r+0x1e>
 8009df2:	4635      	mov	r5, r6
 8009df4:	e7df      	b.n	8009db6 <_realloc_r+0x1e>

08009df6 <__sfputc_r>:
 8009df6:	6893      	ldr	r3, [r2, #8]
 8009df8:	3b01      	subs	r3, #1
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	b410      	push	{r4}
 8009dfe:	6093      	str	r3, [r2, #8]
 8009e00:	da08      	bge.n	8009e14 <__sfputc_r+0x1e>
 8009e02:	6994      	ldr	r4, [r2, #24]
 8009e04:	42a3      	cmp	r3, r4
 8009e06:	db01      	blt.n	8009e0c <__sfputc_r+0x16>
 8009e08:	290a      	cmp	r1, #10
 8009e0a:	d103      	bne.n	8009e14 <__sfputc_r+0x1e>
 8009e0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009e10:	f000 b94a 	b.w	800a0a8 <__swbuf_r>
 8009e14:	6813      	ldr	r3, [r2, #0]
 8009e16:	1c58      	adds	r0, r3, #1
 8009e18:	6010      	str	r0, [r2, #0]
 8009e1a:	7019      	strb	r1, [r3, #0]
 8009e1c:	4608      	mov	r0, r1
 8009e1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009e22:	4770      	bx	lr

08009e24 <__sfputs_r>:
 8009e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e26:	4606      	mov	r6, r0
 8009e28:	460f      	mov	r7, r1
 8009e2a:	4614      	mov	r4, r2
 8009e2c:	18d5      	adds	r5, r2, r3
 8009e2e:	42ac      	cmp	r4, r5
 8009e30:	d101      	bne.n	8009e36 <__sfputs_r+0x12>
 8009e32:	2000      	movs	r0, #0
 8009e34:	e007      	b.n	8009e46 <__sfputs_r+0x22>
 8009e36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e3a:	463a      	mov	r2, r7
 8009e3c:	4630      	mov	r0, r6
 8009e3e:	f7ff ffda 	bl	8009df6 <__sfputc_r>
 8009e42:	1c43      	adds	r3, r0, #1
 8009e44:	d1f3      	bne.n	8009e2e <__sfputs_r+0xa>
 8009e46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009e48 <_vfiprintf_r>:
 8009e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e4c:	460d      	mov	r5, r1
 8009e4e:	b09d      	sub	sp, #116	; 0x74
 8009e50:	4614      	mov	r4, r2
 8009e52:	4698      	mov	r8, r3
 8009e54:	4606      	mov	r6, r0
 8009e56:	b118      	cbz	r0, 8009e60 <_vfiprintf_r+0x18>
 8009e58:	6983      	ldr	r3, [r0, #24]
 8009e5a:	b90b      	cbnz	r3, 8009e60 <_vfiprintf_r+0x18>
 8009e5c:	f000 fb06 	bl	800a46c <__sinit>
 8009e60:	4b89      	ldr	r3, [pc, #548]	; (800a088 <_vfiprintf_r+0x240>)
 8009e62:	429d      	cmp	r5, r3
 8009e64:	d11b      	bne.n	8009e9e <_vfiprintf_r+0x56>
 8009e66:	6875      	ldr	r5, [r6, #4]
 8009e68:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e6a:	07d9      	lsls	r1, r3, #31
 8009e6c:	d405      	bmi.n	8009e7a <_vfiprintf_r+0x32>
 8009e6e:	89ab      	ldrh	r3, [r5, #12]
 8009e70:	059a      	lsls	r2, r3, #22
 8009e72:	d402      	bmi.n	8009e7a <_vfiprintf_r+0x32>
 8009e74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e76:	f000 fb97 	bl	800a5a8 <__retarget_lock_acquire_recursive>
 8009e7a:	89ab      	ldrh	r3, [r5, #12]
 8009e7c:	071b      	lsls	r3, r3, #28
 8009e7e:	d501      	bpl.n	8009e84 <_vfiprintf_r+0x3c>
 8009e80:	692b      	ldr	r3, [r5, #16]
 8009e82:	b9eb      	cbnz	r3, 8009ec0 <_vfiprintf_r+0x78>
 8009e84:	4629      	mov	r1, r5
 8009e86:	4630      	mov	r0, r6
 8009e88:	f000 f960 	bl	800a14c <__swsetup_r>
 8009e8c:	b1c0      	cbz	r0, 8009ec0 <_vfiprintf_r+0x78>
 8009e8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e90:	07dc      	lsls	r4, r3, #31
 8009e92:	d50e      	bpl.n	8009eb2 <_vfiprintf_r+0x6a>
 8009e94:	f04f 30ff 	mov.w	r0, #4294967295
 8009e98:	b01d      	add	sp, #116	; 0x74
 8009e9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e9e:	4b7b      	ldr	r3, [pc, #492]	; (800a08c <_vfiprintf_r+0x244>)
 8009ea0:	429d      	cmp	r5, r3
 8009ea2:	d101      	bne.n	8009ea8 <_vfiprintf_r+0x60>
 8009ea4:	68b5      	ldr	r5, [r6, #8]
 8009ea6:	e7df      	b.n	8009e68 <_vfiprintf_r+0x20>
 8009ea8:	4b79      	ldr	r3, [pc, #484]	; (800a090 <_vfiprintf_r+0x248>)
 8009eaa:	429d      	cmp	r5, r3
 8009eac:	bf08      	it	eq
 8009eae:	68f5      	ldreq	r5, [r6, #12]
 8009eb0:	e7da      	b.n	8009e68 <_vfiprintf_r+0x20>
 8009eb2:	89ab      	ldrh	r3, [r5, #12]
 8009eb4:	0598      	lsls	r0, r3, #22
 8009eb6:	d4ed      	bmi.n	8009e94 <_vfiprintf_r+0x4c>
 8009eb8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009eba:	f000 fb76 	bl	800a5aa <__retarget_lock_release_recursive>
 8009ebe:	e7e9      	b.n	8009e94 <_vfiprintf_r+0x4c>
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	9309      	str	r3, [sp, #36]	; 0x24
 8009ec4:	2320      	movs	r3, #32
 8009ec6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009eca:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ece:	2330      	movs	r3, #48	; 0x30
 8009ed0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a094 <_vfiprintf_r+0x24c>
 8009ed4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009ed8:	f04f 0901 	mov.w	r9, #1
 8009edc:	4623      	mov	r3, r4
 8009ede:	469a      	mov	sl, r3
 8009ee0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ee4:	b10a      	cbz	r2, 8009eea <_vfiprintf_r+0xa2>
 8009ee6:	2a25      	cmp	r2, #37	; 0x25
 8009ee8:	d1f9      	bne.n	8009ede <_vfiprintf_r+0x96>
 8009eea:	ebba 0b04 	subs.w	fp, sl, r4
 8009eee:	d00b      	beq.n	8009f08 <_vfiprintf_r+0xc0>
 8009ef0:	465b      	mov	r3, fp
 8009ef2:	4622      	mov	r2, r4
 8009ef4:	4629      	mov	r1, r5
 8009ef6:	4630      	mov	r0, r6
 8009ef8:	f7ff ff94 	bl	8009e24 <__sfputs_r>
 8009efc:	3001      	adds	r0, #1
 8009efe:	f000 80aa 	beq.w	800a056 <_vfiprintf_r+0x20e>
 8009f02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f04:	445a      	add	r2, fp
 8009f06:	9209      	str	r2, [sp, #36]	; 0x24
 8009f08:	f89a 3000 	ldrb.w	r3, [sl]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	f000 80a2 	beq.w	800a056 <_vfiprintf_r+0x20e>
 8009f12:	2300      	movs	r3, #0
 8009f14:	f04f 32ff 	mov.w	r2, #4294967295
 8009f18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009f1c:	f10a 0a01 	add.w	sl, sl, #1
 8009f20:	9304      	str	r3, [sp, #16]
 8009f22:	9307      	str	r3, [sp, #28]
 8009f24:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009f28:	931a      	str	r3, [sp, #104]	; 0x68
 8009f2a:	4654      	mov	r4, sl
 8009f2c:	2205      	movs	r2, #5
 8009f2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f32:	4858      	ldr	r0, [pc, #352]	; (800a094 <_vfiprintf_r+0x24c>)
 8009f34:	f7f6 f954 	bl	80001e0 <memchr>
 8009f38:	9a04      	ldr	r2, [sp, #16]
 8009f3a:	b9d8      	cbnz	r0, 8009f74 <_vfiprintf_r+0x12c>
 8009f3c:	06d1      	lsls	r1, r2, #27
 8009f3e:	bf44      	itt	mi
 8009f40:	2320      	movmi	r3, #32
 8009f42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f46:	0713      	lsls	r3, r2, #28
 8009f48:	bf44      	itt	mi
 8009f4a:	232b      	movmi	r3, #43	; 0x2b
 8009f4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f50:	f89a 3000 	ldrb.w	r3, [sl]
 8009f54:	2b2a      	cmp	r3, #42	; 0x2a
 8009f56:	d015      	beq.n	8009f84 <_vfiprintf_r+0x13c>
 8009f58:	9a07      	ldr	r2, [sp, #28]
 8009f5a:	4654      	mov	r4, sl
 8009f5c:	2000      	movs	r0, #0
 8009f5e:	f04f 0c0a 	mov.w	ip, #10
 8009f62:	4621      	mov	r1, r4
 8009f64:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009f68:	3b30      	subs	r3, #48	; 0x30
 8009f6a:	2b09      	cmp	r3, #9
 8009f6c:	d94e      	bls.n	800a00c <_vfiprintf_r+0x1c4>
 8009f6e:	b1b0      	cbz	r0, 8009f9e <_vfiprintf_r+0x156>
 8009f70:	9207      	str	r2, [sp, #28]
 8009f72:	e014      	b.n	8009f9e <_vfiprintf_r+0x156>
 8009f74:	eba0 0308 	sub.w	r3, r0, r8
 8009f78:	fa09 f303 	lsl.w	r3, r9, r3
 8009f7c:	4313      	orrs	r3, r2
 8009f7e:	9304      	str	r3, [sp, #16]
 8009f80:	46a2      	mov	sl, r4
 8009f82:	e7d2      	b.n	8009f2a <_vfiprintf_r+0xe2>
 8009f84:	9b03      	ldr	r3, [sp, #12]
 8009f86:	1d19      	adds	r1, r3, #4
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	9103      	str	r1, [sp, #12]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	bfbb      	ittet	lt
 8009f90:	425b      	neglt	r3, r3
 8009f92:	f042 0202 	orrlt.w	r2, r2, #2
 8009f96:	9307      	strge	r3, [sp, #28]
 8009f98:	9307      	strlt	r3, [sp, #28]
 8009f9a:	bfb8      	it	lt
 8009f9c:	9204      	strlt	r2, [sp, #16]
 8009f9e:	7823      	ldrb	r3, [r4, #0]
 8009fa0:	2b2e      	cmp	r3, #46	; 0x2e
 8009fa2:	d10c      	bne.n	8009fbe <_vfiprintf_r+0x176>
 8009fa4:	7863      	ldrb	r3, [r4, #1]
 8009fa6:	2b2a      	cmp	r3, #42	; 0x2a
 8009fa8:	d135      	bne.n	800a016 <_vfiprintf_r+0x1ce>
 8009faa:	9b03      	ldr	r3, [sp, #12]
 8009fac:	1d1a      	adds	r2, r3, #4
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	9203      	str	r2, [sp, #12]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	bfb8      	it	lt
 8009fb6:	f04f 33ff 	movlt.w	r3, #4294967295
 8009fba:	3402      	adds	r4, #2
 8009fbc:	9305      	str	r3, [sp, #20]
 8009fbe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a0a4 <_vfiprintf_r+0x25c>
 8009fc2:	7821      	ldrb	r1, [r4, #0]
 8009fc4:	2203      	movs	r2, #3
 8009fc6:	4650      	mov	r0, sl
 8009fc8:	f7f6 f90a 	bl	80001e0 <memchr>
 8009fcc:	b140      	cbz	r0, 8009fe0 <_vfiprintf_r+0x198>
 8009fce:	2340      	movs	r3, #64	; 0x40
 8009fd0:	eba0 000a 	sub.w	r0, r0, sl
 8009fd4:	fa03 f000 	lsl.w	r0, r3, r0
 8009fd8:	9b04      	ldr	r3, [sp, #16]
 8009fda:	4303      	orrs	r3, r0
 8009fdc:	3401      	adds	r4, #1
 8009fde:	9304      	str	r3, [sp, #16]
 8009fe0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fe4:	482c      	ldr	r0, [pc, #176]	; (800a098 <_vfiprintf_r+0x250>)
 8009fe6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009fea:	2206      	movs	r2, #6
 8009fec:	f7f6 f8f8 	bl	80001e0 <memchr>
 8009ff0:	2800      	cmp	r0, #0
 8009ff2:	d03f      	beq.n	800a074 <_vfiprintf_r+0x22c>
 8009ff4:	4b29      	ldr	r3, [pc, #164]	; (800a09c <_vfiprintf_r+0x254>)
 8009ff6:	bb1b      	cbnz	r3, 800a040 <_vfiprintf_r+0x1f8>
 8009ff8:	9b03      	ldr	r3, [sp, #12]
 8009ffa:	3307      	adds	r3, #7
 8009ffc:	f023 0307 	bic.w	r3, r3, #7
 800a000:	3308      	adds	r3, #8
 800a002:	9303      	str	r3, [sp, #12]
 800a004:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a006:	443b      	add	r3, r7
 800a008:	9309      	str	r3, [sp, #36]	; 0x24
 800a00a:	e767      	b.n	8009edc <_vfiprintf_r+0x94>
 800a00c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a010:	460c      	mov	r4, r1
 800a012:	2001      	movs	r0, #1
 800a014:	e7a5      	b.n	8009f62 <_vfiprintf_r+0x11a>
 800a016:	2300      	movs	r3, #0
 800a018:	3401      	adds	r4, #1
 800a01a:	9305      	str	r3, [sp, #20]
 800a01c:	4619      	mov	r1, r3
 800a01e:	f04f 0c0a 	mov.w	ip, #10
 800a022:	4620      	mov	r0, r4
 800a024:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a028:	3a30      	subs	r2, #48	; 0x30
 800a02a:	2a09      	cmp	r2, #9
 800a02c:	d903      	bls.n	800a036 <_vfiprintf_r+0x1ee>
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d0c5      	beq.n	8009fbe <_vfiprintf_r+0x176>
 800a032:	9105      	str	r1, [sp, #20]
 800a034:	e7c3      	b.n	8009fbe <_vfiprintf_r+0x176>
 800a036:	fb0c 2101 	mla	r1, ip, r1, r2
 800a03a:	4604      	mov	r4, r0
 800a03c:	2301      	movs	r3, #1
 800a03e:	e7f0      	b.n	800a022 <_vfiprintf_r+0x1da>
 800a040:	ab03      	add	r3, sp, #12
 800a042:	9300      	str	r3, [sp, #0]
 800a044:	462a      	mov	r2, r5
 800a046:	4b16      	ldr	r3, [pc, #88]	; (800a0a0 <_vfiprintf_r+0x258>)
 800a048:	a904      	add	r1, sp, #16
 800a04a:	4630      	mov	r0, r6
 800a04c:	f7fc f83a 	bl	80060c4 <_printf_float>
 800a050:	4607      	mov	r7, r0
 800a052:	1c78      	adds	r0, r7, #1
 800a054:	d1d6      	bne.n	800a004 <_vfiprintf_r+0x1bc>
 800a056:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a058:	07d9      	lsls	r1, r3, #31
 800a05a:	d405      	bmi.n	800a068 <_vfiprintf_r+0x220>
 800a05c:	89ab      	ldrh	r3, [r5, #12]
 800a05e:	059a      	lsls	r2, r3, #22
 800a060:	d402      	bmi.n	800a068 <_vfiprintf_r+0x220>
 800a062:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a064:	f000 faa1 	bl	800a5aa <__retarget_lock_release_recursive>
 800a068:	89ab      	ldrh	r3, [r5, #12]
 800a06a:	065b      	lsls	r3, r3, #25
 800a06c:	f53f af12 	bmi.w	8009e94 <_vfiprintf_r+0x4c>
 800a070:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a072:	e711      	b.n	8009e98 <_vfiprintf_r+0x50>
 800a074:	ab03      	add	r3, sp, #12
 800a076:	9300      	str	r3, [sp, #0]
 800a078:	462a      	mov	r2, r5
 800a07a:	4b09      	ldr	r3, [pc, #36]	; (800a0a0 <_vfiprintf_r+0x258>)
 800a07c:	a904      	add	r1, sp, #16
 800a07e:	4630      	mov	r0, r6
 800a080:	f7fc fac4 	bl	800660c <_printf_i>
 800a084:	e7e4      	b.n	800a050 <_vfiprintf_r+0x208>
 800a086:	bf00      	nop
 800a088:	0800b4c4 	.word	0x0800b4c4
 800a08c:	0800b4e4 	.word	0x0800b4e4
 800a090:	0800b4a4 	.word	0x0800b4a4
 800a094:	0800b454 	.word	0x0800b454
 800a098:	0800b45e 	.word	0x0800b45e
 800a09c:	080060c5 	.word	0x080060c5
 800a0a0:	08009e25 	.word	0x08009e25
 800a0a4:	0800b45a 	.word	0x0800b45a

0800a0a8 <__swbuf_r>:
 800a0a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0aa:	460e      	mov	r6, r1
 800a0ac:	4614      	mov	r4, r2
 800a0ae:	4605      	mov	r5, r0
 800a0b0:	b118      	cbz	r0, 800a0ba <__swbuf_r+0x12>
 800a0b2:	6983      	ldr	r3, [r0, #24]
 800a0b4:	b90b      	cbnz	r3, 800a0ba <__swbuf_r+0x12>
 800a0b6:	f000 f9d9 	bl	800a46c <__sinit>
 800a0ba:	4b21      	ldr	r3, [pc, #132]	; (800a140 <__swbuf_r+0x98>)
 800a0bc:	429c      	cmp	r4, r3
 800a0be:	d12b      	bne.n	800a118 <__swbuf_r+0x70>
 800a0c0:	686c      	ldr	r4, [r5, #4]
 800a0c2:	69a3      	ldr	r3, [r4, #24]
 800a0c4:	60a3      	str	r3, [r4, #8]
 800a0c6:	89a3      	ldrh	r3, [r4, #12]
 800a0c8:	071a      	lsls	r2, r3, #28
 800a0ca:	d52f      	bpl.n	800a12c <__swbuf_r+0x84>
 800a0cc:	6923      	ldr	r3, [r4, #16]
 800a0ce:	b36b      	cbz	r3, 800a12c <__swbuf_r+0x84>
 800a0d0:	6923      	ldr	r3, [r4, #16]
 800a0d2:	6820      	ldr	r0, [r4, #0]
 800a0d4:	1ac0      	subs	r0, r0, r3
 800a0d6:	6963      	ldr	r3, [r4, #20]
 800a0d8:	b2f6      	uxtb	r6, r6
 800a0da:	4283      	cmp	r3, r0
 800a0dc:	4637      	mov	r7, r6
 800a0de:	dc04      	bgt.n	800a0ea <__swbuf_r+0x42>
 800a0e0:	4621      	mov	r1, r4
 800a0e2:	4628      	mov	r0, r5
 800a0e4:	f000 f92e 	bl	800a344 <_fflush_r>
 800a0e8:	bb30      	cbnz	r0, 800a138 <__swbuf_r+0x90>
 800a0ea:	68a3      	ldr	r3, [r4, #8]
 800a0ec:	3b01      	subs	r3, #1
 800a0ee:	60a3      	str	r3, [r4, #8]
 800a0f0:	6823      	ldr	r3, [r4, #0]
 800a0f2:	1c5a      	adds	r2, r3, #1
 800a0f4:	6022      	str	r2, [r4, #0]
 800a0f6:	701e      	strb	r6, [r3, #0]
 800a0f8:	6963      	ldr	r3, [r4, #20]
 800a0fa:	3001      	adds	r0, #1
 800a0fc:	4283      	cmp	r3, r0
 800a0fe:	d004      	beq.n	800a10a <__swbuf_r+0x62>
 800a100:	89a3      	ldrh	r3, [r4, #12]
 800a102:	07db      	lsls	r3, r3, #31
 800a104:	d506      	bpl.n	800a114 <__swbuf_r+0x6c>
 800a106:	2e0a      	cmp	r6, #10
 800a108:	d104      	bne.n	800a114 <__swbuf_r+0x6c>
 800a10a:	4621      	mov	r1, r4
 800a10c:	4628      	mov	r0, r5
 800a10e:	f000 f919 	bl	800a344 <_fflush_r>
 800a112:	b988      	cbnz	r0, 800a138 <__swbuf_r+0x90>
 800a114:	4638      	mov	r0, r7
 800a116:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a118:	4b0a      	ldr	r3, [pc, #40]	; (800a144 <__swbuf_r+0x9c>)
 800a11a:	429c      	cmp	r4, r3
 800a11c:	d101      	bne.n	800a122 <__swbuf_r+0x7a>
 800a11e:	68ac      	ldr	r4, [r5, #8]
 800a120:	e7cf      	b.n	800a0c2 <__swbuf_r+0x1a>
 800a122:	4b09      	ldr	r3, [pc, #36]	; (800a148 <__swbuf_r+0xa0>)
 800a124:	429c      	cmp	r4, r3
 800a126:	bf08      	it	eq
 800a128:	68ec      	ldreq	r4, [r5, #12]
 800a12a:	e7ca      	b.n	800a0c2 <__swbuf_r+0x1a>
 800a12c:	4621      	mov	r1, r4
 800a12e:	4628      	mov	r0, r5
 800a130:	f000 f80c 	bl	800a14c <__swsetup_r>
 800a134:	2800      	cmp	r0, #0
 800a136:	d0cb      	beq.n	800a0d0 <__swbuf_r+0x28>
 800a138:	f04f 37ff 	mov.w	r7, #4294967295
 800a13c:	e7ea      	b.n	800a114 <__swbuf_r+0x6c>
 800a13e:	bf00      	nop
 800a140:	0800b4c4 	.word	0x0800b4c4
 800a144:	0800b4e4 	.word	0x0800b4e4
 800a148:	0800b4a4 	.word	0x0800b4a4

0800a14c <__swsetup_r>:
 800a14c:	4b32      	ldr	r3, [pc, #200]	; (800a218 <__swsetup_r+0xcc>)
 800a14e:	b570      	push	{r4, r5, r6, lr}
 800a150:	681d      	ldr	r5, [r3, #0]
 800a152:	4606      	mov	r6, r0
 800a154:	460c      	mov	r4, r1
 800a156:	b125      	cbz	r5, 800a162 <__swsetup_r+0x16>
 800a158:	69ab      	ldr	r3, [r5, #24]
 800a15a:	b913      	cbnz	r3, 800a162 <__swsetup_r+0x16>
 800a15c:	4628      	mov	r0, r5
 800a15e:	f000 f985 	bl	800a46c <__sinit>
 800a162:	4b2e      	ldr	r3, [pc, #184]	; (800a21c <__swsetup_r+0xd0>)
 800a164:	429c      	cmp	r4, r3
 800a166:	d10f      	bne.n	800a188 <__swsetup_r+0x3c>
 800a168:	686c      	ldr	r4, [r5, #4]
 800a16a:	89a3      	ldrh	r3, [r4, #12]
 800a16c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a170:	0719      	lsls	r1, r3, #28
 800a172:	d42c      	bmi.n	800a1ce <__swsetup_r+0x82>
 800a174:	06dd      	lsls	r5, r3, #27
 800a176:	d411      	bmi.n	800a19c <__swsetup_r+0x50>
 800a178:	2309      	movs	r3, #9
 800a17a:	6033      	str	r3, [r6, #0]
 800a17c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a180:	81a3      	strh	r3, [r4, #12]
 800a182:	f04f 30ff 	mov.w	r0, #4294967295
 800a186:	e03e      	b.n	800a206 <__swsetup_r+0xba>
 800a188:	4b25      	ldr	r3, [pc, #148]	; (800a220 <__swsetup_r+0xd4>)
 800a18a:	429c      	cmp	r4, r3
 800a18c:	d101      	bne.n	800a192 <__swsetup_r+0x46>
 800a18e:	68ac      	ldr	r4, [r5, #8]
 800a190:	e7eb      	b.n	800a16a <__swsetup_r+0x1e>
 800a192:	4b24      	ldr	r3, [pc, #144]	; (800a224 <__swsetup_r+0xd8>)
 800a194:	429c      	cmp	r4, r3
 800a196:	bf08      	it	eq
 800a198:	68ec      	ldreq	r4, [r5, #12]
 800a19a:	e7e6      	b.n	800a16a <__swsetup_r+0x1e>
 800a19c:	0758      	lsls	r0, r3, #29
 800a19e:	d512      	bpl.n	800a1c6 <__swsetup_r+0x7a>
 800a1a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a1a2:	b141      	cbz	r1, 800a1b6 <__swsetup_r+0x6a>
 800a1a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a1a8:	4299      	cmp	r1, r3
 800a1aa:	d002      	beq.n	800a1b2 <__swsetup_r+0x66>
 800a1ac:	4630      	mov	r0, r6
 800a1ae:	f7ff fb25 	bl	80097fc <_free_r>
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	6363      	str	r3, [r4, #52]	; 0x34
 800a1b6:	89a3      	ldrh	r3, [r4, #12]
 800a1b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a1bc:	81a3      	strh	r3, [r4, #12]
 800a1be:	2300      	movs	r3, #0
 800a1c0:	6063      	str	r3, [r4, #4]
 800a1c2:	6923      	ldr	r3, [r4, #16]
 800a1c4:	6023      	str	r3, [r4, #0]
 800a1c6:	89a3      	ldrh	r3, [r4, #12]
 800a1c8:	f043 0308 	orr.w	r3, r3, #8
 800a1cc:	81a3      	strh	r3, [r4, #12]
 800a1ce:	6923      	ldr	r3, [r4, #16]
 800a1d0:	b94b      	cbnz	r3, 800a1e6 <__swsetup_r+0x9a>
 800a1d2:	89a3      	ldrh	r3, [r4, #12]
 800a1d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a1d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a1dc:	d003      	beq.n	800a1e6 <__swsetup_r+0x9a>
 800a1de:	4621      	mov	r1, r4
 800a1e0:	4630      	mov	r0, r6
 800a1e2:	f000 fa09 	bl	800a5f8 <__smakebuf_r>
 800a1e6:	89a0      	ldrh	r0, [r4, #12]
 800a1e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a1ec:	f010 0301 	ands.w	r3, r0, #1
 800a1f0:	d00a      	beq.n	800a208 <__swsetup_r+0xbc>
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	60a3      	str	r3, [r4, #8]
 800a1f6:	6963      	ldr	r3, [r4, #20]
 800a1f8:	425b      	negs	r3, r3
 800a1fa:	61a3      	str	r3, [r4, #24]
 800a1fc:	6923      	ldr	r3, [r4, #16]
 800a1fe:	b943      	cbnz	r3, 800a212 <__swsetup_r+0xc6>
 800a200:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a204:	d1ba      	bne.n	800a17c <__swsetup_r+0x30>
 800a206:	bd70      	pop	{r4, r5, r6, pc}
 800a208:	0781      	lsls	r1, r0, #30
 800a20a:	bf58      	it	pl
 800a20c:	6963      	ldrpl	r3, [r4, #20]
 800a20e:	60a3      	str	r3, [r4, #8]
 800a210:	e7f4      	b.n	800a1fc <__swsetup_r+0xb0>
 800a212:	2000      	movs	r0, #0
 800a214:	e7f7      	b.n	800a206 <__swsetup_r+0xba>
 800a216:	bf00      	nop
 800a218:	2000000c 	.word	0x2000000c
 800a21c:	0800b4c4 	.word	0x0800b4c4
 800a220:	0800b4e4 	.word	0x0800b4e4
 800a224:	0800b4a4 	.word	0x0800b4a4

0800a228 <abort>:
 800a228:	b508      	push	{r3, lr}
 800a22a:	2006      	movs	r0, #6
 800a22c:	f000 fa54 	bl	800a6d8 <raise>
 800a230:	2001      	movs	r0, #1
 800a232:	f7f7 fbbf 	bl	80019b4 <_exit>
	...

0800a238 <__sflush_r>:
 800a238:	898a      	ldrh	r2, [r1, #12]
 800a23a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a23e:	4605      	mov	r5, r0
 800a240:	0710      	lsls	r0, r2, #28
 800a242:	460c      	mov	r4, r1
 800a244:	d458      	bmi.n	800a2f8 <__sflush_r+0xc0>
 800a246:	684b      	ldr	r3, [r1, #4]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	dc05      	bgt.n	800a258 <__sflush_r+0x20>
 800a24c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a24e:	2b00      	cmp	r3, #0
 800a250:	dc02      	bgt.n	800a258 <__sflush_r+0x20>
 800a252:	2000      	movs	r0, #0
 800a254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a258:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a25a:	2e00      	cmp	r6, #0
 800a25c:	d0f9      	beq.n	800a252 <__sflush_r+0x1a>
 800a25e:	2300      	movs	r3, #0
 800a260:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a264:	682f      	ldr	r7, [r5, #0]
 800a266:	602b      	str	r3, [r5, #0]
 800a268:	d032      	beq.n	800a2d0 <__sflush_r+0x98>
 800a26a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a26c:	89a3      	ldrh	r3, [r4, #12]
 800a26e:	075a      	lsls	r2, r3, #29
 800a270:	d505      	bpl.n	800a27e <__sflush_r+0x46>
 800a272:	6863      	ldr	r3, [r4, #4]
 800a274:	1ac0      	subs	r0, r0, r3
 800a276:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a278:	b10b      	cbz	r3, 800a27e <__sflush_r+0x46>
 800a27a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a27c:	1ac0      	subs	r0, r0, r3
 800a27e:	2300      	movs	r3, #0
 800a280:	4602      	mov	r2, r0
 800a282:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a284:	6a21      	ldr	r1, [r4, #32]
 800a286:	4628      	mov	r0, r5
 800a288:	47b0      	blx	r6
 800a28a:	1c43      	adds	r3, r0, #1
 800a28c:	89a3      	ldrh	r3, [r4, #12]
 800a28e:	d106      	bne.n	800a29e <__sflush_r+0x66>
 800a290:	6829      	ldr	r1, [r5, #0]
 800a292:	291d      	cmp	r1, #29
 800a294:	d82c      	bhi.n	800a2f0 <__sflush_r+0xb8>
 800a296:	4a2a      	ldr	r2, [pc, #168]	; (800a340 <__sflush_r+0x108>)
 800a298:	40ca      	lsrs	r2, r1
 800a29a:	07d6      	lsls	r6, r2, #31
 800a29c:	d528      	bpl.n	800a2f0 <__sflush_r+0xb8>
 800a29e:	2200      	movs	r2, #0
 800a2a0:	6062      	str	r2, [r4, #4]
 800a2a2:	04d9      	lsls	r1, r3, #19
 800a2a4:	6922      	ldr	r2, [r4, #16]
 800a2a6:	6022      	str	r2, [r4, #0]
 800a2a8:	d504      	bpl.n	800a2b4 <__sflush_r+0x7c>
 800a2aa:	1c42      	adds	r2, r0, #1
 800a2ac:	d101      	bne.n	800a2b2 <__sflush_r+0x7a>
 800a2ae:	682b      	ldr	r3, [r5, #0]
 800a2b0:	b903      	cbnz	r3, 800a2b4 <__sflush_r+0x7c>
 800a2b2:	6560      	str	r0, [r4, #84]	; 0x54
 800a2b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a2b6:	602f      	str	r7, [r5, #0]
 800a2b8:	2900      	cmp	r1, #0
 800a2ba:	d0ca      	beq.n	800a252 <__sflush_r+0x1a>
 800a2bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a2c0:	4299      	cmp	r1, r3
 800a2c2:	d002      	beq.n	800a2ca <__sflush_r+0x92>
 800a2c4:	4628      	mov	r0, r5
 800a2c6:	f7ff fa99 	bl	80097fc <_free_r>
 800a2ca:	2000      	movs	r0, #0
 800a2cc:	6360      	str	r0, [r4, #52]	; 0x34
 800a2ce:	e7c1      	b.n	800a254 <__sflush_r+0x1c>
 800a2d0:	6a21      	ldr	r1, [r4, #32]
 800a2d2:	2301      	movs	r3, #1
 800a2d4:	4628      	mov	r0, r5
 800a2d6:	47b0      	blx	r6
 800a2d8:	1c41      	adds	r1, r0, #1
 800a2da:	d1c7      	bne.n	800a26c <__sflush_r+0x34>
 800a2dc:	682b      	ldr	r3, [r5, #0]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d0c4      	beq.n	800a26c <__sflush_r+0x34>
 800a2e2:	2b1d      	cmp	r3, #29
 800a2e4:	d001      	beq.n	800a2ea <__sflush_r+0xb2>
 800a2e6:	2b16      	cmp	r3, #22
 800a2e8:	d101      	bne.n	800a2ee <__sflush_r+0xb6>
 800a2ea:	602f      	str	r7, [r5, #0]
 800a2ec:	e7b1      	b.n	800a252 <__sflush_r+0x1a>
 800a2ee:	89a3      	ldrh	r3, [r4, #12]
 800a2f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a2f4:	81a3      	strh	r3, [r4, #12]
 800a2f6:	e7ad      	b.n	800a254 <__sflush_r+0x1c>
 800a2f8:	690f      	ldr	r7, [r1, #16]
 800a2fa:	2f00      	cmp	r7, #0
 800a2fc:	d0a9      	beq.n	800a252 <__sflush_r+0x1a>
 800a2fe:	0793      	lsls	r3, r2, #30
 800a300:	680e      	ldr	r6, [r1, #0]
 800a302:	bf08      	it	eq
 800a304:	694b      	ldreq	r3, [r1, #20]
 800a306:	600f      	str	r7, [r1, #0]
 800a308:	bf18      	it	ne
 800a30a:	2300      	movne	r3, #0
 800a30c:	eba6 0807 	sub.w	r8, r6, r7
 800a310:	608b      	str	r3, [r1, #8]
 800a312:	f1b8 0f00 	cmp.w	r8, #0
 800a316:	dd9c      	ble.n	800a252 <__sflush_r+0x1a>
 800a318:	6a21      	ldr	r1, [r4, #32]
 800a31a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a31c:	4643      	mov	r3, r8
 800a31e:	463a      	mov	r2, r7
 800a320:	4628      	mov	r0, r5
 800a322:	47b0      	blx	r6
 800a324:	2800      	cmp	r0, #0
 800a326:	dc06      	bgt.n	800a336 <__sflush_r+0xfe>
 800a328:	89a3      	ldrh	r3, [r4, #12]
 800a32a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a32e:	81a3      	strh	r3, [r4, #12]
 800a330:	f04f 30ff 	mov.w	r0, #4294967295
 800a334:	e78e      	b.n	800a254 <__sflush_r+0x1c>
 800a336:	4407      	add	r7, r0
 800a338:	eba8 0800 	sub.w	r8, r8, r0
 800a33c:	e7e9      	b.n	800a312 <__sflush_r+0xda>
 800a33e:	bf00      	nop
 800a340:	20400001 	.word	0x20400001

0800a344 <_fflush_r>:
 800a344:	b538      	push	{r3, r4, r5, lr}
 800a346:	690b      	ldr	r3, [r1, #16]
 800a348:	4605      	mov	r5, r0
 800a34a:	460c      	mov	r4, r1
 800a34c:	b913      	cbnz	r3, 800a354 <_fflush_r+0x10>
 800a34e:	2500      	movs	r5, #0
 800a350:	4628      	mov	r0, r5
 800a352:	bd38      	pop	{r3, r4, r5, pc}
 800a354:	b118      	cbz	r0, 800a35e <_fflush_r+0x1a>
 800a356:	6983      	ldr	r3, [r0, #24]
 800a358:	b90b      	cbnz	r3, 800a35e <_fflush_r+0x1a>
 800a35a:	f000 f887 	bl	800a46c <__sinit>
 800a35e:	4b14      	ldr	r3, [pc, #80]	; (800a3b0 <_fflush_r+0x6c>)
 800a360:	429c      	cmp	r4, r3
 800a362:	d11b      	bne.n	800a39c <_fflush_r+0x58>
 800a364:	686c      	ldr	r4, [r5, #4]
 800a366:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d0ef      	beq.n	800a34e <_fflush_r+0xa>
 800a36e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a370:	07d0      	lsls	r0, r2, #31
 800a372:	d404      	bmi.n	800a37e <_fflush_r+0x3a>
 800a374:	0599      	lsls	r1, r3, #22
 800a376:	d402      	bmi.n	800a37e <_fflush_r+0x3a>
 800a378:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a37a:	f000 f915 	bl	800a5a8 <__retarget_lock_acquire_recursive>
 800a37e:	4628      	mov	r0, r5
 800a380:	4621      	mov	r1, r4
 800a382:	f7ff ff59 	bl	800a238 <__sflush_r>
 800a386:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a388:	07da      	lsls	r2, r3, #31
 800a38a:	4605      	mov	r5, r0
 800a38c:	d4e0      	bmi.n	800a350 <_fflush_r+0xc>
 800a38e:	89a3      	ldrh	r3, [r4, #12]
 800a390:	059b      	lsls	r3, r3, #22
 800a392:	d4dd      	bmi.n	800a350 <_fflush_r+0xc>
 800a394:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a396:	f000 f908 	bl	800a5aa <__retarget_lock_release_recursive>
 800a39a:	e7d9      	b.n	800a350 <_fflush_r+0xc>
 800a39c:	4b05      	ldr	r3, [pc, #20]	; (800a3b4 <_fflush_r+0x70>)
 800a39e:	429c      	cmp	r4, r3
 800a3a0:	d101      	bne.n	800a3a6 <_fflush_r+0x62>
 800a3a2:	68ac      	ldr	r4, [r5, #8]
 800a3a4:	e7df      	b.n	800a366 <_fflush_r+0x22>
 800a3a6:	4b04      	ldr	r3, [pc, #16]	; (800a3b8 <_fflush_r+0x74>)
 800a3a8:	429c      	cmp	r4, r3
 800a3aa:	bf08      	it	eq
 800a3ac:	68ec      	ldreq	r4, [r5, #12]
 800a3ae:	e7da      	b.n	800a366 <_fflush_r+0x22>
 800a3b0:	0800b4c4 	.word	0x0800b4c4
 800a3b4:	0800b4e4 	.word	0x0800b4e4
 800a3b8:	0800b4a4 	.word	0x0800b4a4

0800a3bc <std>:
 800a3bc:	2300      	movs	r3, #0
 800a3be:	b510      	push	{r4, lr}
 800a3c0:	4604      	mov	r4, r0
 800a3c2:	e9c0 3300 	strd	r3, r3, [r0]
 800a3c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a3ca:	6083      	str	r3, [r0, #8]
 800a3cc:	8181      	strh	r1, [r0, #12]
 800a3ce:	6643      	str	r3, [r0, #100]	; 0x64
 800a3d0:	81c2      	strh	r2, [r0, #14]
 800a3d2:	6183      	str	r3, [r0, #24]
 800a3d4:	4619      	mov	r1, r3
 800a3d6:	2208      	movs	r2, #8
 800a3d8:	305c      	adds	r0, #92	; 0x5c
 800a3da:	f7fb fdcb 	bl	8005f74 <memset>
 800a3de:	4b05      	ldr	r3, [pc, #20]	; (800a3f4 <std+0x38>)
 800a3e0:	6263      	str	r3, [r4, #36]	; 0x24
 800a3e2:	4b05      	ldr	r3, [pc, #20]	; (800a3f8 <std+0x3c>)
 800a3e4:	62a3      	str	r3, [r4, #40]	; 0x28
 800a3e6:	4b05      	ldr	r3, [pc, #20]	; (800a3fc <std+0x40>)
 800a3e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a3ea:	4b05      	ldr	r3, [pc, #20]	; (800a400 <std+0x44>)
 800a3ec:	6224      	str	r4, [r4, #32]
 800a3ee:	6323      	str	r3, [r4, #48]	; 0x30
 800a3f0:	bd10      	pop	{r4, pc}
 800a3f2:	bf00      	nop
 800a3f4:	0800a711 	.word	0x0800a711
 800a3f8:	0800a733 	.word	0x0800a733
 800a3fc:	0800a76b 	.word	0x0800a76b
 800a400:	0800a78f 	.word	0x0800a78f

0800a404 <_cleanup_r>:
 800a404:	4901      	ldr	r1, [pc, #4]	; (800a40c <_cleanup_r+0x8>)
 800a406:	f000 b8af 	b.w	800a568 <_fwalk_reent>
 800a40a:	bf00      	nop
 800a40c:	0800a345 	.word	0x0800a345

0800a410 <__sfmoreglue>:
 800a410:	b570      	push	{r4, r5, r6, lr}
 800a412:	2268      	movs	r2, #104	; 0x68
 800a414:	1e4d      	subs	r5, r1, #1
 800a416:	4355      	muls	r5, r2
 800a418:	460e      	mov	r6, r1
 800a41a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a41e:	f7ff fa59 	bl	80098d4 <_malloc_r>
 800a422:	4604      	mov	r4, r0
 800a424:	b140      	cbz	r0, 800a438 <__sfmoreglue+0x28>
 800a426:	2100      	movs	r1, #0
 800a428:	e9c0 1600 	strd	r1, r6, [r0]
 800a42c:	300c      	adds	r0, #12
 800a42e:	60a0      	str	r0, [r4, #8]
 800a430:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a434:	f7fb fd9e 	bl	8005f74 <memset>
 800a438:	4620      	mov	r0, r4
 800a43a:	bd70      	pop	{r4, r5, r6, pc}

0800a43c <__sfp_lock_acquire>:
 800a43c:	4801      	ldr	r0, [pc, #4]	; (800a444 <__sfp_lock_acquire+0x8>)
 800a43e:	f000 b8b3 	b.w	800a5a8 <__retarget_lock_acquire_recursive>
 800a442:	bf00      	nop
 800a444:	20000389 	.word	0x20000389

0800a448 <__sfp_lock_release>:
 800a448:	4801      	ldr	r0, [pc, #4]	; (800a450 <__sfp_lock_release+0x8>)
 800a44a:	f000 b8ae 	b.w	800a5aa <__retarget_lock_release_recursive>
 800a44e:	bf00      	nop
 800a450:	20000389 	.word	0x20000389

0800a454 <__sinit_lock_acquire>:
 800a454:	4801      	ldr	r0, [pc, #4]	; (800a45c <__sinit_lock_acquire+0x8>)
 800a456:	f000 b8a7 	b.w	800a5a8 <__retarget_lock_acquire_recursive>
 800a45a:	bf00      	nop
 800a45c:	2000038a 	.word	0x2000038a

0800a460 <__sinit_lock_release>:
 800a460:	4801      	ldr	r0, [pc, #4]	; (800a468 <__sinit_lock_release+0x8>)
 800a462:	f000 b8a2 	b.w	800a5aa <__retarget_lock_release_recursive>
 800a466:	bf00      	nop
 800a468:	2000038a 	.word	0x2000038a

0800a46c <__sinit>:
 800a46c:	b510      	push	{r4, lr}
 800a46e:	4604      	mov	r4, r0
 800a470:	f7ff fff0 	bl	800a454 <__sinit_lock_acquire>
 800a474:	69a3      	ldr	r3, [r4, #24]
 800a476:	b11b      	cbz	r3, 800a480 <__sinit+0x14>
 800a478:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a47c:	f7ff bff0 	b.w	800a460 <__sinit_lock_release>
 800a480:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a484:	6523      	str	r3, [r4, #80]	; 0x50
 800a486:	4b13      	ldr	r3, [pc, #76]	; (800a4d4 <__sinit+0x68>)
 800a488:	4a13      	ldr	r2, [pc, #76]	; (800a4d8 <__sinit+0x6c>)
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	62a2      	str	r2, [r4, #40]	; 0x28
 800a48e:	42a3      	cmp	r3, r4
 800a490:	bf04      	itt	eq
 800a492:	2301      	moveq	r3, #1
 800a494:	61a3      	streq	r3, [r4, #24]
 800a496:	4620      	mov	r0, r4
 800a498:	f000 f820 	bl	800a4dc <__sfp>
 800a49c:	6060      	str	r0, [r4, #4]
 800a49e:	4620      	mov	r0, r4
 800a4a0:	f000 f81c 	bl	800a4dc <__sfp>
 800a4a4:	60a0      	str	r0, [r4, #8]
 800a4a6:	4620      	mov	r0, r4
 800a4a8:	f000 f818 	bl	800a4dc <__sfp>
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	60e0      	str	r0, [r4, #12]
 800a4b0:	2104      	movs	r1, #4
 800a4b2:	6860      	ldr	r0, [r4, #4]
 800a4b4:	f7ff ff82 	bl	800a3bc <std>
 800a4b8:	68a0      	ldr	r0, [r4, #8]
 800a4ba:	2201      	movs	r2, #1
 800a4bc:	2109      	movs	r1, #9
 800a4be:	f7ff ff7d 	bl	800a3bc <std>
 800a4c2:	68e0      	ldr	r0, [r4, #12]
 800a4c4:	2202      	movs	r2, #2
 800a4c6:	2112      	movs	r1, #18
 800a4c8:	f7ff ff78 	bl	800a3bc <std>
 800a4cc:	2301      	movs	r3, #1
 800a4ce:	61a3      	str	r3, [r4, #24]
 800a4d0:	e7d2      	b.n	800a478 <__sinit+0xc>
 800a4d2:	bf00      	nop
 800a4d4:	0800b060 	.word	0x0800b060
 800a4d8:	0800a405 	.word	0x0800a405

0800a4dc <__sfp>:
 800a4dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4de:	4607      	mov	r7, r0
 800a4e0:	f7ff ffac 	bl	800a43c <__sfp_lock_acquire>
 800a4e4:	4b1e      	ldr	r3, [pc, #120]	; (800a560 <__sfp+0x84>)
 800a4e6:	681e      	ldr	r6, [r3, #0]
 800a4e8:	69b3      	ldr	r3, [r6, #24]
 800a4ea:	b913      	cbnz	r3, 800a4f2 <__sfp+0x16>
 800a4ec:	4630      	mov	r0, r6
 800a4ee:	f7ff ffbd 	bl	800a46c <__sinit>
 800a4f2:	3648      	adds	r6, #72	; 0x48
 800a4f4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a4f8:	3b01      	subs	r3, #1
 800a4fa:	d503      	bpl.n	800a504 <__sfp+0x28>
 800a4fc:	6833      	ldr	r3, [r6, #0]
 800a4fe:	b30b      	cbz	r3, 800a544 <__sfp+0x68>
 800a500:	6836      	ldr	r6, [r6, #0]
 800a502:	e7f7      	b.n	800a4f4 <__sfp+0x18>
 800a504:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a508:	b9d5      	cbnz	r5, 800a540 <__sfp+0x64>
 800a50a:	4b16      	ldr	r3, [pc, #88]	; (800a564 <__sfp+0x88>)
 800a50c:	60e3      	str	r3, [r4, #12]
 800a50e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a512:	6665      	str	r5, [r4, #100]	; 0x64
 800a514:	f000 f847 	bl	800a5a6 <__retarget_lock_init_recursive>
 800a518:	f7ff ff96 	bl	800a448 <__sfp_lock_release>
 800a51c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a520:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a524:	6025      	str	r5, [r4, #0]
 800a526:	61a5      	str	r5, [r4, #24]
 800a528:	2208      	movs	r2, #8
 800a52a:	4629      	mov	r1, r5
 800a52c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a530:	f7fb fd20 	bl	8005f74 <memset>
 800a534:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a538:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a53c:	4620      	mov	r0, r4
 800a53e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a540:	3468      	adds	r4, #104	; 0x68
 800a542:	e7d9      	b.n	800a4f8 <__sfp+0x1c>
 800a544:	2104      	movs	r1, #4
 800a546:	4638      	mov	r0, r7
 800a548:	f7ff ff62 	bl	800a410 <__sfmoreglue>
 800a54c:	4604      	mov	r4, r0
 800a54e:	6030      	str	r0, [r6, #0]
 800a550:	2800      	cmp	r0, #0
 800a552:	d1d5      	bne.n	800a500 <__sfp+0x24>
 800a554:	f7ff ff78 	bl	800a448 <__sfp_lock_release>
 800a558:	230c      	movs	r3, #12
 800a55a:	603b      	str	r3, [r7, #0]
 800a55c:	e7ee      	b.n	800a53c <__sfp+0x60>
 800a55e:	bf00      	nop
 800a560:	0800b060 	.word	0x0800b060
 800a564:	ffff0001 	.word	0xffff0001

0800a568 <_fwalk_reent>:
 800a568:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a56c:	4606      	mov	r6, r0
 800a56e:	4688      	mov	r8, r1
 800a570:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a574:	2700      	movs	r7, #0
 800a576:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a57a:	f1b9 0901 	subs.w	r9, r9, #1
 800a57e:	d505      	bpl.n	800a58c <_fwalk_reent+0x24>
 800a580:	6824      	ldr	r4, [r4, #0]
 800a582:	2c00      	cmp	r4, #0
 800a584:	d1f7      	bne.n	800a576 <_fwalk_reent+0xe>
 800a586:	4638      	mov	r0, r7
 800a588:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a58c:	89ab      	ldrh	r3, [r5, #12]
 800a58e:	2b01      	cmp	r3, #1
 800a590:	d907      	bls.n	800a5a2 <_fwalk_reent+0x3a>
 800a592:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a596:	3301      	adds	r3, #1
 800a598:	d003      	beq.n	800a5a2 <_fwalk_reent+0x3a>
 800a59a:	4629      	mov	r1, r5
 800a59c:	4630      	mov	r0, r6
 800a59e:	47c0      	blx	r8
 800a5a0:	4307      	orrs	r7, r0
 800a5a2:	3568      	adds	r5, #104	; 0x68
 800a5a4:	e7e9      	b.n	800a57a <_fwalk_reent+0x12>

0800a5a6 <__retarget_lock_init_recursive>:
 800a5a6:	4770      	bx	lr

0800a5a8 <__retarget_lock_acquire_recursive>:
 800a5a8:	4770      	bx	lr

0800a5aa <__retarget_lock_release_recursive>:
 800a5aa:	4770      	bx	lr

0800a5ac <__swhatbuf_r>:
 800a5ac:	b570      	push	{r4, r5, r6, lr}
 800a5ae:	460e      	mov	r6, r1
 800a5b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5b4:	2900      	cmp	r1, #0
 800a5b6:	b096      	sub	sp, #88	; 0x58
 800a5b8:	4614      	mov	r4, r2
 800a5ba:	461d      	mov	r5, r3
 800a5bc:	da08      	bge.n	800a5d0 <__swhatbuf_r+0x24>
 800a5be:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	602a      	str	r2, [r5, #0]
 800a5c6:	061a      	lsls	r2, r3, #24
 800a5c8:	d410      	bmi.n	800a5ec <__swhatbuf_r+0x40>
 800a5ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a5ce:	e00e      	b.n	800a5ee <__swhatbuf_r+0x42>
 800a5d0:	466a      	mov	r2, sp
 800a5d2:	f000 f903 	bl	800a7dc <_fstat_r>
 800a5d6:	2800      	cmp	r0, #0
 800a5d8:	dbf1      	blt.n	800a5be <__swhatbuf_r+0x12>
 800a5da:	9a01      	ldr	r2, [sp, #4]
 800a5dc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a5e0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a5e4:	425a      	negs	r2, r3
 800a5e6:	415a      	adcs	r2, r3
 800a5e8:	602a      	str	r2, [r5, #0]
 800a5ea:	e7ee      	b.n	800a5ca <__swhatbuf_r+0x1e>
 800a5ec:	2340      	movs	r3, #64	; 0x40
 800a5ee:	2000      	movs	r0, #0
 800a5f0:	6023      	str	r3, [r4, #0]
 800a5f2:	b016      	add	sp, #88	; 0x58
 800a5f4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a5f8 <__smakebuf_r>:
 800a5f8:	898b      	ldrh	r3, [r1, #12]
 800a5fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a5fc:	079d      	lsls	r5, r3, #30
 800a5fe:	4606      	mov	r6, r0
 800a600:	460c      	mov	r4, r1
 800a602:	d507      	bpl.n	800a614 <__smakebuf_r+0x1c>
 800a604:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a608:	6023      	str	r3, [r4, #0]
 800a60a:	6123      	str	r3, [r4, #16]
 800a60c:	2301      	movs	r3, #1
 800a60e:	6163      	str	r3, [r4, #20]
 800a610:	b002      	add	sp, #8
 800a612:	bd70      	pop	{r4, r5, r6, pc}
 800a614:	ab01      	add	r3, sp, #4
 800a616:	466a      	mov	r2, sp
 800a618:	f7ff ffc8 	bl	800a5ac <__swhatbuf_r>
 800a61c:	9900      	ldr	r1, [sp, #0]
 800a61e:	4605      	mov	r5, r0
 800a620:	4630      	mov	r0, r6
 800a622:	f7ff f957 	bl	80098d4 <_malloc_r>
 800a626:	b948      	cbnz	r0, 800a63c <__smakebuf_r+0x44>
 800a628:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a62c:	059a      	lsls	r2, r3, #22
 800a62e:	d4ef      	bmi.n	800a610 <__smakebuf_r+0x18>
 800a630:	f023 0303 	bic.w	r3, r3, #3
 800a634:	f043 0302 	orr.w	r3, r3, #2
 800a638:	81a3      	strh	r3, [r4, #12]
 800a63a:	e7e3      	b.n	800a604 <__smakebuf_r+0xc>
 800a63c:	4b0d      	ldr	r3, [pc, #52]	; (800a674 <__smakebuf_r+0x7c>)
 800a63e:	62b3      	str	r3, [r6, #40]	; 0x28
 800a640:	89a3      	ldrh	r3, [r4, #12]
 800a642:	6020      	str	r0, [r4, #0]
 800a644:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a648:	81a3      	strh	r3, [r4, #12]
 800a64a:	9b00      	ldr	r3, [sp, #0]
 800a64c:	6163      	str	r3, [r4, #20]
 800a64e:	9b01      	ldr	r3, [sp, #4]
 800a650:	6120      	str	r0, [r4, #16]
 800a652:	b15b      	cbz	r3, 800a66c <__smakebuf_r+0x74>
 800a654:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a658:	4630      	mov	r0, r6
 800a65a:	f000 f8d1 	bl	800a800 <_isatty_r>
 800a65e:	b128      	cbz	r0, 800a66c <__smakebuf_r+0x74>
 800a660:	89a3      	ldrh	r3, [r4, #12]
 800a662:	f023 0303 	bic.w	r3, r3, #3
 800a666:	f043 0301 	orr.w	r3, r3, #1
 800a66a:	81a3      	strh	r3, [r4, #12]
 800a66c:	89a0      	ldrh	r0, [r4, #12]
 800a66e:	4305      	orrs	r5, r0
 800a670:	81a5      	strh	r5, [r4, #12]
 800a672:	e7cd      	b.n	800a610 <__smakebuf_r+0x18>
 800a674:	0800a405 	.word	0x0800a405

0800a678 <_malloc_usable_size_r>:
 800a678:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a67c:	1f18      	subs	r0, r3, #4
 800a67e:	2b00      	cmp	r3, #0
 800a680:	bfbc      	itt	lt
 800a682:	580b      	ldrlt	r3, [r1, r0]
 800a684:	18c0      	addlt	r0, r0, r3
 800a686:	4770      	bx	lr

0800a688 <_raise_r>:
 800a688:	291f      	cmp	r1, #31
 800a68a:	b538      	push	{r3, r4, r5, lr}
 800a68c:	4604      	mov	r4, r0
 800a68e:	460d      	mov	r5, r1
 800a690:	d904      	bls.n	800a69c <_raise_r+0x14>
 800a692:	2316      	movs	r3, #22
 800a694:	6003      	str	r3, [r0, #0]
 800a696:	f04f 30ff 	mov.w	r0, #4294967295
 800a69a:	bd38      	pop	{r3, r4, r5, pc}
 800a69c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a69e:	b112      	cbz	r2, 800a6a6 <_raise_r+0x1e>
 800a6a0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a6a4:	b94b      	cbnz	r3, 800a6ba <_raise_r+0x32>
 800a6a6:	4620      	mov	r0, r4
 800a6a8:	f000 f830 	bl	800a70c <_getpid_r>
 800a6ac:	462a      	mov	r2, r5
 800a6ae:	4601      	mov	r1, r0
 800a6b0:	4620      	mov	r0, r4
 800a6b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a6b6:	f000 b817 	b.w	800a6e8 <_kill_r>
 800a6ba:	2b01      	cmp	r3, #1
 800a6bc:	d00a      	beq.n	800a6d4 <_raise_r+0x4c>
 800a6be:	1c59      	adds	r1, r3, #1
 800a6c0:	d103      	bne.n	800a6ca <_raise_r+0x42>
 800a6c2:	2316      	movs	r3, #22
 800a6c4:	6003      	str	r3, [r0, #0]
 800a6c6:	2001      	movs	r0, #1
 800a6c8:	e7e7      	b.n	800a69a <_raise_r+0x12>
 800a6ca:	2400      	movs	r4, #0
 800a6cc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a6d0:	4628      	mov	r0, r5
 800a6d2:	4798      	blx	r3
 800a6d4:	2000      	movs	r0, #0
 800a6d6:	e7e0      	b.n	800a69a <_raise_r+0x12>

0800a6d8 <raise>:
 800a6d8:	4b02      	ldr	r3, [pc, #8]	; (800a6e4 <raise+0xc>)
 800a6da:	4601      	mov	r1, r0
 800a6dc:	6818      	ldr	r0, [r3, #0]
 800a6de:	f7ff bfd3 	b.w	800a688 <_raise_r>
 800a6e2:	bf00      	nop
 800a6e4:	2000000c 	.word	0x2000000c

0800a6e8 <_kill_r>:
 800a6e8:	b538      	push	{r3, r4, r5, lr}
 800a6ea:	4d07      	ldr	r5, [pc, #28]	; (800a708 <_kill_r+0x20>)
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	4604      	mov	r4, r0
 800a6f0:	4608      	mov	r0, r1
 800a6f2:	4611      	mov	r1, r2
 800a6f4:	602b      	str	r3, [r5, #0]
 800a6f6:	f7f7 f94d 	bl	8001994 <_kill>
 800a6fa:	1c43      	adds	r3, r0, #1
 800a6fc:	d102      	bne.n	800a704 <_kill_r+0x1c>
 800a6fe:	682b      	ldr	r3, [r5, #0]
 800a700:	b103      	cbz	r3, 800a704 <_kill_r+0x1c>
 800a702:	6023      	str	r3, [r4, #0]
 800a704:	bd38      	pop	{r3, r4, r5, pc}
 800a706:	bf00      	nop
 800a708:	20000384 	.word	0x20000384

0800a70c <_getpid_r>:
 800a70c:	f7f7 b93a 	b.w	8001984 <_getpid>

0800a710 <__sread>:
 800a710:	b510      	push	{r4, lr}
 800a712:	460c      	mov	r4, r1
 800a714:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a718:	f000 f894 	bl	800a844 <_read_r>
 800a71c:	2800      	cmp	r0, #0
 800a71e:	bfab      	itete	ge
 800a720:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a722:	89a3      	ldrhlt	r3, [r4, #12]
 800a724:	181b      	addge	r3, r3, r0
 800a726:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a72a:	bfac      	ite	ge
 800a72c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a72e:	81a3      	strhlt	r3, [r4, #12]
 800a730:	bd10      	pop	{r4, pc}

0800a732 <__swrite>:
 800a732:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a736:	461f      	mov	r7, r3
 800a738:	898b      	ldrh	r3, [r1, #12]
 800a73a:	05db      	lsls	r3, r3, #23
 800a73c:	4605      	mov	r5, r0
 800a73e:	460c      	mov	r4, r1
 800a740:	4616      	mov	r6, r2
 800a742:	d505      	bpl.n	800a750 <__swrite+0x1e>
 800a744:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a748:	2302      	movs	r3, #2
 800a74a:	2200      	movs	r2, #0
 800a74c:	f000 f868 	bl	800a820 <_lseek_r>
 800a750:	89a3      	ldrh	r3, [r4, #12]
 800a752:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a756:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a75a:	81a3      	strh	r3, [r4, #12]
 800a75c:	4632      	mov	r2, r6
 800a75e:	463b      	mov	r3, r7
 800a760:	4628      	mov	r0, r5
 800a762:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a766:	f000 b817 	b.w	800a798 <_write_r>

0800a76a <__sseek>:
 800a76a:	b510      	push	{r4, lr}
 800a76c:	460c      	mov	r4, r1
 800a76e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a772:	f000 f855 	bl	800a820 <_lseek_r>
 800a776:	1c43      	adds	r3, r0, #1
 800a778:	89a3      	ldrh	r3, [r4, #12]
 800a77a:	bf15      	itete	ne
 800a77c:	6560      	strne	r0, [r4, #84]	; 0x54
 800a77e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a782:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a786:	81a3      	strheq	r3, [r4, #12]
 800a788:	bf18      	it	ne
 800a78a:	81a3      	strhne	r3, [r4, #12]
 800a78c:	bd10      	pop	{r4, pc}

0800a78e <__sclose>:
 800a78e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a792:	f000 b813 	b.w	800a7bc <_close_r>
	...

0800a798 <_write_r>:
 800a798:	b538      	push	{r3, r4, r5, lr}
 800a79a:	4d07      	ldr	r5, [pc, #28]	; (800a7b8 <_write_r+0x20>)
 800a79c:	4604      	mov	r4, r0
 800a79e:	4608      	mov	r0, r1
 800a7a0:	4611      	mov	r1, r2
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	602a      	str	r2, [r5, #0]
 800a7a6:	461a      	mov	r2, r3
 800a7a8:	f7f7 f92b 	bl	8001a02 <_write>
 800a7ac:	1c43      	adds	r3, r0, #1
 800a7ae:	d102      	bne.n	800a7b6 <_write_r+0x1e>
 800a7b0:	682b      	ldr	r3, [r5, #0]
 800a7b2:	b103      	cbz	r3, 800a7b6 <_write_r+0x1e>
 800a7b4:	6023      	str	r3, [r4, #0]
 800a7b6:	bd38      	pop	{r3, r4, r5, pc}
 800a7b8:	20000384 	.word	0x20000384

0800a7bc <_close_r>:
 800a7bc:	b538      	push	{r3, r4, r5, lr}
 800a7be:	4d06      	ldr	r5, [pc, #24]	; (800a7d8 <_close_r+0x1c>)
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	4604      	mov	r4, r0
 800a7c4:	4608      	mov	r0, r1
 800a7c6:	602b      	str	r3, [r5, #0]
 800a7c8:	f7f7 f937 	bl	8001a3a <_close>
 800a7cc:	1c43      	adds	r3, r0, #1
 800a7ce:	d102      	bne.n	800a7d6 <_close_r+0x1a>
 800a7d0:	682b      	ldr	r3, [r5, #0]
 800a7d2:	b103      	cbz	r3, 800a7d6 <_close_r+0x1a>
 800a7d4:	6023      	str	r3, [r4, #0]
 800a7d6:	bd38      	pop	{r3, r4, r5, pc}
 800a7d8:	20000384 	.word	0x20000384

0800a7dc <_fstat_r>:
 800a7dc:	b538      	push	{r3, r4, r5, lr}
 800a7de:	4d07      	ldr	r5, [pc, #28]	; (800a7fc <_fstat_r+0x20>)
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	4604      	mov	r4, r0
 800a7e4:	4608      	mov	r0, r1
 800a7e6:	4611      	mov	r1, r2
 800a7e8:	602b      	str	r3, [r5, #0]
 800a7ea:	f7f7 f932 	bl	8001a52 <_fstat>
 800a7ee:	1c43      	adds	r3, r0, #1
 800a7f0:	d102      	bne.n	800a7f8 <_fstat_r+0x1c>
 800a7f2:	682b      	ldr	r3, [r5, #0]
 800a7f4:	b103      	cbz	r3, 800a7f8 <_fstat_r+0x1c>
 800a7f6:	6023      	str	r3, [r4, #0]
 800a7f8:	bd38      	pop	{r3, r4, r5, pc}
 800a7fa:	bf00      	nop
 800a7fc:	20000384 	.word	0x20000384

0800a800 <_isatty_r>:
 800a800:	b538      	push	{r3, r4, r5, lr}
 800a802:	4d06      	ldr	r5, [pc, #24]	; (800a81c <_isatty_r+0x1c>)
 800a804:	2300      	movs	r3, #0
 800a806:	4604      	mov	r4, r0
 800a808:	4608      	mov	r0, r1
 800a80a:	602b      	str	r3, [r5, #0]
 800a80c:	f7f7 f931 	bl	8001a72 <_isatty>
 800a810:	1c43      	adds	r3, r0, #1
 800a812:	d102      	bne.n	800a81a <_isatty_r+0x1a>
 800a814:	682b      	ldr	r3, [r5, #0]
 800a816:	b103      	cbz	r3, 800a81a <_isatty_r+0x1a>
 800a818:	6023      	str	r3, [r4, #0]
 800a81a:	bd38      	pop	{r3, r4, r5, pc}
 800a81c:	20000384 	.word	0x20000384

0800a820 <_lseek_r>:
 800a820:	b538      	push	{r3, r4, r5, lr}
 800a822:	4d07      	ldr	r5, [pc, #28]	; (800a840 <_lseek_r+0x20>)
 800a824:	4604      	mov	r4, r0
 800a826:	4608      	mov	r0, r1
 800a828:	4611      	mov	r1, r2
 800a82a:	2200      	movs	r2, #0
 800a82c:	602a      	str	r2, [r5, #0]
 800a82e:	461a      	mov	r2, r3
 800a830:	f7f7 f92a 	bl	8001a88 <_lseek>
 800a834:	1c43      	adds	r3, r0, #1
 800a836:	d102      	bne.n	800a83e <_lseek_r+0x1e>
 800a838:	682b      	ldr	r3, [r5, #0]
 800a83a:	b103      	cbz	r3, 800a83e <_lseek_r+0x1e>
 800a83c:	6023      	str	r3, [r4, #0]
 800a83e:	bd38      	pop	{r3, r4, r5, pc}
 800a840:	20000384 	.word	0x20000384

0800a844 <_read_r>:
 800a844:	b538      	push	{r3, r4, r5, lr}
 800a846:	4d07      	ldr	r5, [pc, #28]	; (800a864 <_read_r+0x20>)
 800a848:	4604      	mov	r4, r0
 800a84a:	4608      	mov	r0, r1
 800a84c:	4611      	mov	r1, r2
 800a84e:	2200      	movs	r2, #0
 800a850:	602a      	str	r2, [r5, #0]
 800a852:	461a      	mov	r2, r3
 800a854:	f7f7 f8b8 	bl	80019c8 <_read>
 800a858:	1c43      	adds	r3, r0, #1
 800a85a:	d102      	bne.n	800a862 <_read_r+0x1e>
 800a85c:	682b      	ldr	r3, [r5, #0]
 800a85e:	b103      	cbz	r3, 800a862 <_read_r+0x1e>
 800a860:	6023      	str	r3, [r4, #0]
 800a862:	bd38      	pop	{r3, r4, r5, pc}
 800a864:	20000384 	.word	0x20000384

0800a868 <powf>:
 800a868:	b508      	push	{r3, lr}
 800a86a:	ed2d 8b04 	vpush	{d8-d9}
 800a86e:	eeb0 8a60 	vmov.f32	s16, s1
 800a872:	eeb0 9a40 	vmov.f32	s18, s0
 800a876:	f000 f84f 	bl	800a918 <__ieee754_powf>
 800a87a:	eeb4 8a48 	vcmp.f32	s16, s16
 800a87e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a882:	eef0 8a40 	vmov.f32	s17, s0
 800a886:	d63e      	bvs.n	800a906 <powf+0x9e>
 800a888:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800a88c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a890:	d112      	bne.n	800a8b8 <powf+0x50>
 800a892:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800a896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a89a:	d039      	beq.n	800a910 <powf+0xa8>
 800a89c:	eeb0 0a48 	vmov.f32	s0, s16
 800a8a0:	f000 fb35 	bl	800af0e <finitef>
 800a8a4:	b378      	cbz	r0, 800a906 <powf+0x9e>
 800a8a6:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800a8aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8ae:	d52a      	bpl.n	800a906 <powf+0x9e>
 800a8b0:	f7fb fb36 	bl	8005f20 <__errno>
 800a8b4:	2322      	movs	r3, #34	; 0x22
 800a8b6:	e014      	b.n	800a8e2 <powf+0x7a>
 800a8b8:	f000 fb29 	bl	800af0e <finitef>
 800a8bc:	b998      	cbnz	r0, 800a8e6 <powf+0x7e>
 800a8be:	eeb0 0a49 	vmov.f32	s0, s18
 800a8c2:	f000 fb24 	bl	800af0e <finitef>
 800a8c6:	b170      	cbz	r0, 800a8e6 <powf+0x7e>
 800a8c8:	eeb0 0a48 	vmov.f32	s0, s16
 800a8cc:	f000 fb1f 	bl	800af0e <finitef>
 800a8d0:	b148      	cbz	r0, 800a8e6 <powf+0x7e>
 800a8d2:	eef4 8a68 	vcmp.f32	s17, s17
 800a8d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8da:	d7e9      	bvc.n	800a8b0 <powf+0x48>
 800a8dc:	f7fb fb20 	bl	8005f20 <__errno>
 800a8e0:	2321      	movs	r3, #33	; 0x21
 800a8e2:	6003      	str	r3, [r0, #0]
 800a8e4:	e00f      	b.n	800a906 <powf+0x9e>
 800a8e6:	eef5 8a40 	vcmp.f32	s17, #0.0
 800a8ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8ee:	d10a      	bne.n	800a906 <powf+0x9e>
 800a8f0:	eeb0 0a49 	vmov.f32	s0, s18
 800a8f4:	f000 fb0b 	bl	800af0e <finitef>
 800a8f8:	b128      	cbz	r0, 800a906 <powf+0x9e>
 800a8fa:	eeb0 0a48 	vmov.f32	s0, s16
 800a8fe:	f000 fb06 	bl	800af0e <finitef>
 800a902:	2800      	cmp	r0, #0
 800a904:	d1d4      	bne.n	800a8b0 <powf+0x48>
 800a906:	eeb0 0a68 	vmov.f32	s0, s17
 800a90a:	ecbd 8b04 	vpop	{d8-d9}
 800a90e:	bd08      	pop	{r3, pc}
 800a910:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800a914:	e7f7      	b.n	800a906 <powf+0x9e>
	...

0800a918 <__ieee754_powf>:
 800a918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a91c:	ee10 4a90 	vmov	r4, s1
 800a920:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 800a924:	ed2d 8b02 	vpush	{d8}
 800a928:	ee10 6a10 	vmov	r6, s0
 800a92c:	eeb0 8a40 	vmov.f32	s16, s0
 800a930:	eef0 8a60 	vmov.f32	s17, s1
 800a934:	d10c      	bne.n	800a950 <__ieee754_powf+0x38>
 800a936:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 800a93a:	0076      	lsls	r6, r6, #1
 800a93c:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 800a940:	f240 8296 	bls.w	800ae70 <__ieee754_powf+0x558>
 800a944:	ee38 0a28 	vadd.f32	s0, s16, s17
 800a948:	ecbd 8b02 	vpop	{d8}
 800a94c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a950:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800a954:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800a958:	dcf4      	bgt.n	800a944 <__ieee754_powf+0x2c>
 800a95a:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800a95e:	dd08      	ble.n	800a972 <__ieee754_powf+0x5a>
 800a960:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 800a964:	d1ee      	bne.n	800a944 <__ieee754_powf+0x2c>
 800a966:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 800a96a:	0064      	lsls	r4, r4, #1
 800a96c:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 800a970:	e7e6      	b.n	800a940 <__ieee754_powf+0x28>
 800a972:	2e00      	cmp	r6, #0
 800a974:	da20      	bge.n	800a9b8 <__ieee754_powf+0xa0>
 800a976:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 800a97a:	da2d      	bge.n	800a9d8 <__ieee754_powf+0xc0>
 800a97c:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800a980:	f2c0 827f 	blt.w	800ae82 <__ieee754_powf+0x56a>
 800a984:	ea4f 53e8 	mov.w	r3, r8, asr #23
 800a988:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800a98c:	fa48 f703 	asr.w	r7, r8, r3
 800a990:	fa07 f303 	lsl.w	r3, r7, r3
 800a994:	4543      	cmp	r3, r8
 800a996:	f040 8274 	bne.w	800ae82 <__ieee754_powf+0x56a>
 800a99a:	f007 0701 	and.w	r7, r7, #1
 800a99e:	f1c7 0702 	rsb	r7, r7, #2
 800a9a2:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800a9a6:	d11f      	bne.n	800a9e8 <__ieee754_powf+0xd0>
 800a9a8:	2c00      	cmp	r4, #0
 800a9aa:	f280 8267 	bge.w	800ae7c <__ieee754_powf+0x564>
 800a9ae:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800a9b2:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800a9b6:	e7c7      	b.n	800a948 <__ieee754_powf+0x30>
 800a9b8:	2700      	movs	r7, #0
 800a9ba:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800a9be:	d1f0      	bne.n	800a9a2 <__ieee754_powf+0x8a>
 800a9c0:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 800a9c4:	f000 8254 	beq.w	800ae70 <__ieee754_powf+0x558>
 800a9c8:	dd08      	ble.n	800a9dc <__ieee754_powf+0xc4>
 800a9ca:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 800acd4 <__ieee754_powf+0x3bc>
 800a9ce:	2c00      	cmp	r4, #0
 800a9d0:	bfa8      	it	ge
 800a9d2:	eeb0 0a68 	vmovge.f32	s0, s17
 800a9d6:	e7b7      	b.n	800a948 <__ieee754_powf+0x30>
 800a9d8:	2702      	movs	r7, #2
 800a9da:	e7ee      	b.n	800a9ba <__ieee754_powf+0xa2>
 800a9dc:	2c00      	cmp	r4, #0
 800a9de:	f280 824a 	bge.w	800ae76 <__ieee754_powf+0x55e>
 800a9e2:	eeb1 0a68 	vneg.f32	s0, s17
 800a9e6:	e7af      	b.n	800a948 <__ieee754_powf+0x30>
 800a9e8:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800a9ec:	d102      	bne.n	800a9f4 <__ieee754_powf+0xdc>
 800a9ee:	ee28 0a08 	vmul.f32	s0, s16, s16
 800a9f2:	e7a9      	b.n	800a948 <__ieee754_powf+0x30>
 800a9f4:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800a9f8:	eeb0 0a48 	vmov.f32	s0, s16
 800a9fc:	d107      	bne.n	800aa0e <__ieee754_powf+0xf6>
 800a9fe:	2e00      	cmp	r6, #0
 800aa00:	db05      	blt.n	800aa0e <__ieee754_powf+0xf6>
 800aa02:	ecbd 8b02 	vpop	{d8}
 800aa06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa0a:	f000 ba53 	b.w	800aeb4 <__ieee754_sqrtf>
 800aa0e:	f000 fa77 	bl	800af00 <fabsf>
 800aa12:	b125      	cbz	r5, 800aa1e <__ieee754_powf+0x106>
 800aa14:	f026 4340 	bic.w	r3, r6, #3221225472	; 0xc0000000
 800aa18:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800aa1c:	d116      	bne.n	800aa4c <__ieee754_powf+0x134>
 800aa1e:	2c00      	cmp	r4, #0
 800aa20:	bfbc      	itt	lt
 800aa22:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800aa26:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800aa2a:	2e00      	cmp	r6, #0
 800aa2c:	da8c      	bge.n	800a948 <__ieee754_powf+0x30>
 800aa2e:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 800aa32:	ea55 0307 	orrs.w	r3, r5, r7
 800aa36:	d104      	bne.n	800aa42 <__ieee754_powf+0x12a>
 800aa38:	ee70 7a40 	vsub.f32	s15, s0, s0
 800aa3c:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800aa40:	e782      	b.n	800a948 <__ieee754_powf+0x30>
 800aa42:	2f01      	cmp	r7, #1
 800aa44:	d180      	bne.n	800a948 <__ieee754_powf+0x30>
 800aa46:	eeb1 0a40 	vneg.f32	s0, s0
 800aa4a:	e77d      	b.n	800a948 <__ieee754_powf+0x30>
 800aa4c:	0ff0      	lsrs	r0, r6, #31
 800aa4e:	3801      	subs	r0, #1
 800aa50:	ea57 0300 	orrs.w	r3, r7, r0
 800aa54:	d104      	bne.n	800aa60 <__ieee754_powf+0x148>
 800aa56:	ee38 8a48 	vsub.f32	s16, s16, s16
 800aa5a:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800aa5e:	e773      	b.n	800a948 <__ieee754_powf+0x30>
 800aa60:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 800aa64:	dd74      	ble.n	800ab50 <__ieee754_powf+0x238>
 800aa66:	4b9c      	ldr	r3, [pc, #624]	; (800acd8 <__ieee754_powf+0x3c0>)
 800aa68:	429d      	cmp	r5, r3
 800aa6a:	dc08      	bgt.n	800aa7e <__ieee754_powf+0x166>
 800aa6c:	2c00      	cmp	r4, #0
 800aa6e:	da0b      	bge.n	800aa88 <__ieee754_powf+0x170>
 800aa70:	2000      	movs	r0, #0
 800aa72:	ecbd 8b02 	vpop	{d8}
 800aa76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa7a:	f000 ba3b 	b.w	800aef4 <__math_oflowf>
 800aa7e:	4b97      	ldr	r3, [pc, #604]	; (800acdc <__ieee754_powf+0x3c4>)
 800aa80:	429d      	cmp	r5, r3
 800aa82:	dd08      	ble.n	800aa96 <__ieee754_powf+0x17e>
 800aa84:	2c00      	cmp	r4, #0
 800aa86:	dcf3      	bgt.n	800aa70 <__ieee754_powf+0x158>
 800aa88:	2000      	movs	r0, #0
 800aa8a:	ecbd 8b02 	vpop	{d8}
 800aa8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa92:	f000 ba29 	b.w	800aee8 <__math_uflowf>
 800aa96:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800aa9a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800aa9e:	eddf 6a90 	vldr	s13, [pc, #576]	; 800ace0 <__ieee754_powf+0x3c8>
 800aaa2:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800aaa6:	eee0 6a67 	vfms.f32	s13, s0, s15
 800aaaa:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800aaae:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800aab2:	ee20 7a00 	vmul.f32	s14, s0, s0
 800aab6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aaba:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800ace4 <__ieee754_powf+0x3cc>
 800aabe:	ee67 7a67 	vnmul.f32	s15, s14, s15
 800aac2:	ed9f 7a89 	vldr	s14, [pc, #548]	; 800ace8 <__ieee754_powf+0x3d0>
 800aac6:	eee0 7a07 	vfma.f32	s15, s0, s14
 800aaca:	ed9f 7a88 	vldr	s14, [pc, #544]	; 800acec <__ieee754_powf+0x3d4>
 800aace:	eef0 6a67 	vmov.f32	s13, s15
 800aad2:	eee0 6a07 	vfma.f32	s13, s0, s14
 800aad6:	ee16 3a90 	vmov	r3, s13
 800aada:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800aade:	f023 030f 	bic.w	r3, r3, #15
 800aae2:	ee00 3a90 	vmov	s1, r3
 800aae6:	eee0 0a47 	vfms.f32	s1, s0, s14
 800aaea:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800aaee:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 800aaf2:	f024 040f 	bic.w	r4, r4, #15
 800aaf6:	ee07 4a10 	vmov	s14, r4
 800aafa:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800aafe:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800ab02:	ee07 3a90 	vmov	s15, r3
 800ab06:	eee7 0a27 	vfma.f32	s1, s14, s15
 800ab0a:	3f01      	subs	r7, #1
 800ab0c:	ea57 0200 	orrs.w	r2, r7, r0
 800ab10:	ee07 4a10 	vmov	s14, r4
 800ab14:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ab18:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800ab1c:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800ab20:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800ab24:	ee17 4a10 	vmov	r4, s14
 800ab28:	bf08      	it	eq
 800ab2a:	eeb0 8a40 	vmoveq.f32	s16, s0
 800ab2e:	2c00      	cmp	r4, #0
 800ab30:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800ab34:	f340 817e 	ble.w	800ae34 <__ieee754_powf+0x51c>
 800ab38:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800ab3c:	f340 80f8 	ble.w	800ad30 <__ieee754_powf+0x418>
 800ab40:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800ab44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab48:	bf4c      	ite	mi
 800ab4a:	2001      	movmi	r0, #1
 800ab4c:	2000      	movpl	r0, #0
 800ab4e:	e790      	b.n	800aa72 <__ieee754_powf+0x15a>
 800ab50:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 800ab54:	bf01      	itttt	eq
 800ab56:	eddf 7a66 	vldreq	s15, [pc, #408]	; 800acf0 <__ieee754_powf+0x3d8>
 800ab5a:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800ab5e:	f06f 0217 	mvneq.w	r2, #23
 800ab62:	ee17 5a90 	vmoveq	r5, s15
 800ab66:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800ab6a:	bf18      	it	ne
 800ab6c:	2200      	movne	r2, #0
 800ab6e:	3b7f      	subs	r3, #127	; 0x7f
 800ab70:	4413      	add	r3, r2
 800ab72:	4a60      	ldr	r2, [pc, #384]	; (800acf4 <__ieee754_powf+0x3dc>)
 800ab74:	f3c5 0516 	ubfx	r5, r5, #0, #23
 800ab78:	4295      	cmp	r5, r2
 800ab7a:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 800ab7e:	dd06      	ble.n	800ab8e <__ieee754_powf+0x276>
 800ab80:	4a5d      	ldr	r2, [pc, #372]	; (800acf8 <__ieee754_powf+0x3e0>)
 800ab82:	4295      	cmp	r5, r2
 800ab84:	f340 80a4 	ble.w	800acd0 <__ieee754_powf+0x3b8>
 800ab88:	3301      	adds	r3, #1
 800ab8a:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800ab8e:	2500      	movs	r5, #0
 800ab90:	4a5a      	ldr	r2, [pc, #360]	; (800acfc <__ieee754_powf+0x3e4>)
 800ab92:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 800ab96:	ee07 1a90 	vmov	s15, r1
 800ab9a:	ed92 7a00 	vldr	s14, [r2]
 800ab9e:	4a58      	ldr	r2, [pc, #352]	; (800ad00 <__ieee754_powf+0x3e8>)
 800aba0:	ee37 6a27 	vadd.f32	s12, s14, s15
 800aba4:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800aba8:	eec5 6a86 	vdiv.f32	s13, s11, s12
 800abac:	1049      	asrs	r1, r1, #1
 800abae:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800abb2:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800abb6:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 800abba:	ee37 5ac7 	vsub.f32	s10, s15, s14
 800abbe:	ee06 1a10 	vmov	s12, r1
 800abc2:	ee65 4a26 	vmul.f32	s9, s10, s13
 800abc6:	ee36 7a47 	vsub.f32	s14, s12, s14
 800abca:	ee14 6a90 	vmov	r6, s9
 800abce:	4016      	ands	r6, r2
 800abd0:	ee05 6a90 	vmov	s11, r6
 800abd4:	eea5 5ac6 	vfms.f32	s10, s11, s12
 800abd8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800abdc:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800ad04 <__ieee754_powf+0x3ec>
 800abe0:	eea5 5ae7 	vfms.f32	s10, s11, s15
 800abe4:	ee64 7aa4 	vmul.f32	s15, s9, s9
 800abe8:	ee25 6a26 	vmul.f32	s12, s10, s13
 800abec:	eddf 6a46 	vldr	s13, [pc, #280]	; 800ad08 <__ieee754_powf+0x3f0>
 800abf0:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800abf4:	eddf 6a45 	vldr	s13, [pc, #276]	; 800ad0c <__ieee754_powf+0x3f4>
 800abf8:	eee7 6a27 	vfma.f32	s13, s14, s15
 800abfc:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800ace0 <__ieee754_powf+0x3c8>
 800ac00:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800ac04:	eddf 6a42 	vldr	s13, [pc, #264]	; 800ad10 <__ieee754_powf+0x3f8>
 800ac08:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ac0c:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800ad14 <__ieee754_powf+0x3fc>
 800ac10:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800ac14:	ee74 6aa5 	vadd.f32	s13, s9, s11
 800ac18:	ee27 5aa7 	vmul.f32	s10, s15, s15
 800ac1c:	ee66 6a86 	vmul.f32	s13, s13, s12
 800ac20:	eee5 6a07 	vfma.f32	s13, s10, s14
 800ac24:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 800ac28:	eef0 7a45 	vmov.f32	s15, s10
 800ac2c:	eee5 7aa5 	vfma.f32	s15, s11, s11
 800ac30:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac34:	ee17 1a90 	vmov	r1, s15
 800ac38:	4011      	ands	r1, r2
 800ac3a:	ee07 1a90 	vmov	s15, r1
 800ac3e:	ee37 7ac5 	vsub.f32	s14, s15, s10
 800ac42:	eea5 7ae5 	vfms.f32	s14, s11, s11
 800ac46:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800ac4a:	ee27 7a24 	vmul.f32	s14, s14, s9
 800ac4e:	eea6 7a27 	vfma.f32	s14, s12, s15
 800ac52:	eeb0 6a47 	vmov.f32	s12, s14
 800ac56:	eea5 6aa7 	vfma.f32	s12, s11, s15
 800ac5a:	ee16 1a10 	vmov	r1, s12
 800ac5e:	4011      	ands	r1, r2
 800ac60:	ee06 1a90 	vmov	s13, r1
 800ac64:	eee5 6ae7 	vfms.f32	s13, s11, s15
 800ac68:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800ad18 <__ieee754_powf+0x400>
 800ac6c:	eddf 5a2b 	vldr	s11, [pc, #172]	; 800ad1c <__ieee754_powf+0x404>
 800ac70:	ee37 7a66 	vsub.f32	s14, s14, s13
 800ac74:	ee06 1a10 	vmov	s12, r1
 800ac78:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ac7c:	eddf 7a28 	vldr	s15, [pc, #160]	; 800ad20 <__ieee754_powf+0x408>
 800ac80:	4928      	ldr	r1, [pc, #160]	; (800ad24 <__ieee754_powf+0x40c>)
 800ac82:	eea6 7a27 	vfma.f32	s14, s12, s15
 800ac86:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 800ac8a:	edd1 7a00 	vldr	s15, [r1]
 800ac8e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ac92:	ee07 3a90 	vmov	s15, r3
 800ac96:	4b24      	ldr	r3, [pc, #144]	; (800ad28 <__ieee754_powf+0x410>)
 800ac98:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800ac9c:	eef0 7a47 	vmov.f32	s15, s14
 800aca0:	eee6 7a25 	vfma.f32	s15, s12, s11
 800aca4:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800aca8:	edd5 0a00 	vldr	s1, [r5]
 800acac:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800acb0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800acb4:	ee17 3a90 	vmov	r3, s15
 800acb8:	4013      	ands	r3, r2
 800acba:	ee07 3a90 	vmov	s15, r3
 800acbe:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800acc2:	ee76 6ae0 	vsub.f32	s13, s13, s1
 800acc6:	eee6 6a65 	vfms.f32	s13, s12, s11
 800acca:	ee77 7a66 	vsub.f32	s15, s14, s13
 800acce:	e70e      	b.n	800aaee <__ieee754_powf+0x1d6>
 800acd0:	2501      	movs	r5, #1
 800acd2:	e75d      	b.n	800ab90 <__ieee754_powf+0x278>
 800acd4:	00000000 	.word	0x00000000
 800acd8:	3f7ffff3 	.word	0x3f7ffff3
 800acdc:	3f800007 	.word	0x3f800007
 800ace0:	3eaaaaab 	.word	0x3eaaaaab
 800ace4:	3fb8aa3b 	.word	0x3fb8aa3b
 800ace8:	36eca570 	.word	0x36eca570
 800acec:	3fb8aa00 	.word	0x3fb8aa00
 800acf0:	4b800000 	.word	0x4b800000
 800acf4:	001cc471 	.word	0x001cc471
 800acf8:	005db3d6 	.word	0x005db3d6
 800acfc:	0800b504 	.word	0x0800b504
 800ad00:	fffff000 	.word	0xfffff000
 800ad04:	3e6c3255 	.word	0x3e6c3255
 800ad08:	3e53f142 	.word	0x3e53f142
 800ad0c:	3e8ba305 	.word	0x3e8ba305
 800ad10:	3edb6db7 	.word	0x3edb6db7
 800ad14:	3f19999a 	.word	0x3f19999a
 800ad18:	3f76384f 	.word	0x3f76384f
 800ad1c:	3f763800 	.word	0x3f763800
 800ad20:	369dc3a0 	.word	0x369dc3a0
 800ad24:	0800b514 	.word	0x0800b514
 800ad28:	0800b50c 	.word	0x0800b50c
 800ad2c:	3338aa3c 	.word	0x3338aa3c
 800ad30:	f040 8095 	bne.w	800ae5e <__ieee754_powf+0x546>
 800ad34:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800ad2c <__ieee754_powf+0x414>
 800ad38:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ad3c:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800ad40:	eef4 6ac7 	vcmpe.f32	s13, s14
 800ad44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad48:	f73f aefa 	bgt.w	800ab40 <__ieee754_powf+0x228>
 800ad4c:	15db      	asrs	r3, r3, #23
 800ad4e:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 800ad52:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800ad56:	4103      	asrs	r3, r0
 800ad58:	4423      	add	r3, r4
 800ad5a:	494b      	ldr	r1, [pc, #300]	; (800ae88 <__ieee754_powf+0x570>)
 800ad5c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800ad60:	3a7f      	subs	r2, #127	; 0x7f
 800ad62:	4111      	asrs	r1, r2
 800ad64:	ea23 0101 	bic.w	r1, r3, r1
 800ad68:	ee07 1a10 	vmov	s14, r1
 800ad6c:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800ad70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800ad74:	f1c2 0217 	rsb	r2, r2, #23
 800ad78:	4110      	asrs	r0, r2
 800ad7a:	2c00      	cmp	r4, #0
 800ad7c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ad80:	bfb8      	it	lt
 800ad82:	4240      	neglt	r0, r0
 800ad84:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800ad88:	ed9f 0a40 	vldr	s0, [pc, #256]	; 800ae8c <__ieee754_powf+0x574>
 800ad8c:	eddf 6a40 	vldr	s13, [pc, #256]	; 800ae90 <__ieee754_powf+0x578>
 800ad90:	ee17 3a10 	vmov	r3, s14
 800ad94:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800ad98:	f023 030f 	bic.w	r3, r3, #15
 800ad9c:	ee07 3a10 	vmov	s14, r3
 800ada0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ada4:	ee27 0a00 	vmul.f32	s0, s14, s0
 800ada8:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800adac:	eddf 7a39 	vldr	s15, [pc, #228]	; 800ae94 <__ieee754_powf+0x57c>
 800adb0:	eea0 0aa7 	vfma.f32	s0, s1, s15
 800adb4:	eef0 7a40 	vmov.f32	s15, s0
 800adb8:	eee7 7a26 	vfma.f32	s15, s14, s13
 800adbc:	eeb0 6a67 	vmov.f32	s12, s15
 800adc0:	eea7 6a66 	vfms.f32	s12, s14, s13
 800adc4:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800adc8:	ee30 0a46 	vsub.f32	s0, s0, s12
 800adcc:	eddf 6a32 	vldr	s13, [pc, #200]	; 800ae98 <__ieee754_powf+0x580>
 800add0:	ed9f 6a32 	vldr	s12, [pc, #200]	; 800ae9c <__ieee754_powf+0x584>
 800add4:	eee7 6a06 	vfma.f32	s13, s14, s12
 800add8:	ed9f 6a31 	vldr	s12, [pc, #196]	; 800aea0 <__ieee754_powf+0x588>
 800addc:	eea6 6a87 	vfma.f32	s12, s13, s14
 800ade0:	eddf 6a30 	vldr	s13, [pc, #192]	; 800aea4 <__ieee754_powf+0x58c>
 800ade4:	eee6 6a07 	vfma.f32	s13, s12, s14
 800ade8:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 800aea8 <__ieee754_powf+0x590>
 800adec:	eea6 6a87 	vfma.f32	s12, s13, s14
 800adf0:	eef0 6a67 	vmov.f32	s13, s15
 800adf4:	eee6 6a47 	vfms.f32	s13, s12, s14
 800adf8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800adfc:	ee27 6aa6 	vmul.f32	s12, s15, s13
 800ae00:	ee76 6ac7 	vsub.f32	s13, s13, s14
 800ae04:	eea7 0a80 	vfma.f32	s0, s15, s0
 800ae08:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800ae0c:	ee37 0a40 	vsub.f32	s0, s14, s0
 800ae10:	ee70 7a67 	vsub.f32	s15, s0, s15
 800ae14:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800ae18:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ae1c:	ee10 3a10 	vmov	r3, s0
 800ae20:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800ae24:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ae28:	da1f      	bge.n	800ae6a <__ieee754_powf+0x552>
 800ae2a:	f000 f87d 	bl	800af28 <scalbnf>
 800ae2e:	ee20 0a08 	vmul.f32	s0, s0, s16
 800ae32:	e589      	b.n	800a948 <__ieee754_powf+0x30>
 800ae34:	4a1d      	ldr	r2, [pc, #116]	; (800aeac <__ieee754_powf+0x594>)
 800ae36:	4293      	cmp	r3, r2
 800ae38:	dd07      	ble.n	800ae4a <__ieee754_powf+0x532>
 800ae3a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800ae3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae42:	bf4c      	ite	mi
 800ae44:	2001      	movmi	r0, #1
 800ae46:	2000      	movpl	r0, #0
 800ae48:	e61f      	b.n	800aa8a <__ieee754_powf+0x172>
 800ae4a:	d108      	bne.n	800ae5e <__ieee754_powf+0x546>
 800ae4c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ae50:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800ae54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae58:	f6ff af78 	blt.w	800ad4c <__ieee754_powf+0x434>
 800ae5c:	e7ed      	b.n	800ae3a <__ieee754_powf+0x522>
 800ae5e:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800ae62:	f73f af73 	bgt.w	800ad4c <__ieee754_powf+0x434>
 800ae66:	2000      	movs	r0, #0
 800ae68:	e78c      	b.n	800ad84 <__ieee754_powf+0x46c>
 800ae6a:	ee00 3a10 	vmov	s0, r3
 800ae6e:	e7de      	b.n	800ae2e <__ieee754_powf+0x516>
 800ae70:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800ae74:	e568      	b.n	800a948 <__ieee754_powf+0x30>
 800ae76:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800aeb0 <__ieee754_powf+0x598>
 800ae7a:	e565      	b.n	800a948 <__ieee754_powf+0x30>
 800ae7c:	eeb0 0a48 	vmov.f32	s0, s16
 800ae80:	e562      	b.n	800a948 <__ieee754_powf+0x30>
 800ae82:	2700      	movs	r7, #0
 800ae84:	e58d      	b.n	800a9a2 <__ieee754_powf+0x8a>
 800ae86:	bf00      	nop
 800ae88:	007fffff 	.word	0x007fffff
 800ae8c:	35bfbe8c 	.word	0x35bfbe8c
 800ae90:	3f317200 	.word	0x3f317200
 800ae94:	3f317218 	.word	0x3f317218
 800ae98:	b5ddea0e 	.word	0xb5ddea0e
 800ae9c:	3331bb4c 	.word	0x3331bb4c
 800aea0:	388ab355 	.word	0x388ab355
 800aea4:	bb360b61 	.word	0xbb360b61
 800aea8:	3e2aaaab 	.word	0x3e2aaaab
 800aeac:	43160000 	.word	0x43160000
 800aeb0:	00000000 	.word	0x00000000

0800aeb4 <__ieee754_sqrtf>:
 800aeb4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800aeb8:	4770      	bx	lr

0800aeba <with_errnof>:
 800aeba:	b513      	push	{r0, r1, r4, lr}
 800aebc:	4604      	mov	r4, r0
 800aebe:	ed8d 0a01 	vstr	s0, [sp, #4]
 800aec2:	f7fb f82d 	bl	8005f20 <__errno>
 800aec6:	ed9d 0a01 	vldr	s0, [sp, #4]
 800aeca:	6004      	str	r4, [r0, #0]
 800aecc:	b002      	add	sp, #8
 800aece:	bd10      	pop	{r4, pc}

0800aed0 <xflowf>:
 800aed0:	b130      	cbz	r0, 800aee0 <xflowf+0x10>
 800aed2:	eef1 7a40 	vneg.f32	s15, s0
 800aed6:	ee27 0a80 	vmul.f32	s0, s15, s0
 800aeda:	2022      	movs	r0, #34	; 0x22
 800aedc:	f7ff bfed 	b.w	800aeba <with_errnof>
 800aee0:	eef0 7a40 	vmov.f32	s15, s0
 800aee4:	e7f7      	b.n	800aed6 <xflowf+0x6>
	...

0800aee8 <__math_uflowf>:
 800aee8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800aef0 <__math_uflowf+0x8>
 800aeec:	f7ff bff0 	b.w	800aed0 <xflowf>
 800aef0:	10000000 	.word	0x10000000

0800aef4 <__math_oflowf>:
 800aef4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800aefc <__math_oflowf+0x8>
 800aef8:	f7ff bfea 	b.w	800aed0 <xflowf>
 800aefc:	70000000 	.word	0x70000000

0800af00 <fabsf>:
 800af00:	ee10 3a10 	vmov	r3, s0
 800af04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800af08:	ee00 3a10 	vmov	s0, r3
 800af0c:	4770      	bx	lr

0800af0e <finitef>:
 800af0e:	b082      	sub	sp, #8
 800af10:	ed8d 0a01 	vstr	s0, [sp, #4]
 800af14:	9801      	ldr	r0, [sp, #4]
 800af16:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800af1a:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800af1e:	bfac      	ite	ge
 800af20:	2000      	movge	r0, #0
 800af22:	2001      	movlt	r0, #1
 800af24:	b002      	add	sp, #8
 800af26:	4770      	bx	lr

0800af28 <scalbnf>:
 800af28:	ee10 3a10 	vmov	r3, s0
 800af2c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800af30:	d025      	beq.n	800af7e <scalbnf+0x56>
 800af32:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800af36:	d302      	bcc.n	800af3e <scalbnf+0x16>
 800af38:	ee30 0a00 	vadd.f32	s0, s0, s0
 800af3c:	4770      	bx	lr
 800af3e:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800af42:	d122      	bne.n	800af8a <scalbnf+0x62>
 800af44:	4b2a      	ldr	r3, [pc, #168]	; (800aff0 <scalbnf+0xc8>)
 800af46:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800aff4 <scalbnf+0xcc>
 800af4a:	4298      	cmp	r0, r3
 800af4c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800af50:	db16      	blt.n	800af80 <scalbnf+0x58>
 800af52:	ee10 3a10 	vmov	r3, s0
 800af56:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800af5a:	3a19      	subs	r2, #25
 800af5c:	4402      	add	r2, r0
 800af5e:	2afe      	cmp	r2, #254	; 0xfe
 800af60:	dd15      	ble.n	800af8e <scalbnf+0x66>
 800af62:	ee10 3a10 	vmov	r3, s0
 800af66:	eddf 7a24 	vldr	s15, [pc, #144]	; 800aff8 <scalbnf+0xd0>
 800af6a:	eddf 6a24 	vldr	s13, [pc, #144]	; 800affc <scalbnf+0xd4>
 800af6e:	2b00      	cmp	r3, #0
 800af70:	eeb0 7a67 	vmov.f32	s14, s15
 800af74:	bfb8      	it	lt
 800af76:	eef0 7a66 	vmovlt.f32	s15, s13
 800af7a:	ee27 0a27 	vmul.f32	s0, s14, s15
 800af7e:	4770      	bx	lr
 800af80:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800b000 <scalbnf+0xd8>
 800af84:	ee20 0a27 	vmul.f32	s0, s0, s15
 800af88:	4770      	bx	lr
 800af8a:	0dd2      	lsrs	r2, r2, #23
 800af8c:	e7e6      	b.n	800af5c <scalbnf+0x34>
 800af8e:	2a00      	cmp	r2, #0
 800af90:	dd06      	ble.n	800afa0 <scalbnf+0x78>
 800af92:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800af96:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800af9a:	ee00 3a10 	vmov	s0, r3
 800af9e:	4770      	bx	lr
 800afa0:	f112 0f16 	cmn.w	r2, #22
 800afa4:	da1a      	bge.n	800afdc <scalbnf+0xb4>
 800afa6:	f24c 3350 	movw	r3, #50000	; 0xc350
 800afaa:	4298      	cmp	r0, r3
 800afac:	ee10 3a10 	vmov	r3, s0
 800afb0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800afb4:	dd0a      	ble.n	800afcc <scalbnf+0xa4>
 800afb6:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800aff8 <scalbnf+0xd0>
 800afba:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800affc <scalbnf+0xd4>
 800afbe:	eef0 7a40 	vmov.f32	s15, s0
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	bf18      	it	ne
 800afc6:	eeb0 0a47 	vmovne.f32	s0, s14
 800afca:	e7db      	b.n	800af84 <scalbnf+0x5c>
 800afcc:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800b000 <scalbnf+0xd8>
 800afd0:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800b004 <scalbnf+0xdc>
 800afd4:	eef0 7a40 	vmov.f32	s15, s0
 800afd8:	2b00      	cmp	r3, #0
 800afda:	e7f3      	b.n	800afc4 <scalbnf+0x9c>
 800afdc:	3219      	adds	r2, #25
 800afde:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800afe2:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800afe6:	eddf 7a08 	vldr	s15, [pc, #32]	; 800b008 <scalbnf+0xe0>
 800afea:	ee07 3a10 	vmov	s14, r3
 800afee:	e7c4      	b.n	800af7a <scalbnf+0x52>
 800aff0:	ffff3cb0 	.word	0xffff3cb0
 800aff4:	4c000000 	.word	0x4c000000
 800aff8:	7149f2ca 	.word	0x7149f2ca
 800affc:	f149f2ca 	.word	0xf149f2ca
 800b000:	0da24260 	.word	0x0da24260
 800b004:	8da24260 	.word	0x8da24260
 800b008:	33000000 	.word	0x33000000

0800b00c <_init>:
 800b00c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b00e:	bf00      	nop
 800b010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b012:	bc08      	pop	{r3}
 800b014:	469e      	mov	lr, r3
 800b016:	4770      	bx	lr

0800b018 <_fini>:
 800b018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b01a:	bf00      	nop
 800b01c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b01e:	bc08      	pop	{r3}
 800b020:	469e      	mov	lr, r3
 800b022:	4770      	bx	lr
