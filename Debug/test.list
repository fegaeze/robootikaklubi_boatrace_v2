
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b2d4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f4  0800b468  0800b468  0001b468  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b95c  0800b95c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b95c  0800b95c  0001b95c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b964  0800b964  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b964  0800b964  0001b964  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b968  0800b968  0001b968  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800b96c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
 10 .bss          000001b0  200001e0  200001e0  000201e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000390  20000390  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001044f  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f1b  00000000  00000000  0003065f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e40  00000000  00000000  00032580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d78  00000000  00000000  000333c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ce3d  00000000  00000000  00034138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001174d  00000000  00000000  00050f75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000adca8  00000000  00000000  000626c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011036a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005410  00000000  00000000  001103bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b44c 	.word	0x0800b44c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800b44c 	.word	0x0800b44c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <togglePowerBtn>:


/*
 * Toggle Robot Start Button
 */
int togglePowerBtn(int powerBtnState) {
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
	if (powerBtnState) {
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d027      	beq.n	8001056 <togglePowerBtn+0x5e>
		block = 0;
 8001006:	4b19      	ldr	r3, [pc, #100]	; (800106c <togglePowerBtn+0x74>)
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
		if (!byteStream && buttonState) {
 800100c:	4b18      	ldr	r3, [pc, #96]	; (8001070 <togglePowerBtn+0x78>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d10c      	bne.n	800102e <togglePowerBtn+0x36>
 8001014:	4b17      	ldr	r3, [pc, #92]	; (8001074 <togglePowerBtn+0x7c>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d008      	beq.n	800102e <togglePowerBtn+0x36>
		  byteStream = 1;
 800101c:	4b14      	ldr	r3, [pc, #80]	; (8001070 <togglePowerBtn+0x78>)
 800101e:	2201      	movs	r2, #1
 8001020:	601a      	str	r2, [r3, #0]
		  buttonState = 0;
 8001022:	4b14      	ldr	r3, [pc, #80]	; (8001074 <togglePowerBtn+0x7c>)
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
		  return buttonState;
 8001028:	4b12      	ldr	r3, [pc, #72]	; (8001074 <togglePowerBtn+0x7c>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	e018      	b.n	8001060 <togglePowerBtn+0x68>
		} else if (!byteStream && !buttonState) {
 800102e:	4b10      	ldr	r3, [pc, #64]	; (8001070 <togglePowerBtn+0x78>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d10c      	bne.n	8001050 <togglePowerBtn+0x58>
 8001036:	4b0f      	ldr	r3, [pc, #60]	; (8001074 <togglePowerBtn+0x7c>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d108      	bne.n	8001050 <togglePowerBtn+0x58>
		  byteStream = 1;
 800103e:	4b0c      	ldr	r3, [pc, #48]	; (8001070 <togglePowerBtn+0x78>)
 8001040:	2201      	movs	r2, #1
 8001042:	601a      	str	r2, [r3, #0]
		  buttonState = 1;
 8001044:	4b0b      	ldr	r3, [pc, #44]	; (8001074 <togglePowerBtn+0x7c>)
 8001046:	2201      	movs	r2, #1
 8001048:	601a      	str	r2, [r3, #0]
		  return buttonState;
 800104a:	4b0a      	ldr	r3, [pc, #40]	; (8001074 <togglePowerBtn+0x7c>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	e007      	b.n	8001060 <togglePowerBtn+0x68>
		} else {
		  return buttonState;
 8001050:	4b08      	ldr	r3, [pc, #32]	; (8001074 <togglePowerBtn+0x7c>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	e004      	b.n	8001060 <togglePowerBtn+0x68>
		}
	} else {
		byteStream = 0;
 8001056:	4b06      	ldr	r3, [pc, #24]	; (8001070 <togglePowerBtn+0x78>)
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
		return buttonState;
 800105c:	4b05      	ldr	r3, [pc, #20]	; (8001074 <togglePowerBtn+0x7c>)
 800105e:	681b      	ldr	r3, [r3, #0]
	}
}
 8001060:	4618      	mov	r0, r3
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr
 800106c:	20000368 	.word	0x20000368
 8001070:	2000036c 	.word	0x2000036c
 8001074:	20000370 	.word	0x20000370

08001078 <ADC_Read>:
 * Read IR sensor value:
 * Update ADC channel config
 * Start, convert and read sensor value
 */
uint16_t ADC_Read(ADC_HandleTypeDef* hadc, uint8_t channel)
{
 8001078:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800107c:	b08c      	sub	sp, #48	; 0x30
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
 8001082:	460b      	mov	r3, r1
 8001084:	70fb      	strb	r3, [r7, #3]
  ADC_ChannelConfTypeDef sConfig;

  sConfig.Channel = channel;
 8001086:	78fb      	ldrb	r3, [r7, #3]
 8001088:	60fb      	str	r3, [r7, #12]
  sConfig.Rank = 1;
 800108a:	2301      	movs	r3, #1
 800108c:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800108e:	2300      	movs	r3, #0
 8001090:	617b      	str	r3, [r7, #20]

  HAL_ADC_ConfigChannel(hadc, &sConfig);
 8001092:	f107 030c 	add.w	r3, r7, #12
 8001096:	4619      	mov	r1, r3
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	f001 fb21 	bl	80026e0 <HAL_ADC_ConfigChannel>

  HAL_ADC_Start(hadc);
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f001 f98c 	bl	80023bc <HAL_ADC_Start>
  HAL_ADC_PollForConversion(hadc, 10);
 80010a4:	210a      	movs	r1, #10
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f001 fa3e 	bl	8002528 <HAL_ADC_PollForConversion>

  uint64_t sum = 0;
 80010ac:	f04f 0200 	mov.w	r2, #0
 80010b0:	f04f 0300 	mov.w	r3, #0
 80010b4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  for (int i = 0; i < 3; i++) {
 80010b8:	2300      	movs	r3, #0
 80010ba:	627b      	str	r3, [r7, #36]	; 0x24
 80010bc:	e011      	b.n	80010e2 <ADC_Read+0x6a>
  	sum+= HAL_ADC_GetValue(hadc);
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f001 fb00 	bl	80026c4 <HAL_ADC_GetValue>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2200      	movs	r2, #0
 80010c8:	461c      	mov	r4, r3
 80010ca:	4615      	mov	r5, r2
 80010cc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80010d0:	eb12 0804 	adds.w	r8, r2, r4
 80010d4:	eb43 0905 	adc.w	r9, r3, r5
 80010d8:	e9c7 890a 	strd	r8, r9, [r7, #40]	; 0x28
  for (int i = 0; i < 3; i++) {
 80010dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010de:	3301      	adds	r3, #1
 80010e0:	627b      	str	r3, [r7, #36]	; 0x24
 80010e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e4:	2b02      	cmp	r3, #2
 80010e6:	ddea      	ble.n	80010be <ADC_Read+0x46>
  }

  sum = sum / 3;
 80010e8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80010ec:	f04f 0203 	mov.w	r2, #3
 80010f0:	f04f 0300 	mov.w	r3, #0
 80010f4:	f7ff fdc8 	bl	8000c88 <__aeabi_uldivmod>
 80010f8:	4602      	mov	r2, r0
 80010fa:	460b      	mov	r3, r1
 80010fc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

  return sum;
 8001100:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
}
 8001102:	4618      	mov	r0, r3
 8001104:	3730      	adds	r7, #48	; 0x30
 8001106:	46bd      	mov	sp, r7
 8001108:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800110c <setInitialState>:
/*
 * Set Initial State:
 * Set speed to highest settings
 */
void setInitialState()
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
	HAL_Delay(5000);
 8001110:	f241 3088 	movw	r0, #5000	; 0x1388
 8001114:	f000 ff9c 	bl	8002050 <HAL_Delay>
	setMotorSpeed(-255, -255);
 8001118:	f06f 01fe 	mvn.w	r1, #254	; 0xfe
 800111c:	f06f 00fe 	mvn.w	r0, #254	; 0xfe
 8001120:	f000 f918 	bl	8001354 <setMotorSpeed>
	HAL_Delay(2000);
 8001124:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001128:	f000 ff92 	bl	8002050 <HAL_Delay>
}
 800112c:	bf00      	nop
 800112e:	bd80      	pop	{r7, pc}

08001130 <getDistance>:
 * Then based on the IR sensor datasheet graph, we determine
 * an equation to get accurate distance levels in centimeters.
 */

float getDistance(float adcVal)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b086      	sub	sp, #24
 8001134:	af00      	add	r7, sp, #0
 8001136:	ed87 0a01 	vstr	s0, [r7, #4]
  float voltageVal = (3.3 * adcVal) / 4096;
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f7ff fa04 	bl	8000548 <__aeabi_f2d>
 8001140:	a334      	add	r3, pc, #208	; (adr r3, 8001214 <getDistance+0xe4>)
 8001142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001146:	f7ff fa57 	bl	80005f8 <__aeabi_dmul>
 800114a:	4602      	mov	r2, r0
 800114c:	460b      	mov	r3, r1
 800114e:	4610      	mov	r0, r2
 8001150:	4619      	mov	r1, r3
 8001152:	f04f 0200 	mov.w	r2, #0
 8001156:	4b2a      	ldr	r3, [pc, #168]	; (8001200 <getDistance+0xd0>)
 8001158:	f7ff fb78 	bl	800084c <__aeabi_ddiv>
 800115c:	4602      	mov	r2, r0
 800115e:	460b      	mov	r3, r1
 8001160:	4610      	mov	r0, r2
 8001162:	4619      	mov	r1, r3
 8001164:	f7ff fd40 	bl	8000be8 <__aeabi_d2f>
 8001168:	4603      	mov	r3, r0
 800116a:	617b      	str	r3, [r7, #20]

  float max_distance = DISTANCE_MAX;
 800116c:	4b25      	ldr	r3, [pc, #148]	; (8001204 <getDistance+0xd4>)
 800116e:	613b      	str	r3, [r7, #16]
  float min_distance = DISTANCE_MIN;
 8001170:	4b25      	ldr	r3, [pc, #148]	; (8001208 <getDistance+0xd8>)
 8001172:	60fb      	str	r3, [r7, #12]

  float distance = 23.4993 / powf(voltageVal, 1.7);
 8001174:	eddf 0a25 	vldr	s1, [pc, #148]	; 800120c <getDistance+0xdc>
 8001178:	ed97 0a05 	vldr	s0, [r7, #20]
 800117c:	f009 fd94 	bl	800aca8 <powf>
 8001180:	ee10 3a10 	vmov	r3, s0
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff f9df 	bl	8000548 <__aeabi_f2d>
 800118a:	4602      	mov	r2, r0
 800118c:	460b      	mov	r3, r1
 800118e:	a11a      	add	r1, pc, #104	; (adr r1, 80011f8 <getDistance+0xc8>)
 8001190:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001194:	f7ff fb5a 	bl	800084c <__aeabi_ddiv>
 8001198:	4602      	mov	r2, r0
 800119a:	460b      	mov	r3, r1
 800119c:	4610      	mov	r0, r2
 800119e:	4619      	mov	r1, r3
 80011a0:	f7ff fd22 	bl	8000be8 <__aeabi_d2f>
 80011a4:	4603      	mov	r3, r0
 80011a6:	60bb      	str	r3, [r7, #8]

  distance -= DISTANCE_THRESHOLD;
 80011a8:	edd7 7a02 	vldr	s15, [r7, #8]
 80011ac:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80011b0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80011b4:	edc7 7a02 	vstr	s15, [r7, #8]

  if(distance >= DISTANCE_MAX) {
 80011b8:	edd7 7a02 	vldr	s15, [r7, #8]
 80011bc:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001210 <getDistance+0xe0>
 80011c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011c8:	db01      	blt.n	80011ce <getDistance+0x9e>
	  return max_distance;
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	e00b      	b.n	80011e6 <getDistance+0xb6>
  } else if(distance <= DISTANCE_MIN) {
 80011ce:	edd7 7a02 	vldr	s15, [r7, #8]
 80011d2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80011d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011de:	d801      	bhi.n	80011e4 <getDistance+0xb4>
	  return min_distance;
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	e000      	b.n	80011e6 <getDistance+0xb6>
  } else {
	  return distance;
 80011e4:	68bb      	ldr	r3, [r7, #8]
  }
}
 80011e6:	ee07 3a90 	vmov	s15, r3
 80011ea:	eeb0 0a67 	vmov.f32	s0, s15
 80011ee:	3718      	adds	r7, #24
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	f3af 8000 	nop.w
 80011f8:	1ff2e48f 	.word	0x1ff2e48f
 80011fc:	40377fd2 	.word	0x40377fd2
 8001200:	40b00000 	.word	0x40b00000
 8001204:	43160000 	.word	0x43160000
 8001208:	41200000 	.word	0x41200000
 800120c:	3fd9999a 	.word	0x3fd9999a
 8001210:	43160000 	.word	0x43160000
 8001214:	66666666 	.word	0x66666666
 8001218:	400a6666 	.word	0x400a6666

0800121c <calcMotorSpeed>:
 *
 * Formular:
 * https://stackoverflow.com/questions/5731863/mapping-a-numeric-range-onto-another
 * (output_end - output_start) / (input_end - input_start)
 */
float calcMotorSpeed(float dist_diff) {
 800121c:	b480      	push	{r7}
 800121e:	b085      	sub	sp, #20
 8001220:	af00      	add	r7, sp, #0
 8001222:	ed87 0a01 	vstr	s0, [r7, #4]
	float speed = MIN_SPEED + ((dist_diff / (DISTANCE_MAX - DISTANCE_MIN)) * (MAX_SPEED - MIN_SPEED));
 8001226:	ed97 7a01 	vldr	s14, [r7, #4]
 800122a:	eddf 6a17 	vldr	s13, [pc, #92]	; 8001288 <calcMotorSpeed+0x6c>
 800122e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001232:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800128c <calcMotorSpeed+0x70>
 8001236:	ee67 7a87 	vmul.f32	s15, s15, s14
 800123a:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001290 <calcMotorSpeed+0x74>
 800123e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001242:	edc7 7a03 	vstr	s15, [r7, #12]

	if(speed <= MIN_SPEED) {
 8001246:	edd7 7a03 	vldr	s15, [r7, #12]
 800124a:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001290 <calcMotorSpeed+0x74>
 800124e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001256:	d801      	bhi.n	800125c <calcMotorSpeed+0x40>
		return MIN_SPEED;
 8001258:	4b0e      	ldr	r3, [pc, #56]	; (8001294 <calcMotorSpeed+0x78>)
 800125a:	e00b      	b.n	8001274 <calcMotorSpeed+0x58>
	} else if (speed >= MAX_SPEED) {
 800125c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001260:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8001298 <calcMotorSpeed+0x7c>
 8001264:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800126c:	db01      	blt.n	8001272 <calcMotorSpeed+0x56>
		return MAX_SPEED;
 800126e:	4b0b      	ldr	r3, [pc, #44]	; (800129c <calcMotorSpeed+0x80>)
 8001270:	e000      	b.n	8001274 <calcMotorSpeed+0x58>
	} else {
		return speed;
 8001272:	68fb      	ldr	r3, [r7, #12]
	}
}
 8001274:	ee07 3a90 	vmov	s15, r3
 8001278:	eeb0 0a67 	vmov.f32	s0, s15
 800127c:	3714      	adds	r7, #20
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	430c0000 	.word	0x430c0000
 800128c:	43020000 	.word	0x43020000
 8001290:	42fa0000 	.word	0x42fa0000
 8001294:	42fa0000 	.word	0x42fa0000
 8001298:	437f0000 	.word	0x437f0000
 800129c:	437f0000 	.word	0x437f0000

080012a0 <steerBoat>:
 * if turn amount is negative, the boat needs to turn right
 * Constraint: 0 <= turn_amount <= 140
 */

void steerBoat(float left_dist, float front_dist, float right_dist)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b086      	sub	sp, #24
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	ed87 0a03 	vstr	s0, [r7, #12]
 80012aa:	edc7 0a02 	vstr	s1, [r7, #8]
 80012ae:	ed87 1a01 	vstr	s2, [r7, #4]
	float speed;
	float dist_diff = left_dist - right_dist;
 80012b2:	ed97 7a03 	vldr	s14, [r7, #12]
 80012b6:	edd7 7a01 	vldr	s15, [r7, #4]
 80012ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012be:	edc7 7a05 	vstr	s15, [r7, #20]

	if(front_dist > 100) {
 80012c2:	edd7 7a02 	vldr	s15, [r7, #8]
 80012c6:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8001350 <steerBoat+0xb0>
 80012ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012d2:	dd06      	ble.n	80012e2 <steerBoat+0x42>
		setMotorSpeed(-255, -255);
 80012d4:	f06f 01fe 	mvn.w	r1, #254	; 0xfe
 80012d8:	f06f 00fe 	mvn.w	r0, #254	; 0xfe
 80012dc:	f000 f83a 	bl	8001354 <setMotorSpeed>
			setMotorSpeed(100, 0);
		} else {
			setMotorSpeed(-255, -255);
		}
	}
}
 80012e0:	e031      	b.n	8001346 <steerBoat+0xa6>
		speed = calcMotorSpeed(fabsf(dist_diff));
 80012e2:	edd7 7a05 	vldr	s15, [r7, #20]
 80012e6:	eef0 7ae7 	vabs.f32	s15, s15
 80012ea:	eeb0 0a67 	vmov.f32	s0, s15
 80012ee:	f7ff ff95 	bl	800121c <calcMotorSpeed>
 80012f2:	ed87 0a04 	vstr	s0, [r7, #16]
		if(dist_diff < -DISTANCE_THRESHOLD) { //Left
 80012f6:	edd7 7a05 	vldr	s15, [r7, #20]
 80012fa:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 80012fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001306:	d507      	bpl.n	8001318 <steerBoat+0x78>
			HAL_Delay(100);
 8001308:	2064      	movs	r0, #100	; 0x64
 800130a:	f000 fea1 	bl	8002050 <HAL_Delay>
			setMotorSpeed(0, 100);
 800130e:	2164      	movs	r1, #100	; 0x64
 8001310:	2000      	movs	r0, #0
 8001312:	f000 f81f 	bl	8001354 <setMotorSpeed>
}
 8001316:	e016      	b.n	8001346 <steerBoat+0xa6>
		} else if(dist_diff > DISTANCE_THRESHOLD) {//Right
 8001318:	edd7 7a05 	vldr	s15, [r7, #20]
 800131c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001320:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001328:	dd07      	ble.n	800133a <steerBoat+0x9a>
			HAL_Delay(100);
 800132a:	2064      	movs	r0, #100	; 0x64
 800132c:	f000 fe90 	bl	8002050 <HAL_Delay>
			setMotorSpeed(100, 0);
 8001330:	2100      	movs	r1, #0
 8001332:	2064      	movs	r0, #100	; 0x64
 8001334:	f000 f80e 	bl	8001354 <setMotorSpeed>
}
 8001338:	e005      	b.n	8001346 <steerBoat+0xa6>
			setMotorSpeed(-255, -255);
 800133a:	f06f 01fe 	mvn.w	r1, #254	; 0xfe
 800133e:	f06f 00fe 	mvn.w	r0, #254	; 0xfe
 8001342:	f000 f807 	bl	8001354 <setMotorSpeed>
}
 8001346:	bf00      	nop
 8001348:	3718      	adds	r7, #24
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	42c80000 	.word	0x42c80000

08001354 <setMotorSpeed>:
 *
 * if turn amount is positive, the boat needs to turn left
 * if turn amount is negative, the boat needs to turn right
 * Constraint: 0 <= turn_amount <= 140
 */
void setMotorSpeed(int32_t left, int32_t right) {
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	6039      	str	r1, [r7, #0]
	if (left > 0)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2b00      	cmp	r3, #0
 8001362:	dd0c      	ble.n	800137e <setMotorSpeed+0x2a>
	{
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, -1 * left);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	425a      	negs	r2, r3
 8001368:	4b1a      	ldr	r3, [pc, #104]	; (80013d4 <setMotorSpeed+0x80>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_GPIO_WritePin(LEFT_DM_PHASE_GPIO_Port, LEFT_DM_PHASE_Pin, 1);
 800136e:	2201      	movs	r2, #1
 8001370:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001374:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001378:	f002 f872 	bl	8003460 <HAL_GPIO_WritePin>
 800137c:	e00a      	b.n	8001394 <setMotorSpeed+0x40>
	}
	else
	{
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, left);
 800137e:	4b15      	ldr	r3, [pc, #84]	; (80013d4 <setMotorSpeed+0x80>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	687a      	ldr	r2, [r7, #4]
 8001384:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_GPIO_WritePin(LEFT_DM_PHASE_GPIO_Port, LEFT_DM_PHASE_Pin, 0);
 8001386:	2200      	movs	r2, #0
 8001388:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800138c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001390:	f002 f866 	bl	8003460 <HAL_GPIO_WritePin>
	}

	if (right > 0)
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	2b00      	cmp	r3, #0
 8001398:	dd0c      	ble.n	80013b4 <setMotorSpeed+0x60>
	{
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, -1 * right);
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	425a      	negs	r2, r3
 800139e:	4b0d      	ldr	r3, [pc, #52]	; (80013d4 <setMotorSpeed+0x80>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(RIGHT_DM_PHASE_GPIO_Port, RIGHT_DM_PHASE_Pin, 0);
 80013a4:	2200      	movs	r2, #0
 80013a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013ae:	f002 f857 	bl	8003460 <HAL_GPIO_WritePin>
	else
	{
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, right);
		HAL_GPIO_WritePin(RIGHT_DM_PHASE_GPIO_Port, RIGHT_DM_PHASE_Pin, 1);
	}
}
 80013b2:	e00a      	b.n	80013ca <setMotorSpeed+0x76>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, right);
 80013b4:	4b07      	ldr	r3, [pc, #28]	; (80013d4 <setMotorSpeed+0x80>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	683a      	ldr	r2, [r7, #0]
 80013ba:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(RIGHT_DM_PHASE_GPIO_Port, RIGHT_DM_PHASE_Pin, 1);
 80013bc:	2201      	movs	r2, #1
 80013be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013c6:	f002 f84b 	bl	8003460 <HAL_GPIO_WritePin>
}
 80013ca:	bf00      	nop
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	2000024c 	.word	0x2000024c

080013d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b086      	sub	sp, #24
 80013dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013de:	f000 fdd1 	bl	8001f84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013e2:	f000 f8f3 	bl	80015cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013e6:	f000 fb17 	bl	8001a18 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80013ea:	f000 fae5 	bl	80019b8 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80013ee:	f000 f9b1 	bl	8001754 <MX_TIM1_Init>
  MX_ADC1_Init();
 80013f2:	f000 f93f 	bl	8001674 <MX_ADC1_Init>
  MX_TIM17_Init();
 80013f6:	f000 fa65 	bl	80018c4 <MX_TIM17_Init>

  uint8_t powerBtnState;

  float left_dist, front_dist, right_dist;

  float left_stored_dist = 0;
 80013fa:	f04f 0300 	mov.w	r3, #0
 80013fe:	617b      	str	r3, [r7, #20]
  float right_stored_dist = 0;
 8001400:	f04f 0300 	mov.w	r3, #0
 8001404:	613b      	str	r3, [r7, #16]

  HAL_TIM_Base_Start(&htim1);
 8001406:	486d      	ldr	r0, [pc, #436]	; (80015bc <main+0x1e4>)
 8001408:	f003 fc34 	bl	8004c74 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim17);
 800140c:	486c      	ldr	r0, [pc, #432]	; (80015c0 <main+0x1e8>)
 800140e:	f003 fc31 	bl	8004c74 <HAL_TIM_Base_Start>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001412:	2100      	movs	r1, #0
 8001414:	4869      	ldr	r0, [pc, #420]	; (80015bc <main+0x1e4>)
 8001416:	f003 fce3 	bl	8004de0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800141a:	2104      	movs	r1, #4
 800141c:	4867      	ldr	r0, [pc, #412]	; (80015bc <main+0x1e4>)
 800141e:	f003 fcdf 	bl	8004de0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 8001422:	2100      	movs	r1, #0
 8001424:	4866      	ldr	r0, [pc, #408]	; (80015c0 <main+0x1e8>)
 8001426:	f003 fcdb 	bl	8004de0 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		powerBtnState = HAL_GPIO_ReadPin(POWER_BTN_GPIO_Port, POWER_BTN_Pin);
 800142a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800142e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001432:	f001 fffd 	bl	8003430 <HAL_GPIO_ReadPin>
 8001436:	4603      	mov	r3, r0
 8001438:	73fb      	strb	r3, [r7, #15]

		if(togglePowerBtn(powerBtnState) == 0 && delay == 1) {
 800143a:	7bfb      	ldrb	r3, [r7, #15]
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff fddb 	bl	8000ff8 <togglePowerBtn>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d106      	bne.n	8001456 <main+0x7e>
 8001448:	4b5e      	ldr	r3, [pc, #376]	; (80015c4 <main+0x1ec>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	2b01      	cmp	r3, #1
 800144e:	d102      	bne.n	8001456 <main+0x7e>
			delay = 0;
 8001450:	4b5c      	ldr	r3, [pc, #368]	; (80015c4 <main+0x1ec>)
 8001452:	2200      	movs	r2, #0
 8001454:	601a      	str	r2, [r3, #0]
		}

		if (togglePowerBtn(powerBtnState) == 1) {
 8001456:	7bfb      	ldrb	r3, [r7, #15]
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff fdcd 	bl	8000ff8 <togglePowerBtn>
 800145e:	4603      	mov	r3, r0
 8001460:	2b01      	cmp	r3, #1
 8001462:	f040 80a5 	bne.w	80015b0 <main+0x1d8>

			if(delay == 0) {
 8001466:	4b57      	ldr	r3, [pc, #348]	; (80015c4 <main+0x1ec>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d104      	bne.n	8001478 <main+0xa0>
				setInitialState();
 800146e:	f7ff fe4d 	bl	800110c <setInitialState>
				delay = 1;
 8001472:	4b54      	ldr	r3, [pc, #336]	; (80015c4 <main+0x1ec>)
 8001474:	2201      	movs	r2, #1
 8001476:	601a      	str	r2, [r3, #0]
			 }

			left_dist = getDistance(ADC_Read(&hadc1, ADC_CHANNEL_1));
 8001478:	2101      	movs	r1, #1
 800147a:	4853      	ldr	r0, [pc, #332]	; (80015c8 <main+0x1f0>)
 800147c:	f7ff fdfc 	bl	8001078 <ADC_Read>
 8001480:	4603      	mov	r3, r0
 8001482:	ee07 3a90 	vmov	s15, r3
 8001486:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800148a:	eeb0 0a67 	vmov.f32	s0, s15
 800148e:	f7ff fe4f 	bl	8001130 <getDistance>
 8001492:	ed87 0a02 	vstr	s0, [r7, #8]
			front_dist = getDistance(ADC_Read(&hadc1, ADC_CHANNEL_2));
 8001496:	2102      	movs	r1, #2
 8001498:	484b      	ldr	r0, [pc, #300]	; (80015c8 <main+0x1f0>)
 800149a:	f7ff fded 	bl	8001078 <ADC_Read>
 800149e:	4603      	mov	r3, r0
 80014a0:	ee07 3a90 	vmov	s15, r3
 80014a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014a8:	eeb0 0a67 	vmov.f32	s0, s15
 80014ac:	f7ff fe40 	bl	8001130 <getDistance>
 80014b0:	ed87 0a01 	vstr	s0, [r7, #4]
			right_dist = getDistance(ADC_Read(&hadc1, ADC_CHANNEL_4));
 80014b4:	2104      	movs	r1, #4
 80014b6:	4844      	ldr	r0, [pc, #272]	; (80015c8 <main+0x1f0>)
 80014b8:	f7ff fdde 	bl	8001078 <ADC_Read>
 80014bc:	4603      	mov	r3, r0
 80014be:	ee07 3a90 	vmov	s15, r3
 80014c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014c6:	eeb0 0a67 	vmov.f32	s0, s15
 80014ca:	f7ff fe31 	bl	8001130 <getDistance>
 80014ce:	ed87 0a00 	vstr	s0, [r7]


			// Store distance values to know which turn position to favor
			if(left_stored_dist > 0 && right_stored_dist > 0) {
 80014d2:	edd7 7a05 	vldr	s15, [r7, #20]
 80014d6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014de:	dd27      	ble.n	8001530 <main+0x158>
 80014e0:	edd7 7a04 	vldr	s15, [r7, #16]
 80014e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ec:	dd20      	ble.n	8001530 <main+0x158>
				left_stored_dist += left_dist;
 80014ee:	ed97 7a05 	vldr	s14, [r7, #20]
 80014f2:	edd7 7a02 	vldr	s15, [r7, #8]
 80014f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014fa:	edc7 7a05 	vstr	s15, [r7, #20]
				right_stored_dist += right_dist;
 80014fe:	ed97 7a04 	vldr	s14, [r7, #16]
 8001502:	edd7 7a00 	vldr	s15, [r7]
 8001506:	ee77 7a27 	vadd.f32	s15, s14, s15
 800150a:	edc7 7a04 	vstr	s15, [r7, #16]

				left_stored_dist /= 2;
 800150e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001512:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001516:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800151a:	edc7 7a05 	vstr	s15, [r7, #20]
				right_stored_dist /= 2;
 800151e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001522:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001526:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800152a:	edc7 7a04 	vstr	s15, [r7, #16]
 800152e:	e003      	b.n	8001538 <main+0x160>
			} else {
				left_stored_dist = left_dist;
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	617b      	str	r3, [r7, #20]
				right_stored_dist = right_dist;
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	613b      	str	r3, [r7, #16]
			}

			if(front_dist < 15) {
 8001538:	edd7 7a01 	vldr	s15, [r7, #4]
 800153c:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8001540:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001548:	d529      	bpl.n	800159e <main+0x1c6>
				setMotorSpeed(255, 255);
 800154a:	21ff      	movs	r1, #255	; 0xff
 800154c:	20ff      	movs	r0, #255	; 0xff
 800154e:	f7ff ff01 	bl	8001354 <setMotorSpeed>
				HAL_Delay(1000);
 8001552:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001556:	f000 fd7b 	bl	8002050 <HAL_Delay>

				if(left_stored_dist < right_stored_dist) {
 800155a:	ed97 7a05 	vldr	s14, [r7, #20]
 800155e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001562:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800156a:	d505      	bpl.n	8001578 <main+0x1a0>
					setMotorSpeed(-255, 255);
 800156c:	21ff      	movs	r1, #255	; 0xff
 800156e:	f06f 00fe 	mvn.w	r0, #254	; 0xfe
 8001572:	f7ff feef 	bl	8001354 <setMotorSpeed>
 8001576:	e00d      	b.n	8001594 <main+0x1bc>
				} else if(left_stored_dist > right_stored_dist) {
 8001578:	ed97 7a05 	vldr	s14, [r7, #20]
 800157c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001580:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001584:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001588:	dd04      	ble.n	8001594 <main+0x1bc>
					setMotorSpeed(255, -255);
 800158a:	f06f 01fe 	mvn.w	r1, #254	; 0xfe
 800158e:	20ff      	movs	r0, #255	; 0xff
 8001590:	f7ff fee0 	bl	8001354 <setMotorSpeed>
				}

				HAL_Delay(300);
 8001594:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001598:	f000 fd5a 	bl	8002050 <HAL_Delay>
 800159c:	e745      	b.n	800142a <main+0x52>
			} else {
				steerBoat(left_dist, front_dist, right_dist);
 800159e:	ed97 1a00 	vldr	s2, [r7]
 80015a2:	edd7 0a01 	vldr	s1, [r7, #4]
 80015a6:	ed97 0a02 	vldr	s0, [r7, #8]
 80015aa:	f7ff fe79 	bl	80012a0 <steerBoat>
 80015ae:	e73c      	b.n	800142a <main+0x52>
			}

		} else {
			setMotorSpeed(0, 0);
 80015b0:	2100      	movs	r1, #0
 80015b2:	2000      	movs	r0, #0
 80015b4:	f7ff fece 	bl	8001354 <setMotorSpeed>
		powerBtnState = HAL_GPIO_ReadPin(POWER_BTN_GPIO_Port, POWER_BTN_Pin);
 80015b8:	e737      	b.n	800142a <main+0x52>
 80015ba:	bf00      	nop
 80015bc:	2000024c 	.word	0x2000024c
 80015c0:	20000298 	.word	0x20000298
 80015c4:	20000374 	.word	0x20000374
 80015c8:	200001fc 	.word	0x200001fc

080015cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b096      	sub	sp, #88	; 0x58
 80015d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015d2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015d6:	2228      	movs	r2, #40	; 0x28
 80015d8:	2100      	movs	r1, #0
 80015da:	4618      	mov	r0, r3
 80015dc:	f004 feec 	bl	80063b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015e0:	f107 031c 	add.w	r3, r7, #28
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]
 80015e8:	605a      	str	r2, [r3, #4]
 80015ea:	609a      	str	r2, [r3, #8]
 80015ec:	60da      	str	r2, [r3, #12]
 80015ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015f0:	1d3b      	adds	r3, r7, #4
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	605a      	str	r2, [r3, #4]
 80015f8:	609a      	str	r2, [r3, #8]
 80015fa:	60da      	str	r2, [r3, #12]
 80015fc:	611a      	str	r2, [r3, #16]
 80015fe:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001600:	2302      	movs	r3, #2
 8001602:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001604:	2301      	movs	r3, #1
 8001606:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001608:	2310      	movs	r3, #16
 800160a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800160c:	2300      	movs	r3, #0
 800160e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001610:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001614:	4618      	mov	r0, r3
 8001616:	f001 ff3b 	bl	8003490 <HAL_RCC_OscConfig>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001620:	f000 fa48 	bl	8001ab4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001624:	230f      	movs	r3, #15
 8001626:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001628:	2300      	movs	r3, #0
 800162a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800162c:	2300      	movs	r3, #0
 800162e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001630:	2300      	movs	r3, #0
 8001632:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001634:	2300      	movs	r3, #0
 8001636:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001638:	f107 031c 	add.w	r3, r7, #28
 800163c:	2100      	movs	r1, #0
 800163e:	4618      	mov	r0, r3
 8001640:	f002 ff64 	bl	800450c <HAL_RCC_ClockConfig>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800164a:	f000 fa33 	bl	8001ab4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 800164e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001652:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8001654:	2300      	movs	r3, #0
 8001656:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001658:	1d3b      	adds	r3, r7, #4
 800165a:	4618      	mov	r0, r3
 800165c:	f003 f98c 	bl	8004978 <HAL_RCCEx_PeriphCLKConfig>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001666:	f000 fa25 	bl	8001ab4 <Error_Handler>
  }
}
 800166a:	bf00      	nop
 800166c:	3758      	adds	r7, #88	; 0x58
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
	...

08001674 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b08a      	sub	sp, #40	; 0x28
 8001678:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800167a:	f107 031c 	add.w	r3, r7, #28
 800167e:	2200      	movs	r2, #0
 8001680:	601a      	str	r2, [r3, #0]
 8001682:	605a      	str	r2, [r3, #4]
 8001684:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001686:	1d3b      	adds	r3, r7, #4
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	605a      	str	r2, [r3, #4]
 800168e:	609a      	str	r2, [r3, #8]
 8001690:	60da      	str	r2, [r3, #12]
 8001692:	611a      	str	r2, [r3, #16]
 8001694:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001696:	4b2e      	ldr	r3, [pc, #184]	; (8001750 <MX_ADC1_Init+0xdc>)
 8001698:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800169c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800169e:	4b2c      	ldr	r3, [pc, #176]	; (8001750 <MX_ADC1_Init+0xdc>)
 80016a0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80016a4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80016a6:	4b2a      	ldr	r3, [pc, #168]	; (8001750 <MX_ADC1_Init+0xdc>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80016ac:	4b28      	ldr	r3, [pc, #160]	; (8001750 <MX_ADC1_Init+0xdc>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80016b2:	4b27      	ldr	r3, [pc, #156]	; (8001750 <MX_ADC1_Init+0xdc>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80016b8:	4b25      	ldr	r3, [pc, #148]	; (8001750 <MX_ADC1_Init+0xdc>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80016c0:	4b23      	ldr	r3, [pc, #140]	; (8001750 <MX_ADC1_Init+0xdc>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016c6:	4b22      	ldr	r3, [pc, #136]	; (8001750 <MX_ADC1_Init+0xdc>)
 80016c8:	2201      	movs	r2, #1
 80016ca:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016cc:	4b20      	ldr	r3, [pc, #128]	; (8001750 <MX_ADC1_Init+0xdc>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80016d2:	4b1f      	ldr	r3, [pc, #124]	; (8001750 <MX_ADC1_Init+0xdc>)
 80016d4:	2201      	movs	r2, #1
 80016d6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80016d8:	4b1d      	ldr	r3, [pc, #116]	; (8001750 <MX_ADC1_Init+0xdc>)
 80016da:	2200      	movs	r2, #0
 80016dc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80016e0:	4b1b      	ldr	r3, [pc, #108]	; (8001750 <MX_ADC1_Init+0xdc>)
 80016e2:	2204      	movs	r2, #4
 80016e4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80016e6:	4b1a      	ldr	r3, [pc, #104]	; (8001750 <MX_ADC1_Init+0xdc>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80016ec:	4b18      	ldr	r3, [pc, #96]	; (8001750 <MX_ADC1_Init+0xdc>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80016f2:	4817      	ldr	r0, [pc, #92]	; (8001750 <MX_ADC1_Init+0xdc>)
 80016f4:	f000 fcd0 	bl	8002098 <HAL_ADC_Init>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80016fe:	f000 f9d9 	bl	8001ab4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001702:	2300      	movs	r3, #0
 8001704:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001706:	f107 031c 	add.w	r3, r7, #28
 800170a:	4619      	mov	r1, r3
 800170c:	4810      	ldr	r0, [pc, #64]	; (8001750 <MX_ADC1_Init+0xdc>)
 800170e:	f001 faa7 	bl	8002c60 <HAL_ADCEx_MultiModeConfigChannel>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8001718:	f000 f9cc 	bl	8001ab4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800171c:	2301      	movs	r3, #1
 800171e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001720:	2301      	movs	r3, #1
 8001722:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001724:	2300      	movs	r3, #0
 8001726:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001728:	2300      	movs	r3, #0
 800172a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800172c:	2300      	movs	r3, #0
 800172e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001730:	2300      	movs	r3, #0
 8001732:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001734:	1d3b      	adds	r3, r7, #4
 8001736:	4619      	mov	r1, r3
 8001738:	4805      	ldr	r0, [pc, #20]	; (8001750 <MX_ADC1_Init+0xdc>)
 800173a:	f000 ffd1 	bl	80026e0 <HAL_ADC_ConfigChannel>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 8001744:	f000 f9b6 	bl	8001ab4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001748:	bf00      	nop
 800174a:	3728      	adds	r7, #40	; 0x28
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	200001fc 	.word	0x200001fc

08001754 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b09a      	sub	sp, #104	; 0x68
 8001758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800175a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800175e:	2200      	movs	r2, #0
 8001760:	601a      	str	r2, [r3, #0]
 8001762:	605a      	str	r2, [r3, #4]
 8001764:	609a      	str	r2, [r3, #8]
 8001766:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001768:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	605a      	str	r2, [r3, #4]
 8001772:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001774:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	605a      	str	r2, [r3, #4]
 800177e:	609a      	str	r2, [r3, #8]
 8001780:	60da      	str	r2, [r3, #12]
 8001782:	611a      	str	r2, [r3, #16]
 8001784:	615a      	str	r2, [r3, #20]
 8001786:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001788:	1d3b      	adds	r3, r7, #4
 800178a:	222c      	movs	r2, #44	; 0x2c
 800178c:	2100      	movs	r1, #0
 800178e:	4618      	mov	r0, r3
 8001790:	f004 fe12 	bl	80063b8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001794:	4b49      	ldr	r3, [pc, #292]	; (80018bc <MX_TIM1_Init+0x168>)
 8001796:	4a4a      	ldr	r2, [pc, #296]	; (80018c0 <MX_TIM1_Init+0x16c>)
 8001798:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 625-1;
 800179a:	4b48      	ldr	r3, [pc, #288]	; (80018bc <MX_TIM1_Init+0x168>)
 800179c:	f44f 721c 	mov.w	r2, #624	; 0x270
 80017a0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017a2:	4b46      	ldr	r3, [pc, #280]	; (80018bc <MX_TIM1_Init+0x168>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 256-1;
 80017a8:	4b44      	ldr	r3, [pc, #272]	; (80018bc <MX_TIM1_Init+0x168>)
 80017aa:	22ff      	movs	r2, #255	; 0xff
 80017ac:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017ae:	4b43      	ldr	r3, [pc, #268]	; (80018bc <MX_TIM1_Init+0x168>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80017b4:	4b41      	ldr	r3, [pc, #260]	; (80018bc <MX_TIM1_Init+0x168>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80017ba:	4b40      	ldr	r3, [pc, #256]	; (80018bc <MX_TIM1_Init+0x168>)
 80017bc:	2280      	movs	r2, #128	; 0x80
 80017be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80017c0:	483e      	ldr	r0, [pc, #248]	; (80018bc <MX_TIM1_Init+0x168>)
 80017c2:	f003 f9ff 	bl	8004bc4 <HAL_TIM_Base_Init>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80017cc:	f000 f972 	bl	8001ab4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017d4:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80017d6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80017da:	4619      	mov	r1, r3
 80017dc:	4837      	ldr	r0, [pc, #220]	; (80018bc <MX_TIM1_Init+0x168>)
 80017de:	f003 fcff 	bl	80051e0 <HAL_TIM_ConfigClockSource>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80017e8:	f000 f964 	bl	8001ab4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80017ec:	4833      	ldr	r0, [pc, #204]	; (80018bc <MX_TIM1_Init+0x168>)
 80017ee:	f003 fa95 	bl	8004d1c <HAL_TIM_PWM_Init>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d001      	beq.n	80017fc <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80017f8:	f000 f95c 	bl	8001ab4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017fc:	2300      	movs	r3, #0
 80017fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001800:	2300      	movs	r3, #0
 8001802:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001804:	2300      	movs	r3, #0
 8001806:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001808:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800180c:	4619      	mov	r1, r3
 800180e:	482b      	ldr	r0, [pc, #172]	; (80018bc <MX_TIM1_Init+0x168>)
 8001810:	f004 f98e 	bl	8005b30 <HAL_TIMEx_MasterConfigSynchronization>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800181a:	f000 f94b 	bl	8001ab4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800181e:	2360      	movs	r3, #96	; 0x60
 8001820:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001822:	2300      	movs	r3, #0
 8001824:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001826:	2300      	movs	r3, #0
 8001828:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800182a:	2300      	movs	r3, #0
 800182c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800182e:	2300      	movs	r3, #0
 8001830:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001832:	2300      	movs	r3, #0
 8001834:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001836:	2300      	movs	r3, #0
 8001838:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800183a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800183e:	2200      	movs	r2, #0
 8001840:	4619      	mov	r1, r3
 8001842:	481e      	ldr	r0, [pc, #120]	; (80018bc <MX_TIM1_Init+0x168>)
 8001844:	f003 fbb8 	bl	8004fb8 <HAL_TIM_PWM_ConfigChannel>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800184e:	f000 f931 	bl	8001ab4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001852:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001856:	2204      	movs	r2, #4
 8001858:	4619      	mov	r1, r3
 800185a:	4818      	ldr	r0, [pc, #96]	; (80018bc <MX_TIM1_Init+0x168>)
 800185c:	f003 fbac 	bl	8004fb8 <HAL_TIM_PWM_ConfigChannel>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001866:	f000 f925 	bl	8001ab4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800186a:	2300      	movs	r3, #0
 800186c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800186e:	2300      	movs	r3, #0
 8001870:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001872:	2300      	movs	r3, #0
 8001874:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001876:	2300      	movs	r3, #0
 8001878:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800187a:	2300      	movs	r3, #0
 800187c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800187e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001882:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001884:	2300      	movs	r3, #0
 8001886:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001888:	2300      	movs	r3, #0
 800188a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800188c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001890:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001892:	2300      	movs	r3, #0
 8001894:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001896:	2300      	movs	r3, #0
 8001898:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800189a:	1d3b      	adds	r3, r7, #4
 800189c:	4619      	mov	r1, r3
 800189e:	4807      	ldr	r0, [pc, #28]	; (80018bc <MX_TIM1_Init+0x168>)
 80018a0:	f004 f9b4 	bl	8005c0c <HAL_TIMEx_ConfigBreakDeadTime>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 80018aa:	f000 f903 	bl	8001ab4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80018ae:	4803      	ldr	r0, [pc, #12]	; (80018bc <MX_TIM1_Init+0x168>)
 80018b0:	f000 f99a 	bl	8001be8 <HAL_TIM_MspPostInit>

}
 80018b4:	bf00      	nop
 80018b6:	3768      	adds	r7, #104	; 0x68
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	2000024c 	.word	0x2000024c
 80018c0:	40012c00 	.word	0x40012c00

080018c4 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b092      	sub	sp, #72	; 0x48
 80018c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80018ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018ce:	2200      	movs	r2, #0
 80018d0:	601a      	str	r2, [r3, #0]
 80018d2:	605a      	str	r2, [r3, #4]
 80018d4:	609a      	str	r2, [r3, #8]
 80018d6:	60da      	str	r2, [r3, #12]
 80018d8:	611a      	str	r2, [r3, #16]
 80018da:	615a      	str	r2, [r3, #20]
 80018dc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80018de:	463b      	mov	r3, r7
 80018e0:	222c      	movs	r2, #44	; 0x2c
 80018e2:	2100      	movs	r1, #0
 80018e4:	4618      	mov	r0, r3
 80018e6:	f004 fd67 	bl	80063b8 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80018ea:	4b31      	ldr	r3, [pc, #196]	; (80019b0 <MX_TIM17_Init+0xec>)
 80018ec:	4a31      	ldr	r2, [pc, #196]	; (80019b4 <MX_TIM17_Init+0xf0>)
 80018ee:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 8-1;
 80018f0:	4b2f      	ldr	r3, [pc, #188]	; (80019b0 <MX_TIM17_Init+0xec>)
 80018f2:	2207      	movs	r2, #7
 80018f4:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018f6:	4b2e      	ldr	r3, [pc, #184]	; (80019b0 <MX_TIM17_Init+0xec>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 20000-1;
 80018fc:	4b2c      	ldr	r3, [pc, #176]	; (80019b0 <MX_TIM17_Init+0xec>)
 80018fe:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001902:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001904:	4b2a      	ldr	r3, [pc, #168]	; (80019b0 <MX_TIM17_Init+0xec>)
 8001906:	2200      	movs	r2, #0
 8001908:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800190a:	4b29      	ldr	r3, [pc, #164]	; (80019b0 <MX_TIM17_Init+0xec>)
 800190c:	2200      	movs	r2, #0
 800190e:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001910:	4b27      	ldr	r3, [pc, #156]	; (80019b0 <MX_TIM17_Init+0xec>)
 8001912:	2280      	movs	r2, #128	; 0x80
 8001914:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001916:	4826      	ldr	r0, [pc, #152]	; (80019b0 <MX_TIM17_Init+0xec>)
 8001918:	f003 f954 	bl	8004bc4 <HAL_TIM_Base_Init>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8001922:	f000 f8c7 	bl	8001ab4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8001926:	4822      	ldr	r0, [pc, #136]	; (80019b0 <MX_TIM17_Init+0xec>)
 8001928:	f003 f9f8 	bl	8004d1c <HAL_TIM_PWM_Init>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8001932:	f000 f8bf 	bl	8001ab4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001936:	2360      	movs	r3, #96	; 0x60
 8001938:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 800193a:	2300      	movs	r3, #0
 800193c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800193e:	2300      	movs	r3, #0
 8001940:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001942:	2300      	movs	r3, #0
 8001944:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001946:	2300      	movs	r3, #0
 8001948:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800194a:	2300      	movs	r3, #0
 800194c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800194e:	2300      	movs	r3, #0
 8001950:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001952:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001956:	2200      	movs	r2, #0
 8001958:	4619      	mov	r1, r3
 800195a:	4815      	ldr	r0, [pc, #84]	; (80019b0 <MX_TIM17_Init+0xec>)
 800195c:	f003 fb2c 	bl	8004fb8 <HAL_TIM_PWM_ConfigChannel>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 8001966:	f000 f8a5 	bl	8001ab4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800196a:	2300      	movs	r3, #0
 800196c:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800196e:	2300      	movs	r3, #0
 8001970:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001972:	2300      	movs	r3, #0
 8001974:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001976:	2300      	movs	r3, #0
 8001978:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800197a:	2300      	movs	r3, #0
 800197c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800197e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001982:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001984:	2300      	movs	r3, #0
 8001986:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001988:	2300      	movs	r3, #0
 800198a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 800198c:	463b      	mov	r3, r7
 800198e:	4619      	mov	r1, r3
 8001990:	4807      	ldr	r0, [pc, #28]	; (80019b0 <MX_TIM17_Init+0xec>)
 8001992:	f004 f93b 	bl	8005c0c <HAL_TIMEx_ConfigBreakDeadTime>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 800199c:	f000 f88a 	bl	8001ab4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 80019a0:	4803      	ldr	r0, [pc, #12]	; (80019b0 <MX_TIM17_Init+0xec>)
 80019a2:	f000 f921 	bl	8001be8 <HAL_TIM_MspPostInit>

}
 80019a6:	bf00      	nop
 80019a8:	3748      	adds	r7, #72	; 0x48
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	20000298 	.word	0x20000298
 80019b4:	40014800 	.word	0x40014800

080019b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80019bc:	4b14      	ldr	r3, [pc, #80]	; (8001a10 <MX_USART2_UART_Init+0x58>)
 80019be:	4a15      	ldr	r2, [pc, #84]	; (8001a14 <MX_USART2_UART_Init+0x5c>)
 80019c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80019c2:	4b13      	ldr	r3, [pc, #76]	; (8001a10 <MX_USART2_UART_Init+0x58>)
 80019c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019ca:	4b11      	ldr	r3, [pc, #68]	; (8001a10 <MX_USART2_UART_Init+0x58>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80019d0:	4b0f      	ldr	r3, [pc, #60]	; (8001a10 <MX_USART2_UART_Init+0x58>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80019d6:	4b0e      	ldr	r3, [pc, #56]	; (8001a10 <MX_USART2_UART_Init+0x58>)
 80019d8:	2200      	movs	r2, #0
 80019da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80019dc:	4b0c      	ldr	r3, [pc, #48]	; (8001a10 <MX_USART2_UART_Init+0x58>)
 80019de:	220c      	movs	r2, #12
 80019e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019e2:	4b0b      	ldr	r3, [pc, #44]	; (8001a10 <MX_USART2_UART_Init+0x58>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019e8:	4b09      	ldr	r3, [pc, #36]	; (8001a10 <MX_USART2_UART_Init+0x58>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019ee:	4b08      	ldr	r3, [pc, #32]	; (8001a10 <MX_USART2_UART_Init+0x58>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019f4:	4b06      	ldr	r3, [pc, #24]	; (8001a10 <MX_USART2_UART_Init+0x58>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019fa:	4805      	ldr	r0, [pc, #20]	; (8001a10 <MX_USART2_UART_Init+0x58>)
 80019fc:	f004 f97e 	bl	8005cfc <HAL_UART_Init>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001a06:	f000 f855 	bl	8001ab4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a0a:	bf00      	nop
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	200002e4 	.word	0x200002e4
 8001a14:	40004400 	.word	0x40004400

08001a18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b088      	sub	sp, #32
 8001a1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a1e:	f107 030c 	add.w	r3, r7, #12
 8001a22:	2200      	movs	r2, #0
 8001a24:	601a      	str	r2, [r3, #0]
 8001a26:	605a      	str	r2, [r3, #4]
 8001a28:	609a      	str	r2, [r3, #8]
 8001a2a:	60da      	str	r2, [r3, #12]
 8001a2c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a2e:	4b20      	ldr	r3, [pc, #128]	; (8001ab0 <MX_GPIO_Init+0x98>)
 8001a30:	695b      	ldr	r3, [r3, #20]
 8001a32:	4a1f      	ldr	r2, [pc, #124]	; (8001ab0 <MX_GPIO_Init+0x98>)
 8001a34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a38:	6153      	str	r3, [r2, #20]
 8001a3a:	4b1d      	ldr	r3, [pc, #116]	; (8001ab0 <MX_GPIO_Init+0x98>)
 8001a3c:	695b      	ldr	r3, [r3, #20]
 8001a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a42:	60bb      	str	r3, [r7, #8]
 8001a44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a46:	4b1a      	ldr	r3, [pc, #104]	; (8001ab0 <MX_GPIO_Init+0x98>)
 8001a48:	695b      	ldr	r3, [r3, #20]
 8001a4a:	4a19      	ldr	r2, [pc, #100]	; (8001ab0 <MX_GPIO_Init+0x98>)
 8001a4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a50:	6153      	str	r3, [r2, #20]
 8001a52:	4b17      	ldr	r3, [pc, #92]	; (8001ab0 <MX_GPIO_Init+0x98>)
 8001a54:	695b      	ldr	r3, [r3, #20]
 8001a56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a5a:	607b      	str	r3, [r7, #4]
 8001a5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RIGHT_DM_PHASE_Pin|LEFT_DM_PHASE_Pin, GPIO_PIN_RESET);
 8001a5e:	2200      	movs	r2, #0
 8001a60:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8001a64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a68:	f001 fcfa 	bl	8003460 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RIGHT_DM_PHASE_Pin LEFT_DM_PHASE_Pin */
  GPIO_InitStruct.Pin = RIGHT_DM_PHASE_Pin|LEFT_DM_PHASE_Pin;
 8001a6c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001a70:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a72:	2301      	movs	r3, #1
 8001a74:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a76:	2300      	movs	r3, #0
 8001a78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a7e:	f107 030c 	add.w	r3, r7, #12
 8001a82:	4619      	mov	r1, r3
 8001a84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a88:	f001 fb60 	bl	800314c <HAL_GPIO_Init>

  /*Configure GPIO pin : POWER_BTN_Pin */
  GPIO_InitStruct.Pin = POWER_BTN_Pin;
 8001a8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a90:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a92:	2300      	movs	r3, #0
 8001a94:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a96:	2302      	movs	r3, #2
 8001a98:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(POWER_BTN_GPIO_Port, &GPIO_InitStruct);
 8001a9a:	f107 030c 	add.w	r3, r7, #12
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aa4:	f001 fb52 	bl	800314c <HAL_GPIO_Init>

}
 8001aa8:	bf00      	nop
 8001aaa:	3720      	adds	r7, #32
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	40021000 	.word	0x40021000

08001ab4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ab8:	b672      	cpsid	i
}
 8001aba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001abc:	e7fe      	b.n	8001abc <Error_Handler+0x8>
	...

08001ac0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ac6:	4b0f      	ldr	r3, [pc, #60]	; (8001b04 <HAL_MspInit+0x44>)
 8001ac8:	699b      	ldr	r3, [r3, #24]
 8001aca:	4a0e      	ldr	r2, [pc, #56]	; (8001b04 <HAL_MspInit+0x44>)
 8001acc:	f043 0301 	orr.w	r3, r3, #1
 8001ad0:	6193      	str	r3, [r2, #24]
 8001ad2:	4b0c      	ldr	r3, [pc, #48]	; (8001b04 <HAL_MspInit+0x44>)
 8001ad4:	699b      	ldr	r3, [r3, #24]
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	607b      	str	r3, [r7, #4]
 8001adc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ade:	4b09      	ldr	r3, [pc, #36]	; (8001b04 <HAL_MspInit+0x44>)
 8001ae0:	69db      	ldr	r3, [r3, #28]
 8001ae2:	4a08      	ldr	r2, [pc, #32]	; (8001b04 <HAL_MspInit+0x44>)
 8001ae4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ae8:	61d3      	str	r3, [r2, #28]
 8001aea:	4b06      	ldr	r3, [pc, #24]	; (8001b04 <HAL_MspInit+0x44>)
 8001aec:	69db      	ldr	r3, [r3, #28]
 8001aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001af2:	603b      	str	r3, [r7, #0]
 8001af4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001af6:	bf00      	nop
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	40021000 	.word	0x40021000

08001b08 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b08a      	sub	sp, #40	; 0x28
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b10:	f107 0314 	add.w	r3, r7, #20
 8001b14:	2200      	movs	r2, #0
 8001b16:	601a      	str	r2, [r3, #0]
 8001b18:	605a      	str	r2, [r3, #4]
 8001b1a:	609a      	str	r2, [r3, #8]
 8001b1c:	60da      	str	r2, [r3, #12]
 8001b1e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b28:	d124      	bne.n	8001b74 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001b2a:	4b14      	ldr	r3, [pc, #80]	; (8001b7c <HAL_ADC_MspInit+0x74>)
 8001b2c:	695b      	ldr	r3, [r3, #20]
 8001b2e:	4a13      	ldr	r2, [pc, #76]	; (8001b7c <HAL_ADC_MspInit+0x74>)
 8001b30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b34:	6153      	str	r3, [r2, #20]
 8001b36:	4b11      	ldr	r3, [pc, #68]	; (8001b7c <HAL_ADC_MspInit+0x74>)
 8001b38:	695b      	ldr	r3, [r3, #20]
 8001b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b3e:	613b      	str	r3, [r7, #16]
 8001b40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b42:	4b0e      	ldr	r3, [pc, #56]	; (8001b7c <HAL_ADC_MspInit+0x74>)
 8001b44:	695b      	ldr	r3, [r3, #20]
 8001b46:	4a0d      	ldr	r2, [pc, #52]	; (8001b7c <HAL_ADC_MspInit+0x74>)
 8001b48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b4c:	6153      	str	r3, [r2, #20]
 8001b4e:	4b0b      	ldr	r3, [pc, #44]	; (8001b7c <HAL_ADC_MspInit+0x74>)
 8001b50:	695b      	ldr	r3, [r3, #20]
 8001b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b56:	60fb      	str	r3, [r7, #12]
 8001b58:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = IR_LEFT_Pin|IR_CENTER_Pin|IR_RIGHT_Pin;
 8001b5a:	230b      	movs	r3, #11
 8001b5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b62:	2300      	movs	r3, #0
 8001b64:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b66:	f107 0314 	add.w	r3, r7, #20
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b70:	f001 faec 	bl	800314c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001b74:	bf00      	nop
 8001b76:	3728      	adds	r7, #40	; 0x28
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	40021000 	.word	0x40021000

08001b80 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b085      	sub	sp, #20
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a13      	ldr	r2, [pc, #76]	; (8001bdc <HAL_TIM_Base_MspInit+0x5c>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d10c      	bne.n	8001bac <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b92:	4b13      	ldr	r3, [pc, #76]	; (8001be0 <HAL_TIM_Base_MspInit+0x60>)
 8001b94:	699b      	ldr	r3, [r3, #24]
 8001b96:	4a12      	ldr	r2, [pc, #72]	; (8001be0 <HAL_TIM_Base_MspInit+0x60>)
 8001b98:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b9c:	6193      	str	r3, [r2, #24]
 8001b9e:	4b10      	ldr	r3, [pc, #64]	; (8001be0 <HAL_TIM_Base_MspInit+0x60>)
 8001ba0:	699b      	ldr	r3, [r3, #24]
 8001ba2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ba6:	60fb      	str	r3, [r7, #12]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001baa:	e010      	b.n	8001bce <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM17)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a0c      	ldr	r2, [pc, #48]	; (8001be4 <HAL_TIM_Base_MspInit+0x64>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d10b      	bne.n	8001bce <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001bb6:	4b0a      	ldr	r3, [pc, #40]	; (8001be0 <HAL_TIM_Base_MspInit+0x60>)
 8001bb8:	699b      	ldr	r3, [r3, #24]
 8001bba:	4a09      	ldr	r2, [pc, #36]	; (8001be0 <HAL_TIM_Base_MspInit+0x60>)
 8001bbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bc0:	6193      	str	r3, [r2, #24]
 8001bc2:	4b07      	ldr	r3, [pc, #28]	; (8001be0 <HAL_TIM_Base_MspInit+0x60>)
 8001bc4:	699b      	ldr	r3, [r3, #24]
 8001bc6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bca:	60bb      	str	r3, [r7, #8]
 8001bcc:	68bb      	ldr	r3, [r7, #8]
}
 8001bce:	bf00      	nop
 8001bd0:	3714      	adds	r7, #20
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	40012c00 	.word	0x40012c00
 8001be0:	40021000 	.word	0x40021000
 8001be4:	40014800 	.word	0x40014800

08001be8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b08a      	sub	sp, #40	; 0x28
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf0:	f107 0314 	add.w	r3, r7, #20
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]
 8001bf8:	605a      	str	r2, [r3, #4]
 8001bfa:	609a      	str	r2, [r3, #8]
 8001bfc:	60da      	str	r2, [r3, #12]
 8001bfe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a23      	ldr	r2, [pc, #140]	; (8001c94 <HAL_TIM_MspPostInit+0xac>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d11e      	bne.n	8001c48 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c0a:	4b23      	ldr	r3, [pc, #140]	; (8001c98 <HAL_TIM_MspPostInit+0xb0>)
 8001c0c:	695b      	ldr	r3, [r3, #20]
 8001c0e:	4a22      	ldr	r2, [pc, #136]	; (8001c98 <HAL_TIM_MspPostInit+0xb0>)
 8001c10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c14:	6153      	str	r3, [r2, #20]
 8001c16:	4b20      	ldr	r3, [pc, #128]	; (8001c98 <HAL_TIM_MspPostInit+0xb0>)
 8001c18:	695b      	ldr	r3, [r3, #20]
 8001c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c1e:	613b      	str	r3, [r7, #16]
 8001c20:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = RIGHT_DM_ENBL_Pin|LEFT_DM_ENBL_Pin;
 8001c22:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c28:	2302      	movs	r3, #2
 8001c2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c30:	2300      	movs	r3, #0
 8001c32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001c34:	2306      	movs	r3, #6
 8001c36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c38:	f107 0314 	add.w	r3, r7, #20
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c42:	f001 fa83 	bl	800314c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8001c46:	e020      	b.n	8001c8a <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM17)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a13      	ldr	r2, [pc, #76]	; (8001c9c <HAL_TIM_MspPostInit+0xb4>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d11b      	bne.n	8001c8a <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c52:	4b11      	ldr	r3, [pc, #68]	; (8001c98 <HAL_TIM_MspPostInit+0xb0>)
 8001c54:	695b      	ldr	r3, [r3, #20]
 8001c56:	4a10      	ldr	r2, [pc, #64]	; (8001c98 <HAL_TIM_MspPostInit+0xb0>)
 8001c58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c5c:	6153      	str	r3, [r2, #20]
 8001c5e:	4b0e      	ldr	r3, [pc, #56]	; (8001c98 <HAL_TIM_MspPostInit+0xb0>)
 8001c60:	695b      	ldr	r3, [r3, #20]
 8001c62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c66:	60fb      	str	r3, [r7, #12]
 8001c68:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SERVO_MOTOR_Pin;
 8001c6a:	2320      	movs	r3, #32
 8001c6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c6e:	2302      	movs	r3, #2
 8001c70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c72:	2300      	movs	r3, #0
 8001c74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c76:	2300      	movs	r3, #0
 8001c78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM17;
 8001c7a:	230a      	movs	r3, #10
 8001c7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SERVO_MOTOR_GPIO_Port, &GPIO_InitStruct);
 8001c7e:	f107 0314 	add.w	r3, r7, #20
 8001c82:	4619      	mov	r1, r3
 8001c84:	4806      	ldr	r0, [pc, #24]	; (8001ca0 <HAL_TIM_MspPostInit+0xb8>)
 8001c86:	f001 fa61 	bl	800314c <HAL_GPIO_Init>
}
 8001c8a:	bf00      	nop
 8001c8c:	3728      	adds	r7, #40	; 0x28
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	40012c00 	.word	0x40012c00
 8001c98:	40021000 	.word	0x40021000
 8001c9c:	40014800 	.word	0x40014800
 8001ca0:	48000400 	.word	0x48000400

08001ca4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b08a      	sub	sp, #40	; 0x28
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cac:	f107 0314 	add.w	r3, r7, #20
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	601a      	str	r2, [r3, #0]
 8001cb4:	605a      	str	r2, [r3, #4]
 8001cb6:	609a      	str	r2, [r3, #8]
 8001cb8:	60da      	str	r2, [r3, #12]
 8001cba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a18      	ldr	r2, [pc, #96]	; (8001d24 <HAL_UART_MspInit+0x80>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d129      	bne.n	8001d1a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001cc6:	4b18      	ldr	r3, [pc, #96]	; (8001d28 <HAL_UART_MspInit+0x84>)
 8001cc8:	69db      	ldr	r3, [r3, #28]
 8001cca:	4a17      	ldr	r2, [pc, #92]	; (8001d28 <HAL_UART_MspInit+0x84>)
 8001ccc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cd0:	61d3      	str	r3, [r2, #28]
 8001cd2:	4b15      	ldr	r3, [pc, #84]	; (8001d28 <HAL_UART_MspInit+0x84>)
 8001cd4:	69db      	ldr	r3, [r3, #28]
 8001cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cda:	613b      	str	r3, [r7, #16]
 8001cdc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cde:	4b12      	ldr	r3, [pc, #72]	; (8001d28 <HAL_UART_MspInit+0x84>)
 8001ce0:	695b      	ldr	r3, [r3, #20]
 8001ce2:	4a11      	ldr	r2, [pc, #68]	; (8001d28 <HAL_UART_MspInit+0x84>)
 8001ce4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ce8:	6153      	str	r3, [r2, #20]
 8001cea:	4b0f      	ldr	r3, [pc, #60]	; (8001d28 <HAL_UART_MspInit+0x84>)
 8001cec:	695b      	ldr	r3, [r3, #20]
 8001cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cf2:	60fb      	str	r3, [r7, #12]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8001cf6:	f248 0304 	movw	r3, #32772	; 0x8004
 8001cfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d00:	2300      	movs	r3, #0
 8001d02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d04:	2303      	movs	r3, #3
 8001d06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d08:	2307      	movs	r3, #7
 8001d0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d0c:	f107 0314 	add.w	r3, r7, #20
 8001d10:	4619      	mov	r1, r3
 8001d12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d16:	f001 fa19 	bl	800314c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001d1a:	bf00      	nop
 8001d1c:	3728      	adds	r7, #40	; 0x28
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	40004400 	.word	0x40004400
 8001d28:	40021000 	.word	0x40021000

08001d2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d30:	e7fe      	b.n	8001d30 <NMI_Handler+0x4>

08001d32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d32:	b480      	push	{r7}
 8001d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d36:	e7fe      	b.n	8001d36 <HardFault_Handler+0x4>

08001d38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d3c:	e7fe      	b.n	8001d3c <MemManage_Handler+0x4>

08001d3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d3e:	b480      	push	{r7}
 8001d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d42:	e7fe      	b.n	8001d42 <BusFault_Handler+0x4>

08001d44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d48:	e7fe      	b.n	8001d48 <UsageFault_Handler+0x4>

08001d4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d4e:	bf00      	nop
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d5c:	bf00      	nop
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr

08001d66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d66:	b480      	push	{r7}
 8001d68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d6a:	bf00      	nop
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr

08001d74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d78:	f000 f94a 	bl	8002010 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d7c:	bf00      	nop
 8001d7e:	bd80      	pop	{r7, pc}

08001d80 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
	return 1;
 8001d84:	2301      	movs	r3, #1
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <_kill>:

int _kill(int pid, int sig)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001d9a:	f004 fae3 	bl	8006364 <__errno>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2216      	movs	r2, #22
 8001da2:	601a      	str	r2, [r3, #0]
	return -1;
 8001da4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	3708      	adds	r7, #8
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <_exit>:

void _exit (int status)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001db8:	f04f 31ff 	mov.w	r1, #4294967295
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f7ff ffe7 	bl	8001d90 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001dc2:	e7fe      	b.n	8001dc2 <_exit+0x12>

08001dc4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b086      	sub	sp, #24
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	60f8      	str	r0, [r7, #12]
 8001dcc:	60b9      	str	r1, [r7, #8]
 8001dce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	617b      	str	r3, [r7, #20]
 8001dd4:	e00a      	b.n	8001dec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001dd6:	f3af 8000 	nop.w
 8001dda:	4601      	mov	r1, r0
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	1c5a      	adds	r2, r3, #1
 8001de0:	60ba      	str	r2, [r7, #8]
 8001de2:	b2ca      	uxtb	r2, r1
 8001de4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	3301      	adds	r3, #1
 8001dea:	617b      	str	r3, [r7, #20]
 8001dec:	697a      	ldr	r2, [r7, #20]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	dbf0      	blt.n	8001dd6 <_read+0x12>
	}

return len;
 8001df4:	687b      	ldr	r3, [r7, #4]
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3718      	adds	r7, #24
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b086      	sub	sp, #24
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	60f8      	str	r0, [r7, #12]
 8001e06:	60b9      	str	r1, [r7, #8]
 8001e08:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	617b      	str	r3, [r7, #20]
 8001e0e:	e009      	b.n	8001e24 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	1c5a      	adds	r2, r3, #1
 8001e14:	60ba      	str	r2, [r7, #8]
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	3301      	adds	r3, #1
 8001e22:	617b      	str	r3, [r7, #20]
 8001e24:	697a      	ldr	r2, [r7, #20]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	dbf1      	blt.n	8001e10 <_write+0x12>
	}
	return len;
 8001e2c:	687b      	ldr	r3, [r7, #4]
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3718      	adds	r7, #24
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <_close>:

int _close(int file)
{
 8001e36:	b480      	push	{r7}
 8001e38:	b083      	sub	sp, #12
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
	return -1;
 8001e3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	370c      	adds	r7, #12
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr

08001e4e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e4e:	b480      	push	{r7}
 8001e50:	b083      	sub	sp, #12
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	6078      	str	r0, [r7, #4]
 8001e56:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e5e:	605a      	str	r2, [r3, #4]
	return 0;
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr

08001e6e <_isatty>:

int _isatty(int file)
{
 8001e6e:	b480      	push	{r7}
 8001e70:	b083      	sub	sp, #12
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
	return 1;
 8001e76:	2301      	movs	r3, #1
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b085      	sub	sp, #20
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	60f8      	str	r0, [r7, #12]
 8001e8c:	60b9      	str	r1, [r7, #8]
 8001e8e:	607a      	str	r2, [r7, #4]
	return 0;
 8001e90:	2300      	movs	r3, #0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3714      	adds	r7, #20
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
	...

08001ea0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b086      	sub	sp, #24
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ea8:	4a14      	ldr	r2, [pc, #80]	; (8001efc <_sbrk+0x5c>)
 8001eaa:	4b15      	ldr	r3, [pc, #84]	; (8001f00 <_sbrk+0x60>)
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001eb4:	4b13      	ldr	r3, [pc, #76]	; (8001f04 <_sbrk+0x64>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d102      	bne.n	8001ec2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ebc:	4b11      	ldr	r3, [pc, #68]	; (8001f04 <_sbrk+0x64>)
 8001ebe:	4a12      	ldr	r2, [pc, #72]	; (8001f08 <_sbrk+0x68>)
 8001ec0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ec2:	4b10      	ldr	r3, [pc, #64]	; (8001f04 <_sbrk+0x64>)
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4413      	add	r3, r2
 8001eca:	693a      	ldr	r2, [r7, #16]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d207      	bcs.n	8001ee0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ed0:	f004 fa48 	bl	8006364 <__errno>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	220c      	movs	r2, #12
 8001ed8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001eda:	f04f 33ff 	mov.w	r3, #4294967295
 8001ede:	e009      	b.n	8001ef4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ee0:	4b08      	ldr	r3, [pc, #32]	; (8001f04 <_sbrk+0x64>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ee6:	4b07      	ldr	r3, [pc, #28]	; (8001f04 <_sbrk+0x64>)
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4413      	add	r3, r2
 8001eee:	4a05      	ldr	r2, [pc, #20]	; (8001f04 <_sbrk+0x64>)
 8001ef0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3718      	adds	r7, #24
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	20003000 	.word	0x20003000
 8001f00:	00000400 	.word	0x00000400
 8001f04:	20000378 	.word	0x20000378
 8001f08:	20000390 	.word	0x20000390

08001f0c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f10:	4b06      	ldr	r3, [pc, #24]	; (8001f2c <SystemInit+0x20>)
 8001f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f16:	4a05      	ldr	r2, [pc, #20]	; (8001f2c <SystemInit+0x20>)
 8001f18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f20:	bf00      	nop
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	e000ed00 	.word	0xe000ed00

08001f30 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001f30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f68 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f34:	480d      	ldr	r0, [pc, #52]	; (8001f6c <LoopForever+0x6>)
  ldr r1, =_edata
 8001f36:	490e      	ldr	r1, [pc, #56]	; (8001f70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f38:	4a0e      	ldr	r2, [pc, #56]	; (8001f74 <LoopForever+0xe>)
  movs r3, #0
 8001f3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f3c:	e002      	b.n	8001f44 <LoopCopyDataInit>

08001f3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f42:	3304      	adds	r3, #4

08001f44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f48:	d3f9      	bcc.n	8001f3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f4a:	4a0b      	ldr	r2, [pc, #44]	; (8001f78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f4c:	4c0b      	ldr	r4, [pc, #44]	; (8001f7c <LoopForever+0x16>)
  movs r3, #0
 8001f4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f50:	e001      	b.n	8001f56 <LoopFillZerobss>

08001f52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f54:	3204      	adds	r2, #4

08001f56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f58:	d3fb      	bcc.n	8001f52 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001f5a:	f7ff ffd7 	bl	8001f0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f5e:	f004 fa07 	bl	8006370 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f62:	f7ff fa39 	bl	80013d8 <main>

08001f66 <LoopForever>:

LoopForever:
    b LoopForever
 8001f66:	e7fe      	b.n	8001f66 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001f68:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001f6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f70:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001f74:	0800b96c 	.word	0x0800b96c
  ldr r2, =_sbss
 8001f78:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001f7c:	20000390 	.word	0x20000390

08001f80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f80:	e7fe      	b.n	8001f80 <ADC1_2_IRQHandler>
	...

08001f84 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f88:	4b08      	ldr	r3, [pc, #32]	; (8001fac <HAL_Init+0x28>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a07      	ldr	r2, [pc, #28]	; (8001fac <HAL_Init+0x28>)
 8001f8e:	f043 0310 	orr.w	r3, r3, #16
 8001f92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f94:	2003      	movs	r0, #3
 8001f96:	f001 f8a5 	bl	80030e4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f9a:	2000      	movs	r0, #0
 8001f9c:	f000 f808 	bl	8001fb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fa0:	f7ff fd8e 	bl	8001ac0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fa4:	2300      	movs	r3, #0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	40022000 	.word	0x40022000

08001fb0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fb8:	4b12      	ldr	r3, [pc, #72]	; (8002004 <HAL_InitTick+0x54>)
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	4b12      	ldr	r3, [pc, #72]	; (8002008 <HAL_InitTick+0x58>)
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f001 f8af 	bl	8003132 <HAL_SYSTICK_Config>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e00e      	b.n	8001ffc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2b0f      	cmp	r3, #15
 8001fe2:	d80a      	bhi.n	8001ffa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	6879      	ldr	r1, [r7, #4]
 8001fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8001fec:	f001 f885 	bl	80030fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ff0:	4a06      	ldr	r2, [pc, #24]	; (800200c <HAL_InitTick+0x5c>)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	e000      	b.n	8001ffc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3708      	adds	r7, #8
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	20000000 	.word	0x20000000
 8002008:	20000008 	.word	0x20000008
 800200c:	20000004 	.word	0x20000004

08002010 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002014:	4b06      	ldr	r3, [pc, #24]	; (8002030 <HAL_IncTick+0x20>)
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	461a      	mov	r2, r3
 800201a:	4b06      	ldr	r3, [pc, #24]	; (8002034 <HAL_IncTick+0x24>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4413      	add	r3, r2
 8002020:	4a04      	ldr	r2, [pc, #16]	; (8002034 <HAL_IncTick+0x24>)
 8002022:	6013      	str	r3, [r2, #0]
}
 8002024:	bf00      	nop
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	20000008 	.word	0x20000008
 8002034:	2000037c 	.word	0x2000037c

08002038 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  return uwTick;  
 800203c:	4b03      	ldr	r3, [pc, #12]	; (800204c <HAL_GetTick+0x14>)
 800203e:	681b      	ldr	r3, [r3, #0]
}
 8002040:	4618      	mov	r0, r3
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	2000037c 	.word	0x2000037c

08002050 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002058:	f7ff ffee 	bl	8002038 <HAL_GetTick>
 800205c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002068:	d005      	beq.n	8002076 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800206a:	4b0a      	ldr	r3, [pc, #40]	; (8002094 <HAL_Delay+0x44>)
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	461a      	mov	r2, r3
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	4413      	add	r3, r2
 8002074:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002076:	bf00      	nop
 8002078:	f7ff ffde 	bl	8002038 <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	68fa      	ldr	r2, [r7, #12]
 8002084:	429a      	cmp	r2, r3
 8002086:	d8f7      	bhi.n	8002078 <HAL_Delay+0x28>
  {
  }
}
 8002088:	bf00      	nop
 800208a:	bf00      	nop
 800208c:	3710      	adds	r7, #16
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	20000008 	.word	0x20000008

08002098 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b09a      	sub	sp, #104	; 0x68
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020a0:	2300      	movs	r3, #0
 80020a2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80020a6:	2300      	movs	r3, #0
 80020a8:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80020aa:	2300      	movs	r3, #0
 80020ac:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d101      	bne.n	80020b8 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e172      	b.n	800239e <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	691b      	ldr	r3, [r3, #16]
 80020bc:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c2:	f003 0310 	and.w	r3, r3, #16
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d176      	bne.n	80021b8 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d152      	bne.n	8002178 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2200      	movs	r2, #0
 80020d6:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2200      	movs	r2, #0
 80020dc:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2200      	movs	r2, #0
 80020e2:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2200      	movs	r2, #0
 80020e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f7ff fd0b 	bl	8001b08 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d13b      	bne.n	8002178 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f000 fed7 	bl	8002eb4 <ADC_Disable>
 8002106:	4603      	mov	r3, r0
 8002108:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002110:	f003 0310 	and.w	r3, r3, #16
 8002114:	2b00      	cmp	r3, #0
 8002116:	d12f      	bne.n	8002178 <HAL_ADC_Init+0xe0>
 8002118:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800211c:	2b00      	cmp	r3, #0
 800211e:	d12b      	bne.n	8002178 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002124:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002128:	f023 0302 	bic.w	r3, r3, #2
 800212c:	f043 0202 	orr.w	r2, r3, #2
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	689a      	ldr	r2, [r3, #8]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002142:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	689a      	ldr	r2, [r3, #8]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002152:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002154:	4b94      	ldr	r3, [pc, #592]	; (80023a8 <HAL_ADC_Init+0x310>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a94      	ldr	r2, [pc, #592]	; (80023ac <HAL_ADC_Init+0x314>)
 800215a:	fba2 2303 	umull	r2, r3, r2, r3
 800215e:	0c9a      	lsrs	r2, r3, #18
 8002160:	4613      	mov	r3, r2
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	4413      	add	r3, r2
 8002166:	005b      	lsls	r3, r3, #1
 8002168:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800216a:	e002      	b.n	8002172 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	3b01      	subs	r3, #1
 8002170:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d1f9      	bne.n	800216c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d007      	beq.n	8002196 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002190:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002194:	d110      	bne.n	80021b8 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219a:	f023 0312 	bic.w	r3, r3, #18
 800219e:	f043 0210 	orr.w	r2, r3, #16
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021aa:	f043 0201 	orr.w	r2, r3, #1
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021bc:	f003 0310 	and.w	r3, r3, #16
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	f040 80df 	bne.w	8002384 <HAL_ADC_Init+0x2ec>
 80021c6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	f040 80da 	bne.w	8002384 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80021da:	2b00      	cmp	r3, #0
 80021dc:	f040 80d2 	bne.w	8002384 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80021e8:	f043 0202 	orr.w	r2, r3, #2
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021f0:	4b6f      	ldr	r3, [pc, #444]	; (80023b0 <HAL_ADC_Init+0x318>)
 80021f2:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021fc:	d102      	bne.n	8002204 <HAL_ADC_Init+0x16c>
 80021fe:	4b6d      	ldr	r3, [pc, #436]	; (80023b4 <HAL_ADC_Init+0x31c>)
 8002200:	60fb      	str	r3, [r7, #12]
 8002202:	e002      	b.n	800220a <HAL_ADC_Init+0x172>
 8002204:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002208:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	f003 0303 	and.w	r3, r3, #3
 8002214:	2b01      	cmp	r3, #1
 8002216:	d108      	bne.n	800222a <HAL_ADC_Init+0x192>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0301 	and.w	r3, r3, #1
 8002222:	2b01      	cmp	r3, #1
 8002224:	d101      	bne.n	800222a <HAL_ADC_Init+0x192>
 8002226:	2301      	movs	r3, #1
 8002228:	e000      	b.n	800222c <HAL_ADC_Init+0x194>
 800222a:	2300      	movs	r3, #0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d11c      	bne.n	800226a <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002230:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002232:	2b00      	cmp	r3, #0
 8002234:	d010      	beq.n	8002258 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	f003 0303 	and.w	r3, r3, #3
 800223e:	2b01      	cmp	r3, #1
 8002240:	d107      	bne.n	8002252 <HAL_ADC_Init+0x1ba>
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0301 	and.w	r3, r3, #1
 800224a:	2b01      	cmp	r3, #1
 800224c:	d101      	bne.n	8002252 <HAL_ADC_Init+0x1ba>
 800224e:	2301      	movs	r3, #1
 8002250:	e000      	b.n	8002254 <HAL_ADC_Init+0x1bc>
 8002252:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002254:	2b00      	cmp	r3, #0
 8002256:	d108      	bne.n	800226a <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002258:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	431a      	orrs	r2, r3
 8002266:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002268:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	7e5b      	ldrb	r3, [r3, #25]
 800226e:	035b      	lsls	r3, r3, #13
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002274:	2a01      	cmp	r2, #1
 8002276:	d002      	beq.n	800227e <HAL_ADC_Init+0x1e6>
 8002278:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800227c:	e000      	b.n	8002280 <HAL_ADC_Init+0x1e8>
 800227e:	2200      	movs	r2, #0
 8002280:	431a      	orrs	r2, r3
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	431a      	orrs	r2, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	4313      	orrs	r3, r2
 800228e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002290:	4313      	orrs	r3, r2
 8002292:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f893 3020 	ldrb.w	r3, [r3, #32]
 800229a:	2b01      	cmp	r3, #1
 800229c:	d11b      	bne.n	80022d6 <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	7e5b      	ldrb	r3, [r3, #25]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d109      	bne.n	80022ba <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022aa:	3b01      	subs	r3, #1
 80022ac:	045a      	lsls	r2, r3, #17
 80022ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80022b0:	4313      	orrs	r3, r2
 80022b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022b6:	663b      	str	r3, [r7, #96]	; 0x60
 80022b8:	e00d      	b.n	80022d6 <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022be:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80022c2:	f043 0220 	orr.w	r2, r3, #32
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ce:	f043 0201 	orr.w	r2, r3, #1
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d007      	beq.n	80022ee <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e6:	4313      	orrs	r3, r2
 80022e8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80022ea:	4313      	orrs	r3, r2
 80022ec:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	f003 030c 	and.w	r3, r3, #12
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d114      	bne.n	8002326 <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	68db      	ldr	r3, [r3, #12]
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	6812      	ldr	r2, [r2, #0]
 8002306:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800230a:	f023 0302 	bic.w	r3, r3, #2
 800230e:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	7e1b      	ldrb	r3, [r3, #24]
 8002314:	039a      	lsls	r2, r3, #14
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800231c:	005b      	lsls	r3, r3, #1
 800231e:	4313      	orrs	r3, r2
 8002320:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002322:	4313      	orrs	r3, r2
 8002324:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	68da      	ldr	r2, [r3, #12]
 800232c:	4b22      	ldr	r3, [pc, #136]	; (80023b8 <HAL_ADC_Init+0x320>)
 800232e:	4013      	ands	r3, r2
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	6812      	ldr	r2, [r2, #0]
 8002334:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002336:	430b      	orrs	r3, r1
 8002338:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	691b      	ldr	r3, [r3, #16]
 800233e:	2b01      	cmp	r3, #1
 8002340:	d10c      	bne.n	800235c <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002348:	f023 010f 	bic.w	r1, r3, #15
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	69db      	ldr	r3, [r3, #28]
 8002350:	1e5a      	subs	r2, r3, #1
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	430a      	orrs	r2, r1
 8002358:	631a      	str	r2, [r3, #48]	; 0x30
 800235a:	e007      	b.n	800236c <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f022 020f 	bic.w	r2, r2, #15
 800236a:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2200      	movs	r2, #0
 8002370:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002376:	f023 0303 	bic.w	r3, r3, #3
 800237a:	f043 0201 	orr.w	r2, r3, #1
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	641a      	str	r2, [r3, #64]	; 0x40
 8002382:	e00a      	b.n	800239a <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002388:	f023 0312 	bic.w	r3, r3, #18
 800238c:	f043 0210 	orr.w	r2, r3, #16
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8002394:	2301      	movs	r3, #1
 8002396:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 800239a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3768      	adds	r7, #104	; 0x68
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	20000000 	.word	0x20000000
 80023ac:	431bde83 	.word	0x431bde83
 80023b0:	50000300 	.word	0x50000300
 80023b4:	50000100 	.word	0x50000100
 80023b8:	fff0c007 	.word	0xfff0c007

080023bc <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023c4:	2300      	movs	r3, #0
 80023c6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	f003 0304 	and.w	r3, r3, #4
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	f040 809c 	bne.w	8002510 <HAL_ADC_Start+0x154>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d101      	bne.n	80023e6 <HAL_ADC_Start+0x2a>
 80023e2:	2302      	movs	r3, #2
 80023e4:	e097      	b.n	8002516 <HAL_ADC_Start+0x15a>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2201      	movs	r2, #1
 80023ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f000 fcfc 	bl	8002dec <ADC_Enable>
 80023f4:	4603      	mov	r3, r0
 80023f6:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80023f8:	7bfb      	ldrb	r3, [r7, #15]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	f040 8083 	bne.w	8002506 <HAL_ADC_Start+0x14a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002404:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002408:	f023 0301 	bic.w	r3, r3, #1
 800240c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002414:	4b42      	ldr	r3, [pc, #264]	; (8002520 <HAL_ADC_Start+0x164>)
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	f003 031f 	and.w	r3, r3, #31
 800241c:	2b00      	cmp	r3, #0
 800241e:	d004      	beq.n	800242a <HAL_ADC_Start+0x6e>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002428:	d115      	bne.n	8002456 <HAL_ADC_Start+0x9a>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d027      	beq.n	8002494 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002448:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800244c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002454:	e01e      	b.n	8002494 <HAL_ADC_Start+0xd8>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800246a:	d004      	beq.n	8002476 <HAL_ADC_Start+0xba>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a2c      	ldr	r2, [pc, #176]	; (8002524 <HAL_ADC_Start+0x168>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d10e      	bne.n	8002494 <HAL_ADC_Start+0xd8>
 8002476:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d007      	beq.n	8002494 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002488:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800248c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002498:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800249c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024a0:	d106      	bne.n	80024b0 <HAL_ADC_Start+0xf4>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a6:	f023 0206 	bic.w	r2, r3, #6
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	645a      	str	r2, [r3, #68]	; 0x44
 80024ae:	e002      	b.n	80024b6 <HAL_ADC_Start+0xfa>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2200      	movs	r2, #0
 80024b4:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	221c      	movs	r2, #28
 80024c4:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80024c6:	4b16      	ldr	r3, [pc, #88]	; (8002520 <HAL_ADC_Start+0x164>)
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	f003 031f 	and.w	r3, r3, #31
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d010      	beq.n	80024f4 <HAL_ADC_Start+0x138>
 80024d2:	4b13      	ldr	r3, [pc, #76]	; (8002520 <HAL_ADC_Start+0x164>)
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	f003 031f 	and.w	r3, r3, #31
 80024da:	2b05      	cmp	r3, #5
 80024dc:	d00a      	beq.n	80024f4 <HAL_ADC_Start+0x138>
 80024de:	4b10      	ldr	r3, [pc, #64]	; (8002520 <HAL_ADC_Start+0x164>)
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	f003 031f 	and.w	r3, r3, #31
 80024e6:	2b09      	cmp	r3, #9
 80024e8:	d004      	beq.n	80024f4 <HAL_ADC_Start+0x138>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024f2:	d10f      	bne.n	8002514 <HAL_ADC_Start+0x158>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	689a      	ldr	r2, [r3, #8]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f042 0204 	orr.w	r2, r2, #4
 8002502:	609a      	str	r2, [r3, #8]
 8002504:	e006      	b.n	8002514 <HAL_ADC_Start+0x158>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800250e:	e001      	b.n	8002514 <HAL_ADC_Start+0x158>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002510:	2302      	movs	r3, #2
 8002512:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002514:	7bfb      	ldrb	r3, [r7, #15]
}
 8002516:	4618      	mov	r0, r3
 8002518:	3710      	adds	r7, #16
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	50000300 	.word	0x50000300
 8002524:	50000100 	.word	0x50000100

08002528 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b086      	sub	sp, #24
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8002532:	2300      	movs	r3, #0
 8002534:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	695b      	ldr	r3, [r3, #20]
 800253a:	2b08      	cmp	r3, #8
 800253c:	d102      	bne.n	8002544 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800253e:	2308      	movs	r3, #8
 8002540:	617b      	str	r3, [r7, #20]
 8002542:	e02e      	b.n	80025a2 <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002544:	4b5e      	ldr	r3, [pc, #376]	; (80026c0 <HAL_ADC_PollForConversion+0x198>)
 8002546:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	f003 031f 	and.w	r3, r3, #31
 8002550:	2b00      	cmp	r3, #0
 8002552:	d112      	bne.n	800257a <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	f003 0301 	and.w	r3, r3, #1
 800255e:	2b01      	cmp	r3, #1
 8002560:	d11d      	bne.n	800259e <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002566:	f043 0220 	orr.w	r2, r3, #32
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2200      	movs	r2, #0
 8002572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e09d      	b.n	80026b6 <HAL_ADC_PollForConversion+0x18e>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d00b      	beq.n	800259e <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258a:	f043 0220 	orr.w	r2, r3, #32
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e08b      	b.n	80026b6 <HAL_ADC_PollForConversion+0x18e>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800259e:	230c      	movs	r3, #12
 80025a0:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80025a2:	4b47      	ldr	r3, [pc, #284]	; (80026c0 <HAL_ADC_PollForConversion+0x198>)
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	f003 031f 	and.w	r3, r3, #31
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d004      	beq.n	80025b8 <HAL_ADC_PollForConversion+0x90>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025b6:	d104      	bne.n	80025c2 <HAL_ADC_PollForConversion+0x9a>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	68db      	ldr	r3, [r3, #12]
 80025be:	613b      	str	r3, [r7, #16]
 80025c0:	e003      	b.n	80025ca <HAL_ADC_PollForConversion+0xa2>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80025c2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 80025ca:	f7ff fd35 	bl	8002038 <HAL_GetTick>
 80025ce:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80025d0:	e021      	b.n	8002616 <HAL_ADC_PollForConversion+0xee>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025d8:	d01d      	beq.n	8002616 <HAL_ADC_PollForConversion+0xee>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d007      	beq.n	80025f0 <HAL_ADC_PollForConversion+0xc8>
 80025e0:	f7ff fd2a 	bl	8002038 <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	683a      	ldr	r2, [r7, #0]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d212      	bcs.n	8002616 <HAL_ADC_PollForConversion+0xee>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	4013      	ands	r3, r2
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d10b      	bne.n	8002616 <HAL_ADC_PollForConversion+0xee>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002602:	f043 0204 	orr.w	r2, r3, #4
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2200      	movs	r2, #0
 800260e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e04f      	b.n	80026b6 <HAL_ADC_PollForConversion+0x18e>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	4013      	ands	r3, r2
 8002620:	2b00      	cmp	r3, #0
 8002622:	d0d6      	beq.n	80025d2 <HAL_ADC_PollForConversion+0xaa>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002628:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800263a:	2b00      	cmp	r3, #0
 800263c:	d131      	bne.n	80026a2 <HAL_ADC_PollForConversion+0x17a>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8002644:	2b00      	cmp	r3, #0
 8002646:	d12c      	bne.n	80026a2 <HAL_ADC_PollForConversion+0x17a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0308 	and.w	r3, r3, #8
 8002652:	2b08      	cmp	r3, #8
 8002654:	d125      	bne.n	80026a2 <HAL_ADC_PollForConversion+0x17a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	f003 0304 	and.w	r3, r3, #4
 8002660:	2b00      	cmp	r3, #0
 8002662:	d112      	bne.n	800268a <HAL_ADC_PollForConversion+0x162>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002668:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002674:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d112      	bne.n	80026a2 <HAL_ADC_PollForConversion+0x17a>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002680:	f043 0201 	orr.w	r2, r3, #1
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	641a      	str	r2, [r3, #64]	; 0x40
 8002688:	e00b      	b.n	80026a2 <HAL_ADC_PollForConversion+0x17a>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268e:	f043 0220 	orr.w	r2, r3, #32
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800269a:	f043 0201 	orr.w	r2, r3, #1
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d103      	bne.n	80026b4 <HAL_ADC_PollForConversion+0x18c>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	697a      	ldr	r2, [r7, #20]
 80026b2:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3718      	adds	r7, #24
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	50000300 	.word	0x50000300

080026c4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	370c      	adds	r7, #12
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
	...

080026e0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b09b      	sub	sp, #108	; 0x6c
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026ea:	2300      	movs	r3, #0
 80026ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80026f0:	2300      	movs	r3, #0
 80026f2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d101      	bne.n	8002702 <HAL_ADC_ConfigChannel+0x22>
 80026fe:	2302      	movs	r3, #2
 8002700:	e2a4      	b.n	8002c4c <HAL_ADC_ConfigChannel+0x56c>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2201      	movs	r2, #1
 8002706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	f003 0304 	and.w	r3, r3, #4
 8002714:	2b00      	cmp	r3, #0
 8002716:	f040 8288 	bne.w	8002c2a <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	2b04      	cmp	r3, #4
 8002720:	d81c      	bhi.n	800275c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	685a      	ldr	r2, [r3, #4]
 800272c:	4613      	mov	r3, r2
 800272e:	005b      	lsls	r3, r3, #1
 8002730:	4413      	add	r3, r2
 8002732:	005b      	lsls	r3, r3, #1
 8002734:	461a      	mov	r2, r3
 8002736:	231f      	movs	r3, #31
 8002738:	4093      	lsls	r3, r2
 800273a:	43db      	mvns	r3, r3
 800273c:	4019      	ands	r1, r3
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	6818      	ldr	r0, [r3, #0]
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	685a      	ldr	r2, [r3, #4]
 8002746:	4613      	mov	r3, r2
 8002748:	005b      	lsls	r3, r3, #1
 800274a:	4413      	add	r3, r2
 800274c:	005b      	lsls	r3, r3, #1
 800274e:	fa00 f203 	lsl.w	r2, r0, r3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	430a      	orrs	r2, r1
 8002758:	631a      	str	r2, [r3, #48]	; 0x30
 800275a:	e063      	b.n	8002824 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	2b09      	cmp	r3, #9
 8002762:	d81e      	bhi.n	80027a2 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	685a      	ldr	r2, [r3, #4]
 800276e:	4613      	mov	r3, r2
 8002770:	005b      	lsls	r3, r3, #1
 8002772:	4413      	add	r3, r2
 8002774:	005b      	lsls	r3, r3, #1
 8002776:	3b1e      	subs	r3, #30
 8002778:	221f      	movs	r2, #31
 800277a:	fa02 f303 	lsl.w	r3, r2, r3
 800277e:	43db      	mvns	r3, r3
 8002780:	4019      	ands	r1, r3
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	6818      	ldr	r0, [r3, #0]
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	685a      	ldr	r2, [r3, #4]
 800278a:	4613      	mov	r3, r2
 800278c:	005b      	lsls	r3, r3, #1
 800278e:	4413      	add	r3, r2
 8002790:	005b      	lsls	r3, r3, #1
 8002792:	3b1e      	subs	r3, #30
 8002794:	fa00 f203 	lsl.w	r2, r0, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	430a      	orrs	r2, r1
 800279e:	635a      	str	r2, [r3, #52]	; 0x34
 80027a0:	e040      	b.n	8002824 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	2b0e      	cmp	r3, #14
 80027a8:	d81e      	bhi.n	80027e8 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685a      	ldr	r2, [r3, #4]
 80027b4:	4613      	mov	r3, r2
 80027b6:	005b      	lsls	r3, r3, #1
 80027b8:	4413      	add	r3, r2
 80027ba:	005b      	lsls	r3, r3, #1
 80027bc:	3b3c      	subs	r3, #60	; 0x3c
 80027be:	221f      	movs	r2, #31
 80027c0:	fa02 f303 	lsl.w	r3, r2, r3
 80027c4:	43db      	mvns	r3, r3
 80027c6:	4019      	ands	r1, r3
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	6818      	ldr	r0, [r3, #0]
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	685a      	ldr	r2, [r3, #4]
 80027d0:	4613      	mov	r3, r2
 80027d2:	005b      	lsls	r3, r3, #1
 80027d4:	4413      	add	r3, r2
 80027d6:	005b      	lsls	r3, r3, #1
 80027d8:	3b3c      	subs	r3, #60	; 0x3c
 80027da:	fa00 f203 	lsl.w	r2, r0, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	430a      	orrs	r2, r1
 80027e4:	639a      	str	r2, [r3, #56]	; 0x38
 80027e6:	e01d      	b.n	8002824 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	685a      	ldr	r2, [r3, #4]
 80027f2:	4613      	mov	r3, r2
 80027f4:	005b      	lsls	r3, r3, #1
 80027f6:	4413      	add	r3, r2
 80027f8:	005b      	lsls	r3, r3, #1
 80027fa:	3b5a      	subs	r3, #90	; 0x5a
 80027fc:	221f      	movs	r2, #31
 80027fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002802:	43db      	mvns	r3, r3
 8002804:	4019      	ands	r1, r3
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	6818      	ldr	r0, [r3, #0]
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	685a      	ldr	r2, [r3, #4]
 800280e:	4613      	mov	r3, r2
 8002810:	005b      	lsls	r3, r3, #1
 8002812:	4413      	add	r3, r2
 8002814:	005b      	lsls	r3, r3, #1
 8002816:	3b5a      	subs	r3, #90	; 0x5a
 8002818:	fa00 f203 	lsl.w	r2, r0, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	430a      	orrs	r2, r1
 8002822:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	f003 030c 	and.w	r3, r3, #12
 800282e:	2b00      	cmp	r3, #0
 8002830:	f040 80e5 	bne.w	80029fe <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2b09      	cmp	r3, #9
 800283a:	d91c      	bls.n	8002876 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	6999      	ldr	r1, [r3, #24]
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	4613      	mov	r3, r2
 8002848:	005b      	lsls	r3, r3, #1
 800284a:	4413      	add	r3, r2
 800284c:	3b1e      	subs	r3, #30
 800284e:	2207      	movs	r2, #7
 8002850:	fa02 f303 	lsl.w	r3, r2, r3
 8002854:	43db      	mvns	r3, r3
 8002856:	4019      	ands	r1, r3
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	6898      	ldr	r0, [r3, #8]
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	4613      	mov	r3, r2
 8002862:	005b      	lsls	r3, r3, #1
 8002864:	4413      	add	r3, r2
 8002866:	3b1e      	subs	r3, #30
 8002868:	fa00 f203 	lsl.w	r2, r0, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	430a      	orrs	r2, r1
 8002872:	619a      	str	r2, [r3, #24]
 8002874:	e019      	b.n	80028aa <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	6959      	ldr	r1, [r3, #20]
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	4613      	mov	r3, r2
 8002882:	005b      	lsls	r3, r3, #1
 8002884:	4413      	add	r3, r2
 8002886:	2207      	movs	r2, #7
 8002888:	fa02 f303 	lsl.w	r3, r2, r3
 800288c:	43db      	mvns	r3, r3
 800288e:	4019      	ands	r1, r3
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	6898      	ldr	r0, [r3, #8]
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	4613      	mov	r3, r2
 800289a:	005b      	lsls	r3, r3, #1
 800289c:	4413      	add	r3, r2
 800289e:	fa00 f203 	lsl.w	r2, r0, r3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	430a      	orrs	r2, r1
 80028a8:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	695a      	ldr	r2, [r3, #20]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	08db      	lsrs	r3, r3, #3
 80028b6:	f003 0303 	and.w	r3, r3, #3
 80028ba:	005b      	lsls	r3, r3, #1
 80028bc:	fa02 f303 	lsl.w	r3, r2, r3
 80028c0:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	691b      	ldr	r3, [r3, #16]
 80028c6:	3b01      	subs	r3, #1
 80028c8:	2b03      	cmp	r3, #3
 80028ca:	d84f      	bhi.n	800296c <HAL_ADC_ConfigChannel+0x28c>
 80028cc:	a201      	add	r2, pc, #4	; (adr r2, 80028d4 <HAL_ADC_ConfigChannel+0x1f4>)
 80028ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028d2:	bf00      	nop
 80028d4:	080028e5 	.word	0x080028e5
 80028d8:	08002907 	.word	0x08002907
 80028dc:	08002929 	.word	0x08002929
 80028e0:	0800294b 	.word	0x0800294b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80028ea:	4b94      	ldr	r3, [pc, #592]	; (8002b3c <HAL_ADC_ConfigChannel+0x45c>)
 80028ec:	4013      	ands	r3, r2
 80028ee:	683a      	ldr	r2, [r7, #0]
 80028f0:	6812      	ldr	r2, [r2, #0]
 80028f2:	0691      	lsls	r1, r2, #26
 80028f4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80028f6:	430a      	orrs	r2, r1
 80028f8:	431a      	orrs	r2, r3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002902:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002904:	e07e      	b.n	8002a04 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800290c:	4b8b      	ldr	r3, [pc, #556]	; (8002b3c <HAL_ADC_ConfigChannel+0x45c>)
 800290e:	4013      	ands	r3, r2
 8002910:	683a      	ldr	r2, [r7, #0]
 8002912:	6812      	ldr	r2, [r2, #0]
 8002914:	0691      	lsls	r1, r2, #26
 8002916:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002918:	430a      	orrs	r2, r1
 800291a:	431a      	orrs	r2, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002924:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002926:	e06d      	b.n	8002a04 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800292e:	4b83      	ldr	r3, [pc, #524]	; (8002b3c <HAL_ADC_ConfigChannel+0x45c>)
 8002930:	4013      	ands	r3, r2
 8002932:	683a      	ldr	r2, [r7, #0]
 8002934:	6812      	ldr	r2, [r2, #0]
 8002936:	0691      	lsls	r1, r2, #26
 8002938:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800293a:	430a      	orrs	r2, r1
 800293c:	431a      	orrs	r2, r3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002946:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002948:	e05c      	b.n	8002a04 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002950:	4b7a      	ldr	r3, [pc, #488]	; (8002b3c <HAL_ADC_ConfigChannel+0x45c>)
 8002952:	4013      	ands	r3, r2
 8002954:	683a      	ldr	r2, [r7, #0]
 8002956:	6812      	ldr	r2, [r2, #0]
 8002958:	0691      	lsls	r1, r2, #26
 800295a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800295c:	430a      	orrs	r2, r1
 800295e:	431a      	orrs	r2, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002968:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800296a:	e04b      	b.n	8002a04 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002972:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	069b      	lsls	r3, r3, #26
 800297c:	429a      	cmp	r2, r3
 800297e:	d107      	bne.n	8002990 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800298e:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002996:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	069b      	lsls	r3, r3, #26
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d107      	bne.n	80029b4 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80029b2:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029ba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	069b      	lsls	r3, r3, #26
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d107      	bne.n	80029d8 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80029d6:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029de:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	069b      	lsls	r3, r3, #26
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d10a      	bne.n	8002a02 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80029fa:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80029fc:	e001      	b.n	8002a02 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80029fe:	bf00      	nop
 8002a00:	e000      	b.n	8002a04 <HAL_ADC_ConfigChannel+0x324>
      break;
 8002a02:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	f003 0303 	and.w	r3, r3, #3
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d108      	bne.n	8002a24 <HAL_ADC_ConfigChannel+0x344>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0301 	and.w	r3, r3, #1
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d101      	bne.n	8002a24 <HAL_ADC_ConfigChannel+0x344>
 8002a20:	2301      	movs	r3, #1
 8002a22:	e000      	b.n	8002a26 <HAL_ADC_ConfigChannel+0x346>
 8002a24:	2300      	movs	r3, #0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	f040 810a 	bne.w	8002c40 <HAL_ADC_ConfigChannel+0x560>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d00f      	beq.n	8002a54 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2201      	movs	r2, #1
 8002a42:	fa02 f303 	lsl.w	r3, r2, r3
 8002a46:	43da      	mvns	r2, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	400a      	ands	r2, r1
 8002a4e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002a52:	e049      	b.n	8002ae8 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2201      	movs	r2, #1
 8002a62:	409a      	lsls	r2, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	430a      	orrs	r2, r1
 8002a6a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	2b09      	cmp	r3, #9
 8002a74:	d91c      	bls.n	8002ab0 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	6999      	ldr	r1, [r3, #24]
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	4613      	mov	r3, r2
 8002a82:	005b      	lsls	r3, r3, #1
 8002a84:	4413      	add	r3, r2
 8002a86:	3b1b      	subs	r3, #27
 8002a88:	2207      	movs	r2, #7
 8002a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8e:	43db      	mvns	r3, r3
 8002a90:	4019      	ands	r1, r3
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	6898      	ldr	r0, [r3, #8]
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	4613      	mov	r3, r2
 8002a9c:	005b      	lsls	r3, r3, #1
 8002a9e:	4413      	add	r3, r2
 8002aa0:	3b1b      	subs	r3, #27
 8002aa2:	fa00 f203 	lsl.w	r2, r0, r3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	430a      	orrs	r2, r1
 8002aac:	619a      	str	r2, [r3, #24]
 8002aae:	e01b      	b.n	8002ae8 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	6959      	ldr	r1, [r3, #20]
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	1c5a      	adds	r2, r3, #1
 8002abc:	4613      	mov	r3, r2
 8002abe:	005b      	lsls	r3, r3, #1
 8002ac0:	4413      	add	r3, r2
 8002ac2:	2207      	movs	r2, #7
 8002ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac8:	43db      	mvns	r3, r3
 8002aca:	4019      	ands	r1, r3
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	6898      	ldr	r0, [r3, #8]
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	1c5a      	adds	r2, r3, #1
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	005b      	lsls	r3, r3, #1
 8002ada:	4413      	add	r3, r2
 8002adc:	fa00 f203 	lsl.w	r2, r0, r3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	430a      	orrs	r2, r1
 8002ae6:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ae8:	4b15      	ldr	r3, [pc, #84]	; (8002b40 <HAL_ADC_ConfigChannel+0x460>)
 8002aea:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2b10      	cmp	r3, #16
 8002af2:	d105      	bne.n	8002b00 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002af4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d015      	beq.n	8002b2c <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002b04:	2b11      	cmp	r3, #17
 8002b06:	d105      	bne.n	8002b14 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002b08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d00b      	beq.n	8002b2c <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002b18:	2b12      	cmp	r3, #18
 8002b1a:	f040 8091 	bne.w	8002c40 <HAL_ADC_ConfigChannel+0x560>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002b1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	f040 808a 	bne.w	8002c40 <HAL_ADC_ConfigChannel+0x560>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b34:	d108      	bne.n	8002b48 <HAL_ADC_ConfigChannel+0x468>
 8002b36:	4b03      	ldr	r3, [pc, #12]	; (8002b44 <HAL_ADC_ConfigChannel+0x464>)
 8002b38:	60fb      	str	r3, [r7, #12]
 8002b3a:	e008      	b.n	8002b4e <HAL_ADC_ConfigChannel+0x46e>
 8002b3c:	83fff000 	.word	0x83fff000
 8002b40:	50000300 	.word	0x50000300
 8002b44:	50000100 	.word	0x50000100
 8002b48:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002b4c:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	f003 0303 	and.w	r3, r3, #3
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d108      	bne.n	8002b6e <HAL_ADC_ConfigChannel+0x48e>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0301 	and.w	r3, r3, #1
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d101      	bne.n	8002b6e <HAL_ADC_ConfigChannel+0x48e>
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e000      	b.n	8002b70 <HAL_ADC_ConfigChannel+0x490>
 8002b6e:	2300      	movs	r3, #0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d150      	bne.n	8002c16 <HAL_ADC_ConfigChannel+0x536>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002b74:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d010      	beq.n	8002b9c <HAL_ADC_ConfigChannel+0x4bc>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	f003 0303 	and.w	r3, r3, #3
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d107      	bne.n	8002b96 <HAL_ADC_ConfigChannel+0x4b6>
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0301 	and.w	r3, r3, #1
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d101      	bne.n	8002b96 <HAL_ADC_ConfigChannel+0x4b6>
 8002b92:	2301      	movs	r3, #1
 8002b94:	e000      	b.n	8002b98 <HAL_ADC_ConfigChannel+0x4b8>
 8002b96:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d13c      	bne.n	8002c16 <HAL_ADC_ConfigChannel+0x536>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	2b10      	cmp	r3, #16
 8002ba2:	d11d      	bne.n	8002be0 <HAL_ADC_ConfigChannel+0x500>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bac:	d118      	bne.n	8002be0 <HAL_ADC_ConfigChannel+0x500>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002bae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002bb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bb8:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002bba:	4b27      	ldr	r3, [pc, #156]	; (8002c58 <HAL_ADC_ConfigChannel+0x578>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a27      	ldr	r2, [pc, #156]	; (8002c5c <HAL_ADC_ConfigChannel+0x57c>)
 8002bc0:	fba2 2303 	umull	r2, r3, r2, r3
 8002bc4:	0c9a      	lsrs	r2, r3, #18
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	4413      	add	r3, r2
 8002bcc:	005b      	lsls	r3, r3, #1
 8002bce:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002bd0:	e002      	b.n	8002bd8 <HAL_ADC_ConfigChannel+0x4f8>
          {
            wait_loop_index--;
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	3b01      	subs	r3, #1
 8002bd6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d1f9      	bne.n	8002bd2 <HAL_ADC_ConfigChannel+0x4f2>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002bde:	e02e      	b.n	8002c3e <HAL_ADC_ConfigChannel+0x55e>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2b11      	cmp	r3, #17
 8002be6:	d10b      	bne.n	8002c00 <HAL_ADC_ConfigChannel+0x520>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bf0:	d106      	bne.n	8002c00 <HAL_ADC_ConfigChannel+0x520>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002bf2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002bfa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bfc:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002bfe:	e01e      	b.n	8002c3e <HAL_ADC_ConfigChannel+0x55e>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	2b12      	cmp	r3, #18
 8002c06:	d11a      	bne.n	8002c3e <HAL_ADC_ConfigChannel+0x55e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002c08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002c10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c12:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002c14:	e013      	b.n	8002c3e <HAL_ADC_ConfigChannel+0x55e>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1a:	f043 0220 	orr.w	r2, r3, #32
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002c28:	e00a      	b.n	8002c40 <HAL_ADC_ConfigChannel+0x560>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2e:	f043 0220 	orr.w	r2, r3, #32
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002c3c:	e000      	b.n	8002c40 <HAL_ADC_ConfigChannel+0x560>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002c3e:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2200      	movs	r2, #0
 8002c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002c48:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	376c      	adds	r7, #108	; 0x6c
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr
 8002c58:	20000000 	.word	0x20000000
 8002c5c:	431bde83 	.word	0x431bde83

08002c60 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b099      	sub	sp, #100	; 0x64
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c78:	d102      	bne.n	8002c80 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8002c7a:	4b5a      	ldr	r3, [pc, #360]	; (8002de4 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8002c7c:	60bb      	str	r3, [r7, #8]
 8002c7e:	e002      	b.n	8002c86 <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8002c80:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002c84:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d101      	bne.n	8002c90 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e0a2      	b.n	8002dd6 <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d101      	bne.n	8002c9e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002c9a:	2302      	movs	r3, #2
 8002c9c:	e09b      	b.n	8002dd6 <HAL_ADCEx_MultiModeConfigChannel+0x176>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	f003 0304 	and.w	r3, r3, #4
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d17f      	bne.n	8002db4 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	f003 0304 	and.w	r3, r3, #4
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d179      	bne.n	8002db4 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002cc0:	4b49      	ldr	r3, [pc, #292]	; (8002de8 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 8002cc2:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d040      	beq.n	8002d4e <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002ccc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	6859      	ldr	r1, [r3, #4]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002cde:	035b      	lsls	r3, r3, #13
 8002ce0:	430b      	orrs	r3, r1
 8002ce2:	431a      	orrs	r2, r3
 8002ce4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ce6:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	f003 0303 	and.w	r3, r3, #3
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d108      	bne.n	8002d08 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0301 	and.w	r3, r3, #1
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d101      	bne.n	8002d08 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002d04:	2301      	movs	r3, #1
 8002d06:	e000      	b.n	8002d0a <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8002d08:	2300      	movs	r3, #0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d15c      	bne.n	8002dc8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	f003 0303 	and.w	r3, r3, #3
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d107      	bne.n	8002d2a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0301 	and.w	r3, r3, #1
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d101      	bne.n	8002d2a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002d26:	2301      	movs	r3, #1
 8002d28:	e000      	b.n	8002d2c <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8002d2a:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d14b      	bne.n	8002dc8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002d30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002d38:	f023 030f 	bic.w	r3, r3, #15
 8002d3c:	683a      	ldr	r2, [r7, #0]
 8002d3e:	6811      	ldr	r1, [r2, #0]
 8002d40:	683a      	ldr	r2, [r7, #0]
 8002d42:	6892      	ldr	r2, [r2, #8]
 8002d44:	430a      	orrs	r2, r1
 8002d46:	431a      	orrs	r2, r3
 8002d48:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d4a:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d4c:	e03c      	b.n	8002dc8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002d4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d58:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	f003 0303 	and.w	r3, r3, #3
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d108      	bne.n	8002d7a <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0301 	and.w	r3, r3, #1
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d101      	bne.n	8002d7a <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8002d76:	2301      	movs	r3, #1
 8002d78:	e000      	b.n	8002d7c <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d123      	bne.n	8002dc8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	f003 0303 	and.w	r3, r3, #3
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d107      	bne.n	8002d9c <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0301 	and.w	r3, r3, #1
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d101      	bne.n	8002d9c <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e000      	b.n	8002d9e <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8002d9c:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d112      	bne.n	8002dc8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002da2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002daa:	f023 030f 	bic.w	r3, r3, #15
 8002dae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002db0:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002db2:	e009      	b.n	8002dc8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db8:	f043 0220 	orr.w	r2, r3, #32
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002dc6:	e000      	b.n	8002dca <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002dc8:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002dd2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3764      	adds	r7, #100	; 0x64
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop
 8002de4:	50000100 	.word	0x50000100
 8002de8:	50000300 	.word	0x50000300

08002dec <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b084      	sub	sp, #16
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002df4:	2300      	movs	r3, #0
 8002df6:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	f003 0303 	and.w	r3, r3, #3
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d108      	bne.n	8002e18 <ADC_Enable+0x2c>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0301 	and.w	r3, r3, #1
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d101      	bne.n	8002e18 <ADC_Enable+0x2c>
 8002e14:	2301      	movs	r3, #1
 8002e16:	e000      	b.n	8002e1a <ADC_Enable+0x2e>
 8002e18:	2300      	movs	r3, #0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d143      	bne.n	8002ea6 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	689a      	ldr	r2, [r3, #8]
 8002e24:	4b22      	ldr	r3, [pc, #136]	; (8002eb0 <ADC_Enable+0xc4>)
 8002e26:	4013      	ands	r3, r2
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d00d      	beq.n	8002e48 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e30:	f043 0210 	orr.w	r2, r3, #16
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e3c:	f043 0201 	orr.w	r2, r3, #1
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e02f      	b.n	8002ea8 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	689a      	ldr	r2, [r3, #8]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f042 0201 	orr.w	r2, r2, #1
 8002e56:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002e58:	f7ff f8ee 	bl	8002038 <HAL_GetTick>
 8002e5c:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002e5e:	e01b      	b.n	8002e98 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002e60:	f7ff f8ea 	bl	8002038 <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d914      	bls.n	8002e98 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0301 	and.w	r3, r3, #1
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d00d      	beq.n	8002e98 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e80:	f043 0210 	orr.w	r2, r3, #16
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e8c:	f043 0201 	orr.w	r2, r3, #1
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e007      	b.n	8002ea8 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0301 	and.w	r3, r3, #1
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d1dc      	bne.n	8002e60 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002ea6:	2300      	movs	r3, #0
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3710      	adds	r7, #16
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	8000003f 	.word	0x8000003f

08002eb4 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	f003 0303 	and.w	r3, r3, #3
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d108      	bne.n	8002ee0 <ADC_Disable+0x2c>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0301 	and.w	r3, r3, #1
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d101      	bne.n	8002ee0 <ADC_Disable+0x2c>
 8002edc:	2301      	movs	r3, #1
 8002ede:	e000      	b.n	8002ee2 <ADC_Disable+0x2e>
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d047      	beq.n	8002f76 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	f003 030d 	and.w	r3, r3, #13
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d10f      	bne.n	8002f14 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	689a      	ldr	r2, [r3, #8]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f042 0202 	orr.w	r2, r2, #2
 8002f02:	609a      	str	r2, [r3, #8]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	2203      	movs	r2, #3
 8002f0a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002f0c:	f7ff f894 	bl	8002038 <HAL_GetTick>
 8002f10:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002f12:	e029      	b.n	8002f68 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f18:	f043 0210 	orr.w	r2, r3, #16
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f24:	f043 0201 	orr.w	r2, r3, #1
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e023      	b.n	8002f78 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002f30:	f7ff f882 	bl	8002038 <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d914      	bls.n	8002f68 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	f003 0301 	and.w	r3, r3, #1
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d10d      	bne.n	8002f68 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f50:	f043 0210 	orr.w	r2, r3, #16
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f5c:	f043 0201 	orr.w	r2, r3, #1
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e007      	b.n	8002f78 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	f003 0301 	and.w	r3, r3, #1
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d0dc      	beq.n	8002f30 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002f76:	2300      	movs	r3, #0
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3710      	adds	r7, #16
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b085      	sub	sp, #20
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f003 0307 	and.w	r3, r3, #7
 8002f8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f90:	4b0c      	ldr	r3, [pc, #48]	; (8002fc4 <__NVIC_SetPriorityGrouping+0x44>)
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f96:	68ba      	ldr	r2, [r7, #8]
 8002f98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fa8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002fac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fb2:	4a04      	ldr	r2, [pc, #16]	; (8002fc4 <__NVIC_SetPriorityGrouping+0x44>)
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	60d3      	str	r3, [r2, #12]
}
 8002fb8:	bf00      	nop
 8002fba:	3714      	adds	r7, #20
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr
 8002fc4:	e000ed00 	.word	0xe000ed00

08002fc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fcc:	4b04      	ldr	r3, [pc, #16]	; (8002fe0 <__NVIC_GetPriorityGrouping+0x18>)
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	0a1b      	lsrs	r3, r3, #8
 8002fd2:	f003 0307 	and.w	r3, r3, #7
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr
 8002fe0:	e000ed00 	.word	0xe000ed00

08002fe4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	4603      	mov	r3, r0
 8002fec:	6039      	str	r1, [r7, #0]
 8002fee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ff0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	db0a      	blt.n	800300e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	b2da      	uxtb	r2, r3
 8002ffc:	490c      	ldr	r1, [pc, #48]	; (8003030 <__NVIC_SetPriority+0x4c>)
 8002ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003002:	0112      	lsls	r2, r2, #4
 8003004:	b2d2      	uxtb	r2, r2
 8003006:	440b      	add	r3, r1
 8003008:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800300c:	e00a      	b.n	8003024 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	b2da      	uxtb	r2, r3
 8003012:	4908      	ldr	r1, [pc, #32]	; (8003034 <__NVIC_SetPriority+0x50>)
 8003014:	79fb      	ldrb	r3, [r7, #7]
 8003016:	f003 030f 	and.w	r3, r3, #15
 800301a:	3b04      	subs	r3, #4
 800301c:	0112      	lsls	r2, r2, #4
 800301e:	b2d2      	uxtb	r2, r2
 8003020:	440b      	add	r3, r1
 8003022:	761a      	strb	r2, [r3, #24]
}
 8003024:	bf00      	nop
 8003026:	370c      	adds	r7, #12
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr
 8003030:	e000e100 	.word	0xe000e100
 8003034:	e000ed00 	.word	0xe000ed00

08003038 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003038:	b480      	push	{r7}
 800303a:	b089      	sub	sp, #36	; 0x24
 800303c:	af00      	add	r7, sp, #0
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	60b9      	str	r1, [r7, #8]
 8003042:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	f003 0307 	and.w	r3, r3, #7
 800304a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	f1c3 0307 	rsb	r3, r3, #7
 8003052:	2b04      	cmp	r3, #4
 8003054:	bf28      	it	cs
 8003056:	2304      	movcs	r3, #4
 8003058:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	3304      	adds	r3, #4
 800305e:	2b06      	cmp	r3, #6
 8003060:	d902      	bls.n	8003068 <NVIC_EncodePriority+0x30>
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	3b03      	subs	r3, #3
 8003066:	e000      	b.n	800306a <NVIC_EncodePriority+0x32>
 8003068:	2300      	movs	r3, #0
 800306a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800306c:	f04f 32ff 	mov.w	r2, #4294967295
 8003070:	69bb      	ldr	r3, [r7, #24]
 8003072:	fa02 f303 	lsl.w	r3, r2, r3
 8003076:	43da      	mvns	r2, r3
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	401a      	ands	r2, r3
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003080:	f04f 31ff 	mov.w	r1, #4294967295
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	fa01 f303 	lsl.w	r3, r1, r3
 800308a:	43d9      	mvns	r1, r3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003090:	4313      	orrs	r3, r2
         );
}
 8003092:	4618      	mov	r0, r3
 8003094:	3724      	adds	r7, #36	; 0x24
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr
	...

080030a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	3b01      	subs	r3, #1
 80030ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030b0:	d301      	bcc.n	80030b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030b2:	2301      	movs	r3, #1
 80030b4:	e00f      	b.n	80030d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030b6:	4a0a      	ldr	r2, [pc, #40]	; (80030e0 <SysTick_Config+0x40>)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	3b01      	subs	r3, #1
 80030bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030be:	210f      	movs	r1, #15
 80030c0:	f04f 30ff 	mov.w	r0, #4294967295
 80030c4:	f7ff ff8e 	bl	8002fe4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030c8:	4b05      	ldr	r3, [pc, #20]	; (80030e0 <SysTick_Config+0x40>)
 80030ca:	2200      	movs	r2, #0
 80030cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030ce:	4b04      	ldr	r3, [pc, #16]	; (80030e0 <SysTick_Config+0x40>)
 80030d0:	2207      	movs	r2, #7
 80030d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030d4:	2300      	movs	r3, #0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3708      	adds	r7, #8
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	e000e010 	.word	0xe000e010

080030e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f7ff ff47 	bl	8002f80 <__NVIC_SetPriorityGrouping>
}
 80030f2:	bf00      	nop
 80030f4:	3708      	adds	r7, #8
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}

080030fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030fa:	b580      	push	{r7, lr}
 80030fc:	b086      	sub	sp, #24
 80030fe:	af00      	add	r7, sp, #0
 8003100:	4603      	mov	r3, r0
 8003102:	60b9      	str	r1, [r7, #8]
 8003104:	607a      	str	r2, [r7, #4]
 8003106:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003108:	2300      	movs	r3, #0
 800310a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800310c:	f7ff ff5c 	bl	8002fc8 <__NVIC_GetPriorityGrouping>
 8003110:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	68b9      	ldr	r1, [r7, #8]
 8003116:	6978      	ldr	r0, [r7, #20]
 8003118:	f7ff ff8e 	bl	8003038 <NVIC_EncodePriority>
 800311c:	4602      	mov	r2, r0
 800311e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003122:	4611      	mov	r1, r2
 8003124:	4618      	mov	r0, r3
 8003126:	f7ff ff5d 	bl	8002fe4 <__NVIC_SetPriority>
}
 800312a:	bf00      	nop
 800312c:	3718      	adds	r7, #24
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}

08003132 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003132:	b580      	push	{r7, lr}
 8003134:	b082      	sub	sp, #8
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f7ff ffb0 	bl	80030a0 <SysTick_Config>
 8003140:	4603      	mov	r3, r0
}
 8003142:	4618      	mov	r0, r3
 8003144:	3708      	adds	r7, #8
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
	...

0800314c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800314c:	b480      	push	{r7}
 800314e:	b087      	sub	sp, #28
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003156:	2300      	movs	r3, #0
 8003158:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800315a:	e14e      	b.n	80033fa <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	2101      	movs	r1, #1
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	fa01 f303 	lsl.w	r3, r1, r3
 8003168:	4013      	ands	r3, r2
 800316a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2b00      	cmp	r3, #0
 8003170:	f000 8140 	beq.w	80033f4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f003 0303 	and.w	r3, r3, #3
 800317c:	2b01      	cmp	r3, #1
 800317e:	d005      	beq.n	800318c <HAL_GPIO_Init+0x40>
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	f003 0303 	and.w	r3, r3, #3
 8003188:	2b02      	cmp	r3, #2
 800318a:	d130      	bne.n	80031ee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	005b      	lsls	r3, r3, #1
 8003196:	2203      	movs	r2, #3
 8003198:	fa02 f303 	lsl.w	r3, r2, r3
 800319c:	43db      	mvns	r3, r3
 800319e:	693a      	ldr	r2, [r7, #16]
 80031a0:	4013      	ands	r3, r2
 80031a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	68da      	ldr	r2, [r3, #12]
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	005b      	lsls	r3, r3, #1
 80031ac:	fa02 f303 	lsl.w	r3, r2, r3
 80031b0:	693a      	ldr	r2, [r7, #16]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	693a      	ldr	r2, [r7, #16]
 80031ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031c2:	2201      	movs	r2, #1
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ca:	43db      	mvns	r3, r3
 80031cc:	693a      	ldr	r2, [r7, #16]
 80031ce:	4013      	ands	r3, r2
 80031d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	091b      	lsrs	r3, r3, #4
 80031d8:	f003 0201 	and.w	r2, r3, #1
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	fa02 f303 	lsl.w	r3, r2, r3
 80031e2:	693a      	ldr	r2, [r7, #16]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	693a      	ldr	r2, [r7, #16]
 80031ec:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	f003 0303 	and.w	r3, r3, #3
 80031f6:	2b03      	cmp	r3, #3
 80031f8:	d017      	beq.n	800322a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	005b      	lsls	r3, r3, #1
 8003204:	2203      	movs	r2, #3
 8003206:	fa02 f303 	lsl.w	r3, r2, r3
 800320a:	43db      	mvns	r3, r3
 800320c:	693a      	ldr	r2, [r7, #16]
 800320e:	4013      	ands	r3, r2
 8003210:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	689a      	ldr	r2, [r3, #8]
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	005b      	lsls	r3, r3, #1
 800321a:	fa02 f303 	lsl.w	r3, r2, r3
 800321e:	693a      	ldr	r2, [r7, #16]
 8003220:	4313      	orrs	r3, r2
 8003222:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	693a      	ldr	r2, [r7, #16]
 8003228:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f003 0303 	and.w	r3, r3, #3
 8003232:	2b02      	cmp	r3, #2
 8003234:	d123      	bne.n	800327e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	08da      	lsrs	r2, r3, #3
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	3208      	adds	r2, #8
 800323e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003242:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	f003 0307 	and.w	r3, r3, #7
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	220f      	movs	r2, #15
 800324e:	fa02 f303 	lsl.w	r3, r2, r3
 8003252:	43db      	mvns	r3, r3
 8003254:	693a      	ldr	r2, [r7, #16]
 8003256:	4013      	ands	r3, r2
 8003258:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	691a      	ldr	r2, [r3, #16]
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	f003 0307 	and.w	r3, r3, #7
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	fa02 f303 	lsl.w	r3, r2, r3
 800326a:	693a      	ldr	r2, [r7, #16]
 800326c:	4313      	orrs	r3, r2
 800326e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	08da      	lsrs	r2, r3, #3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	3208      	adds	r2, #8
 8003278:	6939      	ldr	r1, [r7, #16]
 800327a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	005b      	lsls	r3, r3, #1
 8003288:	2203      	movs	r2, #3
 800328a:	fa02 f303 	lsl.w	r3, r2, r3
 800328e:	43db      	mvns	r3, r3
 8003290:	693a      	ldr	r2, [r7, #16]
 8003292:	4013      	ands	r3, r2
 8003294:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	f003 0203 	and.w	r2, r3, #3
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	005b      	lsls	r3, r3, #1
 80032a2:	fa02 f303 	lsl.w	r3, r2, r3
 80032a6:	693a      	ldr	r2, [r7, #16]
 80032a8:	4313      	orrs	r3, r2
 80032aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	693a      	ldr	r2, [r7, #16]
 80032b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	f000 809a 	beq.w	80033f4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032c0:	4b55      	ldr	r3, [pc, #340]	; (8003418 <HAL_GPIO_Init+0x2cc>)
 80032c2:	699b      	ldr	r3, [r3, #24]
 80032c4:	4a54      	ldr	r2, [pc, #336]	; (8003418 <HAL_GPIO_Init+0x2cc>)
 80032c6:	f043 0301 	orr.w	r3, r3, #1
 80032ca:	6193      	str	r3, [r2, #24]
 80032cc:	4b52      	ldr	r3, [pc, #328]	; (8003418 <HAL_GPIO_Init+0x2cc>)
 80032ce:	699b      	ldr	r3, [r3, #24]
 80032d0:	f003 0301 	and.w	r3, r3, #1
 80032d4:	60bb      	str	r3, [r7, #8]
 80032d6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80032d8:	4a50      	ldr	r2, [pc, #320]	; (800341c <HAL_GPIO_Init+0x2d0>)
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	089b      	lsrs	r3, r3, #2
 80032de:	3302      	adds	r3, #2
 80032e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	f003 0303 	and.w	r3, r3, #3
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	220f      	movs	r2, #15
 80032f0:	fa02 f303 	lsl.w	r3, r2, r3
 80032f4:	43db      	mvns	r3, r3
 80032f6:	693a      	ldr	r2, [r7, #16]
 80032f8:	4013      	ands	r3, r2
 80032fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003302:	d013      	beq.n	800332c <HAL_GPIO_Init+0x1e0>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	4a46      	ldr	r2, [pc, #280]	; (8003420 <HAL_GPIO_Init+0x2d4>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d00d      	beq.n	8003328 <HAL_GPIO_Init+0x1dc>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	4a45      	ldr	r2, [pc, #276]	; (8003424 <HAL_GPIO_Init+0x2d8>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d007      	beq.n	8003324 <HAL_GPIO_Init+0x1d8>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	4a44      	ldr	r2, [pc, #272]	; (8003428 <HAL_GPIO_Init+0x2dc>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d101      	bne.n	8003320 <HAL_GPIO_Init+0x1d4>
 800331c:	2303      	movs	r3, #3
 800331e:	e006      	b.n	800332e <HAL_GPIO_Init+0x1e2>
 8003320:	2305      	movs	r3, #5
 8003322:	e004      	b.n	800332e <HAL_GPIO_Init+0x1e2>
 8003324:	2302      	movs	r3, #2
 8003326:	e002      	b.n	800332e <HAL_GPIO_Init+0x1e2>
 8003328:	2301      	movs	r3, #1
 800332a:	e000      	b.n	800332e <HAL_GPIO_Init+0x1e2>
 800332c:	2300      	movs	r3, #0
 800332e:	697a      	ldr	r2, [r7, #20]
 8003330:	f002 0203 	and.w	r2, r2, #3
 8003334:	0092      	lsls	r2, r2, #2
 8003336:	4093      	lsls	r3, r2
 8003338:	693a      	ldr	r2, [r7, #16]
 800333a:	4313      	orrs	r3, r2
 800333c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800333e:	4937      	ldr	r1, [pc, #220]	; (800341c <HAL_GPIO_Init+0x2d0>)
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	089b      	lsrs	r3, r3, #2
 8003344:	3302      	adds	r3, #2
 8003346:	693a      	ldr	r2, [r7, #16]
 8003348:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800334c:	4b37      	ldr	r3, [pc, #220]	; (800342c <HAL_GPIO_Init+0x2e0>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	43db      	mvns	r3, r3
 8003356:	693a      	ldr	r2, [r7, #16]
 8003358:	4013      	ands	r3, r2
 800335a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003364:	2b00      	cmp	r3, #0
 8003366:	d003      	beq.n	8003370 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8003368:	693a      	ldr	r2, [r7, #16]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	4313      	orrs	r3, r2
 800336e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003370:	4a2e      	ldr	r2, [pc, #184]	; (800342c <HAL_GPIO_Init+0x2e0>)
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003376:	4b2d      	ldr	r3, [pc, #180]	; (800342c <HAL_GPIO_Init+0x2e0>)
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	43db      	mvns	r3, r3
 8003380:	693a      	ldr	r2, [r7, #16]
 8003382:	4013      	ands	r3, r2
 8003384:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d003      	beq.n	800339a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8003392:	693a      	ldr	r2, [r7, #16]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	4313      	orrs	r3, r2
 8003398:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800339a:	4a24      	ldr	r2, [pc, #144]	; (800342c <HAL_GPIO_Init+0x2e0>)
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80033a0:	4b22      	ldr	r3, [pc, #136]	; (800342c <HAL_GPIO_Init+0x2e0>)
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	43db      	mvns	r3, r3
 80033aa:	693a      	ldr	r2, [r7, #16]
 80033ac:	4013      	ands	r3, r2
 80033ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d003      	beq.n	80033c4 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80033bc:	693a      	ldr	r2, [r7, #16]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	4313      	orrs	r3, r2
 80033c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80033c4:	4a19      	ldr	r2, [pc, #100]	; (800342c <HAL_GPIO_Init+0x2e0>)
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80033ca:	4b18      	ldr	r3, [pc, #96]	; (800342c <HAL_GPIO_Init+0x2e0>)
 80033cc:	68db      	ldr	r3, [r3, #12]
 80033ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	43db      	mvns	r3, r3
 80033d4:	693a      	ldr	r2, [r7, #16]
 80033d6:	4013      	ands	r3, r2
 80033d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d003      	beq.n	80033ee <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80033e6:	693a      	ldr	r2, [r7, #16]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80033ee:	4a0f      	ldr	r2, [pc, #60]	; (800342c <HAL_GPIO_Init+0x2e0>)
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	3301      	adds	r3, #1
 80033f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	fa22 f303 	lsr.w	r3, r2, r3
 8003404:	2b00      	cmp	r3, #0
 8003406:	f47f aea9 	bne.w	800315c <HAL_GPIO_Init+0x10>
  }
}
 800340a:	bf00      	nop
 800340c:	bf00      	nop
 800340e:	371c      	adds	r7, #28
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr
 8003418:	40021000 	.word	0x40021000
 800341c:	40010000 	.word	0x40010000
 8003420:	48000400 	.word	0x48000400
 8003424:	48000800 	.word	0x48000800
 8003428:	48000c00 	.word	0x48000c00
 800342c:	40010400 	.word	0x40010400

08003430 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003430:	b480      	push	{r7}
 8003432:	b085      	sub	sp, #20
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	460b      	mov	r3, r1
 800343a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	691a      	ldr	r2, [r3, #16]
 8003440:	887b      	ldrh	r3, [r7, #2]
 8003442:	4013      	ands	r3, r2
 8003444:	2b00      	cmp	r3, #0
 8003446:	d002      	beq.n	800344e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003448:	2301      	movs	r3, #1
 800344a:	73fb      	strb	r3, [r7, #15]
 800344c:	e001      	b.n	8003452 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800344e:	2300      	movs	r3, #0
 8003450:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003452:	7bfb      	ldrb	r3, [r7, #15]
}
 8003454:	4618      	mov	r0, r3
 8003456:	3714      	adds	r7, #20
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr

08003460 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003460:	b480      	push	{r7}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	460b      	mov	r3, r1
 800346a:	807b      	strh	r3, [r7, #2]
 800346c:	4613      	mov	r3, r2
 800346e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003470:	787b      	ldrb	r3, [r7, #1]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d003      	beq.n	800347e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003476:	887a      	ldrh	r2, [r7, #2]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800347c:	e002      	b.n	8003484 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800347e:	887a      	ldrh	r2, [r7, #2]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003484:	bf00      	nop
 8003486:	370c      	adds	r7, #12
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr

08003490 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8003496:	af00      	add	r7, sp, #0
 8003498:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800349c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80034a0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80034a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d102      	bne.n	80034b6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	f001 b823 	b.w	80044fc <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0301 	and.w	r3, r3, #1
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	f000 817d 	beq.w	80037c6 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80034cc:	4bbc      	ldr	r3, [pc, #752]	; (80037c0 <HAL_RCC_OscConfig+0x330>)
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f003 030c 	and.w	r3, r3, #12
 80034d4:	2b04      	cmp	r3, #4
 80034d6:	d00c      	beq.n	80034f2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80034d8:	4bb9      	ldr	r3, [pc, #740]	; (80037c0 <HAL_RCC_OscConfig+0x330>)
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	f003 030c 	and.w	r3, r3, #12
 80034e0:	2b08      	cmp	r3, #8
 80034e2:	d15c      	bne.n	800359e <HAL_RCC_OscConfig+0x10e>
 80034e4:	4bb6      	ldr	r3, [pc, #728]	; (80037c0 <HAL_RCC_OscConfig+0x330>)
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034f0:	d155      	bne.n	800359e <HAL_RCC_OscConfig+0x10e>
 80034f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034f6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034fa:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80034fe:	fa93 f3a3 	rbit	r3, r3
 8003502:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003506:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800350a:	fab3 f383 	clz	r3, r3
 800350e:	b2db      	uxtb	r3, r3
 8003510:	095b      	lsrs	r3, r3, #5
 8003512:	b2db      	uxtb	r3, r3
 8003514:	f043 0301 	orr.w	r3, r3, #1
 8003518:	b2db      	uxtb	r3, r3
 800351a:	2b01      	cmp	r3, #1
 800351c:	d102      	bne.n	8003524 <HAL_RCC_OscConfig+0x94>
 800351e:	4ba8      	ldr	r3, [pc, #672]	; (80037c0 <HAL_RCC_OscConfig+0x330>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	e015      	b.n	8003550 <HAL_RCC_OscConfig+0xc0>
 8003524:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003528:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800352c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8003530:	fa93 f3a3 	rbit	r3, r3
 8003534:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003538:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800353c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003540:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8003544:	fa93 f3a3 	rbit	r3, r3
 8003548:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800354c:	4b9c      	ldr	r3, [pc, #624]	; (80037c0 <HAL_RCC_OscConfig+0x330>)
 800354e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003550:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003554:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8003558:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800355c:	fa92 f2a2 	rbit	r2, r2
 8003560:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8003564:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8003568:	fab2 f282 	clz	r2, r2
 800356c:	b2d2      	uxtb	r2, r2
 800356e:	f042 0220 	orr.w	r2, r2, #32
 8003572:	b2d2      	uxtb	r2, r2
 8003574:	f002 021f 	and.w	r2, r2, #31
 8003578:	2101      	movs	r1, #1
 800357a:	fa01 f202 	lsl.w	r2, r1, r2
 800357e:	4013      	ands	r3, r2
 8003580:	2b00      	cmp	r3, #0
 8003582:	f000 811f 	beq.w	80037c4 <HAL_RCC_OscConfig+0x334>
 8003586:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800358a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	2b00      	cmp	r3, #0
 8003594:	f040 8116 	bne.w	80037c4 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	f000 bfaf 	b.w	80044fc <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800359e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035ae:	d106      	bne.n	80035be <HAL_RCC_OscConfig+0x12e>
 80035b0:	4b83      	ldr	r3, [pc, #524]	; (80037c0 <HAL_RCC_OscConfig+0x330>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a82      	ldr	r2, [pc, #520]	; (80037c0 <HAL_RCC_OscConfig+0x330>)
 80035b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035ba:	6013      	str	r3, [r2, #0]
 80035bc:	e036      	b.n	800362c <HAL_RCC_OscConfig+0x19c>
 80035be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d10c      	bne.n	80035e8 <HAL_RCC_OscConfig+0x158>
 80035ce:	4b7c      	ldr	r3, [pc, #496]	; (80037c0 <HAL_RCC_OscConfig+0x330>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a7b      	ldr	r2, [pc, #492]	; (80037c0 <HAL_RCC_OscConfig+0x330>)
 80035d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035d8:	6013      	str	r3, [r2, #0]
 80035da:	4b79      	ldr	r3, [pc, #484]	; (80037c0 <HAL_RCC_OscConfig+0x330>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a78      	ldr	r2, [pc, #480]	; (80037c0 <HAL_RCC_OscConfig+0x330>)
 80035e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035e4:	6013      	str	r3, [r2, #0]
 80035e6:	e021      	b.n	800362c <HAL_RCC_OscConfig+0x19c>
 80035e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035ec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035f8:	d10c      	bne.n	8003614 <HAL_RCC_OscConfig+0x184>
 80035fa:	4b71      	ldr	r3, [pc, #452]	; (80037c0 <HAL_RCC_OscConfig+0x330>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a70      	ldr	r2, [pc, #448]	; (80037c0 <HAL_RCC_OscConfig+0x330>)
 8003600:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003604:	6013      	str	r3, [r2, #0]
 8003606:	4b6e      	ldr	r3, [pc, #440]	; (80037c0 <HAL_RCC_OscConfig+0x330>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a6d      	ldr	r2, [pc, #436]	; (80037c0 <HAL_RCC_OscConfig+0x330>)
 800360c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003610:	6013      	str	r3, [r2, #0]
 8003612:	e00b      	b.n	800362c <HAL_RCC_OscConfig+0x19c>
 8003614:	4b6a      	ldr	r3, [pc, #424]	; (80037c0 <HAL_RCC_OscConfig+0x330>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a69      	ldr	r2, [pc, #420]	; (80037c0 <HAL_RCC_OscConfig+0x330>)
 800361a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800361e:	6013      	str	r3, [r2, #0]
 8003620:	4b67      	ldr	r3, [pc, #412]	; (80037c0 <HAL_RCC_OscConfig+0x330>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a66      	ldr	r2, [pc, #408]	; (80037c0 <HAL_RCC_OscConfig+0x330>)
 8003626:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800362a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800362c:	4b64      	ldr	r3, [pc, #400]	; (80037c0 <HAL_RCC_OscConfig+0x330>)
 800362e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003630:	f023 020f 	bic.w	r2, r3, #15
 8003634:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003638:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	495f      	ldr	r1, [pc, #380]	; (80037c0 <HAL_RCC_OscConfig+0x330>)
 8003642:	4313      	orrs	r3, r2
 8003644:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003646:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800364a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d059      	beq.n	800370a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003656:	f7fe fcef 	bl	8002038 <HAL_GetTick>
 800365a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800365e:	e00a      	b.n	8003676 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003660:	f7fe fcea 	bl	8002038 <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	2b64      	cmp	r3, #100	; 0x64
 800366e:	d902      	bls.n	8003676 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003670:	2303      	movs	r3, #3
 8003672:	f000 bf43 	b.w	80044fc <HAL_RCC_OscConfig+0x106c>
 8003676:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800367a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800367e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8003682:	fa93 f3a3 	rbit	r3, r3
 8003686:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800368a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800368e:	fab3 f383 	clz	r3, r3
 8003692:	b2db      	uxtb	r3, r3
 8003694:	095b      	lsrs	r3, r3, #5
 8003696:	b2db      	uxtb	r3, r3
 8003698:	f043 0301 	orr.w	r3, r3, #1
 800369c:	b2db      	uxtb	r3, r3
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d102      	bne.n	80036a8 <HAL_RCC_OscConfig+0x218>
 80036a2:	4b47      	ldr	r3, [pc, #284]	; (80037c0 <HAL_RCC_OscConfig+0x330>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	e015      	b.n	80036d4 <HAL_RCC_OscConfig+0x244>
 80036a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036ac:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036b0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80036b4:	fa93 f3a3 	rbit	r3, r3
 80036b8:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80036bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036c0:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80036c4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80036c8:	fa93 f3a3 	rbit	r3, r3
 80036cc:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80036d0:	4b3b      	ldr	r3, [pc, #236]	; (80037c0 <HAL_RCC_OscConfig+0x330>)
 80036d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80036d8:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80036dc:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80036e0:	fa92 f2a2 	rbit	r2, r2
 80036e4:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80036e8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80036ec:	fab2 f282 	clz	r2, r2
 80036f0:	b2d2      	uxtb	r2, r2
 80036f2:	f042 0220 	orr.w	r2, r2, #32
 80036f6:	b2d2      	uxtb	r2, r2
 80036f8:	f002 021f 	and.w	r2, r2, #31
 80036fc:	2101      	movs	r1, #1
 80036fe:	fa01 f202 	lsl.w	r2, r1, r2
 8003702:	4013      	ands	r3, r2
 8003704:	2b00      	cmp	r3, #0
 8003706:	d0ab      	beq.n	8003660 <HAL_RCC_OscConfig+0x1d0>
 8003708:	e05d      	b.n	80037c6 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800370a:	f7fe fc95 	bl	8002038 <HAL_GetTick>
 800370e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003712:	e00a      	b.n	800372a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003714:	f7fe fc90 	bl	8002038 <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	2b64      	cmp	r3, #100	; 0x64
 8003722:	d902      	bls.n	800372a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8003724:	2303      	movs	r3, #3
 8003726:	f000 bee9 	b.w	80044fc <HAL_RCC_OscConfig+0x106c>
 800372a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800372e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003732:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003736:	fa93 f3a3 	rbit	r3, r3
 800373a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800373e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003742:	fab3 f383 	clz	r3, r3
 8003746:	b2db      	uxtb	r3, r3
 8003748:	095b      	lsrs	r3, r3, #5
 800374a:	b2db      	uxtb	r3, r3
 800374c:	f043 0301 	orr.w	r3, r3, #1
 8003750:	b2db      	uxtb	r3, r3
 8003752:	2b01      	cmp	r3, #1
 8003754:	d102      	bne.n	800375c <HAL_RCC_OscConfig+0x2cc>
 8003756:	4b1a      	ldr	r3, [pc, #104]	; (80037c0 <HAL_RCC_OscConfig+0x330>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	e015      	b.n	8003788 <HAL_RCC_OscConfig+0x2f8>
 800375c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003760:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003764:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003768:	fa93 f3a3 	rbit	r3, r3
 800376c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003770:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003774:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003778:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800377c:	fa93 f3a3 	rbit	r3, r3
 8003780:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003784:	4b0e      	ldr	r3, [pc, #56]	; (80037c0 <HAL_RCC_OscConfig+0x330>)
 8003786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003788:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800378c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003790:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003794:	fa92 f2a2 	rbit	r2, r2
 8003798:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800379c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80037a0:	fab2 f282 	clz	r2, r2
 80037a4:	b2d2      	uxtb	r2, r2
 80037a6:	f042 0220 	orr.w	r2, r2, #32
 80037aa:	b2d2      	uxtb	r2, r2
 80037ac:	f002 021f 	and.w	r2, r2, #31
 80037b0:	2101      	movs	r1, #1
 80037b2:	fa01 f202 	lsl.w	r2, r1, r2
 80037b6:	4013      	ands	r3, r2
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d1ab      	bne.n	8003714 <HAL_RCC_OscConfig+0x284>
 80037bc:	e003      	b.n	80037c6 <HAL_RCC_OscConfig+0x336>
 80037be:	bf00      	nop
 80037c0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0302 	and.w	r3, r3, #2
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	f000 817d 	beq.w	8003ad6 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80037dc:	4ba6      	ldr	r3, [pc, #664]	; (8003a78 <HAL_RCC_OscConfig+0x5e8>)
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f003 030c 	and.w	r3, r3, #12
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d00b      	beq.n	8003800 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80037e8:	4ba3      	ldr	r3, [pc, #652]	; (8003a78 <HAL_RCC_OscConfig+0x5e8>)
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	f003 030c 	and.w	r3, r3, #12
 80037f0:	2b08      	cmp	r3, #8
 80037f2:	d172      	bne.n	80038da <HAL_RCC_OscConfig+0x44a>
 80037f4:	4ba0      	ldr	r3, [pc, #640]	; (8003a78 <HAL_RCC_OscConfig+0x5e8>)
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d16c      	bne.n	80038da <HAL_RCC_OscConfig+0x44a>
 8003800:	2302      	movs	r3, #2
 8003802:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003806:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800380a:	fa93 f3a3 	rbit	r3, r3
 800380e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003812:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003816:	fab3 f383 	clz	r3, r3
 800381a:	b2db      	uxtb	r3, r3
 800381c:	095b      	lsrs	r3, r3, #5
 800381e:	b2db      	uxtb	r3, r3
 8003820:	f043 0301 	orr.w	r3, r3, #1
 8003824:	b2db      	uxtb	r3, r3
 8003826:	2b01      	cmp	r3, #1
 8003828:	d102      	bne.n	8003830 <HAL_RCC_OscConfig+0x3a0>
 800382a:	4b93      	ldr	r3, [pc, #588]	; (8003a78 <HAL_RCC_OscConfig+0x5e8>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	e013      	b.n	8003858 <HAL_RCC_OscConfig+0x3c8>
 8003830:	2302      	movs	r3, #2
 8003832:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003836:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800383a:	fa93 f3a3 	rbit	r3, r3
 800383e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003842:	2302      	movs	r3, #2
 8003844:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003848:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800384c:	fa93 f3a3 	rbit	r3, r3
 8003850:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003854:	4b88      	ldr	r3, [pc, #544]	; (8003a78 <HAL_RCC_OscConfig+0x5e8>)
 8003856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003858:	2202      	movs	r2, #2
 800385a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800385e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003862:	fa92 f2a2 	rbit	r2, r2
 8003866:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800386a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800386e:	fab2 f282 	clz	r2, r2
 8003872:	b2d2      	uxtb	r2, r2
 8003874:	f042 0220 	orr.w	r2, r2, #32
 8003878:	b2d2      	uxtb	r2, r2
 800387a:	f002 021f 	and.w	r2, r2, #31
 800387e:	2101      	movs	r1, #1
 8003880:	fa01 f202 	lsl.w	r2, r1, r2
 8003884:	4013      	ands	r3, r2
 8003886:	2b00      	cmp	r3, #0
 8003888:	d00a      	beq.n	80038a0 <HAL_RCC_OscConfig+0x410>
 800388a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800388e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	691b      	ldr	r3, [r3, #16]
 8003896:	2b01      	cmp	r3, #1
 8003898:	d002      	beq.n	80038a0 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	f000 be2e 	b.w	80044fc <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038a0:	4b75      	ldr	r3, [pc, #468]	; (8003a78 <HAL_RCC_OscConfig+0x5e8>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038ac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	695b      	ldr	r3, [r3, #20]
 80038b4:	21f8      	movs	r1, #248	; 0xf8
 80038b6:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ba:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80038be:	fa91 f1a1 	rbit	r1, r1
 80038c2:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80038c6:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80038ca:	fab1 f181 	clz	r1, r1
 80038ce:	b2c9      	uxtb	r1, r1
 80038d0:	408b      	lsls	r3, r1
 80038d2:	4969      	ldr	r1, [pc, #420]	; (8003a78 <HAL_RCC_OscConfig+0x5e8>)
 80038d4:	4313      	orrs	r3, r2
 80038d6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038d8:	e0fd      	b.n	8003ad6 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80038da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	f000 8088 	beq.w	80039fc <HAL_RCC_OscConfig+0x56c>
 80038ec:	2301      	movs	r3, #1
 80038ee:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038f2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80038f6:	fa93 f3a3 	rbit	r3, r3
 80038fa:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80038fe:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003902:	fab3 f383 	clz	r3, r3
 8003906:	b2db      	uxtb	r3, r3
 8003908:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800390c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	461a      	mov	r2, r3
 8003914:	2301      	movs	r3, #1
 8003916:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003918:	f7fe fb8e 	bl	8002038 <HAL_GetTick>
 800391c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003920:	e00a      	b.n	8003938 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003922:	f7fe fb89 	bl	8002038 <HAL_GetTick>
 8003926:	4602      	mov	r2, r0
 8003928:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	2b02      	cmp	r3, #2
 8003930:	d902      	bls.n	8003938 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	f000 bde2 	b.w	80044fc <HAL_RCC_OscConfig+0x106c>
 8003938:	2302      	movs	r3, #2
 800393a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800393e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003942:	fa93 f3a3 	rbit	r3, r3
 8003946:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800394a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800394e:	fab3 f383 	clz	r3, r3
 8003952:	b2db      	uxtb	r3, r3
 8003954:	095b      	lsrs	r3, r3, #5
 8003956:	b2db      	uxtb	r3, r3
 8003958:	f043 0301 	orr.w	r3, r3, #1
 800395c:	b2db      	uxtb	r3, r3
 800395e:	2b01      	cmp	r3, #1
 8003960:	d102      	bne.n	8003968 <HAL_RCC_OscConfig+0x4d8>
 8003962:	4b45      	ldr	r3, [pc, #276]	; (8003a78 <HAL_RCC_OscConfig+0x5e8>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	e013      	b.n	8003990 <HAL_RCC_OscConfig+0x500>
 8003968:	2302      	movs	r3, #2
 800396a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800396e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003972:	fa93 f3a3 	rbit	r3, r3
 8003976:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800397a:	2302      	movs	r3, #2
 800397c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003980:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003984:	fa93 f3a3 	rbit	r3, r3
 8003988:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800398c:	4b3a      	ldr	r3, [pc, #232]	; (8003a78 <HAL_RCC_OscConfig+0x5e8>)
 800398e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003990:	2202      	movs	r2, #2
 8003992:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003996:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800399a:	fa92 f2a2 	rbit	r2, r2
 800399e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80039a2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80039a6:	fab2 f282 	clz	r2, r2
 80039aa:	b2d2      	uxtb	r2, r2
 80039ac:	f042 0220 	orr.w	r2, r2, #32
 80039b0:	b2d2      	uxtb	r2, r2
 80039b2:	f002 021f 	and.w	r2, r2, #31
 80039b6:	2101      	movs	r1, #1
 80039b8:	fa01 f202 	lsl.w	r2, r1, r2
 80039bc:	4013      	ands	r3, r2
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d0af      	beq.n	8003922 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039c2:	4b2d      	ldr	r3, [pc, #180]	; (8003a78 <HAL_RCC_OscConfig+0x5e8>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	695b      	ldr	r3, [r3, #20]
 80039d6:	21f8      	movs	r1, #248	; 0xf8
 80039d8:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039dc:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80039e0:	fa91 f1a1 	rbit	r1, r1
 80039e4:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80039e8:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80039ec:	fab1 f181 	clz	r1, r1
 80039f0:	b2c9      	uxtb	r1, r1
 80039f2:	408b      	lsls	r3, r1
 80039f4:	4920      	ldr	r1, [pc, #128]	; (8003a78 <HAL_RCC_OscConfig+0x5e8>)
 80039f6:	4313      	orrs	r3, r2
 80039f8:	600b      	str	r3, [r1, #0]
 80039fa:	e06c      	b.n	8003ad6 <HAL_RCC_OscConfig+0x646>
 80039fc:	2301      	movs	r3, #1
 80039fe:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a02:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003a06:	fa93 f3a3 	rbit	r3, r3
 8003a0a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003a0e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a12:	fab3 f383 	clz	r3, r3
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003a1c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	461a      	mov	r2, r3
 8003a24:	2300      	movs	r3, #0
 8003a26:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a28:	f7fe fb06 	bl	8002038 <HAL_GetTick>
 8003a2c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a30:	e00a      	b.n	8003a48 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a32:	f7fe fb01 	bl	8002038 <HAL_GetTick>
 8003a36:	4602      	mov	r2, r0
 8003a38:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d902      	bls.n	8003a48 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	f000 bd5a 	b.w	80044fc <HAL_RCC_OscConfig+0x106c>
 8003a48:	2302      	movs	r3, #2
 8003a4a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a4e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003a52:	fa93 f3a3 	rbit	r3, r3
 8003a56:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003a5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a5e:	fab3 f383 	clz	r3, r3
 8003a62:	b2db      	uxtb	r3, r3
 8003a64:	095b      	lsrs	r3, r3, #5
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	f043 0301 	orr.w	r3, r3, #1
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d104      	bne.n	8003a7c <HAL_RCC_OscConfig+0x5ec>
 8003a72:	4b01      	ldr	r3, [pc, #4]	; (8003a78 <HAL_RCC_OscConfig+0x5e8>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	e015      	b.n	8003aa4 <HAL_RCC_OscConfig+0x614>
 8003a78:	40021000 	.word	0x40021000
 8003a7c:	2302      	movs	r3, #2
 8003a7e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a82:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003a86:	fa93 f3a3 	rbit	r3, r3
 8003a8a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003a8e:	2302      	movs	r3, #2
 8003a90:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003a94:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003a98:	fa93 f3a3 	rbit	r3, r3
 8003a9c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003aa0:	4bc8      	ldr	r3, [pc, #800]	; (8003dc4 <HAL_RCC_OscConfig+0x934>)
 8003aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa4:	2202      	movs	r2, #2
 8003aa6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003aaa:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003aae:	fa92 f2a2 	rbit	r2, r2
 8003ab2:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003ab6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003aba:	fab2 f282 	clz	r2, r2
 8003abe:	b2d2      	uxtb	r2, r2
 8003ac0:	f042 0220 	orr.w	r2, r2, #32
 8003ac4:	b2d2      	uxtb	r2, r2
 8003ac6:	f002 021f 	and.w	r2, r2, #31
 8003aca:	2101      	movs	r1, #1
 8003acc:	fa01 f202 	lsl.w	r2, r1, r2
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d1ad      	bne.n	8003a32 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ad6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ada:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0308 	and.w	r3, r3, #8
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	f000 8110 	beq.w	8003d0c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003aec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003af0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	699b      	ldr	r3, [r3, #24]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d079      	beq.n	8003bf0 <HAL_RCC_OscConfig+0x760>
 8003afc:	2301      	movs	r3, #1
 8003afe:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b02:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003b06:	fa93 f3a3 	rbit	r3, r3
 8003b0a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003b0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b12:	fab3 f383 	clz	r3, r3
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	461a      	mov	r2, r3
 8003b1a:	4bab      	ldr	r3, [pc, #684]	; (8003dc8 <HAL_RCC_OscConfig+0x938>)
 8003b1c:	4413      	add	r3, r2
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	461a      	mov	r2, r3
 8003b22:	2301      	movs	r3, #1
 8003b24:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b26:	f7fe fa87 	bl	8002038 <HAL_GetTick>
 8003b2a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b2e:	e00a      	b.n	8003b46 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b30:	f7fe fa82 	bl	8002038 <HAL_GetTick>
 8003b34:	4602      	mov	r2, r0
 8003b36:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	2b02      	cmp	r3, #2
 8003b3e:	d902      	bls.n	8003b46 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003b40:	2303      	movs	r3, #3
 8003b42:	f000 bcdb 	b.w	80044fc <HAL_RCC_OscConfig+0x106c>
 8003b46:	2302      	movs	r3, #2
 8003b48:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b4c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003b50:	fa93 f3a3 	rbit	r3, r3
 8003b54:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003b58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b5c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003b60:	2202      	movs	r2, #2
 8003b62:	601a      	str	r2, [r3, #0]
 8003b64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b68:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	fa93 f2a3 	rbit	r2, r3
 8003b72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b76:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003b7a:	601a      	str	r2, [r3, #0]
 8003b7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003b84:	2202      	movs	r2, #2
 8003b86:	601a      	str	r2, [r3, #0]
 8003b88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	fa93 f2a3 	rbit	r2, r3
 8003b96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b9a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003b9e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ba0:	4b88      	ldr	r3, [pc, #544]	; (8003dc4 <HAL_RCC_OscConfig+0x934>)
 8003ba2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ba4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ba8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003bac:	2102      	movs	r1, #2
 8003bae:	6019      	str	r1, [r3, #0]
 8003bb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bb4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	fa93 f1a3 	rbit	r1, r3
 8003bbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bc2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003bc6:	6019      	str	r1, [r3, #0]
  return result;
 8003bc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bcc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	fab3 f383 	clz	r3, r3
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	f003 031f 	and.w	r3, r3, #31
 8003be2:	2101      	movs	r1, #1
 8003be4:	fa01 f303 	lsl.w	r3, r1, r3
 8003be8:	4013      	ands	r3, r2
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d0a0      	beq.n	8003b30 <HAL_RCC_OscConfig+0x6a0>
 8003bee:	e08d      	b.n	8003d0c <HAL_RCC_OscConfig+0x87c>
 8003bf0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bf4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c00:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	fa93 f2a3 	rbit	r2, r3
 8003c0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c0e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003c12:	601a      	str	r2, [r3, #0]
  return result;
 8003c14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c18:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003c1c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c1e:	fab3 f383 	clz	r3, r3
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	461a      	mov	r2, r3
 8003c26:	4b68      	ldr	r3, [pc, #416]	; (8003dc8 <HAL_RCC_OscConfig+0x938>)
 8003c28:	4413      	add	r3, r2
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	2300      	movs	r3, #0
 8003c30:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c32:	f7fe fa01 	bl	8002038 <HAL_GetTick>
 8003c36:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c3a:	e00a      	b.n	8003c52 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c3c:	f7fe f9fc 	bl	8002038 <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003c46:	1ad3      	subs	r3, r2, r3
 8003c48:	2b02      	cmp	r3, #2
 8003c4a:	d902      	bls.n	8003c52 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003c4c:	2303      	movs	r3, #3
 8003c4e:	f000 bc55 	b.w	80044fc <HAL_RCC_OscConfig+0x106c>
 8003c52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c56:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003c5a:	2202      	movs	r2, #2
 8003c5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c62:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	fa93 f2a3 	rbit	r2, r3
 8003c6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c70:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003c74:	601a      	str	r2, [r3, #0]
 8003c76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c7a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003c7e:	2202      	movs	r2, #2
 8003c80:	601a      	str	r2, [r3, #0]
 8003c82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c86:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	fa93 f2a3 	rbit	r2, r3
 8003c90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c94:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003c98:	601a      	str	r2, [r3, #0]
 8003c9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003ca2:	2202      	movs	r2, #2
 8003ca4:	601a      	str	r2, [r3, #0]
 8003ca6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003caa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	fa93 f2a3 	rbit	r2, r3
 8003cb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cb8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003cbc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cbe:	4b41      	ldr	r3, [pc, #260]	; (8003dc4 <HAL_RCC_OscConfig+0x934>)
 8003cc0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003cc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cc6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003cca:	2102      	movs	r1, #2
 8003ccc:	6019      	str	r1, [r3, #0]
 8003cce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cd2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	fa93 f1a3 	rbit	r1, r3
 8003cdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ce0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003ce4:	6019      	str	r1, [r3, #0]
  return result;
 8003ce6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cea:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	fab3 f383 	clz	r3, r3
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	f003 031f 	and.w	r3, r3, #31
 8003d00:	2101      	movs	r1, #1
 8003d02:	fa01 f303 	lsl.w	r3, r1, r3
 8003d06:	4013      	ands	r3, r2
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d197      	bne.n	8003c3c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d10:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 0304 	and.w	r3, r3, #4
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	f000 81a1 	beq.w	8004064 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d22:	2300      	movs	r3, #0
 8003d24:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d28:	4b26      	ldr	r3, [pc, #152]	; (8003dc4 <HAL_RCC_OscConfig+0x934>)
 8003d2a:	69db      	ldr	r3, [r3, #28]
 8003d2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d116      	bne.n	8003d62 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d34:	4b23      	ldr	r3, [pc, #140]	; (8003dc4 <HAL_RCC_OscConfig+0x934>)
 8003d36:	69db      	ldr	r3, [r3, #28]
 8003d38:	4a22      	ldr	r2, [pc, #136]	; (8003dc4 <HAL_RCC_OscConfig+0x934>)
 8003d3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d3e:	61d3      	str	r3, [r2, #28]
 8003d40:	4b20      	ldr	r3, [pc, #128]	; (8003dc4 <HAL_RCC_OscConfig+0x934>)
 8003d42:	69db      	ldr	r3, [r3, #28]
 8003d44:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003d48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d4c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003d50:	601a      	str	r2, [r3, #0]
 8003d52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d56:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003d5a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d62:	4b1a      	ldr	r3, [pc, #104]	; (8003dcc <HAL_RCC_OscConfig+0x93c>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d11a      	bne.n	8003da4 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d6e:	4b17      	ldr	r3, [pc, #92]	; (8003dcc <HAL_RCC_OscConfig+0x93c>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a16      	ldr	r2, [pc, #88]	; (8003dcc <HAL_RCC_OscConfig+0x93c>)
 8003d74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d78:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d7a:	f7fe f95d 	bl	8002038 <HAL_GetTick>
 8003d7e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d82:	e009      	b.n	8003d98 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d84:	f7fe f958 	bl	8002038 <HAL_GetTick>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003d8e:	1ad3      	subs	r3, r2, r3
 8003d90:	2b64      	cmp	r3, #100	; 0x64
 8003d92:	d901      	bls.n	8003d98 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003d94:	2303      	movs	r3, #3
 8003d96:	e3b1      	b.n	80044fc <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d98:	4b0c      	ldr	r3, [pc, #48]	; (8003dcc <HAL_RCC_OscConfig+0x93c>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d0ef      	beq.n	8003d84 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003da4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003da8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d10d      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x940>
 8003db4:	4b03      	ldr	r3, [pc, #12]	; (8003dc4 <HAL_RCC_OscConfig+0x934>)
 8003db6:	6a1b      	ldr	r3, [r3, #32]
 8003db8:	4a02      	ldr	r2, [pc, #8]	; (8003dc4 <HAL_RCC_OscConfig+0x934>)
 8003dba:	f043 0301 	orr.w	r3, r3, #1
 8003dbe:	6213      	str	r3, [r2, #32]
 8003dc0:	e03c      	b.n	8003e3c <HAL_RCC_OscConfig+0x9ac>
 8003dc2:	bf00      	nop
 8003dc4:	40021000 	.word	0x40021000
 8003dc8:	10908120 	.word	0x10908120
 8003dcc:	40007000 	.word	0x40007000
 8003dd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dd4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d10c      	bne.n	8003dfa <HAL_RCC_OscConfig+0x96a>
 8003de0:	4bc1      	ldr	r3, [pc, #772]	; (80040e8 <HAL_RCC_OscConfig+0xc58>)
 8003de2:	6a1b      	ldr	r3, [r3, #32]
 8003de4:	4ac0      	ldr	r2, [pc, #768]	; (80040e8 <HAL_RCC_OscConfig+0xc58>)
 8003de6:	f023 0301 	bic.w	r3, r3, #1
 8003dea:	6213      	str	r3, [r2, #32]
 8003dec:	4bbe      	ldr	r3, [pc, #760]	; (80040e8 <HAL_RCC_OscConfig+0xc58>)
 8003dee:	6a1b      	ldr	r3, [r3, #32]
 8003df0:	4abd      	ldr	r2, [pc, #756]	; (80040e8 <HAL_RCC_OscConfig+0xc58>)
 8003df2:	f023 0304 	bic.w	r3, r3, #4
 8003df6:	6213      	str	r3, [r2, #32]
 8003df8:	e020      	b.n	8003e3c <HAL_RCC_OscConfig+0x9ac>
 8003dfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dfe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	2b05      	cmp	r3, #5
 8003e08:	d10c      	bne.n	8003e24 <HAL_RCC_OscConfig+0x994>
 8003e0a:	4bb7      	ldr	r3, [pc, #732]	; (80040e8 <HAL_RCC_OscConfig+0xc58>)
 8003e0c:	6a1b      	ldr	r3, [r3, #32]
 8003e0e:	4ab6      	ldr	r2, [pc, #728]	; (80040e8 <HAL_RCC_OscConfig+0xc58>)
 8003e10:	f043 0304 	orr.w	r3, r3, #4
 8003e14:	6213      	str	r3, [r2, #32]
 8003e16:	4bb4      	ldr	r3, [pc, #720]	; (80040e8 <HAL_RCC_OscConfig+0xc58>)
 8003e18:	6a1b      	ldr	r3, [r3, #32]
 8003e1a:	4ab3      	ldr	r2, [pc, #716]	; (80040e8 <HAL_RCC_OscConfig+0xc58>)
 8003e1c:	f043 0301 	orr.w	r3, r3, #1
 8003e20:	6213      	str	r3, [r2, #32]
 8003e22:	e00b      	b.n	8003e3c <HAL_RCC_OscConfig+0x9ac>
 8003e24:	4bb0      	ldr	r3, [pc, #704]	; (80040e8 <HAL_RCC_OscConfig+0xc58>)
 8003e26:	6a1b      	ldr	r3, [r3, #32]
 8003e28:	4aaf      	ldr	r2, [pc, #700]	; (80040e8 <HAL_RCC_OscConfig+0xc58>)
 8003e2a:	f023 0301 	bic.w	r3, r3, #1
 8003e2e:	6213      	str	r3, [r2, #32]
 8003e30:	4bad      	ldr	r3, [pc, #692]	; (80040e8 <HAL_RCC_OscConfig+0xc58>)
 8003e32:	6a1b      	ldr	r3, [r3, #32]
 8003e34:	4aac      	ldr	r2, [pc, #688]	; (80040e8 <HAL_RCC_OscConfig+0xc58>)
 8003e36:	f023 0304 	bic.w	r3, r3, #4
 8003e3a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e40:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	f000 8081 	beq.w	8003f50 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e4e:	f7fe f8f3 	bl	8002038 <HAL_GetTick>
 8003e52:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e56:	e00b      	b.n	8003e70 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e58:	f7fe f8ee 	bl	8002038 <HAL_GetTick>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d901      	bls.n	8003e70 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003e6c:	2303      	movs	r3, #3
 8003e6e:	e345      	b.n	80044fc <HAL_RCC_OscConfig+0x106c>
 8003e70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e74:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003e78:	2202      	movs	r2, #2
 8003e7a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e80:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	fa93 f2a3 	rbit	r2, r3
 8003e8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e8e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003e92:	601a      	str	r2, [r3, #0]
 8003e94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e98:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003e9c:	2202      	movs	r2, #2
 8003e9e:	601a      	str	r2, [r3, #0]
 8003ea0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ea4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	fa93 f2a3 	rbit	r2, r3
 8003eae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003eb2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003eb6:	601a      	str	r2, [r3, #0]
  return result;
 8003eb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ebc:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003ec0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ec2:	fab3 f383 	clz	r3, r3
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	095b      	lsrs	r3, r3, #5
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	f043 0302 	orr.w	r3, r3, #2
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	2b02      	cmp	r3, #2
 8003ed4:	d102      	bne.n	8003edc <HAL_RCC_OscConfig+0xa4c>
 8003ed6:	4b84      	ldr	r3, [pc, #528]	; (80040e8 <HAL_RCC_OscConfig+0xc58>)
 8003ed8:	6a1b      	ldr	r3, [r3, #32]
 8003eda:	e013      	b.n	8003f04 <HAL_RCC_OscConfig+0xa74>
 8003edc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ee0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003ee4:	2202      	movs	r2, #2
 8003ee6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ee8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003eec:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	fa93 f2a3 	rbit	r2, r3
 8003ef6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003efa:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003efe:	601a      	str	r2, [r3, #0]
 8003f00:	4b79      	ldr	r3, [pc, #484]	; (80040e8 <HAL_RCC_OscConfig+0xc58>)
 8003f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f04:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f08:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003f0c:	2102      	movs	r1, #2
 8003f0e:	6011      	str	r1, [r2, #0]
 8003f10:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f14:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003f18:	6812      	ldr	r2, [r2, #0]
 8003f1a:	fa92 f1a2 	rbit	r1, r2
 8003f1e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f22:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003f26:	6011      	str	r1, [r2, #0]
  return result;
 8003f28:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f2c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003f30:	6812      	ldr	r2, [r2, #0]
 8003f32:	fab2 f282 	clz	r2, r2
 8003f36:	b2d2      	uxtb	r2, r2
 8003f38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f3c:	b2d2      	uxtb	r2, r2
 8003f3e:	f002 021f 	and.w	r2, r2, #31
 8003f42:	2101      	movs	r1, #1
 8003f44:	fa01 f202 	lsl.w	r2, r1, r2
 8003f48:	4013      	ands	r3, r2
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d084      	beq.n	8003e58 <HAL_RCC_OscConfig+0x9c8>
 8003f4e:	e07f      	b.n	8004050 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f50:	f7fe f872 	bl	8002038 <HAL_GetTick>
 8003f54:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f58:	e00b      	b.n	8003f72 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f5a:	f7fe f86d 	bl	8002038 <HAL_GetTick>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d901      	bls.n	8003f72 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	e2c4      	b.n	80044fc <HAL_RCC_OscConfig+0x106c>
 8003f72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f76:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003f7a:	2202      	movs	r2, #2
 8003f7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f82:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	fa93 f2a3 	rbit	r2, r3
 8003f8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f90:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003f94:	601a      	str	r2, [r3, #0]
 8003f96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f9a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003f9e:	2202      	movs	r2, #2
 8003fa0:	601a      	str	r2, [r3, #0]
 8003fa2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fa6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	fa93 f2a3 	rbit	r2, r3
 8003fb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fb4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003fb8:	601a      	str	r2, [r3, #0]
  return result;
 8003fba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fbe:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003fc2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fc4:	fab3 f383 	clz	r3, r3
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	095b      	lsrs	r3, r3, #5
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	f043 0302 	orr.w	r3, r3, #2
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	2b02      	cmp	r3, #2
 8003fd6:	d102      	bne.n	8003fde <HAL_RCC_OscConfig+0xb4e>
 8003fd8:	4b43      	ldr	r3, [pc, #268]	; (80040e8 <HAL_RCC_OscConfig+0xc58>)
 8003fda:	6a1b      	ldr	r3, [r3, #32]
 8003fdc:	e013      	b.n	8004006 <HAL_RCC_OscConfig+0xb76>
 8003fde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fe2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003fe6:	2202      	movs	r2, #2
 8003fe8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fee:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	fa93 f2a3 	rbit	r2, r3
 8003ff8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ffc:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004000:	601a      	str	r2, [r3, #0]
 8004002:	4b39      	ldr	r3, [pc, #228]	; (80040e8 <HAL_RCC_OscConfig+0xc58>)
 8004004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004006:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800400a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800400e:	2102      	movs	r1, #2
 8004010:	6011      	str	r1, [r2, #0]
 8004012:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004016:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800401a:	6812      	ldr	r2, [r2, #0]
 800401c:	fa92 f1a2 	rbit	r1, r2
 8004020:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004024:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004028:	6011      	str	r1, [r2, #0]
  return result;
 800402a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800402e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004032:	6812      	ldr	r2, [r2, #0]
 8004034:	fab2 f282 	clz	r2, r2
 8004038:	b2d2      	uxtb	r2, r2
 800403a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800403e:	b2d2      	uxtb	r2, r2
 8004040:	f002 021f 	and.w	r2, r2, #31
 8004044:	2101      	movs	r1, #1
 8004046:	fa01 f202 	lsl.w	r2, r1, r2
 800404a:	4013      	ands	r3, r2
 800404c:	2b00      	cmp	r3, #0
 800404e:	d184      	bne.n	8003f5a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004050:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8004054:	2b01      	cmp	r3, #1
 8004056:	d105      	bne.n	8004064 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004058:	4b23      	ldr	r3, [pc, #140]	; (80040e8 <HAL_RCC_OscConfig+0xc58>)
 800405a:	69db      	ldr	r3, [r3, #28]
 800405c:	4a22      	ldr	r2, [pc, #136]	; (80040e8 <HAL_RCC_OscConfig+0xc58>)
 800405e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004062:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004064:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004068:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	69db      	ldr	r3, [r3, #28]
 8004070:	2b00      	cmp	r3, #0
 8004072:	f000 8242 	beq.w	80044fa <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004076:	4b1c      	ldr	r3, [pc, #112]	; (80040e8 <HAL_RCC_OscConfig+0xc58>)
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	f003 030c 	and.w	r3, r3, #12
 800407e:	2b08      	cmp	r3, #8
 8004080:	f000 8213 	beq.w	80044aa <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004084:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004088:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	69db      	ldr	r3, [r3, #28]
 8004090:	2b02      	cmp	r3, #2
 8004092:	f040 8162 	bne.w	800435a <HAL_RCC_OscConfig+0xeca>
 8004096:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800409a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800409e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80040a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040a8:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	fa93 f2a3 	rbit	r2, r3
 80040b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040b6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80040ba:	601a      	str	r2, [r3, #0]
  return result;
 80040bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040c0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80040c4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040c6:	fab3 f383 	clz	r3, r3
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80040d0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	461a      	mov	r2, r3
 80040d8:	2300      	movs	r3, #0
 80040da:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040dc:	f7fd ffac 	bl	8002038 <HAL_GetTick>
 80040e0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040e4:	e00c      	b.n	8004100 <HAL_RCC_OscConfig+0xc70>
 80040e6:	bf00      	nop
 80040e8:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040ec:	f7fd ffa4 	bl	8002038 <HAL_GetTick>
 80040f0:	4602      	mov	r2, r0
 80040f2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80040f6:	1ad3      	subs	r3, r2, r3
 80040f8:	2b02      	cmp	r3, #2
 80040fa:	d901      	bls.n	8004100 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80040fc:	2303      	movs	r3, #3
 80040fe:	e1fd      	b.n	80044fc <HAL_RCC_OscConfig+0x106c>
 8004100:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004104:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004108:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800410c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800410e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004112:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	fa93 f2a3 	rbit	r2, r3
 800411c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004120:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004124:	601a      	str	r2, [r3, #0]
  return result;
 8004126:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800412a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800412e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004130:	fab3 f383 	clz	r3, r3
 8004134:	b2db      	uxtb	r3, r3
 8004136:	095b      	lsrs	r3, r3, #5
 8004138:	b2db      	uxtb	r3, r3
 800413a:	f043 0301 	orr.w	r3, r3, #1
 800413e:	b2db      	uxtb	r3, r3
 8004140:	2b01      	cmp	r3, #1
 8004142:	d102      	bne.n	800414a <HAL_RCC_OscConfig+0xcba>
 8004144:	4bb0      	ldr	r3, [pc, #704]	; (8004408 <HAL_RCC_OscConfig+0xf78>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	e027      	b.n	800419a <HAL_RCC_OscConfig+0xd0a>
 800414a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800414e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004152:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004156:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004158:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800415c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	fa93 f2a3 	rbit	r2, r3
 8004166:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800416a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800416e:	601a      	str	r2, [r3, #0]
 8004170:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004174:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004178:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800417c:	601a      	str	r2, [r3, #0]
 800417e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004182:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	fa93 f2a3 	rbit	r2, r3
 800418c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004190:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004194:	601a      	str	r2, [r3, #0]
 8004196:	4b9c      	ldr	r3, [pc, #624]	; (8004408 <HAL_RCC_OscConfig+0xf78>)
 8004198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800419e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80041a2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80041a6:	6011      	str	r1, [r2, #0]
 80041a8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80041ac:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80041b0:	6812      	ldr	r2, [r2, #0]
 80041b2:	fa92 f1a2 	rbit	r1, r2
 80041b6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80041ba:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80041be:	6011      	str	r1, [r2, #0]
  return result;
 80041c0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80041c4:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80041c8:	6812      	ldr	r2, [r2, #0]
 80041ca:	fab2 f282 	clz	r2, r2
 80041ce:	b2d2      	uxtb	r2, r2
 80041d0:	f042 0220 	orr.w	r2, r2, #32
 80041d4:	b2d2      	uxtb	r2, r2
 80041d6:	f002 021f 	and.w	r2, r2, #31
 80041da:	2101      	movs	r1, #1
 80041dc:	fa01 f202 	lsl.w	r2, r1, r2
 80041e0:	4013      	ands	r3, r2
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d182      	bne.n	80040ec <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041e6:	4b88      	ldr	r3, [pc, #544]	; (8004408 <HAL_RCC_OscConfig+0xf78>)
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80041ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80041fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	6a1b      	ldr	r3, [r3, #32]
 8004206:	430b      	orrs	r3, r1
 8004208:	497f      	ldr	r1, [pc, #508]	; (8004408 <HAL_RCC_OscConfig+0xf78>)
 800420a:	4313      	orrs	r3, r2
 800420c:	604b      	str	r3, [r1, #4]
 800420e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004212:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004216:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800421a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800421c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004220:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	fa93 f2a3 	rbit	r2, r3
 800422a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800422e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004232:	601a      	str	r2, [r3, #0]
  return result;
 8004234:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004238:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800423c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800423e:	fab3 f383 	clz	r3, r3
 8004242:	b2db      	uxtb	r3, r3
 8004244:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004248:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800424c:	009b      	lsls	r3, r3, #2
 800424e:	461a      	mov	r2, r3
 8004250:	2301      	movs	r3, #1
 8004252:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004254:	f7fd fef0 	bl	8002038 <HAL_GetTick>
 8004258:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800425c:	e009      	b.n	8004272 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800425e:	f7fd feeb 	bl	8002038 <HAL_GetTick>
 8004262:	4602      	mov	r2, r0
 8004264:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	2b02      	cmp	r3, #2
 800426c:	d901      	bls.n	8004272 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	e144      	b.n	80044fc <HAL_RCC_OscConfig+0x106c>
 8004272:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004276:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800427a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800427e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004280:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004284:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	fa93 f2a3 	rbit	r2, r3
 800428e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004292:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004296:	601a      	str	r2, [r3, #0]
  return result;
 8004298:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800429c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80042a0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80042a2:	fab3 f383 	clz	r3, r3
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	095b      	lsrs	r3, r3, #5
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	f043 0301 	orr.w	r3, r3, #1
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d102      	bne.n	80042bc <HAL_RCC_OscConfig+0xe2c>
 80042b6:	4b54      	ldr	r3, [pc, #336]	; (8004408 <HAL_RCC_OscConfig+0xf78>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	e027      	b.n	800430c <HAL_RCC_OscConfig+0xe7c>
 80042bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042c0:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80042c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80042c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042ce:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	fa93 f2a3 	rbit	r2, r3
 80042d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042dc:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80042e0:	601a      	str	r2, [r3, #0]
 80042e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042e6:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80042ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80042ee:	601a      	str	r2, [r3, #0]
 80042f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042f4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	fa93 f2a3 	rbit	r2, r3
 80042fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004302:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004306:	601a      	str	r2, [r3, #0]
 8004308:	4b3f      	ldr	r3, [pc, #252]	; (8004408 <HAL_RCC_OscConfig+0xf78>)
 800430a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004310:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004314:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004318:	6011      	str	r1, [r2, #0]
 800431a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800431e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004322:	6812      	ldr	r2, [r2, #0]
 8004324:	fa92 f1a2 	rbit	r1, r2
 8004328:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800432c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004330:	6011      	str	r1, [r2, #0]
  return result;
 8004332:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004336:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800433a:	6812      	ldr	r2, [r2, #0]
 800433c:	fab2 f282 	clz	r2, r2
 8004340:	b2d2      	uxtb	r2, r2
 8004342:	f042 0220 	orr.w	r2, r2, #32
 8004346:	b2d2      	uxtb	r2, r2
 8004348:	f002 021f 	and.w	r2, r2, #31
 800434c:	2101      	movs	r1, #1
 800434e:	fa01 f202 	lsl.w	r2, r1, r2
 8004352:	4013      	ands	r3, r2
 8004354:	2b00      	cmp	r3, #0
 8004356:	d082      	beq.n	800425e <HAL_RCC_OscConfig+0xdce>
 8004358:	e0cf      	b.n	80044fa <HAL_RCC_OscConfig+0x106a>
 800435a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800435e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004362:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004366:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004368:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800436c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	fa93 f2a3 	rbit	r2, r3
 8004376:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800437a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800437e:	601a      	str	r2, [r3, #0]
  return result;
 8004380:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004384:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004388:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800438a:	fab3 f383 	clz	r3, r3
 800438e:	b2db      	uxtb	r3, r3
 8004390:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004394:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004398:	009b      	lsls	r3, r3, #2
 800439a:	461a      	mov	r2, r3
 800439c:	2300      	movs	r3, #0
 800439e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043a0:	f7fd fe4a 	bl	8002038 <HAL_GetTick>
 80043a4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043a8:	e009      	b.n	80043be <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043aa:	f7fd fe45 	bl	8002038 <HAL_GetTick>
 80043ae:	4602      	mov	r2, r0
 80043b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	2b02      	cmp	r3, #2
 80043b8:	d901      	bls.n	80043be <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e09e      	b.n	80044fc <HAL_RCC_OscConfig+0x106c>
 80043be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043c2:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80043c6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80043ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043d0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	fa93 f2a3 	rbit	r2, r3
 80043da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043de:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80043e2:	601a      	str	r2, [r3, #0]
  return result;
 80043e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043e8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80043ec:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043ee:	fab3 f383 	clz	r3, r3
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	095b      	lsrs	r3, r3, #5
 80043f6:	b2db      	uxtb	r3, r3
 80043f8:	f043 0301 	orr.w	r3, r3, #1
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d104      	bne.n	800440c <HAL_RCC_OscConfig+0xf7c>
 8004402:	4b01      	ldr	r3, [pc, #4]	; (8004408 <HAL_RCC_OscConfig+0xf78>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	e029      	b.n	800445c <HAL_RCC_OscConfig+0xfcc>
 8004408:	40021000 	.word	0x40021000
 800440c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004410:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004414:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004418:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800441a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800441e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	fa93 f2a3 	rbit	r2, r3
 8004428:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800442c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004430:	601a      	str	r2, [r3, #0]
 8004432:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004436:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800443a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800443e:	601a      	str	r2, [r3, #0]
 8004440:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004444:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	fa93 f2a3 	rbit	r2, r3
 800444e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004452:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004456:	601a      	str	r2, [r3, #0]
 8004458:	4b2b      	ldr	r3, [pc, #172]	; (8004508 <HAL_RCC_OscConfig+0x1078>)
 800445a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800445c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004460:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004464:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004468:	6011      	str	r1, [r2, #0]
 800446a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800446e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004472:	6812      	ldr	r2, [r2, #0]
 8004474:	fa92 f1a2 	rbit	r1, r2
 8004478:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800447c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004480:	6011      	str	r1, [r2, #0]
  return result;
 8004482:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004486:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800448a:	6812      	ldr	r2, [r2, #0]
 800448c:	fab2 f282 	clz	r2, r2
 8004490:	b2d2      	uxtb	r2, r2
 8004492:	f042 0220 	orr.w	r2, r2, #32
 8004496:	b2d2      	uxtb	r2, r2
 8004498:	f002 021f 	and.w	r2, r2, #31
 800449c:	2101      	movs	r1, #1
 800449e:	fa01 f202 	lsl.w	r2, r1, r2
 80044a2:	4013      	ands	r3, r2
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d180      	bne.n	80043aa <HAL_RCC_OscConfig+0xf1a>
 80044a8:	e027      	b.n	80044fa <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	69db      	ldr	r3, [r3, #28]
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d101      	bne.n	80044be <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e01e      	b.n	80044fc <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80044be:	4b12      	ldr	r3, [pc, #72]	; (8004508 <HAL_RCC_OscConfig+0x1078>)
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80044c6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80044ca:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80044ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	6a1b      	ldr	r3, [r3, #32]
 80044da:	429a      	cmp	r2, r3
 80044dc:	d10b      	bne.n	80044f6 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80044de:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80044e2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80044e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d001      	beq.n	80044fa <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e000      	b.n	80044fc <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80044fa:	2300      	movs	r3, #0
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
 8004506:	bf00      	nop
 8004508:	40021000 	.word	0x40021000

0800450c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b09e      	sub	sp, #120	; 0x78
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004516:	2300      	movs	r3, #0
 8004518:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d101      	bne.n	8004524 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	e162      	b.n	80047ea <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004524:	4b90      	ldr	r3, [pc, #576]	; (8004768 <HAL_RCC_ClockConfig+0x25c>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 0307 	and.w	r3, r3, #7
 800452c:	683a      	ldr	r2, [r7, #0]
 800452e:	429a      	cmp	r2, r3
 8004530:	d910      	bls.n	8004554 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004532:	4b8d      	ldr	r3, [pc, #564]	; (8004768 <HAL_RCC_ClockConfig+0x25c>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f023 0207 	bic.w	r2, r3, #7
 800453a:	498b      	ldr	r1, [pc, #556]	; (8004768 <HAL_RCC_ClockConfig+0x25c>)
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	4313      	orrs	r3, r2
 8004540:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004542:	4b89      	ldr	r3, [pc, #548]	; (8004768 <HAL_RCC_ClockConfig+0x25c>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 0307 	and.w	r3, r3, #7
 800454a:	683a      	ldr	r2, [r7, #0]
 800454c:	429a      	cmp	r2, r3
 800454e:	d001      	beq.n	8004554 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	e14a      	b.n	80047ea <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 0302 	and.w	r3, r3, #2
 800455c:	2b00      	cmp	r3, #0
 800455e:	d008      	beq.n	8004572 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004560:	4b82      	ldr	r3, [pc, #520]	; (800476c <HAL_RCC_ClockConfig+0x260>)
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	497f      	ldr	r1, [pc, #508]	; (800476c <HAL_RCC_ClockConfig+0x260>)
 800456e:	4313      	orrs	r3, r2
 8004570:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 0301 	and.w	r3, r3, #1
 800457a:	2b00      	cmp	r3, #0
 800457c:	f000 80dc 	beq.w	8004738 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	2b01      	cmp	r3, #1
 8004586:	d13c      	bne.n	8004602 <HAL_RCC_ClockConfig+0xf6>
 8004588:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800458c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800458e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004590:	fa93 f3a3 	rbit	r3, r3
 8004594:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004596:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004598:	fab3 f383 	clz	r3, r3
 800459c:	b2db      	uxtb	r3, r3
 800459e:	095b      	lsrs	r3, r3, #5
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	f043 0301 	orr.w	r3, r3, #1
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d102      	bne.n	80045b2 <HAL_RCC_ClockConfig+0xa6>
 80045ac:	4b6f      	ldr	r3, [pc, #444]	; (800476c <HAL_RCC_ClockConfig+0x260>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	e00f      	b.n	80045d2 <HAL_RCC_ClockConfig+0xc6>
 80045b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80045b6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80045ba:	fa93 f3a3 	rbit	r3, r3
 80045be:	667b      	str	r3, [r7, #100]	; 0x64
 80045c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80045c4:	663b      	str	r3, [r7, #96]	; 0x60
 80045c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80045c8:	fa93 f3a3 	rbit	r3, r3
 80045cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80045ce:	4b67      	ldr	r3, [pc, #412]	; (800476c <HAL_RCC_ClockConfig+0x260>)
 80045d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80045d6:	65ba      	str	r2, [r7, #88]	; 0x58
 80045d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80045da:	fa92 f2a2 	rbit	r2, r2
 80045de:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80045e0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80045e2:	fab2 f282 	clz	r2, r2
 80045e6:	b2d2      	uxtb	r2, r2
 80045e8:	f042 0220 	orr.w	r2, r2, #32
 80045ec:	b2d2      	uxtb	r2, r2
 80045ee:	f002 021f 	and.w	r2, r2, #31
 80045f2:	2101      	movs	r1, #1
 80045f4:	fa01 f202 	lsl.w	r2, r1, r2
 80045f8:	4013      	ands	r3, r2
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d17b      	bne.n	80046f6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e0f3      	b.n	80047ea <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	2b02      	cmp	r3, #2
 8004608:	d13c      	bne.n	8004684 <HAL_RCC_ClockConfig+0x178>
 800460a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800460e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004610:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004612:	fa93 f3a3 	rbit	r3, r3
 8004616:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004618:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800461a:	fab3 f383 	clz	r3, r3
 800461e:	b2db      	uxtb	r3, r3
 8004620:	095b      	lsrs	r3, r3, #5
 8004622:	b2db      	uxtb	r3, r3
 8004624:	f043 0301 	orr.w	r3, r3, #1
 8004628:	b2db      	uxtb	r3, r3
 800462a:	2b01      	cmp	r3, #1
 800462c:	d102      	bne.n	8004634 <HAL_RCC_ClockConfig+0x128>
 800462e:	4b4f      	ldr	r3, [pc, #316]	; (800476c <HAL_RCC_ClockConfig+0x260>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	e00f      	b.n	8004654 <HAL_RCC_ClockConfig+0x148>
 8004634:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004638:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800463a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800463c:	fa93 f3a3 	rbit	r3, r3
 8004640:	647b      	str	r3, [r7, #68]	; 0x44
 8004642:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004646:	643b      	str	r3, [r7, #64]	; 0x40
 8004648:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800464a:	fa93 f3a3 	rbit	r3, r3
 800464e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004650:	4b46      	ldr	r3, [pc, #280]	; (800476c <HAL_RCC_ClockConfig+0x260>)
 8004652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004654:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004658:	63ba      	str	r2, [r7, #56]	; 0x38
 800465a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800465c:	fa92 f2a2 	rbit	r2, r2
 8004660:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004662:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004664:	fab2 f282 	clz	r2, r2
 8004668:	b2d2      	uxtb	r2, r2
 800466a:	f042 0220 	orr.w	r2, r2, #32
 800466e:	b2d2      	uxtb	r2, r2
 8004670:	f002 021f 	and.w	r2, r2, #31
 8004674:	2101      	movs	r1, #1
 8004676:	fa01 f202 	lsl.w	r2, r1, r2
 800467a:	4013      	ands	r3, r2
 800467c:	2b00      	cmp	r3, #0
 800467e:	d13a      	bne.n	80046f6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	e0b2      	b.n	80047ea <HAL_RCC_ClockConfig+0x2de>
 8004684:	2302      	movs	r3, #2
 8004686:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800468a:	fa93 f3a3 	rbit	r3, r3
 800468e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004692:	fab3 f383 	clz	r3, r3
 8004696:	b2db      	uxtb	r3, r3
 8004698:	095b      	lsrs	r3, r3, #5
 800469a:	b2db      	uxtb	r3, r3
 800469c:	f043 0301 	orr.w	r3, r3, #1
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d102      	bne.n	80046ac <HAL_RCC_ClockConfig+0x1a0>
 80046a6:	4b31      	ldr	r3, [pc, #196]	; (800476c <HAL_RCC_ClockConfig+0x260>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	e00d      	b.n	80046c8 <HAL_RCC_ClockConfig+0x1bc>
 80046ac:	2302      	movs	r3, #2
 80046ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b2:	fa93 f3a3 	rbit	r3, r3
 80046b6:	627b      	str	r3, [r7, #36]	; 0x24
 80046b8:	2302      	movs	r3, #2
 80046ba:	623b      	str	r3, [r7, #32]
 80046bc:	6a3b      	ldr	r3, [r7, #32]
 80046be:	fa93 f3a3 	rbit	r3, r3
 80046c2:	61fb      	str	r3, [r7, #28]
 80046c4:	4b29      	ldr	r3, [pc, #164]	; (800476c <HAL_RCC_ClockConfig+0x260>)
 80046c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c8:	2202      	movs	r2, #2
 80046ca:	61ba      	str	r2, [r7, #24]
 80046cc:	69ba      	ldr	r2, [r7, #24]
 80046ce:	fa92 f2a2 	rbit	r2, r2
 80046d2:	617a      	str	r2, [r7, #20]
  return result;
 80046d4:	697a      	ldr	r2, [r7, #20]
 80046d6:	fab2 f282 	clz	r2, r2
 80046da:	b2d2      	uxtb	r2, r2
 80046dc:	f042 0220 	orr.w	r2, r2, #32
 80046e0:	b2d2      	uxtb	r2, r2
 80046e2:	f002 021f 	and.w	r2, r2, #31
 80046e6:	2101      	movs	r1, #1
 80046e8:	fa01 f202 	lsl.w	r2, r1, r2
 80046ec:	4013      	ands	r3, r2
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d101      	bne.n	80046f6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e079      	b.n	80047ea <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046f6:	4b1d      	ldr	r3, [pc, #116]	; (800476c <HAL_RCC_ClockConfig+0x260>)
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	f023 0203 	bic.w	r2, r3, #3
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	491a      	ldr	r1, [pc, #104]	; (800476c <HAL_RCC_ClockConfig+0x260>)
 8004704:	4313      	orrs	r3, r2
 8004706:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004708:	f7fd fc96 	bl	8002038 <HAL_GetTick>
 800470c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800470e:	e00a      	b.n	8004726 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004710:	f7fd fc92 	bl	8002038 <HAL_GetTick>
 8004714:	4602      	mov	r2, r0
 8004716:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004718:	1ad3      	subs	r3, r2, r3
 800471a:	f241 3288 	movw	r2, #5000	; 0x1388
 800471e:	4293      	cmp	r3, r2
 8004720:	d901      	bls.n	8004726 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004722:	2303      	movs	r3, #3
 8004724:	e061      	b.n	80047ea <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004726:	4b11      	ldr	r3, [pc, #68]	; (800476c <HAL_RCC_ClockConfig+0x260>)
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	f003 020c 	and.w	r2, r3, #12
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	429a      	cmp	r2, r3
 8004736:	d1eb      	bne.n	8004710 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004738:	4b0b      	ldr	r3, [pc, #44]	; (8004768 <HAL_RCC_ClockConfig+0x25c>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 0307 	and.w	r3, r3, #7
 8004740:	683a      	ldr	r2, [r7, #0]
 8004742:	429a      	cmp	r2, r3
 8004744:	d214      	bcs.n	8004770 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004746:	4b08      	ldr	r3, [pc, #32]	; (8004768 <HAL_RCC_ClockConfig+0x25c>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f023 0207 	bic.w	r2, r3, #7
 800474e:	4906      	ldr	r1, [pc, #24]	; (8004768 <HAL_RCC_ClockConfig+0x25c>)
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	4313      	orrs	r3, r2
 8004754:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004756:	4b04      	ldr	r3, [pc, #16]	; (8004768 <HAL_RCC_ClockConfig+0x25c>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 0307 	and.w	r3, r3, #7
 800475e:	683a      	ldr	r2, [r7, #0]
 8004760:	429a      	cmp	r2, r3
 8004762:	d005      	beq.n	8004770 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	e040      	b.n	80047ea <HAL_RCC_ClockConfig+0x2de>
 8004768:	40022000 	.word	0x40022000
 800476c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 0304 	and.w	r3, r3, #4
 8004778:	2b00      	cmp	r3, #0
 800477a:	d008      	beq.n	800478e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800477c:	4b1d      	ldr	r3, [pc, #116]	; (80047f4 <HAL_RCC_ClockConfig+0x2e8>)
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	491a      	ldr	r1, [pc, #104]	; (80047f4 <HAL_RCC_ClockConfig+0x2e8>)
 800478a:	4313      	orrs	r3, r2
 800478c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f003 0308 	and.w	r3, r3, #8
 8004796:	2b00      	cmp	r3, #0
 8004798:	d009      	beq.n	80047ae <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800479a:	4b16      	ldr	r3, [pc, #88]	; (80047f4 <HAL_RCC_ClockConfig+0x2e8>)
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	691b      	ldr	r3, [r3, #16]
 80047a6:	00db      	lsls	r3, r3, #3
 80047a8:	4912      	ldr	r1, [pc, #72]	; (80047f4 <HAL_RCC_ClockConfig+0x2e8>)
 80047aa:	4313      	orrs	r3, r2
 80047ac:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80047ae:	f000 f829 	bl	8004804 <HAL_RCC_GetSysClockFreq>
 80047b2:	4601      	mov	r1, r0
 80047b4:	4b0f      	ldr	r3, [pc, #60]	; (80047f4 <HAL_RCC_ClockConfig+0x2e8>)
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047bc:	22f0      	movs	r2, #240	; 0xf0
 80047be:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047c0:	693a      	ldr	r2, [r7, #16]
 80047c2:	fa92 f2a2 	rbit	r2, r2
 80047c6:	60fa      	str	r2, [r7, #12]
  return result;
 80047c8:	68fa      	ldr	r2, [r7, #12]
 80047ca:	fab2 f282 	clz	r2, r2
 80047ce:	b2d2      	uxtb	r2, r2
 80047d0:	40d3      	lsrs	r3, r2
 80047d2:	4a09      	ldr	r2, [pc, #36]	; (80047f8 <HAL_RCC_ClockConfig+0x2ec>)
 80047d4:	5cd3      	ldrb	r3, [r2, r3]
 80047d6:	fa21 f303 	lsr.w	r3, r1, r3
 80047da:	4a08      	ldr	r2, [pc, #32]	; (80047fc <HAL_RCC_ClockConfig+0x2f0>)
 80047dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80047de:	4b08      	ldr	r3, [pc, #32]	; (8004800 <HAL_RCC_ClockConfig+0x2f4>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4618      	mov	r0, r3
 80047e4:	f7fd fbe4 	bl	8001fb0 <HAL_InitTick>
  
  return HAL_OK;
 80047e8:	2300      	movs	r3, #0
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3778      	adds	r7, #120	; 0x78
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}
 80047f2:	bf00      	nop
 80047f4:	40021000 	.word	0x40021000
 80047f8:	0800b468 	.word	0x0800b468
 80047fc:	20000000 	.word	0x20000000
 8004800:	20000004 	.word	0x20000004

08004804 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004804:	b480      	push	{r7}
 8004806:	b08b      	sub	sp, #44	; 0x2c
 8004808:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800480a:	2300      	movs	r3, #0
 800480c:	61fb      	str	r3, [r7, #28]
 800480e:	2300      	movs	r3, #0
 8004810:	61bb      	str	r3, [r7, #24]
 8004812:	2300      	movs	r3, #0
 8004814:	627b      	str	r3, [r7, #36]	; 0x24
 8004816:	2300      	movs	r3, #0
 8004818:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800481a:	2300      	movs	r3, #0
 800481c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800481e:	4b29      	ldr	r3, [pc, #164]	; (80048c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004824:	69fb      	ldr	r3, [r7, #28]
 8004826:	f003 030c 	and.w	r3, r3, #12
 800482a:	2b04      	cmp	r3, #4
 800482c:	d002      	beq.n	8004834 <HAL_RCC_GetSysClockFreq+0x30>
 800482e:	2b08      	cmp	r3, #8
 8004830:	d003      	beq.n	800483a <HAL_RCC_GetSysClockFreq+0x36>
 8004832:	e03c      	b.n	80048ae <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004834:	4b24      	ldr	r3, [pc, #144]	; (80048c8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004836:	623b      	str	r3, [r7, #32]
      break;
 8004838:	e03c      	b.n	80048b4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800483a:	69fb      	ldr	r3, [r7, #28]
 800483c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004840:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004844:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004846:	68ba      	ldr	r2, [r7, #8]
 8004848:	fa92 f2a2 	rbit	r2, r2
 800484c:	607a      	str	r2, [r7, #4]
  return result;
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	fab2 f282 	clz	r2, r2
 8004854:	b2d2      	uxtb	r2, r2
 8004856:	40d3      	lsrs	r3, r2
 8004858:	4a1c      	ldr	r2, [pc, #112]	; (80048cc <HAL_RCC_GetSysClockFreq+0xc8>)
 800485a:	5cd3      	ldrb	r3, [r2, r3]
 800485c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800485e:	4b19      	ldr	r3, [pc, #100]	; (80048c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004862:	f003 030f 	and.w	r3, r3, #15
 8004866:	220f      	movs	r2, #15
 8004868:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800486a:	693a      	ldr	r2, [r7, #16]
 800486c:	fa92 f2a2 	rbit	r2, r2
 8004870:	60fa      	str	r2, [r7, #12]
  return result;
 8004872:	68fa      	ldr	r2, [r7, #12]
 8004874:	fab2 f282 	clz	r2, r2
 8004878:	b2d2      	uxtb	r2, r2
 800487a:	40d3      	lsrs	r3, r2
 800487c:	4a14      	ldr	r2, [pc, #80]	; (80048d0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800487e:	5cd3      	ldrb	r3, [r2, r3]
 8004880:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004888:	2b00      	cmp	r3, #0
 800488a:	d008      	beq.n	800489e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800488c:	4a0e      	ldr	r2, [pc, #56]	; (80048c8 <HAL_RCC_GetSysClockFreq+0xc4>)
 800488e:	69bb      	ldr	r3, [r7, #24]
 8004890:	fbb2 f2f3 	udiv	r2, r2, r3
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	fb02 f303 	mul.w	r3, r2, r3
 800489a:	627b      	str	r3, [r7, #36]	; 0x24
 800489c:	e004      	b.n	80048a8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	4a0c      	ldr	r2, [pc, #48]	; (80048d4 <HAL_RCC_GetSysClockFreq+0xd0>)
 80048a2:	fb02 f303 	mul.w	r3, r2, r3
 80048a6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80048a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048aa:	623b      	str	r3, [r7, #32]
      break;
 80048ac:	e002      	b.n	80048b4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80048ae:	4b06      	ldr	r3, [pc, #24]	; (80048c8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80048b0:	623b      	str	r3, [r7, #32]
      break;
 80048b2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80048b4:	6a3b      	ldr	r3, [r7, #32]
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	372c      	adds	r7, #44	; 0x2c
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr
 80048c2:	bf00      	nop
 80048c4:	40021000 	.word	0x40021000
 80048c8:	007a1200 	.word	0x007a1200
 80048cc:	0800b480 	.word	0x0800b480
 80048d0:	0800b490 	.word	0x0800b490
 80048d4:	003d0900 	.word	0x003d0900

080048d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048d8:	b480      	push	{r7}
 80048da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048dc:	4b03      	ldr	r3, [pc, #12]	; (80048ec <HAL_RCC_GetHCLKFreq+0x14>)
 80048de:	681b      	ldr	r3, [r3, #0]
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr
 80048ea:	bf00      	nop
 80048ec:	20000000 	.word	0x20000000

080048f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b082      	sub	sp, #8
 80048f4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80048f6:	f7ff ffef 	bl	80048d8 <HAL_RCC_GetHCLKFreq>
 80048fa:	4601      	mov	r1, r0
 80048fc:	4b0b      	ldr	r3, [pc, #44]	; (800492c <HAL_RCC_GetPCLK1Freq+0x3c>)
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004904:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004908:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	fa92 f2a2 	rbit	r2, r2
 8004910:	603a      	str	r2, [r7, #0]
  return result;
 8004912:	683a      	ldr	r2, [r7, #0]
 8004914:	fab2 f282 	clz	r2, r2
 8004918:	b2d2      	uxtb	r2, r2
 800491a:	40d3      	lsrs	r3, r2
 800491c:	4a04      	ldr	r2, [pc, #16]	; (8004930 <HAL_RCC_GetPCLK1Freq+0x40>)
 800491e:	5cd3      	ldrb	r3, [r2, r3]
 8004920:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004924:	4618      	mov	r0, r3
 8004926:	3708      	adds	r7, #8
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}
 800492c:	40021000 	.word	0x40021000
 8004930:	0800b478 	.word	0x0800b478

08004934 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b082      	sub	sp, #8
 8004938:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800493a:	f7ff ffcd 	bl	80048d8 <HAL_RCC_GetHCLKFreq>
 800493e:	4601      	mov	r1, r0
 8004940:	4b0b      	ldr	r3, [pc, #44]	; (8004970 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004948:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800494c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	fa92 f2a2 	rbit	r2, r2
 8004954:	603a      	str	r2, [r7, #0]
  return result;
 8004956:	683a      	ldr	r2, [r7, #0]
 8004958:	fab2 f282 	clz	r2, r2
 800495c:	b2d2      	uxtb	r2, r2
 800495e:	40d3      	lsrs	r3, r2
 8004960:	4a04      	ldr	r2, [pc, #16]	; (8004974 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004962:	5cd3      	ldrb	r3, [r2, r3]
 8004964:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004968:	4618      	mov	r0, r3
 800496a:	3708      	adds	r7, #8
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}
 8004970:	40021000 	.word	0x40021000
 8004974:	0800b478 	.word	0x0800b478

08004978 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b092      	sub	sp, #72	; 0x48
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004980:	2300      	movs	r3, #0
 8004982:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004984:	2300      	movs	r3, #0
 8004986:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004988:	2300      	movs	r3, #0
 800498a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004996:	2b00      	cmp	r3, #0
 8004998:	f000 80cd 	beq.w	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800499c:	4b86      	ldr	r3, [pc, #536]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800499e:	69db      	ldr	r3, [r3, #28]
 80049a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d10e      	bne.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049a8:	4b83      	ldr	r3, [pc, #524]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80049aa:	69db      	ldr	r3, [r3, #28]
 80049ac:	4a82      	ldr	r2, [pc, #520]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80049ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049b2:	61d3      	str	r3, [r2, #28]
 80049b4:	4b80      	ldr	r3, [pc, #512]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80049b6:	69db      	ldr	r3, [r3, #28]
 80049b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049bc:	60bb      	str	r3, [r7, #8]
 80049be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049c0:	2301      	movs	r3, #1
 80049c2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049c6:	4b7d      	ldr	r3, [pc, #500]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d118      	bne.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049d2:	4b7a      	ldr	r3, [pc, #488]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a79      	ldr	r2, [pc, #484]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80049d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049dc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049de:	f7fd fb2b 	bl	8002038 <HAL_GetTick>
 80049e2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049e4:	e008      	b.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049e6:	f7fd fb27 	bl	8002038 <HAL_GetTick>
 80049ea:	4602      	mov	r2, r0
 80049ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049ee:	1ad3      	subs	r3, r2, r3
 80049f0:	2b64      	cmp	r3, #100	; 0x64
 80049f2:	d901      	bls.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80049f4:	2303      	movs	r3, #3
 80049f6:	e0db      	b.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049f8:	4b70      	ldr	r3, [pc, #448]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d0f0      	beq.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004a04:	4b6c      	ldr	r3, [pc, #432]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004a06:	6a1b      	ldr	r3, [r3, #32]
 8004a08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a0c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004a0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d07d      	beq.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a1c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d076      	beq.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004a22:	4b65      	ldr	r3, [pc, #404]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004a24:	6a1b      	ldr	r3, [r3, #32]
 8004a26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004a30:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a34:	fa93 f3a3 	rbit	r3, r3
 8004a38:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004a3c:	fab3 f383 	clz	r3, r3
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	461a      	mov	r2, r3
 8004a44:	4b5e      	ldr	r3, [pc, #376]	; (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004a46:	4413      	add	r3, r2
 8004a48:	009b      	lsls	r3, r3, #2
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	6013      	str	r3, [r2, #0]
 8004a50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004a54:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a58:	fa93 f3a3 	rbit	r3, r3
 8004a5c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004a5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004a60:	fab3 f383 	clz	r3, r3
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	461a      	mov	r2, r3
 8004a68:	4b55      	ldr	r3, [pc, #340]	; (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004a6a:	4413      	add	r3, r2
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	461a      	mov	r2, r3
 8004a70:	2300      	movs	r3, #0
 8004a72:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004a74:	4a50      	ldr	r2, [pc, #320]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004a76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a78:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004a7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a7c:	f003 0301 	and.w	r3, r3, #1
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d045      	beq.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a84:	f7fd fad8 	bl	8002038 <HAL_GetTick>
 8004a88:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a8a:	e00a      	b.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a8c:	f7fd fad4 	bl	8002038 <HAL_GetTick>
 8004a90:	4602      	mov	r2, r0
 8004a92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a94:	1ad3      	subs	r3, r2, r3
 8004a96:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d901      	bls.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8004a9e:	2303      	movs	r3, #3
 8004aa0:	e086      	b.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8004aa2:	2302      	movs	r3, #2
 8004aa4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa8:	fa93 f3a3 	rbit	r3, r3
 8004aac:	627b      	str	r3, [r7, #36]	; 0x24
 8004aae:	2302      	movs	r3, #2
 8004ab0:	623b      	str	r3, [r7, #32]
 8004ab2:	6a3b      	ldr	r3, [r7, #32]
 8004ab4:	fa93 f3a3 	rbit	r3, r3
 8004ab8:	61fb      	str	r3, [r7, #28]
  return result;
 8004aba:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004abc:	fab3 f383 	clz	r3, r3
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	095b      	lsrs	r3, r3, #5
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	f043 0302 	orr.w	r3, r3, #2
 8004aca:	b2db      	uxtb	r3, r3
 8004acc:	2b02      	cmp	r3, #2
 8004ace:	d102      	bne.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004ad0:	4b39      	ldr	r3, [pc, #228]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004ad2:	6a1b      	ldr	r3, [r3, #32]
 8004ad4:	e007      	b.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8004ad6:	2302      	movs	r3, #2
 8004ad8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ada:	69bb      	ldr	r3, [r7, #24]
 8004adc:	fa93 f3a3 	rbit	r3, r3
 8004ae0:	617b      	str	r3, [r7, #20]
 8004ae2:	4b35      	ldr	r3, [pc, #212]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae6:	2202      	movs	r2, #2
 8004ae8:	613a      	str	r2, [r7, #16]
 8004aea:	693a      	ldr	r2, [r7, #16]
 8004aec:	fa92 f2a2 	rbit	r2, r2
 8004af0:	60fa      	str	r2, [r7, #12]
  return result;
 8004af2:	68fa      	ldr	r2, [r7, #12]
 8004af4:	fab2 f282 	clz	r2, r2
 8004af8:	b2d2      	uxtb	r2, r2
 8004afa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004afe:	b2d2      	uxtb	r2, r2
 8004b00:	f002 021f 	and.w	r2, r2, #31
 8004b04:	2101      	movs	r1, #1
 8004b06:	fa01 f202 	lsl.w	r2, r1, r2
 8004b0a:	4013      	ands	r3, r2
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d0bd      	beq.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004b10:	4b29      	ldr	r3, [pc, #164]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004b12:	6a1b      	ldr	r3, [r3, #32]
 8004b14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	4926      	ldr	r1, [pc, #152]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004b22:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d105      	bne.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b2a:	4b23      	ldr	r3, [pc, #140]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004b2c:	69db      	ldr	r3, [r3, #28]
 8004b2e:	4a22      	ldr	r2, [pc, #136]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004b30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b34:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 0301 	and.w	r3, r3, #1
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d008      	beq.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004b42:	4b1d      	ldr	r3, [pc, #116]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b46:	f023 0203 	bic.w	r2, r3, #3
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	491a      	ldr	r1, [pc, #104]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004b50:	4313      	orrs	r3, r2
 8004b52:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 0320 	and.w	r3, r3, #32
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d008      	beq.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b60:	4b15      	ldr	r3, [pc, #84]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b64:	f023 0210 	bic.w	r2, r3, #16
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	4912      	ldr	r1, [pc, #72]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d008      	beq.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004b7e:	4b0e      	ldr	r3, [pc, #56]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b82:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	691b      	ldr	r3, [r3, #16]
 8004b8a:	490b      	ldr	r1, [pc, #44]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d008      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004b9c:	4b06      	ldr	r3, [pc, #24]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ba0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	695b      	ldr	r3, [r3, #20]
 8004ba8:	4903      	ldr	r1, [pc, #12]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004baa:	4313      	orrs	r3, r2
 8004bac:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004bae:	2300      	movs	r3, #0
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3748      	adds	r7, #72	; 0x48
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}
 8004bb8:	40021000 	.word	0x40021000
 8004bbc:	40007000 	.word	0x40007000
 8004bc0:	10908100 	.word	0x10908100

08004bc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b082      	sub	sp, #8
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d101      	bne.n	8004bd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e049      	b.n	8004c6a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d106      	bne.n	8004bf0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2200      	movs	r2, #0
 8004be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f7fc ffc8 	bl	8001b80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2202      	movs	r2, #2
 8004bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	3304      	adds	r3, #4
 8004c00:	4619      	mov	r1, r3
 8004c02:	4610      	mov	r0, r2
 8004c04:	f000 fbb6 	bl	8005374 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2201      	movs	r2, #1
 8004c14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2201      	movs	r2, #1
 8004c34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c68:	2300      	movs	r3, #0
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3708      	adds	r7, #8
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
	...

08004c74 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b085      	sub	sp, #20
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c82:	b2db      	uxtb	r3, r3
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d001      	beq.n	8004c8c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	e038      	b.n	8004cfe <HAL_TIM_Base_Start+0x8a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2202      	movs	r2, #2
 8004c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a1c      	ldr	r2, [pc, #112]	; (8004d0c <HAL_TIM_Base_Start+0x98>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d00e      	beq.n	8004cbc <HAL_TIM_Base_Start+0x48>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ca6:	d009      	beq.n	8004cbc <HAL_TIM_Base_Start+0x48>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a18      	ldr	r2, [pc, #96]	; (8004d10 <HAL_TIM_Base_Start+0x9c>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d004      	beq.n	8004cbc <HAL_TIM_Base_Start+0x48>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a17      	ldr	r2, [pc, #92]	; (8004d14 <HAL_TIM_Base_Start+0xa0>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d115      	bne.n	8004ce8 <HAL_TIM_Base_Start+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	689a      	ldr	r2, [r3, #8]
 8004cc2:	4b15      	ldr	r3, [pc, #84]	; (8004d18 <HAL_TIM_Base_Start+0xa4>)
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2b06      	cmp	r3, #6
 8004ccc:	d015      	beq.n	8004cfa <HAL_TIM_Base_Start+0x86>
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cd4:	d011      	beq.n	8004cfa <HAL_TIM_Base_Start+0x86>
    {
      __HAL_TIM_ENABLE(htim);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f042 0201 	orr.w	r2, r2, #1
 8004ce4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ce6:	e008      	b.n	8004cfa <HAL_TIM_Base_Start+0x86>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f042 0201 	orr.w	r2, r2, #1
 8004cf6:	601a      	str	r2, [r3, #0]
 8004cf8:	e000      	b.n	8004cfc <HAL_TIM_Base_Start+0x88>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cfa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004cfc:	2300      	movs	r3, #0
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3714      	adds	r7, #20
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr
 8004d0a:	bf00      	nop
 8004d0c:	40012c00 	.word	0x40012c00
 8004d10:	40000400 	.word	0x40000400
 8004d14:	40014000 	.word	0x40014000
 8004d18:	00010007 	.word	0x00010007

08004d1c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b082      	sub	sp, #8
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d101      	bne.n	8004d2e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e049      	b.n	8004dc2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d106      	bne.n	8004d48 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f000 f841 	bl	8004dca <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2202      	movs	r2, #2
 8004d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	3304      	adds	r3, #4
 8004d58:	4619      	mov	r1, r3
 8004d5a:	4610      	mov	r0, r2
 8004d5c:	f000 fb0a 	bl	8005374 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2201      	movs	r2, #1
 8004d74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2201      	movs	r2, #1
 8004d84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2201      	movs	r2, #1
 8004da4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2201      	movs	r2, #1
 8004dac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004dc0:	2300      	movs	r3, #0
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3708      	adds	r7, #8
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}

08004dca <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004dca:	b480      	push	{r7}
 8004dcc:	b083      	sub	sp, #12
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004dd2:	bf00      	nop
 8004dd4:	370c      	adds	r7, #12
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr
	...

08004de0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b084      	sub	sp, #16
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d109      	bne.n	8004e04 <HAL_TIM_PWM_Start+0x24>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004df6:	b2db      	uxtb	r3, r3
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	bf14      	ite	ne
 8004dfc:	2301      	movne	r3, #1
 8004dfe:	2300      	moveq	r3, #0
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	e03c      	b.n	8004e7e <HAL_TIM_PWM_Start+0x9e>
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	2b04      	cmp	r3, #4
 8004e08:	d109      	bne.n	8004e1e <HAL_TIM_PWM_Start+0x3e>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	bf14      	ite	ne
 8004e16:	2301      	movne	r3, #1
 8004e18:	2300      	moveq	r3, #0
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	e02f      	b.n	8004e7e <HAL_TIM_PWM_Start+0x9e>
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	2b08      	cmp	r3, #8
 8004e22:	d109      	bne.n	8004e38 <HAL_TIM_PWM_Start+0x58>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e2a:	b2db      	uxtb	r3, r3
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	bf14      	ite	ne
 8004e30:	2301      	movne	r3, #1
 8004e32:	2300      	moveq	r3, #0
 8004e34:	b2db      	uxtb	r3, r3
 8004e36:	e022      	b.n	8004e7e <HAL_TIM_PWM_Start+0x9e>
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	2b0c      	cmp	r3, #12
 8004e3c:	d109      	bne.n	8004e52 <HAL_TIM_PWM_Start+0x72>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e44:	b2db      	uxtb	r3, r3
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	bf14      	ite	ne
 8004e4a:	2301      	movne	r3, #1
 8004e4c:	2300      	moveq	r3, #0
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	e015      	b.n	8004e7e <HAL_TIM_PWM_Start+0x9e>
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	2b10      	cmp	r3, #16
 8004e56:	d109      	bne.n	8004e6c <HAL_TIM_PWM_Start+0x8c>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004e5e:	b2db      	uxtb	r3, r3
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	bf14      	ite	ne
 8004e64:	2301      	movne	r3, #1
 8004e66:	2300      	moveq	r3, #0
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	e008      	b.n	8004e7e <HAL_TIM_PWM_Start+0x9e>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004e72:	b2db      	uxtb	r3, r3
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	bf14      	ite	ne
 8004e78:	2301      	movne	r3, #1
 8004e7a:	2300      	moveq	r3, #0
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d001      	beq.n	8004e86 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	e088      	b.n	8004f98 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d104      	bne.n	8004e96 <HAL_TIM_PWM_Start+0xb6>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2202      	movs	r2, #2
 8004e90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e94:	e023      	b.n	8004ede <HAL_TIM_PWM_Start+0xfe>
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	2b04      	cmp	r3, #4
 8004e9a:	d104      	bne.n	8004ea6 <HAL_TIM_PWM_Start+0xc6>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2202      	movs	r2, #2
 8004ea0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ea4:	e01b      	b.n	8004ede <HAL_TIM_PWM_Start+0xfe>
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	2b08      	cmp	r3, #8
 8004eaa:	d104      	bne.n	8004eb6 <HAL_TIM_PWM_Start+0xd6>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2202      	movs	r2, #2
 8004eb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004eb4:	e013      	b.n	8004ede <HAL_TIM_PWM_Start+0xfe>
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	2b0c      	cmp	r3, #12
 8004eba:	d104      	bne.n	8004ec6 <HAL_TIM_PWM_Start+0xe6>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2202      	movs	r2, #2
 8004ec0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004ec4:	e00b      	b.n	8004ede <HAL_TIM_PWM_Start+0xfe>
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	2b10      	cmp	r3, #16
 8004eca:	d104      	bne.n	8004ed6 <HAL_TIM_PWM_Start+0xf6>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2202      	movs	r2, #2
 8004ed0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ed4:	e003      	b.n	8004ede <HAL_TIM_PWM_Start+0xfe>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2202      	movs	r2, #2
 8004eda:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	6839      	ldr	r1, [r7, #0]
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f000 fdfc 	bl	8005ae4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a2b      	ldr	r2, [pc, #172]	; (8004fa0 <HAL_TIM_PWM_Start+0x1c0>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d00e      	beq.n	8004f14 <HAL_TIM_PWM_Start+0x134>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a2a      	ldr	r2, [pc, #168]	; (8004fa4 <HAL_TIM_PWM_Start+0x1c4>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d009      	beq.n	8004f14 <HAL_TIM_PWM_Start+0x134>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a28      	ldr	r2, [pc, #160]	; (8004fa8 <HAL_TIM_PWM_Start+0x1c8>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d004      	beq.n	8004f14 <HAL_TIM_PWM_Start+0x134>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a27      	ldr	r2, [pc, #156]	; (8004fac <HAL_TIM_PWM_Start+0x1cc>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d101      	bne.n	8004f18 <HAL_TIM_PWM_Start+0x138>
 8004f14:	2301      	movs	r3, #1
 8004f16:	e000      	b.n	8004f1a <HAL_TIM_PWM_Start+0x13a>
 8004f18:	2300      	movs	r3, #0
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d007      	beq.n	8004f2e <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f2c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a1b      	ldr	r2, [pc, #108]	; (8004fa0 <HAL_TIM_PWM_Start+0x1c0>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d00e      	beq.n	8004f56 <HAL_TIM_PWM_Start+0x176>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f40:	d009      	beq.n	8004f56 <HAL_TIM_PWM_Start+0x176>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a1a      	ldr	r2, [pc, #104]	; (8004fb0 <HAL_TIM_PWM_Start+0x1d0>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d004      	beq.n	8004f56 <HAL_TIM_PWM_Start+0x176>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a14      	ldr	r2, [pc, #80]	; (8004fa4 <HAL_TIM_PWM_Start+0x1c4>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d115      	bne.n	8004f82 <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	689a      	ldr	r2, [r3, #8]
 8004f5c:	4b15      	ldr	r3, [pc, #84]	; (8004fb4 <HAL_TIM_PWM_Start+0x1d4>)
 8004f5e:	4013      	ands	r3, r2
 8004f60:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2b06      	cmp	r3, #6
 8004f66:	d015      	beq.n	8004f94 <HAL_TIM_PWM_Start+0x1b4>
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f6e:	d011      	beq.n	8004f94 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f042 0201 	orr.w	r2, r2, #1
 8004f7e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f80:	e008      	b.n	8004f94 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f042 0201 	orr.w	r2, r2, #1
 8004f90:	601a      	str	r2, [r3, #0]
 8004f92:	e000      	b.n	8004f96 <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f94:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004f96:	2300      	movs	r3, #0
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3710      	adds	r7, #16
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}
 8004fa0:	40012c00 	.word	0x40012c00
 8004fa4:	40014000 	.word	0x40014000
 8004fa8:	40014400 	.word	0x40014400
 8004fac:	40014800 	.word	0x40014800
 8004fb0:	40000400 	.word	0x40000400
 8004fb4:	00010007 	.word	0x00010007

08004fb8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b086      	sub	sp, #24
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	60f8      	str	r0, [r7, #12]
 8004fc0:	60b9      	str	r1, [r7, #8]
 8004fc2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d101      	bne.n	8004fd6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004fd2:	2302      	movs	r3, #2
 8004fd4:	e0ff      	b.n	80051d6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2201      	movs	r2, #1
 8004fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2b14      	cmp	r3, #20
 8004fe2:	f200 80f0 	bhi.w	80051c6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004fe6:	a201      	add	r2, pc, #4	; (adr r2, 8004fec <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fec:	08005041 	.word	0x08005041
 8004ff0:	080051c7 	.word	0x080051c7
 8004ff4:	080051c7 	.word	0x080051c7
 8004ff8:	080051c7 	.word	0x080051c7
 8004ffc:	08005081 	.word	0x08005081
 8005000:	080051c7 	.word	0x080051c7
 8005004:	080051c7 	.word	0x080051c7
 8005008:	080051c7 	.word	0x080051c7
 800500c:	080050c3 	.word	0x080050c3
 8005010:	080051c7 	.word	0x080051c7
 8005014:	080051c7 	.word	0x080051c7
 8005018:	080051c7 	.word	0x080051c7
 800501c:	08005103 	.word	0x08005103
 8005020:	080051c7 	.word	0x080051c7
 8005024:	080051c7 	.word	0x080051c7
 8005028:	080051c7 	.word	0x080051c7
 800502c:	08005145 	.word	0x08005145
 8005030:	080051c7 	.word	0x080051c7
 8005034:	080051c7 	.word	0x080051c7
 8005038:	080051c7 	.word	0x080051c7
 800503c:	08005185 	.word	0x08005185
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	68b9      	ldr	r1, [r7, #8]
 8005046:	4618      	mov	r0, r3
 8005048:	f000 fa0c 	bl	8005464 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	699a      	ldr	r2, [r3, #24]
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f042 0208 	orr.w	r2, r2, #8
 800505a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	699a      	ldr	r2, [r3, #24]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f022 0204 	bic.w	r2, r2, #4
 800506a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	6999      	ldr	r1, [r3, #24]
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	691a      	ldr	r2, [r3, #16]
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	430a      	orrs	r2, r1
 800507c:	619a      	str	r2, [r3, #24]
      break;
 800507e:	e0a5      	b.n	80051cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	68b9      	ldr	r1, [r7, #8]
 8005086:	4618      	mov	r0, r3
 8005088:	f000 fa72 	bl	8005570 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	699a      	ldr	r2, [r3, #24]
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800509a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	699a      	ldr	r2, [r3, #24]
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	6999      	ldr	r1, [r3, #24]
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	691b      	ldr	r3, [r3, #16]
 80050b6:	021a      	lsls	r2, r3, #8
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	430a      	orrs	r2, r1
 80050be:	619a      	str	r2, [r3, #24]
      break;
 80050c0:	e084      	b.n	80051cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	68b9      	ldr	r1, [r7, #8]
 80050c8:	4618      	mov	r0, r3
 80050ca:	f000 fad1 	bl	8005670 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	69da      	ldr	r2, [r3, #28]
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f042 0208 	orr.w	r2, r2, #8
 80050dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	69da      	ldr	r2, [r3, #28]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f022 0204 	bic.w	r2, r2, #4
 80050ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	69d9      	ldr	r1, [r3, #28]
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	691a      	ldr	r2, [r3, #16]
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	430a      	orrs	r2, r1
 80050fe:	61da      	str	r2, [r3, #28]
      break;
 8005100:	e064      	b.n	80051cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	68b9      	ldr	r1, [r7, #8]
 8005108:	4618      	mov	r0, r3
 800510a:	f000 fb2f 	bl	800576c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	69da      	ldr	r2, [r3, #28]
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800511c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	69da      	ldr	r2, [r3, #28]
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800512c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	69d9      	ldr	r1, [r3, #28]
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	691b      	ldr	r3, [r3, #16]
 8005138:	021a      	lsls	r2, r3, #8
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	430a      	orrs	r2, r1
 8005140:	61da      	str	r2, [r3, #28]
      break;
 8005142:	e043      	b.n	80051cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	68b9      	ldr	r1, [r7, #8]
 800514a:	4618      	mov	r0, r3
 800514c:	f000 fb72 	bl	8005834 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f042 0208 	orr.w	r2, r2, #8
 800515e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f022 0204 	bic.w	r2, r2, #4
 800516e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	691a      	ldr	r2, [r3, #16]
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	430a      	orrs	r2, r1
 8005180:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005182:	e023      	b.n	80051cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	68b9      	ldr	r1, [r7, #8]
 800518a:	4618      	mov	r0, r3
 800518c:	f000 fbb0 	bl	80058f0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800519e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051ae:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	691b      	ldr	r3, [r3, #16]
 80051ba:	021a      	lsls	r2, r3, #8
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	430a      	orrs	r2, r1
 80051c2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80051c4:	e002      	b.n	80051cc <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	75fb      	strb	r3, [r7, #23]
      break;
 80051ca:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2200      	movs	r2, #0
 80051d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80051d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3718      	adds	r7, #24
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}
 80051de:	bf00      	nop

080051e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b084      	sub	sp, #16
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80051ea:	2300      	movs	r3, #0
 80051ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d101      	bne.n	80051fc <HAL_TIM_ConfigClockSource+0x1c>
 80051f8:	2302      	movs	r3, #2
 80051fa:	e0b6      	b.n	800536a <HAL_TIM_ConfigClockSource+0x18a>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2201      	movs	r2, #1
 8005200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2202      	movs	r2, #2
 8005208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800521a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800521e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005226:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	68ba      	ldr	r2, [r7, #8]
 800522e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005238:	d03e      	beq.n	80052b8 <HAL_TIM_ConfigClockSource+0xd8>
 800523a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800523e:	f200 8087 	bhi.w	8005350 <HAL_TIM_ConfigClockSource+0x170>
 8005242:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005246:	f000 8086 	beq.w	8005356 <HAL_TIM_ConfigClockSource+0x176>
 800524a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800524e:	d87f      	bhi.n	8005350 <HAL_TIM_ConfigClockSource+0x170>
 8005250:	2b70      	cmp	r3, #112	; 0x70
 8005252:	d01a      	beq.n	800528a <HAL_TIM_ConfigClockSource+0xaa>
 8005254:	2b70      	cmp	r3, #112	; 0x70
 8005256:	d87b      	bhi.n	8005350 <HAL_TIM_ConfigClockSource+0x170>
 8005258:	2b60      	cmp	r3, #96	; 0x60
 800525a:	d050      	beq.n	80052fe <HAL_TIM_ConfigClockSource+0x11e>
 800525c:	2b60      	cmp	r3, #96	; 0x60
 800525e:	d877      	bhi.n	8005350 <HAL_TIM_ConfigClockSource+0x170>
 8005260:	2b50      	cmp	r3, #80	; 0x50
 8005262:	d03c      	beq.n	80052de <HAL_TIM_ConfigClockSource+0xfe>
 8005264:	2b50      	cmp	r3, #80	; 0x50
 8005266:	d873      	bhi.n	8005350 <HAL_TIM_ConfigClockSource+0x170>
 8005268:	2b40      	cmp	r3, #64	; 0x40
 800526a:	d058      	beq.n	800531e <HAL_TIM_ConfigClockSource+0x13e>
 800526c:	2b40      	cmp	r3, #64	; 0x40
 800526e:	d86f      	bhi.n	8005350 <HAL_TIM_ConfigClockSource+0x170>
 8005270:	2b30      	cmp	r3, #48	; 0x30
 8005272:	d064      	beq.n	800533e <HAL_TIM_ConfigClockSource+0x15e>
 8005274:	2b30      	cmp	r3, #48	; 0x30
 8005276:	d86b      	bhi.n	8005350 <HAL_TIM_ConfigClockSource+0x170>
 8005278:	2b20      	cmp	r3, #32
 800527a:	d060      	beq.n	800533e <HAL_TIM_ConfigClockSource+0x15e>
 800527c:	2b20      	cmp	r3, #32
 800527e:	d867      	bhi.n	8005350 <HAL_TIM_ConfigClockSource+0x170>
 8005280:	2b00      	cmp	r3, #0
 8005282:	d05c      	beq.n	800533e <HAL_TIM_ConfigClockSource+0x15e>
 8005284:	2b10      	cmp	r3, #16
 8005286:	d05a      	beq.n	800533e <HAL_TIM_ConfigClockSource+0x15e>
 8005288:	e062      	b.n	8005350 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6818      	ldr	r0, [r3, #0]
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	6899      	ldr	r1, [r3, #8]
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	685a      	ldr	r2, [r3, #4]
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	68db      	ldr	r3, [r3, #12]
 800529a:	f000 fc03 	bl	8005aa4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80052ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	68ba      	ldr	r2, [r7, #8]
 80052b4:	609a      	str	r2, [r3, #8]
      break;
 80052b6:	e04f      	b.n	8005358 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6818      	ldr	r0, [r3, #0]
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	6899      	ldr	r1, [r3, #8]
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	685a      	ldr	r2, [r3, #4]
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	68db      	ldr	r3, [r3, #12]
 80052c8:	f000 fbec 	bl	8005aa4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	689a      	ldr	r2, [r3, #8]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052da:	609a      	str	r2, [r3, #8]
      break;
 80052dc:	e03c      	b.n	8005358 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6818      	ldr	r0, [r3, #0]
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	6859      	ldr	r1, [r3, #4]
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	68db      	ldr	r3, [r3, #12]
 80052ea:	461a      	mov	r2, r3
 80052ec:	f000 fb60 	bl	80059b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	2150      	movs	r1, #80	; 0x50
 80052f6:	4618      	mov	r0, r3
 80052f8:	f000 fbb9 	bl	8005a6e <TIM_ITRx_SetConfig>
      break;
 80052fc:	e02c      	b.n	8005358 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6818      	ldr	r0, [r3, #0]
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	6859      	ldr	r1, [r3, #4]
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	68db      	ldr	r3, [r3, #12]
 800530a:	461a      	mov	r2, r3
 800530c:	f000 fb7f 	bl	8005a0e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	2160      	movs	r1, #96	; 0x60
 8005316:	4618      	mov	r0, r3
 8005318:	f000 fba9 	bl	8005a6e <TIM_ITRx_SetConfig>
      break;
 800531c:	e01c      	b.n	8005358 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6818      	ldr	r0, [r3, #0]
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	6859      	ldr	r1, [r3, #4]
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	68db      	ldr	r3, [r3, #12]
 800532a:	461a      	mov	r2, r3
 800532c:	f000 fb40 	bl	80059b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	2140      	movs	r1, #64	; 0x40
 8005336:	4618      	mov	r0, r3
 8005338:	f000 fb99 	bl	8005a6e <TIM_ITRx_SetConfig>
      break;
 800533c:	e00c      	b.n	8005358 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4619      	mov	r1, r3
 8005348:	4610      	mov	r0, r2
 800534a:	f000 fb90 	bl	8005a6e <TIM_ITRx_SetConfig>
      break;
 800534e:	e003      	b.n	8005358 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005350:	2301      	movs	r3, #1
 8005352:	73fb      	strb	r3, [r7, #15]
      break;
 8005354:	e000      	b.n	8005358 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005356:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2201      	movs	r2, #1
 800535c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2200      	movs	r2, #0
 8005364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005368:	7bfb      	ldrb	r3, [r7, #15]
}
 800536a:	4618      	mov	r0, r3
 800536c:	3710      	adds	r7, #16
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}
	...

08005374 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005374:	b480      	push	{r7}
 8005376:	b085      	sub	sp, #20
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
 800537c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	4a32      	ldr	r2, [pc, #200]	; (8005450 <TIM_Base_SetConfig+0xdc>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d007      	beq.n	800539c <TIM_Base_SetConfig+0x28>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005392:	d003      	beq.n	800539c <TIM_Base_SetConfig+0x28>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	4a2f      	ldr	r2, [pc, #188]	; (8005454 <TIM_Base_SetConfig+0xe0>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d108      	bne.n	80053ae <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	68fa      	ldr	r2, [r7, #12]
 80053aa:	4313      	orrs	r3, r2
 80053ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	4a27      	ldr	r2, [pc, #156]	; (8005450 <TIM_Base_SetConfig+0xdc>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d013      	beq.n	80053de <TIM_Base_SetConfig+0x6a>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053bc:	d00f      	beq.n	80053de <TIM_Base_SetConfig+0x6a>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4a24      	ldr	r2, [pc, #144]	; (8005454 <TIM_Base_SetConfig+0xe0>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d00b      	beq.n	80053de <TIM_Base_SetConfig+0x6a>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	4a23      	ldr	r2, [pc, #140]	; (8005458 <TIM_Base_SetConfig+0xe4>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d007      	beq.n	80053de <TIM_Base_SetConfig+0x6a>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4a22      	ldr	r2, [pc, #136]	; (800545c <TIM_Base_SetConfig+0xe8>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d003      	beq.n	80053de <TIM_Base_SetConfig+0x6a>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4a21      	ldr	r2, [pc, #132]	; (8005460 <TIM_Base_SetConfig+0xec>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d108      	bne.n	80053f0 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	68db      	ldr	r3, [r3, #12]
 80053ea:	68fa      	ldr	r2, [r7, #12]
 80053ec:	4313      	orrs	r3, r2
 80053ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	695b      	ldr	r3, [r3, #20]
 80053fa:	4313      	orrs	r3, r2
 80053fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	68fa      	ldr	r2, [r7, #12]
 8005402:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	689a      	ldr	r2, [r3, #8]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	4a0e      	ldr	r2, [pc, #56]	; (8005450 <TIM_Base_SetConfig+0xdc>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d00b      	beq.n	8005434 <TIM_Base_SetConfig+0xc0>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	4a0e      	ldr	r2, [pc, #56]	; (8005458 <TIM_Base_SetConfig+0xe4>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d007      	beq.n	8005434 <TIM_Base_SetConfig+0xc0>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	4a0d      	ldr	r2, [pc, #52]	; (800545c <TIM_Base_SetConfig+0xe8>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d003      	beq.n	8005434 <TIM_Base_SetConfig+0xc0>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	4a0c      	ldr	r2, [pc, #48]	; (8005460 <TIM_Base_SetConfig+0xec>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d103      	bne.n	800543c <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	691a      	ldr	r2, [r3, #16]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2201      	movs	r2, #1
 8005440:	615a      	str	r2, [r3, #20]
}
 8005442:	bf00      	nop
 8005444:	3714      	adds	r7, #20
 8005446:	46bd      	mov	sp, r7
 8005448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544c:	4770      	bx	lr
 800544e:	bf00      	nop
 8005450:	40012c00 	.word	0x40012c00
 8005454:	40000400 	.word	0x40000400
 8005458:	40014000 	.word	0x40014000
 800545c:	40014400 	.word	0x40014400
 8005460:	40014800 	.word	0x40014800

08005464 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005464:	b480      	push	{r7}
 8005466:	b087      	sub	sp, #28
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
 800546c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6a1b      	ldr	r3, [r3, #32]
 8005472:	f023 0201 	bic.w	r2, r3, #1
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6a1b      	ldr	r3, [r3, #32]
 800547e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	699b      	ldr	r3, [r3, #24]
 800548a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005492:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005496:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f023 0303 	bic.w	r3, r3, #3
 800549e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	68fa      	ldr	r2, [r7, #12]
 80054a6:	4313      	orrs	r3, r2
 80054a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	f023 0302 	bic.w	r3, r3, #2
 80054b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	697a      	ldr	r2, [r7, #20]
 80054b8:	4313      	orrs	r3, r2
 80054ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	4a28      	ldr	r2, [pc, #160]	; (8005560 <TIM_OC1_SetConfig+0xfc>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d00b      	beq.n	80054dc <TIM_OC1_SetConfig+0x78>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	4a27      	ldr	r2, [pc, #156]	; (8005564 <TIM_OC1_SetConfig+0x100>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d007      	beq.n	80054dc <TIM_OC1_SetConfig+0x78>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	4a26      	ldr	r2, [pc, #152]	; (8005568 <TIM_OC1_SetConfig+0x104>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d003      	beq.n	80054dc <TIM_OC1_SetConfig+0x78>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	4a25      	ldr	r2, [pc, #148]	; (800556c <TIM_OC1_SetConfig+0x108>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d10c      	bne.n	80054f6 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	f023 0308 	bic.w	r3, r3, #8
 80054e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	68db      	ldr	r3, [r3, #12]
 80054e8:	697a      	ldr	r2, [r7, #20]
 80054ea:	4313      	orrs	r3, r2
 80054ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	f023 0304 	bic.w	r3, r3, #4
 80054f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	4a19      	ldr	r2, [pc, #100]	; (8005560 <TIM_OC1_SetConfig+0xfc>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d00b      	beq.n	8005516 <TIM_OC1_SetConfig+0xb2>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	4a18      	ldr	r2, [pc, #96]	; (8005564 <TIM_OC1_SetConfig+0x100>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d007      	beq.n	8005516 <TIM_OC1_SetConfig+0xb2>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	4a17      	ldr	r2, [pc, #92]	; (8005568 <TIM_OC1_SetConfig+0x104>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d003      	beq.n	8005516 <TIM_OC1_SetConfig+0xb2>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	4a16      	ldr	r2, [pc, #88]	; (800556c <TIM_OC1_SetConfig+0x108>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d111      	bne.n	800553a <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800551c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005524:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	695b      	ldr	r3, [r3, #20]
 800552a:	693a      	ldr	r2, [r7, #16]
 800552c:	4313      	orrs	r3, r2
 800552e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	699b      	ldr	r3, [r3, #24]
 8005534:	693a      	ldr	r2, [r7, #16]
 8005536:	4313      	orrs	r3, r2
 8005538:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	693a      	ldr	r2, [r7, #16]
 800553e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	68fa      	ldr	r2, [r7, #12]
 8005544:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	685a      	ldr	r2, [r3, #4]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	697a      	ldr	r2, [r7, #20]
 8005552:	621a      	str	r2, [r3, #32]
}
 8005554:	bf00      	nop
 8005556:	371c      	adds	r7, #28
 8005558:	46bd      	mov	sp, r7
 800555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555e:	4770      	bx	lr
 8005560:	40012c00 	.word	0x40012c00
 8005564:	40014000 	.word	0x40014000
 8005568:	40014400 	.word	0x40014400
 800556c:	40014800 	.word	0x40014800

08005570 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005570:	b480      	push	{r7}
 8005572:	b087      	sub	sp, #28
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
 8005578:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6a1b      	ldr	r3, [r3, #32]
 800557e:	f023 0210 	bic.w	r2, r3, #16
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6a1b      	ldr	r3, [r3, #32]
 800558a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	699b      	ldr	r3, [r3, #24]
 8005596:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800559e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	021b      	lsls	r3, r3, #8
 80055b2:	68fa      	ldr	r2, [r7, #12]
 80055b4:	4313      	orrs	r3, r2
 80055b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	f023 0320 	bic.w	r3, r3, #32
 80055be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	011b      	lsls	r3, r3, #4
 80055c6:	697a      	ldr	r2, [r7, #20]
 80055c8:	4313      	orrs	r3, r2
 80055ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	4a24      	ldr	r2, [pc, #144]	; (8005660 <TIM_OC2_SetConfig+0xf0>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d10d      	bne.n	80055f0 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	68db      	ldr	r3, [r3, #12]
 80055e0:	011b      	lsls	r3, r3, #4
 80055e2:	697a      	ldr	r2, [r7, #20]
 80055e4:	4313      	orrs	r3, r2
 80055e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055ee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	4a1b      	ldr	r2, [pc, #108]	; (8005660 <TIM_OC2_SetConfig+0xf0>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d00b      	beq.n	8005610 <TIM_OC2_SetConfig+0xa0>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	4a1a      	ldr	r2, [pc, #104]	; (8005664 <TIM_OC2_SetConfig+0xf4>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d007      	beq.n	8005610 <TIM_OC2_SetConfig+0xa0>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	4a19      	ldr	r2, [pc, #100]	; (8005668 <TIM_OC2_SetConfig+0xf8>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d003      	beq.n	8005610 <TIM_OC2_SetConfig+0xa0>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	4a18      	ldr	r2, [pc, #96]	; (800566c <TIM_OC2_SetConfig+0xfc>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d113      	bne.n	8005638 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005616:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800561e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	695b      	ldr	r3, [r3, #20]
 8005624:	009b      	lsls	r3, r3, #2
 8005626:	693a      	ldr	r2, [r7, #16]
 8005628:	4313      	orrs	r3, r2
 800562a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	699b      	ldr	r3, [r3, #24]
 8005630:	009b      	lsls	r3, r3, #2
 8005632:	693a      	ldr	r2, [r7, #16]
 8005634:	4313      	orrs	r3, r2
 8005636:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	693a      	ldr	r2, [r7, #16]
 800563c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	68fa      	ldr	r2, [r7, #12]
 8005642:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	685a      	ldr	r2, [r3, #4]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	697a      	ldr	r2, [r7, #20]
 8005650:	621a      	str	r2, [r3, #32]
}
 8005652:	bf00      	nop
 8005654:	371c      	adds	r7, #28
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr
 800565e:	bf00      	nop
 8005660:	40012c00 	.word	0x40012c00
 8005664:	40014000 	.word	0x40014000
 8005668:	40014400 	.word	0x40014400
 800566c:	40014800 	.word	0x40014800

08005670 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005670:	b480      	push	{r7}
 8005672:	b087      	sub	sp, #28
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6a1b      	ldr	r3, [r3, #32]
 800567e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6a1b      	ldr	r3, [r3, #32]
 800568a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	69db      	ldr	r3, [r3, #28]
 8005696:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800569e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f023 0303 	bic.w	r3, r3, #3
 80056aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	68fa      	ldr	r2, [r7, #12]
 80056b2:	4313      	orrs	r3, r2
 80056b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80056bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	021b      	lsls	r3, r3, #8
 80056c4:	697a      	ldr	r2, [r7, #20]
 80056c6:	4313      	orrs	r3, r2
 80056c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	4a23      	ldr	r2, [pc, #140]	; (800575c <TIM_OC3_SetConfig+0xec>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d10d      	bne.n	80056ee <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80056d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	68db      	ldr	r3, [r3, #12]
 80056de:	021b      	lsls	r3, r3, #8
 80056e0:	697a      	ldr	r2, [r7, #20]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80056ec:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4a1a      	ldr	r2, [pc, #104]	; (800575c <TIM_OC3_SetConfig+0xec>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d00b      	beq.n	800570e <TIM_OC3_SetConfig+0x9e>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4a19      	ldr	r2, [pc, #100]	; (8005760 <TIM_OC3_SetConfig+0xf0>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d007      	beq.n	800570e <TIM_OC3_SetConfig+0x9e>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4a18      	ldr	r2, [pc, #96]	; (8005764 <TIM_OC3_SetConfig+0xf4>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d003      	beq.n	800570e <TIM_OC3_SetConfig+0x9e>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4a17      	ldr	r2, [pc, #92]	; (8005768 <TIM_OC3_SetConfig+0xf8>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d113      	bne.n	8005736 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005714:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800571c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	695b      	ldr	r3, [r3, #20]
 8005722:	011b      	lsls	r3, r3, #4
 8005724:	693a      	ldr	r2, [r7, #16]
 8005726:	4313      	orrs	r3, r2
 8005728:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	699b      	ldr	r3, [r3, #24]
 800572e:	011b      	lsls	r3, r3, #4
 8005730:	693a      	ldr	r2, [r7, #16]
 8005732:	4313      	orrs	r3, r2
 8005734:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	693a      	ldr	r2, [r7, #16]
 800573a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	68fa      	ldr	r2, [r7, #12]
 8005740:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	685a      	ldr	r2, [r3, #4]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	697a      	ldr	r2, [r7, #20]
 800574e:	621a      	str	r2, [r3, #32]
}
 8005750:	bf00      	nop
 8005752:	371c      	adds	r7, #28
 8005754:	46bd      	mov	sp, r7
 8005756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575a:	4770      	bx	lr
 800575c:	40012c00 	.word	0x40012c00
 8005760:	40014000 	.word	0x40014000
 8005764:	40014400 	.word	0x40014400
 8005768:	40014800 	.word	0x40014800

0800576c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800576c:	b480      	push	{r7}
 800576e:	b087      	sub	sp, #28
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
 8005774:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6a1b      	ldr	r3, [r3, #32]
 800577a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6a1b      	ldr	r3, [r3, #32]
 8005786:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	69db      	ldr	r3, [r3, #28]
 8005792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800579a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800579e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	021b      	lsls	r3, r3, #8
 80057ae:	68fa      	ldr	r2, [r7, #12]
 80057b0:	4313      	orrs	r3, r2
 80057b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80057ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	031b      	lsls	r3, r3, #12
 80057c2:	693a      	ldr	r2, [r7, #16]
 80057c4:	4313      	orrs	r3, r2
 80057c6:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	4a16      	ldr	r2, [pc, #88]	; (8005824 <TIM_OC4_SetConfig+0xb8>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d00b      	beq.n	80057e8 <TIM_OC4_SetConfig+0x7c>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	4a15      	ldr	r2, [pc, #84]	; (8005828 <TIM_OC4_SetConfig+0xbc>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d007      	beq.n	80057e8 <TIM_OC4_SetConfig+0x7c>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	4a14      	ldr	r2, [pc, #80]	; (800582c <TIM_OC4_SetConfig+0xc0>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d003      	beq.n	80057e8 <TIM_OC4_SetConfig+0x7c>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	4a13      	ldr	r2, [pc, #76]	; (8005830 <TIM_OC4_SetConfig+0xc4>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d109      	bne.n	80057fc <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80057ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	695b      	ldr	r3, [r3, #20]
 80057f4:	019b      	lsls	r3, r3, #6
 80057f6:	697a      	ldr	r2, [r7, #20]
 80057f8:	4313      	orrs	r3, r2
 80057fa:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	697a      	ldr	r2, [r7, #20]
 8005800:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	68fa      	ldr	r2, [r7, #12]
 8005806:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	685a      	ldr	r2, [r3, #4]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	693a      	ldr	r2, [r7, #16]
 8005814:	621a      	str	r2, [r3, #32]
}
 8005816:	bf00      	nop
 8005818:	371c      	adds	r7, #28
 800581a:	46bd      	mov	sp, r7
 800581c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005820:	4770      	bx	lr
 8005822:	bf00      	nop
 8005824:	40012c00 	.word	0x40012c00
 8005828:	40014000 	.word	0x40014000
 800582c:	40014400 	.word	0x40014400
 8005830:	40014800 	.word	0x40014800

08005834 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005834:	b480      	push	{r7}
 8005836:	b087      	sub	sp, #28
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6a1b      	ldr	r3, [r3, #32]
 8005842:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6a1b      	ldr	r3, [r3, #32]
 800584e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800585a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005862:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005866:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	68fa      	ldr	r2, [r7, #12]
 800586e:	4313      	orrs	r3, r2
 8005870:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005878:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	041b      	lsls	r3, r3, #16
 8005880:	693a      	ldr	r2, [r7, #16]
 8005882:	4313      	orrs	r3, r2
 8005884:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	4a15      	ldr	r2, [pc, #84]	; (80058e0 <TIM_OC5_SetConfig+0xac>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d00b      	beq.n	80058a6 <TIM_OC5_SetConfig+0x72>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	4a14      	ldr	r2, [pc, #80]	; (80058e4 <TIM_OC5_SetConfig+0xb0>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d007      	beq.n	80058a6 <TIM_OC5_SetConfig+0x72>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	4a13      	ldr	r2, [pc, #76]	; (80058e8 <TIM_OC5_SetConfig+0xb4>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d003      	beq.n	80058a6 <TIM_OC5_SetConfig+0x72>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	4a12      	ldr	r2, [pc, #72]	; (80058ec <TIM_OC5_SetConfig+0xb8>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d109      	bne.n	80058ba <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058ac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	695b      	ldr	r3, [r3, #20]
 80058b2:	021b      	lsls	r3, r3, #8
 80058b4:	697a      	ldr	r2, [r7, #20]
 80058b6:	4313      	orrs	r3, r2
 80058b8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	697a      	ldr	r2, [r7, #20]
 80058be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	68fa      	ldr	r2, [r7, #12]
 80058c4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	685a      	ldr	r2, [r3, #4]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	693a      	ldr	r2, [r7, #16]
 80058d2:	621a      	str	r2, [r3, #32]
}
 80058d4:	bf00      	nop
 80058d6:	371c      	adds	r7, #28
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr
 80058e0:	40012c00 	.word	0x40012c00
 80058e4:	40014000 	.word	0x40014000
 80058e8:	40014400 	.word	0x40014400
 80058ec:	40014800 	.word	0x40014800

080058f0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b087      	sub	sp, #28
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
 80058f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6a1b      	ldr	r3, [r3, #32]
 80058fe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6a1b      	ldr	r3, [r3, #32]
 800590a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005916:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800591e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005922:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	021b      	lsls	r3, r3, #8
 800592a:	68fa      	ldr	r2, [r7, #12]
 800592c:	4313      	orrs	r3, r2
 800592e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005936:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	051b      	lsls	r3, r3, #20
 800593e:	693a      	ldr	r2, [r7, #16]
 8005940:	4313      	orrs	r3, r2
 8005942:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	4a16      	ldr	r2, [pc, #88]	; (80059a0 <TIM_OC6_SetConfig+0xb0>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d00b      	beq.n	8005964 <TIM_OC6_SetConfig+0x74>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	4a15      	ldr	r2, [pc, #84]	; (80059a4 <TIM_OC6_SetConfig+0xb4>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d007      	beq.n	8005964 <TIM_OC6_SetConfig+0x74>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	4a14      	ldr	r2, [pc, #80]	; (80059a8 <TIM_OC6_SetConfig+0xb8>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d003      	beq.n	8005964 <TIM_OC6_SetConfig+0x74>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	4a13      	ldr	r2, [pc, #76]	; (80059ac <TIM_OC6_SetConfig+0xbc>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d109      	bne.n	8005978 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800596a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	695b      	ldr	r3, [r3, #20]
 8005970:	029b      	lsls	r3, r3, #10
 8005972:	697a      	ldr	r2, [r7, #20]
 8005974:	4313      	orrs	r3, r2
 8005976:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	697a      	ldr	r2, [r7, #20]
 800597c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	68fa      	ldr	r2, [r7, #12]
 8005982:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	685a      	ldr	r2, [r3, #4]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	693a      	ldr	r2, [r7, #16]
 8005990:	621a      	str	r2, [r3, #32]
}
 8005992:	bf00      	nop
 8005994:	371c      	adds	r7, #28
 8005996:	46bd      	mov	sp, r7
 8005998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599c:	4770      	bx	lr
 800599e:	bf00      	nop
 80059a0:	40012c00 	.word	0x40012c00
 80059a4:	40014000 	.word	0x40014000
 80059a8:	40014400 	.word	0x40014400
 80059ac:	40014800 	.word	0x40014800

080059b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b087      	sub	sp, #28
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	60f8      	str	r0, [r7, #12]
 80059b8:	60b9      	str	r1, [r7, #8]
 80059ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	6a1b      	ldr	r3, [r3, #32]
 80059c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	6a1b      	ldr	r3, [r3, #32]
 80059c6:	f023 0201 	bic.w	r2, r3, #1
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	699b      	ldr	r3, [r3, #24]
 80059d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80059da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	011b      	lsls	r3, r3, #4
 80059e0:	693a      	ldr	r2, [r7, #16]
 80059e2:	4313      	orrs	r3, r2
 80059e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	f023 030a 	bic.w	r3, r3, #10
 80059ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80059ee:	697a      	ldr	r2, [r7, #20]
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	4313      	orrs	r3, r2
 80059f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	693a      	ldr	r2, [r7, #16]
 80059fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	697a      	ldr	r2, [r7, #20]
 8005a00:	621a      	str	r2, [r3, #32]
}
 8005a02:	bf00      	nop
 8005a04:	371c      	adds	r7, #28
 8005a06:	46bd      	mov	sp, r7
 8005a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0c:	4770      	bx	lr

08005a0e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a0e:	b480      	push	{r7}
 8005a10:	b087      	sub	sp, #28
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	60f8      	str	r0, [r7, #12]
 8005a16:	60b9      	str	r1, [r7, #8]
 8005a18:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	6a1b      	ldr	r3, [r3, #32]
 8005a1e:	f023 0210 	bic.w	r2, r3, #16
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	699b      	ldr	r3, [r3, #24]
 8005a2a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	6a1b      	ldr	r3, [r3, #32]
 8005a30:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005a38:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	031b      	lsls	r3, r3, #12
 8005a3e:	697a      	ldr	r2, [r7, #20]
 8005a40:	4313      	orrs	r3, r2
 8005a42:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005a4a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	011b      	lsls	r3, r3, #4
 8005a50:	693a      	ldr	r2, [r7, #16]
 8005a52:	4313      	orrs	r3, r2
 8005a54:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	697a      	ldr	r2, [r7, #20]
 8005a5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	693a      	ldr	r2, [r7, #16]
 8005a60:	621a      	str	r2, [r3, #32]
}
 8005a62:	bf00      	nop
 8005a64:	371c      	adds	r7, #28
 8005a66:	46bd      	mov	sp, r7
 8005a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6c:	4770      	bx	lr

08005a6e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a6e:	b480      	push	{r7}
 8005a70:	b085      	sub	sp, #20
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	6078      	str	r0, [r7, #4]
 8005a76:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a84:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a86:	683a      	ldr	r2, [r7, #0]
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	f043 0307 	orr.w	r3, r3, #7
 8005a90:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	68fa      	ldr	r2, [r7, #12]
 8005a96:	609a      	str	r2, [r3, #8]
}
 8005a98:	bf00      	nop
 8005a9a:	3714      	adds	r7, #20
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr

08005aa4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b087      	sub	sp, #28
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	60f8      	str	r0, [r7, #12]
 8005aac:	60b9      	str	r1, [r7, #8]
 8005aae:	607a      	str	r2, [r7, #4]
 8005ab0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005abe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	021a      	lsls	r2, r3, #8
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	431a      	orrs	r2, r3
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	4313      	orrs	r3, r2
 8005acc:	697a      	ldr	r2, [r7, #20]
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	697a      	ldr	r2, [r7, #20]
 8005ad6:	609a      	str	r2, [r3, #8]
}
 8005ad8:	bf00      	nop
 8005ada:	371c      	adds	r7, #28
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	4770      	bx	lr

08005ae4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b087      	sub	sp, #28
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	60f8      	str	r0, [r7, #12]
 8005aec:	60b9      	str	r1, [r7, #8]
 8005aee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	f003 031f 	and.w	r3, r3, #31
 8005af6:	2201      	movs	r2, #1
 8005af8:	fa02 f303 	lsl.w	r3, r2, r3
 8005afc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	6a1a      	ldr	r2, [r3, #32]
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	43db      	mvns	r3, r3
 8005b06:	401a      	ands	r2, r3
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	6a1a      	ldr	r2, [r3, #32]
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	f003 031f 	and.w	r3, r3, #31
 8005b16:	6879      	ldr	r1, [r7, #4]
 8005b18:	fa01 f303 	lsl.w	r3, r1, r3
 8005b1c:	431a      	orrs	r2, r3
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	621a      	str	r2, [r3, #32]
}
 8005b22:	bf00      	nop
 8005b24:	371c      	adds	r7, #28
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr
	...

08005b30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b085      	sub	sp, #20
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
 8005b38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d101      	bne.n	8005b48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b44:	2302      	movs	r3, #2
 8005b46:	e054      	b.n	8005bf2 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2202      	movs	r2, #2
 8005b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	689b      	ldr	r3, [r3, #8]
 8005b66:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a24      	ldr	r2, [pc, #144]	; (8005c00 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d108      	bne.n	8005b84 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005b78:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	68fa      	ldr	r2, [r7, #12]
 8005b80:	4313      	orrs	r3, r2
 8005b82:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	68fa      	ldr	r2, [r7, #12]
 8005b92:	4313      	orrs	r3, r2
 8005b94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	68fa      	ldr	r2, [r7, #12]
 8005b9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a17      	ldr	r2, [pc, #92]	; (8005c00 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d00e      	beq.n	8005bc6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bb0:	d009      	beq.n	8005bc6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a13      	ldr	r2, [pc, #76]	; (8005c04 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d004      	beq.n	8005bc6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a11      	ldr	r2, [pc, #68]	; (8005c08 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d10c      	bne.n	8005be0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005bcc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	689b      	ldr	r3, [r3, #8]
 8005bd2:	68ba      	ldr	r2, [r7, #8]
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	68ba      	ldr	r2, [r7, #8]
 8005bde:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2201      	movs	r2, #1
 8005be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2200      	movs	r2, #0
 8005bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005bf0:	2300      	movs	r3, #0
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3714      	adds	r7, #20
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr
 8005bfe:	bf00      	nop
 8005c00:	40012c00 	.word	0x40012c00
 8005c04:	40000400 	.word	0x40000400
 8005c08:	40014000 	.word	0x40014000

08005c0c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b085      	sub	sp, #20
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
 8005c14:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005c16:	2300      	movs	r3, #0
 8005c18:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d101      	bne.n	8005c28 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005c24:	2302      	movs	r3, #2
 8005c26:	e060      	b.n	8005cea <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	68db      	ldr	r3, [r3, #12]
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4313      	orrs	r3, r2
 8005c66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	691b      	ldr	r3, [r3, #16]
 8005c72:	4313      	orrs	r3, r2
 8005c74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	695b      	ldr	r3, [r3, #20]
 8005c80:	4313      	orrs	r3, r2
 8005c82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	699b      	ldr	r3, [r3, #24]
 8005c9c:	041b      	lsls	r3, r3, #16
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a14      	ldr	r2, [pc, #80]	; (8005cf8 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d115      	bne.n	8005cd8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb6:	051b      	lsls	r3, r3, #20
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	69db      	ldr	r3, [r3, #28]
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	6a1b      	ldr	r3, [r3, #32]
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	68fa      	ldr	r2, [r7, #12]
 8005cde:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ce8:	2300      	movs	r3, #0
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3714      	adds	r7, #20
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf4:	4770      	bx	lr
 8005cf6:	bf00      	nop
 8005cf8:	40012c00 	.word	0x40012c00

08005cfc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b082      	sub	sp, #8
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d101      	bne.n	8005d0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e040      	b.n	8005d90 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d106      	bne.n	8005d24 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f7fb ffc0 	bl	8001ca4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2224      	movs	r2, #36	; 0x24
 8005d28:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	681a      	ldr	r2, [r3, #0]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f022 0201 	bic.w	r2, r2, #1
 8005d38:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	f000 f82c 	bl	8005d98 <UART_SetConfig>
 8005d40:	4603      	mov	r3, r0
 8005d42:	2b01      	cmp	r3, #1
 8005d44:	d101      	bne.n	8005d4a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005d46:	2301      	movs	r3, #1
 8005d48:	e022      	b.n	8005d90 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d002      	beq.n	8005d58 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f000 f956 	bl	8006004 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	685a      	ldr	r2, [r3, #4]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005d66:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	689a      	ldr	r2, [r3, #8]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d76:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	681a      	ldr	r2, [r3, #0]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f042 0201 	orr.w	r2, r2, #1
 8005d86:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f000 f9dd 	bl	8006148 <UART_CheckIdleState>
 8005d8e:	4603      	mov	r3, r0
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	3708      	adds	r7, #8
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd80      	pop	{r7, pc}

08005d98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b088      	sub	sp, #32
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005da0:	2300      	movs	r3, #0
 8005da2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	689a      	ldr	r2, [r3, #8]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	691b      	ldr	r3, [r3, #16]
 8005dac:	431a      	orrs	r2, r3
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	695b      	ldr	r3, [r3, #20]
 8005db2:	431a      	orrs	r2, r3
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	69db      	ldr	r3, [r3, #28]
 8005db8:	4313      	orrs	r3, r2
 8005dba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	4b8a      	ldr	r3, [pc, #552]	; (8005fec <UART_SetConfig+0x254>)
 8005dc4:	4013      	ands	r3, r2
 8005dc6:	687a      	ldr	r2, [r7, #4]
 8005dc8:	6812      	ldr	r2, [r2, #0]
 8005dca:	6979      	ldr	r1, [r7, #20]
 8005dcc:	430b      	orrs	r3, r1
 8005dce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	68da      	ldr	r2, [r3, #12]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	430a      	orrs	r2, r1
 8005de4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	699b      	ldr	r3, [r3, #24]
 8005dea:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6a1b      	ldr	r3, [r3, #32]
 8005df0:	697a      	ldr	r2, [r7, #20]
 8005df2:	4313      	orrs	r3, r2
 8005df4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	689b      	ldr	r3, [r3, #8]
 8005dfc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	697a      	ldr	r2, [r7, #20]
 8005e06:	430a      	orrs	r2, r1
 8005e08:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a78      	ldr	r2, [pc, #480]	; (8005ff0 <UART_SetConfig+0x258>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d120      	bne.n	8005e56 <UART_SetConfig+0xbe>
 8005e14:	4b77      	ldr	r3, [pc, #476]	; (8005ff4 <UART_SetConfig+0x25c>)
 8005e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e18:	f003 0303 	and.w	r3, r3, #3
 8005e1c:	2b03      	cmp	r3, #3
 8005e1e:	d817      	bhi.n	8005e50 <UART_SetConfig+0xb8>
 8005e20:	a201      	add	r2, pc, #4	; (adr r2, 8005e28 <UART_SetConfig+0x90>)
 8005e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e26:	bf00      	nop
 8005e28:	08005e39 	.word	0x08005e39
 8005e2c:	08005e45 	.word	0x08005e45
 8005e30:	08005e4b 	.word	0x08005e4b
 8005e34:	08005e3f 	.word	0x08005e3f
 8005e38:	2300      	movs	r3, #0
 8005e3a:	77fb      	strb	r3, [r7, #31]
 8005e3c:	e01d      	b.n	8005e7a <UART_SetConfig+0xe2>
 8005e3e:	2302      	movs	r3, #2
 8005e40:	77fb      	strb	r3, [r7, #31]
 8005e42:	e01a      	b.n	8005e7a <UART_SetConfig+0xe2>
 8005e44:	2304      	movs	r3, #4
 8005e46:	77fb      	strb	r3, [r7, #31]
 8005e48:	e017      	b.n	8005e7a <UART_SetConfig+0xe2>
 8005e4a:	2308      	movs	r3, #8
 8005e4c:	77fb      	strb	r3, [r7, #31]
 8005e4e:	e014      	b.n	8005e7a <UART_SetConfig+0xe2>
 8005e50:	2310      	movs	r3, #16
 8005e52:	77fb      	strb	r3, [r7, #31]
 8005e54:	e011      	b.n	8005e7a <UART_SetConfig+0xe2>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a67      	ldr	r2, [pc, #412]	; (8005ff8 <UART_SetConfig+0x260>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d102      	bne.n	8005e66 <UART_SetConfig+0xce>
 8005e60:	2300      	movs	r3, #0
 8005e62:	77fb      	strb	r3, [r7, #31]
 8005e64:	e009      	b.n	8005e7a <UART_SetConfig+0xe2>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a64      	ldr	r2, [pc, #400]	; (8005ffc <UART_SetConfig+0x264>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d102      	bne.n	8005e76 <UART_SetConfig+0xde>
 8005e70:	2300      	movs	r3, #0
 8005e72:	77fb      	strb	r3, [r7, #31]
 8005e74:	e001      	b.n	8005e7a <UART_SetConfig+0xe2>
 8005e76:	2310      	movs	r3, #16
 8005e78:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	69db      	ldr	r3, [r3, #28]
 8005e7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e82:	d15b      	bne.n	8005f3c <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8005e84:	7ffb      	ldrb	r3, [r7, #31]
 8005e86:	2b08      	cmp	r3, #8
 8005e88:	d827      	bhi.n	8005eda <UART_SetConfig+0x142>
 8005e8a:	a201      	add	r2, pc, #4	; (adr r2, 8005e90 <UART_SetConfig+0xf8>)
 8005e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e90:	08005eb5 	.word	0x08005eb5
 8005e94:	08005ebd 	.word	0x08005ebd
 8005e98:	08005ec5 	.word	0x08005ec5
 8005e9c:	08005edb 	.word	0x08005edb
 8005ea0:	08005ecb 	.word	0x08005ecb
 8005ea4:	08005edb 	.word	0x08005edb
 8005ea8:	08005edb 	.word	0x08005edb
 8005eac:	08005edb 	.word	0x08005edb
 8005eb0:	08005ed3 	.word	0x08005ed3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005eb4:	f7fe fd1c 	bl	80048f0 <HAL_RCC_GetPCLK1Freq>
 8005eb8:	61b8      	str	r0, [r7, #24]
        break;
 8005eba:	e013      	b.n	8005ee4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ebc:	f7fe fd3a 	bl	8004934 <HAL_RCC_GetPCLK2Freq>
 8005ec0:	61b8      	str	r0, [r7, #24]
        break;
 8005ec2:	e00f      	b.n	8005ee4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ec4:	4b4e      	ldr	r3, [pc, #312]	; (8006000 <UART_SetConfig+0x268>)
 8005ec6:	61bb      	str	r3, [r7, #24]
        break;
 8005ec8:	e00c      	b.n	8005ee4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005eca:	f7fe fc9b 	bl	8004804 <HAL_RCC_GetSysClockFreq>
 8005ece:	61b8      	str	r0, [r7, #24]
        break;
 8005ed0:	e008      	b.n	8005ee4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ed2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ed6:	61bb      	str	r3, [r7, #24]
        break;
 8005ed8:	e004      	b.n	8005ee4 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8005eda:	2300      	movs	r3, #0
 8005edc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	77bb      	strb	r3, [r7, #30]
        break;
 8005ee2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005ee4:	69bb      	ldr	r3, [r7, #24]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d074      	beq.n	8005fd4 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005eea:	69bb      	ldr	r3, [r7, #24]
 8005eec:	005a      	lsls	r2, r3, #1
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	085b      	lsrs	r3, r3, #1
 8005ef4:	441a      	add	r2, r3
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	2b0f      	cmp	r3, #15
 8005f06:	d916      	bls.n	8005f36 <UART_SetConfig+0x19e>
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f0e:	d212      	bcs.n	8005f36 <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	b29b      	uxth	r3, r3
 8005f14:	f023 030f 	bic.w	r3, r3, #15
 8005f18:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	085b      	lsrs	r3, r3, #1
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	f003 0307 	and.w	r3, r3, #7
 8005f24:	b29a      	uxth	r2, r3
 8005f26:	89fb      	ldrh	r3, [r7, #14]
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	89fa      	ldrh	r2, [r7, #14]
 8005f32:	60da      	str	r2, [r3, #12]
 8005f34:	e04e      	b.n	8005fd4 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005f36:	2301      	movs	r3, #1
 8005f38:	77bb      	strb	r3, [r7, #30]
 8005f3a:	e04b      	b.n	8005fd4 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005f3c:	7ffb      	ldrb	r3, [r7, #31]
 8005f3e:	2b08      	cmp	r3, #8
 8005f40:	d827      	bhi.n	8005f92 <UART_SetConfig+0x1fa>
 8005f42:	a201      	add	r2, pc, #4	; (adr r2, 8005f48 <UART_SetConfig+0x1b0>)
 8005f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f48:	08005f6d 	.word	0x08005f6d
 8005f4c:	08005f75 	.word	0x08005f75
 8005f50:	08005f7d 	.word	0x08005f7d
 8005f54:	08005f93 	.word	0x08005f93
 8005f58:	08005f83 	.word	0x08005f83
 8005f5c:	08005f93 	.word	0x08005f93
 8005f60:	08005f93 	.word	0x08005f93
 8005f64:	08005f93 	.word	0x08005f93
 8005f68:	08005f8b 	.word	0x08005f8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f6c:	f7fe fcc0 	bl	80048f0 <HAL_RCC_GetPCLK1Freq>
 8005f70:	61b8      	str	r0, [r7, #24]
        break;
 8005f72:	e013      	b.n	8005f9c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f74:	f7fe fcde 	bl	8004934 <HAL_RCC_GetPCLK2Freq>
 8005f78:	61b8      	str	r0, [r7, #24]
        break;
 8005f7a:	e00f      	b.n	8005f9c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f7c:	4b20      	ldr	r3, [pc, #128]	; (8006000 <UART_SetConfig+0x268>)
 8005f7e:	61bb      	str	r3, [r7, #24]
        break;
 8005f80:	e00c      	b.n	8005f9c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f82:	f7fe fc3f 	bl	8004804 <HAL_RCC_GetSysClockFreq>
 8005f86:	61b8      	str	r0, [r7, #24]
        break;
 8005f88:	e008      	b.n	8005f9c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f8e:	61bb      	str	r3, [r7, #24]
        break;
 8005f90:	e004      	b.n	8005f9c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8005f92:	2300      	movs	r3, #0
 8005f94:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005f96:	2301      	movs	r3, #1
 8005f98:	77bb      	strb	r3, [r7, #30]
        break;
 8005f9a:	bf00      	nop
    }

    if (pclk != 0U)
 8005f9c:	69bb      	ldr	r3, [r7, #24]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d018      	beq.n	8005fd4 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	085a      	lsrs	r2, r3, #1
 8005fa8:	69bb      	ldr	r3, [r7, #24]
 8005faa:	441a      	add	r2, r3
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fb4:	b29b      	uxth	r3, r3
 8005fb6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	2b0f      	cmp	r3, #15
 8005fbc:	d908      	bls.n	8005fd0 <UART_SetConfig+0x238>
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fc4:	d204      	bcs.n	8005fd0 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	693a      	ldr	r2, [r7, #16]
 8005fcc:	60da      	str	r2, [r3, #12]
 8005fce:	e001      	b.n	8005fd4 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005fe0:	7fbb      	ldrb	r3, [r7, #30]
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3720      	adds	r7, #32
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}
 8005fea:	bf00      	nop
 8005fec:	efff69f3 	.word	0xefff69f3
 8005ff0:	40013800 	.word	0x40013800
 8005ff4:	40021000 	.word	0x40021000
 8005ff8:	40004400 	.word	0x40004400
 8005ffc:	40004800 	.word	0x40004800
 8006000:	007a1200 	.word	0x007a1200

08006004 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006004:	b480      	push	{r7}
 8006006:	b083      	sub	sp, #12
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006010:	f003 0301 	and.w	r3, r3, #1
 8006014:	2b00      	cmp	r3, #0
 8006016:	d00a      	beq.n	800602e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	430a      	orrs	r2, r1
 800602c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006032:	f003 0302 	and.w	r3, r3, #2
 8006036:	2b00      	cmp	r3, #0
 8006038:	d00a      	beq.n	8006050 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	430a      	orrs	r2, r1
 800604e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006054:	f003 0304 	and.w	r3, r3, #4
 8006058:	2b00      	cmp	r3, #0
 800605a:	d00a      	beq.n	8006072 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	430a      	orrs	r2, r1
 8006070:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006076:	f003 0308 	and.w	r3, r3, #8
 800607a:	2b00      	cmp	r3, #0
 800607c:	d00a      	beq.n	8006094 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	430a      	orrs	r2, r1
 8006092:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006098:	f003 0310 	and.w	r3, r3, #16
 800609c:	2b00      	cmp	r3, #0
 800609e:	d00a      	beq.n	80060b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	689b      	ldr	r3, [r3, #8]
 80060a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	430a      	orrs	r2, r1
 80060b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ba:	f003 0320 	and.w	r3, r3, #32
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d00a      	beq.n	80060d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	689b      	ldr	r3, [r3, #8]
 80060c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	430a      	orrs	r2, r1
 80060d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d01a      	beq.n	800611a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	430a      	orrs	r2, r1
 80060f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006102:	d10a      	bne.n	800611a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	430a      	orrs	r2, r1
 8006118:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800611e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006122:	2b00      	cmp	r3, #0
 8006124:	d00a      	beq.n	800613c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	430a      	orrs	r2, r1
 800613a:	605a      	str	r2, [r3, #4]
  }
}
 800613c:	bf00      	nop
 800613e:	370c      	adds	r7, #12
 8006140:	46bd      	mov	sp, r7
 8006142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006146:	4770      	bx	lr

08006148 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b086      	sub	sp, #24
 800614c:	af02      	add	r7, sp, #8
 800614e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2200      	movs	r2, #0
 8006154:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006158:	f7fb ff6e 	bl	8002038 <HAL_GetTick>
 800615c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f003 0308 	and.w	r3, r3, #8
 8006168:	2b08      	cmp	r3, #8
 800616a:	d10e      	bne.n	800618a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800616c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006170:	9300      	str	r3, [sp, #0]
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2200      	movs	r2, #0
 8006176:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f000 f82d 	bl	80061da <UART_WaitOnFlagUntilTimeout>
 8006180:	4603      	mov	r3, r0
 8006182:	2b00      	cmp	r3, #0
 8006184:	d001      	beq.n	800618a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006186:	2303      	movs	r3, #3
 8006188:	e023      	b.n	80061d2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f003 0304 	and.w	r3, r3, #4
 8006194:	2b04      	cmp	r3, #4
 8006196:	d10e      	bne.n	80061b6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006198:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800619c:	9300      	str	r3, [sp, #0]
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	2200      	movs	r2, #0
 80061a2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f000 f817 	bl	80061da <UART_WaitOnFlagUntilTimeout>
 80061ac:	4603      	mov	r3, r0
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d001      	beq.n	80061b6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80061b2:	2303      	movs	r3, #3
 80061b4:	e00d      	b.n	80061d2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2220      	movs	r2, #32
 80061ba:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2220      	movs	r2, #32
 80061c0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2200      	movs	r2, #0
 80061c6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2200      	movs	r2, #0
 80061cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80061d0:	2300      	movs	r3, #0
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3710      	adds	r7, #16
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}

080061da <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80061da:	b580      	push	{r7, lr}
 80061dc:	b09c      	sub	sp, #112	; 0x70
 80061de:	af00      	add	r7, sp, #0
 80061e0:	60f8      	str	r0, [r7, #12]
 80061e2:	60b9      	str	r1, [r7, #8]
 80061e4:	603b      	str	r3, [r7, #0]
 80061e6:	4613      	mov	r3, r2
 80061e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061ea:	e0a5      	b.n	8006338 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80061ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061f2:	f000 80a1 	beq.w	8006338 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061f6:	f7fb ff1f 	bl	8002038 <HAL_GetTick>
 80061fa:	4602      	mov	r2, r0
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	1ad3      	subs	r3, r2, r3
 8006200:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006202:	429a      	cmp	r2, r3
 8006204:	d302      	bcc.n	800620c <UART_WaitOnFlagUntilTimeout+0x32>
 8006206:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006208:	2b00      	cmp	r3, #0
 800620a:	d13e      	bne.n	800628a <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006212:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006214:	e853 3f00 	ldrex	r3, [r3]
 8006218:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800621a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800621c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006220:	667b      	str	r3, [r7, #100]	; 0x64
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	461a      	mov	r2, r3
 8006228:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800622a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800622c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800622e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006230:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006232:	e841 2300 	strex	r3, r2, [r1]
 8006236:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006238:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800623a:	2b00      	cmp	r3, #0
 800623c:	d1e6      	bne.n	800620c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	3308      	adds	r3, #8
 8006244:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006246:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006248:	e853 3f00 	ldrex	r3, [r3]
 800624c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800624e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006250:	f023 0301 	bic.w	r3, r3, #1
 8006254:	663b      	str	r3, [r7, #96]	; 0x60
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	3308      	adds	r3, #8
 800625c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800625e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006260:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006262:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006264:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006266:	e841 2300 	strex	r3, r2, [r1]
 800626a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800626c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800626e:	2b00      	cmp	r3, #0
 8006270:	d1e5      	bne.n	800623e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2220      	movs	r2, #32
 8006276:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2220      	movs	r2, #32
 800627c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2200      	movs	r2, #0
 8006282:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006286:	2303      	movs	r3, #3
 8006288:	e067      	b.n	800635a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f003 0304 	and.w	r3, r3, #4
 8006294:	2b00      	cmp	r3, #0
 8006296:	d04f      	beq.n	8006338 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	69db      	ldr	r3, [r3, #28]
 800629e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062a6:	d147      	bne.n	8006338 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80062b0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ba:	e853 3f00 	ldrex	r3, [r3]
 80062be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80062c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80062c6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	461a      	mov	r2, r3
 80062ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062d0:	637b      	str	r3, [r7, #52]	; 0x34
 80062d2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80062d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80062d8:	e841 2300 	strex	r3, r2, [r1]
 80062dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80062de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d1e6      	bne.n	80062b2 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	3308      	adds	r3, #8
 80062ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	e853 3f00 	ldrex	r3, [r3]
 80062f2:	613b      	str	r3, [r7, #16]
   return(result);
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	f023 0301 	bic.w	r3, r3, #1
 80062fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	3308      	adds	r3, #8
 8006302:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006304:	623a      	str	r2, [r7, #32]
 8006306:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006308:	69f9      	ldr	r1, [r7, #28]
 800630a:	6a3a      	ldr	r2, [r7, #32]
 800630c:	e841 2300 	strex	r3, r2, [r1]
 8006310:	61bb      	str	r3, [r7, #24]
   return(result);
 8006312:	69bb      	ldr	r3, [r7, #24]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d1e5      	bne.n	80062e4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2220      	movs	r2, #32
 800631c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2220      	movs	r2, #32
 8006322:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2220      	movs	r2, #32
 8006328:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	2200      	movs	r2, #0
 8006330:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006334:	2303      	movs	r3, #3
 8006336:	e010      	b.n	800635a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	69da      	ldr	r2, [r3, #28]
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	4013      	ands	r3, r2
 8006342:	68ba      	ldr	r2, [r7, #8]
 8006344:	429a      	cmp	r2, r3
 8006346:	bf0c      	ite	eq
 8006348:	2301      	moveq	r3, #1
 800634a:	2300      	movne	r3, #0
 800634c:	b2db      	uxtb	r3, r3
 800634e:	461a      	mov	r2, r3
 8006350:	79fb      	ldrb	r3, [r7, #7]
 8006352:	429a      	cmp	r2, r3
 8006354:	f43f af4a 	beq.w	80061ec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006358:	2300      	movs	r3, #0
}
 800635a:	4618      	mov	r0, r3
 800635c:	3770      	adds	r7, #112	; 0x70
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}
	...

08006364 <__errno>:
 8006364:	4b01      	ldr	r3, [pc, #4]	; (800636c <__errno+0x8>)
 8006366:	6818      	ldr	r0, [r3, #0]
 8006368:	4770      	bx	lr
 800636a:	bf00      	nop
 800636c:	2000000c 	.word	0x2000000c

08006370 <__libc_init_array>:
 8006370:	b570      	push	{r4, r5, r6, lr}
 8006372:	4d0d      	ldr	r5, [pc, #52]	; (80063a8 <__libc_init_array+0x38>)
 8006374:	4c0d      	ldr	r4, [pc, #52]	; (80063ac <__libc_init_array+0x3c>)
 8006376:	1b64      	subs	r4, r4, r5
 8006378:	10a4      	asrs	r4, r4, #2
 800637a:	2600      	movs	r6, #0
 800637c:	42a6      	cmp	r6, r4
 800637e:	d109      	bne.n	8006394 <__libc_init_array+0x24>
 8006380:	4d0b      	ldr	r5, [pc, #44]	; (80063b0 <__libc_init_array+0x40>)
 8006382:	4c0c      	ldr	r4, [pc, #48]	; (80063b4 <__libc_init_array+0x44>)
 8006384:	f005 f862 	bl	800b44c <_init>
 8006388:	1b64      	subs	r4, r4, r5
 800638a:	10a4      	asrs	r4, r4, #2
 800638c:	2600      	movs	r6, #0
 800638e:	42a6      	cmp	r6, r4
 8006390:	d105      	bne.n	800639e <__libc_init_array+0x2e>
 8006392:	bd70      	pop	{r4, r5, r6, pc}
 8006394:	f855 3b04 	ldr.w	r3, [r5], #4
 8006398:	4798      	blx	r3
 800639a:	3601      	adds	r6, #1
 800639c:	e7ee      	b.n	800637c <__libc_init_array+0xc>
 800639e:	f855 3b04 	ldr.w	r3, [r5], #4
 80063a2:	4798      	blx	r3
 80063a4:	3601      	adds	r6, #1
 80063a6:	e7f2      	b.n	800638e <__libc_init_array+0x1e>
 80063a8:	0800b964 	.word	0x0800b964
 80063ac:	0800b964 	.word	0x0800b964
 80063b0:	0800b964 	.word	0x0800b964
 80063b4:	0800b968 	.word	0x0800b968

080063b8 <memset>:
 80063b8:	4402      	add	r2, r0
 80063ba:	4603      	mov	r3, r0
 80063bc:	4293      	cmp	r3, r2
 80063be:	d100      	bne.n	80063c2 <memset+0xa>
 80063c0:	4770      	bx	lr
 80063c2:	f803 1b01 	strb.w	r1, [r3], #1
 80063c6:	e7f9      	b.n	80063bc <memset+0x4>

080063c8 <__cvt>:
 80063c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80063cc:	ec55 4b10 	vmov	r4, r5, d0
 80063d0:	2d00      	cmp	r5, #0
 80063d2:	460e      	mov	r6, r1
 80063d4:	4619      	mov	r1, r3
 80063d6:	462b      	mov	r3, r5
 80063d8:	bfbb      	ittet	lt
 80063da:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80063de:	461d      	movlt	r5, r3
 80063e0:	2300      	movge	r3, #0
 80063e2:	232d      	movlt	r3, #45	; 0x2d
 80063e4:	700b      	strb	r3, [r1, #0]
 80063e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80063e8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80063ec:	4691      	mov	r9, r2
 80063ee:	f023 0820 	bic.w	r8, r3, #32
 80063f2:	bfbc      	itt	lt
 80063f4:	4622      	movlt	r2, r4
 80063f6:	4614      	movlt	r4, r2
 80063f8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80063fc:	d005      	beq.n	800640a <__cvt+0x42>
 80063fe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006402:	d100      	bne.n	8006406 <__cvt+0x3e>
 8006404:	3601      	adds	r6, #1
 8006406:	2102      	movs	r1, #2
 8006408:	e000      	b.n	800640c <__cvt+0x44>
 800640a:	2103      	movs	r1, #3
 800640c:	ab03      	add	r3, sp, #12
 800640e:	9301      	str	r3, [sp, #4]
 8006410:	ab02      	add	r3, sp, #8
 8006412:	9300      	str	r3, [sp, #0]
 8006414:	ec45 4b10 	vmov	d0, r4, r5
 8006418:	4653      	mov	r3, sl
 800641a:	4632      	mov	r2, r6
 800641c:	f001 fdac 	bl	8007f78 <_dtoa_r>
 8006420:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006424:	4607      	mov	r7, r0
 8006426:	d102      	bne.n	800642e <__cvt+0x66>
 8006428:	f019 0f01 	tst.w	r9, #1
 800642c:	d022      	beq.n	8006474 <__cvt+0xac>
 800642e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006432:	eb07 0906 	add.w	r9, r7, r6
 8006436:	d110      	bne.n	800645a <__cvt+0x92>
 8006438:	783b      	ldrb	r3, [r7, #0]
 800643a:	2b30      	cmp	r3, #48	; 0x30
 800643c:	d10a      	bne.n	8006454 <__cvt+0x8c>
 800643e:	2200      	movs	r2, #0
 8006440:	2300      	movs	r3, #0
 8006442:	4620      	mov	r0, r4
 8006444:	4629      	mov	r1, r5
 8006446:	f7fa fb3f 	bl	8000ac8 <__aeabi_dcmpeq>
 800644a:	b918      	cbnz	r0, 8006454 <__cvt+0x8c>
 800644c:	f1c6 0601 	rsb	r6, r6, #1
 8006450:	f8ca 6000 	str.w	r6, [sl]
 8006454:	f8da 3000 	ldr.w	r3, [sl]
 8006458:	4499      	add	r9, r3
 800645a:	2200      	movs	r2, #0
 800645c:	2300      	movs	r3, #0
 800645e:	4620      	mov	r0, r4
 8006460:	4629      	mov	r1, r5
 8006462:	f7fa fb31 	bl	8000ac8 <__aeabi_dcmpeq>
 8006466:	b108      	cbz	r0, 800646c <__cvt+0xa4>
 8006468:	f8cd 900c 	str.w	r9, [sp, #12]
 800646c:	2230      	movs	r2, #48	; 0x30
 800646e:	9b03      	ldr	r3, [sp, #12]
 8006470:	454b      	cmp	r3, r9
 8006472:	d307      	bcc.n	8006484 <__cvt+0xbc>
 8006474:	9b03      	ldr	r3, [sp, #12]
 8006476:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006478:	1bdb      	subs	r3, r3, r7
 800647a:	4638      	mov	r0, r7
 800647c:	6013      	str	r3, [r2, #0]
 800647e:	b004      	add	sp, #16
 8006480:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006484:	1c59      	adds	r1, r3, #1
 8006486:	9103      	str	r1, [sp, #12]
 8006488:	701a      	strb	r2, [r3, #0]
 800648a:	e7f0      	b.n	800646e <__cvt+0xa6>

0800648c <__exponent>:
 800648c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800648e:	4603      	mov	r3, r0
 8006490:	2900      	cmp	r1, #0
 8006492:	bfb8      	it	lt
 8006494:	4249      	neglt	r1, r1
 8006496:	f803 2b02 	strb.w	r2, [r3], #2
 800649a:	bfb4      	ite	lt
 800649c:	222d      	movlt	r2, #45	; 0x2d
 800649e:	222b      	movge	r2, #43	; 0x2b
 80064a0:	2909      	cmp	r1, #9
 80064a2:	7042      	strb	r2, [r0, #1]
 80064a4:	dd2a      	ble.n	80064fc <__exponent+0x70>
 80064a6:	f10d 0407 	add.w	r4, sp, #7
 80064aa:	46a4      	mov	ip, r4
 80064ac:	270a      	movs	r7, #10
 80064ae:	46a6      	mov	lr, r4
 80064b0:	460a      	mov	r2, r1
 80064b2:	fb91 f6f7 	sdiv	r6, r1, r7
 80064b6:	fb07 1516 	mls	r5, r7, r6, r1
 80064ba:	3530      	adds	r5, #48	; 0x30
 80064bc:	2a63      	cmp	r2, #99	; 0x63
 80064be:	f104 34ff 	add.w	r4, r4, #4294967295
 80064c2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80064c6:	4631      	mov	r1, r6
 80064c8:	dcf1      	bgt.n	80064ae <__exponent+0x22>
 80064ca:	3130      	adds	r1, #48	; 0x30
 80064cc:	f1ae 0502 	sub.w	r5, lr, #2
 80064d0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80064d4:	1c44      	adds	r4, r0, #1
 80064d6:	4629      	mov	r1, r5
 80064d8:	4561      	cmp	r1, ip
 80064da:	d30a      	bcc.n	80064f2 <__exponent+0x66>
 80064dc:	f10d 0209 	add.w	r2, sp, #9
 80064e0:	eba2 020e 	sub.w	r2, r2, lr
 80064e4:	4565      	cmp	r5, ip
 80064e6:	bf88      	it	hi
 80064e8:	2200      	movhi	r2, #0
 80064ea:	4413      	add	r3, r2
 80064ec:	1a18      	subs	r0, r3, r0
 80064ee:	b003      	add	sp, #12
 80064f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80064f6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80064fa:	e7ed      	b.n	80064d8 <__exponent+0x4c>
 80064fc:	2330      	movs	r3, #48	; 0x30
 80064fe:	3130      	adds	r1, #48	; 0x30
 8006500:	7083      	strb	r3, [r0, #2]
 8006502:	70c1      	strb	r1, [r0, #3]
 8006504:	1d03      	adds	r3, r0, #4
 8006506:	e7f1      	b.n	80064ec <__exponent+0x60>

08006508 <_printf_float>:
 8006508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800650c:	ed2d 8b02 	vpush	{d8}
 8006510:	b08d      	sub	sp, #52	; 0x34
 8006512:	460c      	mov	r4, r1
 8006514:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006518:	4616      	mov	r6, r2
 800651a:	461f      	mov	r7, r3
 800651c:	4605      	mov	r5, r0
 800651e:	f002 fe89 	bl	8009234 <_localeconv_r>
 8006522:	f8d0 a000 	ldr.w	sl, [r0]
 8006526:	4650      	mov	r0, sl
 8006528:	f7f9 fe52 	bl	80001d0 <strlen>
 800652c:	2300      	movs	r3, #0
 800652e:	930a      	str	r3, [sp, #40]	; 0x28
 8006530:	6823      	ldr	r3, [r4, #0]
 8006532:	9305      	str	r3, [sp, #20]
 8006534:	f8d8 3000 	ldr.w	r3, [r8]
 8006538:	f894 b018 	ldrb.w	fp, [r4, #24]
 800653c:	3307      	adds	r3, #7
 800653e:	f023 0307 	bic.w	r3, r3, #7
 8006542:	f103 0208 	add.w	r2, r3, #8
 8006546:	f8c8 2000 	str.w	r2, [r8]
 800654a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800654e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006552:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006556:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800655a:	9307      	str	r3, [sp, #28]
 800655c:	f8cd 8018 	str.w	r8, [sp, #24]
 8006560:	ee08 0a10 	vmov	s16, r0
 8006564:	4b9f      	ldr	r3, [pc, #636]	; (80067e4 <_printf_float+0x2dc>)
 8006566:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800656a:	f04f 32ff 	mov.w	r2, #4294967295
 800656e:	f7fa fadd 	bl	8000b2c <__aeabi_dcmpun>
 8006572:	bb88      	cbnz	r0, 80065d8 <_printf_float+0xd0>
 8006574:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006578:	4b9a      	ldr	r3, [pc, #616]	; (80067e4 <_printf_float+0x2dc>)
 800657a:	f04f 32ff 	mov.w	r2, #4294967295
 800657e:	f7fa fab7 	bl	8000af0 <__aeabi_dcmple>
 8006582:	bb48      	cbnz	r0, 80065d8 <_printf_float+0xd0>
 8006584:	2200      	movs	r2, #0
 8006586:	2300      	movs	r3, #0
 8006588:	4640      	mov	r0, r8
 800658a:	4649      	mov	r1, r9
 800658c:	f7fa faa6 	bl	8000adc <__aeabi_dcmplt>
 8006590:	b110      	cbz	r0, 8006598 <_printf_float+0x90>
 8006592:	232d      	movs	r3, #45	; 0x2d
 8006594:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006598:	4b93      	ldr	r3, [pc, #588]	; (80067e8 <_printf_float+0x2e0>)
 800659a:	4894      	ldr	r0, [pc, #592]	; (80067ec <_printf_float+0x2e4>)
 800659c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80065a0:	bf94      	ite	ls
 80065a2:	4698      	movls	r8, r3
 80065a4:	4680      	movhi	r8, r0
 80065a6:	2303      	movs	r3, #3
 80065a8:	6123      	str	r3, [r4, #16]
 80065aa:	9b05      	ldr	r3, [sp, #20]
 80065ac:	f023 0204 	bic.w	r2, r3, #4
 80065b0:	6022      	str	r2, [r4, #0]
 80065b2:	f04f 0900 	mov.w	r9, #0
 80065b6:	9700      	str	r7, [sp, #0]
 80065b8:	4633      	mov	r3, r6
 80065ba:	aa0b      	add	r2, sp, #44	; 0x2c
 80065bc:	4621      	mov	r1, r4
 80065be:	4628      	mov	r0, r5
 80065c0:	f000 f9d8 	bl	8006974 <_printf_common>
 80065c4:	3001      	adds	r0, #1
 80065c6:	f040 8090 	bne.w	80066ea <_printf_float+0x1e2>
 80065ca:	f04f 30ff 	mov.w	r0, #4294967295
 80065ce:	b00d      	add	sp, #52	; 0x34
 80065d0:	ecbd 8b02 	vpop	{d8}
 80065d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065d8:	4642      	mov	r2, r8
 80065da:	464b      	mov	r3, r9
 80065dc:	4640      	mov	r0, r8
 80065de:	4649      	mov	r1, r9
 80065e0:	f7fa faa4 	bl	8000b2c <__aeabi_dcmpun>
 80065e4:	b140      	cbz	r0, 80065f8 <_printf_float+0xf0>
 80065e6:	464b      	mov	r3, r9
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	bfbc      	itt	lt
 80065ec:	232d      	movlt	r3, #45	; 0x2d
 80065ee:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80065f2:	487f      	ldr	r0, [pc, #508]	; (80067f0 <_printf_float+0x2e8>)
 80065f4:	4b7f      	ldr	r3, [pc, #508]	; (80067f4 <_printf_float+0x2ec>)
 80065f6:	e7d1      	b.n	800659c <_printf_float+0x94>
 80065f8:	6863      	ldr	r3, [r4, #4]
 80065fa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80065fe:	9206      	str	r2, [sp, #24]
 8006600:	1c5a      	adds	r2, r3, #1
 8006602:	d13f      	bne.n	8006684 <_printf_float+0x17c>
 8006604:	2306      	movs	r3, #6
 8006606:	6063      	str	r3, [r4, #4]
 8006608:	9b05      	ldr	r3, [sp, #20]
 800660a:	6861      	ldr	r1, [r4, #4]
 800660c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006610:	2300      	movs	r3, #0
 8006612:	9303      	str	r3, [sp, #12]
 8006614:	ab0a      	add	r3, sp, #40	; 0x28
 8006616:	e9cd b301 	strd	fp, r3, [sp, #4]
 800661a:	ab09      	add	r3, sp, #36	; 0x24
 800661c:	ec49 8b10 	vmov	d0, r8, r9
 8006620:	9300      	str	r3, [sp, #0]
 8006622:	6022      	str	r2, [r4, #0]
 8006624:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006628:	4628      	mov	r0, r5
 800662a:	f7ff fecd 	bl	80063c8 <__cvt>
 800662e:	9b06      	ldr	r3, [sp, #24]
 8006630:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006632:	2b47      	cmp	r3, #71	; 0x47
 8006634:	4680      	mov	r8, r0
 8006636:	d108      	bne.n	800664a <_printf_float+0x142>
 8006638:	1cc8      	adds	r0, r1, #3
 800663a:	db02      	blt.n	8006642 <_printf_float+0x13a>
 800663c:	6863      	ldr	r3, [r4, #4]
 800663e:	4299      	cmp	r1, r3
 8006640:	dd41      	ble.n	80066c6 <_printf_float+0x1be>
 8006642:	f1ab 0b02 	sub.w	fp, fp, #2
 8006646:	fa5f fb8b 	uxtb.w	fp, fp
 800664a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800664e:	d820      	bhi.n	8006692 <_printf_float+0x18a>
 8006650:	3901      	subs	r1, #1
 8006652:	465a      	mov	r2, fp
 8006654:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006658:	9109      	str	r1, [sp, #36]	; 0x24
 800665a:	f7ff ff17 	bl	800648c <__exponent>
 800665e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006660:	1813      	adds	r3, r2, r0
 8006662:	2a01      	cmp	r2, #1
 8006664:	4681      	mov	r9, r0
 8006666:	6123      	str	r3, [r4, #16]
 8006668:	dc02      	bgt.n	8006670 <_printf_float+0x168>
 800666a:	6822      	ldr	r2, [r4, #0]
 800666c:	07d2      	lsls	r2, r2, #31
 800666e:	d501      	bpl.n	8006674 <_printf_float+0x16c>
 8006670:	3301      	adds	r3, #1
 8006672:	6123      	str	r3, [r4, #16]
 8006674:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006678:	2b00      	cmp	r3, #0
 800667a:	d09c      	beq.n	80065b6 <_printf_float+0xae>
 800667c:	232d      	movs	r3, #45	; 0x2d
 800667e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006682:	e798      	b.n	80065b6 <_printf_float+0xae>
 8006684:	9a06      	ldr	r2, [sp, #24]
 8006686:	2a47      	cmp	r2, #71	; 0x47
 8006688:	d1be      	bne.n	8006608 <_printf_float+0x100>
 800668a:	2b00      	cmp	r3, #0
 800668c:	d1bc      	bne.n	8006608 <_printf_float+0x100>
 800668e:	2301      	movs	r3, #1
 8006690:	e7b9      	b.n	8006606 <_printf_float+0xfe>
 8006692:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006696:	d118      	bne.n	80066ca <_printf_float+0x1c2>
 8006698:	2900      	cmp	r1, #0
 800669a:	6863      	ldr	r3, [r4, #4]
 800669c:	dd0b      	ble.n	80066b6 <_printf_float+0x1ae>
 800669e:	6121      	str	r1, [r4, #16]
 80066a0:	b913      	cbnz	r3, 80066a8 <_printf_float+0x1a0>
 80066a2:	6822      	ldr	r2, [r4, #0]
 80066a4:	07d0      	lsls	r0, r2, #31
 80066a6:	d502      	bpl.n	80066ae <_printf_float+0x1a6>
 80066a8:	3301      	adds	r3, #1
 80066aa:	440b      	add	r3, r1
 80066ac:	6123      	str	r3, [r4, #16]
 80066ae:	65a1      	str	r1, [r4, #88]	; 0x58
 80066b0:	f04f 0900 	mov.w	r9, #0
 80066b4:	e7de      	b.n	8006674 <_printf_float+0x16c>
 80066b6:	b913      	cbnz	r3, 80066be <_printf_float+0x1b6>
 80066b8:	6822      	ldr	r2, [r4, #0]
 80066ba:	07d2      	lsls	r2, r2, #31
 80066bc:	d501      	bpl.n	80066c2 <_printf_float+0x1ba>
 80066be:	3302      	adds	r3, #2
 80066c0:	e7f4      	b.n	80066ac <_printf_float+0x1a4>
 80066c2:	2301      	movs	r3, #1
 80066c4:	e7f2      	b.n	80066ac <_printf_float+0x1a4>
 80066c6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80066ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066cc:	4299      	cmp	r1, r3
 80066ce:	db05      	blt.n	80066dc <_printf_float+0x1d4>
 80066d0:	6823      	ldr	r3, [r4, #0]
 80066d2:	6121      	str	r1, [r4, #16]
 80066d4:	07d8      	lsls	r0, r3, #31
 80066d6:	d5ea      	bpl.n	80066ae <_printf_float+0x1a6>
 80066d8:	1c4b      	adds	r3, r1, #1
 80066da:	e7e7      	b.n	80066ac <_printf_float+0x1a4>
 80066dc:	2900      	cmp	r1, #0
 80066de:	bfd4      	ite	le
 80066e0:	f1c1 0202 	rsble	r2, r1, #2
 80066e4:	2201      	movgt	r2, #1
 80066e6:	4413      	add	r3, r2
 80066e8:	e7e0      	b.n	80066ac <_printf_float+0x1a4>
 80066ea:	6823      	ldr	r3, [r4, #0]
 80066ec:	055a      	lsls	r2, r3, #21
 80066ee:	d407      	bmi.n	8006700 <_printf_float+0x1f8>
 80066f0:	6923      	ldr	r3, [r4, #16]
 80066f2:	4642      	mov	r2, r8
 80066f4:	4631      	mov	r1, r6
 80066f6:	4628      	mov	r0, r5
 80066f8:	47b8      	blx	r7
 80066fa:	3001      	adds	r0, #1
 80066fc:	d12c      	bne.n	8006758 <_printf_float+0x250>
 80066fe:	e764      	b.n	80065ca <_printf_float+0xc2>
 8006700:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006704:	f240 80e0 	bls.w	80068c8 <_printf_float+0x3c0>
 8006708:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800670c:	2200      	movs	r2, #0
 800670e:	2300      	movs	r3, #0
 8006710:	f7fa f9da 	bl	8000ac8 <__aeabi_dcmpeq>
 8006714:	2800      	cmp	r0, #0
 8006716:	d034      	beq.n	8006782 <_printf_float+0x27a>
 8006718:	4a37      	ldr	r2, [pc, #220]	; (80067f8 <_printf_float+0x2f0>)
 800671a:	2301      	movs	r3, #1
 800671c:	4631      	mov	r1, r6
 800671e:	4628      	mov	r0, r5
 8006720:	47b8      	blx	r7
 8006722:	3001      	adds	r0, #1
 8006724:	f43f af51 	beq.w	80065ca <_printf_float+0xc2>
 8006728:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800672c:	429a      	cmp	r2, r3
 800672e:	db02      	blt.n	8006736 <_printf_float+0x22e>
 8006730:	6823      	ldr	r3, [r4, #0]
 8006732:	07d8      	lsls	r0, r3, #31
 8006734:	d510      	bpl.n	8006758 <_printf_float+0x250>
 8006736:	ee18 3a10 	vmov	r3, s16
 800673a:	4652      	mov	r2, sl
 800673c:	4631      	mov	r1, r6
 800673e:	4628      	mov	r0, r5
 8006740:	47b8      	blx	r7
 8006742:	3001      	adds	r0, #1
 8006744:	f43f af41 	beq.w	80065ca <_printf_float+0xc2>
 8006748:	f04f 0800 	mov.w	r8, #0
 800674c:	f104 091a 	add.w	r9, r4, #26
 8006750:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006752:	3b01      	subs	r3, #1
 8006754:	4543      	cmp	r3, r8
 8006756:	dc09      	bgt.n	800676c <_printf_float+0x264>
 8006758:	6823      	ldr	r3, [r4, #0]
 800675a:	079b      	lsls	r3, r3, #30
 800675c:	f100 8105 	bmi.w	800696a <_printf_float+0x462>
 8006760:	68e0      	ldr	r0, [r4, #12]
 8006762:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006764:	4298      	cmp	r0, r3
 8006766:	bfb8      	it	lt
 8006768:	4618      	movlt	r0, r3
 800676a:	e730      	b.n	80065ce <_printf_float+0xc6>
 800676c:	2301      	movs	r3, #1
 800676e:	464a      	mov	r2, r9
 8006770:	4631      	mov	r1, r6
 8006772:	4628      	mov	r0, r5
 8006774:	47b8      	blx	r7
 8006776:	3001      	adds	r0, #1
 8006778:	f43f af27 	beq.w	80065ca <_printf_float+0xc2>
 800677c:	f108 0801 	add.w	r8, r8, #1
 8006780:	e7e6      	b.n	8006750 <_printf_float+0x248>
 8006782:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006784:	2b00      	cmp	r3, #0
 8006786:	dc39      	bgt.n	80067fc <_printf_float+0x2f4>
 8006788:	4a1b      	ldr	r2, [pc, #108]	; (80067f8 <_printf_float+0x2f0>)
 800678a:	2301      	movs	r3, #1
 800678c:	4631      	mov	r1, r6
 800678e:	4628      	mov	r0, r5
 8006790:	47b8      	blx	r7
 8006792:	3001      	adds	r0, #1
 8006794:	f43f af19 	beq.w	80065ca <_printf_float+0xc2>
 8006798:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800679c:	4313      	orrs	r3, r2
 800679e:	d102      	bne.n	80067a6 <_printf_float+0x29e>
 80067a0:	6823      	ldr	r3, [r4, #0]
 80067a2:	07d9      	lsls	r1, r3, #31
 80067a4:	d5d8      	bpl.n	8006758 <_printf_float+0x250>
 80067a6:	ee18 3a10 	vmov	r3, s16
 80067aa:	4652      	mov	r2, sl
 80067ac:	4631      	mov	r1, r6
 80067ae:	4628      	mov	r0, r5
 80067b0:	47b8      	blx	r7
 80067b2:	3001      	adds	r0, #1
 80067b4:	f43f af09 	beq.w	80065ca <_printf_float+0xc2>
 80067b8:	f04f 0900 	mov.w	r9, #0
 80067bc:	f104 0a1a 	add.w	sl, r4, #26
 80067c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067c2:	425b      	negs	r3, r3
 80067c4:	454b      	cmp	r3, r9
 80067c6:	dc01      	bgt.n	80067cc <_printf_float+0x2c4>
 80067c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067ca:	e792      	b.n	80066f2 <_printf_float+0x1ea>
 80067cc:	2301      	movs	r3, #1
 80067ce:	4652      	mov	r2, sl
 80067d0:	4631      	mov	r1, r6
 80067d2:	4628      	mov	r0, r5
 80067d4:	47b8      	blx	r7
 80067d6:	3001      	adds	r0, #1
 80067d8:	f43f aef7 	beq.w	80065ca <_printf_float+0xc2>
 80067dc:	f109 0901 	add.w	r9, r9, #1
 80067e0:	e7ee      	b.n	80067c0 <_printf_float+0x2b8>
 80067e2:	bf00      	nop
 80067e4:	7fefffff 	.word	0x7fefffff
 80067e8:	0800b4a4 	.word	0x0800b4a4
 80067ec:	0800b4a8 	.word	0x0800b4a8
 80067f0:	0800b4b0 	.word	0x0800b4b0
 80067f4:	0800b4ac 	.word	0x0800b4ac
 80067f8:	0800b4b4 	.word	0x0800b4b4
 80067fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80067fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006800:	429a      	cmp	r2, r3
 8006802:	bfa8      	it	ge
 8006804:	461a      	movge	r2, r3
 8006806:	2a00      	cmp	r2, #0
 8006808:	4691      	mov	r9, r2
 800680a:	dc37      	bgt.n	800687c <_printf_float+0x374>
 800680c:	f04f 0b00 	mov.w	fp, #0
 8006810:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006814:	f104 021a 	add.w	r2, r4, #26
 8006818:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800681a:	9305      	str	r3, [sp, #20]
 800681c:	eba3 0309 	sub.w	r3, r3, r9
 8006820:	455b      	cmp	r3, fp
 8006822:	dc33      	bgt.n	800688c <_printf_float+0x384>
 8006824:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006828:	429a      	cmp	r2, r3
 800682a:	db3b      	blt.n	80068a4 <_printf_float+0x39c>
 800682c:	6823      	ldr	r3, [r4, #0]
 800682e:	07da      	lsls	r2, r3, #31
 8006830:	d438      	bmi.n	80068a4 <_printf_float+0x39c>
 8006832:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006834:	9a05      	ldr	r2, [sp, #20]
 8006836:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006838:	1a9a      	subs	r2, r3, r2
 800683a:	eba3 0901 	sub.w	r9, r3, r1
 800683e:	4591      	cmp	r9, r2
 8006840:	bfa8      	it	ge
 8006842:	4691      	movge	r9, r2
 8006844:	f1b9 0f00 	cmp.w	r9, #0
 8006848:	dc35      	bgt.n	80068b6 <_printf_float+0x3ae>
 800684a:	f04f 0800 	mov.w	r8, #0
 800684e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006852:	f104 0a1a 	add.w	sl, r4, #26
 8006856:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800685a:	1a9b      	subs	r3, r3, r2
 800685c:	eba3 0309 	sub.w	r3, r3, r9
 8006860:	4543      	cmp	r3, r8
 8006862:	f77f af79 	ble.w	8006758 <_printf_float+0x250>
 8006866:	2301      	movs	r3, #1
 8006868:	4652      	mov	r2, sl
 800686a:	4631      	mov	r1, r6
 800686c:	4628      	mov	r0, r5
 800686e:	47b8      	blx	r7
 8006870:	3001      	adds	r0, #1
 8006872:	f43f aeaa 	beq.w	80065ca <_printf_float+0xc2>
 8006876:	f108 0801 	add.w	r8, r8, #1
 800687a:	e7ec      	b.n	8006856 <_printf_float+0x34e>
 800687c:	4613      	mov	r3, r2
 800687e:	4631      	mov	r1, r6
 8006880:	4642      	mov	r2, r8
 8006882:	4628      	mov	r0, r5
 8006884:	47b8      	blx	r7
 8006886:	3001      	adds	r0, #1
 8006888:	d1c0      	bne.n	800680c <_printf_float+0x304>
 800688a:	e69e      	b.n	80065ca <_printf_float+0xc2>
 800688c:	2301      	movs	r3, #1
 800688e:	4631      	mov	r1, r6
 8006890:	4628      	mov	r0, r5
 8006892:	9205      	str	r2, [sp, #20]
 8006894:	47b8      	blx	r7
 8006896:	3001      	adds	r0, #1
 8006898:	f43f ae97 	beq.w	80065ca <_printf_float+0xc2>
 800689c:	9a05      	ldr	r2, [sp, #20]
 800689e:	f10b 0b01 	add.w	fp, fp, #1
 80068a2:	e7b9      	b.n	8006818 <_printf_float+0x310>
 80068a4:	ee18 3a10 	vmov	r3, s16
 80068a8:	4652      	mov	r2, sl
 80068aa:	4631      	mov	r1, r6
 80068ac:	4628      	mov	r0, r5
 80068ae:	47b8      	blx	r7
 80068b0:	3001      	adds	r0, #1
 80068b2:	d1be      	bne.n	8006832 <_printf_float+0x32a>
 80068b4:	e689      	b.n	80065ca <_printf_float+0xc2>
 80068b6:	9a05      	ldr	r2, [sp, #20]
 80068b8:	464b      	mov	r3, r9
 80068ba:	4442      	add	r2, r8
 80068bc:	4631      	mov	r1, r6
 80068be:	4628      	mov	r0, r5
 80068c0:	47b8      	blx	r7
 80068c2:	3001      	adds	r0, #1
 80068c4:	d1c1      	bne.n	800684a <_printf_float+0x342>
 80068c6:	e680      	b.n	80065ca <_printf_float+0xc2>
 80068c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80068ca:	2a01      	cmp	r2, #1
 80068cc:	dc01      	bgt.n	80068d2 <_printf_float+0x3ca>
 80068ce:	07db      	lsls	r3, r3, #31
 80068d0:	d538      	bpl.n	8006944 <_printf_float+0x43c>
 80068d2:	2301      	movs	r3, #1
 80068d4:	4642      	mov	r2, r8
 80068d6:	4631      	mov	r1, r6
 80068d8:	4628      	mov	r0, r5
 80068da:	47b8      	blx	r7
 80068dc:	3001      	adds	r0, #1
 80068de:	f43f ae74 	beq.w	80065ca <_printf_float+0xc2>
 80068e2:	ee18 3a10 	vmov	r3, s16
 80068e6:	4652      	mov	r2, sl
 80068e8:	4631      	mov	r1, r6
 80068ea:	4628      	mov	r0, r5
 80068ec:	47b8      	blx	r7
 80068ee:	3001      	adds	r0, #1
 80068f0:	f43f ae6b 	beq.w	80065ca <_printf_float+0xc2>
 80068f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80068f8:	2200      	movs	r2, #0
 80068fa:	2300      	movs	r3, #0
 80068fc:	f7fa f8e4 	bl	8000ac8 <__aeabi_dcmpeq>
 8006900:	b9d8      	cbnz	r0, 800693a <_printf_float+0x432>
 8006902:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006904:	f108 0201 	add.w	r2, r8, #1
 8006908:	3b01      	subs	r3, #1
 800690a:	4631      	mov	r1, r6
 800690c:	4628      	mov	r0, r5
 800690e:	47b8      	blx	r7
 8006910:	3001      	adds	r0, #1
 8006912:	d10e      	bne.n	8006932 <_printf_float+0x42a>
 8006914:	e659      	b.n	80065ca <_printf_float+0xc2>
 8006916:	2301      	movs	r3, #1
 8006918:	4652      	mov	r2, sl
 800691a:	4631      	mov	r1, r6
 800691c:	4628      	mov	r0, r5
 800691e:	47b8      	blx	r7
 8006920:	3001      	adds	r0, #1
 8006922:	f43f ae52 	beq.w	80065ca <_printf_float+0xc2>
 8006926:	f108 0801 	add.w	r8, r8, #1
 800692a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800692c:	3b01      	subs	r3, #1
 800692e:	4543      	cmp	r3, r8
 8006930:	dcf1      	bgt.n	8006916 <_printf_float+0x40e>
 8006932:	464b      	mov	r3, r9
 8006934:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006938:	e6dc      	b.n	80066f4 <_printf_float+0x1ec>
 800693a:	f04f 0800 	mov.w	r8, #0
 800693e:	f104 0a1a 	add.w	sl, r4, #26
 8006942:	e7f2      	b.n	800692a <_printf_float+0x422>
 8006944:	2301      	movs	r3, #1
 8006946:	4642      	mov	r2, r8
 8006948:	e7df      	b.n	800690a <_printf_float+0x402>
 800694a:	2301      	movs	r3, #1
 800694c:	464a      	mov	r2, r9
 800694e:	4631      	mov	r1, r6
 8006950:	4628      	mov	r0, r5
 8006952:	47b8      	blx	r7
 8006954:	3001      	adds	r0, #1
 8006956:	f43f ae38 	beq.w	80065ca <_printf_float+0xc2>
 800695a:	f108 0801 	add.w	r8, r8, #1
 800695e:	68e3      	ldr	r3, [r4, #12]
 8006960:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006962:	1a5b      	subs	r3, r3, r1
 8006964:	4543      	cmp	r3, r8
 8006966:	dcf0      	bgt.n	800694a <_printf_float+0x442>
 8006968:	e6fa      	b.n	8006760 <_printf_float+0x258>
 800696a:	f04f 0800 	mov.w	r8, #0
 800696e:	f104 0919 	add.w	r9, r4, #25
 8006972:	e7f4      	b.n	800695e <_printf_float+0x456>

08006974 <_printf_common>:
 8006974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006978:	4616      	mov	r6, r2
 800697a:	4699      	mov	r9, r3
 800697c:	688a      	ldr	r2, [r1, #8]
 800697e:	690b      	ldr	r3, [r1, #16]
 8006980:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006984:	4293      	cmp	r3, r2
 8006986:	bfb8      	it	lt
 8006988:	4613      	movlt	r3, r2
 800698a:	6033      	str	r3, [r6, #0]
 800698c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006990:	4607      	mov	r7, r0
 8006992:	460c      	mov	r4, r1
 8006994:	b10a      	cbz	r2, 800699a <_printf_common+0x26>
 8006996:	3301      	adds	r3, #1
 8006998:	6033      	str	r3, [r6, #0]
 800699a:	6823      	ldr	r3, [r4, #0]
 800699c:	0699      	lsls	r1, r3, #26
 800699e:	bf42      	ittt	mi
 80069a0:	6833      	ldrmi	r3, [r6, #0]
 80069a2:	3302      	addmi	r3, #2
 80069a4:	6033      	strmi	r3, [r6, #0]
 80069a6:	6825      	ldr	r5, [r4, #0]
 80069a8:	f015 0506 	ands.w	r5, r5, #6
 80069ac:	d106      	bne.n	80069bc <_printf_common+0x48>
 80069ae:	f104 0a19 	add.w	sl, r4, #25
 80069b2:	68e3      	ldr	r3, [r4, #12]
 80069b4:	6832      	ldr	r2, [r6, #0]
 80069b6:	1a9b      	subs	r3, r3, r2
 80069b8:	42ab      	cmp	r3, r5
 80069ba:	dc26      	bgt.n	8006a0a <_printf_common+0x96>
 80069bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80069c0:	1e13      	subs	r3, r2, #0
 80069c2:	6822      	ldr	r2, [r4, #0]
 80069c4:	bf18      	it	ne
 80069c6:	2301      	movne	r3, #1
 80069c8:	0692      	lsls	r2, r2, #26
 80069ca:	d42b      	bmi.n	8006a24 <_printf_common+0xb0>
 80069cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80069d0:	4649      	mov	r1, r9
 80069d2:	4638      	mov	r0, r7
 80069d4:	47c0      	blx	r8
 80069d6:	3001      	adds	r0, #1
 80069d8:	d01e      	beq.n	8006a18 <_printf_common+0xa4>
 80069da:	6823      	ldr	r3, [r4, #0]
 80069dc:	68e5      	ldr	r5, [r4, #12]
 80069de:	6832      	ldr	r2, [r6, #0]
 80069e0:	f003 0306 	and.w	r3, r3, #6
 80069e4:	2b04      	cmp	r3, #4
 80069e6:	bf08      	it	eq
 80069e8:	1aad      	subeq	r5, r5, r2
 80069ea:	68a3      	ldr	r3, [r4, #8]
 80069ec:	6922      	ldr	r2, [r4, #16]
 80069ee:	bf0c      	ite	eq
 80069f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80069f4:	2500      	movne	r5, #0
 80069f6:	4293      	cmp	r3, r2
 80069f8:	bfc4      	itt	gt
 80069fa:	1a9b      	subgt	r3, r3, r2
 80069fc:	18ed      	addgt	r5, r5, r3
 80069fe:	2600      	movs	r6, #0
 8006a00:	341a      	adds	r4, #26
 8006a02:	42b5      	cmp	r5, r6
 8006a04:	d11a      	bne.n	8006a3c <_printf_common+0xc8>
 8006a06:	2000      	movs	r0, #0
 8006a08:	e008      	b.n	8006a1c <_printf_common+0xa8>
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	4652      	mov	r2, sl
 8006a0e:	4649      	mov	r1, r9
 8006a10:	4638      	mov	r0, r7
 8006a12:	47c0      	blx	r8
 8006a14:	3001      	adds	r0, #1
 8006a16:	d103      	bne.n	8006a20 <_printf_common+0xac>
 8006a18:	f04f 30ff 	mov.w	r0, #4294967295
 8006a1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a20:	3501      	adds	r5, #1
 8006a22:	e7c6      	b.n	80069b2 <_printf_common+0x3e>
 8006a24:	18e1      	adds	r1, r4, r3
 8006a26:	1c5a      	adds	r2, r3, #1
 8006a28:	2030      	movs	r0, #48	; 0x30
 8006a2a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006a2e:	4422      	add	r2, r4
 8006a30:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006a34:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006a38:	3302      	adds	r3, #2
 8006a3a:	e7c7      	b.n	80069cc <_printf_common+0x58>
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	4622      	mov	r2, r4
 8006a40:	4649      	mov	r1, r9
 8006a42:	4638      	mov	r0, r7
 8006a44:	47c0      	blx	r8
 8006a46:	3001      	adds	r0, #1
 8006a48:	d0e6      	beq.n	8006a18 <_printf_common+0xa4>
 8006a4a:	3601      	adds	r6, #1
 8006a4c:	e7d9      	b.n	8006a02 <_printf_common+0x8e>
	...

08006a50 <_printf_i>:
 8006a50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a54:	7e0f      	ldrb	r7, [r1, #24]
 8006a56:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006a58:	2f78      	cmp	r7, #120	; 0x78
 8006a5a:	4691      	mov	r9, r2
 8006a5c:	4680      	mov	r8, r0
 8006a5e:	460c      	mov	r4, r1
 8006a60:	469a      	mov	sl, r3
 8006a62:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006a66:	d807      	bhi.n	8006a78 <_printf_i+0x28>
 8006a68:	2f62      	cmp	r7, #98	; 0x62
 8006a6a:	d80a      	bhi.n	8006a82 <_printf_i+0x32>
 8006a6c:	2f00      	cmp	r7, #0
 8006a6e:	f000 80d8 	beq.w	8006c22 <_printf_i+0x1d2>
 8006a72:	2f58      	cmp	r7, #88	; 0x58
 8006a74:	f000 80a3 	beq.w	8006bbe <_printf_i+0x16e>
 8006a78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006a80:	e03a      	b.n	8006af8 <_printf_i+0xa8>
 8006a82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006a86:	2b15      	cmp	r3, #21
 8006a88:	d8f6      	bhi.n	8006a78 <_printf_i+0x28>
 8006a8a:	a101      	add	r1, pc, #4	; (adr r1, 8006a90 <_printf_i+0x40>)
 8006a8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006a90:	08006ae9 	.word	0x08006ae9
 8006a94:	08006afd 	.word	0x08006afd
 8006a98:	08006a79 	.word	0x08006a79
 8006a9c:	08006a79 	.word	0x08006a79
 8006aa0:	08006a79 	.word	0x08006a79
 8006aa4:	08006a79 	.word	0x08006a79
 8006aa8:	08006afd 	.word	0x08006afd
 8006aac:	08006a79 	.word	0x08006a79
 8006ab0:	08006a79 	.word	0x08006a79
 8006ab4:	08006a79 	.word	0x08006a79
 8006ab8:	08006a79 	.word	0x08006a79
 8006abc:	08006c09 	.word	0x08006c09
 8006ac0:	08006b2d 	.word	0x08006b2d
 8006ac4:	08006beb 	.word	0x08006beb
 8006ac8:	08006a79 	.word	0x08006a79
 8006acc:	08006a79 	.word	0x08006a79
 8006ad0:	08006c2b 	.word	0x08006c2b
 8006ad4:	08006a79 	.word	0x08006a79
 8006ad8:	08006b2d 	.word	0x08006b2d
 8006adc:	08006a79 	.word	0x08006a79
 8006ae0:	08006a79 	.word	0x08006a79
 8006ae4:	08006bf3 	.word	0x08006bf3
 8006ae8:	682b      	ldr	r3, [r5, #0]
 8006aea:	1d1a      	adds	r2, r3, #4
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	602a      	str	r2, [r5, #0]
 8006af0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006af4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006af8:	2301      	movs	r3, #1
 8006afa:	e0a3      	b.n	8006c44 <_printf_i+0x1f4>
 8006afc:	6820      	ldr	r0, [r4, #0]
 8006afe:	6829      	ldr	r1, [r5, #0]
 8006b00:	0606      	lsls	r6, r0, #24
 8006b02:	f101 0304 	add.w	r3, r1, #4
 8006b06:	d50a      	bpl.n	8006b1e <_printf_i+0xce>
 8006b08:	680e      	ldr	r6, [r1, #0]
 8006b0a:	602b      	str	r3, [r5, #0]
 8006b0c:	2e00      	cmp	r6, #0
 8006b0e:	da03      	bge.n	8006b18 <_printf_i+0xc8>
 8006b10:	232d      	movs	r3, #45	; 0x2d
 8006b12:	4276      	negs	r6, r6
 8006b14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b18:	485e      	ldr	r0, [pc, #376]	; (8006c94 <_printf_i+0x244>)
 8006b1a:	230a      	movs	r3, #10
 8006b1c:	e019      	b.n	8006b52 <_printf_i+0x102>
 8006b1e:	680e      	ldr	r6, [r1, #0]
 8006b20:	602b      	str	r3, [r5, #0]
 8006b22:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006b26:	bf18      	it	ne
 8006b28:	b236      	sxthne	r6, r6
 8006b2a:	e7ef      	b.n	8006b0c <_printf_i+0xbc>
 8006b2c:	682b      	ldr	r3, [r5, #0]
 8006b2e:	6820      	ldr	r0, [r4, #0]
 8006b30:	1d19      	adds	r1, r3, #4
 8006b32:	6029      	str	r1, [r5, #0]
 8006b34:	0601      	lsls	r1, r0, #24
 8006b36:	d501      	bpl.n	8006b3c <_printf_i+0xec>
 8006b38:	681e      	ldr	r6, [r3, #0]
 8006b3a:	e002      	b.n	8006b42 <_printf_i+0xf2>
 8006b3c:	0646      	lsls	r6, r0, #25
 8006b3e:	d5fb      	bpl.n	8006b38 <_printf_i+0xe8>
 8006b40:	881e      	ldrh	r6, [r3, #0]
 8006b42:	4854      	ldr	r0, [pc, #336]	; (8006c94 <_printf_i+0x244>)
 8006b44:	2f6f      	cmp	r7, #111	; 0x6f
 8006b46:	bf0c      	ite	eq
 8006b48:	2308      	moveq	r3, #8
 8006b4a:	230a      	movne	r3, #10
 8006b4c:	2100      	movs	r1, #0
 8006b4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006b52:	6865      	ldr	r5, [r4, #4]
 8006b54:	60a5      	str	r5, [r4, #8]
 8006b56:	2d00      	cmp	r5, #0
 8006b58:	bfa2      	ittt	ge
 8006b5a:	6821      	ldrge	r1, [r4, #0]
 8006b5c:	f021 0104 	bicge.w	r1, r1, #4
 8006b60:	6021      	strge	r1, [r4, #0]
 8006b62:	b90e      	cbnz	r6, 8006b68 <_printf_i+0x118>
 8006b64:	2d00      	cmp	r5, #0
 8006b66:	d04d      	beq.n	8006c04 <_printf_i+0x1b4>
 8006b68:	4615      	mov	r5, r2
 8006b6a:	fbb6 f1f3 	udiv	r1, r6, r3
 8006b6e:	fb03 6711 	mls	r7, r3, r1, r6
 8006b72:	5dc7      	ldrb	r7, [r0, r7]
 8006b74:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006b78:	4637      	mov	r7, r6
 8006b7a:	42bb      	cmp	r3, r7
 8006b7c:	460e      	mov	r6, r1
 8006b7e:	d9f4      	bls.n	8006b6a <_printf_i+0x11a>
 8006b80:	2b08      	cmp	r3, #8
 8006b82:	d10b      	bne.n	8006b9c <_printf_i+0x14c>
 8006b84:	6823      	ldr	r3, [r4, #0]
 8006b86:	07de      	lsls	r6, r3, #31
 8006b88:	d508      	bpl.n	8006b9c <_printf_i+0x14c>
 8006b8a:	6923      	ldr	r3, [r4, #16]
 8006b8c:	6861      	ldr	r1, [r4, #4]
 8006b8e:	4299      	cmp	r1, r3
 8006b90:	bfde      	ittt	le
 8006b92:	2330      	movle	r3, #48	; 0x30
 8006b94:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006b98:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006b9c:	1b52      	subs	r2, r2, r5
 8006b9e:	6122      	str	r2, [r4, #16]
 8006ba0:	f8cd a000 	str.w	sl, [sp]
 8006ba4:	464b      	mov	r3, r9
 8006ba6:	aa03      	add	r2, sp, #12
 8006ba8:	4621      	mov	r1, r4
 8006baa:	4640      	mov	r0, r8
 8006bac:	f7ff fee2 	bl	8006974 <_printf_common>
 8006bb0:	3001      	adds	r0, #1
 8006bb2:	d14c      	bne.n	8006c4e <_printf_i+0x1fe>
 8006bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8006bb8:	b004      	add	sp, #16
 8006bba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bbe:	4835      	ldr	r0, [pc, #212]	; (8006c94 <_printf_i+0x244>)
 8006bc0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006bc4:	6829      	ldr	r1, [r5, #0]
 8006bc6:	6823      	ldr	r3, [r4, #0]
 8006bc8:	f851 6b04 	ldr.w	r6, [r1], #4
 8006bcc:	6029      	str	r1, [r5, #0]
 8006bce:	061d      	lsls	r5, r3, #24
 8006bd0:	d514      	bpl.n	8006bfc <_printf_i+0x1ac>
 8006bd2:	07df      	lsls	r7, r3, #31
 8006bd4:	bf44      	itt	mi
 8006bd6:	f043 0320 	orrmi.w	r3, r3, #32
 8006bda:	6023      	strmi	r3, [r4, #0]
 8006bdc:	b91e      	cbnz	r6, 8006be6 <_printf_i+0x196>
 8006bde:	6823      	ldr	r3, [r4, #0]
 8006be0:	f023 0320 	bic.w	r3, r3, #32
 8006be4:	6023      	str	r3, [r4, #0]
 8006be6:	2310      	movs	r3, #16
 8006be8:	e7b0      	b.n	8006b4c <_printf_i+0xfc>
 8006bea:	6823      	ldr	r3, [r4, #0]
 8006bec:	f043 0320 	orr.w	r3, r3, #32
 8006bf0:	6023      	str	r3, [r4, #0]
 8006bf2:	2378      	movs	r3, #120	; 0x78
 8006bf4:	4828      	ldr	r0, [pc, #160]	; (8006c98 <_printf_i+0x248>)
 8006bf6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006bfa:	e7e3      	b.n	8006bc4 <_printf_i+0x174>
 8006bfc:	0659      	lsls	r1, r3, #25
 8006bfe:	bf48      	it	mi
 8006c00:	b2b6      	uxthmi	r6, r6
 8006c02:	e7e6      	b.n	8006bd2 <_printf_i+0x182>
 8006c04:	4615      	mov	r5, r2
 8006c06:	e7bb      	b.n	8006b80 <_printf_i+0x130>
 8006c08:	682b      	ldr	r3, [r5, #0]
 8006c0a:	6826      	ldr	r6, [r4, #0]
 8006c0c:	6961      	ldr	r1, [r4, #20]
 8006c0e:	1d18      	adds	r0, r3, #4
 8006c10:	6028      	str	r0, [r5, #0]
 8006c12:	0635      	lsls	r5, r6, #24
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	d501      	bpl.n	8006c1c <_printf_i+0x1cc>
 8006c18:	6019      	str	r1, [r3, #0]
 8006c1a:	e002      	b.n	8006c22 <_printf_i+0x1d2>
 8006c1c:	0670      	lsls	r0, r6, #25
 8006c1e:	d5fb      	bpl.n	8006c18 <_printf_i+0x1c8>
 8006c20:	8019      	strh	r1, [r3, #0]
 8006c22:	2300      	movs	r3, #0
 8006c24:	6123      	str	r3, [r4, #16]
 8006c26:	4615      	mov	r5, r2
 8006c28:	e7ba      	b.n	8006ba0 <_printf_i+0x150>
 8006c2a:	682b      	ldr	r3, [r5, #0]
 8006c2c:	1d1a      	adds	r2, r3, #4
 8006c2e:	602a      	str	r2, [r5, #0]
 8006c30:	681d      	ldr	r5, [r3, #0]
 8006c32:	6862      	ldr	r2, [r4, #4]
 8006c34:	2100      	movs	r1, #0
 8006c36:	4628      	mov	r0, r5
 8006c38:	f7f9 fad2 	bl	80001e0 <memchr>
 8006c3c:	b108      	cbz	r0, 8006c42 <_printf_i+0x1f2>
 8006c3e:	1b40      	subs	r0, r0, r5
 8006c40:	6060      	str	r0, [r4, #4]
 8006c42:	6863      	ldr	r3, [r4, #4]
 8006c44:	6123      	str	r3, [r4, #16]
 8006c46:	2300      	movs	r3, #0
 8006c48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c4c:	e7a8      	b.n	8006ba0 <_printf_i+0x150>
 8006c4e:	6923      	ldr	r3, [r4, #16]
 8006c50:	462a      	mov	r2, r5
 8006c52:	4649      	mov	r1, r9
 8006c54:	4640      	mov	r0, r8
 8006c56:	47d0      	blx	sl
 8006c58:	3001      	adds	r0, #1
 8006c5a:	d0ab      	beq.n	8006bb4 <_printf_i+0x164>
 8006c5c:	6823      	ldr	r3, [r4, #0]
 8006c5e:	079b      	lsls	r3, r3, #30
 8006c60:	d413      	bmi.n	8006c8a <_printf_i+0x23a>
 8006c62:	68e0      	ldr	r0, [r4, #12]
 8006c64:	9b03      	ldr	r3, [sp, #12]
 8006c66:	4298      	cmp	r0, r3
 8006c68:	bfb8      	it	lt
 8006c6a:	4618      	movlt	r0, r3
 8006c6c:	e7a4      	b.n	8006bb8 <_printf_i+0x168>
 8006c6e:	2301      	movs	r3, #1
 8006c70:	4632      	mov	r2, r6
 8006c72:	4649      	mov	r1, r9
 8006c74:	4640      	mov	r0, r8
 8006c76:	47d0      	blx	sl
 8006c78:	3001      	adds	r0, #1
 8006c7a:	d09b      	beq.n	8006bb4 <_printf_i+0x164>
 8006c7c:	3501      	adds	r5, #1
 8006c7e:	68e3      	ldr	r3, [r4, #12]
 8006c80:	9903      	ldr	r1, [sp, #12]
 8006c82:	1a5b      	subs	r3, r3, r1
 8006c84:	42ab      	cmp	r3, r5
 8006c86:	dcf2      	bgt.n	8006c6e <_printf_i+0x21e>
 8006c88:	e7eb      	b.n	8006c62 <_printf_i+0x212>
 8006c8a:	2500      	movs	r5, #0
 8006c8c:	f104 0619 	add.w	r6, r4, #25
 8006c90:	e7f5      	b.n	8006c7e <_printf_i+0x22e>
 8006c92:	bf00      	nop
 8006c94:	0800b4b6 	.word	0x0800b4b6
 8006c98:	0800b4c7 	.word	0x0800b4c7

08006c9c <_scanf_float>:
 8006c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ca0:	b087      	sub	sp, #28
 8006ca2:	4617      	mov	r7, r2
 8006ca4:	9303      	str	r3, [sp, #12]
 8006ca6:	688b      	ldr	r3, [r1, #8]
 8006ca8:	1e5a      	subs	r2, r3, #1
 8006caa:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006cae:	bf83      	ittte	hi
 8006cb0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006cb4:	195b      	addhi	r3, r3, r5
 8006cb6:	9302      	strhi	r3, [sp, #8]
 8006cb8:	2300      	movls	r3, #0
 8006cba:	bf86      	itte	hi
 8006cbc:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006cc0:	608b      	strhi	r3, [r1, #8]
 8006cc2:	9302      	strls	r3, [sp, #8]
 8006cc4:	680b      	ldr	r3, [r1, #0]
 8006cc6:	468b      	mov	fp, r1
 8006cc8:	2500      	movs	r5, #0
 8006cca:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006cce:	f84b 3b1c 	str.w	r3, [fp], #28
 8006cd2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006cd6:	4680      	mov	r8, r0
 8006cd8:	460c      	mov	r4, r1
 8006cda:	465e      	mov	r6, fp
 8006cdc:	46aa      	mov	sl, r5
 8006cde:	46a9      	mov	r9, r5
 8006ce0:	9501      	str	r5, [sp, #4]
 8006ce2:	68a2      	ldr	r2, [r4, #8]
 8006ce4:	b152      	cbz	r2, 8006cfc <_scanf_float+0x60>
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	781b      	ldrb	r3, [r3, #0]
 8006cea:	2b4e      	cmp	r3, #78	; 0x4e
 8006cec:	d864      	bhi.n	8006db8 <_scanf_float+0x11c>
 8006cee:	2b40      	cmp	r3, #64	; 0x40
 8006cf0:	d83c      	bhi.n	8006d6c <_scanf_float+0xd0>
 8006cf2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006cf6:	b2c8      	uxtb	r0, r1
 8006cf8:	280e      	cmp	r0, #14
 8006cfa:	d93a      	bls.n	8006d72 <_scanf_float+0xd6>
 8006cfc:	f1b9 0f00 	cmp.w	r9, #0
 8006d00:	d003      	beq.n	8006d0a <_scanf_float+0x6e>
 8006d02:	6823      	ldr	r3, [r4, #0]
 8006d04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d08:	6023      	str	r3, [r4, #0]
 8006d0a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006d0e:	f1ba 0f01 	cmp.w	sl, #1
 8006d12:	f200 8113 	bhi.w	8006f3c <_scanf_float+0x2a0>
 8006d16:	455e      	cmp	r6, fp
 8006d18:	f200 8105 	bhi.w	8006f26 <_scanf_float+0x28a>
 8006d1c:	2501      	movs	r5, #1
 8006d1e:	4628      	mov	r0, r5
 8006d20:	b007      	add	sp, #28
 8006d22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d26:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006d2a:	2a0d      	cmp	r2, #13
 8006d2c:	d8e6      	bhi.n	8006cfc <_scanf_float+0x60>
 8006d2e:	a101      	add	r1, pc, #4	; (adr r1, 8006d34 <_scanf_float+0x98>)
 8006d30:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006d34:	08006e73 	.word	0x08006e73
 8006d38:	08006cfd 	.word	0x08006cfd
 8006d3c:	08006cfd 	.word	0x08006cfd
 8006d40:	08006cfd 	.word	0x08006cfd
 8006d44:	08006ed3 	.word	0x08006ed3
 8006d48:	08006eab 	.word	0x08006eab
 8006d4c:	08006cfd 	.word	0x08006cfd
 8006d50:	08006cfd 	.word	0x08006cfd
 8006d54:	08006e81 	.word	0x08006e81
 8006d58:	08006cfd 	.word	0x08006cfd
 8006d5c:	08006cfd 	.word	0x08006cfd
 8006d60:	08006cfd 	.word	0x08006cfd
 8006d64:	08006cfd 	.word	0x08006cfd
 8006d68:	08006e39 	.word	0x08006e39
 8006d6c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006d70:	e7db      	b.n	8006d2a <_scanf_float+0x8e>
 8006d72:	290e      	cmp	r1, #14
 8006d74:	d8c2      	bhi.n	8006cfc <_scanf_float+0x60>
 8006d76:	a001      	add	r0, pc, #4	; (adr r0, 8006d7c <_scanf_float+0xe0>)
 8006d78:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006d7c:	08006e2b 	.word	0x08006e2b
 8006d80:	08006cfd 	.word	0x08006cfd
 8006d84:	08006e2b 	.word	0x08006e2b
 8006d88:	08006ebf 	.word	0x08006ebf
 8006d8c:	08006cfd 	.word	0x08006cfd
 8006d90:	08006dd9 	.word	0x08006dd9
 8006d94:	08006e15 	.word	0x08006e15
 8006d98:	08006e15 	.word	0x08006e15
 8006d9c:	08006e15 	.word	0x08006e15
 8006da0:	08006e15 	.word	0x08006e15
 8006da4:	08006e15 	.word	0x08006e15
 8006da8:	08006e15 	.word	0x08006e15
 8006dac:	08006e15 	.word	0x08006e15
 8006db0:	08006e15 	.word	0x08006e15
 8006db4:	08006e15 	.word	0x08006e15
 8006db8:	2b6e      	cmp	r3, #110	; 0x6e
 8006dba:	d809      	bhi.n	8006dd0 <_scanf_float+0x134>
 8006dbc:	2b60      	cmp	r3, #96	; 0x60
 8006dbe:	d8b2      	bhi.n	8006d26 <_scanf_float+0x8a>
 8006dc0:	2b54      	cmp	r3, #84	; 0x54
 8006dc2:	d077      	beq.n	8006eb4 <_scanf_float+0x218>
 8006dc4:	2b59      	cmp	r3, #89	; 0x59
 8006dc6:	d199      	bne.n	8006cfc <_scanf_float+0x60>
 8006dc8:	2d07      	cmp	r5, #7
 8006dca:	d197      	bne.n	8006cfc <_scanf_float+0x60>
 8006dcc:	2508      	movs	r5, #8
 8006dce:	e029      	b.n	8006e24 <_scanf_float+0x188>
 8006dd0:	2b74      	cmp	r3, #116	; 0x74
 8006dd2:	d06f      	beq.n	8006eb4 <_scanf_float+0x218>
 8006dd4:	2b79      	cmp	r3, #121	; 0x79
 8006dd6:	e7f6      	b.n	8006dc6 <_scanf_float+0x12a>
 8006dd8:	6821      	ldr	r1, [r4, #0]
 8006dda:	05c8      	lsls	r0, r1, #23
 8006ddc:	d51a      	bpl.n	8006e14 <_scanf_float+0x178>
 8006dde:	9b02      	ldr	r3, [sp, #8]
 8006de0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006de4:	6021      	str	r1, [r4, #0]
 8006de6:	f109 0901 	add.w	r9, r9, #1
 8006dea:	b11b      	cbz	r3, 8006df4 <_scanf_float+0x158>
 8006dec:	3b01      	subs	r3, #1
 8006dee:	3201      	adds	r2, #1
 8006df0:	9302      	str	r3, [sp, #8]
 8006df2:	60a2      	str	r2, [r4, #8]
 8006df4:	68a3      	ldr	r3, [r4, #8]
 8006df6:	3b01      	subs	r3, #1
 8006df8:	60a3      	str	r3, [r4, #8]
 8006dfa:	6923      	ldr	r3, [r4, #16]
 8006dfc:	3301      	adds	r3, #1
 8006dfe:	6123      	str	r3, [r4, #16]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	3b01      	subs	r3, #1
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	607b      	str	r3, [r7, #4]
 8006e08:	f340 8084 	ble.w	8006f14 <_scanf_float+0x278>
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	3301      	adds	r3, #1
 8006e10:	603b      	str	r3, [r7, #0]
 8006e12:	e766      	b.n	8006ce2 <_scanf_float+0x46>
 8006e14:	eb1a 0f05 	cmn.w	sl, r5
 8006e18:	f47f af70 	bne.w	8006cfc <_scanf_float+0x60>
 8006e1c:	6822      	ldr	r2, [r4, #0]
 8006e1e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006e22:	6022      	str	r2, [r4, #0]
 8006e24:	f806 3b01 	strb.w	r3, [r6], #1
 8006e28:	e7e4      	b.n	8006df4 <_scanf_float+0x158>
 8006e2a:	6822      	ldr	r2, [r4, #0]
 8006e2c:	0610      	lsls	r0, r2, #24
 8006e2e:	f57f af65 	bpl.w	8006cfc <_scanf_float+0x60>
 8006e32:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006e36:	e7f4      	b.n	8006e22 <_scanf_float+0x186>
 8006e38:	f1ba 0f00 	cmp.w	sl, #0
 8006e3c:	d10e      	bne.n	8006e5c <_scanf_float+0x1c0>
 8006e3e:	f1b9 0f00 	cmp.w	r9, #0
 8006e42:	d10e      	bne.n	8006e62 <_scanf_float+0x1c6>
 8006e44:	6822      	ldr	r2, [r4, #0]
 8006e46:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006e4a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006e4e:	d108      	bne.n	8006e62 <_scanf_float+0x1c6>
 8006e50:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006e54:	6022      	str	r2, [r4, #0]
 8006e56:	f04f 0a01 	mov.w	sl, #1
 8006e5a:	e7e3      	b.n	8006e24 <_scanf_float+0x188>
 8006e5c:	f1ba 0f02 	cmp.w	sl, #2
 8006e60:	d055      	beq.n	8006f0e <_scanf_float+0x272>
 8006e62:	2d01      	cmp	r5, #1
 8006e64:	d002      	beq.n	8006e6c <_scanf_float+0x1d0>
 8006e66:	2d04      	cmp	r5, #4
 8006e68:	f47f af48 	bne.w	8006cfc <_scanf_float+0x60>
 8006e6c:	3501      	adds	r5, #1
 8006e6e:	b2ed      	uxtb	r5, r5
 8006e70:	e7d8      	b.n	8006e24 <_scanf_float+0x188>
 8006e72:	f1ba 0f01 	cmp.w	sl, #1
 8006e76:	f47f af41 	bne.w	8006cfc <_scanf_float+0x60>
 8006e7a:	f04f 0a02 	mov.w	sl, #2
 8006e7e:	e7d1      	b.n	8006e24 <_scanf_float+0x188>
 8006e80:	b97d      	cbnz	r5, 8006ea2 <_scanf_float+0x206>
 8006e82:	f1b9 0f00 	cmp.w	r9, #0
 8006e86:	f47f af3c 	bne.w	8006d02 <_scanf_float+0x66>
 8006e8a:	6822      	ldr	r2, [r4, #0]
 8006e8c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006e90:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006e94:	f47f af39 	bne.w	8006d0a <_scanf_float+0x6e>
 8006e98:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006e9c:	6022      	str	r2, [r4, #0]
 8006e9e:	2501      	movs	r5, #1
 8006ea0:	e7c0      	b.n	8006e24 <_scanf_float+0x188>
 8006ea2:	2d03      	cmp	r5, #3
 8006ea4:	d0e2      	beq.n	8006e6c <_scanf_float+0x1d0>
 8006ea6:	2d05      	cmp	r5, #5
 8006ea8:	e7de      	b.n	8006e68 <_scanf_float+0x1cc>
 8006eaa:	2d02      	cmp	r5, #2
 8006eac:	f47f af26 	bne.w	8006cfc <_scanf_float+0x60>
 8006eb0:	2503      	movs	r5, #3
 8006eb2:	e7b7      	b.n	8006e24 <_scanf_float+0x188>
 8006eb4:	2d06      	cmp	r5, #6
 8006eb6:	f47f af21 	bne.w	8006cfc <_scanf_float+0x60>
 8006eba:	2507      	movs	r5, #7
 8006ebc:	e7b2      	b.n	8006e24 <_scanf_float+0x188>
 8006ebe:	6822      	ldr	r2, [r4, #0]
 8006ec0:	0591      	lsls	r1, r2, #22
 8006ec2:	f57f af1b 	bpl.w	8006cfc <_scanf_float+0x60>
 8006ec6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006eca:	6022      	str	r2, [r4, #0]
 8006ecc:	f8cd 9004 	str.w	r9, [sp, #4]
 8006ed0:	e7a8      	b.n	8006e24 <_scanf_float+0x188>
 8006ed2:	6822      	ldr	r2, [r4, #0]
 8006ed4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006ed8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006edc:	d006      	beq.n	8006eec <_scanf_float+0x250>
 8006ede:	0550      	lsls	r0, r2, #21
 8006ee0:	f57f af0c 	bpl.w	8006cfc <_scanf_float+0x60>
 8006ee4:	f1b9 0f00 	cmp.w	r9, #0
 8006ee8:	f43f af0f 	beq.w	8006d0a <_scanf_float+0x6e>
 8006eec:	0591      	lsls	r1, r2, #22
 8006eee:	bf58      	it	pl
 8006ef0:	9901      	ldrpl	r1, [sp, #4]
 8006ef2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006ef6:	bf58      	it	pl
 8006ef8:	eba9 0101 	subpl.w	r1, r9, r1
 8006efc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006f00:	bf58      	it	pl
 8006f02:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006f06:	6022      	str	r2, [r4, #0]
 8006f08:	f04f 0900 	mov.w	r9, #0
 8006f0c:	e78a      	b.n	8006e24 <_scanf_float+0x188>
 8006f0e:	f04f 0a03 	mov.w	sl, #3
 8006f12:	e787      	b.n	8006e24 <_scanf_float+0x188>
 8006f14:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006f18:	4639      	mov	r1, r7
 8006f1a:	4640      	mov	r0, r8
 8006f1c:	4798      	blx	r3
 8006f1e:	2800      	cmp	r0, #0
 8006f20:	f43f aedf 	beq.w	8006ce2 <_scanf_float+0x46>
 8006f24:	e6ea      	b.n	8006cfc <_scanf_float+0x60>
 8006f26:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006f2a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006f2e:	463a      	mov	r2, r7
 8006f30:	4640      	mov	r0, r8
 8006f32:	4798      	blx	r3
 8006f34:	6923      	ldr	r3, [r4, #16]
 8006f36:	3b01      	subs	r3, #1
 8006f38:	6123      	str	r3, [r4, #16]
 8006f3a:	e6ec      	b.n	8006d16 <_scanf_float+0x7a>
 8006f3c:	1e6b      	subs	r3, r5, #1
 8006f3e:	2b06      	cmp	r3, #6
 8006f40:	d825      	bhi.n	8006f8e <_scanf_float+0x2f2>
 8006f42:	2d02      	cmp	r5, #2
 8006f44:	d836      	bhi.n	8006fb4 <_scanf_float+0x318>
 8006f46:	455e      	cmp	r6, fp
 8006f48:	f67f aee8 	bls.w	8006d1c <_scanf_float+0x80>
 8006f4c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006f50:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006f54:	463a      	mov	r2, r7
 8006f56:	4640      	mov	r0, r8
 8006f58:	4798      	blx	r3
 8006f5a:	6923      	ldr	r3, [r4, #16]
 8006f5c:	3b01      	subs	r3, #1
 8006f5e:	6123      	str	r3, [r4, #16]
 8006f60:	e7f1      	b.n	8006f46 <_scanf_float+0x2aa>
 8006f62:	9802      	ldr	r0, [sp, #8]
 8006f64:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006f68:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006f6c:	9002      	str	r0, [sp, #8]
 8006f6e:	463a      	mov	r2, r7
 8006f70:	4640      	mov	r0, r8
 8006f72:	4798      	blx	r3
 8006f74:	6923      	ldr	r3, [r4, #16]
 8006f76:	3b01      	subs	r3, #1
 8006f78:	6123      	str	r3, [r4, #16]
 8006f7a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006f7e:	fa5f fa8a 	uxtb.w	sl, sl
 8006f82:	f1ba 0f02 	cmp.w	sl, #2
 8006f86:	d1ec      	bne.n	8006f62 <_scanf_float+0x2c6>
 8006f88:	3d03      	subs	r5, #3
 8006f8a:	b2ed      	uxtb	r5, r5
 8006f8c:	1b76      	subs	r6, r6, r5
 8006f8e:	6823      	ldr	r3, [r4, #0]
 8006f90:	05da      	lsls	r2, r3, #23
 8006f92:	d52f      	bpl.n	8006ff4 <_scanf_float+0x358>
 8006f94:	055b      	lsls	r3, r3, #21
 8006f96:	d510      	bpl.n	8006fba <_scanf_float+0x31e>
 8006f98:	455e      	cmp	r6, fp
 8006f9a:	f67f aebf 	bls.w	8006d1c <_scanf_float+0x80>
 8006f9e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006fa2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006fa6:	463a      	mov	r2, r7
 8006fa8:	4640      	mov	r0, r8
 8006faa:	4798      	blx	r3
 8006fac:	6923      	ldr	r3, [r4, #16]
 8006fae:	3b01      	subs	r3, #1
 8006fb0:	6123      	str	r3, [r4, #16]
 8006fb2:	e7f1      	b.n	8006f98 <_scanf_float+0x2fc>
 8006fb4:	46aa      	mov	sl, r5
 8006fb6:	9602      	str	r6, [sp, #8]
 8006fb8:	e7df      	b.n	8006f7a <_scanf_float+0x2de>
 8006fba:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006fbe:	6923      	ldr	r3, [r4, #16]
 8006fc0:	2965      	cmp	r1, #101	; 0x65
 8006fc2:	f103 33ff 	add.w	r3, r3, #4294967295
 8006fc6:	f106 35ff 	add.w	r5, r6, #4294967295
 8006fca:	6123      	str	r3, [r4, #16]
 8006fcc:	d00c      	beq.n	8006fe8 <_scanf_float+0x34c>
 8006fce:	2945      	cmp	r1, #69	; 0x45
 8006fd0:	d00a      	beq.n	8006fe8 <_scanf_float+0x34c>
 8006fd2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006fd6:	463a      	mov	r2, r7
 8006fd8:	4640      	mov	r0, r8
 8006fda:	4798      	blx	r3
 8006fdc:	6923      	ldr	r3, [r4, #16]
 8006fde:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006fe2:	3b01      	subs	r3, #1
 8006fe4:	1eb5      	subs	r5, r6, #2
 8006fe6:	6123      	str	r3, [r4, #16]
 8006fe8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006fec:	463a      	mov	r2, r7
 8006fee:	4640      	mov	r0, r8
 8006ff0:	4798      	blx	r3
 8006ff2:	462e      	mov	r6, r5
 8006ff4:	6825      	ldr	r5, [r4, #0]
 8006ff6:	f015 0510 	ands.w	r5, r5, #16
 8006ffa:	d159      	bne.n	80070b0 <_scanf_float+0x414>
 8006ffc:	7035      	strb	r5, [r6, #0]
 8006ffe:	6823      	ldr	r3, [r4, #0]
 8007000:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007004:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007008:	d11b      	bne.n	8007042 <_scanf_float+0x3a6>
 800700a:	9b01      	ldr	r3, [sp, #4]
 800700c:	454b      	cmp	r3, r9
 800700e:	eba3 0209 	sub.w	r2, r3, r9
 8007012:	d123      	bne.n	800705c <_scanf_float+0x3c0>
 8007014:	2200      	movs	r2, #0
 8007016:	4659      	mov	r1, fp
 8007018:	4640      	mov	r0, r8
 800701a:	f000 fe97 	bl	8007d4c <_strtod_r>
 800701e:	6822      	ldr	r2, [r4, #0]
 8007020:	9b03      	ldr	r3, [sp, #12]
 8007022:	f012 0f02 	tst.w	r2, #2
 8007026:	ec57 6b10 	vmov	r6, r7, d0
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	d021      	beq.n	8007072 <_scanf_float+0x3d6>
 800702e:	9903      	ldr	r1, [sp, #12]
 8007030:	1d1a      	adds	r2, r3, #4
 8007032:	600a      	str	r2, [r1, #0]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	e9c3 6700 	strd	r6, r7, [r3]
 800703a:	68e3      	ldr	r3, [r4, #12]
 800703c:	3301      	adds	r3, #1
 800703e:	60e3      	str	r3, [r4, #12]
 8007040:	e66d      	b.n	8006d1e <_scanf_float+0x82>
 8007042:	9b04      	ldr	r3, [sp, #16]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d0e5      	beq.n	8007014 <_scanf_float+0x378>
 8007048:	9905      	ldr	r1, [sp, #20]
 800704a:	230a      	movs	r3, #10
 800704c:	462a      	mov	r2, r5
 800704e:	3101      	adds	r1, #1
 8007050:	4640      	mov	r0, r8
 8007052:	f000 ff03 	bl	8007e5c <_strtol_r>
 8007056:	9b04      	ldr	r3, [sp, #16]
 8007058:	9e05      	ldr	r6, [sp, #20]
 800705a:	1ac2      	subs	r2, r0, r3
 800705c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007060:	429e      	cmp	r6, r3
 8007062:	bf28      	it	cs
 8007064:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007068:	4912      	ldr	r1, [pc, #72]	; (80070b4 <_scanf_float+0x418>)
 800706a:	4630      	mov	r0, r6
 800706c:	f000 f82c 	bl	80070c8 <siprintf>
 8007070:	e7d0      	b.n	8007014 <_scanf_float+0x378>
 8007072:	9903      	ldr	r1, [sp, #12]
 8007074:	f012 0f04 	tst.w	r2, #4
 8007078:	f103 0204 	add.w	r2, r3, #4
 800707c:	600a      	str	r2, [r1, #0]
 800707e:	d1d9      	bne.n	8007034 <_scanf_float+0x398>
 8007080:	f8d3 8000 	ldr.w	r8, [r3]
 8007084:	ee10 2a10 	vmov	r2, s0
 8007088:	ee10 0a10 	vmov	r0, s0
 800708c:	463b      	mov	r3, r7
 800708e:	4639      	mov	r1, r7
 8007090:	f7f9 fd4c 	bl	8000b2c <__aeabi_dcmpun>
 8007094:	b128      	cbz	r0, 80070a2 <_scanf_float+0x406>
 8007096:	4808      	ldr	r0, [pc, #32]	; (80070b8 <_scanf_float+0x41c>)
 8007098:	f000 f810 	bl	80070bc <nanf>
 800709c:	ed88 0a00 	vstr	s0, [r8]
 80070a0:	e7cb      	b.n	800703a <_scanf_float+0x39e>
 80070a2:	4630      	mov	r0, r6
 80070a4:	4639      	mov	r1, r7
 80070a6:	f7f9 fd9f 	bl	8000be8 <__aeabi_d2f>
 80070aa:	f8c8 0000 	str.w	r0, [r8]
 80070ae:	e7c4      	b.n	800703a <_scanf_float+0x39e>
 80070b0:	2500      	movs	r5, #0
 80070b2:	e634      	b.n	8006d1e <_scanf_float+0x82>
 80070b4:	0800b4d8 	.word	0x0800b4d8
 80070b8:	0800b8e0 	.word	0x0800b8e0

080070bc <nanf>:
 80070bc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80070c4 <nanf+0x8>
 80070c0:	4770      	bx	lr
 80070c2:	bf00      	nop
 80070c4:	7fc00000 	.word	0x7fc00000

080070c8 <siprintf>:
 80070c8:	b40e      	push	{r1, r2, r3}
 80070ca:	b500      	push	{lr}
 80070cc:	b09c      	sub	sp, #112	; 0x70
 80070ce:	ab1d      	add	r3, sp, #116	; 0x74
 80070d0:	9002      	str	r0, [sp, #8]
 80070d2:	9006      	str	r0, [sp, #24]
 80070d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80070d8:	4809      	ldr	r0, [pc, #36]	; (8007100 <siprintf+0x38>)
 80070da:	9107      	str	r1, [sp, #28]
 80070dc:	9104      	str	r1, [sp, #16]
 80070de:	4909      	ldr	r1, [pc, #36]	; (8007104 <siprintf+0x3c>)
 80070e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80070e4:	9105      	str	r1, [sp, #20]
 80070e6:	6800      	ldr	r0, [r0, #0]
 80070e8:	9301      	str	r3, [sp, #4]
 80070ea:	a902      	add	r1, sp, #8
 80070ec:	f002 fee2 	bl	8009eb4 <_svfiprintf_r>
 80070f0:	9b02      	ldr	r3, [sp, #8]
 80070f2:	2200      	movs	r2, #0
 80070f4:	701a      	strb	r2, [r3, #0]
 80070f6:	b01c      	add	sp, #112	; 0x70
 80070f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80070fc:	b003      	add	sp, #12
 80070fe:	4770      	bx	lr
 8007100:	2000000c 	.word	0x2000000c
 8007104:	ffff0208 	.word	0xffff0208

08007108 <sulp>:
 8007108:	b570      	push	{r4, r5, r6, lr}
 800710a:	4604      	mov	r4, r0
 800710c:	460d      	mov	r5, r1
 800710e:	ec45 4b10 	vmov	d0, r4, r5
 8007112:	4616      	mov	r6, r2
 8007114:	f002 fc2c 	bl	8009970 <__ulp>
 8007118:	ec51 0b10 	vmov	r0, r1, d0
 800711c:	b17e      	cbz	r6, 800713e <sulp+0x36>
 800711e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007122:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007126:	2b00      	cmp	r3, #0
 8007128:	dd09      	ble.n	800713e <sulp+0x36>
 800712a:	051b      	lsls	r3, r3, #20
 800712c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007130:	2400      	movs	r4, #0
 8007132:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007136:	4622      	mov	r2, r4
 8007138:	462b      	mov	r3, r5
 800713a:	f7f9 fa5d 	bl	80005f8 <__aeabi_dmul>
 800713e:	bd70      	pop	{r4, r5, r6, pc}

08007140 <_strtod_l>:
 8007140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007144:	ed2d 8b02 	vpush	{d8}
 8007148:	b09d      	sub	sp, #116	; 0x74
 800714a:	461f      	mov	r7, r3
 800714c:	2300      	movs	r3, #0
 800714e:	9318      	str	r3, [sp, #96]	; 0x60
 8007150:	4ba2      	ldr	r3, [pc, #648]	; (80073dc <_strtod_l+0x29c>)
 8007152:	9213      	str	r2, [sp, #76]	; 0x4c
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	9305      	str	r3, [sp, #20]
 8007158:	4604      	mov	r4, r0
 800715a:	4618      	mov	r0, r3
 800715c:	4688      	mov	r8, r1
 800715e:	f7f9 f837 	bl	80001d0 <strlen>
 8007162:	f04f 0a00 	mov.w	sl, #0
 8007166:	4605      	mov	r5, r0
 8007168:	f04f 0b00 	mov.w	fp, #0
 800716c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007170:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007172:	781a      	ldrb	r2, [r3, #0]
 8007174:	2a2b      	cmp	r2, #43	; 0x2b
 8007176:	d04e      	beq.n	8007216 <_strtod_l+0xd6>
 8007178:	d83b      	bhi.n	80071f2 <_strtod_l+0xb2>
 800717a:	2a0d      	cmp	r2, #13
 800717c:	d834      	bhi.n	80071e8 <_strtod_l+0xa8>
 800717e:	2a08      	cmp	r2, #8
 8007180:	d834      	bhi.n	80071ec <_strtod_l+0xac>
 8007182:	2a00      	cmp	r2, #0
 8007184:	d03e      	beq.n	8007204 <_strtod_l+0xc4>
 8007186:	2300      	movs	r3, #0
 8007188:	930a      	str	r3, [sp, #40]	; 0x28
 800718a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800718c:	7833      	ldrb	r3, [r6, #0]
 800718e:	2b30      	cmp	r3, #48	; 0x30
 8007190:	f040 80b0 	bne.w	80072f4 <_strtod_l+0x1b4>
 8007194:	7873      	ldrb	r3, [r6, #1]
 8007196:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800719a:	2b58      	cmp	r3, #88	; 0x58
 800719c:	d168      	bne.n	8007270 <_strtod_l+0x130>
 800719e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071a0:	9301      	str	r3, [sp, #4]
 80071a2:	ab18      	add	r3, sp, #96	; 0x60
 80071a4:	9702      	str	r7, [sp, #8]
 80071a6:	9300      	str	r3, [sp, #0]
 80071a8:	4a8d      	ldr	r2, [pc, #564]	; (80073e0 <_strtod_l+0x2a0>)
 80071aa:	ab19      	add	r3, sp, #100	; 0x64
 80071ac:	a917      	add	r1, sp, #92	; 0x5c
 80071ae:	4620      	mov	r0, r4
 80071b0:	f001 fd38 	bl	8008c24 <__gethex>
 80071b4:	f010 0707 	ands.w	r7, r0, #7
 80071b8:	4605      	mov	r5, r0
 80071ba:	d005      	beq.n	80071c8 <_strtod_l+0x88>
 80071bc:	2f06      	cmp	r7, #6
 80071be:	d12c      	bne.n	800721a <_strtod_l+0xda>
 80071c0:	3601      	adds	r6, #1
 80071c2:	2300      	movs	r3, #0
 80071c4:	9617      	str	r6, [sp, #92]	; 0x5c
 80071c6:	930a      	str	r3, [sp, #40]	; 0x28
 80071c8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	f040 8590 	bne.w	8007cf0 <_strtod_l+0xbb0>
 80071d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071d2:	b1eb      	cbz	r3, 8007210 <_strtod_l+0xd0>
 80071d4:	4652      	mov	r2, sl
 80071d6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80071da:	ec43 2b10 	vmov	d0, r2, r3
 80071de:	b01d      	add	sp, #116	; 0x74
 80071e0:	ecbd 8b02 	vpop	{d8}
 80071e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071e8:	2a20      	cmp	r2, #32
 80071ea:	d1cc      	bne.n	8007186 <_strtod_l+0x46>
 80071ec:	3301      	adds	r3, #1
 80071ee:	9317      	str	r3, [sp, #92]	; 0x5c
 80071f0:	e7be      	b.n	8007170 <_strtod_l+0x30>
 80071f2:	2a2d      	cmp	r2, #45	; 0x2d
 80071f4:	d1c7      	bne.n	8007186 <_strtod_l+0x46>
 80071f6:	2201      	movs	r2, #1
 80071f8:	920a      	str	r2, [sp, #40]	; 0x28
 80071fa:	1c5a      	adds	r2, r3, #1
 80071fc:	9217      	str	r2, [sp, #92]	; 0x5c
 80071fe:	785b      	ldrb	r3, [r3, #1]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d1c2      	bne.n	800718a <_strtod_l+0x4a>
 8007204:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007206:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800720a:	2b00      	cmp	r3, #0
 800720c:	f040 856e 	bne.w	8007cec <_strtod_l+0xbac>
 8007210:	4652      	mov	r2, sl
 8007212:	465b      	mov	r3, fp
 8007214:	e7e1      	b.n	80071da <_strtod_l+0x9a>
 8007216:	2200      	movs	r2, #0
 8007218:	e7ee      	b.n	80071f8 <_strtod_l+0xb8>
 800721a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800721c:	b13a      	cbz	r2, 800722e <_strtod_l+0xee>
 800721e:	2135      	movs	r1, #53	; 0x35
 8007220:	a81a      	add	r0, sp, #104	; 0x68
 8007222:	f002 fcb0 	bl	8009b86 <__copybits>
 8007226:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007228:	4620      	mov	r0, r4
 800722a:	f002 f86f 	bl	800930c <_Bfree>
 800722e:	3f01      	subs	r7, #1
 8007230:	2f04      	cmp	r7, #4
 8007232:	d806      	bhi.n	8007242 <_strtod_l+0x102>
 8007234:	e8df f007 	tbb	[pc, r7]
 8007238:	1714030a 	.word	0x1714030a
 800723c:	0a          	.byte	0x0a
 800723d:	00          	.byte	0x00
 800723e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8007242:	0728      	lsls	r0, r5, #28
 8007244:	d5c0      	bpl.n	80071c8 <_strtod_l+0x88>
 8007246:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800724a:	e7bd      	b.n	80071c8 <_strtod_l+0x88>
 800724c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8007250:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007252:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007256:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800725a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800725e:	e7f0      	b.n	8007242 <_strtod_l+0x102>
 8007260:	f8df b180 	ldr.w	fp, [pc, #384]	; 80073e4 <_strtod_l+0x2a4>
 8007264:	e7ed      	b.n	8007242 <_strtod_l+0x102>
 8007266:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800726a:	f04f 3aff 	mov.w	sl, #4294967295
 800726e:	e7e8      	b.n	8007242 <_strtod_l+0x102>
 8007270:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007272:	1c5a      	adds	r2, r3, #1
 8007274:	9217      	str	r2, [sp, #92]	; 0x5c
 8007276:	785b      	ldrb	r3, [r3, #1]
 8007278:	2b30      	cmp	r3, #48	; 0x30
 800727a:	d0f9      	beq.n	8007270 <_strtod_l+0x130>
 800727c:	2b00      	cmp	r3, #0
 800727e:	d0a3      	beq.n	80071c8 <_strtod_l+0x88>
 8007280:	2301      	movs	r3, #1
 8007282:	f04f 0900 	mov.w	r9, #0
 8007286:	9304      	str	r3, [sp, #16]
 8007288:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800728a:	9308      	str	r3, [sp, #32]
 800728c:	f8cd 901c 	str.w	r9, [sp, #28]
 8007290:	464f      	mov	r7, r9
 8007292:	220a      	movs	r2, #10
 8007294:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8007296:	7806      	ldrb	r6, [r0, #0]
 8007298:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800729c:	b2d9      	uxtb	r1, r3
 800729e:	2909      	cmp	r1, #9
 80072a0:	d92a      	bls.n	80072f8 <_strtod_l+0x1b8>
 80072a2:	9905      	ldr	r1, [sp, #20]
 80072a4:	462a      	mov	r2, r5
 80072a6:	f002 ff1f 	bl	800a0e8 <strncmp>
 80072aa:	b398      	cbz	r0, 8007314 <_strtod_l+0x1d4>
 80072ac:	2000      	movs	r0, #0
 80072ae:	4632      	mov	r2, r6
 80072b0:	463d      	mov	r5, r7
 80072b2:	9005      	str	r0, [sp, #20]
 80072b4:	4603      	mov	r3, r0
 80072b6:	2a65      	cmp	r2, #101	; 0x65
 80072b8:	d001      	beq.n	80072be <_strtod_l+0x17e>
 80072ba:	2a45      	cmp	r2, #69	; 0x45
 80072bc:	d118      	bne.n	80072f0 <_strtod_l+0x1b0>
 80072be:	b91d      	cbnz	r5, 80072c8 <_strtod_l+0x188>
 80072c0:	9a04      	ldr	r2, [sp, #16]
 80072c2:	4302      	orrs	r2, r0
 80072c4:	d09e      	beq.n	8007204 <_strtod_l+0xc4>
 80072c6:	2500      	movs	r5, #0
 80072c8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80072cc:	f108 0201 	add.w	r2, r8, #1
 80072d0:	9217      	str	r2, [sp, #92]	; 0x5c
 80072d2:	f898 2001 	ldrb.w	r2, [r8, #1]
 80072d6:	2a2b      	cmp	r2, #43	; 0x2b
 80072d8:	d075      	beq.n	80073c6 <_strtod_l+0x286>
 80072da:	2a2d      	cmp	r2, #45	; 0x2d
 80072dc:	d07b      	beq.n	80073d6 <_strtod_l+0x296>
 80072de:	f04f 0c00 	mov.w	ip, #0
 80072e2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80072e6:	2909      	cmp	r1, #9
 80072e8:	f240 8082 	bls.w	80073f0 <_strtod_l+0x2b0>
 80072ec:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80072f0:	2600      	movs	r6, #0
 80072f2:	e09d      	b.n	8007430 <_strtod_l+0x2f0>
 80072f4:	2300      	movs	r3, #0
 80072f6:	e7c4      	b.n	8007282 <_strtod_l+0x142>
 80072f8:	2f08      	cmp	r7, #8
 80072fa:	bfd8      	it	le
 80072fc:	9907      	ldrle	r1, [sp, #28]
 80072fe:	f100 0001 	add.w	r0, r0, #1
 8007302:	bfda      	itte	le
 8007304:	fb02 3301 	mlale	r3, r2, r1, r3
 8007308:	9307      	strle	r3, [sp, #28]
 800730a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800730e:	3701      	adds	r7, #1
 8007310:	9017      	str	r0, [sp, #92]	; 0x5c
 8007312:	e7bf      	b.n	8007294 <_strtod_l+0x154>
 8007314:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007316:	195a      	adds	r2, r3, r5
 8007318:	9217      	str	r2, [sp, #92]	; 0x5c
 800731a:	5d5a      	ldrb	r2, [r3, r5]
 800731c:	2f00      	cmp	r7, #0
 800731e:	d037      	beq.n	8007390 <_strtod_l+0x250>
 8007320:	9005      	str	r0, [sp, #20]
 8007322:	463d      	mov	r5, r7
 8007324:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007328:	2b09      	cmp	r3, #9
 800732a:	d912      	bls.n	8007352 <_strtod_l+0x212>
 800732c:	2301      	movs	r3, #1
 800732e:	e7c2      	b.n	80072b6 <_strtod_l+0x176>
 8007330:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007332:	1c5a      	adds	r2, r3, #1
 8007334:	9217      	str	r2, [sp, #92]	; 0x5c
 8007336:	785a      	ldrb	r2, [r3, #1]
 8007338:	3001      	adds	r0, #1
 800733a:	2a30      	cmp	r2, #48	; 0x30
 800733c:	d0f8      	beq.n	8007330 <_strtod_l+0x1f0>
 800733e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007342:	2b08      	cmp	r3, #8
 8007344:	f200 84d9 	bhi.w	8007cfa <_strtod_l+0xbba>
 8007348:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800734a:	9005      	str	r0, [sp, #20]
 800734c:	2000      	movs	r0, #0
 800734e:	9308      	str	r3, [sp, #32]
 8007350:	4605      	mov	r5, r0
 8007352:	3a30      	subs	r2, #48	; 0x30
 8007354:	f100 0301 	add.w	r3, r0, #1
 8007358:	d014      	beq.n	8007384 <_strtod_l+0x244>
 800735a:	9905      	ldr	r1, [sp, #20]
 800735c:	4419      	add	r1, r3
 800735e:	9105      	str	r1, [sp, #20]
 8007360:	462b      	mov	r3, r5
 8007362:	eb00 0e05 	add.w	lr, r0, r5
 8007366:	210a      	movs	r1, #10
 8007368:	4573      	cmp	r3, lr
 800736a:	d113      	bne.n	8007394 <_strtod_l+0x254>
 800736c:	182b      	adds	r3, r5, r0
 800736e:	2b08      	cmp	r3, #8
 8007370:	f105 0501 	add.w	r5, r5, #1
 8007374:	4405      	add	r5, r0
 8007376:	dc1c      	bgt.n	80073b2 <_strtod_l+0x272>
 8007378:	9907      	ldr	r1, [sp, #28]
 800737a:	230a      	movs	r3, #10
 800737c:	fb03 2301 	mla	r3, r3, r1, r2
 8007380:	9307      	str	r3, [sp, #28]
 8007382:	2300      	movs	r3, #0
 8007384:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007386:	1c51      	adds	r1, r2, #1
 8007388:	9117      	str	r1, [sp, #92]	; 0x5c
 800738a:	7852      	ldrb	r2, [r2, #1]
 800738c:	4618      	mov	r0, r3
 800738e:	e7c9      	b.n	8007324 <_strtod_l+0x1e4>
 8007390:	4638      	mov	r0, r7
 8007392:	e7d2      	b.n	800733a <_strtod_l+0x1fa>
 8007394:	2b08      	cmp	r3, #8
 8007396:	dc04      	bgt.n	80073a2 <_strtod_l+0x262>
 8007398:	9e07      	ldr	r6, [sp, #28]
 800739a:	434e      	muls	r6, r1
 800739c:	9607      	str	r6, [sp, #28]
 800739e:	3301      	adds	r3, #1
 80073a0:	e7e2      	b.n	8007368 <_strtod_l+0x228>
 80073a2:	f103 0c01 	add.w	ip, r3, #1
 80073a6:	f1bc 0f10 	cmp.w	ip, #16
 80073aa:	bfd8      	it	le
 80073ac:	fb01 f909 	mulle.w	r9, r1, r9
 80073b0:	e7f5      	b.n	800739e <_strtod_l+0x25e>
 80073b2:	2d10      	cmp	r5, #16
 80073b4:	bfdc      	itt	le
 80073b6:	230a      	movle	r3, #10
 80073b8:	fb03 2909 	mlale	r9, r3, r9, r2
 80073bc:	e7e1      	b.n	8007382 <_strtod_l+0x242>
 80073be:	2300      	movs	r3, #0
 80073c0:	9305      	str	r3, [sp, #20]
 80073c2:	2301      	movs	r3, #1
 80073c4:	e77c      	b.n	80072c0 <_strtod_l+0x180>
 80073c6:	f04f 0c00 	mov.w	ip, #0
 80073ca:	f108 0202 	add.w	r2, r8, #2
 80073ce:	9217      	str	r2, [sp, #92]	; 0x5c
 80073d0:	f898 2002 	ldrb.w	r2, [r8, #2]
 80073d4:	e785      	b.n	80072e2 <_strtod_l+0x1a2>
 80073d6:	f04f 0c01 	mov.w	ip, #1
 80073da:	e7f6      	b.n	80073ca <_strtod_l+0x28a>
 80073dc:	0800b728 	.word	0x0800b728
 80073e0:	0800b4e0 	.word	0x0800b4e0
 80073e4:	7ff00000 	.word	0x7ff00000
 80073e8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80073ea:	1c51      	adds	r1, r2, #1
 80073ec:	9117      	str	r1, [sp, #92]	; 0x5c
 80073ee:	7852      	ldrb	r2, [r2, #1]
 80073f0:	2a30      	cmp	r2, #48	; 0x30
 80073f2:	d0f9      	beq.n	80073e8 <_strtod_l+0x2a8>
 80073f4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80073f8:	2908      	cmp	r1, #8
 80073fa:	f63f af79 	bhi.w	80072f0 <_strtod_l+0x1b0>
 80073fe:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8007402:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007404:	9206      	str	r2, [sp, #24]
 8007406:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007408:	1c51      	adds	r1, r2, #1
 800740a:	9117      	str	r1, [sp, #92]	; 0x5c
 800740c:	7852      	ldrb	r2, [r2, #1]
 800740e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8007412:	2e09      	cmp	r6, #9
 8007414:	d937      	bls.n	8007486 <_strtod_l+0x346>
 8007416:	9e06      	ldr	r6, [sp, #24]
 8007418:	1b89      	subs	r1, r1, r6
 800741a:	2908      	cmp	r1, #8
 800741c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8007420:	dc02      	bgt.n	8007428 <_strtod_l+0x2e8>
 8007422:	4576      	cmp	r6, lr
 8007424:	bfa8      	it	ge
 8007426:	4676      	movge	r6, lr
 8007428:	f1bc 0f00 	cmp.w	ip, #0
 800742c:	d000      	beq.n	8007430 <_strtod_l+0x2f0>
 800742e:	4276      	negs	r6, r6
 8007430:	2d00      	cmp	r5, #0
 8007432:	d14d      	bne.n	80074d0 <_strtod_l+0x390>
 8007434:	9904      	ldr	r1, [sp, #16]
 8007436:	4301      	orrs	r1, r0
 8007438:	f47f aec6 	bne.w	80071c8 <_strtod_l+0x88>
 800743c:	2b00      	cmp	r3, #0
 800743e:	f47f aee1 	bne.w	8007204 <_strtod_l+0xc4>
 8007442:	2a69      	cmp	r2, #105	; 0x69
 8007444:	d027      	beq.n	8007496 <_strtod_l+0x356>
 8007446:	dc24      	bgt.n	8007492 <_strtod_l+0x352>
 8007448:	2a49      	cmp	r2, #73	; 0x49
 800744a:	d024      	beq.n	8007496 <_strtod_l+0x356>
 800744c:	2a4e      	cmp	r2, #78	; 0x4e
 800744e:	f47f aed9 	bne.w	8007204 <_strtod_l+0xc4>
 8007452:	499f      	ldr	r1, [pc, #636]	; (80076d0 <_strtod_l+0x590>)
 8007454:	a817      	add	r0, sp, #92	; 0x5c
 8007456:	f001 fe3d 	bl	80090d4 <__match>
 800745a:	2800      	cmp	r0, #0
 800745c:	f43f aed2 	beq.w	8007204 <_strtod_l+0xc4>
 8007460:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007462:	781b      	ldrb	r3, [r3, #0]
 8007464:	2b28      	cmp	r3, #40	; 0x28
 8007466:	d12d      	bne.n	80074c4 <_strtod_l+0x384>
 8007468:	499a      	ldr	r1, [pc, #616]	; (80076d4 <_strtod_l+0x594>)
 800746a:	aa1a      	add	r2, sp, #104	; 0x68
 800746c:	a817      	add	r0, sp, #92	; 0x5c
 800746e:	f001 fe45 	bl	80090fc <__hexnan>
 8007472:	2805      	cmp	r0, #5
 8007474:	d126      	bne.n	80074c4 <_strtod_l+0x384>
 8007476:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007478:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800747c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007480:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007484:	e6a0      	b.n	80071c8 <_strtod_l+0x88>
 8007486:	210a      	movs	r1, #10
 8007488:	fb01 2e0e 	mla	lr, r1, lr, r2
 800748c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007490:	e7b9      	b.n	8007406 <_strtod_l+0x2c6>
 8007492:	2a6e      	cmp	r2, #110	; 0x6e
 8007494:	e7db      	b.n	800744e <_strtod_l+0x30e>
 8007496:	4990      	ldr	r1, [pc, #576]	; (80076d8 <_strtod_l+0x598>)
 8007498:	a817      	add	r0, sp, #92	; 0x5c
 800749a:	f001 fe1b 	bl	80090d4 <__match>
 800749e:	2800      	cmp	r0, #0
 80074a0:	f43f aeb0 	beq.w	8007204 <_strtod_l+0xc4>
 80074a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80074a6:	498d      	ldr	r1, [pc, #564]	; (80076dc <_strtod_l+0x59c>)
 80074a8:	3b01      	subs	r3, #1
 80074aa:	a817      	add	r0, sp, #92	; 0x5c
 80074ac:	9317      	str	r3, [sp, #92]	; 0x5c
 80074ae:	f001 fe11 	bl	80090d4 <__match>
 80074b2:	b910      	cbnz	r0, 80074ba <_strtod_l+0x37a>
 80074b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80074b6:	3301      	adds	r3, #1
 80074b8:	9317      	str	r3, [sp, #92]	; 0x5c
 80074ba:	f8df b230 	ldr.w	fp, [pc, #560]	; 80076ec <_strtod_l+0x5ac>
 80074be:	f04f 0a00 	mov.w	sl, #0
 80074c2:	e681      	b.n	80071c8 <_strtod_l+0x88>
 80074c4:	4886      	ldr	r0, [pc, #536]	; (80076e0 <_strtod_l+0x5a0>)
 80074c6:	f002 fdf7 	bl	800a0b8 <nan>
 80074ca:	ec5b ab10 	vmov	sl, fp, d0
 80074ce:	e67b      	b.n	80071c8 <_strtod_l+0x88>
 80074d0:	9b05      	ldr	r3, [sp, #20]
 80074d2:	9807      	ldr	r0, [sp, #28]
 80074d4:	1af3      	subs	r3, r6, r3
 80074d6:	2f00      	cmp	r7, #0
 80074d8:	bf08      	it	eq
 80074da:	462f      	moveq	r7, r5
 80074dc:	2d10      	cmp	r5, #16
 80074de:	9306      	str	r3, [sp, #24]
 80074e0:	46a8      	mov	r8, r5
 80074e2:	bfa8      	it	ge
 80074e4:	f04f 0810 	movge.w	r8, #16
 80074e8:	f7f9 f80c 	bl	8000504 <__aeabi_ui2d>
 80074ec:	2d09      	cmp	r5, #9
 80074ee:	4682      	mov	sl, r0
 80074f0:	468b      	mov	fp, r1
 80074f2:	dd13      	ble.n	800751c <_strtod_l+0x3dc>
 80074f4:	4b7b      	ldr	r3, [pc, #492]	; (80076e4 <_strtod_l+0x5a4>)
 80074f6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80074fa:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80074fe:	f7f9 f87b 	bl	80005f8 <__aeabi_dmul>
 8007502:	4682      	mov	sl, r0
 8007504:	4648      	mov	r0, r9
 8007506:	468b      	mov	fp, r1
 8007508:	f7f8 fffc 	bl	8000504 <__aeabi_ui2d>
 800750c:	4602      	mov	r2, r0
 800750e:	460b      	mov	r3, r1
 8007510:	4650      	mov	r0, sl
 8007512:	4659      	mov	r1, fp
 8007514:	f7f8 feba 	bl	800028c <__adddf3>
 8007518:	4682      	mov	sl, r0
 800751a:	468b      	mov	fp, r1
 800751c:	2d0f      	cmp	r5, #15
 800751e:	dc38      	bgt.n	8007592 <_strtod_l+0x452>
 8007520:	9b06      	ldr	r3, [sp, #24]
 8007522:	2b00      	cmp	r3, #0
 8007524:	f43f ae50 	beq.w	80071c8 <_strtod_l+0x88>
 8007528:	dd24      	ble.n	8007574 <_strtod_l+0x434>
 800752a:	2b16      	cmp	r3, #22
 800752c:	dc0b      	bgt.n	8007546 <_strtod_l+0x406>
 800752e:	496d      	ldr	r1, [pc, #436]	; (80076e4 <_strtod_l+0x5a4>)
 8007530:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007534:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007538:	4652      	mov	r2, sl
 800753a:	465b      	mov	r3, fp
 800753c:	f7f9 f85c 	bl	80005f8 <__aeabi_dmul>
 8007540:	4682      	mov	sl, r0
 8007542:	468b      	mov	fp, r1
 8007544:	e640      	b.n	80071c8 <_strtod_l+0x88>
 8007546:	9a06      	ldr	r2, [sp, #24]
 8007548:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800754c:	4293      	cmp	r3, r2
 800754e:	db20      	blt.n	8007592 <_strtod_l+0x452>
 8007550:	4c64      	ldr	r4, [pc, #400]	; (80076e4 <_strtod_l+0x5a4>)
 8007552:	f1c5 050f 	rsb	r5, r5, #15
 8007556:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800755a:	4652      	mov	r2, sl
 800755c:	465b      	mov	r3, fp
 800755e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007562:	f7f9 f849 	bl	80005f8 <__aeabi_dmul>
 8007566:	9b06      	ldr	r3, [sp, #24]
 8007568:	1b5d      	subs	r5, r3, r5
 800756a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800756e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007572:	e7e3      	b.n	800753c <_strtod_l+0x3fc>
 8007574:	9b06      	ldr	r3, [sp, #24]
 8007576:	3316      	adds	r3, #22
 8007578:	db0b      	blt.n	8007592 <_strtod_l+0x452>
 800757a:	9b05      	ldr	r3, [sp, #20]
 800757c:	1b9e      	subs	r6, r3, r6
 800757e:	4b59      	ldr	r3, [pc, #356]	; (80076e4 <_strtod_l+0x5a4>)
 8007580:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8007584:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007588:	4650      	mov	r0, sl
 800758a:	4659      	mov	r1, fp
 800758c:	f7f9 f95e 	bl	800084c <__aeabi_ddiv>
 8007590:	e7d6      	b.n	8007540 <_strtod_l+0x400>
 8007592:	9b06      	ldr	r3, [sp, #24]
 8007594:	eba5 0808 	sub.w	r8, r5, r8
 8007598:	4498      	add	r8, r3
 800759a:	f1b8 0f00 	cmp.w	r8, #0
 800759e:	dd74      	ble.n	800768a <_strtod_l+0x54a>
 80075a0:	f018 030f 	ands.w	r3, r8, #15
 80075a4:	d00a      	beq.n	80075bc <_strtod_l+0x47c>
 80075a6:	494f      	ldr	r1, [pc, #316]	; (80076e4 <_strtod_l+0x5a4>)
 80075a8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80075ac:	4652      	mov	r2, sl
 80075ae:	465b      	mov	r3, fp
 80075b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80075b4:	f7f9 f820 	bl	80005f8 <__aeabi_dmul>
 80075b8:	4682      	mov	sl, r0
 80075ba:	468b      	mov	fp, r1
 80075bc:	f038 080f 	bics.w	r8, r8, #15
 80075c0:	d04f      	beq.n	8007662 <_strtod_l+0x522>
 80075c2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80075c6:	dd22      	ble.n	800760e <_strtod_l+0x4ce>
 80075c8:	2500      	movs	r5, #0
 80075ca:	462e      	mov	r6, r5
 80075cc:	9507      	str	r5, [sp, #28]
 80075ce:	9505      	str	r5, [sp, #20]
 80075d0:	2322      	movs	r3, #34	; 0x22
 80075d2:	f8df b118 	ldr.w	fp, [pc, #280]	; 80076ec <_strtod_l+0x5ac>
 80075d6:	6023      	str	r3, [r4, #0]
 80075d8:	f04f 0a00 	mov.w	sl, #0
 80075dc:	9b07      	ldr	r3, [sp, #28]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	f43f adf2 	beq.w	80071c8 <_strtod_l+0x88>
 80075e4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80075e6:	4620      	mov	r0, r4
 80075e8:	f001 fe90 	bl	800930c <_Bfree>
 80075ec:	9905      	ldr	r1, [sp, #20]
 80075ee:	4620      	mov	r0, r4
 80075f0:	f001 fe8c 	bl	800930c <_Bfree>
 80075f4:	4631      	mov	r1, r6
 80075f6:	4620      	mov	r0, r4
 80075f8:	f001 fe88 	bl	800930c <_Bfree>
 80075fc:	9907      	ldr	r1, [sp, #28]
 80075fe:	4620      	mov	r0, r4
 8007600:	f001 fe84 	bl	800930c <_Bfree>
 8007604:	4629      	mov	r1, r5
 8007606:	4620      	mov	r0, r4
 8007608:	f001 fe80 	bl	800930c <_Bfree>
 800760c:	e5dc      	b.n	80071c8 <_strtod_l+0x88>
 800760e:	4b36      	ldr	r3, [pc, #216]	; (80076e8 <_strtod_l+0x5a8>)
 8007610:	9304      	str	r3, [sp, #16]
 8007612:	2300      	movs	r3, #0
 8007614:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007618:	4650      	mov	r0, sl
 800761a:	4659      	mov	r1, fp
 800761c:	4699      	mov	r9, r3
 800761e:	f1b8 0f01 	cmp.w	r8, #1
 8007622:	dc21      	bgt.n	8007668 <_strtod_l+0x528>
 8007624:	b10b      	cbz	r3, 800762a <_strtod_l+0x4ea>
 8007626:	4682      	mov	sl, r0
 8007628:	468b      	mov	fp, r1
 800762a:	4b2f      	ldr	r3, [pc, #188]	; (80076e8 <_strtod_l+0x5a8>)
 800762c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8007630:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8007634:	4652      	mov	r2, sl
 8007636:	465b      	mov	r3, fp
 8007638:	e9d9 0100 	ldrd	r0, r1, [r9]
 800763c:	f7f8 ffdc 	bl	80005f8 <__aeabi_dmul>
 8007640:	4b2a      	ldr	r3, [pc, #168]	; (80076ec <_strtod_l+0x5ac>)
 8007642:	460a      	mov	r2, r1
 8007644:	400b      	ands	r3, r1
 8007646:	492a      	ldr	r1, [pc, #168]	; (80076f0 <_strtod_l+0x5b0>)
 8007648:	428b      	cmp	r3, r1
 800764a:	4682      	mov	sl, r0
 800764c:	d8bc      	bhi.n	80075c8 <_strtod_l+0x488>
 800764e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007652:	428b      	cmp	r3, r1
 8007654:	bf86      	itte	hi
 8007656:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80076f4 <_strtod_l+0x5b4>
 800765a:	f04f 3aff 	movhi.w	sl, #4294967295
 800765e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8007662:	2300      	movs	r3, #0
 8007664:	9304      	str	r3, [sp, #16]
 8007666:	e084      	b.n	8007772 <_strtod_l+0x632>
 8007668:	f018 0f01 	tst.w	r8, #1
 800766c:	d005      	beq.n	800767a <_strtod_l+0x53a>
 800766e:	9b04      	ldr	r3, [sp, #16]
 8007670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007674:	f7f8 ffc0 	bl	80005f8 <__aeabi_dmul>
 8007678:	2301      	movs	r3, #1
 800767a:	9a04      	ldr	r2, [sp, #16]
 800767c:	3208      	adds	r2, #8
 800767e:	f109 0901 	add.w	r9, r9, #1
 8007682:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007686:	9204      	str	r2, [sp, #16]
 8007688:	e7c9      	b.n	800761e <_strtod_l+0x4de>
 800768a:	d0ea      	beq.n	8007662 <_strtod_l+0x522>
 800768c:	f1c8 0800 	rsb	r8, r8, #0
 8007690:	f018 020f 	ands.w	r2, r8, #15
 8007694:	d00a      	beq.n	80076ac <_strtod_l+0x56c>
 8007696:	4b13      	ldr	r3, [pc, #76]	; (80076e4 <_strtod_l+0x5a4>)
 8007698:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800769c:	4650      	mov	r0, sl
 800769e:	4659      	mov	r1, fp
 80076a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076a4:	f7f9 f8d2 	bl	800084c <__aeabi_ddiv>
 80076a8:	4682      	mov	sl, r0
 80076aa:	468b      	mov	fp, r1
 80076ac:	ea5f 1828 	movs.w	r8, r8, asr #4
 80076b0:	d0d7      	beq.n	8007662 <_strtod_l+0x522>
 80076b2:	f1b8 0f1f 	cmp.w	r8, #31
 80076b6:	dd1f      	ble.n	80076f8 <_strtod_l+0x5b8>
 80076b8:	2500      	movs	r5, #0
 80076ba:	462e      	mov	r6, r5
 80076bc:	9507      	str	r5, [sp, #28]
 80076be:	9505      	str	r5, [sp, #20]
 80076c0:	2322      	movs	r3, #34	; 0x22
 80076c2:	f04f 0a00 	mov.w	sl, #0
 80076c6:	f04f 0b00 	mov.w	fp, #0
 80076ca:	6023      	str	r3, [r4, #0]
 80076cc:	e786      	b.n	80075dc <_strtod_l+0x49c>
 80076ce:	bf00      	nop
 80076d0:	0800b4b1 	.word	0x0800b4b1
 80076d4:	0800b4f4 	.word	0x0800b4f4
 80076d8:	0800b4a9 	.word	0x0800b4a9
 80076dc:	0800b634 	.word	0x0800b634
 80076e0:	0800b8e0 	.word	0x0800b8e0
 80076e4:	0800b7c0 	.word	0x0800b7c0
 80076e8:	0800b798 	.word	0x0800b798
 80076ec:	7ff00000 	.word	0x7ff00000
 80076f0:	7ca00000 	.word	0x7ca00000
 80076f4:	7fefffff 	.word	0x7fefffff
 80076f8:	f018 0310 	ands.w	r3, r8, #16
 80076fc:	bf18      	it	ne
 80076fe:	236a      	movne	r3, #106	; 0x6a
 8007700:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8007ab0 <_strtod_l+0x970>
 8007704:	9304      	str	r3, [sp, #16]
 8007706:	4650      	mov	r0, sl
 8007708:	4659      	mov	r1, fp
 800770a:	2300      	movs	r3, #0
 800770c:	f018 0f01 	tst.w	r8, #1
 8007710:	d004      	beq.n	800771c <_strtod_l+0x5dc>
 8007712:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007716:	f7f8 ff6f 	bl	80005f8 <__aeabi_dmul>
 800771a:	2301      	movs	r3, #1
 800771c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8007720:	f109 0908 	add.w	r9, r9, #8
 8007724:	d1f2      	bne.n	800770c <_strtod_l+0x5cc>
 8007726:	b10b      	cbz	r3, 800772c <_strtod_l+0x5ec>
 8007728:	4682      	mov	sl, r0
 800772a:	468b      	mov	fp, r1
 800772c:	9b04      	ldr	r3, [sp, #16]
 800772e:	b1c3      	cbz	r3, 8007762 <_strtod_l+0x622>
 8007730:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007734:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007738:	2b00      	cmp	r3, #0
 800773a:	4659      	mov	r1, fp
 800773c:	dd11      	ble.n	8007762 <_strtod_l+0x622>
 800773e:	2b1f      	cmp	r3, #31
 8007740:	f340 8124 	ble.w	800798c <_strtod_l+0x84c>
 8007744:	2b34      	cmp	r3, #52	; 0x34
 8007746:	bfde      	ittt	le
 8007748:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800774c:	f04f 33ff 	movle.w	r3, #4294967295
 8007750:	fa03 f202 	lslle.w	r2, r3, r2
 8007754:	f04f 0a00 	mov.w	sl, #0
 8007758:	bfcc      	ite	gt
 800775a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800775e:	ea02 0b01 	andle.w	fp, r2, r1
 8007762:	2200      	movs	r2, #0
 8007764:	2300      	movs	r3, #0
 8007766:	4650      	mov	r0, sl
 8007768:	4659      	mov	r1, fp
 800776a:	f7f9 f9ad 	bl	8000ac8 <__aeabi_dcmpeq>
 800776e:	2800      	cmp	r0, #0
 8007770:	d1a2      	bne.n	80076b8 <_strtod_l+0x578>
 8007772:	9b07      	ldr	r3, [sp, #28]
 8007774:	9300      	str	r3, [sp, #0]
 8007776:	9908      	ldr	r1, [sp, #32]
 8007778:	462b      	mov	r3, r5
 800777a:	463a      	mov	r2, r7
 800777c:	4620      	mov	r0, r4
 800777e:	f001 fe2d 	bl	80093dc <__s2b>
 8007782:	9007      	str	r0, [sp, #28]
 8007784:	2800      	cmp	r0, #0
 8007786:	f43f af1f 	beq.w	80075c8 <_strtod_l+0x488>
 800778a:	9b05      	ldr	r3, [sp, #20]
 800778c:	1b9e      	subs	r6, r3, r6
 800778e:	9b06      	ldr	r3, [sp, #24]
 8007790:	2b00      	cmp	r3, #0
 8007792:	bfb4      	ite	lt
 8007794:	4633      	movlt	r3, r6
 8007796:	2300      	movge	r3, #0
 8007798:	930c      	str	r3, [sp, #48]	; 0x30
 800779a:	9b06      	ldr	r3, [sp, #24]
 800779c:	2500      	movs	r5, #0
 800779e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80077a2:	9312      	str	r3, [sp, #72]	; 0x48
 80077a4:	462e      	mov	r6, r5
 80077a6:	9b07      	ldr	r3, [sp, #28]
 80077a8:	4620      	mov	r0, r4
 80077aa:	6859      	ldr	r1, [r3, #4]
 80077ac:	f001 fd6e 	bl	800928c <_Balloc>
 80077b0:	9005      	str	r0, [sp, #20]
 80077b2:	2800      	cmp	r0, #0
 80077b4:	f43f af0c 	beq.w	80075d0 <_strtod_l+0x490>
 80077b8:	9b07      	ldr	r3, [sp, #28]
 80077ba:	691a      	ldr	r2, [r3, #16]
 80077bc:	3202      	adds	r2, #2
 80077be:	f103 010c 	add.w	r1, r3, #12
 80077c2:	0092      	lsls	r2, r2, #2
 80077c4:	300c      	adds	r0, #12
 80077c6:	f001 fd53 	bl	8009270 <memcpy>
 80077ca:	ec4b ab10 	vmov	d0, sl, fp
 80077ce:	aa1a      	add	r2, sp, #104	; 0x68
 80077d0:	a919      	add	r1, sp, #100	; 0x64
 80077d2:	4620      	mov	r0, r4
 80077d4:	f002 f948 	bl	8009a68 <__d2b>
 80077d8:	ec4b ab18 	vmov	d8, sl, fp
 80077dc:	9018      	str	r0, [sp, #96]	; 0x60
 80077de:	2800      	cmp	r0, #0
 80077e0:	f43f aef6 	beq.w	80075d0 <_strtod_l+0x490>
 80077e4:	2101      	movs	r1, #1
 80077e6:	4620      	mov	r0, r4
 80077e8:	f001 fe92 	bl	8009510 <__i2b>
 80077ec:	4606      	mov	r6, r0
 80077ee:	2800      	cmp	r0, #0
 80077f0:	f43f aeee 	beq.w	80075d0 <_strtod_l+0x490>
 80077f4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80077f6:	9904      	ldr	r1, [sp, #16]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	bfab      	itete	ge
 80077fc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80077fe:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8007800:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8007802:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8007806:	bfac      	ite	ge
 8007808:	eb03 0902 	addge.w	r9, r3, r2
 800780c:	1ad7      	sublt	r7, r2, r3
 800780e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007810:	eba3 0801 	sub.w	r8, r3, r1
 8007814:	4490      	add	r8, r2
 8007816:	4ba1      	ldr	r3, [pc, #644]	; (8007a9c <_strtod_l+0x95c>)
 8007818:	f108 38ff 	add.w	r8, r8, #4294967295
 800781c:	4598      	cmp	r8, r3
 800781e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007822:	f280 80c7 	bge.w	80079b4 <_strtod_l+0x874>
 8007826:	eba3 0308 	sub.w	r3, r3, r8
 800782a:	2b1f      	cmp	r3, #31
 800782c:	eba2 0203 	sub.w	r2, r2, r3
 8007830:	f04f 0101 	mov.w	r1, #1
 8007834:	f300 80b1 	bgt.w	800799a <_strtod_l+0x85a>
 8007838:	fa01 f303 	lsl.w	r3, r1, r3
 800783c:	930d      	str	r3, [sp, #52]	; 0x34
 800783e:	2300      	movs	r3, #0
 8007840:	9308      	str	r3, [sp, #32]
 8007842:	eb09 0802 	add.w	r8, r9, r2
 8007846:	9b04      	ldr	r3, [sp, #16]
 8007848:	45c1      	cmp	r9, r8
 800784a:	4417      	add	r7, r2
 800784c:	441f      	add	r7, r3
 800784e:	464b      	mov	r3, r9
 8007850:	bfa8      	it	ge
 8007852:	4643      	movge	r3, r8
 8007854:	42bb      	cmp	r3, r7
 8007856:	bfa8      	it	ge
 8007858:	463b      	movge	r3, r7
 800785a:	2b00      	cmp	r3, #0
 800785c:	bfc2      	ittt	gt
 800785e:	eba8 0803 	subgt.w	r8, r8, r3
 8007862:	1aff      	subgt	r7, r7, r3
 8007864:	eba9 0903 	subgt.w	r9, r9, r3
 8007868:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800786a:	2b00      	cmp	r3, #0
 800786c:	dd17      	ble.n	800789e <_strtod_l+0x75e>
 800786e:	4631      	mov	r1, r6
 8007870:	461a      	mov	r2, r3
 8007872:	4620      	mov	r0, r4
 8007874:	f001 ff0c 	bl	8009690 <__pow5mult>
 8007878:	4606      	mov	r6, r0
 800787a:	2800      	cmp	r0, #0
 800787c:	f43f aea8 	beq.w	80075d0 <_strtod_l+0x490>
 8007880:	4601      	mov	r1, r0
 8007882:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007884:	4620      	mov	r0, r4
 8007886:	f001 fe59 	bl	800953c <__multiply>
 800788a:	900b      	str	r0, [sp, #44]	; 0x2c
 800788c:	2800      	cmp	r0, #0
 800788e:	f43f ae9f 	beq.w	80075d0 <_strtod_l+0x490>
 8007892:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007894:	4620      	mov	r0, r4
 8007896:	f001 fd39 	bl	800930c <_Bfree>
 800789a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800789c:	9318      	str	r3, [sp, #96]	; 0x60
 800789e:	f1b8 0f00 	cmp.w	r8, #0
 80078a2:	f300 808c 	bgt.w	80079be <_strtod_l+0x87e>
 80078a6:	9b06      	ldr	r3, [sp, #24]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	dd08      	ble.n	80078be <_strtod_l+0x77e>
 80078ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80078ae:	9905      	ldr	r1, [sp, #20]
 80078b0:	4620      	mov	r0, r4
 80078b2:	f001 feed 	bl	8009690 <__pow5mult>
 80078b6:	9005      	str	r0, [sp, #20]
 80078b8:	2800      	cmp	r0, #0
 80078ba:	f43f ae89 	beq.w	80075d0 <_strtod_l+0x490>
 80078be:	2f00      	cmp	r7, #0
 80078c0:	dd08      	ble.n	80078d4 <_strtod_l+0x794>
 80078c2:	9905      	ldr	r1, [sp, #20]
 80078c4:	463a      	mov	r2, r7
 80078c6:	4620      	mov	r0, r4
 80078c8:	f001 ff3c 	bl	8009744 <__lshift>
 80078cc:	9005      	str	r0, [sp, #20]
 80078ce:	2800      	cmp	r0, #0
 80078d0:	f43f ae7e 	beq.w	80075d0 <_strtod_l+0x490>
 80078d4:	f1b9 0f00 	cmp.w	r9, #0
 80078d8:	dd08      	ble.n	80078ec <_strtod_l+0x7ac>
 80078da:	4631      	mov	r1, r6
 80078dc:	464a      	mov	r2, r9
 80078de:	4620      	mov	r0, r4
 80078e0:	f001 ff30 	bl	8009744 <__lshift>
 80078e4:	4606      	mov	r6, r0
 80078e6:	2800      	cmp	r0, #0
 80078e8:	f43f ae72 	beq.w	80075d0 <_strtod_l+0x490>
 80078ec:	9a05      	ldr	r2, [sp, #20]
 80078ee:	9918      	ldr	r1, [sp, #96]	; 0x60
 80078f0:	4620      	mov	r0, r4
 80078f2:	f001 ffb3 	bl	800985c <__mdiff>
 80078f6:	4605      	mov	r5, r0
 80078f8:	2800      	cmp	r0, #0
 80078fa:	f43f ae69 	beq.w	80075d0 <_strtod_l+0x490>
 80078fe:	68c3      	ldr	r3, [r0, #12]
 8007900:	930b      	str	r3, [sp, #44]	; 0x2c
 8007902:	2300      	movs	r3, #0
 8007904:	60c3      	str	r3, [r0, #12]
 8007906:	4631      	mov	r1, r6
 8007908:	f001 ff8c 	bl	8009824 <__mcmp>
 800790c:	2800      	cmp	r0, #0
 800790e:	da60      	bge.n	80079d2 <_strtod_l+0x892>
 8007910:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007912:	ea53 030a 	orrs.w	r3, r3, sl
 8007916:	f040 8082 	bne.w	8007a1e <_strtod_l+0x8de>
 800791a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800791e:	2b00      	cmp	r3, #0
 8007920:	d17d      	bne.n	8007a1e <_strtod_l+0x8de>
 8007922:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007926:	0d1b      	lsrs	r3, r3, #20
 8007928:	051b      	lsls	r3, r3, #20
 800792a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800792e:	d976      	bls.n	8007a1e <_strtod_l+0x8de>
 8007930:	696b      	ldr	r3, [r5, #20]
 8007932:	b913      	cbnz	r3, 800793a <_strtod_l+0x7fa>
 8007934:	692b      	ldr	r3, [r5, #16]
 8007936:	2b01      	cmp	r3, #1
 8007938:	dd71      	ble.n	8007a1e <_strtod_l+0x8de>
 800793a:	4629      	mov	r1, r5
 800793c:	2201      	movs	r2, #1
 800793e:	4620      	mov	r0, r4
 8007940:	f001 ff00 	bl	8009744 <__lshift>
 8007944:	4631      	mov	r1, r6
 8007946:	4605      	mov	r5, r0
 8007948:	f001 ff6c 	bl	8009824 <__mcmp>
 800794c:	2800      	cmp	r0, #0
 800794e:	dd66      	ble.n	8007a1e <_strtod_l+0x8de>
 8007950:	9904      	ldr	r1, [sp, #16]
 8007952:	4a53      	ldr	r2, [pc, #332]	; (8007aa0 <_strtod_l+0x960>)
 8007954:	465b      	mov	r3, fp
 8007956:	2900      	cmp	r1, #0
 8007958:	f000 8081 	beq.w	8007a5e <_strtod_l+0x91e>
 800795c:	ea02 010b 	and.w	r1, r2, fp
 8007960:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007964:	dc7b      	bgt.n	8007a5e <_strtod_l+0x91e>
 8007966:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800796a:	f77f aea9 	ble.w	80076c0 <_strtod_l+0x580>
 800796e:	4b4d      	ldr	r3, [pc, #308]	; (8007aa4 <_strtod_l+0x964>)
 8007970:	4650      	mov	r0, sl
 8007972:	4659      	mov	r1, fp
 8007974:	2200      	movs	r2, #0
 8007976:	f7f8 fe3f 	bl	80005f8 <__aeabi_dmul>
 800797a:	460b      	mov	r3, r1
 800797c:	4303      	orrs	r3, r0
 800797e:	bf08      	it	eq
 8007980:	2322      	moveq	r3, #34	; 0x22
 8007982:	4682      	mov	sl, r0
 8007984:	468b      	mov	fp, r1
 8007986:	bf08      	it	eq
 8007988:	6023      	streq	r3, [r4, #0]
 800798a:	e62b      	b.n	80075e4 <_strtod_l+0x4a4>
 800798c:	f04f 32ff 	mov.w	r2, #4294967295
 8007990:	fa02 f303 	lsl.w	r3, r2, r3
 8007994:	ea03 0a0a 	and.w	sl, r3, sl
 8007998:	e6e3      	b.n	8007762 <_strtod_l+0x622>
 800799a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800799e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80079a2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80079a6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80079aa:	fa01 f308 	lsl.w	r3, r1, r8
 80079ae:	9308      	str	r3, [sp, #32]
 80079b0:	910d      	str	r1, [sp, #52]	; 0x34
 80079b2:	e746      	b.n	8007842 <_strtod_l+0x702>
 80079b4:	2300      	movs	r3, #0
 80079b6:	9308      	str	r3, [sp, #32]
 80079b8:	2301      	movs	r3, #1
 80079ba:	930d      	str	r3, [sp, #52]	; 0x34
 80079bc:	e741      	b.n	8007842 <_strtod_l+0x702>
 80079be:	9918      	ldr	r1, [sp, #96]	; 0x60
 80079c0:	4642      	mov	r2, r8
 80079c2:	4620      	mov	r0, r4
 80079c4:	f001 febe 	bl	8009744 <__lshift>
 80079c8:	9018      	str	r0, [sp, #96]	; 0x60
 80079ca:	2800      	cmp	r0, #0
 80079cc:	f47f af6b 	bne.w	80078a6 <_strtod_l+0x766>
 80079d0:	e5fe      	b.n	80075d0 <_strtod_l+0x490>
 80079d2:	465f      	mov	r7, fp
 80079d4:	d16e      	bne.n	8007ab4 <_strtod_l+0x974>
 80079d6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80079d8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80079dc:	b342      	cbz	r2, 8007a30 <_strtod_l+0x8f0>
 80079de:	4a32      	ldr	r2, [pc, #200]	; (8007aa8 <_strtod_l+0x968>)
 80079e0:	4293      	cmp	r3, r2
 80079e2:	d128      	bne.n	8007a36 <_strtod_l+0x8f6>
 80079e4:	9b04      	ldr	r3, [sp, #16]
 80079e6:	4651      	mov	r1, sl
 80079e8:	b1eb      	cbz	r3, 8007a26 <_strtod_l+0x8e6>
 80079ea:	4b2d      	ldr	r3, [pc, #180]	; (8007aa0 <_strtod_l+0x960>)
 80079ec:	403b      	ands	r3, r7
 80079ee:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80079f2:	f04f 32ff 	mov.w	r2, #4294967295
 80079f6:	d819      	bhi.n	8007a2c <_strtod_l+0x8ec>
 80079f8:	0d1b      	lsrs	r3, r3, #20
 80079fa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80079fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007a02:	4299      	cmp	r1, r3
 8007a04:	d117      	bne.n	8007a36 <_strtod_l+0x8f6>
 8007a06:	4b29      	ldr	r3, [pc, #164]	; (8007aac <_strtod_l+0x96c>)
 8007a08:	429f      	cmp	r7, r3
 8007a0a:	d102      	bne.n	8007a12 <_strtod_l+0x8d2>
 8007a0c:	3101      	adds	r1, #1
 8007a0e:	f43f addf 	beq.w	80075d0 <_strtod_l+0x490>
 8007a12:	4b23      	ldr	r3, [pc, #140]	; (8007aa0 <_strtod_l+0x960>)
 8007a14:	403b      	ands	r3, r7
 8007a16:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8007a1a:	f04f 0a00 	mov.w	sl, #0
 8007a1e:	9b04      	ldr	r3, [sp, #16]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d1a4      	bne.n	800796e <_strtod_l+0x82e>
 8007a24:	e5de      	b.n	80075e4 <_strtod_l+0x4a4>
 8007a26:	f04f 33ff 	mov.w	r3, #4294967295
 8007a2a:	e7ea      	b.n	8007a02 <_strtod_l+0x8c2>
 8007a2c:	4613      	mov	r3, r2
 8007a2e:	e7e8      	b.n	8007a02 <_strtod_l+0x8c2>
 8007a30:	ea53 030a 	orrs.w	r3, r3, sl
 8007a34:	d08c      	beq.n	8007950 <_strtod_l+0x810>
 8007a36:	9b08      	ldr	r3, [sp, #32]
 8007a38:	b1db      	cbz	r3, 8007a72 <_strtod_l+0x932>
 8007a3a:	423b      	tst	r3, r7
 8007a3c:	d0ef      	beq.n	8007a1e <_strtod_l+0x8de>
 8007a3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a40:	9a04      	ldr	r2, [sp, #16]
 8007a42:	4650      	mov	r0, sl
 8007a44:	4659      	mov	r1, fp
 8007a46:	b1c3      	cbz	r3, 8007a7a <_strtod_l+0x93a>
 8007a48:	f7ff fb5e 	bl	8007108 <sulp>
 8007a4c:	4602      	mov	r2, r0
 8007a4e:	460b      	mov	r3, r1
 8007a50:	ec51 0b18 	vmov	r0, r1, d8
 8007a54:	f7f8 fc1a 	bl	800028c <__adddf3>
 8007a58:	4682      	mov	sl, r0
 8007a5a:	468b      	mov	fp, r1
 8007a5c:	e7df      	b.n	8007a1e <_strtod_l+0x8de>
 8007a5e:	4013      	ands	r3, r2
 8007a60:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007a64:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007a68:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007a6c:	f04f 3aff 	mov.w	sl, #4294967295
 8007a70:	e7d5      	b.n	8007a1e <_strtod_l+0x8de>
 8007a72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a74:	ea13 0f0a 	tst.w	r3, sl
 8007a78:	e7e0      	b.n	8007a3c <_strtod_l+0x8fc>
 8007a7a:	f7ff fb45 	bl	8007108 <sulp>
 8007a7e:	4602      	mov	r2, r0
 8007a80:	460b      	mov	r3, r1
 8007a82:	ec51 0b18 	vmov	r0, r1, d8
 8007a86:	f7f8 fbff 	bl	8000288 <__aeabi_dsub>
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	4682      	mov	sl, r0
 8007a90:	468b      	mov	fp, r1
 8007a92:	f7f9 f819 	bl	8000ac8 <__aeabi_dcmpeq>
 8007a96:	2800      	cmp	r0, #0
 8007a98:	d0c1      	beq.n	8007a1e <_strtod_l+0x8de>
 8007a9a:	e611      	b.n	80076c0 <_strtod_l+0x580>
 8007a9c:	fffffc02 	.word	0xfffffc02
 8007aa0:	7ff00000 	.word	0x7ff00000
 8007aa4:	39500000 	.word	0x39500000
 8007aa8:	000fffff 	.word	0x000fffff
 8007aac:	7fefffff 	.word	0x7fefffff
 8007ab0:	0800b508 	.word	0x0800b508
 8007ab4:	4631      	mov	r1, r6
 8007ab6:	4628      	mov	r0, r5
 8007ab8:	f002 f832 	bl	8009b20 <__ratio>
 8007abc:	ec59 8b10 	vmov	r8, r9, d0
 8007ac0:	ee10 0a10 	vmov	r0, s0
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007aca:	4649      	mov	r1, r9
 8007acc:	f7f9 f810 	bl	8000af0 <__aeabi_dcmple>
 8007ad0:	2800      	cmp	r0, #0
 8007ad2:	d07a      	beq.n	8007bca <_strtod_l+0xa8a>
 8007ad4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d04a      	beq.n	8007b70 <_strtod_l+0xa30>
 8007ada:	4b95      	ldr	r3, [pc, #596]	; (8007d30 <_strtod_l+0xbf0>)
 8007adc:	2200      	movs	r2, #0
 8007ade:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007ae2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8007d30 <_strtod_l+0xbf0>
 8007ae6:	f04f 0800 	mov.w	r8, #0
 8007aea:	4b92      	ldr	r3, [pc, #584]	; (8007d34 <_strtod_l+0xbf4>)
 8007aec:	403b      	ands	r3, r7
 8007aee:	930d      	str	r3, [sp, #52]	; 0x34
 8007af0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007af2:	4b91      	ldr	r3, [pc, #580]	; (8007d38 <_strtod_l+0xbf8>)
 8007af4:	429a      	cmp	r2, r3
 8007af6:	f040 80b0 	bne.w	8007c5a <_strtod_l+0xb1a>
 8007afa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007afe:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8007b02:	ec4b ab10 	vmov	d0, sl, fp
 8007b06:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007b0a:	f001 ff31 	bl	8009970 <__ulp>
 8007b0e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007b12:	ec53 2b10 	vmov	r2, r3, d0
 8007b16:	f7f8 fd6f 	bl	80005f8 <__aeabi_dmul>
 8007b1a:	4652      	mov	r2, sl
 8007b1c:	465b      	mov	r3, fp
 8007b1e:	f7f8 fbb5 	bl	800028c <__adddf3>
 8007b22:	460b      	mov	r3, r1
 8007b24:	4983      	ldr	r1, [pc, #524]	; (8007d34 <_strtod_l+0xbf4>)
 8007b26:	4a85      	ldr	r2, [pc, #532]	; (8007d3c <_strtod_l+0xbfc>)
 8007b28:	4019      	ands	r1, r3
 8007b2a:	4291      	cmp	r1, r2
 8007b2c:	4682      	mov	sl, r0
 8007b2e:	d960      	bls.n	8007bf2 <_strtod_l+0xab2>
 8007b30:	ee18 3a90 	vmov	r3, s17
 8007b34:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d104      	bne.n	8007b46 <_strtod_l+0xa06>
 8007b3c:	ee18 3a10 	vmov	r3, s16
 8007b40:	3301      	adds	r3, #1
 8007b42:	f43f ad45 	beq.w	80075d0 <_strtod_l+0x490>
 8007b46:	f8df b200 	ldr.w	fp, [pc, #512]	; 8007d48 <_strtod_l+0xc08>
 8007b4a:	f04f 3aff 	mov.w	sl, #4294967295
 8007b4e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007b50:	4620      	mov	r0, r4
 8007b52:	f001 fbdb 	bl	800930c <_Bfree>
 8007b56:	9905      	ldr	r1, [sp, #20]
 8007b58:	4620      	mov	r0, r4
 8007b5a:	f001 fbd7 	bl	800930c <_Bfree>
 8007b5e:	4631      	mov	r1, r6
 8007b60:	4620      	mov	r0, r4
 8007b62:	f001 fbd3 	bl	800930c <_Bfree>
 8007b66:	4629      	mov	r1, r5
 8007b68:	4620      	mov	r0, r4
 8007b6a:	f001 fbcf 	bl	800930c <_Bfree>
 8007b6e:	e61a      	b.n	80077a6 <_strtod_l+0x666>
 8007b70:	f1ba 0f00 	cmp.w	sl, #0
 8007b74:	d11b      	bne.n	8007bae <_strtod_l+0xa6e>
 8007b76:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007b7a:	b9f3      	cbnz	r3, 8007bba <_strtod_l+0xa7a>
 8007b7c:	4b6c      	ldr	r3, [pc, #432]	; (8007d30 <_strtod_l+0xbf0>)
 8007b7e:	2200      	movs	r2, #0
 8007b80:	4640      	mov	r0, r8
 8007b82:	4649      	mov	r1, r9
 8007b84:	f7f8 ffaa 	bl	8000adc <__aeabi_dcmplt>
 8007b88:	b9d0      	cbnz	r0, 8007bc0 <_strtod_l+0xa80>
 8007b8a:	4640      	mov	r0, r8
 8007b8c:	4649      	mov	r1, r9
 8007b8e:	4b6c      	ldr	r3, [pc, #432]	; (8007d40 <_strtod_l+0xc00>)
 8007b90:	2200      	movs	r2, #0
 8007b92:	f7f8 fd31 	bl	80005f8 <__aeabi_dmul>
 8007b96:	4680      	mov	r8, r0
 8007b98:	4689      	mov	r9, r1
 8007b9a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007b9e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8007ba2:	9315      	str	r3, [sp, #84]	; 0x54
 8007ba4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007ba8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007bac:	e79d      	b.n	8007aea <_strtod_l+0x9aa>
 8007bae:	f1ba 0f01 	cmp.w	sl, #1
 8007bb2:	d102      	bne.n	8007bba <_strtod_l+0xa7a>
 8007bb4:	2f00      	cmp	r7, #0
 8007bb6:	f43f ad83 	beq.w	80076c0 <_strtod_l+0x580>
 8007bba:	4b62      	ldr	r3, [pc, #392]	; (8007d44 <_strtod_l+0xc04>)
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	e78e      	b.n	8007ade <_strtod_l+0x99e>
 8007bc0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8007d40 <_strtod_l+0xc00>
 8007bc4:	f04f 0800 	mov.w	r8, #0
 8007bc8:	e7e7      	b.n	8007b9a <_strtod_l+0xa5a>
 8007bca:	4b5d      	ldr	r3, [pc, #372]	; (8007d40 <_strtod_l+0xc00>)
 8007bcc:	4640      	mov	r0, r8
 8007bce:	4649      	mov	r1, r9
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	f7f8 fd11 	bl	80005f8 <__aeabi_dmul>
 8007bd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007bd8:	4680      	mov	r8, r0
 8007bda:	4689      	mov	r9, r1
 8007bdc:	b933      	cbnz	r3, 8007bec <_strtod_l+0xaac>
 8007bde:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007be2:	900e      	str	r0, [sp, #56]	; 0x38
 8007be4:	930f      	str	r3, [sp, #60]	; 0x3c
 8007be6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007bea:	e7dd      	b.n	8007ba8 <_strtod_l+0xa68>
 8007bec:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8007bf0:	e7f9      	b.n	8007be6 <_strtod_l+0xaa6>
 8007bf2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8007bf6:	9b04      	ldr	r3, [sp, #16]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d1a8      	bne.n	8007b4e <_strtod_l+0xa0e>
 8007bfc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007c00:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007c02:	0d1b      	lsrs	r3, r3, #20
 8007c04:	051b      	lsls	r3, r3, #20
 8007c06:	429a      	cmp	r2, r3
 8007c08:	d1a1      	bne.n	8007b4e <_strtod_l+0xa0e>
 8007c0a:	4640      	mov	r0, r8
 8007c0c:	4649      	mov	r1, r9
 8007c0e:	f7f9 f853 	bl	8000cb8 <__aeabi_d2lz>
 8007c12:	f7f8 fcc3 	bl	800059c <__aeabi_l2d>
 8007c16:	4602      	mov	r2, r0
 8007c18:	460b      	mov	r3, r1
 8007c1a:	4640      	mov	r0, r8
 8007c1c:	4649      	mov	r1, r9
 8007c1e:	f7f8 fb33 	bl	8000288 <__aeabi_dsub>
 8007c22:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007c24:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007c28:	ea43 030a 	orr.w	r3, r3, sl
 8007c2c:	4313      	orrs	r3, r2
 8007c2e:	4680      	mov	r8, r0
 8007c30:	4689      	mov	r9, r1
 8007c32:	d055      	beq.n	8007ce0 <_strtod_l+0xba0>
 8007c34:	a336      	add	r3, pc, #216	; (adr r3, 8007d10 <_strtod_l+0xbd0>)
 8007c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c3a:	f7f8 ff4f 	bl	8000adc <__aeabi_dcmplt>
 8007c3e:	2800      	cmp	r0, #0
 8007c40:	f47f acd0 	bne.w	80075e4 <_strtod_l+0x4a4>
 8007c44:	a334      	add	r3, pc, #208	; (adr r3, 8007d18 <_strtod_l+0xbd8>)
 8007c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c4a:	4640      	mov	r0, r8
 8007c4c:	4649      	mov	r1, r9
 8007c4e:	f7f8 ff63 	bl	8000b18 <__aeabi_dcmpgt>
 8007c52:	2800      	cmp	r0, #0
 8007c54:	f43f af7b 	beq.w	8007b4e <_strtod_l+0xa0e>
 8007c58:	e4c4      	b.n	80075e4 <_strtod_l+0x4a4>
 8007c5a:	9b04      	ldr	r3, [sp, #16]
 8007c5c:	b333      	cbz	r3, 8007cac <_strtod_l+0xb6c>
 8007c5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c60:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007c64:	d822      	bhi.n	8007cac <_strtod_l+0xb6c>
 8007c66:	a32e      	add	r3, pc, #184	; (adr r3, 8007d20 <_strtod_l+0xbe0>)
 8007c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c6c:	4640      	mov	r0, r8
 8007c6e:	4649      	mov	r1, r9
 8007c70:	f7f8 ff3e 	bl	8000af0 <__aeabi_dcmple>
 8007c74:	b1a0      	cbz	r0, 8007ca0 <_strtod_l+0xb60>
 8007c76:	4649      	mov	r1, r9
 8007c78:	4640      	mov	r0, r8
 8007c7a:	f7f8 ff95 	bl	8000ba8 <__aeabi_d2uiz>
 8007c7e:	2801      	cmp	r0, #1
 8007c80:	bf38      	it	cc
 8007c82:	2001      	movcc	r0, #1
 8007c84:	f7f8 fc3e 	bl	8000504 <__aeabi_ui2d>
 8007c88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c8a:	4680      	mov	r8, r0
 8007c8c:	4689      	mov	r9, r1
 8007c8e:	bb23      	cbnz	r3, 8007cda <_strtod_l+0xb9a>
 8007c90:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007c94:	9010      	str	r0, [sp, #64]	; 0x40
 8007c96:	9311      	str	r3, [sp, #68]	; 0x44
 8007c98:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007c9c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007ca0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ca2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007ca4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007ca8:	1a9b      	subs	r3, r3, r2
 8007caa:	9309      	str	r3, [sp, #36]	; 0x24
 8007cac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007cb0:	eeb0 0a48 	vmov.f32	s0, s16
 8007cb4:	eef0 0a68 	vmov.f32	s1, s17
 8007cb8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007cbc:	f001 fe58 	bl	8009970 <__ulp>
 8007cc0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007cc4:	ec53 2b10 	vmov	r2, r3, d0
 8007cc8:	f7f8 fc96 	bl	80005f8 <__aeabi_dmul>
 8007ccc:	ec53 2b18 	vmov	r2, r3, d8
 8007cd0:	f7f8 fadc 	bl	800028c <__adddf3>
 8007cd4:	4682      	mov	sl, r0
 8007cd6:	468b      	mov	fp, r1
 8007cd8:	e78d      	b.n	8007bf6 <_strtod_l+0xab6>
 8007cda:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8007cde:	e7db      	b.n	8007c98 <_strtod_l+0xb58>
 8007ce0:	a311      	add	r3, pc, #68	; (adr r3, 8007d28 <_strtod_l+0xbe8>)
 8007ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ce6:	f7f8 fef9 	bl	8000adc <__aeabi_dcmplt>
 8007cea:	e7b2      	b.n	8007c52 <_strtod_l+0xb12>
 8007cec:	2300      	movs	r3, #0
 8007cee:	930a      	str	r3, [sp, #40]	; 0x28
 8007cf0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007cf2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007cf4:	6013      	str	r3, [r2, #0]
 8007cf6:	f7ff ba6b 	b.w	80071d0 <_strtod_l+0x90>
 8007cfa:	2a65      	cmp	r2, #101	; 0x65
 8007cfc:	f43f ab5f 	beq.w	80073be <_strtod_l+0x27e>
 8007d00:	2a45      	cmp	r2, #69	; 0x45
 8007d02:	f43f ab5c 	beq.w	80073be <_strtod_l+0x27e>
 8007d06:	2301      	movs	r3, #1
 8007d08:	f7ff bb94 	b.w	8007434 <_strtod_l+0x2f4>
 8007d0c:	f3af 8000 	nop.w
 8007d10:	94a03595 	.word	0x94a03595
 8007d14:	3fdfffff 	.word	0x3fdfffff
 8007d18:	35afe535 	.word	0x35afe535
 8007d1c:	3fe00000 	.word	0x3fe00000
 8007d20:	ffc00000 	.word	0xffc00000
 8007d24:	41dfffff 	.word	0x41dfffff
 8007d28:	94a03595 	.word	0x94a03595
 8007d2c:	3fcfffff 	.word	0x3fcfffff
 8007d30:	3ff00000 	.word	0x3ff00000
 8007d34:	7ff00000 	.word	0x7ff00000
 8007d38:	7fe00000 	.word	0x7fe00000
 8007d3c:	7c9fffff 	.word	0x7c9fffff
 8007d40:	3fe00000 	.word	0x3fe00000
 8007d44:	bff00000 	.word	0xbff00000
 8007d48:	7fefffff 	.word	0x7fefffff

08007d4c <_strtod_r>:
 8007d4c:	4b01      	ldr	r3, [pc, #4]	; (8007d54 <_strtod_r+0x8>)
 8007d4e:	f7ff b9f7 	b.w	8007140 <_strtod_l>
 8007d52:	bf00      	nop
 8007d54:	20000074 	.word	0x20000074

08007d58 <_strtol_l.constprop.0>:
 8007d58:	2b01      	cmp	r3, #1
 8007d5a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d5e:	d001      	beq.n	8007d64 <_strtol_l.constprop.0+0xc>
 8007d60:	2b24      	cmp	r3, #36	; 0x24
 8007d62:	d906      	bls.n	8007d72 <_strtol_l.constprop.0+0x1a>
 8007d64:	f7fe fafe 	bl	8006364 <__errno>
 8007d68:	2316      	movs	r3, #22
 8007d6a:	6003      	str	r3, [r0, #0]
 8007d6c:	2000      	movs	r0, #0
 8007d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d72:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007e58 <_strtol_l.constprop.0+0x100>
 8007d76:	460d      	mov	r5, r1
 8007d78:	462e      	mov	r6, r5
 8007d7a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007d7e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8007d82:	f017 0708 	ands.w	r7, r7, #8
 8007d86:	d1f7      	bne.n	8007d78 <_strtol_l.constprop.0+0x20>
 8007d88:	2c2d      	cmp	r4, #45	; 0x2d
 8007d8a:	d132      	bne.n	8007df2 <_strtol_l.constprop.0+0x9a>
 8007d8c:	782c      	ldrb	r4, [r5, #0]
 8007d8e:	2701      	movs	r7, #1
 8007d90:	1cb5      	adds	r5, r6, #2
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d05b      	beq.n	8007e4e <_strtol_l.constprop.0+0xf6>
 8007d96:	2b10      	cmp	r3, #16
 8007d98:	d109      	bne.n	8007dae <_strtol_l.constprop.0+0x56>
 8007d9a:	2c30      	cmp	r4, #48	; 0x30
 8007d9c:	d107      	bne.n	8007dae <_strtol_l.constprop.0+0x56>
 8007d9e:	782c      	ldrb	r4, [r5, #0]
 8007da0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007da4:	2c58      	cmp	r4, #88	; 0x58
 8007da6:	d14d      	bne.n	8007e44 <_strtol_l.constprop.0+0xec>
 8007da8:	786c      	ldrb	r4, [r5, #1]
 8007daa:	2310      	movs	r3, #16
 8007dac:	3502      	adds	r5, #2
 8007dae:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007db2:	f108 38ff 	add.w	r8, r8, #4294967295
 8007db6:	f04f 0c00 	mov.w	ip, #0
 8007dba:	fbb8 f9f3 	udiv	r9, r8, r3
 8007dbe:	4666      	mov	r6, ip
 8007dc0:	fb03 8a19 	mls	sl, r3, r9, r8
 8007dc4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8007dc8:	f1be 0f09 	cmp.w	lr, #9
 8007dcc:	d816      	bhi.n	8007dfc <_strtol_l.constprop.0+0xa4>
 8007dce:	4674      	mov	r4, lr
 8007dd0:	42a3      	cmp	r3, r4
 8007dd2:	dd24      	ble.n	8007e1e <_strtol_l.constprop.0+0xc6>
 8007dd4:	f1bc 0f00 	cmp.w	ip, #0
 8007dd8:	db1e      	blt.n	8007e18 <_strtol_l.constprop.0+0xc0>
 8007dda:	45b1      	cmp	r9, r6
 8007ddc:	d31c      	bcc.n	8007e18 <_strtol_l.constprop.0+0xc0>
 8007dde:	d101      	bne.n	8007de4 <_strtol_l.constprop.0+0x8c>
 8007de0:	45a2      	cmp	sl, r4
 8007de2:	db19      	blt.n	8007e18 <_strtol_l.constprop.0+0xc0>
 8007de4:	fb06 4603 	mla	r6, r6, r3, r4
 8007de8:	f04f 0c01 	mov.w	ip, #1
 8007dec:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007df0:	e7e8      	b.n	8007dc4 <_strtol_l.constprop.0+0x6c>
 8007df2:	2c2b      	cmp	r4, #43	; 0x2b
 8007df4:	bf04      	itt	eq
 8007df6:	782c      	ldrbeq	r4, [r5, #0]
 8007df8:	1cb5      	addeq	r5, r6, #2
 8007dfa:	e7ca      	b.n	8007d92 <_strtol_l.constprop.0+0x3a>
 8007dfc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8007e00:	f1be 0f19 	cmp.w	lr, #25
 8007e04:	d801      	bhi.n	8007e0a <_strtol_l.constprop.0+0xb2>
 8007e06:	3c37      	subs	r4, #55	; 0x37
 8007e08:	e7e2      	b.n	8007dd0 <_strtol_l.constprop.0+0x78>
 8007e0a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8007e0e:	f1be 0f19 	cmp.w	lr, #25
 8007e12:	d804      	bhi.n	8007e1e <_strtol_l.constprop.0+0xc6>
 8007e14:	3c57      	subs	r4, #87	; 0x57
 8007e16:	e7db      	b.n	8007dd0 <_strtol_l.constprop.0+0x78>
 8007e18:	f04f 3cff 	mov.w	ip, #4294967295
 8007e1c:	e7e6      	b.n	8007dec <_strtol_l.constprop.0+0x94>
 8007e1e:	f1bc 0f00 	cmp.w	ip, #0
 8007e22:	da05      	bge.n	8007e30 <_strtol_l.constprop.0+0xd8>
 8007e24:	2322      	movs	r3, #34	; 0x22
 8007e26:	6003      	str	r3, [r0, #0]
 8007e28:	4646      	mov	r6, r8
 8007e2a:	b942      	cbnz	r2, 8007e3e <_strtol_l.constprop.0+0xe6>
 8007e2c:	4630      	mov	r0, r6
 8007e2e:	e79e      	b.n	8007d6e <_strtol_l.constprop.0+0x16>
 8007e30:	b107      	cbz	r7, 8007e34 <_strtol_l.constprop.0+0xdc>
 8007e32:	4276      	negs	r6, r6
 8007e34:	2a00      	cmp	r2, #0
 8007e36:	d0f9      	beq.n	8007e2c <_strtol_l.constprop.0+0xd4>
 8007e38:	f1bc 0f00 	cmp.w	ip, #0
 8007e3c:	d000      	beq.n	8007e40 <_strtol_l.constprop.0+0xe8>
 8007e3e:	1e69      	subs	r1, r5, #1
 8007e40:	6011      	str	r1, [r2, #0]
 8007e42:	e7f3      	b.n	8007e2c <_strtol_l.constprop.0+0xd4>
 8007e44:	2430      	movs	r4, #48	; 0x30
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d1b1      	bne.n	8007dae <_strtol_l.constprop.0+0x56>
 8007e4a:	2308      	movs	r3, #8
 8007e4c:	e7af      	b.n	8007dae <_strtol_l.constprop.0+0x56>
 8007e4e:	2c30      	cmp	r4, #48	; 0x30
 8007e50:	d0a5      	beq.n	8007d9e <_strtol_l.constprop.0+0x46>
 8007e52:	230a      	movs	r3, #10
 8007e54:	e7ab      	b.n	8007dae <_strtol_l.constprop.0+0x56>
 8007e56:	bf00      	nop
 8007e58:	0800b531 	.word	0x0800b531

08007e5c <_strtol_r>:
 8007e5c:	f7ff bf7c 	b.w	8007d58 <_strtol_l.constprop.0>

08007e60 <quorem>:
 8007e60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e64:	6903      	ldr	r3, [r0, #16]
 8007e66:	690c      	ldr	r4, [r1, #16]
 8007e68:	42a3      	cmp	r3, r4
 8007e6a:	4607      	mov	r7, r0
 8007e6c:	f2c0 8081 	blt.w	8007f72 <quorem+0x112>
 8007e70:	3c01      	subs	r4, #1
 8007e72:	f101 0814 	add.w	r8, r1, #20
 8007e76:	f100 0514 	add.w	r5, r0, #20
 8007e7a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007e7e:	9301      	str	r3, [sp, #4]
 8007e80:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007e84:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007e88:	3301      	adds	r3, #1
 8007e8a:	429a      	cmp	r2, r3
 8007e8c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007e90:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007e94:	fbb2 f6f3 	udiv	r6, r2, r3
 8007e98:	d331      	bcc.n	8007efe <quorem+0x9e>
 8007e9a:	f04f 0e00 	mov.w	lr, #0
 8007e9e:	4640      	mov	r0, r8
 8007ea0:	46ac      	mov	ip, r5
 8007ea2:	46f2      	mov	sl, lr
 8007ea4:	f850 2b04 	ldr.w	r2, [r0], #4
 8007ea8:	b293      	uxth	r3, r2
 8007eaa:	fb06 e303 	mla	r3, r6, r3, lr
 8007eae:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007eb2:	b29b      	uxth	r3, r3
 8007eb4:	ebaa 0303 	sub.w	r3, sl, r3
 8007eb8:	f8dc a000 	ldr.w	sl, [ip]
 8007ebc:	0c12      	lsrs	r2, r2, #16
 8007ebe:	fa13 f38a 	uxtah	r3, r3, sl
 8007ec2:	fb06 e202 	mla	r2, r6, r2, lr
 8007ec6:	9300      	str	r3, [sp, #0]
 8007ec8:	9b00      	ldr	r3, [sp, #0]
 8007eca:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007ece:	b292      	uxth	r2, r2
 8007ed0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007ed4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007ed8:	f8bd 3000 	ldrh.w	r3, [sp]
 8007edc:	4581      	cmp	r9, r0
 8007ede:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007ee2:	f84c 3b04 	str.w	r3, [ip], #4
 8007ee6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007eea:	d2db      	bcs.n	8007ea4 <quorem+0x44>
 8007eec:	f855 300b 	ldr.w	r3, [r5, fp]
 8007ef0:	b92b      	cbnz	r3, 8007efe <quorem+0x9e>
 8007ef2:	9b01      	ldr	r3, [sp, #4]
 8007ef4:	3b04      	subs	r3, #4
 8007ef6:	429d      	cmp	r5, r3
 8007ef8:	461a      	mov	r2, r3
 8007efa:	d32e      	bcc.n	8007f5a <quorem+0xfa>
 8007efc:	613c      	str	r4, [r7, #16]
 8007efe:	4638      	mov	r0, r7
 8007f00:	f001 fc90 	bl	8009824 <__mcmp>
 8007f04:	2800      	cmp	r0, #0
 8007f06:	db24      	blt.n	8007f52 <quorem+0xf2>
 8007f08:	3601      	adds	r6, #1
 8007f0a:	4628      	mov	r0, r5
 8007f0c:	f04f 0c00 	mov.w	ip, #0
 8007f10:	f858 2b04 	ldr.w	r2, [r8], #4
 8007f14:	f8d0 e000 	ldr.w	lr, [r0]
 8007f18:	b293      	uxth	r3, r2
 8007f1a:	ebac 0303 	sub.w	r3, ip, r3
 8007f1e:	0c12      	lsrs	r2, r2, #16
 8007f20:	fa13 f38e 	uxtah	r3, r3, lr
 8007f24:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007f28:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007f2c:	b29b      	uxth	r3, r3
 8007f2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007f32:	45c1      	cmp	r9, r8
 8007f34:	f840 3b04 	str.w	r3, [r0], #4
 8007f38:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007f3c:	d2e8      	bcs.n	8007f10 <quorem+0xb0>
 8007f3e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007f42:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007f46:	b922      	cbnz	r2, 8007f52 <quorem+0xf2>
 8007f48:	3b04      	subs	r3, #4
 8007f4a:	429d      	cmp	r5, r3
 8007f4c:	461a      	mov	r2, r3
 8007f4e:	d30a      	bcc.n	8007f66 <quorem+0x106>
 8007f50:	613c      	str	r4, [r7, #16]
 8007f52:	4630      	mov	r0, r6
 8007f54:	b003      	add	sp, #12
 8007f56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f5a:	6812      	ldr	r2, [r2, #0]
 8007f5c:	3b04      	subs	r3, #4
 8007f5e:	2a00      	cmp	r2, #0
 8007f60:	d1cc      	bne.n	8007efc <quorem+0x9c>
 8007f62:	3c01      	subs	r4, #1
 8007f64:	e7c7      	b.n	8007ef6 <quorem+0x96>
 8007f66:	6812      	ldr	r2, [r2, #0]
 8007f68:	3b04      	subs	r3, #4
 8007f6a:	2a00      	cmp	r2, #0
 8007f6c:	d1f0      	bne.n	8007f50 <quorem+0xf0>
 8007f6e:	3c01      	subs	r4, #1
 8007f70:	e7eb      	b.n	8007f4a <quorem+0xea>
 8007f72:	2000      	movs	r0, #0
 8007f74:	e7ee      	b.n	8007f54 <quorem+0xf4>
	...

08007f78 <_dtoa_r>:
 8007f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f7c:	ed2d 8b04 	vpush	{d8-d9}
 8007f80:	ec57 6b10 	vmov	r6, r7, d0
 8007f84:	b093      	sub	sp, #76	; 0x4c
 8007f86:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007f88:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007f8c:	9106      	str	r1, [sp, #24]
 8007f8e:	ee10 aa10 	vmov	sl, s0
 8007f92:	4604      	mov	r4, r0
 8007f94:	9209      	str	r2, [sp, #36]	; 0x24
 8007f96:	930c      	str	r3, [sp, #48]	; 0x30
 8007f98:	46bb      	mov	fp, r7
 8007f9a:	b975      	cbnz	r5, 8007fba <_dtoa_r+0x42>
 8007f9c:	2010      	movs	r0, #16
 8007f9e:	f001 f94d 	bl	800923c <malloc>
 8007fa2:	4602      	mov	r2, r0
 8007fa4:	6260      	str	r0, [r4, #36]	; 0x24
 8007fa6:	b920      	cbnz	r0, 8007fb2 <_dtoa_r+0x3a>
 8007fa8:	4ba7      	ldr	r3, [pc, #668]	; (8008248 <_dtoa_r+0x2d0>)
 8007faa:	21ea      	movs	r1, #234	; 0xea
 8007fac:	48a7      	ldr	r0, [pc, #668]	; (800824c <_dtoa_r+0x2d4>)
 8007fae:	f002 f8bd 	bl	800a12c <__assert_func>
 8007fb2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007fb6:	6005      	str	r5, [r0, #0]
 8007fb8:	60c5      	str	r5, [r0, #12]
 8007fba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007fbc:	6819      	ldr	r1, [r3, #0]
 8007fbe:	b151      	cbz	r1, 8007fd6 <_dtoa_r+0x5e>
 8007fc0:	685a      	ldr	r2, [r3, #4]
 8007fc2:	604a      	str	r2, [r1, #4]
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	4093      	lsls	r3, r2
 8007fc8:	608b      	str	r3, [r1, #8]
 8007fca:	4620      	mov	r0, r4
 8007fcc:	f001 f99e 	bl	800930c <_Bfree>
 8007fd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	601a      	str	r2, [r3, #0]
 8007fd6:	1e3b      	subs	r3, r7, #0
 8007fd8:	bfaa      	itet	ge
 8007fda:	2300      	movge	r3, #0
 8007fdc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007fe0:	f8c8 3000 	strge.w	r3, [r8]
 8007fe4:	4b9a      	ldr	r3, [pc, #616]	; (8008250 <_dtoa_r+0x2d8>)
 8007fe6:	bfbc      	itt	lt
 8007fe8:	2201      	movlt	r2, #1
 8007fea:	f8c8 2000 	strlt.w	r2, [r8]
 8007fee:	ea33 030b 	bics.w	r3, r3, fp
 8007ff2:	d11b      	bne.n	800802c <_dtoa_r+0xb4>
 8007ff4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007ff6:	f242 730f 	movw	r3, #9999	; 0x270f
 8007ffa:	6013      	str	r3, [r2, #0]
 8007ffc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008000:	4333      	orrs	r3, r6
 8008002:	f000 8592 	beq.w	8008b2a <_dtoa_r+0xbb2>
 8008006:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008008:	b963      	cbnz	r3, 8008024 <_dtoa_r+0xac>
 800800a:	4b92      	ldr	r3, [pc, #584]	; (8008254 <_dtoa_r+0x2dc>)
 800800c:	e022      	b.n	8008054 <_dtoa_r+0xdc>
 800800e:	4b92      	ldr	r3, [pc, #584]	; (8008258 <_dtoa_r+0x2e0>)
 8008010:	9301      	str	r3, [sp, #4]
 8008012:	3308      	adds	r3, #8
 8008014:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008016:	6013      	str	r3, [r2, #0]
 8008018:	9801      	ldr	r0, [sp, #4]
 800801a:	b013      	add	sp, #76	; 0x4c
 800801c:	ecbd 8b04 	vpop	{d8-d9}
 8008020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008024:	4b8b      	ldr	r3, [pc, #556]	; (8008254 <_dtoa_r+0x2dc>)
 8008026:	9301      	str	r3, [sp, #4]
 8008028:	3303      	adds	r3, #3
 800802a:	e7f3      	b.n	8008014 <_dtoa_r+0x9c>
 800802c:	2200      	movs	r2, #0
 800802e:	2300      	movs	r3, #0
 8008030:	4650      	mov	r0, sl
 8008032:	4659      	mov	r1, fp
 8008034:	f7f8 fd48 	bl	8000ac8 <__aeabi_dcmpeq>
 8008038:	ec4b ab19 	vmov	d9, sl, fp
 800803c:	4680      	mov	r8, r0
 800803e:	b158      	cbz	r0, 8008058 <_dtoa_r+0xe0>
 8008040:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008042:	2301      	movs	r3, #1
 8008044:	6013      	str	r3, [r2, #0]
 8008046:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008048:	2b00      	cmp	r3, #0
 800804a:	f000 856b 	beq.w	8008b24 <_dtoa_r+0xbac>
 800804e:	4883      	ldr	r0, [pc, #524]	; (800825c <_dtoa_r+0x2e4>)
 8008050:	6018      	str	r0, [r3, #0]
 8008052:	1e43      	subs	r3, r0, #1
 8008054:	9301      	str	r3, [sp, #4]
 8008056:	e7df      	b.n	8008018 <_dtoa_r+0xa0>
 8008058:	ec4b ab10 	vmov	d0, sl, fp
 800805c:	aa10      	add	r2, sp, #64	; 0x40
 800805e:	a911      	add	r1, sp, #68	; 0x44
 8008060:	4620      	mov	r0, r4
 8008062:	f001 fd01 	bl	8009a68 <__d2b>
 8008066:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800806a:	ee08 0a10 	vmov	s16, r0
 800806e:	2d00      	cmp	r5, #0
 8008070:	f000 8084 	beq.w	800817c <_dtoa_r+0x204>
 8008074:	ee19 3a90 	vmov	r3, s19
 8008078:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800807c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008080:	4656      	mov	r6, sl
 8008082:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008086:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800808a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800808e:	4b74      	ldr	r3, [pc, #464]	; (8008260 <_dtoa_r+0x2e8>)
 8008090:	2200      	movs	r2, #0
 8008092:	4630      	mov	r0, r6
 8008094:	4639      	mov	r1, r7
 8008096:	f7f8 f8f7 	bl	8000288 <__aeabi_dsub>
 800809a:	a365      	add	r3, pc, #404	; (adr r3, 8008230 <_dtoa_r+0x2b8>)
 800809c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080a0:	f7f8 faaa 	bl	80005f8 <__aeabi_dmul>
 80080a4:	a364      	add	r3, pc, #400	; (adr r3, 8008238 <_dtoa_r+0x2c0>)
 80080a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080aa:	f7f8 f8ef 	bl	800028c <__adddf3>
 80080ae:	4606      	mov	r6, r0
 80080b0:	4628      	mov	r0, r5
 80080b2:	460f      	mov	r7, r1
 80080b4:	f7f8 fa36 	bl	8000524 <__aeabi_i2d>
 80080b8:	a361      	add	r3, pc, #388	; (adr r3, 8008240 <_dtoa_r+0x2c8>)
 80080ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080be:	f7f8 fa9b 	bl	80005f8 <__aeabi_dmul>
 80080c2:	4602      	mov	r2, r0
 80080c4:	460b      	mov	r3, r1
 80080c6:	4630      	mov	r0, r6
 80080c8:	4639      	mov	r1, r7
 80080ca:	f7f8 f8df 	bl	800028c <__adddf3>
 80080ce:	4606      	mov	r6, r0
 80080d0:	460f      	mov	r7, r1
 80080d2:	f7f8 fd41 	bl	8000b58 <__aeabi_d2iz>
 80080d6:	2200      	movs	r2, #0
 80080d8:	9000      	str	r0, [sp, #0]
 80080da:	2300      	movs	r3, #0
 80080dc:	4630      	mov	r0, r6
 80080de:	4639      	mov	r1, r7
 80080e0:	f7f8 fcfc 	bl	8000adc <__aeabi_dcmplt>
 80080e4:	b150      	cbz	r0, 80080fc <_dtoa_r+0x184>
 80080e6:	9800      	ldr	r0, [sp, #0]
 80080e8:	f7f8 fa1c 	bl	8000524 <__aeabi_i2d>
 80080ec:	4632      	mov	r2, r6
 80080ee:	463b      	mov	r3, r7
 80080f0:	f7f8 fcea 	bl	8000ac8 <__aeabi_dcmpeq>
 80080f4:	b910      	cbnz	r0, 80080fc <_dtoa_r+0x184>
 80080f6:	9b00      	ldr	r3, [sp, #0]
 80080f8:	3b01      	subs	r3, #1
 80080fa:	9300      	str	r3, [sp, #0]
 80080fc:	9b00      	ldr	r3, [sp, #0]
 80080fe:	2b16      	cmp	r3, #22
 8008100:	d85a      	bhi.n	80081b8 <_dtoa_r+0x240>
 8008102:	9a00      	ldr	r2, [sp, #0]
 8008104:	4b57      	ldr	r3, [pc, #348]	; (8008264 <_dtoa_r+0x2ec>)
 8008106:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800810a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800810e:	ec51 0b19 	vmov	r0, r1, d9
 8008112:	f7f8 fce3 	bl	8000adc <__aeabi_dcmplt>
 8008116:	2800      	cmp	r0, #0
 8008118:	d050      	beq.n	80081bc <_dtoa_r+0x244>
 800811a:	9b00      	ldr	r3, [sp, #0]
 800811c:	3b01      	subs	r3, #1
 800811e:	9300      	str	r3, [sp, #0]
 8008120:	2300      	movs	r3, #0
 8008122:	930b      	str	r3, [sp, #44]	; 0x2c
 8008124:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008126:	1b5d      	subs	r5, r3, r5
 8008128:	1e6b      	subs	r3, r5, #1
 800812a:	9305      	str	r3, [sp, #20]
 800812c:	bf45      	ittet	mi
 800812e:	f1c5 0301 	rsbmi	r3, r5, #1
 8008132:	9304      	strmi	r3, [sp, #16]
 8008134:	2300      	movpl	r3, #0
 8008136:	2300      	movmi	r3, #0
 8008138:	bf4c      	ite	mi
 800813a:	9305      	strmi	r3, [sp, #20]
 800813c:	9304      	strpl	r3, [sp, #16]
 800813e:	9b00      	ldr	r3, [sp, #0]
 8008140:	2b00      	cmp	r3, #0
 8008142:	db3d      	blt.n	80081c0 <_dtoa_r+0x248>
 8008144:	9b05      	ldr	r3, [sp, #20]
 8008146:	9a00      	ldr	r2, [sp, #0]
 8008148:	920a      	str	r2, [sp, #40]	; 0x28
 800814a:	4413      	add	r3, r2
 800814c:	9305      	str	r3, [sp, #20]
 800814e:	2300      	movs	r3, #0
 8008150:	9307      	str	r3, [sp, #28]
 8008152:	9b06      	ldr	r3, [sp, #24]
 8008154:	2b09      	cmp	r3, #9
 8008156:	f200 8089 	bhi.w	800826c <_dtoa_r+0x2f4>
 800815a:	2b05      	cmp	r3, #5
 800815c:	bfc4      	itt	gt
 800815e:	3b04      	subgt	r3, #4
 8008160:	9306      	strgt	r3, [sp, #24]
 8008162:	9b06      	ldr	r3, [sp, #24]
 8008164:	f1a3 0302 	sub.w	r3, r3, #2
 8008168:	bfcc      	ite	gt
 800816a:	2500      	movgt	r5, #0
 800816c:	2501      	movle	r5, #1
 800816e:	2b03      	cmp	r3, #3
 8008170:	f200 8087 	bhi.w	8008282 <_dtoa_r+0x30a>
 8008174:	e8df f003 	tbb	[pc, r3]
 8008178:	59383a2d 	.word	0x59383a2d
 800817c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008180:	441d      	add	r5, r3
 8008182:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008186:	2b20      	cmp	r3, #32
 8008188:	bfc1      	itttt	gt
 800818a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800818e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008192:	fa0b f303 	lslgt.w	r3, fp, r3
 8008196:	fa26 f000 	lsrgt.w	r0, r6, r0
 800819a:	bfda      	itte	le
 800819c:	f1c3 0320 	rsble	r3, r3, #32
 80081a0:	fa06 f003 	lslle.w	r0, r6, r3
 80081a4:	4318      	orrgt	r0, r3
 80081a6:	f7f8 f9ad 	bl	8000504 <__aeabi_ui2d>
 80081aa:	2301      	movs	r3, #1
 80081ac:	4606      	mov	r6, r0
 80081ae:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80081b2:	3d01      	subs	r5, #1
 80081b4:	930e      	str	r3, [sp, #56]	; 0x38
 80081b6:	e76a      	b.n	800808e <_dtoa_r+0x116>
 80081b8:	2301      	movs	r3, #1
 80081ba:	e7b2      	b.n	8008122 <_dtoa_r+0x1aa>
 80081bc:	900b      	str	r0, [sp, #44]	; 0x2c
 80081be:	e7b1      	b.n	8008124 <_dtoa_r+0x1ac>
 80081c0:	9b04      	ldr	r3, [sp, #16]
 80081c2:	9a00      	ldr	r2, [sp, #0]
 80081c4:	1a9b      	subs	r3, r3, r2
 80081c6:	9304      	str	r3, [sp, #16]
 80081c8:	4253      	negs	r3, r2
 80081ca:	9307      	str	r3, [sp, #28]
 80081cc:	2300      	movs	r3, #0
 80081ce:	930a      	str	r3, [sp, #40]	; 0x28
 80081d0:	e7bf      	b.n	8008152 <_dtoa_r+0x1da>
 80081d2:	2300      	movs	r3, #0
 80081d4:	9308      	str	r3, [sp, #32]
 80081d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081d8:	2b00      	cmp	r3, #0
 80081da:	dc55      	bgt.n	8008288 <_dtoa_r+0x310>
 80081dc:	2301      	movs	r3, #1
 80081de:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80081e2:	461a      	mov	r2, r3
 80081e4:	9209      	str	r2, [sp, #36]	; 0x24
 80081e6:	e00c      	b.n	8008202 <_dtoa_r+0x28a>
 80081e8:	2301      	movs	r3, #1
 80081ea:	e7f3      	b.n	80081d4 <_dtoa_r+0x25c>
 80081ec:	2300      	movs	r3, #0
 80081ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80081f0:	9308      	str	r3, [sp, #32]
 80081f2:	9b00      	ldr	r3, [sp, #0]
 80081f4:	4413      	add	r3, r2
 80081f6:	9302      	str	r3, [sp, #8]
 80081f8:	3301      	adds	r3, #1
 80081fa:	2b01      	cmp	r3, #1
 80081fc:	9303      	str	r3, [sp, #12]
 80081fe:	bfb8      	it	lt
 8008200:	2301      	movlt	r3, #1
 8008202:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008204:	2200      	movs	r2, #0
 8008206:	6042      	str	r2, [r0, #4]
 8008208:	2204      	movs	r2, #4
 800820a:	f102 0614 	add.w	r6, r2, #20
 800820e:	429e      	cmp	r6, r3
 8008210:	6841      	ldr	r1, [r0, #4]
 8008212:	d93d      	bls.n	8008290 <_dtoa_r+0x318>
 8008214:	4620      	mov	r0, r4
 8008216:	f001 f839 	bl	800928c <_Balloc>
 800821a:	9001      	str	r0, [sp, #4]
 800821c:	2800      	cmp	r0, #0
 800821e:	d13b      	bne.n	8008298 <_dtoa_r+0x320>
 8008220:	4b11      	ldr	r3, [pc, #68]	; (8008268 <_dtoa_r+0x2f0>)
 8008222:	4602      	mov	r2, r0
 8008224:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008228:	e6c0      	b.n	8007fac <_dtoa_r+0x34>
 800822a:	2301      	movs	r3, #1
 800822c:	e7df      	b.n	80081ee <_dtoa_r+0x276>
 800822e:	bf00      	nop
 8008230:	636f4361 	.word	0x636f4361
 8008234:	3fd287a7 	.word	0x3fd287a7
 8008238:	8b60c8b3 	.word	0x8b60c8b3
 800823c:	3fc68a28 	.word	0x3fc68a28
 8008240:	509f79fb 	.word	0x509f79fb
 8008244:	3fd34413 	.word	0x3fd34413
 8008248:	0800b63e 	.word	0x0800b63e
 800824c:	0800b655 	.word	0x0800b655
 8008250:	7ff00000 	.word	0x7ff00000
 8008254:	0800b63a 	.word	0x0800b63a
 8008258:	0800b631 	.word	0x0800b631
 800825c:	0800b4b5 	.word	0x0800b4b5
 8008260:	3ff80000 	.word	0x3ff80000
 8008264:	0800b7c0 	.word	0x0800b7c0
 8008268:	0800b6b0 	.word	0x0800b6b0
 800826c:	2501      	movs	r5, #1
 800826e:	2300      	movs	r3, #0
 8008270:	9306      	str	r3, [sp, #24]
 8008272:	9508      	str	r5, [sp, #32]
 8008274:	f04f 33ff 	mov.w	r3, #4294967295
 8008278:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800827c:	2200      	movs	r2, #0
 800827e:	2312      	movs	r3, #18
 8008280:	e7b0      	b.n	80081e4 <_dtoa_r+0x26c>
 8008282:	2301      	movs	r3, #1
 8008284:	9308      	str	r3, [sp, #32]
 8008286:	e7f5      	b.n	8008274 <_dtoa_r+0x2fc>
 8008288:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800828a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800828e:	e7b8      	b.n	8008202 <_dtoa_r+0x28a>
 8008290:	3101      	adds	r1, #1
 8008292:	6041      	str	r1, [r0, #4]
 8008294:	0052      	lsls	r2, r2, #1
 8008296:	e7b8      	b.n	800820a <_dtoa_r+0x292>
 8008298:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800829a:	9a01      	ldr	r2, [sp, #4]
 800829c:	601a      	str	r2, [r3, #0]
 800829e:	9b03      	ldr	r3, [sp, #12]
 80082a0:	2b0e      	cmp	r3, #14
 80082a2:	f200 809d 	bhi.w	80083e0 <_dtoa_r+0x468>
 80082a6:	2d00      	cmp	r5, #0
 80082a8:	f000 809a 	beq.w	80083e0 <_dtoa_r+0x468>
 80082ac:	9b00      	ldr	r3, [sp, #0]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	dd32      	ble.n	8008318 <_dtoa_r+0x3a0>
 80082b2:	4ab7      	ldr	r2, [pc, #732]	; (8008590 <_dtoa_r+0x618>)
 80082b4:	f003 030f 	and.w	r3, r3, #15
 80082b8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80082bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80082c0:	9b00      	ldr	r3, [sp, #0]
 80082c2:	05d8      	lsls	r0, r3, #23
 80082c4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80082c8:	d516      	bpl.n	80082f8 <_dtoa_r+0x380>
 80082ca:	4bb2      	ldr	r3, [pc, #712]	; (8008594 <_dtoa_r+0x61c>)
 80082cc:	ec51 0b19 	vmov	r0, r1, d9
 80082d0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80082d4:	f7f8 faba 	bl	800084c <__aeabi_ddiv>
 80082d8:	f007 070f 	and.w	r7, r7, #15
 80082dc:	4682      	mov	sl, r0
 80082de:	468b      	mov	fp, r1
 80082e0:	2503      	movs	r5, #3
 80082e2:	4eac      	ldr	r6, [pc, #688]	; (8008594 <_dtoa_r+0x61c>)
 80082e4:	b957      	cbnz	r7, 80082fc <_dtoa_r+0x384>
 80082e6:	4642      	mov	r2, r8
 80082e8:	464b      	mov	r3, r9
 80082ea:	4650      	mov	r0, sl
 80082ec:	4659      	mov	r1, fp
 80082ee:	f7f8 faad 	bl	800084c <__aeabi_ddiv>
 80082f2:	4682      	mov	sl, r0
 80082f4:	468b      	mov	fp, r1
 80082f6:	e028      	b.n	800834a <_dtoa_r+0x3d2>
 80082f8:	2502      	movs	r5, #2
 80082fa:	e7f2      	b.n	80082e2 <_dtoa_r+0x36a>
 80082fc:	07f9      	lsls	r1, r7, #31
 80082fe:	d508      	bpl.n	8008312 <_dtoa_r+0x39a>
 8008300:	4640      	mov	r0, r8
 8008302:	4649      	mov	r1, r9
 8008304:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008308:	f7f8 f976 	bl	80005f8 <__aeabi_dmul>
 800830c:	3501      	adds	r5, #1
 800830e:	4680      	mov	r8, r0
 8008310:	4689      	mov	r9, r1
 8008312:	107f      	asrs	r7, r7, #1
 8008314:	3608      	adds	r6, #8
 8008316:	e7e5      	b.n	80082e4 <_dtoa_r+0x36c>
 8008318:	f000 809b 	beq.w	8008452 <_dtoa_r+0x4da>
 800831c:	9b00      	ldr	r3, [sp, #0]
 800831e:	4f9d      	ldr	r7, [pc, #628]	; (8008594 <_dtoa_r+0x61c>)
 8008320:	425e      	negs	r6, r3
 8008322:	4b9b      	ldr	r3, [pc, #620]	; (8008590 <_dtoa_r+0x618>)
 8008324:	f006 020f 	and.w	r2, r6, #15
 8008328:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800832c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008330:	ec51 0b19 	vmov	r0, r1, d9
 8008334:	f7f8 f960 	bl	80005f8 <__aeabi_dmul>
 8008338:	1136      	asrs	r6, r6, #4
 800833a:	4682      	mov	sl, r0
 800833c:	468b      	mov	fp, r1
 800833e:	2300      	movs	r3, #0
 8008340:	2502      	movs	r5, #2
 8008342:	2e00      	cmp	r6, #0
 8008344:	d17a      	bne.n	800843c <_dtoa_r+0x4c4>
 8008346:	2b00      	cmp	r3, #0
 8008348:	d1d3      	bne.n	80082f2 <_dtoa_r+0x37a>
 800834a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800834c:	2b00      	cmp	r3, #0
 800834e:	f000 8082 	beq.w	8008456 <_dtoa_r+0x4de>
 8008352:	4b91      	ldr	r3, [pc, #580]	; (8008598 <_dtoa_r+0x620>)
 8008354:	2200      	movs	r2, #0
 8008356:	4650      	mov	r0, sl
 8008358:	4659      	mov	r1, fp
 800835a:	f7f8 fbbf 	bl	8000adc <__aeabi_dcmplt>
 800835e:	2800      	cmp	r0, #0
 8008360:	d079      	beq.n	8008456 <_dtoa_r+0x4de>
 8008362:	9b03      	ldr	r3, [sp, #12]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d076      	beq.n	8008456 <_dtoa_r+0x4de>
 8008368:	9b02      	ldr	r3, [sp, #8]
 800836a:	2b00      	cmp	r3, #0
 800836c:	dd36      	ble.n	80083dc <_dtoa_r+0x464>
 800836e:	9b00      	ldr	r3, [sp, #0]
 8008370:	4650      	mov	r0, sl
 8008372:	4659      	mov	r1, fp
 8008374:	1e5f      	subs	r7, r3, #1
 8008376:	2200      	movs	r2, #0
 8008378:	4b88      	ldr	r3, [pc, #544]	; (800859c <_dtoa_r+0x624>)
 800837a:	f7f8 f93d 	bl	80005f8 <__aeabi_dmul>
 800837e:	9e02      	ldr	r6, [sp, #8]
 8008380:	4682      	mov	sl, r0
 8008382:	468b      	mov	fp, r1
 8008384:	3501      	adds	r5, #1
 8008386:	4628      	mov	r0, r5
 8008388:	f7f8 f8cc 	bl	8000524 <__aeabi_i2d>
 800838c:	4652      	mov	r2, sl
 800838e:	465b      	mov	r3, fp
 8008390:	f7f8 f932 	bl	80005f8 <__aeabi_dmul>
 8008394:	4b82      	ldr	r3, [pc, #520]	; (80085a0 <_dtoa_r+0x628>)
 8008396:	2200      	movs	r2, #0
 8008398:	f7f7 ff78 	bl	800028c <__adddf3>
 800839c:	46d0      	mov	r8, sl
 800839e:	46d9      	mov	r9, fp
 80083a0:	4682      	mov	sl, r0
 80083a2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80083a6:	2e00      	cmp	r6, #0
 80083a8:	d158      	bne.n	800845c <_dtoa_r+0x4e4>
 80083aa:	4b7e      	ldr	r3, [pc, #504]	; (80085a4 <_dtoa_r+0x62c>)
 80083ac:	2200      	movs	r2, #0
 80083ae:	4640      	mov	r0, r8
 80083b0:	4649      	mov	r1, r9
 80083b2:	f7f7 ff69 	bl	8000288 <__aeabi_dsub>
 80083b6:	4652      	mov	r2, sl
 80083b8:	465b      	mov	r3, fp
 80083ba:	4680      	mov	r8, r0
 80083bc:	4689      	mov	r9, r1
 80083be:	f7f8 fbab 	bl	8000b18 <__aeabi_dcmpgt>
 80083c2:	2800      	cmp	r0, #0
 80083c4:	f040 8295 	bne.w	80088f2 <_dtoa_r+0x97a>
 80083c8:	4652      	mov	r2, sl
 80083ca:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80083ce:	4640      	mov	r0, r8
 80083d0:	4649      	mov	r1, r9
 80083d2:	f7f8 fb83 	bl	8000adc <__aeabi_dcmplt>
 80083d6:	2800      	cmp	r0, #0
 80083d8:	f040 8289 	bne.w	80088ee <_dtoa_r+0x976>
 80083dc:	ec5b ab19 	vmov	sl, fp, d9
 80083e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	f2c0 8148 	blt.w	8008678 <_dtoa_r+0x700>
 80083e8:	9a00      	ldr	r2, [sp, #0]
 80083ea:	2a0e      	cmp	r2, #14
 80083ec:	f300 8144 	bgt.w	8008678 <_dtoa_r+0x700>
 80083f0:	4b67      	ldr	r3, [pc, #412]	; (8008590 <_dtoa_r+0x618>)
 80083f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80083f6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80083fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	f280 80d5 	bge.w	80085ac <_dtoa_r+0x634>
 8008402:	9b03      	ldr	r3, [sp, #12]
 8008404:	2b00      	cmp	r3, #0
 8008406:	f300 80d1 	bgt.w	80085ac <_dtoa_r+0x634>
 800840a:	f040 826f 	bne.w	80088ec <_dtoa_r+0x974>
 800840e:	4b65      	ldr	r3, [pc, #404]	; (80085a4 <_dtoa_r+0x62c>)
 8008410:	2200      	movs	r2, #0
 8008412:	4640      	mov	r0, r8
 8008414:	4649      	mov	r1, r9
 8008416:	f7f8 f8ef 	bl	80005f8 <__aeabi_dmul>
 800841a:	4652      	mov	r2, sl
 800841c:	465b      	mov	r3, fp
 800841e:	f7f8 fb71 	bl	8000b04 <__aeabi_dcmpge>
 8008422:	9e03      	ldr	r6, [sp, #12]
 8008424:	4637      	mov	r7, r6
 8008426:	2800      	cmp	r0, #0
 8008428:	f040 8245 	bne.w	80088b6 <_dtoa_r+0x93e>
 800842c:	9d01      	ldr	r5, [sp, #4]
 800842e:	2331      	movs	r3, #49	; 0x31
 8008430:	f805 3b01 	strb.w	r3, [r5], #1
 8008434:	9b00      	ldr	r3, [sp, #0]
 8008436:	3301      	adds	r3, #1
 8008438:	9300      	str	r3, [sp, #0]
 800843a:	e240      	b.n	80088be <_dtoa_r+0x946>
 800843c:	07f2      	lsls	r2, r6, #31
 800843e:	d505      	bpl.n	800844c <_dtoa_r+0x4d4>
 8008440:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008444:	f7f8 f8d8 	bl	80005f8 <__aeabi_dmul>
 8008448:	3501      	adds	r5, #1
 800844a:	2301      	movs	r3, #1
 800844c:	1076      	asrs	r6, r6, #1
 800844e:	3708      	adds	r7, #8
 8008450:	e777      	b.n	8008342 <_dtoa_r+0x3ca>
 8008452:	2502      	movs	r5, #2
 8008454:	e779      	b.n	800834a <_dtoa_r+0x3d2>
 8008456:	9f00      	ldr	r7, [sp, #0]
 8008458:	9e03      	ldr	r6, [sp, #12]
 800845a:	e794      	b.n	8008386 <_dtoa_r+0x40e>
 800845c:	9901      	ldr	r1, [sp, #4]
 800845e:	4b4c      	ldr	r3, [pc, #304]	; (8008590 <_dtoa_r+0x618>)
 8008460:	4431      	add	r1, r6
 8008462:	910d      	str	r1, [sp, #52]	; 0x34
 8008464:	9908      	ldr	r1, [sp, #32]
 8008466:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800846a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800846e:	2900      	cmp	r1, #0
 8008470:	d043      	beq.n	80084fa <_dtoa_r+0x582>
 8008472:	494d      	ldr	r1, [pc, #308]	; (80085a8 <_dtoa_r+0x630>)
 8008474:	2000      	movs	r0, #0
 8008476:	f7f8 f9e9 	bl	800084c <__aeabi_ddiv>
 800847a:	4652      	mov	r2, sl
 800847c:	465b      	mov	r3, fp
 800847e:	f7f7 ff03 	bl	8000288 <__aeabi_dsub>
 8008482:	9d01      	ldr	r5, [sp, #4]
 8008484:	4682      	mov	sl, r0
 8008486:	468b      	mov	fp, r1
 8008488:	4649      	mov	r1, r9
 800848a:	4640      	mov	r0, r8
 800848c:	f7f8 fb64 	bl	8000b58 <__aeabi_d2iz>
 8008490:	4606      	mov	r6, r0
 8008492:	f7f8 f847 	bl	8000524 <__aeabi_i2d>
 8008496:	4602      	mov	r2, r0
 8008498:	460b      	mov	r3, r1
 800849a:	4640      	mov	r0, r8
 800849c:	4649      	mov	r1, r9
 800849e:	f7f7 fef3 	bl	8000288 <__aeabi_dsub>
 80084a2:	3630      	adds	r6, #48	; 0x30
 80084a4:	f805 6b01 	strb.w	r6, [r5], #1
 80084a8:	4652      	mov	r2, sl
 80084aa:	465b      	mov	r3, fp
 80084ac:	4680      	mov	r8, r0
 80084ae:	4689      	mov	r9, r1
 80084b0:	f7f8 fb14 	bl	8000adc <__aeabi_dcmplt>
 80084b4:	2800      	cmp	r0, #0
 80084b6:	d163      	bne.n	8008580 <_dtoa_r+0x608>
 80084b8:	4642      	mov	r2, r8
 80084ba:	464b      	mov	r3, r9
 80084bc:	4936      	ldr	r1, [pc, #216]	; (8008598 <_dtoa_r+0x620>)
 80084be:	2000      	movs	r0, #0
 80084c0:	f7f7 fee2 	bl	8000288 <__aeabi_dsub>
 80084c4:	4652      	mov	r2, sl
 80084c6:	465b      	mov	r3, fp
 80084c8:	f7f8 fb08 	bl	8000adc <__aeabi_dcmplt>
 80084cc:	2800      	cmp	r0, #0
 80084ce:	f040 80b5 	bne.w	800863c <_dtoa_r+0x6c4>
 80084d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80084d4:	429d      	cmp	r5, r3
 80084d6:	d081      	beq.n	80083dc <_dtoa_r+0x464>
 80084d8:	4b30      	ldr	r3, [pc, #192]	; (800859c <_dtoa_r+0x624>)
 80084da:	2200      	movs	r2, #0
 80084dc:	4650      	mov	r0, sl
 80084de:	4659      	mov	r1, fp
 80084e0:	f7f8 f88a 	bl	80005f8 <__aeabi_dmul>
 80084e4:	4b2d      	ldr	r3, [pc, #180]	; (800859c <_dtoa_r+0x624>)
 80084e6:	4682      	mov	sl, r0
 80084e8:	468b      	mov	fp, r1
 80084ea:	4640      	mov	r0, r8
 80084ec:	4649      	mov	r1, r9
 80084ee:	2200      	movs	r2, #0
 80084f0:	f7f8 f882 	bl	80005f8 <__aeabi_dmul>
 80084f4:	4680      	mov	r8, r0
 80084f6:	4689      	mov	r9, r1
 80084f8:	e7c6      	b.n	8008488 <_dtoa_r+0x510>
 80084fa:	4650      	mov	r0, sl
 80084fc:	4659      	mov	r1, fp
 80084fe:	f7f8 f87b 	bl	80005f8 <__aeabi_dmul>
 8008502:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008504:	9d01      	ldr	r5, [sp, #4]
 8008506:	930f      	str	r3, [sp, #60]	; 0x3c
 8008508:	4682      	mov	sl, r0
 800850a:	468b      	mov	fp, r1
 800850c:	4649      	mov	r1, r9
 800850e:	4640      	mov	r0, r8
 8008510:	f7f8 fb22 	bl	8000b58 <__aeabi_d2iz>
 8008514:	4606      	mov	r6, r0
 8008516:	f7f8 f805 	bl	8000524 <__aeabi_i2d>
 800851a:	3630      	adds	r6, #48	; 0x30
 800851c:	4602      	mov	r2, r0
 800851e:	460b      	mov	r3, r1
 8008520:	4640      	mov	r0, r8
 8008522:	4649      	mov	r1, r9
 8008524:	f7f7 feb0 	bl	8000288 <__aeabi_dsub>
 8008528:	f805 6b01 	strb.w	r6, [r5], #1
 800852c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800852e:	429d      	cmp	r5, r3
 8008530:	4680      	mov	r8, r0
 8008532:	4689      	mov	r9, r1
 8008534:	f04f 0200 	mov.w	r2, #0
 8008538:	d124      	bne.n	8008584 <_dtoa_r+0x60c>
 800853a:	4b1b      	ldr	r3, [pc, #108]	; (80085a8 <_dtoa_r+0x630>)
 800853c:	4650      	mov	r0, sl
 800853e:	4659      	mov	r1, fp
 8008540:	f7f7 fea4 	bl	800028c <__adddf3>
 8008544:	4602      	mov	r2, r0
 8008546:	460b      	mov	r3, r1
 8008548:	4640      	mov	r0, r8
 800854a:	4649      	mov	r1, r9
 800854c:	f7f8 fae4 	bl	8000b18 <__aeabi_dcmpgt>
 8008550:	2800      	cmp	r0, #0
 8008552:	d173      	bne.n	800863c <_dtoa_r+0x6c4>
 8008554:	4652      	mov	r2, sl
 8008556:	465b      	mov	r3, fp
 8008558:	4913      	ldr	r1, [pc, #76]	; (80085a8 <_dtoa_r+0x630>)
 800855a:	2000      	movs	r0, #0
 800855c:	f7f7 fe94 	bl	8000288 <__aeabi_dsub>
 8008560:	4602      	mov	r2, r0
 8008562:	460b      	mov	r3, r1
 8008564:	4640      	mov	r0, r8
 8008566:	4649      	mov	r1, r9
 8008568:	f7f8 fab8 	bl	8000adc <__aeabi_dcmplt>
 800856c:	2800      	cmp	r0, #0
 800856e:	f43f af35 	beq.w	80083dc <_dtoa_r+0x464>
 8008572:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008574:	1e6b      	subs	r3, r5, #1
 8008576:	930f      	str	r3, [sp, #60]	; 0x3c
 8008578:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800857c:	2b30      	cmp	r3, #48	; 0x30
 800857e:	d0f8      	beq.n	8008572 <_dtoa_r+0x5fa>
 8008580:	9700      	str	r7, [sp, #0]
 8008582:	e049      	b.n	8008618 <_dtoa_r+0x6a0>
 8008584:	4b05      	ldr	r3, [pc, #20]	; (800859c <_dtoa_r+0x624>)
 8008586:	f7f8 f837 	bl	80005f8 <__aeabi_dmul>
 800858a:	4680      	mov	r8, r0
 800858c:	4689      	mov	r9, r1
 800858e:	e7bd      	b.n	800850c <_dtoa_r+0x594>
 8008590:	0800b7c0 	.word	0x0800b7c0
 8008594:	0800b798 	.word	0x0800b798
 8008598:	3ff00000 	.word	0x3ff00000
 800859c:	40240000 	.word	0x40240000
 80085a0:	401c0000 	.word	0x401c0000
 80085a4:	40140000 	.word	0x40140000
 80085a8:	3fe00000 	.word	0x3fe00000
 80085ac:	9d01      	ldr	r5, [sp, #4]
 80085ae:	4656      	mov	r6, sl
 80085b0:	465f      	mov	r7, fp
 80085b2:	4642      	mov	r2, r8
 80085b4:	464b      	mov	r3, r9
 80085b6:	4630      	mov	r0, r6
 80085b8:	4639      	mov	r1, r7
 80085ba:	f7f8 f947 	bl	800084c <__aeabi_ddiv>
 80085be:	f7f8 facb 	bl	8000b58 <__aeabi_d2iz>
 80085c2:	4682      	mov	sl, r0
 80085c4:	f7f7 ffae 	bl	8000524 <__aeabi_i2d>
 80085c8:	4642      	mov	r2, r8
 80085ca:	464b      	mov	r3, r9
 80085cc:	f7f8 f814 	bl	80005f8 <__aeabi_dmul>
 80085d0:	4602      	mov	r2, r0
 80085d2:	460b      	mov	r3, r1
 80085d4:	4630      	mov	r0, r6
 80085d6:	4639      	mov	r1, r7
 80085d8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80085dc:	f7f7 fe54 	bl	8000288 <__aeabi_dsub>
 80085e0:	f805 6b01 	strb.w	r6, [r5], #1
 80085e4:	9e01      	ldr	r6, [sp, #4]
 80085e6:	9f03      	ldr	r7, [sp, #12]
 80085e8:	1bae      	subs	r6, r5, r6
 80085ea:	42b7      	cmp	r7, r6
 80085ec:	4602      	mov	r2, r0
 80085ee:	460b      	mov	r3, r1
 80085f0:	d135      	bne.n	800865e <_dtoa_r+0x6e6>
 80085f2:	f7f7 fe4b 	bl	800028c <__adddf3>
 80085f6:	4642      	mov	r2, r8
 80085f8:	464b      	mov	r3, r9
 80085fa:	4606      	mov	r6, r0
 80085fc:	460f      	mov	r7, r1
 80085fe:	f7f8 fa8b 	bl	8000b18 <__aeabi_dcmpgt>
 8008602:	b9d0      	cbnz	r0, 800863a <_dtoa_r+0x6c2>
 8008604:	4642      	mov	r2, r8
 8008606:	464b      	mov	r3, r9
 8008608:	4630      	mov	r0, r6
 800860a:	4639      	mov	r1, r7
 800860c:	f7f8 fa5c 	bl	8000ac8 <__aeabi_dcmpeq>
 8008610:	b110      	cbz	r0, 8008618 <_dtoa_r+0x6a0>
 8008612:	f01a 0f01 	tst.w	sl, #1
 8008616:	d110      	bne.n	800863a <_dtoa_r+0x6c2>
 8008618:	4620      	mov	r0, r4
 800861a:	ee18 1a10 	vmov	r1, s16
 800861e:	f000 fe75 	bl	800930c <_Bfree>
 8008622:	2300      	movs	r3, #0
 8008624:	9800      	ldr	r0, [sp, #0]
 8008626:	702b      	strb	r3, [r5, #0]
 8008628:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800862a:	3001      	adds	r0, #1
 800862c:	6018      	str	r0, [r3, #0]
 800862e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008630:	2b00      	cmp	r3, #0
 8008632:	f43f acf1 	beq.w	8008018 <_dtoa_r+0xa0>
 8008636:	601d      	str	r5, [r3, #0]
 8008638:	e4ee      	b.n	8008018 <_dtoa_r+0xa0>
 800863a:	9f00      	ldr	r7, [sp, #0]
 800863c:	462b      	mov	r3, r5
 800863e:	461d      	mov	r5, r3
 8008640:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008644:	2a39      	cmp	r2, #57	; 0x39
 8008646:	d106      	bne.n	8008656 <_dtoa_r+0x6de>
 8008648:	9a01      	ldr	r2, [sp, #4]
 800864a:	429a      	cmp	r2, r3
 800864c:	d1f7      	bne.n	800863e <_dtoa_r+0x6c6>
 800864e:	9901      	ldr	r1, [sp, #4]
 8008650:	2230      	movs	r2, #48	; 0x30
 8008652:	3701      	adds	r7, #1
 8008654:	700a      	strb	r2, [r1, #0]
 8008656:	781a      	ldrb	r2, [r3, #0]
 8008658:	3201      	adds	r2, #1
 800865a:	701a      	strb	r2, [r3, #0]
 800865c:	e790      	b.n	8008580 <_dtoa_r+0x608>
 800865e:	4ba6      	ldr	r3, [pc, #664]	; (80088f8 <_dtoa_r+0x980>)
 8008660:	2200      	movs	r2, #0
 8008662:	f7f7 ffc9 	bl	80005f8 <__aeabi_dmul>
 8008666:	2200      	movs	r2, #0
 8008668:	2300      	movs	r3, #0
 800866a:	4606      	mov	r6, r0
 800866c:	460f      	mov	r7, r1
 800866e:	f7f8 fa2b 	bl	8000ac8 <__aeabi_dcmpeq>
 8008672:	2800      	cmp	r0, #0
 8008674:	d09d      	beq.n	80085b2 <_dtoa_r+0x63a>
 8008676:	e7cf      	b.n	8008618 <_dtoa_r+0x6a0>
 8008678:	9a08      	ldr	r2, [sp, #32]
 800867a:	2a00      	cmp	r2, #0
 800867c:	f000 80d7 	beq.w	800882e <_dtoa_r+0x8b6>
 8008680:	9a06      	ldr	r2, [sp, #24]
 8008682:	2a01      	cmp	r2, #1
 8008684:	f300 80ba 	bgt.w	80087fc <_dtoa_r+0x884>
 8008688:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800868a:	2a00      	cmp	r2, #0
 800868c:	f000 80b2 	beq.w	80087f4 <_dtoa_r+0x87c>
 8008690:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008694:	9e07      	ldr	r6, [sp, #28]
 8008696:	9d04      	ldr	r5, [sp, #16]
 8008698:	9a04      	ldr	r2, [sp, #16]
 800869a:	441a      	add	r2, r3
 800869c:	9204      	str	r2, [sp, #16]
 800869e:	9a05      	ldr	r2, [sp, #20]
 80086a0:	2101      	movs	r1, #1
 80086a2:	441a      	add	r2, r3
 80086a4:	4620      	mov	r0, r4
 80086a6:	9205      	str	r2, [sp, #20]
 80086a8:	f000 ff32 	bl	8009510 <__i2b>
 80086ac:	4607      	mov	r7, r0
 80086ae:	2d00      	cmp	r5, #0
 80086b0:	dd0c      	ble.n	80086cc <_dtoa_r+0x754>
 80086b2:	9b05      	ldr	r3, [sp, #20]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	dd09      	ble.n	80086cc <_dtoa_r+0x754>
 80086b8:	42ab      	cmp	r3, r5
 80086ba:	9a04      	ldr	r2, [sp, #16]
 80086bc:	bfa8      	it	ge
 80086be:	462b      	movge	r3, r5
 80086c0:	1ad2      	subs	r2, r2, r3
 80086c2:	9204      	str	r2, [sp, #16]
 80086c4:	9a05      	ldr	r2, [sp, #20]
 80086c6:	1aed      	subs	r5, r5, r3
 80086c8:	1ad3      	subs	r3, r2, r3
 80086ca:	9305      	str	r3, [sp, #20]
 80086cc:	9b07      	ldr	r3, [sp, #28]
 80086ce:	b31b      	cbz	r3, 8008718 <_dtoa_r+0x7a0>
 80086d0:	9b08      	ldr	r3, [sp, #32]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	f000 80af 	beq.w	8008836 <_dtoa_r+0x8be>
 80086d8:	2e00      	cmp	r6, #0
 80086da:	dd13      	ble.n	8008704 <_dtoa_r+0x78c>
 80086dc:	4639      	mov	r1, r7
 80086de:	4632      	mov	r2, r6
 80086e0:	4620      	mov	r0, r4
 80086e2:	f000 ffd5 	bl	8009690 <__pow5mult>
 80086e6:	ee18 2a10 	vmov	r2, s16
 80086ea:	4601      	mov	r1, r0
 80086ec:	4607      	mov	r7, r0
 80086ee:	4620      	mov	r0, r4
 80086f0:	f000 ff24 	bl	800953c <__multiply>
 80086f4:	ee18 1a10 	vmov	r1, s16
 80086f8:	4680      	mov	r8, r0
 80086fa:	4620      	mov	r0, r4
 80086fc:	f000 fe06 	bl	800930c <_Bfree>
 8008700:	ee08 8a10 	vmov	s16, r8
 8008704:	9b07      	ldr	r3, [sp, #28]
 8008706:	1b9a      	subs	r2, r3, r6
 8008708:	d006      	beq.n	8008718 <_dtoa_r+0x7a0>
 800870a:	ee18 1a10 	vmov	r1, s16
 800870e:	4620      	mov	r0, r4
 8008710:	f000 ffbe 	bl	8009690 <__pow5mult>
 8008714:	ee08 0a10 	vmov	s16, r0
 8008718:	2101      	movs	r1, #1
 800871a:	4620      	mov	r0, r4
 800871c:	f000 fef8 	bl	8009510 <__i2b>
 8008720:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008722:	2b00      	cmp	r3, #0
 8008724:	4606      	mov	r6, r0
 8008726:	f340 8088 	ble.w	800883a <_dtoa_r+0x8c2>
 800872a:	461a      	mov	r2, r3
 800872c:	4601      	mov	r1, r0
 800872e:	4620      	mov	r0, r4
 8008730:	f000 ffae 	bl	8009690 <__pow5mult>
 8008734:	9b06      	ldr	r3, [sp, #24]
 8008736:	2b01      	cmp	r3, #1
 8008738:	4606      	mov	r6, r0
 800873a:	f340 8081 	ble.w	8008840 <_dtoa_r+0x8c8>
 800873e:	f04f 0800 	mov.w	r8, #0
 8008742:	6933      	ldr	r3, [r6, #16]
 8008744:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008748:	6918      	ldr	r0, [r3, #16]
 800874a:	f000 fe91 	bl	8009470 <__hi0bits>
 800874e:	f1c0 0020 	rsb	r0, r0, #32
 8008752:	9b05      	ldr	r3, [sp, #20]
 8008754:	4418      	add	r0, r3
 8008756:	f010 001f 	ands.w	r0, r0, #31
 800875a:	f000 8092 	beq.w	8008882 <_dtoa_r+0x90a>
 800875e:	f1c0 0320 	rsb	r3, r0, #32
 8008762:	2b04      	cmp	r3, #4
 8008764:	f340 808a 	ble.w	800887c <_dtoa_r+0x904>
 8008768:	f1c0 001c 	rsb	r0, r0, #28
 800876c:	9b04      	ldr	r3, [sp, #16]
 800876e:	4403      	add	r3, r0
 8008770:	9304      	str	r3, [sp, #16]
 8008772:	9b05      	ldr	r3, [sp, #20]
 8008774:	4403      	add	r3, r0
 8008776:	4405      	add	r5, r0
 8008778:	9305      	str	r3, [sp, #20]
 800877a:	9b04      	ldr	r3, [sp, #16]
 800877c:	2b00      	cmp	r3, #0
 800877e:	dd07      	ble.n	8008790 <_dtoa_r+0x818>
 8008780:	ee18 1a10 	vmov	r1, s16
 8008784:	461a      	mov	r2, r3
 8008786:	4620      	mov	r0, r4
 8008788:	f000 ffdc 	bl	8009744 <__lshift>
 800878c:	ee08 0a10 	vmov	s16, r0
 8008790:	9b05      	ldr	r3, [sp, #20]
 8008792:	2b00      	cmp	r3, #0
 8008794:	dd05      	ble.n	80087a2 <_dtoa_r+0x82a>
 8008796:	4631      	mov	r1, r6
 8008798:	461a      	mov	r2, r3
 800879a:	4620      	mov	r0, r4
 800879c:	f000 ffd2 	bl	8009744 <__lshift>
 80087a0:	4606      	mov	r6, r0
 80087a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d06e      	beq.n	8008886 <_dtoa_r+0x90e>
 80087a8:	ee18 0a10 	vmov	r0, s16
 80087ac:	4631      	mov	r1, r6
 80087ae:	f001 f839 	bl	8009824 <__mcmp>
 80087b2:	2800      	cmp	r0, #0
 80087b4:	da67      	bge.n	8008886 <_dtoa_r+0x90e>
 80087b6:	9b00      	ldr	r3, [sp, #0]
 80087b8:	3b01      	subs	r3, #1
 80087ba:	ee18 1a10 	vmov	r1, s16
 80087be:	9300      	str	r3, [sp, #0]
 80087c0:	220a      	movs	r2, #10
 80087c2:	2300      	movs	r3, #0
 80087c4:	4620      	mov	r0, r4
 80087c6:	f000 fdc3 	bl	8009350 <__multadd>
 80087ca:	9b08      	ldr	r3, [sp, #32]
 80087cc:	ee08 0a10 	vmov	s16, r0
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	f000 81b1 	beq.w	8008b38 <_dtoa_r+0xbc0>
 80087d6:	2300      	movs	r3, #0
 80087d8:	4639      	mov	r1, r7
 80087da:	220a      	movs	r2, #10
 80087dc:	4620      	mov	r0, r4
 80087de:	f000 fdb7 	bl	8009350 <__multadd>
 80087e2:	9b02      	ldr	r3, [sp, #8]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	4607      	mov	r7, r0
 80087e8:	f300 808e 	bgt.w	8008908 <_dtoa_r+0x990>
 80087ec:	9b06      	ldr	r3, [sp, #24]
 80087ee:	2b02      	cmp	r3, #2
 80087f0:	dc51      	bgt.n	8008896 <_dtoa_r+0x91e>
 80087f2:	e089      	b.n	8008908 <_dtoa_r+0x990>
 80087f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80087f6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80087fa:	e74b      	b.n	8008694 <_dtoa_r+0x71c>
 80087fc:	9b03      	ldr	r3, [sp, #12]
 80087fe:	1e5e      	subs	r6, r3, #1
 8008800:	9b07      	ldr	r3, [sp, #28]
 8008802:	42b3      	cmp	r3, r6
 8008804:	bfbf      	itttt	lt
 8008806:	9b07      	ldrlt	r3, [sp, #28]
 8008808:	9607      	strlt	r6, [sp, #28]
 800880a:	1af2      	sublt	r2, r6, r3
 800880c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800880e:	bfb6      	itet	lt
 8008810:	189b      	addlt	r3, r3, r2
 8008812:	1b9e      	subge	r6, r3, r6
 8008814:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008816:	9b03      	ldr	r3, [sp, #12]
 8008818:	bfb8      	it	lt
 800881a:	2600      	movlt	r6, #0
 800881c:	2b00      	cmp	r3, #0
 800881e:	bfb7      	itett	lt
 8008820:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008824:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008828:	1a9d      	sublt	r5, r3, r2
 800882a:	2300      	movlt	r3, #0
 800882c:	e734      	b.n	8008698 <_dtoa_r+0x720>
 800882e:	9e07      	ldr	r6, [sp, #28]
 8008830:	9d04      	ldr	r5, [sp, #16]
 8008832:	9f08      	ldr	r7, [sp, #32]
 8008834:	e73b      	b.n	80086ae <_dtoa_r+0x736>
 8008836:	9a07      	ldr	r2, [sp, #28]
 8008838:	e767      	b.n	800870a <_dtoa_r+0x792>
 800883a:	9b06      	ldr	r3, [sp, #24]
 800883c:	2b01      	cmp	r3, #1
 800883e:	dc18      	bgt.n	8008872 <_dtoa_r+0x8fa>
 8008840:	f1ba 0f00 	cmp.w	sl, #0
 8008844:	d115      	bne.n	8008872 <_dtoa_r+0x8fa>
 8008846:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800884a:	b993      	cbnz	r3, 8008872 <_dtoa_r+0x8fa>
 800884c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008850:	0d1b      	lsrs	r3, r3, #20
 8008852:	051b      	lsls	r3, r3, #20
 8008854:	b183      	cbz	r3, 8008878 <_dtoa_r+0x900>
 8008856:	9b04      	ldr	r3, [sp, #16]
 8008858:	3301      	adds	r3, #1
 800885a:	9304      	str	r3, [sp, #16]
 800885c:	9b05      	ldr	r3, [sp, #20]
 800885e:	3301      	adds	r3, #1
 8008860:	9305      	str	r3, [sp, #20]
 8008862:	f04f 0801 	mov.w	r8, #1
 8008866:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008868:	2b00      	cmp	r3, #0
 800886a:	f47f af6a 	bne.w	8008742 <_dtoa_r+0x7ca>
 800886e:	2001      	movs	r0, #1
 8008870:	e76f      	b.n	8008752 <_dtoa_r+0x7da>
 8008872:	f04f 0800 	mov.w	r8, #0
 8008876:	e7f6      	b.n	8008866 <_dtoa_r+0x8ee>
 8008878:	4698      	mov	r8, r3
 800887a:	e7f4      	b.n	8008866 <_dtoa_r+0x8ee>
 800887c:	f43f af7d 	beq.w	800877a <_dtoa_r+0x802>
 8008880:	4618      	mov	r0, r3
 8008882:	301c      	adds	r0, #28
 8008884:	e772      	b.n	800876c <_dtoa_r+0x7f4>
 8008886:	9b03      	ldr	r3, [sp, #12]
 8008888:	2b00      	cmp	r3, #0
 800888a:	dc37      	bgt.n	80088fc <_dtoa_r+0x984>
 800888c:	9b06      	ldr	r3, [sp, #24]
 800888e:	2b02      	cmp	r3, #2
 8008890:	dd34      	ble.n	80088fc <_dtoa_r+0x984>
 8008892:	9b03      	ldr	r3, [sp, #12]
 8008894:	9302      	str	r3, [sp, #8]
 8008896:	9b02      	ldr	r3, [sp, #8]
 8008898:	b96b      	cbnz	r3, 80088b6 <_dtoa_r+0x93e>
 800889a:	4631      	mov	r1, r6
 800889c:	2205      	movs	r2, #5
 800889e:	4620      	mov	r0, r4
 80088a0:	f000 fd56 	bl	8009350 <__multadd>
 80088a4:	4601      	mov	r1, r0
 80088a6:	4606      	mov	r6, r0
 80088a8:	ee18 0a10 	vmov	r0, s16
 80088ac:	f000 ffba 	bl	8009824 <__mcmp>
 80088b0:	2800      	cmp	r0, #0
 80088b2:	f73f adbb 	bgt.w	800842c <_dtoa_r+0x4b4>
 80088b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088b8:	9d01      	ldr	r5, [sp, #4]
 80088ba:	43db      	mvns	r3, r3
 80088bc:	9300      	str	r3, [sp, #0]
 80088be:	f04f 0800 	mov.w	r8, #0
 80088c2:	4631      	mov	r1, r6
 80088c4:	4620      	mov	r0, r4
 80088c6:	f000 fd21 	bl	800930c <_Bfree>
 80088ca:	2f00      	cmp	r7, #0
 80088cc:	f43f aea4 	beq.w	8008618 <_dtoa_r+0x6a0>
 80088d0:	f1b8 0f00 	cmp.w	r8, #0
 80088d4:	d005      	beq.n	80088e2 <_dtoa_r+0x96a>
 80088d6:	45b8      	cmp	r8, r7
 80088d8:	d003      	beq.n	80088e2 <_dtoa_r+0x96a>
 80088da:	4641      	mov	r1, r8
 80088dc:	4620      	mov	r0, r4
 80088de:	f000 fd15 	bl	800930c <_Bfree>
 80088e2:	4639      	mov	r1, r7
 80088e4:	4620      	mov	r0, r4
 80088e6:	f000 fd11 	bl	800930c <_Bfree>
 80088ea:	e695      	b.n	8008618 <_dtoa_r+0x6a0>
 80088ec:	2600      	movs	r6, #0
 80088ee:	4637      	mov	r7, r6
 80088f0:	e7e1      	b.n	80088b6 <_dtoa_r+0x93e>
 80088f2:	9700      	str	r7, [sp, #0]
 80088f4:	4637      	mov	r7, r6
 80088f6:	e599      	b.n	800842c <_dtoa_r+0x4b4>
 80088f8:	40240000 	.word	0x40240000
 80088fc:	9b08      	ldr	r3, [sp, #32]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	f000 80ca 	beq.w	8008a98 <_dtoa_r+0xb20>
 8008904:	9b03      	ldr	r3, [sp, #12]
 8008906:	9302      	str	r3, [sp, #8]
 8008908:	2d00      	cmp	r5, #0
 800890a:	dd05      	ble.n	8008918 <_dtoa_r+0x9a0>
 800890c:	4639      	mov	r1, r7
 800890e:	462a      	mov	r2, r5
 8008910:	4620      	mov	r0, r4
 8008912:	f000 ff17 	bl	8009744 <__lshift>
 8008916:	4607      	mov	r7, r0
 8008918:	f1b8 0f00 	cmp.w	r8, #0
 800891c:	d05b      	beq.n	80089d6 <_dtoa_r+0xa5e>
 800891e:	6879      	ldr	r1, [r7, #4]
 8008920:	4620      	mov	r0, r4
 8008922:	f000 fcb3 	bl	800928c <_Balloc>
 8008926:	4605      	mov	r5, r0
 8008928:	b928      	cbnz	r0, 8008936 <_dtoa_r+0x9be>
 800892a:	4b87      	ldr	r3, [pc, #540]	; (8008b48 <_dtoa_r+0xbd0>)
 800892c:	4602      	mov	r2, r0
 800892e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008932:	f7ff bb3b 	b.w	8007fac <_dtoa_r+0x34>
 8008936:	693a      	ldr	r2, [r7, #16]
 8008938:	3202      	adds	r2, #2
 800893a:	0092      	lsls	r2, r2, #2
 800893c:	f107 010c 	add.w	r1, r7, #12
 8008940:	300c      	adds	r0, #12
 8008942:	f000 fc95 	bl	8009270 <memcpy>
 8008946:	2201      	movs	r2, #1
 8008948:	4629      	mov	r1, r5
 800894a:	4620      	mov	r0, r4
 800894c:	f000 fefa 	bl	8009744 <__lshift>
 8008950:	9b01      	ldr	r3, [sp, #4]
 8008952:	f103 0901 	add.w	r9, r3, #1
 8008956:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800895a:	4413      	add	r3, r2
 800895c:	9305      	str	r3, [sp, #20]
 800895e:	f00a 0301 	and.w	r3, sl, #1
 8008962:	46b8      	mov	r8, r7
 8008964:	9304      	str	r3, [sp, #16]
 8008966:	4607      	mov	r7, r0
 8008968:	4631      	mov	r1, r6
 800896a:	ee18 0a10 	vmov	r0, s16
 800896e:	f7ff fa77 	bl	8007e60 <quorem>
 8008972:	4641      	mov	r1, r8
 8008974:	9002      	str	r0, [sp, #8]
 8008976:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800897a:	ee18 0a10 	vmov	r0, s16
 800897e:	f000 ff51 	bl	8009824 <__mcmp>
 8008982:	463a      	mov	r2, r7
 8008984:	9003      	str	r0, [sp, #12]
 8008986:	4631      	mov	r1, r6
 8008988:	4620      	mov	r0, r4
 800898a:	f000 ff67 	bl	800985c <__mdiff>
 800898e:	68c2      	ldr	r2, [r0, #12]
 8008990:	f109 3bff 	add.w	fp, r9, #4294967295
 8008994:	4605      	mov	r5, r0
 8008996:	bb02      	cbnz	r2, 80089da <_dtoa_r+0xa62>
 8008998:	4601      	mov	r1, r0
 800899a:	ee18 0a10 	vmov	r0, s16
 800899e:	f000 ff41 	bl	8009824 <__mcmp>
 80089a2:	4602      	mov	r2, r0
 80089a4:	4629      	mov	r1, r5
 80089a6:	4620      	mov	r0, r4
 80089a8:	9207      	str	r2, [sp, #28]
 80089aa:	f000 fcaf 	bl	800930c <_Bfree>
 80089ae:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80089b2:	ea43 0102 	orr.w	r1, r3, r2
 80089b6:	9b04      	ldr	r3, [sp, #16]
 80089b8:	430b      	orrs	r3, r1
 80089ba:	464d      	mov	r5, r9
 80089bc:	d10f      	bne.n	80089de <_dtoa_r+0xa66>
 80089be:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80089c2:	d02a      	beq.n	8008a1a <_dtoa_r+0xaa2>
 80089c4:	9b03      	ldr	r3, [sp, #12]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	dd02      	ble.n	80089d0 <_dtoa_r+0xa58>
 80089ca:	9b02      	ldr	r3, [sp, #8]
 80089cc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80089d0:	f88b a000 	strb.w	sl, [fp]
 80089d4:	e775      	b.n	80088c2 <_dtoa_r+0x94a>
 80089d6:	4638      	mov	r0, r7
 80089d8:	e7ba      	b.n	8008950 <_dtoa_r+0x9d8>
 80089da:	2201      	movs	r2, #1
 80089dc:	e7e2      	b.n	80089a4 <_dtoa_r+0xa2c>
 80089de:	9b03      	ldr	r3, [sp, #12]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	db04      	blt.n	80089ee <_dtoa_r+0xa76>
 80089e4:	9906      	ldr	r1, [sp, #24]
 80089e6:	430b      	orrs	r3, r1
 80089e8:	9904      	ldr	r1, [sp, #16]
 80089ea:	430b      	orrs	r3, r1
 80089ec:	d122      	bne.n	8008a34 <_dtoa_r+0xabc>
 80089ee:	2a00      	cmp	r2, #0
 80089f0:	ddee      	ble.n	80089d0 <_dtoa_r+0xa58>
 80089f2:	ee18 1a10 	vmov	r1, s16
 80089f6:	2201      	movs	r2, #1
 80089f8:	4620      	mov	r0, r4
 80089fa:	f000 fea3 	bl	8009744 <__lshift>
 80089fe:	4631      	mov	r1, r6
 8008a00:	ee08 0a10 	vmov	s16, r0
 8008a04:	f000 ff0e 	bl	8009824 <__mcmp>
 8008a08:	2800      	cmp	r0, #0
 8008a0a:	dc03      	bgt.n	8008a14 <_dtoa_r+0xa9c>
 8008a0c:	d1e0      	bne.n	80089d0 <_dtoa_r+0xa58>
 8008a0e:	f01a 0f01 	tst.w	sl, #1
 8008a12:	d0dd      	beq.n	80089d0 <_dtoa_r+0xa58>
 8008a14:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008a18:	d1d7      	bne.n	80089ca <_dtoa_r+0xa52>
 8008a1a:	2339      	movs	r3, #57	; 0x39
 8008a1c:	f88b 3000 	strb.w	r3, [fp]
 8008a20:	462b      	mov	r3, r5
 8008a22:	461d      	mov	r5, r3
 8008a24:	3b01      	subs	r3, #1
 8008a26:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008a2a:	2a39      	cmp	r2, #57	; 0x39
 8008a2c:	d071      	beq.n	8008b12 <_dtoa_r+0xb9a>
 8008a2e:	3201      	adds	r2, #1
 8008a30:	701a      	strb	r2, [r3, #0]
 8008a32:	e746      	b.n	80088c2 <_dtoa_r+0x94a>
 8008a34:	2a00      	cmp	r2, #0
 8008a36:	dd07      	ble.n	8008a48 <_dtoa_r+0xad0>
 8008a38:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008a3c:	d0ed      	beq.n	8008a1a <_dtoa_r+0xaa2>
 8008a3e:	f10a 0301 	add.w	r3, sl, #1
 8008a42:	f88b 3000 	strb.w	r3, [fp]
 8008a46:	e73c      	b.n	80088c2 <_dtoa_r+0x94a>
 8008a48:	9b05      	ldr	r3, [sp, #20]
 8008a4a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008a4e:	4599      	cmp	r9, r3
 8008a50:	d047      	beq.n	8008ae2 <_dtoa_r+0xb6a>
 8008a52:	ee18 1a10 	vmov	r1, s16
 8008a56:	2300      	movs	r3, #0
 8008a58:	220a      	movs	r2, #10
 8008a5a:	4620      	mov	r0, r4
 8008a5c:	f000 fc78 	bl	8009350 <__multadd>
 8008a60:	45b8      	cmp	r8, r7
 8008a62:	ee08 0a10 	vmov	s16, r0
 8008a66:	f04f 0300 	mov.w	r3, #0
 8008a6a:	f04f 020a 	mov.w	r2, #10
 8008a6e:	4641      	mov	r1, r8
 8008a70:	4620      	mov	r0, r4
 8008a72:	d106      	bne.n	8008a82 <_dtoa_r+0xb0a>
 8008a74:	f000 fc6c 	bl	8009350 <__multadd>
 8008a78:	4680      	mov	r8, r0
 8008a7a:	4607      	mov	r7, r0
 8008a7c:	f109 0901 	add.w	r9, r9, #1
 8008a80:	e772      	b.n	8008968 <_dtoa_r+0x9f0>
 8008a82:	f000 fc65 	bl	8009350 <__multadd>
 8008a86:	4639      	mov	r1, r7
 8008a88:	4680      	mov	r8, r0
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	220a      	movs	r2, #10
 8008a8e:	4620      	mov	r0, r4
 8008a90:	f000 fc5e 	bl	8009350 <__multadd>
 8008a94:	4607      	mov	r7, r0
 8008a96:	e7f1      	b.n	8008a7c <_dtoa_r+0xb04>
 8008a98:	9b03      	ldr	r3, [sp, #12]
 8008a9a:	9302      	str	r3, [sp, #8]
 8008a9c:	9d01      	ldr	r5, [sp, #4]
 8008a9e:	ee18 0a10 	vmov	r0, s16
 8008aa2:	4631      	mov	r1, r6
 8008aa4:	f7ff f9dc 	bl	8007e60 <quorem>
 8008aa8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008aac:	9b01      	ldr	r3, [sp, #4]
 8008aae:	f805 ab01 	strb.w	sl, [r5], #1
 8008ab2:	1aea      	subs	r2, r5, r3
 8008ab4:	9b02      	ldr	r3, [sp, #8]
 8008ab6:	4293      	cmp	r3, r2
 8008ab8:	dd09      	ble.n	8008ace <_dtoa_r+0xb56>
 8008aba:	ee18 1a10 	vmov	r1, s16
 8008abe:	2300      	movs	r3, #0
 8008ac0:	220a      	movs	r2, #10
 8008ac2:	4620      	mov	r0, r4
 8008ac4:	f000 fc44 	bl	8009350 <__multadd>
 8008ac8:	ee08 0a10 	vmov	s16, r0
 8008acc:	e7e7      	b.n	8008a9e <_dtoa_r+0xb26>
 8008ace:	9b02      	ldr	r3, [sp, #8]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	bfc8      	it	gt
 8008ad4:	461d      	movgt	r5, r3
 8008ad6:	9b01      	ldr	r3, [sp, #4]
 8008ad8:	bfd8      	it	le
 8008ada:	2501      	movle	r5, #1
 8008adc:	441d      	add	r5, r3
 8008ade:	f04f 0800 	mov.w	r8, #0
 8008ae2:	ee18 1a10 	vmov	r1, s16
 8008ae6:	2201      	movs	r2, #1
 8008ae8:	4620      	mov	r0, r4
 8008aea:	f000 fe2b 	bl	8009744 <__lshift>
 8008aee:	4631      	mov	r1, r6
 8008af0:	ee08 0a10 	vmov	s16, r0
 8008af4:	f000 fe96 	bl	8009824 <__mcmp>
 8008af8:	2800      	cmp	r0, #0
 8008afa:	dc91      	bgt.n	8008a20 <_dtoa_r+0xaa8>
 8008afc:	d102      	bne.n	8008b04 <_dtoa_r+0xb8c>
 8008afe:	f01a 0f01 	tst.w	sl, #1
 8008b02:	d18d      	bne.n	8008a20 <_dtoa_r+0xaa8>
 8008b04:	462b      	mov	r3, r5
 8008b06:	461d      	mov	r5, r3
 8008b08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008b0c:	2a30      	cmp	r2, #48	; 0x30
 8008b0e:	d0fa      	beq.n	8008b06 <_dtoa_r+0xb8e>
 8008b10:	e6d7      	b.n	80088c2 <_dtoa_r+0x94a>
 8008b12:	9a01      	ldr	r2, [sp, #4]
 8008b14:	429a      	cmp	r2, r3
 8008b16:	d184      	bne.n	8008a22 <_dtoa_r+0xaaa>
 8008b18:	9b00      	ldr	r3, [sp, #0]
 8008b1a:	3301      	adds	r3, #1
 8008b1c:	9300      	str	r3, [sp, #0]
 8008b1e:	2331      	movs	r3, #49	; 0x31
 8008b20:	7013      	strb	r3, [r2, #0]
 8008b22:	e6ce      	b.n	80088c2 <_dtoa_r+0x94a>
 8008b24:	4b09      	ldr	r3, [pc, #36]	; (8008b4c <_dtoa_r+0xbd4>)
 8008b26:	f7ff ba95 	b.w	8008054 <_dtoa_r+0xdc>
 8008b2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	f47f aa6e 	bne.w	800800e <_dtoa_r+0x96>
 8008b32:	4b07      	ldr	r3, [pc, #28]	; (8008b50 <_dtoa_r+0xbd8>)
 8008b34:	f7ff ba8e 	b.w	8008054 <_dtoa_r+0xdc>
 8008b38:	9b02      	ldr	r3, [sp, #8]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	dcae      	bgt.n	8008a9c <_dtoa_r+0xb24>
 8008b3e:	9b06      	ldr	r3, [sp, #24]
 8008b40:	2b02      	cmp	r3, #2
 8008b42:	f73f aea8 	bgt.w	8008896 <_dtoa_r+0x91e>
 8008b46:	e7a9      	b.n	8008a9c <_dtoa_r+0xb24>
 8008b48:	0800b6b0 	.word	0x0800b6b0
 8008b4c:	0800b4b4 	.word	0x0800b4b4
 8008b50:	0800b631 	.word	0x0800b631

08008b54 <rshift>:
 8008b54:	6903      	ldr	r3, [r0, #16]
 8008b56:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008b5a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008b5e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008b62:	f100 0414 	add.w	r4, r0, #20
 8008b66:	dd45      	ble.n	8008bf4 <rshift+0xa0>
 8008b68:	f011 011f 	ands.w	r1, r1, #31
 8008b6c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008b70:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008b74:	d10c      	bne.n	8008b90 <rshift+0x3c>
 8008b76:	f100 0710 	add.w	r7, r0, #16
 8008b7a:	4629      	mov	r1, r5
 8008b7c:	42b1      	cmp	r1, r6
 8008b7e:	d334      	bcc.n	8008bea <rshift+0x96>
 8008b80:	1a9b      	subs	r3, r3, r2
 8008b82:	009b      	lsls	r3, r3, #2
 8008b84:	1eea      	subs	r2, r5, #3
 8008b86:	4296      	cmp	r6, r2
 8008b88:	bf38      	it	cc
 8008b8a:	2300      	movcc	r3, #0
 8008b8c:	4423      	add	r3, r4
 8008b8e:	e015      	b.n	8008bbc <rshift+0x68>
 8008b90:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008b94:	f1c1 0820 	rsb	r8, r1, #32
 8008b98:	40cf      	lsrs	r7, r1
 8008b9a:	f105 0e04 	add.w	lr, r5, #4
 8008b9e:	46a1      	mov	r9, r4
 8008ba0:	4576      	cmp	r6, lr
 8008ba2:	46f4      	mov	ip, lr
 8008ba4:	d815      	bhi.n	8008bd2 <rshift+0x7e>
 8008ba6:	1a9a      	subs	r2, r3, r2
 8008ba8:	0092      	lsls	r2, r2, #2
 8008baa:	3a04      	subs	r2, #4
 8008bac:	3501      	adds	r5, #1
 8008bae:	42ae      	cmp	r6, r5
 8008bb0:	bf38      	it	cc
 8008bb2:	2200      	movcc	r2, #0
 8008bb4:	18a3      	adds	r3, r4, r2
 8008bb6:	50a7      	str	r7, [r4, r2]
 8008bb8:	b107      	cbz	r7, 8008bbc <rshift+0x68>
 8008bba:	3304      	adds	r3, #4
 8008bbc:	1b1a      	subs	r2, r3, r4
 8008bbe:	42a3      	cmp	r3, r4
 8008bc0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008bc4:	bf08      	it	eq
 8008bc6:	2300      	moveq	r3, #0
 8008bc8:	6102      	str	r2, [r0, #16]
 8008bca:	bf08      	it	eq
 8008bcc:	6143      	streq	r3, [r0, #20]
 8008bce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008bd2:	f8dc c000 	ldr.w	ip, [ip]
 8008bd6:	fa0c fc08 	lsl.w	ip, ip, r8
 8008bda:	ea4c 0707 	orr.w	r7, ip, r7
 8008bde:	f849 7b04 	str.w	r7, [r9], #4
 8008be2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008be6:	40cf      	lsrs	r7, r1
 8008be8:	e7da      	b.n	8008ba0 <rshift+0x4c>
 8008bea:	f851 cb04 	ldr.w	ip, [r1], #4
 8008bee:	f847 cf04 	str.w	ip, [r7, #4]!
 8008bf2:	e7c3      	b.n	8008b7c <rshift+0x28>
 8008bf4:	4623      	mov	r3, r4
 8008bf6:	e7e1      	b.n	8008bbc <rshift+0x68>

08008bf8 <__hexdig_fun>:
 8008bf8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008bfc:	2b09      	cmp	r3, #9
 8008bfe:	d802      	bhi.n	8008c06 <__hexdig_fun+0xe>
 8008c00:	3820      	subs	r0, #32
 8008c02:	b2c0      	uxtb	r0, r0
 8008c04:	4770      	bx	lr
 8008c06:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008c0a:	2b05      	cmp	r3, #5
 8008c0c:	d801      	bhi.n	8008c12 <__hexdig_fun+0x1a>
 8008c0e:	3847      	subs	r0, #71	; 0x47
 8008c10:	e7f7      	b.n	8008c02 <__hexdig_fun+0xa>
 8008c12:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008c16:	2b05      	cmp	r3, #5
 8008c18:	d801      	bhi.n	8008c1e <__hexdig_fun+0x26>
 8008c1a:	3827      	subs	r0, #39	; 0x27
 8008c1c:	e7f1      	b.n	8008c02 <__hexdig_fun+0xa>
 8008c1e:	2000      	movs	r0, #0
 8008c20:	4770      	bx	lr
	...

08008c24 <__gethex>:
 8008c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c28:	ed2d 8b02 	vpush	{d8}
 8008c2c:	b089      	sub	sp, #36	; 0x24
 8008c2e:	ee08 0a10 	vmov	s16, r0
 8008c32:	9304      	str	r3, [sp, #16]
 8008c34:	4bb4      	ldr	r3, [pc, #720]	; (8008f08 <__gethex+0x2e4>)
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	9301      	str	r3, [sp, #4]
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	468b      	mov	fp, r1
 8008c3e:	4690      	mov	r8, r2
 8008c40:	f7f7 fac6 	bl	80001d0 <strlen>
 8008c44:	9b01      	ldr	r3, [sp, #4]
 8008c46:	f8db 2000 	ldr.w	r2, [fp]
 8008c4a:	4403      	add	r3, r0
 8008c4c:	4682      	mov	sl, r0
 8008c4e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008c52:	9305      	str	r3, [sp, #20]
 8008c54:	1c93      	adds	r3, r2, #2
 8008c56:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008c5a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008c5e:	32fe      	adds	r2, #254	; 0xfe
 8008c60:	18d1      	adds	r1, r2, r3
 8008c62:	461f      	mov	r7, r3
 8008c64:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008c68:	9100      	str	r1, [sp, #0]
 8008c6a:	2830      	cmp	r0, #48	; 0x30
 8008c6c:	d0f8      	beq.n	8008c60 <__gethex+0x3c>
 8008c6e:	f7ff ffc3 	bl	8008bf8 <__hexdig_fun>
 8008c72:	4604      	mov	r4, r0
 8008c74:	2800      	cmp	r0, #0
 8008c76:	d13a      	bne.n	8008cee <__gethex+0xca>
 8008c78:	9901      	ldr	r1, [sp, #4]
 8008c7a:	4652      	mov	r2, sl
 8008c7c:	4638      	mov	r0, r7
 8008c7e:	f001 fa33 	bl	800a0e8 <strncmp>
 8008c82:	4605      	mov	r5, r0
 8008c84:	2800      	cmp	r0, #0
 8008c86:	d168      	bne.n	8008d5a <__gethex+0x136>
 8008c88:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008c8c:	eb07 060a 	add.w	r6, r7, sl
 8008c90:	f7ff ffb2 	bl	8008bf8 <__hexdig_fun>
 8008c94:	2800      	cmp	r0, #0
 8008c96:	d062      	beq.n	8008d5e <__gethex+0x13a>
 8008c98:	4633      	mov	r3, r6
 8008c9a:	7818      	ldrb	r0, [r3, #0]
 8008c9c:	2830      	cmp	r0, #48	; 0x30
 8008c9e:	461f      	mov	r7, r3
 8008ca0:	f103 0301 	add.w	r3, r3, #1
 8008ca4:	d0f9      	beq.n	8008c9a <__gethex+0x76>
 8008ca6:	f7ff ffa7 	bl	8008bf8 <__hexdig_fun>
 8008caa:	2301      	movs	r3, #1
 8008cac:	fab0 f480 	clz	r4, r0
 8008cb0:	0964      	lsrs	r4, r4, #5
 8008cb2:	4635      	mov	r5, r6
 8008cb4:	9300      	str	r3, [sp, #0]
 8008cb6:	463a      	mov	r2, r7
 8008cb8:	4616      	mov	r6, r2
 8008cba:	3201      	adds	r2, #1
 8008cbc:	7830      	ldrb	r0, [r6, #0]
 8008cbe:	f7ff ff9b 	bl	8008bf8 <__hexdig_fun>
 8008cc2:	2800      	cmp	r0, #0
 8008cc4:	d1f8      	bne.n	8008cb8 <__gethex+0x94>
 8008cc6:	9901      	ldr	r1, [sp, #4]
 8008cc8:	4652      	mov	r2, sl
 8008cca:	4630      	mov	r0, r6
 8008ccc:	f001 fa0c 	bl	800a0e8 <strncmp>
 8008cd0:	b980      	cbnz	r0, 8008cf4 <__gethex+0xd0>
 8008cd2:	b94d      	cbnz	r5, 8008ce8 <__gethex+0xc4>
 8008cd4:	eb06 050a 	add.w	r5, r6, sl
 8008cd8:	462a      	mov	r2, r5
 8008cda:	4616      	mov	r6, r2
 8008cdc:	3201      	adds	r2, #1
 8008cde:	7830      	ldrb	r0, [r6, #0]
 8008ce0:	f7ff ff8a 	bl	8008bf8 <__hexdig_fun>
 8008ce4:	2800      	cmp	r0, #0
 8008ce6:	d1f8      	bne.n	8008cda <__gethex+0xb6>
 8008ce8:	1bad      	subs	r5, r5, r6
 8008cea:	00ad      	lsls	r5, r5, #2
 8008cec:	e004      	b.n	8008cf8 <__gethex+0xd4>
 8008cee:	2400      	movs	r4, #0
 8008cf0:	4625      	mov	r5, r4
 8008cf2:	e7e0      	b.n	8008cb6 <__gethex+0x92>
 8008cf4:	2d00      	cmp	r5, #0
 8008cf6:	d1f7      	bne.n	8008ce8 <__gethex+0xc4>
 8008cf8:	7833      	ldrb	r3, [r6, #0]
 8008cfa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008cfe:	2b50      	cmp	r3, #80	; 0x50
 8008d00:	d13b      	bne.n	8008d7a <__gethex+0x156>
 8008d02:	7873      	ldrb	r3, [r6, #1]
 8008d04:	2b2b      	cmp	r3, #43	; 0x2b
 8008d06:	d02c      	beq.n	8008d62 <__gethex+0x13e>
 8008d08:	2b2d      	cmp	r3, #45	; 0x2d
 8008d0a:	d02e      	beq.n	8008d6a <__gethex+0x146>
 8008d0c:	1c71      	adds	r1, r6, #1
 8008d0e:	f04f 0900 	mov.w	r9, #0
 8008d12:	7808      	ldrb	r0, [r1, #0]
 8008d14:	f7ff ff70 	bl	8008bf8 <__hexdig_fun>
 8008d18:	1e43      	subs	r3, r0, #1
 8008d1a:	b2db      	uxtb	r3, r3
 8008d1c:	2b18      	cmp	r3, #24
 8008d1e:	d82c      	bhi.n	8008d7a <__gethex+0x156>
 8008d20:	f1a0 0210 	sub.w	r2, r0, #16
 8008d24:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008d28:	f7ff ff66 	bl	8008bf8 <__hexdig_fun>
 8008d2c:	1e43      	subs	r3, r0, #1
 8008d2e:	b2db      	uxtb	r3, r3
 8008d30:	2b18      	cmp	r3, #24
 8008d32:	d91d      	bls.n	8008d70 <__gethex+0x14c>
 8008d34:	f1b9 0f00 	cmp.w	r9, #0
 8008d38:	d000      	beq.n	8008d3c <__gethex+0x118>
 8008d3a:	4252      	negs	r2, r2
 8008d3c:	4415      	add	r5, r2
 8008d3e:	f8cb 1000 	str.w	r1, [fp]
 8008d42:	b1e4      	cbz	r4, 8008d7e <__gethex+0x15a>
 8008d44:	9b00      	ldr	r3, [sp, #0]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	bf14      	ite	ne
 8008d4a:	2700      	movne	r7, #0
 8008d4c:	2706      	moveq	r7, #6
 8008d4e:	4638      	mov	r0, r7
 8008d50:	b009      	add	sp, #36	; 0x24
 8008d52:	ecbd 8b02 	vpop	{d8}
 8008d56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d5a:	463e      	mov	r6, r7
 8008d5c:	4625      	mov	r5, r4
 8008d5e:	2401      	movs	r4, #1
 8008d60:	e7ca      	b.n	8008cf8 <__gethex+0xd4>
 8008d62:	f04f 0900 	mov.w	r9, #0
 8008d66:	1cb1      	adds	r1, r6, #2
 8008d68:	e7d3      	b.n	8008d12 <__gethex+0xee>
 8008d6a:	f04f 0901 	mov.w	r9, #1
 8008d6e:	e7fa      	b.n	8008d66 <__gethex+0x142>
 8008d70:	230a      	movs	r3, #10
 8008d72:	fb03 0202 	mla	r2, r3, r2, r0
 8008d76:	3a10      	subs	r2, #16
 8008d78:	e7d4      	b.n	8008d24 <__gethex+0x100>
 8008d7a:	4631      	mov	r1, r6
 8008d7c:	e7df      	b.n	8008d3e <__gethex+0x11a>
 8008d7e:	1bf3      	subs	r3, r6, r7
 8008d80:	3b01      	subs	r3, #1
 8008d82:	4621      	mov	r1, r4
 8008d84:	2b07      	cmp	r3, #7
 8008d86:	dc0b      	bgt.n	8008da0 <__gethex+0x17c>
 8008d88:	ee18 0a10 	vmov	r0, s16
 8008d8c:	f000 fa7e 	bl	800928c <_Balloc>
 8008d90:	4604      	mov	r4, r0
 8008d92:	b940      	cbnz	r0, 8008da6 <__gethex+0x182>
 8008d94:	4b5d      	ldr	r3, [pc, #372]	; (8008f0c <__gethex+0x2e8>)
 8008d96:	4602      	mov	r2, r0
 8008d98:	21de      	movs	r1, #222	; 0xde
 8008d9a:	485d      	ldr	r0, [pc, #372]	; (8008f10 <__gethex+0x2ec>)
 8008d9c:	f001 f9c6 	bl	800a12c <__assert_func>
 8008da0:	3101      	adds	r1, #1
 8008da2:	105b      	asrs	r3, r3, #1
 8008da4:	e7ee      	b.n	8008d84 <__gethex+0x160>
 8008da6:	f100 0914 	add.w	r9, r0, #20
 8008daa:	f04f 0b00 	mov.w	fp, #0
 8008dae:	f1ca 0301 	rsb	r3, sl, #1
 8008db2:	f8cd 9008 	str.w	r9, [sp, #8]
 8008db6:	f8cd b000 	str.w	fp, [sp]
 8008dba:	9306      	str	r3, [sp, #24]
 8008dbc:	42b7      	cmp	r7, r6
 8008dbe:	d340      	bcc.n	8008e42 <__gethex+0x21e>
 8008dc0:	9802      	ldr	r0, [sp, #8]
 8008dc2:	9b00      	ldr	r3, [sp, #0]
 8008dc4:	f840 3b04 	str.w	r3, [r0], #4
 8008dc8:	eba0 0009 	sub.w	r0, r0, r9
 8008dcc:	1080      	asrs	r0, r0, #2
 8008dce:	0146      	lsls	r6, r0, #5
 8008dd0:	6120      	str	r0, [r4, #16]
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	f000 fb4c 	bl	8009470 <__hi0bits>
 8008dd8:	1a30      	subs	r0, r6, r0
 8008dda:	f8d8 6000 	ldr.w	r6, [r8]
 8008dde:	42b0      	cmp	r0, r6
 8008de0:	dd63      	ble.n	8008eaa <__gethex+0x286>
 8008de2:	1b87      	subs	r7, r0, r6
 8008de4:	4639      	mov	r1, r7
 8008de6:	4620      	mov	r0, r4
 8008de8:	f000 fef0 	bl	8009bcc <__any_on>
 8008dec:	4682      	mov	sl, r0
 8008dee:	b1a8      	cbz	r0, 8008e1c <__gethex+0x1f8>
 8008df0:	1e7b      	subs	r3, r7, #1
 8008df2:	1159      	asrs	r1, r3, #5
 8008df4:	f003 021f 	and.w	r2, r3, #31
 8008df8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008dfc:	f04f 0a01 	mov.w	sl, #1
 8008e00:	fa0a f202 	lsl.w	r2, sl, r2
 8008e04:	420a      	tst	r2, r1
 8008e06:	d009      	beq.n	8008e1c <__gethex+0x1f8>
 8008e08:	4553      	cmp	r3, sl
 8008e0a:	dd05      	ble.n	8008e18 <__gethex+0x1f4>
 8008e0c:	1eb9      	subs	r1, r7, #2
 8008e0e:	4620      	mov	r0, r4
 8008e10:	f000 fedc 	bl	8009bcc <__any_on>
 8008e14:	2800      	cmp	r0, #0
 8008e16:	d145      	bne.n	8008ea4 <__gethex+0x280>
 8008e18:	f04f 0a02 	mov.w	sl, #2
 8008e1c:	4639      	mov	r1, r7
 8008e1e:	4620      	mov	r0, r4
 8008e20:	f7ff fe98 	bl	8008b54 <rshift>
 8008e24:	443d      	add	r5, r7
 8008e26:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008e2a:	42ab      	cmp	r3, r5
 8008e2c:	da4c      	bge.n	8008ec8 <__gethex+0x2a4>
 8008e2e:	ee18 0a10 	vmov	r0, s16
 8008e32:	4621      	mov	r1, r4
 8008e34:	f000 fa6a 	bl	800930c <_Bfree>
 8008e38:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	6013      	str	r3, [r2, #0]
 8008e3e:	27a3      	movs	r7, #163	; 0xa3
 8008e40:	e785      	b.n	8008d4e <__gethex+0x12a>
 8008e42:	1e73      	subs	r3, r6, #1
 8008e44:	9a05      	ldr	r2, [sp, #20]
 8008e46:	9303      	str	r3, [sp, #12]
 8008e48:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	d019      	beq.n	8008e84 <__gethex+0x260>
 8008e50:	f1bb 0f20 	cmp.w	fp, #32
 8008e54:	d107      	bne.n	8008e66 <__gethex+0x242>
 8008e56:	9b02      	ldr	r3, [sp, #8]
 8008e58:	9a00      	ldr	r2, [sp, #0]
 8008e5a:	f843 2b04 	str.w	r2, [r3], #4
 8008e5e:	9302      	str	r3, [sp, #8]
 8008e60:	2300      	movs	r3, #0
 8008e62:	9300      	str	r3, [sp, #0]
 8008e64:	469b      	mov	fp, r3
 8008e66:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008e6a:	f7ff fec5 	bl	8008bf8 <__hexdig_fun>
 8008e6e:	9b00      	ldr	r3, [sp, #0]
 8008e70:	f000 000f 	and.w	r0, r0, #15
 8008e74:	fa00 f00b 	lsl.w	r0, r0, fp
 8008e78:	4303      	orrs	r3, r0
 8008e7a:	9300      	str	r3, [sp, #0]
 8008e7c:	f10b 0b04 	add.w	fp, fp, #4
 8008e80:	9b03      	ldr	r3, [sp, #12]
 8008e82:	e00d      	b.n	8008ea0 <__gethex+0x27c>
 8008e84:	9b03      	ldr	r3, [sp, #12]
 8008e86:	9a06      	ldr	r2, [sp, #24]
 8008e88:	4413      	add	r3, r2
 8008e8a:	42bb      	cmp	r3, r7
 8008e8c:	d3e0      	bcc.n	8008e50 <__gethex+0x22c>
 8008e8e:	4618      	mov	r0, r3
 8008e90:	9901      	ldr	r1, [sp, #4]
 8008e92:	9307      	str	r3, [sp, #28]
 8008e94:	4652      	mov	r2, sl
 8008e96:	f001 f927 	bl	800a0e8 <strncmp>
 8008e9a:	9b07      	ldr	r3, [sp, #28]
 8008e9c:	2800      	cmp	r0, #0
 8008e9e:	d1d7      	bne.n	8008e50 <__gethex+0x22c>
 8008ea0:	461e      	mov	r6, r3
 8008ea2:	e78b      	b.n	8008dbc <__gethex+0x198>
 8008ea4:	f04f 0a03 	mov.w	sl, #3
 8008ea8:	e7b8      	b.n	8008e1c <__gethex+0x1f8>
 8008eaa:	da0a      	bge.n	8008ec2 <__gethex+0x29e>
 8008eac:	1a37      	subs	r7, r6, r0
 8008eae:	4621      	mov	r1, r4
 8008eb0:	ee18 0a10 	vmov	r0, s16
 8008eb4:	463a      	mov	r2, r7
 8008eb6:	f000 fc45 	bl	8009744 <__lshift>
 8008eba:	1bed      	subs	r5, r5, r7
 8008ebc:	4604      	mov	r4, r0
 8008ebe:	f100 0914 	add.w	r9, r0, #20
 8008ec2:	f04f 0a00 	mov.w	sl, #0
 8008ec6:	e7ae      	b.n	8008e26 <__gethex+0x202>
 8008ec8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008ecc:	42a8      	cmp	r0, r5
 8008ece:	dd72      	ble.n	8008fb6 <__gethex+0x392>
 8008ed0:	1b45      	subs	r5, r0, r5
 8008ed2:	42ae      	cmp	r6, r5
 8008ed4:	dc36      	bgt.n	8008f44 <__gethex+0x320>
 8008ed6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008eda:	2b02      	cmp	r3, #2
 8008edc:	d02a      	beq.n	8008f34 <__gethex+0x310>
 8008ede:	2b03      	cmp	r3, #3
 8008ee0:	d02c      	beq.n	8008f3c <__gethex+0x318>
 8008ee2:	2b01      	cmp	r3, #1
 8008ee4:	d11c      	bne.n	8008f20 <__gethex+0x2fc>
 8008ee6:	42ae      	cmp	r6, r5
 8008ee8:	d11a      	bne.n	8008f20 <__gethex+0x2fc>
 8008eea:	2e01      	cmp	r6, #1
 8008eec:	d112      	bne.n	8008f14 <__gethex+0x2f0>
 8008eee:	9a04      	ldr	r2, [sp, #16]
 8008ef0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008ef4:	6013      	str	r3, [r2, #0]
 8008ef6:	2301      	movs	r3, #1
 8008ef8:	6123      	str	r3, [r4, #16]
 8008efa:	f8c9 3000 	str.w	r3, [r9]
 8008efe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008f00:	2762      	movs	r7, #98	; 0x62
 8008f02:	601c      	str	r4, [r3, #0]
 8008f04:	e723      	b.n	8008d4e <__gethex+0x12a>
 8008f06:	bf00      	nop
 8008f08:	0800b728 	.word	0x0800b728
 8008f0c:	0800b6b0 	.word	0x0800b6b0
 8008f10:	0800b6c1 	.word	0x0800b6c1
 8008f14:	1e71      	subs	r1, r6, #1
 8008f16:	4620      	mov	r0, r4
 8008f18:	f000 fe58 	bl	8009bcc <__any_on>
 8008f1c:	2800      	cmp	r0, #0
 8008f1e:	d1e6      	bne.n	8008eee <__gethex+0x2ca>
 8008f20:	ee18 0a10 	vmov	r0, s16
 8008f24:	4621      	mov	r1, r4
 8008f26:	f000 f9f1 	bl	800930c <_Bfree>
 8008f2a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	6013      	str	r3, [r2, #0]
 8008f30:	2750      	movs	r7, #80	; 0x50
 8008f32:	e70c      	b.n	8008d4e <__gethex+0x12a>
 8008f34:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d1f2      	bne.n	8008f20 <__gethex+0x2fc>
 8008f3a:	e7d8      	b.n	8008eee <__gethex+0x2ca>
 8008f3c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d1d5      	bne.n	8008eee <__gethex+0x2ca>
 8008f42:	e7ed      	b.n	8008f20 <__gethex+0x2fc>
 8008f44:	1e6f      	subs	r7, r5, #1
 8008f46:	f1ba 0f00 	cmp.w	sl, #0
 8008f4a:	d131      	bne.n	8008fb0 <__gethex+0x38c>
 8008f4c:	b127      	cbz	r7, 8008f58 <__gethex+0x334>
 8008f4e:	4639      	mov	r1, r7
 8008f50:	4620      	mov	r0, r4
 8008f52:	f000 fe3b 	bl	8009bcc <__any_on>
 8008f56:	4682      	mov	sl, r0
 8008f58:	117b      	asrs	r3, r7, #5
 8008f5a:	2101      	movs	r1, #1
 8008f5c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008f60:	f007 071f 	and.w	r7, r7, #31
 8008f64:	fa01 f707 	lsl.w	r7, r1, r7
 8008f68:	421f      	tst	r7, r3
 8008f6a:	4629      	mov	r1, r5
 8008f6c:	4620      	mov	r0, r4
 8008f6e:	bf18      	it	ne
 8008f70:	f04a 0a02 	orrne.w	sl, sl, #2
 8008f74:	1b76      	subs	r6, r6, r5
 8008f76:	f7ff fded 	bl	8008b54 <rshift>
 8008f7a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008f7e:	2702      	movs	r7, #2
 8008f80:	f1ba 0f00 	cmp.w	sl, #0
 8008f84:	d048      	beq.n	8009018 <__gethex+0x3f4>
 8008f86:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008f8a:	2b02      	cmp	r3, #2
 8008f8c:	d015      	beq.n	8008fba <__gethex+0x396>
 8008f8e:	2b03      	cmp	r3, #3
 8008f90:	d017      	beq.n	8008fc2 <__gethex+0x39e>
 8008f92:	2b01      	cmp	r3, #1
 8008f94:	d109      	bne.n	8008faa <__gethex+0x386>
 8008f96:	f01a 0f02 	tst.w	sl, #2
 8008f9a:	d006      	beq.n	8008faa <__gethex+0x386>
 8008f9c:	f8d9 0000 	ldr.w	r0, [r9]
 8008fa0:	ea4a 0a00 	orr.w	sl, sl, r0
 8008fa4:	f01a 0f01 	tst.w	sl, #1
 8008fa8:	d10e      	bne.n	8008fc8 <__gethex+0x3a4>
 8008faa:	f047 0710 	orr.w	r7, r7, #16
 8008fae:	e033      	b.n	8009018 <__gethex+0x3f4>
 8008fb0:	f04f 0a01 	mov.w	sl, #1
 8008fb4:	e7d0      	b.n	8008f58 <__gethex+0x334>
 8008fb6:	2701      	movs	r7, #1
 8008fb8:	e7e2      	b.n	8008f80 <__gethex+0x35c>
 8008fba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008fbc:	f1c3 0301 	rsb	r3, r3, #1
 8008fc0:	9315      	str	r3, [sp, #84]	; 0x54
 8008fc2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d0f0      	beq.n	8008faa <__gethex+0x386>
 8008fc8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008fcc:	f104 0314 	add.w	r3, r4, #20
 8008fd0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008fd4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008fd8:	f04f 0c00 	mov.w	ip, #0
 8008fdc:	4618      	mov	r0, r3
 8008fde:	f853 2b04 	ldr.w	r2, [r3], #4
 8008fe2:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008fe6:	d01c      	beq.n	8009022 <__gethex+0x3fe>
 8008fe8:	3201      	adds	r2, #1
 8008fea:	6002      	str	r2, [r0, #0]
 8008fec:	2f02      	cmp	r7, #2
 8008fee:	f104 0314 	add.w	r3, r4, #20
 8008ff2:	d13f      	bne.n	8009074 <__gethex+0x450>
 8008ff4:	f8d8 2000 	ldr.w	r2, [r8]
 8008ff8:	3a01      	subs	r2, #1
 8008ffa:	42b2      	cmp	r2, r6
 8008ffc:	d10a      	bne.n	8009014 <__gethex+0x3f0>
 8008ffe:	1171      	asrs	r1, r6, #5
 8009000:	2201      	movs	r2, #1
 8009002:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009006:	f006 061f 	and.w	r6, r6, #31
 800900a:	fa02 f606 	lsl.w	r6, r2, r6
 800900e:	421e      	tst	r6, r3
 8009010:	bf18      	it	ne
 8009012:	4617      	movne	r7, r2
 8009014:	f047 0720 	orr.w	r7, r7, #32
 8009018:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800901a:	601c      	str	r4, [r3, #0]
 800901c:	9b04      	ldr	r3, [sp, #16]
 800901e:	601d      	str	r5, [r3, #0]
 8009020:	e695      	b.n	8008d4e <__gethex+0x12a>
 8009022:	4299      	cmp	r1, r3
 8009024:	f843 cc04 	str.w	ip, [r3, #-4]
 8009028:	d8d8      	bhi.n	8008fdc <__gethex+0x3b8>
 800902a:	68a3      	ldr	r3, [r4, #8]
 800902c:	459b      	cmp	fp, r3
 800902e:	db19      	blt.n	8009064 <__gethex+0x440>
 8009030:	6861      	ldr	r1, [r4, #4]
 8009032:	ee18 0a10 	vmov	r0, s16
 8009036:	3101      	adds	r1, #1
 8009038:	f000 f928 	bl	800928c <_Balloc>
 800903c:	4681      	mov	r9, r0
 800903e:	b918      	cbnz	r0, 8009048 <__gethex+0x424>
 8009040:	4b1a      	ldr	r3, [pc, #104]	; (80090ac <__gethex+0x488>)
 8009042:	4602      	mov	r2, r0
 8009044:	2184      	movs	r1, #132	; 0x84
 8009046:	e6a8      	b.n	8008d9a <__gethex+0x176>
 8009048:	6922      	ldr	r2, [r4, #16]
 800904a:	3202      	adds	r2, #2
 800904c:	f104 010c 	add.w	r1, r4, #12
 8009050:	0092      	lsls	r2, r2, #2
 8009052:	300c      	adds	r0, #12
 8009054:	f000 f90c 	bl	8009270 <memcpy>
 8009058:	4621      	mov	r1, r4
 800905a:	ee18 0a10 	vmov	r0, s16
 800905e:	f000 f955 	bl	800930c <_Bfree>
 8009062:	464c      	mov	r4, r9
 8009064:	6923      	ldr	r3, [r4, #16]
 8009066:	1c5a      	adds	r2, r3, #1
 8009068:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800906c:	6122      	str	r2, [r4, #16]
 800906e:	2201      	movs	r2, #1
 8009070:	615a      	str	r2, [r3, #20]
 8009072:	e7bb      	b.n	8008fec <__gethex+0x3c8>
 8009074:	6922      	ldr	r2, [r4, #16]
 8009076:	455a      	cmp	r2, fp
 8009078:	dd0b      	ble.n	8009092 <__gethex+0x46e>
 800907a:	2101      	movs	r1, #1
 800907c:	4620      	mov	r0, r4
 800907e:	f7ff fd69 	bl	8008b54 <rshift>
 8009082:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009086:	3501      	adds	r5, #1
 8009088:	42ab      	cmp	r3, r5
 800908a:	f6ff aed0 	blt.w	8008e2e <__gethex+0x20a>
 800908e:	2701      	movs	r7, #1
 8009090:	e7c0      	b.n	8009014 <__gethex+0x3f0>
 8009092:	f016 061f 	ands.w	r6, r6, #31
 8009096:	d0fa      	beq.n	800908e <__gethex+0x46a>
 8009098:	4453      	add	r3, sl
 800909a:	f1c6 0620 	rsb	r6, r6, #32
 800909e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80090a2:	f000 f9e5 	bl	8009470 <__hi0bits>
 80090a6:	42b0      	cmp	r0, r6
 80090a8:	dbe7      	blt.n	800907a <__gethex+0x456>
 80090aa:	e7f0      	b.n	800908e <__gethex+0x46a>
 80090ac:	0800b6b0 	.word	0x0800b6b0

080090b0 <L_shift>:
 80090b0:	f1c2 0208 	rsb	r2, r2, #8
 80090b4:	0092      	lsls	r2, r2, #2
 80090b6:	b570      	push	{r4, r5, r6, lr}
 80090b8:	f1c2 0620 	rsb	r6, r2, #32
 80090bc:	6843      	ldr	r3, [r0, #4]
 80090be:	6804      	ldr	r4, [r0, #0]
 80090c0:	fa03 f506 	lsl.w	r5, r3, r6
 80090c4:	432c      	orrs	r4, r5
 80090c6:	40d3      	lsrs	r3, r2
 80090c8:	6004      	str	r4, [r0, #0]
 80090ca:	f840 3f04 	str.w	r3, [r0, #4]!
 80090ce:	4288      	cmp	r0, r1
 80090d0:	d3f4      	bcc.n	80090bc <L_shift+0xc>
 80090d2:	bd70      	pop	{r4, r5, r6, pc}

080090d4 <__match>:
 80090d4:	b530      	push	{r4, r5, lr}
 80090d6:	6803      	ldr	r3, [r0, #0]
 80090d8:	3301      	adds	r3, #1
 80090da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80090de:	b914      	cbnz	r4, 80090e6 <__match+0x12>
 80090e0:	6003      	str	r3, [r0, #0]
 80090e2:	2001      	movs	r0, #1
 80090e4:	bd30      	pop	{r4, r5, pc}
 80090e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80090ea:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80090ee:	2d19      	cmp	r5, #25
 80090f0:	bf98      	it	ls
 80090f2:	3220      	addls	r2, #32
 80090f4:	42a2      	cmp	r2, r4
 80090f6:	d0f0      	beq.n	80090da <__match+0x6>
 80090f8:	2000      	movs	r0, #0
 80090fa:	e7f3      	b.n	80090e4 <__match+0x10>

080090fc <__hexnan>:
 80090fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009100:	680b      	ldr	r3, [r1, #0]
 8009102:	115e      	asrs	r6, r3, #5
 8009104:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009108:	f013 031f 	ands.w	r3, r3, #31
 800910c:	b087      	sub	sp, #28
 800910e:	bf18      	it	ne
 8009110:	3604      	addne	r6, #4
 8009112:	2500      	movs	r5, #0
 8009114:	1f37      	subs	r7, r6, #4
 8009116:	4690      	mov	r8, r2
 8009118:	6802      	ldr	r2, [r0, #0]
 800911a:	9301      	str	r3, [sp, #4]
 800911c:	4682      	mov	sl, r0
 800911e:	f846 5c04 	str.w	r5, [r6, #-4]
 8009122:	46b9      	mov	r9, r7
 8009124:	463c      	mov	r4, r7
 8009126:	9502      	str	r5, [sp, #8]
 8009128:	46ab      	mov	fp, r5
 800912a:	7851      	ldrb	r1, [r2, #1]
 800912c:	1c53      	adds	r3, r2, #1
 800912e:	9303      	str	r3, [sp, #12]
 8009130:	b341      	cbz	r1, 8009184 <__hexnan+0x88>
 8009132:	4608      	mov	r0, r1
 8009134:	9205      	str	r2, [sp, #20]
 8009136:	9104      	str	r1, [sp, #16]
 8009138:	f7ff fd5e 	bl	8008bf8 <__hexdig_fun>
 800913c:	2800      	cmp	r0, #0
 800913e:	d14f      	bne.n	80091e0 <__hexnan+0xe4>
 8009140:	9904      	ldr	r1, [sp, #16]
 8009142:	9a05      	ldr	r2, [sp, #20]
 8009144:	2920      	cmp	r1, #32
 8009146:	d818      	bhi.n	800917a <__hexnan+0x7e>
 8009148:	9b02      	ldr	r3, [sp, #8]
 800914a:	459b      	cmp	fp, r3
 800914c:	dd13      	ble.n	8009176 <__hexnan+0x7a>
 800914e:	454c      	cmp	r4, r9
 8009150:	d206      	bcs.n	8009160 <__hexnan+0x64>
 8009152:	2d07      	cmp	r5, #7
 8009154:	dc04      	bgt.n	8009160 <__hexnan+0x64>
 8009156:	462a      	mov	r2, r5
 8009158:	4649      	mov	r1, r9
 800915a:	4620      	mov	r0, r4
 800915c:	f7ff ffa8 	bl	80090b0 <L_shift>
 8009160:	4544      	cmp	r4, r8
 8009162:	d950      	bls.n	8009206 <__hexnan+0x10a>
 8009164:	2300      	movs	r3, #0
 8009166:	f1a4 0904 	sub.w	r9, r4, #4
 800916a:	f844 3c04 	str.w	r3, [r4, #-4]
 800916e:	f8cd b008 	str.w	fp, [sp, #8]
 8009172:	464c      	mov	r4, r9
 8009174:	461d      	mov	r5, r3
 8009176:	9a03      	ldr	r2, [sp, #12]
 8009178:	e7d7      	b.n	800912a <__hexnan+0x2e>
 800917a:	2929      	cmp	r1, #41	; 0x29
 800917c:	d156      	bne.n	800922c <__hexnan+0x130>
 800917e:	3202      	adds	r2, #2
 8009180:	f8ca 2000 	str.w	r2, [sl]
 8009184:	f1bb 0f00 	cmp.w	fp, #0
 8009188:	d050      	beq.n	800922c <__hexnan+0x130>
 800918a:	454c      	cmp	r4, r9
 800918c:	d206      	bcs.n	800919c <__hexnan+0xa0>
 800918e:	2d07      	cmp	r5, #7
 8009190:	dc04      	bgt.n	800919c <__hexnan+0xa0>
 8009192:	462a      	mov	r2, r5
 8009194:	4649      	mov	r1, r9
 8009196:	4620      	mov	r0, r4
 8009198:	f7ff ff8a 	bl	80090b0 <L_shift>
 800919c:	4544      	cmp	r4, r8
 800919e:	d934      	bls.n	800920a <__hexnan+0x10e>
 80091a0:	f1a8 0204 	sub.w	r2, r8, #4
 80091a4:	4623      	mov	r3, r4
 80091a6:	f853 1b04 	ldr.w	r1, [r3], #4
 80091aa:	f842 1f04 	str.w	r1, [r2, #4]!
 80091ae:	429f      	cmp	r7, r3
 80091b0:	d2f9      	bcs.n	80091a6 <__hexnan+0xaa>
 80091b2:	1b3b      	subs	r3, r7, r4
 80091b4:	f023 0303 	bic.w	r3, r3, #3
 80091b8:	3304      	adds	r3, #4
 80091ba:	3401      	adds	r4, #1
 80091bc:	3e03      	subs	r6, #3
 80091be:	42b4      	cmp	r4, r6
 80091c0:	bf88      	it	hi
 80091c2:	2304      	movhi	r3, #4
 80091c4:	4443      	add	r3, r8
 80091c6:	2200      	movs	r2, #0
 80091c8:	f843 2b04 	str.w	r2, [r3], #4
 80091cc:	429f      	cmp	r7, r3
 80091ce:	d2fb      	bcs.n	80091c8 <__hexnan+0xcc>
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	b91b      	cbnz	r3, 80091dc <__hexnan+0xe0>
 80091d4:	4547      	cmp	r7, r8
 80091d6:	d127      	bne.n	8009228 <__hexnan+0x12c>
 80091d8:	2301      	movs	r3, #1
 80091da:	603b      	str	r3, [r7, #0]
 80091dc:	2005      	movs	r0, #5
 80091de:	e026      	b.n	800922e <__hexnan+0x132>
 80091e0:	3501      	adds	r5, #1
 80091e2:	2d08      	cmp	r5, #8
 80091e4:	f10b 0b01 	add.w	fp, fp, #1
 80091e8:	dd06      	ble.n	80091f8 <__hexnan+0xfc>
 80091ea:	4544      	cmp	r4, r8
 80091ec:	d9c3      	bls.n	8009176 <__hexnan+0x7a>
 80091ee:	2300      	movs	r3, #0
 80091f0:	f844 3c04 	str.w	r3, [r4, #-4]
 80091f4:	2501      	movs	r5, #1
 80091f6:	3c04      	subs	r4, #4
 80091f8:	6822      	ldr	r2, [r4, #0]
 80091fa:	f000 000f 	and.w	r0, r0, #15
 80091fe:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8009202:	6022      	str	r2, [r4, #0]
 8009204:	e7b7      	b.n	8009176 <__hexnan+0x7a>
 8009206:	2508      	movs	r5, #8
 8009208:	e7b5      	b.n	8009176 <__hexnan+0x7a>
 800920a:	9b01      	ldr	r3, [sp, #4]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d0df      	beq.n	80091d0 <__hexnan+0xd4>
 8009210:	f04f 32ff 	mov.w	r2, #4294967295
 8009214:	f1c3 0320 	rsb	r3, r3, #32
 8009218:	fa22 f303 	lsr.w	r3, r2, r3
 800921c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009220:	401a      	ands	r2, r3
 8009222:	f846 2c04 	str.w	r2, [r6, #-4]
 8009226:	e7d3      	b.n	80091d0 <__hexnan+0xd4>
 8009228:	3f04      	subs	r7, #4
 800922a:	e7d1      	b.n	80091d0 <__hexnan+0xd4>
 800922c:	2004      	movs	r0, #4
 800922e:	b007      	add	sp, #28
 8009230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009234 <_localeconv_r>:
 8009234:	4800      	ldr	r0, [pc, #0]	; (8009238 <_localeconv_r+0x4>)
 8009236:	4770      	bx	lr
 8009238:	20000164 	.word	0x20000164

0800923c <malloc>:
 800923c:	4b02      	ldr	r3, [pc, #8]	; (8009248 <malloc+0xc>)
 800923e:	4601      	mov	r1, r0
 8009240:	6818      	ldr	r0, [r3, #0]
 8009242:	f000 bd67 	b.w	8009d14 <_malloc_r>
 8009246:	bf00      	nop
 8009248:	2000000c 	.word	0x2000000c

0800924c <__ascii_mbtowc>:
 800924c:	b082      	sub	sp, #8
 800924e:	b901      	cbnz	r1, 8009252 <__ascii_mbtowc+0x6>
 8009250:	a901      	add	r1, sp, #4
 8009252:	b142      	cbz	r2, 8009266 <__ascii_mbtowc+0x1a>
 8009254:	b14b      	cbz	r3, 800926a <__ascii_mbtowc+0x1e>
 8009256:	7813      	ldrb	r3, [r2, #0]
 8009258:	600b      	str	r3, [r1, #0]
 800925a:	7812      	ldrb	r2, [r2, #0]
 800925c:	1e10      	subs	r0, r2, #0
 800925e:	bf18      	it	ne
 8009260:	2001      	movne	r0, #1
 8009262:	b002      	add	sp, #8
 8009264:	4770      	bx	lr
 8009266:	4610      	mov	r0, r2
 8009268:	e7fb      	b.n	8009262 <__ascii_mbtowc+0x16>
 800926a:	f06f 0001 	mvn.w	r0, #1
 800926e:	e7f8      	b.n	8009262 <__ascii_mbtowc+0x16>

08009270 <memcpy>:
 8009270:	440a      	add	r2, r1
 8009272:	4291      	cmp	r1, r2
 8009274:	f100 33ff 	add.w	r3, r0, #4294967295
 8009278:	d100      	bne.n	800927c <memcpy+0xc>
 800927a:	4770      	bx	lr
 800927c:	b510      	push	{r4, lr}
 800927e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009282:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009286:	4291      	cmp	r1, r2
 8009288:	d1f9      	bne.n	800927e <memcpy+0xe>
 800928a:	bd10      	pop	{r4, pc}

0800928c <_Balloc>:
 800928c:	b570      	push	{r4, r5, r6, lr}
 800928e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009290:	4604      	mov	r4, r0
 8009292:	460d      	mov	r5, r1
 8009294:	b976      	cbnz	r6, 80092b4 <_Balloc+0x28>
 8009296:	2010      	movs	r0, #16
 8009298:	f7ff ffd0 	bl	800923c <malloc>
 800929c:	4602      	mov	r2, r0
 800929e:	6260      	str	r0, [r4, #36]	; 0x24
 80092a0:	b920      	cbnz	r0, 80092ac <_Balloc+0x20>
 80092a2:	4b18      	ldr	r3, [pc, #96]	; (8009304 <_Balloc+0x78>)
 80092a4:	4818      	ldr	r0, [pc, #96]	; (8009308 <_Balloc+0x7c>)
 80092a6:	2166      	movs	r1, #102	; 0x66
 80092a8:	f000 ff40 	bl	800a12c <__assert_func>
 80092ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80092b0:	6006      	str	r6, [r0, #0]
 80092b2:	60c6      	str	r6, [r0, #12]
 80092b4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80092b6:	68f3      	ldr	r3, [r6, #12]
 80092b8:	b183      	cbz	r3, 80092dc <_Balloc+0x50>
 80092ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80092bc:	68db      	ldr	r3, [r3, #12]
 80092be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80092c2:	b9b8      	cbnz	r0, 80092f4 <_Balloc+0x68>
 80092c4:	2101      	movs	r1, #1
 80092c6:	fa01 f605 	lsl.w	r6, r1, r5
 80092ca:	1d72      	adds	r2, r6, #5
 80092cc:	0092      	lsls	r2, r2, #2
 80092ce:	4620      	mov	r0, r4
 80092d0:	f000 fc9d 	bl	8009c0e <_calloc_r>
 80092d4:	b160      	cbz	r0, 80092f0 <_Balloc+0x64>
 80092d6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80092da:	e00e      	b.n	80092fa <_Balloc+0x6e>
 80092dc:	2221      	movs	r2, #33	; 0x21
 80092de:	2104      	movs	r1, #4
 80092e0:	4620      	mov	r0, r4
 80092e2:	f000 fc94 	bl	8009c0e <_calloc_r>
 80092e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80092e8:	60f0      	str	r0, [r6, #12]
 80092ea:	68db      	ldr	r3, [r3, #12]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d1e4      	bne.n	80092ba <_Balloc+0x2e>
 80092f0:	2000      	movs	r0, #0
 80092f2:	bd70      	pop	{r4, r5, r6, pc}
 80092f4:	6802      	ldr	r2, [r0, #0]
 80092f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80092fa:	2300      	movs	r3, #0
 80092fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009300:	e7f7      	b.n	80092f2 <_Balloc+0x66>
 8009302:	bf00      	nop
 8009304:	0800b63e 	.word	0x0800b63e
 8009308:	0800b73c 	.word	0x0800b73c

0800930c <_Bfree>:
 800930c:	b570      	push	{r4, r5, r6, lr}
 800930e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009310:	4605      	mov	r5, r0
 8009312:	460c      	mov	r4, r1
 8009314:	b976      	cbnz	r6, 8009334 <_Bfree+0x28>
 8009316:	2010      	movs	r0, #16
 8009318:	f7ff ff90 	bl	800923c <malloc>
 800931c:	4602      	mov	r2, r0
 800931e:	6268      	str	r0, [r5, #36]	; 0x24
 8009320:	b920      	cbnz	r0, 800932c <_Bfree+0x20>
 8009322:	4b09      	ldr	r3, [pc, #36]	; (8009348 <_Bfree+0x3c>)
 8009324:	4809      	ldr	r0, [pc, #36]	; (800934c <_Bfree+0x40>)
 8009326:	218a      	movs	r1, #138	; 0x8a
 8009328:	f000 ff00 	bl	800a12c <__assert_func>
 800932c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009330:	6006      	str	r6, [r0, #0]
 8009332:	60c6      	str	r6, [r0, #12]
 8009334:	b13c      	cbz	r4, 8009346 <_Bfree+0x3a>
 8009336:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009338:	6862      	ldr	r2, [r4, #4]
 800933a:	68db      	ldr	r3, [r3, #12]
 800933c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009340:	6021      	str	r1, [r4, #0]
 8009342:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009346:	bd70      	pop	{r4, r5, r6, pc}
 8009348:	0800b63e 	.word	0x0800b63e
 800934c:	0800b73c 	.word	0x0800b73c

08009350 <__multadd>:
 8009350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009354:	690d      	ldr	r5, [r1, #16]
 8009356:	4607      	mov	r7, r0
 8009358:	460c      	mov	r4, r1
 800935a:	461e      	mov	r6, r3
 800935c:	f101 0c14 	add.w	ip, r1, #20
 8009360:	2000      	movs	r0, #0
 8009362:	f8dc 3000 	ldr.w	r3, [ip]
 8009366:	b299      	uxth	r1, r3
 8009368:	fb02 6101 	mla	r1, r2, r1, r6
 800936c:	0c1e      	lsrs	r6, r3, #16
 800936e:	0c0b      	lsrs	r3, r1, #16
 8009370:	fb02 3306 	mla	r3, r2, r6, r3
 8009374:	b289      	uxth	r1, r1
 8009376:	3001      	adds	r0, #1
 8009378:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800937c:	4285      	cmp	r5, r0
 800937e:	f84c 1b04 	str.w	r1, [ip], #4
 8009382:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009386:	dcec      	bgt.n	8009362 <__multadd+0x12>
 8009388:	b30e      	cbz	r6, 80093ce <__multadd+0x7e>
 800938a:	68a3      	ldr	r3, [r4, #8]
 800938c:	42ab      	cmp	r3, r5
 800938e:	dc19      	bgt.n	80093c4 <__multadd+0x74>
 8009390:	6861      	ldr	r1, [r4, #4]
 8009392:	4638      	mov	r0, r7
 8009394:	3101      	adds	r1, #1
 8009396:	f7ff ff79 	bl	800928c <_Balloc>
 800939a:	4680      	mov	r8, r0
 800939c:	b928      	cbnz	r0, 80093aa <__multadd+0x5a>
 800939e:	4602      	mov	r2, r0
 80093a0:	4b0c      	ldr	r3, [pc, #48]	; (80093d4 <__multadd+0x84>)
 80093a2:	480d      	ldr	r0, [pc, #52]	; (80093d8 <__multadd+0x88>)
 80093a4:	21b5      	movs	r1, #181	; 0xb5
 80093a6:	f000 fec1 	bl	800a12c <__assert_func>
 80093aa:	6922      	ldr	r2, [r4, #16]
 80093ac:	3202      	adds	r2, #2
 80093ae:	f104 010c 	add.w	r1, r4, #12
 80093b2:	0092      	lsls	r2, r2, #2
 80093b4:	300c      	adds	r0, #12
 80093b6:	f7ff ff5b 	bl	8009270 <memcpy>
 80093ba:	4621      	mov	r1, r4
 80093bc:	4638      	mov	r0, r7
 80093be:	f7ff ffa5 	bl	800930c <_Bfree>
 80093c2:	4644      	mov	r4, r8
 80093c4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80093c8:	3501      	adds	r5, #1
 80093ca:	615e      	str	r6, [r3, #20]
 80093cc:	6125      	str	r5, [r4, #16]
 80093ce:	4620      	mov	r0, r4
 80093d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093d4:	0800b6b0 	.word	0x0800b6b0
 80093d8:	0800b73c 	.word	0x0800b73c

080093dc <__s2b>:
 80093dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093e0:	460c      	mov	r4, r1
 80093e2:	4615      	mov	r5, r2
 80093e4:	461f      	mov	r7, r3
 80093e6:	2209      	movs	r2, #9
 80093e8:	3308      	adds	r3, #8
 80093ea:	4606      	mov	r6, r0
 80093ec:	fb93 f3f2 	sdiv	r3, r3, r2
 80093f0:	2100      	movs	r1, #0
 80093f2:	2201      	movs	r2, #1
 80093f4:	429a      	cmp	r2, r3
 80093f6:	db09      	blt.n	800940c <__s2b+0x30>
 80093f8:	4630      	mov	r0, r6
 80093fa:	f7ff ff47 	bl	800928c <_Balloc>
 80093fe:	b940      	cbnz	r0, 8009412 <__s2b+0x36>
 8009400:	4602      	mov	r2, r0
 8009402:	4b19      	ldr	r3, [pc, #100]	; (8009468 <__s2b+0x8c>)
 8009404:	4819      	ldr	r0, [pc, #100]	; (800946c <__s2b+0x90>)
 8009406:	21ce      	movs	r1, #206	; 0xce
 8009408:	f000 fe90 	bl	800a12c <__assert_func>
 800940c:	0052      	lsls	r2, r2, #1
 800940e:	3101      	adds	r1, #1
 8009410:	e7f0      	b.n	80093f4 <__s2b+0x18>
 8009412:	9b08      	ldr	r3, [sp, #32]
 8009414:	6143      	str	r3, [r0, #20]
 8009416:	2d09      	cmp	r5, #9
 8009418:	f04f 0301 	mov.w	r3, #1
 800941c:	6103      	str	r3, [r0, #16]
 800941e:	dd16      	ble.n	800944e <__s2b+0x72>
 8009420:	f104 0909 	add.w	r9, r4, #9
 8009424:	46c8      	mov	r8, r9
 8009426:	442c      	add	r4, r5
 8009428:	f818 3b01 	ldrb.w	r3, [r8], #1
 800942c:	4601      	mov	r1, r0
 800942e:	3b30      	subs	r3, #48	; 0x30
 8009430:	220a      	movs	r2, #10
 8009432:	4630      	mov	r0, r6
 8009434:	f7ff ff8c 	bl	8009350 <__multadd>
 8009438:	45a0      	cmp	r8, r4
 800943a:	d1f5      	bne.n	8009428 <__s2b+0x4c>
 800943c:	f1a5 0408 	sub.w	r4, r5, #8
 8009440:	444c      	add	r4, r9
 8009442:	1b2d      	subs	r5, r5, r4
 8009444:	1963      	adds	r3, r4, r5
 8009446:	42bb      	cmp	r3, r7
 8009448:	db04      	blt.n	8009454 <__s2b+0x78>
 800944a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800944e:	340a      	adds	r4, #10
 8009450:	2509      	movs	r5, #9
 8009452:	e7f6      	b.n	8009442 <__s2b+0x66>
 8009454:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009458:	4601      	mov	r1, r0
 800945a:	3b30      	subs	r3, #48	; 0x30
 800945c:	220a      	movs	r2, #10
 800945e:	4630      	mov	r0, r6
 8009460:	f7ff ff76 	bl	8009350 <__multadd>
 8009464:	e7ee      	b.n	8009444 <__s2b+0x68>
 8009466:	bf00      	nop
 8009468:	0800b6b0 	.word	0x0800b6b0
 800946c:	0800b73c 	.word	0x0800b73c

08009470 <__hi0bits>:
 8009470:	0c03      	lsrs	r3, r0, #16
 8009472:	041b      	lsls	r3, r3, #16
 8009474:	b9d3      	cbnz	r3, 80094ac <__hi0bits+0x3c>
 8009476:	0400      	lsls	r0, r0, #16
 8009478:	2310      	movs	r3, #16
 800947a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800947e:	bf04      	itt	eq
 8009480:	0200      	lsleq	r0, r0, #8
 8009482:	3308      	addeq	r3, #8
 8009484:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009488:	bf04      	itt	eq
 800948a:	0100      	lsleq	r0, r0, #4
 800948c:	3304      	addeq	r3, #4
 800948e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009492:	bf04      	itt	eq
 8009494:	0080      	lsleq	r0, r0, #2
 8009496:	3302      	addeq	r3, #2
 8009498:	2800      	cmp	r0, #0
 800949a:	db05      	blt.n	80094a8 <__hi0bits+0x38>
 800949c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80094a0:	f103 0301 	add.w	r3, r3, #1
 80094a4:	bf08      	it	eq
 80094a6:	2320      	moveq	r3, #32
 80094a8:	4618      	mov	r0, r3
 80094aa:	4770      	bx	lr
 80094ac:	2300      	movs	r3, #0
 80094ae:	e7e4      	b.n	800947a <__hi0bits+0xa>

080094b0 <__lo0bits>:
 80094b0:	6803      	ldr	r3, [r0, #0]
 80094b2:	f013 0207 	ands.w	r2, r3, #7
 80094b6:	4601      	mov	r1, r0
 80094b8:	d00b      	beq.n	80094d2 <__lo0bits+0x22>
 80094ba:	07da      	lsls	r2, r3, #31
 80094bc:	d423      	bmi.n	8009506 <__lo0bits+0x56>
 80094be:	0798      	lsls	r0, r3, #30
 80094c0:	bf49      	itett	mi
 80094c2:	085b      	lsrmi	r3, r3, #1
 80094c4:	089b      	lsrpl	r3, r3, #2
 80094c6:	2001      	movmi	r0, #1
 80094c8:	600b      	strmi	r3, [r1, #0]
 80094ca:	bf5c      	itt	pl
 80094cc:	600b      	strpl	r3, [r1, #0]
 80094ce:	2002      	movpl	r0, #2
 80094d0:	4770      	bx	lr
 80094d2:	b298      	uxth	r0, r3
 80094d4:	b9a8      	cbnz	r0, 8009502 <__lo0bits+0x52>
 80094d6:	0c1b      	lsrs	r3, r3, #16
 80094d8:	2010      	movs	r0, #16
 80094da:	b2da      	uxtb	r2, r3
 80094dc:	b90a      	cbnz	r2, 80094e2 <__lo0bits+0x32>
 80094de:	3008      	adds	r0, #8
 80094e0:	0a1b      	lsrs	r3, r3, #8
 80094e2:	071a      	lsls	r2, r3, #28
 80094e4:	bf04      	itt	eq
 80094e6:	091b      	lsreq	r3, r3, #4
 80094e8:	3004      	addeq	r0, #4
 80094ea:	079a      	lsls	r2, r3, #30
 80094ec:	bf04      	itt	eq
 80094ee:	089b      	lsreq	r3, r3, #2
 80094f0:	3002      	addeq	r0, #2
 80094f2:	07da      	lsls	r2, r3, #31
 80094f4:	d403      	bmi.n	80094fe <__lo0bits+0x4e>
 80094f6:	085b      	lsrs	r3, r3, #1
 80094f8:	f100 0001 	add.w	r0, r0, #1
 80094fc:	d005      	beq.n	800950a <__lo0bits+0x5a>
 80094fe:	600b      	str	r3, [r1, #0]
 8009500:	4770      	bx	lr
 8009502:	4610      	mov	r0, r2
 8009504:	e7e9      	b.n	80094da <__lo0bits+0x2a>
 8009506:	2000      	movs	r0, #0
 8009508:	4770      	bx	lr
 800950a:	2020      	movs	r0, #32
 800950c:	4770      	bx	lr
	...

08009510 <__i2b>:
 8009510:	b510      	push	{r4, lr}
 8009512:	460c      	mov	r4, r1
 8009514:	2101      	movs	r1, #1
 8009516:	f7ff feb9 	bl	800928c <_Balloc>
 800951a:	4602      	mov	r2, r0
 800951c:	b928      	cbnz	r0, 800952a <__i2b+0x1a>
 800951e:	4b05      	ldr	r3, [pc, #20]	; (8009534 <__i2b+0x24>)
 8009520:	4805      	ldr	r0, [pc, #20]	; (8009538 <__i2b+0x28>)
 8009522:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009526:	f000 fe01 	bl	800a12c <__assert_func>
 800952a:	2301      	movs	r3, #1
 800952c:	6144      	str	r4, [r0, #20]
 800952e:	6103      	str	r3, [r0, #16]
 8009530:	bd10      	pop	{r4, pc}
 8009532:	bf00      	nop
 8009534:	0800b6b0 	.word	0x0800b6b0
 8009538:	0800b73c 	.word	0x0800b73c

0800953c <__multiply>:
 800953c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009540:	4691      	mov	r9, r2
 8009542:	690a      	ldr	r2, [r1, #16]
 8009544:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009548:	429a      	cmp	r2, r3
 800954a:	bfb8      	it	lt
 800954c:	460b      	movlt	r3, r1
 800954e:	460c      	mov	r4, r1
 8009550:	bfbc      	itt	lt
 8009552:	464c      	movlt	r4, r9
 8009554:	4699      	movlt	r9, r3
 8009556:	6927      	ldr	r7, [r4, #16]
 8009558:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800955c:	68a3      	ldr	r3, [r4, #8]
 800955e:	6861      	ldr	r1, [r4, #4]
 8009560:	eb07 060a 	add.w	r6, r7, sl
 8009564:	42b3      	cmp	r3, r6
 8009566:	b085      	sub	sp, #20
 8009568:	bfb8      	it	lt
 800956a:	3101      	addlt	r1, #1
 800956c:	f7ff fe8e 	bl	800928c <_Balloc>
 8009570:	b930      	cbnz	r0, 8009580 <__multiply+0x44>
 8009572:	4602      	mov	r2, r0
 8009574:	4b44      	ldr	r3, [pc, #272]	; (8009688 <__multiply+0x14c>)
 8009576:	4845      	ldr	r0, [pc, #276]	; (800968c <__multiply+0x150>)
 8009578:	f240 115d 	movw	r1, #349	; 0x15d
 800957c:	f000 fdd6 	bl	800a12c <__assert_func>
 8009580:	f100 0514 	add.w	r5, r0, #20
 8009584:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009588:	462b      	mov	r3, r5
 800958a:	2200      	movs	r2, #0
 800958c:	4543      	cmp	r3, r8
 800958e:	d321      	bcc.n	80095d4 <__multiply+0x98>
 8009590:	f104 0314 	add.w	r3, r4, #20
 8009594:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009598:	f109 0314 	add.w	r3, r9, #20
 800959c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80095a0:	9202      	str	r2, [sp, #8]
 80095a2:	1b3a      	subs	r2, r7, r4
 80095a4:	3a15      	subs	r2, #21
 80095a6:	f022 0203 	bic.w	r2, r2, #3
 80095aa:	3204      	adds	r2, #4
 80095ac:	f104 0115 	add.w	r1, r4, #21
 80095b0:	428f      	cmp	r7, r1
 80095b2:	bf38      	it	cc
 80095b4:	2204      	movcc	r2, #4
 80095b6:	9201      	str	r2, [sp, #4]
 80095b8:	9a02      	ldr	r2, [sp, #8]
 80095ba:	9303      	str	r3, [sp, #12]
 80095bc:	429a      	cmp	r2, r3
 80095be:	d80c      	bhi.n	80095da <__multiply+0x9e>
 80095c0:	2e00      	cmp	r6, #0
 80095c2:	dd03      	ble.n	80095cc <__multiply+0x90>
 80095c4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d05a      	beq.n	8009682 <__multiply+0x146>
 80095cc:	6106      	str	r6, [r0, #16]
 80095ce:	b005      	add	sp, #20
 80095d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095d4:	f843 2b04 	str.w	r2, [r3], #4
 80095d8:	e7d8      	b.n	800958c <__multiply+0x50>
 80095da:	f8b3 a000 	ldrh.w	sl, [r3]
 80095de:	f1ba 0f00 	cmp.w	sl, #0
 80095e2:	d024      	beq.n	800962e <__multiply+0xf2>
 80095e4:	f104 0e14 	add.w	lr, r4, #20
 80095e8:	46a9      	mov	r9, r5
 80095ea:	f04f 0c00 	mov.w	ip, #0
 80095ee:	f85e 2b04 	ldr.w	r2, [lr], #4
 80095f2:	f8d9 1000 	ldr.w	r1, [r9]
 80095f6:	fa1f fb82 	uxth.w	fp, r2
 80095fa:	b289      	uxth	r1, r1
 80095fc:	fb0a 110b 	mla	r1, sl, fp, r1
 8009600:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009604:	f8d9 2000 	ldr.w	r2, [r9]
 8009608:	4461      	add	r1, ip
 800960a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800960e:	fb0a c20b 	mla	r2, sl, fp, ip
 8009612:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009616:	b289      	uxth	r1, r1
 8009618:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800961c:	4577      	cmp	r7, lr
 800961e:	f849 1b04 	str.w	r1, [r9], #4
 8009622:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009626:	d8e2      	bhi.n	80095ee <__multiply+0xb2>
 8009628:	9a01      	ldr	r2, [sp, #4]
 800962a:	f845 c002 	str.w	ip, [r5, r2]
 800962e:	9a03      	ldr	r2, [sp, #12]
 8009630:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009634:	3304      	adds	r3, #4
 8009636:	f1b9 0f00 	cmp.w	r9, #0
 800963a:	d020      	beq.n	800967e <__multiply+0x142>
 800963c:	6829      	ldr	r1, [r5, #0]
 800963e:	f104 0c14 	add.w	ip, r4, #20
 8009642:	46ae      	mov	lr, r5
 8009644:	f04f 0a00 	mov.w	sl, #0
 8009648:	f8bc b000 	ldrh.w	fp, [ip]
 800964c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009650:	fb09 220b 	mla	r2, r9, fp, r2
 8009654:	4492      	add	sl, r2
 8009656:	b289      	uxth	r1, r1
 8009658:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800965c:	f84e 1b04 	str.w	r1, [lr], #4
 8009660:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009664:	f8be 1000 	ldrh.w	r1, [lr]
 8009668:	0c12      	lsrs	r2, r2, #16
 800966a:	fb09 1102 	mla	r1, r9, r2, r1
 800966e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009672:	4567      	cmp	r7, ip
 8009674:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009678:	d8e6      	bhi.n	8009648 <__multiply+0x10c>
 800967a:	9a01      	ldr	r2, [sp, #4]
 800967c:	50a9      	str	r1, [r5, r2]
 800967e:	3504      	adds	r5, #4
 8009680:	e79a      	b.n	80095b8 <__multiply+0x7c>
 8009682:	3e01      	subs	r6, #1
 8009684:	e79c      	b.n	80095c0 <__multiply+0x84>
 8009686:	bf00      	nop
 8009688:	0800b6b0 	.word	0x0800b6b0
 800968c:	0800b73c 	.word	0x0800b73c

08009690 <__pow5mult>:
 8009690:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009694:	4615      	mov	r5, r2
 8009696:	f012 0203 	ands.w	r2, r2, #3
 800969a:	4606      	mov	r6, r0
 800969c:	460f      	mov	r7, r1
 800969e:	d007      	beq.n	80096b0 <__pow5mult+0x20>
 80096a0:	4c25      	ldr	r4, [pc, #148]	; (8009738 <__pow5mult+0xa8>)
 80096a2:	3a01      	subs	r2, #1
 80096a4:	2300      	movs	r3, #0
 80096a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80096aa:	f7ff fe51 	bl	8009350 <__multadd>
 80096ae:	4607      	mov	r7, r0
 80096b0:	10ad      	asrs	r5, r5, #2
 80096b2:	d03d      	beq.n	8009730 <__pow5mult+0xa0>
 80096b4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80096b6:	b97c      	cbnz	r4, 80096d8 <__pow5mult+0x48>
 80096b8:	2010      	movs	r0, #16
 80096ba:	f7ff fdbf 	bl	800923c <malloc>
 80096be:	4602      	mov	r2, r0
 80096c0:	6270      	str	r0, [r6, #36]	; 0x24
 80096c2:	b928      	cbnz	r0, 80096d0 <__pow5mult+0x40>
 80096c4:	4b1d      	ldr	r3, [pc, #116]	; (800973c <__pow5mult+0xac>)
 80096c6:	481e      	ldr	r0, [pc, #120]	; (8009740 <__pow5mult+0xb0>)
 80096c8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80096cc:	f000 fd2e 	bl	800a12c <__assert_func>
 80096d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80096d4:	6004      	str	r4, [r0, #0]
 80096d6:	60c4      	str	r4, [r0, #12]
 80096d8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80096dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80096e0:	b94c      	cbnz	r4, 80096f6 <__pow5mult+0x66>
 80096e2:	f240 2171 	movw	r1, #625	; 0x271
 80096e6:	4630      	mov	r0, r6
 80096e8:	f7ff ff12 	bl	8009510 <__i2b>
 80096ec:	2300      	movs	r3, #0
 80096ee:	f8c8 0008 	str.w	r0, [r8, #8]
 80096f2:	4604      	mov	r4, r0
 80096f4:	6003      	str	r3, [r0, #0]
 80096f6:	f04f 0900 	mov.w	r9, #0
 80096fa:	07eb      	lsls	r3, r5, #31
 80096fc:	d50a      	bpl.n	8009714 <__pow5mult+0x84>
 80096fe:	4639      	mov	r1, r7
 8009700:	4622      	mov	r2, r4
 8009702:	4630      	mov	r0, r6
 8009704:	f7ff ff1a 	bl	800953c <__multiply>
 8009708:	4639      	mov	r1, r7
 800970a:	4680      	mov	r8, r0
 800970c:	4630      	mov	r0, r6
 800970e:	f7ff fdfd 	bl	800930c <_Bfree>
 8009712:	4647      	mov	r7, r8
 8009714:	106d      	asrs	r5, r5, #1
 8009716:	d00b      	beq.n	8009730 <__pow5mult+0xa0>
 8009718:	6820      	ldr	r0, [r4, #0]
 800971a:	b938      	cbnz	r0, 800972c <__pow5mult+0x9c>
 800971c:	4622      	mov	r2, r4
 800971e:	4621      	mov	r1, r4
 8009720:	4630      	mov	r0, r6
 8009722:	f7ff ff0b 	bl	800953c <__multiply>
 8009726:	6020      	str	r0, [r4, #0]
 8009728:	f8c0 9000 	str.w	r9, [r0]
 800972c:	4604      	mov	r4, r0
 800972e:	e7e4      	b.n	80096fa <__pow5mult+0x6a>
 8009730:	4638      	mov	r0, r7
 8009732:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009736:	bf00      	nop
 8009738:	0800b888 	.word	0x0800b888
 800973c:	0800b63e 	.word	0x0800b63e
 8009740:	0800b73c 	.word	0x0800b73c

08009744 <__lshift>:
 8009744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009748:	460c      	mov	r4, r1
 800974a:	6849      	ldr	r1, [r1, #4]
 800974c:	6923      	ldr	r3, [r4, #16]
 800974e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009752:	68a3      	ldr	r3, [r4, #8]
 8009754:	4607      	mov	r7, r0
 8009756:	4691      	mov	r9, r2
 8009758:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800975c:	f108 0601 	add.w	r6, r8, #1
 8009760:	42b3      	cmp	r3, r6
 8009762:	db0b      	blt.n	800977c <__lshift+0x38>
 8009764:	4638      	mov	r0, r7
 8009766:	f7ff fd91 	bl	800928c <_Balloc>
 800976a:	4605      	mov	r5, r0
 800976c:	b948      	cbnz	r0, 8009782 <__lshift+0x3e>
 800976e:	4602      	mov	r2, r0
 8009770:	4b2a      	ldr	r3, [pc, #168]	; (800981c <__lshift+0xd8>)
 8009772:	482b      	ldr	r0, [pc, #172]	; (8009820 <__lshift+0xdc>)
 8009774:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009778:	f000 fcd8 	bl	800a12c <__assert_func>
 800977c:	3101      	adds	r1, #1
 800977e:	005b      	lsls	r3, r3, #1
 8009780:	e7ee      	b.n	8009760 <__lshift+0x1c>
 8009782:	2300      	movs	r3, #0
 8009784:	f100 0114 	add.w	r1, r0, #20
 8009788:	f100 0210 	add.w	r2, r0, #16
 800978c:	4618      	mov	r0, r3
 800978e:	4553      	cmp	r3, sl
 8009790:	db37      	blt.n	8009802 <__lshift+0xbe>
 8009792:	6920      	ldr	r0, [r4, #16]
 8009794:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009798:	f104 0314 	add.w	r3, r4, #20
 800979c:	f019 091f 	ands.w	r9, r9, #31
 80097a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80097a4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80097a8:	d02f      	beq.n	800980a <__lshift+0xc6>
 80097aa:	f1c9 0e20 	rsb	lr, r9, #32
 80097ae:	468a      	mov	sl, r1
 80097b0:	f04f 0c00 	mov.w	ip, #0
 80097b4:	681a      	ldr	r2, [r3, #0]
 80097b6:	fa02 f209 	lsl.w	r2, r2, r9
 80097ba:	ea42 020c 	orr.w	r2, r2, ip
 80097be:	f84a 2b04 	str.w	r2, [sl], #4
 80097c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80097c6:	4298      	cmp	r0, r3
 80097c8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80097cc:	d8f2      	bhi.n	80097b4 <__lshift+0x70>
 80097ce:	1b03      	subs	r3, r0, r4
 80097d0:	3b15      	subs	r3, #21
 80097d2:	f023 0303 	bic.w	r3, r3, #3
 80097d6:	3304      	adds	r3, #4
 80097d8:	f104 0215 	add.w	r2, r4, #21
 80097dc:	4290      	cmp	r0, r2
 80097de:	bf38      	it	cc
 80097e0:	2304      	movcc	r3, #4
 80097e2:	f841 c003 	str.w	ip, [r1, r3]
 80097e6:	f1bc 0f00 	cmp.w	ip, #0
 80097ea:	d001      	beq.n	80097f0 <__lshift+0xac>
 80097ec:	f108 0602 	add.w	r6, r8, #2
 80097f0:	3e01      	subs	r6, #1
 80097f2:	4638      	mov	r0, r7
 80097f4:	612e      	str	r6, [r5, #16]
 80097f6:	4621      	mov	r1, r4
 80097f8:	f7ff fd88 	bl	800930c <_Bfree>
 80097fc:	4628      	mov	r0, r5
 80097fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009802:	f842 0f04 	str.w	r0, [r2, #4]!
 8009806:	3301      	adds	r3, #1
 8009808:	e7c1      	b.n	800978e <__lshift+0x4a>
 800980a:	3904      	subs	r1, #4
 800980c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009810:	f841 2f04 	str.w	r2, [r1, #4]!
 8009814:	4298      	cmp	r0, r3
 8009816:	d8f9      	bhi.n	800980c <__lshift+0xc8>
 8009818:	e7ea      	b.n	80097f0 <__lshift+0xac>
 800981a:	bf00      	nop
 800981c:	0800b6b0 	.word	0x0800b6b0
 8009820:	0800b73c 	.word	0x0800b73c

08009824 <__mcmp>:
 8009824:	b530      	push	{r4, r5, lr}
 8009826:	6902      	ldr	r2, [r0, #16]
 8009828:	690c      	ldr	r4, [r1, #16]
 800982a:	1b12      	subs	r2, r2, r4
 800982c:	d10e      	bne.n	800984c <__mcmp+0x28>
 800982e:	f100 0314 	add.w	r3, r0, #20
 8009832:	3114      	adds	r1, #20
 8009834:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009838:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800983c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009840:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009844:	42a5      	cmp	r5, r4
 8009846:	d003      	beq.n	8009850 <__mcmp+0x2c>
 8009848:	d305      	bcc.n	8009856 <__mcmp+0x32>
 800984a:	2201      	movs	r2, #1
 800984c:	4610      	mov	r0, r2
 800984e:	bd30      	pop	{r4, r5, pc}
 8009850:	4283      	cmp	r3, r0
 8009852:	d3f3      	bcc.n	800983c <__mcmp+0x18>
 8009854:	e7fa      	b.n	800984c <__mcmp+0x28>
 8009856:	f04f 32ff 	mov.w	r2, #4294967295
 800985a:	e7f7      	b.n	800984c <__mcmp+0x28>

0800985c <__mdiff>:
 800985c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009860:	460c      	mov	r4, r1
 8009862:	4606      	mov	r6, r0
 8009864:	4611      	mov	r1, r2
 8009866:	4620      	mov	r0, r4
 8009868:	4690      	mov	r8, r2
 800986a:	f7ff ffdb 	bl	8009824 <__mcmp>
 800986e:	1e05      	subs	r5, r0, #0
 8009870:	d110      	bne.n	8009894 <__mdiff+0x38>
 8009872:	4629      	mov	r1, r5
 8009874:	4630      	mov	r0, r6
 8009876:	f7ff fd09 	bl	800928c <_Balloc>
 800987a:	b930      	cbnz	r0, 800988a <__mdiff+0x2e>
 800987c:	4b3a      	ldr	r3, [pc, #232]	; (8009968 <__mdiff+0x10c>)
 800987e:	4602      	mov	r2, r0
 8009880:	f240 2132 	movw	r1, #562	; 0x232
 8009884:	4839      	ldr	r0, [pc, #228]	; (800996c <__mdiff+0x110>)
 8009886:	f000 fc51 	bl	800a12c <__assert_func>
 800988a:	2301      	movs	r3, #1
 800988c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009890:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009894:	bfa4      	itt	ge
 8009896:	4643      	movge	r3, r8
 8009898:	46a0      	movge	r8, r4
 800989a:	4630      	mov	r0, r6
 800989c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80098a0:	bfa6      	itte	ge
 80098a2:	461c      	movge	r4, r3
 80098a4:	2500      	movge	r5, #0
 80098a6:	2501      	movlt	r5, #1
 80098a8:	f7ff fcf0 	bl	800928c <_Balloc>
 80098ac:	b920      	cbnz	r0, 80098b8 <__mdiff+0x5c>
 80098ae:	4b2e      	ldr	r3, [pc, #184]	; (8009968 <__mdiff+0x10c>)
 80098b0:	4602      	mov	r2, r0
 80098b2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80098b6:	e7e5      	b.n	8009884 <__mdiff+0x28>
 80098b8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80098bc:	6926      	ldr	r6, [r4, #16]
 80098be:	60c5      	str	r5, [r0, #12]
 80098c0:	f104 0914 	add.w	r9, r4, #20
 80098c4:	f108 0514 	add.w	r5, r8, #20
 80098c8:	f100 0e14 	add.w	lr, r0, #20
 80098cc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80098d0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80098d4:	f108 0210 	add.w	r2, r8, #16
 80098d8:	46f2      	mov	sl, lr
 80098da:	2100      	movs	r1, #0
 80098dc:	f859 3b04 	ldr.w	r3, [r9], #4
 80098e0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80098e4:	fa1f f883 	uxth.w	r8, r3
 80098e8:	fa11 f18b 	uxtah	r1, r1, fp
 80098ec:	0c1b      	lsrs	r3, r3, #16
 80098ee:	eba1 0808 	sub.w	r8, r1, r8
 80098f2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80098f6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80098fa:	fa1f f888 	uxth.w	r8, r8
 80098fe:	1419      	asrs	r1, r3, #16
 8009900:	454e      	cmp	r6, r9
 8009902:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009906:	f84a 3b04 	str.w	r3, [sl], #4
 800990a:	d8e7      	bhi.n	80098dc <__mdiff+0x80>
 800990c:	1b33      	subs	r3, r6, r4
 800990e:	3b15      	subs	r3, #21
 8009910:	f023 0303 	bic.w	r3, r3, #3
 8009914:	3304      	adds	r3, #4
 8009916:	3415      	adds	r4, #21
 8009918:	42a6      	cmp	r6, r4
 800991a:	bf38      	it	cc
 800991c:	2304      	movcc	r3, #4
 800991e:	441d      	add	r5, r3
 8009920:	4473      	add	r3, lr
 8009922:	469e      	mov	lr, r3
 8009924:	462e      	mov	r6, r5
 8009926:	4566      	cmp	r6, ip
 8009928:	d30e      	bcc.n	8009948 <__mdiff+0xec>
 800992a:	f10c 0203 	add.w	r2, ip, #3
 800992e:	1b52      	subs	r2, r2, r5
 8009930:	f022 0203 	bic.w	r2, r2, #3
 8009934:	3d03      	subs	r5, #3
 8009936:	45ac      	cmp	ip, r5
 8009938:	bf38      	it	cc
 800993a:	2200      	movcc	r2, #0
 800993c:	441a      	add	r2, r3
 800993e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009942:	b17b      	cbz	r3, 8009964 <__mdiff+0x108>
 8009944:	6107      	str	r7, [r0, #16]
 8009946:	e7a3      	b.n	8009890 <__mdiff+0x34>
 8009948:	f856 8b04 	ldr.w	r8, [r6], #4
 800994c:	fa11 f288 	uxtah	r2, r1, r8
 8009950:	1414      	asrs	r4, r2, #16
 8009952:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009956:	b292      	uxth	r2, r2
 8009958:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800995c:	f84e 2b04 	str.w	r2, [lr], #4
 8009960:	1421      	asrs	r1, r4, #16
 8009962:	e7e0      	b.n	8009926 <__mdiff+0xca>
 8009964:	3f01      	subs	r7, #1
 8009966:	e7ea      	b.n	800993e <__mdiff+0xe2>
 8009968:	0800b6b0 	.word	0x0800b6b0
 800996c:	0800b73c 	.word	0x0800b73c

08009970 <__ulp>:
 8009970:	b082      	sub	sp, #8
 8009972:	ed8d 0b00 	vstr	d0, [sp]
 8009976:	9b01      	ldr	r3, [sp, #4]
 8009978:	4912      	ldr	r1, [pc, #72]	; (80099c4 <__ulp+0x54>)
 800997a:	4019      	ands	r1, r3
 800997c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8009980:	2900      	cmp	r1, #0
 8009982:	dd05      	ble.n	8009990 <__ulp+0x20>
 8009984:	2200      	movs	r2, #0
 8009986:	460b      	mov	r3, r1
 8009988:	ec43 2b10 	vmov	d0, r2, r3
 800998c:	b002      	add	sp, #8
 800998e:	4770      	bx	lr
 8009990:	4249      	negs	r1, r1
 8009992:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8009996:	ea4f 5021 	mov.w	r0, r1, asr #20
 800999a:	f04f 0200 	mov.w	r2, #0
 800999e:	f04f 0300 	mov.w	r3, #0
 80099a2:	da04      	bge.n	80099ae <__ulp+0x3e>
 80099a4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80099a8:	fa41 f300 	asr.w	r3, r1, r0
 80099ac:	e7ec      	b.n	8009988 <__ulp+0x18>
 80099ae:	f1a0 0114 	sub.w	r1, r0, #20
 80099b2:	291e      	cmp	r1, #30
 80099b4:	bfda      	itte	le
 80099b6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80099ba:	fa20 f101 	lsrle.w	r1, r0, r1
 80099be:	2101      	movgt	r1, #1
 80099c0:	460a      	mov	r2, r1
 80099c2:	e7e1      	b.n	8009988 <__ulp+0x18>
 80099c4:	7ff00000 	.word	0x7ff00000

080099c8 <__b2d>:
 80099c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099ca:	6905      	ldr	r5, [r0, #16]
 80099cc:	f100 0714 	add.w	r7, r0, #20
 80099d0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80099d4:	1f2e      	subs	r6, r5, #4
 80099d6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80099da:	4620      	mov	r0, r4
 80099dc:	f7ff fd48 	bl	8009470 <__hi0bits>
 80099e0:	f1c0 0320 	rsb	r3, r0, #32
 80099e4:	280a      	cmp	r0, #10
 80099e6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8009a64 <__b2d+0x9c>
 80099ea:	600b      	str	r3, [r1, #0]
 80099ec:	dc14      	bgt.n	8009a18 <__b2d+0x50>
 80099ee:	f1c0 0e0b 	rsb	lr, r0, #11
 80099f2:	fa24 f10e 	lsr.w	r1, r4, lr
 80099f6:	42b7      	cmp	r7, r6
 80099f8:	ea41 030c 	orr.w	r3, r1, ip
 80099fc:	bf34      	ite	cc
 80099fe:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009a02:	2100      	movcs	r1, #0
 8009a04:	3015      	adds	r0, #21
 8009a06:	fa04 f000 	lsl.w	r0, r4, r0
 8009a0a:	fa21 f10e 	lsr.w	r1, r1, lr
 8009a0e:	ea40 0201 	orr.w	r2, r0, r1
 8009a12:	ec43 2b10 	vmov	d0, r2, r3
 8009a16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a18:	42b7      	cmp	r7, r6
 8009a1a:	bf3a      	itte	cc
 8009a1c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009a20:	f1a5 0608 	subcc.w	r6, r5, #8
 8009a24:	2100      	movcs	r1, #0
 8009a26:	380b      	subs	r0, #11
 8009a28:	d017      	beq.n	8009a5a <__b2d+0x92>
 8009a2a:	f1c0 0c20 	rsb	ip, r0, #32
 8009a2e:	fa04 f500 	lsl.w	r5, r4, r0
 8009a32:	42be      	cmp	r6, r7
 8009a34:	fa21 f40c 	lsr.w	r4, r1, ip
 8009a38:	ea45 0504 	orr.w	r5, r5, r4
 8009a3c:	bf8c      	ite	hi
 8009a3e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8009a42:	2400      	movls	r4, #0
 8009a44:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8009a48:	fa01 f000 	lsl.w	r0, r1, r0
 8009a4c:	fa24 f40c 	lsr.w	r4, r4, ip
 8009a50:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009a54:	ea40 0204 	orr.w	r2, r0, r4
 8009a58:	e7db      	b.n	8009a12 <__b2d+0x4a>
 8009a5a:	ea44 030c 	orr.w	r3, r4, ip
 8009a5e:	460a      	mov	r2, r1
 8009a60:	e7d7      	b.n	8009a12 <__b2d+0x4a>
 8009a62:	bf00      	nop
 8009a64:	3ff00000 	.word	0x3ff00000

08009a68 <__d2b>:
 8009a68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009a6c:	4689      	mov	r9, r1
 8009a6e:	2101      	movs	r1, #1
 8009a70:	ec57 6b10 	vmov	r6, r7, d0
 8009a74:	4690      	mov	r8, r2
 8009a76:	f7ff fc09 	bl	800928c <_Balloc>
 8009a7a:	4604      	mov	r4, r0
 8009a7c:	b930      	cbnz	r0, 8009a8c <__d2b+0x24>
 8009a7e:	4602      	mov	r2, r0
 8009a80:	4b25      	ldr	r3, [pc, #148]	; (8009b18 <__d2b+0xb0>)
 8009a82:	4826      	ldr	r0, [pc, #152]	; (8009b1c <__d2b+0xb4>)
 8009a84:	f240 310a 	movw	r1, #778	; 0x30a
 8009a88:	f000 fb50 	bl	800a12c <__assert_func>
 8009a8c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009a90:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009a94:	bb35      	cbnz	r5, 8009ae4 <__d2b+0x7c>
 8009a96:	2e00      	cmp	r6, #0
 8009a98:	9301      	str	r3, [sp, #4]
 8009a9a:	d028      	beq.n	8009aee <__d2b+0x86>
 8009a9c:	4668      	mov	r0, sp
 8009a9e:	9600      	str	r6, [sp, #0]
 8009aa0:	f7ff fd06 	bl	80094b0 <__lo0bits>
 8009aa4:	9900      	ldr	r1, [sp, #0]
 8009aa6:	b300      	cbz	r0, 8009aea <__d2b+0x82>
 8009aa8:	9a01      	ldr	r2, [sp, #4]
 8009aaa:	f1c0 0320 	rsb	r3, r0, #32
 8009aae:	fa02 f303 	lsl.w	r3, r2, r3
 8009ab2:	430b      	orrs	r3, r1
 8009ab4:	40c2      	lsrs	r2, r0
 8009ab6:	6163      	str	r3, [r4, #20]
 8009ab8:	9201      	str	r2, [sp, #4]
 8009aba:	9b01      	ldr	r3, [sp, #4]
 8009abc:	61a3      	str	r3, [r4, #24]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	bf14      	ite	ne
 8009ac2:	2202      	movne	r2, #2
 8009ac4:	2201      	moveq	r2, #1
 8009ac6:	6122      	str	r2, [r4, #16]
 8009ac8:	b1d5      	cbz	r5, 8009b00 <__d2b+0x98>
 8009aca:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009ace:	4405      	add	r5, r0
 8009ad0:	f8c9 5000 	str.w	r5, [r9]
 8009ad4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009ad8:	f8c8 0000 	str.w	r0, [r8]
 8009adc:	4620      	mov	r0, r4
 8009ade:	b003      	add	sp, #12
 8009ae0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009ae4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009ae8:	e7d5      	b.n	8009a96 <__d2b+0x2e>
 8009aea:	6161      	str	r1, [r4, #20]
 8009aec:	e7e5      	b.n	8009aba <__d2b+0x52>
 8009aee:	a801      	add	r0, sp, #4
 8009af0:	f7ff fcde 	bl	80094b0 <__lo0bits>
 8009af4:	9b01      	ldr	r3, [sp, #4]
 8009af6:	6163      	str	r3, [r4, #20]
 8009af8:	2201      	movs	r2, #1
 8009afa:	6122      	str	r2, [r4, #16]
 8009afc:	3020      	adds	r0, #32
 8009afe:	e7e3      	b.n	8009ac8 <__d2b+0x60>
 8009b00:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009b04:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009b08:	f8c9 0000 	str.w	r0, [r9]
 8009b0c:	6918      	ldr	r0, [r3, #16]
 8009b0e:	f7ff fcaf 	bl	8009470 <__hi0bits>
 8009b12:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009b16:	e7df      	b.n	8009ad8 <__d2b+0x70>
 8009b18:	0800b6b0 	.word	0x0800b6b0
 8009b1c:	0800b73c 	.word	0x0800b73c

08009b20 <__ratio>:
 8009b20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b24:	4688      	mov	r8, r1
 8009b26:	4669      	mov	r1, sp
 8009b28:	4681      	mov	r9, r0
 8009b2a:	f7ff ff4d 	bl	80099c8 <__b2d>
 8009b2e:	a901      	add	r1, sp, #4
 8009b30:	4640      	mov	r0, r8
 8009b32:	ec55 4b10 	vmov	r4, r5, d0
 8009b36:	f7ff ff47 	bl	80099c8 <__b2d>
 8009b3a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009b3e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009b42:	eba3 0c02 	sub.w	ip, r3, r2
 8009b46:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009b4a:	1a9b      	subs	r3, r3, r2
 8009b4c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009b50:	ec51 0b10 	vmov	r0, r1, d0
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	bfd6      	itet	le
 8009b58:	460a      	movle	r2, r1
 8009b5a:	462a      	movgt	r2, r5
 8009b5c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009b60:	468b      	mov	fp, r1
 8009b62:	462f      	mov	r7, r5
 8009b64:	bfd4      	ite	le
 8009b66:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009b6a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009b6e:	4620      	mov	r0, r4
 8009b70:	ee10 2a10 	vmov	r2, s0
 8009b74:	465b      	mov	r3, fp
 8009b76:	4639      	mov	r1, r7
 8009b78:	f7f6 fe68 	bl	800084c <__aeabi_ddiv>
 8009b7c:	ec41 0b10 	vmov	d0, r0, r1
 8009b80:	b003      	add	sp, #12
 8009b82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009b86 <__copybits>:
 8009b86:	3901      	subs	r1, #1
 8009b88:	b570      	push	{r4, r5, r6, lr}
 8009b8a:	1149      	asrs	r1, r1, #5
 8009b8c:	6914      	ldr	r4, [r2, #16]
 8009b8e:	3101      	adds	r1, #1
 8009b90:	f102 0314 	add.w	r3, r2, #20
 8009b94:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009b98:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009b9c:	1f05      	subs	r5, r0, #4
 8009b9e:	42a3      	cmp	r3, r4
 8009ba0:	d30c      	bcc.n	8009bbc <__copybits+0x36>
 8009ba2:	1aa3      	subs	r3, r4, r2
 8009ba4:	3b11      	subs	r3, #17
 8009ba6:	f023 0303 	bic.w	r3, r3, #3
 8009baa:	3211      	adds	r2, #17
 8009bac:	42a2      	cmp	r2, r4
 8009bae:	bf88      	it	hi
 8009bb0:	2300      	movhi	r3, #0
 8009bb2:	4418      	add	r0, r3
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	4288      	cmp	r0, r1
 8009bb8:	d305      	bcc.n	8009bc6 <__copybits+0x40>
 8009bba:	bd70      	pop	{r4, r5, r6, pc}
 8009bbc:	f853 6b04 	ldr.w	r6, [r3], #4
 8009bc0:	f845 6f04 	str.w	r6, [r5, #4]!
 8009bc4:	e7eb      	b.n	8009b9e <__copybits+0x18>
 8009bc6:	f840 3b04 	str.w	r3, [r0], #4
 8009bca:	e7f4      	b.n	8009bb6 <__copybits+0x30>

08009bcc <__any_on>:
 8009bcc:	f100 0214 	add.w	r2, r0, #20
 8009bd0:	6900      	ldr	r0, [r0, #16]
 8009bd2:	114b      	asrs	r3, r1, #5
 8009bd4:	4298      	cmp	r0, r3
 8009bd6:	b510      	push	{r4, lr}
 8009bd8:	db11      	blt.n	8009bfe <__any_on+0x32>
 8009bda:	dd0a      	ble.n	8009bf2 <__any_on+0x26>
 8009bdc:	f011 011f 	ands.w	r1, r1, #31
 8009be0:	d007      	beq.n	8009bf2 <__any_on+0x26>
 8009be2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009be6:	fa24 f001 	lsr.w	r0, r4, r1
 8009bea:	fa00 f101 	lsl.w	r1, r0, r1
 8009bee:	428c      	cmp	r4, r1
 8009bf0:	d10b      	bne.n	8009c0a <__any_on+0x3e>
 8009bf2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009bf6:	4293      	cmp	r3, r2
 8009bf8:	d803      	bhi.n	8009c02 <__any_on+0x36>
 8009bfa:	2000      	movs	r0, #0
 8009bfc:	bd10      	pop	{r4, pc}
 8009bfe:	4603      	mov	r3, r0
 8009c00:	e7f7      	b.n	8009bf2 <__any_on+0x26>
 8009c02:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009c06:	2900      	cmp	r1, #0
 8009c08:	d0f5      	beq.n	8009bf6 <__any_on+0x2a>
 8009c0a:	2001      	movs	r0, #1
 8009c0c:	e7f6      	b.n	8009bfc <__any_on+0x30>

08009c0e <_calloc_r>:
 8009c0e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009c10:	fba1 2402 	umull	r2, r4, r1, r2
 8009c14:	b94c      	cbnz	r4, 8009c2a <_calloc_r+0x1c>
 8009c16:	4611      	mov	r1, r2
 8009c18:	9201      	str	r2, [sp, #4]
 8009c1a:	f000 f87b 	bl	8009d14 <_malloc_r>
 8009c1e:	9a01      	ldr	r2, [sp, #4]
 8009c20:	4605      	mov	r5, r0
 8009c22:	b930      	cbnz	r0, 8009c32 <_calloc_r+0x24>
 8009c24:	4628      	mov	r0, r5
 8009c26:	b003      	add	sp, #12
 8009c28:	bd30      	pop	{r4, r5, pc}
 8009c2a:	220c      	movs	r2, #12
 8009c2c:	6002      	str	r2, [r0, #0]
 8009c2e:	2500      	movs	r5, #0
 8009c30:	e7f8      	b.n	8009c24 <_calloc_r+0x16>
 8009c32:	4621      	mov	r1, r4
 8009c34:	f7fc fbc0 	bl	80063b8 <memset>
 8009c38:	e7f4      	b.n	8009c24 <_calloc_r+0x16>
	...

08009c3c <_free_r>:
 8009c3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009c3e:	2900      	cmp	r1, #0
 8009c40:	d044      	beq.n	8009ccc <_free_r+0x90>
 8009c42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c46:	9001      	str	r0, [sp, #4]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	f1a1 0404 	sub.w	r4, r1, #4
 8009c4e:	bfb8      	it	lt
 8009c50:	18e4      	addlt	r4, r4, r3
 8009c52:	f000 fab5 	bl	800a1c0 <__malloc_lock>
 8009c56:	4a1e      	ldr	r2, [pc, #120]	; (8009cd0 <_free_r+0x94>)
 8009c58:	9801      	ldr	r0, [sp, #4]
 8009c5a:	6813      	ldr	r3, [r2, #0]
 8009c5c:	b933      	cbnz	r3, 8009c6c <_free_r+0x30>
 8009c5e:	6063      	str	r3, [r4, #4]
 8009c60:	6014      	str	r4, [r2, #0]
 8009c62:	b003      	add	sp, #12
 8009c64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009c68:	f000 bab0 	b.w	800a1cc <__malloc_unlock>
 8009c6c:	42a3      	cmp	r3, r4
 8009c6e:	d908      	bls.n	8009c82 <_free_r+0x46>
 8009c70:	6825      	ldr	r5, [r4, #0]
 8009c72:	1961      	adds	r1, r4, r5
 8009c74:	428b      	cmp	r3, r1
 8009c76:	bf01      	itttt	eq
 8009c78:	6819      	ldreq	r1, [r3, #0]
 8009c7a:	685b      	ldreq	r3, [r3, #4]
 8009c7c:	1949      	addeq	r1, r1, r5
 8009c7e:	6021      	streq	r1, [r4, #0]
 8009c80:	e7ed      	b.n	8009c5e <_free_r+0x22>
 8009c82:	461a      	mov	r2, r3
 8009c84:	685b      	ldr	r3, [r3, #4]
 8009c86:	b10b      	cbz	r3, 8009c8c <_free_r+0x50>
 8009c88:	42a3      	cmp	r3, r4
 8009c8a:	d9fa      	bls.n	8009c82 <_free_r+0x46>
 8009c8c:	6811      	ldr	r1, [r2, #0]
 8009c8e:	1855      	adds	r5, r2, r1
 8009c90:	42a5      	cmp	r5, r4
 8009c92:	d10b      	bne.n	8009cac <_free_r+0x70>
 8009c94:	6824      	ldr	r4, [r4, #0]
 8009c96:	4421      	add	r1, r4
 8009c98:	1854      	adds	r4, r2, r1
 8009c9a:	42a3      	cmp	r3, r4
 8009c9c:	6011      	str	r1, [r2, #0]
 8009c9e:	d1e0      	bne.n	8009c62 <_free_r+0x26>
 8009ca0:	681c      	ldr	r4, [r3, #0]
 8009ca2:	685b      	ldr	r3, [r3, #4]
 8009ca4:	6053      	str	r3, [r2, #4]
 8009ca6:	4421      	add	r1, r4
 8009ca8:	6011      	str	r1, [r2, #0]
 8009caa:	e7da      	b.n	8009c62 <_free_r+0x26>
 8009cac:	d902      	bls.n	8009cb4 <_free_r+0x78>
 8009cae:	230c      	movs	r3, #12
 8009cb0:	6003      	str	r3, [r0, #0]
 8009cb2:	e7d6      	b.n	8009c62 <_free_r+0x26>
 8009cb4:	6825      	ldr	r5, [r4, #0]
 8009cb6:	1961      	adds	r1, r4, r5
 8009cb8:	428b      	cmp	r3, r1
 8009cba:	bf04      	itt	eq
 8009cbc:	6819      	ldreq	r1, [r3, #0]
 8009cbe:	685b      	ldreq	r3, [r3, #4]
 8009cc0:	6063      	str	r3, [r4, #4]
 8009cc2:	bf04      	itt	eq
 8009cc4:	1949      	addeq	r1, r1, r5
 8009cc6:	6021      	streq	r1, [r4, #0]
 8009cc8:	6054      	str	r4, [r2, #4]
 8009cca:	e7ca      	b.n	8009c62 <_free_r+0x26>
 8009ccc:	b003      	add	sp, #12
 8009cce:	bd30      	pop	{r4, r5, pc}
 8009cd0:	20000380 	.word	0x20000380

08009cd4 <sbrk_aligned>:
 8009cd4:	b570      	push	{r4, r5, r6, lr}
 8009cd6:	4e0e      	ldr	r6, [pc, #56]	; (8009d10 <sbrk_aligned+0x3c>)
 8009cd8:	460c      	mov	r4, r1
 8009cda:	6831      	ldr	r1, [r6, #0]
 8009cdc:	4605      	mov	r5, r0
 8009cde:	b911      	cbnz	r1, 8009ce6 <sbrk_aligned+0x12>
 8009ce0:	f000 f9f2 	bl	800a0c8 <_sbrk_r>
 8009ce4:	6030      	str	r0, [r6, #0]
 8009ce6:	4621      	mov	r1, r4
 8009ce8:	4628      	mov	r0, r5
 8009cea:	f000 f9ed 	bl	800a0c8 <_sbrk_r>
 8009cee:	1c43      	adds	r3, r0, #1
 8009cf0:	d00a      	beq.n	8009d08 <sbrk_aligned+0x34>
 8009cf2:	1cc4      	adds	r4, r0, #3
 8009cf4:	f024 0403 	bic.w	r4, r4, #3
 8009cf8:	42a0      	cmp	r0, r4
 8009cfa:	d007      	beq.n	8009d0c <sbrk_aligned+0x38>
 8009cfc:	1a21      	subs	r1, r4, r0
 8009cfe:	4628      	mov	r0, r5
 8009d00:	f000 f9e2 	bl	800a0c8 <_sbrk_r>
 8009d04:	3001      	adds	r0, #1
 8009d06:	d101      	bne.n	8009d0c <sbrk_aligned+0x38>
 8009d08:	f04f 34ff 	mov.w	r4, #4294967295
 8009d0c:	4620      	mov	r0, r4
 8009d0e:	bd70      	pop	{r4, r5, r6, pc}
 8009d10:	20000384 	.word	0x20000384

08009d14 <_malloc_r>:
 8009d14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d18:	1ccd      	adds	r5, r1, #3
 8009d1a:	f025 0503 	bic.w	r5, r5, #3
 8009d1e:	3508      	adds	r5, #8
 8009d20:	2d0c      	cmp	r5, #12
 8009d22:	bf38      	it	cc
 8009d24:	250c      	movcc	r5, #12
 8009d26:	2d00      	cmp	r5, #0
 8009d28:	4607      	mov	r7, r0
 8009d2a:	db01      	blt.n	8009d30 <_malloc_r+0x1c>
 8009d2c:	42a9      	cmp	r1, r5
 8009d2e:	d905      	bls.n	8009d3c <_malloc_r+0x28>
 8009d30:	230c      	movs	r3, #12
 8009d32:	603b      	str	r3, [r7, #0]
 8009d34:	2600      	movs	r6, #0
 8009d36:	4630      	mov	r0, r6
 8009d38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d3c:	4e2e      	ldr	r6, [pc, #184]	; (8009df8 <_malloc_r+0xe4>)
 8009d3e:	f000 fa3f 	bl	800a1c0 <__malloc_lock>
 8009d42:	6833      	ldr	r3, [r6, #0]
 8009d44:	461c      	mov	r4, r3
 8009d46:	bb34      	cbnz	r4, 8009d96 <_malloc_r+0x82>
 8009d48:	4629      	mov	r1, r5
 8009d4a:	4638      	mov	r0, r7
 8009d4c:	f7ff ffc2 	bl	8009cd4 <sbrk_aligned>
 8009d50:	1c43      	adds	r3, r0, #1
 8009d52:	4604      	mov	r4, r0
 8009d54:	d14d      	bne.n	8009df2 <_malloc_r+0xde>
 8009d56:	6834      	ldr	r4, [r6, #0]
 8009d58:	4626      	mov	r6, r4
 8009d5a:	2e00      	cmp	r6, #0
 8009d5c:	d140      	bne.n	8009de0 <_malloc_r+0xcc>
 8009d5e:	6823      	ldr	r3, [r4, #0]
 8009d60:	4631      	mov	r1, r6
 8009d62:	4638      	mov	r0, r7
 8009d64:	eb04 0803 	add.w	r8, r4, r3
 8009d68:	f000 f9ae 	bl	800a0c8 <_sbrk_r>
 8009d6c:	4580      	cmp	r8, r0
 8009d6e:	d13a      	bne.n	8009de6 <_malloc_r+0xd2>
 8009d70:	6821      	ldr	r1, [r4, #0]
 8009d72:	3503      	adds	r5, #3
 8009d74:	1a6d      	subs	r5, r5, r1
 8009d76:	f025 0503 	bic.w	r5, r5, #3
 8009d7a:	3508      	adds	r5, #8
 8009d7c:	2d0c      	cmp	r5, #12
 8009d7e:	bf38      	it	cc
 8009d80:	250c      	movcc	r5, #12
 8009d82:	4629      	mov	r1, r5
 8009d84:	4638      	mov	r0, r7
 8009d86:	f7ff ffa5 	bl	8009cd4 <sbrk_aligned>
 8009d8a:	3001      	adds	r0, #1
 8009d8c:	d02b      	beq.n	8009de6 <_malloc_r+0xd2>
 8009d8e:	6823      	ldr	r3, [r4, #0]
 8009d90:	442b      	add	r3, r5
 8009d92:	6023      	str	r3, [r4, #0]
 8009d94:	e00e      	b.n	8009db4 <_malloc_r+0xa0>
 8009d96:	6822      	ldr	r2, [r4, #0]
 8009d98:	1b52      	subs	r2, r2, r5
 8009d9a:	d41e      	bmi.n	8009dda <_malloc_r+0xc6>
 8009d9c:	2a0b      	cmp	r2, #11
 8009d9e:	d916      	bls.n	8009dce <_malloc_r+0xba>
 8009da0:	1961      	adds	r1, r4, r5
 8009da2:	42a3      	cmp	r3, r4
 8009da4:	6025      	str	r5, [r4, #0]
 8009da6:	bf18      	it	ne
 8009da8:	6059      	strne	r1, [r3, #4]
 8009daa:	6863      	ldr	r3, [r4, #4]
 8009dac:	bf08      	it	eq
 8009dae:	6031      	streq	r1, [r6, #0]
 8009db0:	5162      	str	r2, [r4, r5]
 8009db2:	604b      	str	r3, [r1, #4]
 8009db4:	4638      	mov	r0, r7
 8009db6:	f104 060b 	add.w	r6, r4, #11
 8009dba:	f000 fa07 	bl	800a1cc <__malloc_unlock>
 8009dbe:	f026 0607 	bic.w	r6, r6, #7
 8009dc2:	1d23      	adds	r3, r4, #4
 8009dc4:	1af2      	subs	r2, r6, r3
 8009dc6:	d0b6      	beq.n	8009d36 <_malloc_r+0x22>
 8009dc8:	1b9b      	subs	r3, r3, r6
 8009dca:	50a3      	str	r3, [r4, r2]
 8009dcc:	e7b3      	b.n	8009d36 <_malloc_r+0x22>
 8009dce:	6862      	ldr	r2, [r4, #4]
 8009dd0:	42a3      	cmp	r3, r4
 8009dd2:	bf0c      	ite	eq
 8009dd4:	6032      	streq	r2, [r6, #0]
 8009dd6:	605a      	strne	r2, [r3, #4]
 8009dd8:	e7ec      	b.n	8009db4 <_malloc_r+0xa0>
 8009dda:	4623      	mov	r3, r4
 8009ddc:	6864      	ldr	r4, [r4, #4]
 8009dde:	e7b2      	b.n	8009d46 <_malloc_r+0x32>
 8009de0:	4634      	mov	r4, r6
 8009de2:	6876      	ldr	r6, [r6, #4]
 8009de4:	e7b9      	b.n	8009d5a <_malloc_r+0x46>
 8009de6:	230c      	movs	r3, #12
 8009de8:	603b      	str	r3, [r7, #0]
 8009dea:	4638      	mov	r0, r7
 8009dec:	f000 f9ee 	bl	800a1cc <__malloc_unlock>
 8009df0:	e7a1      	b.n	8009d36 <_malloc_r+0x22>
 8009df2:	6025      	str	r5, [r4, #0]
 8009df4:	e7de      	b.n	8009db4 <_malloc_r+0xa0>
 8009df6:	bf00      	nop
 8009df8:	20000380 	.word	0x20000380

08009dfc <__ssputs_r>:
 8009dfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e00:	688e      	ldr	r6, [r1, #8]
 8009e02:	429e      	cmp	r6, r3
 8009e04:	4682      	mov	sl, r0
 8009e06:	460c      	mov	r4, r1
 8009e08:	4690      	mov	r8, r2
 8009e0a:	461f      	mov	r7, r3
 8009e0c:	d838      	bhi.n	8009e80 <__ssputs_r+0x84>
 8009e0e:	898a      	ldrh	r2, [r1, #12]
 8009e10:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009e14:	d032      	beq.n	8009e7c <__ssputs_r+0x80>
 8009e16:	6825      	ldr	r5, [r4, #0]
 8009e18:	6909      	ldr	r1, [r1, #16]
 8009e1a:	eba5 0901 	sub.w	r9, r5, r1
 8009e1e:	6965      	ldr	r5, [r4, #20]
 8009e20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009e24:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009e28:	3301      	adds	r3, #1
 8009e2a:	444b      	add	r3, r9
 8009e2c:	106d      	asrs	r5, r5, #1
 8009e2e:	429d      	cmp	r5, r3
 8009e30:	bf38      	it	cc
 8009e32:	461d      	movcc	r5, r3
 8009e34:	0553      	lsls	r3, r2, #21
 8009e36:	d531      	bpl.n	8009e9c <__ssputs_r+0xa0>
 8009e38:	4629      	mov	r1, r5
 8009e3a:	f7ff ff6b 	bl	8009d14 <_malloc_r>
 8009e3e:	4606      	mov	r6, r0
 8009e40:	b950      	cbnz	r0, 8009e58 <__ssputs_r+0x5c>
 8009e42:	230c      	movs	r3, #12
 8009e44:	f8ca 3000 	str.w	r3, [sl]
 8009e48:	89a3      	ldrh	r3, [r4, #12]
 8009e4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e4e:	81a3      	strh	r3, [r4, #12]
 8009e50:	f04f 30ff 	mov.w	r0, #4294967295
 8009e54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e58:	6921      	ldr	r1, [r4, #16]
 8009e5a:	464a      	mov	r2, r9
 8009e5c:	f7ff fa08 	bl	8009270 <memcpy>
 8009e60:	89a3      	ldrh	r3, [r4, #12]
 8009e62:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009e66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e6a:	81a3      	strh	r3, [r4, #12]
 8009e6c:	6126      	str	r6, [r4, #16]
 8009e6e:	6165      	str	r5, [r4, #20]
 8009e70:	444e      	add	r6, r9
 8009e72:	eba5 0509 	sub.w	r5, r5, r9
 8009e76:	6026      	str	r6, [r4, #0]
 8009e78:	60a5      	str	r5, [r4, #8]
 8009e7a:	463e      	mov	r6, r7
 8009e7c:	42be      	cmp	r6, r7
 8009e7e:	d900      	bls.n	8009e82 <__ssputs_r+0x86>
 8009e80:	463e      	mov	r6, r7
 8009e82:	6820      	ldr	r0, [r4, #0]
 8009e84:	4632      	mov	r2, r6
 8009e86:	4641      	mov	r1, r8
 8009e88:	f000 f980 	bl	800a18c <memmove>
 8009e8c:	68a3      	ldr	r3, [r4, #8]
 8009e8e:	1b9b      	subs	r3, r3, r6
 8009e90:	60a3      	str	r3, [r4, #8]
 8009e92:	6823      	ldr	r3, [r4, #0]
 8009e94:	4433      	add	r3, r6
 8009e96:	6023      	str	r3, [r4, #0]
 8009e98:	2000      	movs	r0, #0
 8009e9a:	e7db      	b.n	8009e54 <__ssputs_r+0x58>
 8009e9c:	462a      	mov	r2, r5
 8009e9e:	f000 f99b 	bl	800a1d8 <_realloc_r>
 8009ea2:	4606      	mov	r6, r0
 8009ea4:	2800      	cmp	r0, #0
 8009ea6:	d1e1      	bne.n	8009e6c <__ssputs_r+0x70>
 8009ea8:	6921      	ldr	r1, [r4, #16]
 8009eaa:	4650      	mov	r0, sl
 8009eac:	f7ff fec6 	bl	8009c3c <_free_r>
 8009eb0:	e7c7      	b.n	8009e42 <__ssputs_r+0x46>
	...

08009eb4 <_svfiprintf_r>:
 8009eb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009eb8:	4698      	mov	r8, r3
 8009eba:	898b      	ldrh	r3, [r1, #12]
 8009ebc:	061b      	lsls	r3, r3, #24
 8009ebe:	b09d      	sub	sp, #116	; 0x74
 8009ec0:	4607      	mov	r7, r0
 8009ec2:	460d      	mov	r5, r1
 8009ec4:	4614      	mov	r4, r2
 8009ec6:	d50e      	bpl.n	8009ee6 <_svfiprintf_r+0x32>
 8009ec8:	690b      	ldr	r3, [r1, #16]
 8009eca:	b963      	cbnz	r3, 8009ee6 <_svfiprintf_r+0x32>
 8009ecc:	2140      	movs	r1, #64	; 0x40
 8009ece:	f7ff ff21 	bl	8009d14 <_malloc_r>
 8009ed2:	6028      	str	r0, [r5, #0]
 8009ed4:	6128      	str	r0, [r5, #16]
 8009ed6:	b920      	cbnz	r0, 8009ee2 <_svfiprintf_r+0x2e>
 8009ed8:	230c      	movs	r3, #12
 8009eda:	603b      	str	r3, [r7, #0]
 8009edc:	f04f 30ff 	mov.w	r0, #4294967295
 8009ee0:	e0d1      	b.n	800a086 <_svfiprintf_r+0x1d2>
 8009ee2:	2340      	movs	r3, #64	; 0x40
 8009ee4:	616b      	str	r3, [r5, #20]
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	9309      	str	r3, [sp, #36]	; 0x24
 8009eea:	2320      	movs	r3, #32
 8009eec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009ef0:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ef4:	2330      	movs	r3, #48	; 0x30
 8009ef6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a0a0 <_svfiprintf_r+0x1ec>
 8009efa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009efe:	f04f 0901 	mov.w	r9, #1
 8009f02:	4623      	mov	r3, r4
 8009f04:	469a      	mov	sl, r3
 8009f06:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f0a:	b10a      	cbz	r2, 8009f10 <_svfiprintf_r+0x5c>
 8009f0c:	2a25      	cmp	r2, #37	; 0x25
 8009f0e:	d1f9      	bne.n	8009f04 <_svfiprintf_r+0x50>
 8009f10:	ebba 0b04 	subs.w	fp, sl, r4
 8009f14:	d00b      	beq.n	8009f2e <_svfiprintf_r+0x7a>
 8009f16:	465b      	mov	r3, fp
 8009f18:	4622      	mov	r2, r4
 8009f1a:	4629      	mov	r1, r5
 8009f1c:	4638      	mov	r0, r7
 8009f1e:	f7ff ff6d 	bl	8009dfc <__ssputs_r>
 8009f22:	3001      	adds	r0, #1
 8009f24:	f000 80aa 	beq.w	800a07c <_svfiprintf_r+0x1c8>
 8009f28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f2a:	445a      	add	r2, fp
 8009f2c:	9209      	str	r2, [sp, #36]	; 0x24
 8009f2e:	f89a 3000 	ldrb.w	r3, [sl]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	f000 80a2 	beq.w	800a07c <_svfiprintf_r+0x1c8>
 8009f38:	2300      	movs	r3, #0
 8009f3a:	f04f 32ff 	mov.w	r2, #4294967295
 8009f3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009f42:	f10a 0a01 	add.w	sl, sl, #1
 8009f46:	9304      	str	r3, [sp, #16]
 8009f48:	9307      	str	r3, [sp, #28]
 8009f4a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009f4e:	931a      	str	r3, [sp, #104]	; 0x68
 8009f50:	4654      	mov	r4, sl
 8009f52:	2205      	movs	r2, #5
 8009f54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f58:	4851      	ldr	r0, [pc, #324]	; (800a0a0 <_svfiprintf_r+0x1ec>)
 8009f5a:	f7f6 f941 	bl	80001e0 <memchr>
 8009f5e:	9a04      	ldr	r2, [sp, #16]
 8009f60:	b9d8      	cbnz	r0, 8009f9a <_svfiprintf_r+0xe6>
 8009f62:	06d0      	lsls	r0, r2, #27
 8009f64:	bf44      	itt	mi
 8009f66:	2320      	movmi	r3, #32
 8009f68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f6c:	0711      	lsls	r1, r2, #28
 8009f6e:	bf44      	itt	mi
 8009f70:	232b      	movmi	r3, #43	; 0x2b
 8009f72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f76:	f89a 3000 	ldrb.w	r3, [sl]
 8009f7a:	2b2a      	cmp	r3, #42	; 0x2a
 8009f7c:	d015      	beq.n	8009faa <_svfiprintf_r+0xf6>
 8009f7e:	9a07      	ldr	r2, [sp, #28]
 8009f80:	4654      	mov	r4, sl
 8009f82:	2000      	movs	r0, #0
 8009f84:	f04f 0c0a 	mov.w	ip, #10
 8009f88:	4621      	mov	r1, r4
 8009f8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009f8e:	3b30      	subs	r3, #48	; 0x30
 8009f90:	2b09      	cmp	r3, #9
 8009f92:	d94e      	bls.n	800a032 <_svfiprintf_r+0x17e>
 8009f94:	b1b0      	cbz	r0, 8009fc4 <_svfiprintf_r+0x110>
 8009f96:	9207      	str	r2, [sp, #28]
 8009f98:	e014      	b.n	8009fc4 <_svfiprintf_r+0x110>
 8009f9a:	eba0 0308 	sub.w	r3, r0, r8
 8009f9e:	fa09 f303 	lsl.w	r3, r9, r3
 8009fa2:	4313      	orrs	r3, r2
 8009fa4:	9304      	str	r3, [sp, #16]
 8009fa6:	46a2      	mov	sl, r4
 8009fa8:	e7d2      	b.n	8009f50 <_svfiprintf_r+0x9c>
 8009faa:	9b03      	ldr	r3, [sp, #12]
 8009fac:	1d19      	adds	r1, r3, #4
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	9103      	str	r1, [sp, #12]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	bfbb      	ittet	lt
 8009fb6:	425b      	neglt	r3, r3
 8009fb8:	f042 0202 	orrlt.w	r2, r2, #2
 8009fbc:	9307      	strge	r3, [sp, #28]
 8009fbe:	9307      	strlt	r3, [sp, #28]
 8009fc0:	bfb8      	it	lt
 8009fc2:	9204      	strlt	r2, [sp, #16]
 8009fc4:	7823      	ldrb	r3, [r4, #0]
 8009fc6:	2b2e      	cmp	r3, #46	; 0x2e
 8009fc8:	d10c      	bne.n	8009fe4 <_svfiprintf_r+0x130>
 8009fca:	7863      	ldrb	r3, [r4, #1]
 8009fcc:	2b2a      	cmp	r3, #42	; 0x2a
 8009fce:	d135      	bne.n	800a03c <_svfiprintf_r+0x188>
 8009fd0:	9b03      	ldr	r3, [sp, #12]
 8009fd2:	1d1a      	adds	r2, r3, #4
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	9203      	str	r2, [sp, #12]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	bfb8      	it	lt
 8009fdc:	f04f 33ff 	movlt.w	r3, #4294967295
 8009fe0:	3402      	adds	r4, #2
 8009fe2:	9305      	str	r3, [sp, #20]
 8009fe4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a0b0 <_svfiprintf_r+0x1fc>
 8009fe8:	7821      	ldrb	r1, [r4, #0]
 8009fea:	2203      	movs	r2, #3
 8009fec:	4650      	mov	r0, sl
 8009fee:	f7f6 f8f7 	bl	80001e0 <memchr>
 8009ff2:	b140      	cbz	r0, 800a006 <_svfiprintf_r+0x152>
 8009ff4:	2340      	movs	r3, #64	; 0x40
 8009ff6:	eba0 000a 	sub.w	r0, r0, sl
 8009ffa:	fa03 f000 	lsl.w	r0, r3, r0
 8009ffe:	9b04      	ldr	r3, [sp, #16]
 800a000:	4303      	orrs	r3, r0
 800a002:	3401      	adds	r4, #1
 800a004:	9304      	str	r3, [sp, #16]
 800a006:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a00a:	4826      	ldr	r0, [pc, #152]	; (800a0a4 <_svfiprintf_r+0x1f0>)
 800a00c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a010:	2206      	movs	r2, #6
 800a012:	f7f6 f8e5 	bl	80001e0 <memchr>
 800a016:	2800      	cmp	r0, #0
 800a018:	d038      	beq.n	800a08c <_svfiprintf_r+0x1d8>
 800a01a:	4b23      	ldr	r3, [pc, #140]	; (800a0a8 <_svfiprintf_r+0x1f4>)
 800a01c:	bb1b      	cbnz	r3, 800a066 <_svfiprintf_r+0x1b2>
 800a01e:	9b03      	ldr	r3, [sp, #12]
 800a020:	3307      	adds	r3, #7
 800a022:	f023 0307 	bic.w	r3, r3, #7
 800a026:	3308      	adds	r3, #8
 800a028:	9303      	str	r3, [sp, #12]
 800a02a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a02c:	4433      	add	r3, r6
 800a02e:	9309      	str	r3, [sp, #36]	; 0x24
 800a030:	e767      	b.n	8009f02 <_svfiprintf_r+0x4e>
 800a032:	fb0c 3202 	mla	r2, ip, r2, r3
 800a036:	460c      	mov	r4, r1
 800a038:	2001      	movs	r0, #1
 800a03a:	e7a5      	b.n	8009f88 <_svfiprintf_r+0xd4>
 800a03c:	2300      	movs	r3, #0
 800a03e:	3401      	adds	r4, #1
 800a040:	9305      	str	r3, [sp, #20]
 800a042:	4619      	mov	r1, r3
 800a044:	f04f 0c0a 	mov.w	ip, #10
 800a048:	4620      	mov	r0, r4
 800a04a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a04e:	3a30      	subs	r2, #48	; 0x30
 800a050:	2a09      	cmp	r2, #9
 800a052:	d903      	bls.n	800a05c <_svfiprintf_r+0x1a8>
 800a054:	2b00      	cmp	r3, #0
 800a056:	d0c5      	beq.n	8009fe4 <_svfiprintf_r+0x130>
 800a058:	9105      	str	r1, [sp, #20]
 800a05a:	e7c3      	b.n	8009fe4 <_svfiprintf_r+0x130>
 800a05c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a060:	4604      	mov	r4, r0
 800a062:	2301      	movs	r3, #1
 800a064:	e7f0      	b.n	800a048 <_svfiprintf_r+0x194>
 800a066:	ab03      	add	r3, sp, #12
 800a068:	9300      	str	r3, [sp, #0]
 800a06a:	462a      	mov	r2, r5
 800a06c:	4b0f      	ldr	r3, [pc, #60]	; (800a0ac <_svfiprintf_r+0x1f8>)
 800a06e:	a904      	add	r1, sp, #16
 800a070:	4638      	mov	r0, r7
 800a072:	f7fc fa49 	bl	8006508 <_printf_float>
 800a076:	1c42      	adds	r2, r0, #1
 800a078:	4606      	mov	r6, r0
 800a07a:	d1d6      	bne.n	800a02a <_svfiprintf_r+0x176>
 800a07c:	89ab      	ldrh	r3, [r5, #12]
 800a07e:	065b      	lsls	r3, r3, #25
 800a080:	f53f af2c 	bmi.w	8009edc <_svfiprintf_r+0x28>
 800a084:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a086:	b01d      	add	sp, #116	; 0x74
 800a088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a08c:	ab03      	add	r3, sp, #12
 800a08e:	9300      	str	r3, [sp, #0]
 800a090:	462a      	mov	r2, r5
 800a092:	4b06      	ldr	r3, [pc, #24]	; (800a0ac <_svfiprintf_r+0x1f8>)
 800a094:	a904      	add	r1, sp, #16
 800a096:	4638      	mov	r0, r7
 800a098:	f7fc fcda 	bl	8006a50 <_printf_i>
 800a09c:	e7eb      	b.n	800a076 <_svfiprintf_r+0x1c2>
 800a09e:	bf00      	nop
 800a0a0:	0800b894 	.word	0x0800b894
 800a0a4:	0800b89e 	.word	0x0800b89e
 800a0a8:	08006509 	.word	0x08006509
 800a0ac:	08009dfd 	.word	0x08009dfd
 800a0b0:	0800b89a 	.word	0x0800b89a
 800a0b4:	00000000 	.word	0x00000000

0800a0b8 <nan>:
 800a0b8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a0c0 <nan+0x8>
 800a0bc:	4770      	bx	lr
 800a0be:	bf00      	nop
 800a0c0:	00000000 	.word	0x00000000
 800a0c4:	7ff80000 	.word	0x7ff80000

0800a0c8 <_sbrk_r>:
 800a0c8:	b538      	push	{r3, r4, r5, lr}
 800a0ca:	4d06      	ldr	r5, [pc, #24]	; (800a0e4 <_sbrk_r+0x1c>)
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	4604      	mov	r4, r0
 800a0d0:	4608      	mov	r0, r1
 800a0d2:	602b      	str	r3, [r5, #0]
 800a0d4:	f7f7 fee4 	bl	8001ea0 <_sbrk>
 800a0d8:	1c43      	adds	r3, r0, #1
 800a0da:	d102      	bne.n	800a0e2 <_sbrk_r+0x1a>
 800a0dc:	682b      	ldr	r3, [r5, #0]
 800a0de:	b103      	cbz	r3, 800a0e2 <_sbrk_r+0x1a>
 800a0e0:	6023      	str	r3, [r4, #0]
 800a0e2:	bd38      	pop	{r3, r4, r5, pc}
 800a0e4:	20000388 	.word	0x20000388

0800a0e8 <strncmp>:
 800a0e8:	b510      	push	{r4, lr}
 800a0ea:	b17a      	cbz	r2, 800a10c <strncmp+0x24>
 800a0ec:	4603      	mov	r3, r0
 800a0ee:	3901      	subs	r1, #1
 800a0f0:	1884      	adds	r4, r0, r2
 800a0f2:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a0f6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a0fa:	4290      	cmp	r0, r2
 800a0fc:	d101      	bne.n	800a102 <strncmp+0x1a>
 800a0fe:	42a3      	cmp	r3, r4
 800a100:	d101      	bne.n	800a106 <strncmp+0x1e>
 800a102:	1a80      	subs	r0, r0, r2
 800a104:	bd10      	pop	{r4, pc}
 800a106:	2800      	cmp	r0, #0
 800a108:	d1f3      	bne.n	800a0f2 <strncmp+0xa>
 800a10a:	e7fa      	b.n	800a102 <strncmp+0x1a>
 800a10c:	4610      	mov	r0, r2
 800a10e:	e7f9      	b.n	800a104 <strncmp+0x1c>

0800a110 <__ascii_wctomb>:
 800a110:	b149      	cbz	r1, 800a126 <__ascii_wctomb+0x16>
 800a112:	2aff      	cmp	r2, #255	; 0xff
 800a114:	bf85      	ittet	hi
 800a116:	238a      	movhi	r3, #138	; 0x8a
 800a118:	6003      	strhi	r3, [r0, #0]
 800a11a:	700a      	strbls	r2, [r1, #0]
 800a11c:	f04f 30ff 	movhi.w	r0, #4294967295
 800a120:	bf98      	it	ls
 800a122:	2001      	movls	r0, #1
 800a124:	4770      	bx	lr
 800a126:	4608      	mov	r0, r1
 800a128:	4770      	bx	lr
	...

0800a12c <__assert_func>:
 800a12c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a12e:	4614      	mov	r4, r2
 800a130:	461a      	mov	r2, r3
 800a132:	4b09      	ldr	r3, [pc, #36]	; (800a158 <__assert_func+0x2c>)
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	4605      	mov	r5, r0
 800a138:	68d8      	ldr	r0, [r3, #12]
 800a13a:	b14c      	cbz	r4, 800a150 <__assert_func+0x24>
 800a13c:	4b07      	ldr	r3, [pc, #28]	; (800a15c <__assert_func+0x30>)
 800a13e:	9100      	str	r1, [sp, #0]
 800a140:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a144:	4906      	ldr	r1, [pc, #24]	; (800a160 <__assert_func+0x34>)
 800a146:	462b      	mov	r3, r5
 800a148:	f000 f80e 	bl	800a168 <fiprintf>
 800a14c:	f000 fa8c 	bl	800a668 <abort>
 800a150:	4b04      	ldr	r3, [pc, #16]	; (800a164 <__assert_func+0x38>)
 800a152:	461c      	mov	r4, r3
 800a154:	e7f3      	b.n	800a13e <__assert_func+0x12>
 800a156:	bf00      	nop
 800a158:	2000000c 	.word	0x2000000c
 800a15c:	0800b8a5 	.word	0x0800b8a5
 800a160:	0800b8b2 	.word	0x0800b8b2
 800a164:	0800b8e0 	.word	0x0800b8e0

0800a168 <fiprintf>:
 800a168:	b40e      	push	{r1, r2, r3}
 800a16a:	b503      	push	{r0, r1, lr}
 800a16c:	4601      	mov	r1, r0
 800a16e:	ab03      	add	r3, sp, #12
 800a170:	4805      	ldr	r0, [pc, #20]	; (800a188 <fiprintf+0x20>)
 800a172:	f853 2b04 	ldr.w	r2, [r3], #4
 800a176:	6800      	ldr	r0, [r0, #0]
 800a178:	9301      	str	r3, [sp, #4]
 800a17a:	f000 f885 	bl	800a288 <_vfiprintf_r>
 800a17e:	b002      	add	sp, #8
 800a180:	f85d eb04 	ldr.w	lr, [sp], #4
 800a184:	b003      	add	sp, #12
 800a186:	4770      	bx	lr
 800a188:	2000000c 	.word	0x2000000c

0800a18c <memmove>:
 800a18c:	4288      	cmp	r0, r1
 800a18e:	b510      	push	{r4, lr}
 800a190:	eb01 0402 	add.w	r4, r1, r2
 800a194:	d902      	bls.n	800a19c <memmove+0x10>
 800a196:	4284      	cmp	r4, r0
 800a198:	4623      	mov	r3, r4
 800a19a:	d807      	bhi.n	800a1ac <memmove+0x20>
 800a19c:	1e43      	subs	r3, r0, #1
 800a19e:	42a1      	cmp	r1, r4
 800a1a0:	d008      	beq.n	800a1b4 <memmove+0x28>
 800a1a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a1a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a1aa:	e7f8      	b.n	800a19e <memmove+0x12>
 800a1ac:	4402      	add	r2, r0
 800a1ae:	4601      	mov	r1, r0
 800a1b0:	428a      	cmp	r2, r1
 800a1b2:	d100      	bne.n	800a1b6 <memmove+0x2a>
 800a1b4:	bd10      	pop	{r4, pc}
 800a1b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a1ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a1be:	e7f7      	b.n	800a1b0 <memmove+0x24>

0800a1c0 <__malloc_lock>:
 800a1c0:	4801      	ldr	r0, [pc, #4]	; (800a1c8 <__malloc_lock+0x8>)
 800a1c2:	f000 bc11 	b.w	800a9e8 <__retarget_lock_acquire_recursive>
 800a1c6:	bf00      	nop
 800a1c8:	2000038c 	.word	0x2000038c

0800a1cc <__malloc_unlock>:
 800a1cc:	4801      	ldr	r0, [pc, #4]	; (800a1d4 <__malloc_unlock+0x8>)
 800a1ce:	f000 bc0c 	b.w	800a9ea <__retarget_lock_release_recursive>
 800a1d2:	bf00      	nop
 800a1d4:	2000038c 	.word	0x2000038c

0800a1d8 <_realloc_r>:
 800a1d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1dc:	4680      	mov	r8, r0
 800a1de:	4614      	mov	r4, r2
 800a1e0:	460e      	mov	r6, r1
 800a1e2:	b921      	cbnz	r1, 800a1ee <_realloc_r+0x16>
 800a1e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a1e8:	4611      	mov	r1, r2
 800a1ea:	f7ff bd93 	b.w	8009d14 <_malloc_r>
 800a1ee:	b92a      	cbnz	r2, 800a1fc <_realloc_r+0x24>
 800a1f0:	f7ff fd24 	bl	8009c3c <_free_r>
 800a1f4:	4625      	mov	r5, r4
 800a1f6:	4628      	mov	r0, r5
 800a1f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1fc:	f000 fc5c 	bl	800aab8 <_malloc_usable_size_r>
 800a200:	4284      	cmp	r4, r0
 800a202:	4607      	mov	r7, r0
 800a204:	d802      	bhi.n	800a20c <_realloc_r+0x34>
 800a206:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a20a:	d812      	bhi.n	800a232 <_realloc_r+0x5a>
 800a20c:	4621      	mov	r1, r4
 800a20e:	4640      	mov	r0, r8
 800a210:	f7ff fd80 	bl	8009d14 <_malloc_r>
 800a214:	4605      	mov	r5, r0
 800a216:	2800      	cmp	r0, #0
 800a218:	d0ed      	beq.n	800a1f6 <_realloc_r+0x1e>
 800a21a:	42bc      	cmp	r4, r7
 800a21c:	4622      	mov	r2, r4
 800a21e:	4631      	mov	r1, r6
 800a220:	bf28      	it	cs
 800a222:	463a      	movcs	r2, r7
 800a224:	f7ff f824 	bl	8009270 <memcpy>
 800a228:	4631      	mov	r1, r6
 800a22a:	4640      	mov	r0, r8
 800a22c:	f7ff fd06 	bl	8009c3c <_free_r>
 800a230:	e7e1      	b.n	800a1f6 <_realloc_r+0x1e>
 800a232:	4635      	mov	r5, r6
 800a234:	e7df      	b.n	800a1f6 <_realloc_r+0x1e>

0800a236 <__sfputc_r>:
 800a236:	6893      	ldr	r3, [r2, #8]
 800a238:	3b01      	subs	r3, #1
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	b410      	push	{r4}
 800a23e:	6093      	str	r3, [r2, #8]
 800a240:	da08      	bge.n	800a254 <__sfputc_r+0x1e>
 800a242:	6994      	ldr	r4, [r2, #24]
 800a244:	42a3      	cmp	r3, r4
 800a246:	db01      	blt.n	800a24c <__sfputc_r+0x16>
 800a248:	290a      	cmp	r1, #10
 800a24a:	d103      	bne.n	800a254 <__sfputc_r+0x1e>
 800a24c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a250:	f000 b94a 	b.w	800a4e8 <__swbuf_r>
 800a254:	6813      	ldr	r3, [r2, #0]
 800a256:	1c58      	adds	r0, r3, #1
 800a258:	6010      	str	r0, [r2, #0]
 800a25a:	7019      	strb	r1, [r3, #0]
 800a25c:	4608      	mov	r0, r1
 800a25e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a262:	4770      	bx	lr

0800a264 <__sfputs_r>:
 800a264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a266:	4606      	mov	r6, r0
 800a268:	460f      	mov	r7, r1
 800a26a:	4614      	mov	r4, r2
 800a26c:	18d5      	adds	r5, r2, r3
 800a26e:	42ac      	cmp	r4, r5
 800a270:	d101      	bne.n	800a276 <__sfputs_r+0x12>
 800a272:	2000      	movs	r0, #0
 800a274:	e007      	b.n	800a286 <__sfputs_r+0x22>
 800a276:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a27a:	463a      	mov	r2, r7
 800a27c:	4630      	mov	r0, r6
 800a27e:	f7ff ffda 	bl	800a236 <__sfputc_r>
 800a282:	1c43      	adds	r3, r0, #1
 800a284:	d1f3      	bne.n	800a26e <__sfputs_r+0xa>
 800a286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a288 <_vfiprintf_r>:
 800a288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a28c:	460d      	mov	r5, r1
 800a28e:	b09d      	sub	sp, #116	; 0x74
 800a290:	4614      	mov	r4, r2
 800a292:	4698      	mov	r8, r3
 800a294:	4606      	mov	r6, r0
 800a296:	b118      	cbz	r0, 800a2a0 <_vfiprintf_r+0x18>
 800a298:	6983      	ldr	r3, [r0, #24]
 800a29a:	b90b      	cbnz	r3, 800a2a0 <_vfiprintf_r+0x18>
 800a29c:	f000 fb06 	bl	800a8ac <__sinit>
 800a2a0:	4b89      	ldr	r3, [pc, #548]	; (800a4c8 <_vfiprintf_r+0x240>)
 800a2a2:	429d      	cmp	r5, r3
 800a2a4:	d11b      	bne.n	800a2de <_vfiprintf_r+0x56>
 800a2a6:	6875      	ldr	r5, [r6, #4]
 800a2a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a2aa:	07d9      	lsls	r1, r3, #31
 800a2ac:	d405      	bmi.n	800a2ba <_vfiprintf_r+0x32>
 800a2ae:	89ab      	ldrh	r3, [r5, #12]
 800a2b0:	059a      	lsls	r2, r3, #22
 800a2b2:	d402      	bmi.n	800a2ba <_vfiprintf_r+0x32>
 800a2b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a2b6:	f000 fb97 	bl	800a9e8 <__retarget_lock_acquire_recursive>
 800a2ba:	89ab      	ldrh	r3, [r5, #12]
 800a2bc:	071b      	lsls	r3, r3, #28
 800a2be:	d501      	bpl.n	800a2c4 <_vfiprintf_r+0x3c>
 800a2c0:	692b      	ldr	r3, [r5, #16]
 800a2c2:	b9eb      	cbnz	r3, 800a300 <_vfiprintf_r+0x78>
 800a2c4:	4629      	mov	r1, r5
 800a2c6:	4630      	mov	r0, r6
 800a2c8:	f000 f960 	bl	800a58c <__swsetup_r>
 800a2cc:	b1c0      	cbz	r0, 800a300 <_vfiprintf_r+0x78>
 800a2ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a2d0:	07dc      	lsls	r4, r3, #31
 800a2d2:	d50e      	bpl.n	800a2f2 <_vfiprintf_r+0x6a>
 800a2d4:	f04f 30ff 	mov.w	r0, #4294967295
 800a2d8:	b01d      	add	sp, #116	; 0x74
 800a2da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2de:	4b7b      	ldr	r3, [pc, #492]	; (800a4cc <_vfiprintf_r+0x244>)
 800a2e0:	429d      	cmp	r5, r3
 800a2e2:	d101      	bne.n	800a2e8 <_vfiprintf_r+0x60>
 800a2e4:	68b5      	ldr	r5, [r6, #8]
 800a2e6:	e7df      	b.n	800a2a8 <_vfiprintf_r+0x20>
 800a2e8:	4b79      	ldr	r3, [pc, #484]	; (800a4d0 <_vfiprintf_r+0x248>)
 800a2ea:	429d      	cmp	r5, r3
 800a2ec:	bf08      	it	eq
 800a2ee:	68f5      	ldreq	r5, [r6, #12]
 800a2f0:	e7da      	b.n	800a2a8 <_vfiprintf_r+0x20>
 800a2f2:	89ab      	ldrh	r3, [r5, #12]
 800a2f4:	0598      	lsls	r0, r3, #22
 800a2f6:	d4ed      	bmi.n	800a2d4 <_vfiprintf_r+0x4c>
 800a2f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a2fa:	f000 fb76 	bl	800a9ea <__retarget_lock_release_recursive>
 800a2fe:	e7e9      	b.n	800a2d4 <_vfiprintf_r+0x4c>
 800a300:	2300      	movs	r3, #0
 800a302:	9309      	str	r3, [sp, #36]	; 0x24
 800a304:	2320      	movs	r3, #32
 800a306:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a30a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a30e:	2330      	movs	r3, #48	; 0x30
 800a310:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a4d4 <_vfiprintf_r+0x24c>
 800a314:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a318:	f04f 0901 	mov.w	r9, #1
 800a31c:	4623      	mov	r3, r4
 800a31e:	469a      	mov	sl, r3
 800a320:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a324:	b10a      	cbz	r2, 800a32a <_vfiprintf_r+0xa2>
 800a326:	2a25      	cmp	r2, #37	; 0x25
 800a328:	d1f9      	bne.n	800a31e <_vfiprintf_r+0x96>
 800a32a:	ebba 0b04 	subs.w	fp, sl, r4
 800a32e:	d00b      	beq.n	800a348 <_vfiprintf_r+0xc0>
 800a330:	465b      	mov	r3, fp
 800a332:	4622      	mov	r2, r4
 800a334:	4629      	mov	r1, r5
 800a336:	4630      	mov	r0, r6
 800a338:	f7ff ff94 	bl	800a264 <__sfputs_r>
 800a33c:	3001      	adds	r0, #1
 800a33e:	f000 80aa 	beq.w	800a496 <_vfiprintf_r+0x20e>
 800a342:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a344:	445a      	add	r2, fp
 800a346:	9209      	str	r2, [sp, #36]	; 0x24
 800a348:	f89a 3000 	ldrb.w	r3, [sl]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	f000 80a2 	beq.w	800a496 <_vfiprintf_r+0x20e>
 800a352:	2300      	movs	r3, #0
 800a354:	f04f 32ff 	mov.w	r2, #4294967295
 800a358:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a35c:	f10a 0a01 	add.w	sl, sl, #1
 800a360:	9304      	str	r3, [sp, #16]
 800a362:	9307      	str	r3, [sp, #28]
 800a364:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a368:	931a      	str	r3, [sp, #104]	; 0x68
 800a36a:	4654      	mov	r4, sl
 800a36c:	2205      	movs	r2, #5
 800a36e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a372:	4858      	ldr	r0, [pc, #352]	; (800a4d4 <_vfiprintf_r+0x24c>)
 800a374:	f7f5 ff34 	bl	80001e0 <memchr>
 800a378:	9a04      	ldr	r2, [sp, #16]
 800a37a:	b9d8      	cbnz	r0, 800a3b4 <_vfiprintf_r+0x12c>
 800a37c:	06d1      	lsls	r1, r2, #27
 800a37e:	bf44      	itt	mi
 800a380:	2320      	movmi	r3, #32
 800a382:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a386:	0713      	lsls	r3, r2, #28
 800a388:	bf44      	itt	mi
 800a38a:	232b      	movmi	r3, #43	; 0x2b
 800a38c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a390:	f89a 3000 	ldrb.w	r3, [sl]
 800a394:	2b2a      	cmp	r3, #42	; 0x2a
 800a396:	d015      	beq.n	800a3c4 <_vfiprintf_r+0x13c>
 800a398:	9a07      	ldr	r2, [sp, #28]
 800a39a:	4654      	mov	r4, sl
 800a39c:	2000      	movs	r0, #0
 800a39e:	f04f 0c0a 	mov.w	ip, #10
 800a3a2:	4621      	mov	r1, r4
 800a3a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a3a8:	3b30      	subs	r3, #48	; 0x30
 800a3aa:	2b09      	cmp	r3, #9
 800a3ac:	d94e      	bls.n	800a44c <_vfiprintf_r+0x1c4>
 800a3ae:	b1b0      	cbz	r0, 800a3de <_vfiprintf_r+0x156>
 800a3b0:	9207      	str	r2, [sp, #28]
 800a3b2:	e014      	b.n	800a3de <_vfiprintf_r+0x156>
 800a3b4:	eba0 0308 	sub.w	r3, r0, r8
 800a3b8:	fa09 f303 	lsl.w	r3, r9, r3
 800a3bc:	4313      	orrs	r3, r2
 800a3be:	9304      	str	r3, [sp, #16]
 800a3c0:	46a2      	mov	sl, r4
 800a3c2:	e7d2      	b.n	800a36a <_vfiprintf_r+0xe2>
 800a3c4:	9b03      	ldr	r3, [sp, #12]
 800a3c6:	1d19      	adds	r1, r3, #4
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	9103      	str	r1, [sp, #12]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	bfbb      	ittet	lt
 800a3d0:	425b      	neglt	r3, r3
 800a3d2:	f042 0202 	orrlt.w	r2, r2, #2
 800a3d6:	9307      	strge	r3, [sp, #28]
 800a3d8:	9307      	strlt	r3, [sp, #28]
 800a3da:	bfb8      	it	lt
 800a3dc:	9204      	strlt	r2, [sp, #16]
 800a3de:	7823      	ldrb	r3, [r4, #0]
 800a3e0:	2b2e      	cmp	r3, #46	; 0x2e
 800a3e2:	d10c      	bne.n	800a3fe <_vfiprintf_r+0x176>
 800a3e4:	7863      	ldrb	r3, [r4, #1]
 800a3e6:	2b2a      	cmp	r3, #42	; 0x2a
 800a3e8:	d135      	bne.n	800a456 <_vfiprintf_r+0x1ce>
 800a3ea:	9b03      	ldr	r3, [sp, #12]
 800a3ec:	1d1a      	adds	r2, r3, #4
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	9203      	str	r2, [sp, #12]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	bfb8      	it	lt
 800a3f6:	f04f 33ff 	movlt.w	r3, #4294967295
 800a3fa:	3402      	adds	r4, #2
 800a3fc:	9305      	str	r3, [sp, #20]
 800a3fe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a4e4 <_vfiprintf_r+0x25c>
 800a402:	7821      	ldrb	r1, [r4, #0]
 800a404:	2203      	movs	r2, #3
 800a406:	4650      	mov	r0, sl
 800a408:	f7f5 feea 	bl	80001e0 <memchr>
 800a40c:	b140      	cbz	r0, 800a420 <_vfiprintf_r+0x198>
 800a40e:	2340      	movs	r3, #64	; 0x40
 800a410:	eba0 000a 	sub.w	r0, r0, sl
 800a414:	fa03 f000 	lsl.w	r0, r3, r0
 800a418:	9b04      	ldr	r3, [sp, #16]
 800a41a:	4303      	orrs	r3, r0
 800a41c:	3401      	adds	r4, #1
 800a41e:	9304      	str	r3, [sp, #16]
 800a420:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a424:	482c      	ldr	r0, [pc, #176]	; (800a4d8 <_vfiprintf_r+0x250>)
 800a426:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a42a:	2206      	movs	r2, #6
 800a42c:	f7f5 fed8 	bl	80001e0 <memchr>
 800a430:	2800      	cmp	r0, #0
 800a432:	d03f      	beq.n	800a4b4 <_vfiprintf_r+0x22c>
 800a434:	4b29      	ldr	r3, [pc, #164]	; (800a4dc <_vfiprintf_r+0x254>)
 800a436:	bb1b      	cbnz	r3, 800a480 <_vfiprintf_r+0x1f8>
 800a438:	9b03      	ldr	r3, [sp, #12]
 800a43a:	3307      	adds	r3, #7
 800a43c:	f023 0307 	bic.w	r3, r3, #7
 800a440:	3308      	adds	r3, #8
 800a442:	9303      	str	r3, [sp, #12]
 800a444:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a446:	443b      	add	r3, r7
 800a448:	9309      	str	r3, [sp, #36]	; 0x24
 800a44a:	e767      	b.n	800a31c <_vfiprintf_r+0x94>
 800a44c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a450:	460c      	mov	r4, r1
 800a452:	2001      	movs	r0, #1
 800a454:	e7a5      	b.n	800a3a2 <_vfiprintf_r+0x11a>
 800a456:	2300      	movs	r3, #0
 800a458:	3401      	adds	r4, #1
 800a45a:	9305      	str	r3, [sp, #20]
 800a45c:	4619      	mov	r1, r3
 800a45e:	f04f 0c0a 	mov.w	ip, #10
 800a462:	4620      	mov	r0, r4
 800a464:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a468:	3a30      	subs	r2, #48	; 0x30
 800a46a:	2a09      	cmp	r2, #9
 800a46c:	d903      	bls.n	800a476 <_vfiprintf_r+0x1ee>
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d0c5      	beq.n	800a3fe <_vfiprintf_r+0x176>
 800a472:	9105      	str	r1, [sp, #20]
 800a474:	e7c3      	b.n	800a3fe <_vfiprintf_r+0x176>
 800a476:	fb0c 2101 	mla	r1, ip, r1, r2
 800a47a:	4604      	mov	r4, r0
 800a47c:	2301      	movs	r3, #1
 800a47e:	e7f0      	b.n	800a462 <_vfiprintf_r+0x1da>
 800a480:	ab03      	add	r3, sp, #12
 800a482:	9300      	str	r3, [sp, #0]
 800a484:	462a      	mov	r2, r5
 800a486:	4b16      	ldr	r3, [pc, #88]	; (800a4e0 <_vfiprintf_r+0x258>)
 800a488:	a904      	add	r1, sp, #16
 800a48a:	4630      	mov	r0, r6
 800a48c:	f7fc f83c 	bl	8006508 <_printf_float>
 800a490:	4607      	mov	r7, r0
 800a492:	1c78      	adds	r0, r7, #1
 800a494:	d1d6      	bne.n	800a444 <_vfiprintf_r+0x1bc>
 800a496:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a498:	07d9      	lsls	r1, r3, #31
 800a49a:	d405      	bmi.n	800a4a8 <_vfiprintf_r+0x220>
 800a49c:	89ab      	ldrh	r3, [r5, #12]
 800a49e:	059a      	lsls	r2, r3, #22
 800a4a0:	d402      	bmi.n	800a4a8 <_vfiprintf_r+0x220>
 800a4a2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a4a4:	f000 faa1 	bl	800a9ea <__retarget_lock_release_recursive>
 800a4a8:	89ab      	ldrh	r3, [r5, #12]
 800a4aa:	065b      	lsls	r3, r3, #25
 800a4ac:	f53f af12 	bmi.w	800a2d4 <_vfiprintf_r+0x4c>
 800a4b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a4b2:	e711      	b.n	800a2d8 <_vfiprintf_r+0x50>
 800a4b4:	ab03      	add	r3, sp, #12
 800a4b6:	9300      	str	r3, [sp, #0]
 800a4b8:	462a      	mov	r2, r5
 800a4ba:	4b09      	ldr	r3, [pc, #36]	; (800a4e0 <_vfiprintf_r+0x258>)
 800a4bc:	a904      	add	r1, sp, #16
 800a4be:	4630      	mov	r0, r6
 800a4c0:	f7fc fac6 	bl	8006a50 <_printf_i>
 800a4c4:	e7e4      	b.n	800a490 <_vfiprintf_r+0x208>
 800a4c6:	bf00      	nop
 800a4c8:	0800b904 	.word	0x0800b904
 800a4cc:	0800b924 	.word	0x0800b924
 800a4d0:	0800b8e4 	.word	0x0800b8e4
 800a4d4:	0800b894 	.word	0x0800b894
 800a4d8:	0800b89e 	.word	0x0800b89e
 800a4dc:	08006509 	.word	0x08006509
 800a4e0:	0800a265 	.word	0x0800a265
 800a4e4:	0800b89a 	.word	0x0800b89a

0800a4e8 <__swbuf_r>:
 800a4e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4ea:	460e      	mov	r6, r1
 800a4ec:	4614      	mov	r4, r2
 800a4ee:	4605      	mov	r5, r0
 800a4f0:	b118      	cbz	r0, 800a4fa <__swbuf_r+0x12>
 800a4f2:	6983      	ldr	r3, [r0, #24]
 800a4f4:	b90b      	cbnz	r3, 800a4fa <__swbuf_r+0x12>
 800a4f6:	f000 f9d9 	bl	800a8ac <__sinit>
 800a4fa:	4b21      	ldr	r3, [pc, #132]	; (800a580 <__swbuf_r+0x98>)
 800a4fc:	429c      	cmp	r4, r3
 800a4fe:	d12b      	bne.n	800a558 <__swbuf_r+0x70>
 800a500:	686c      	ldr	r4, [r5, #4]
 800a502:	69a3      	ldr	r3, [r4, #24]
 800a504:	60a3      	str	r3, [r4, #8]
 800a506:	89a3      	ldrh	r3, [r4, #12]
 800a508:	071a      	lsls	r2, r3, #28
 800a50a:	d52f      	bpl.n	800a56c <__swbuf_r+0x84>
 800a50c:	6923      	ldr	r3, [r4, #16]
 800a50e:	b36b      	cbz	r3, 800a56c <__swbuf_r+0x84>
 800a510:	6923      	ldr	r3, [r4, #16]
 800a512:	6820      	ldr	r0, [r4, #0]
 800a514:	1ac0      	subs	r0, r0, r3
 800a516:	6963      	ldr	r3, [r4, #20]
 800a518:	b2f6      	uxtb	r6, r6
 800a51a:	4283      	cmp	r3, r0
 800a51c:	4637      	mov	r7, r6
 800a51e:	dc04      	bgt.n	800a52a <__swbuf_r+0x42>
 800a520:	4621      	mov	r1, r4
 800a522:	4628      	mov	r0, r5
 800a524:	f000 f92e 	bl	800a784 <_fflush_r>
 800a528:	bb30      	cbnz	r0, 800a578 <__swbuf_r+0x90>
 800a52a:	68a3      	ldr	r3, [r4, #8]
 800a52c:	3b01      	subs	r3, #1
 800a52e:	60a3      	str	r3, [r4, #8]
 800a530:	6823      	ldr	r3, [r4, #0]
 800a532:	1c5a      	adds	r2, r3, #1
 800a534:	6022      	str	r2, [r4, #0]
 800a536:	701e      	strb	r6, [r3, #0]
 800a538:	6963      	ldr	r3, [r4, #20]
 800a53a:	3001      	adds	r0, #1
 800a53c:	4283      	cmp	r3, r0
 800a53e:	d004      	beq.n	800a54a <__swbuf_r+0x62>
 800a540:	89a3      	ldrh	r3, [r4, #12]
 800a542:	07db      	lsls	r3, r3, #31
 800a544:	d506      	bpl.n	800a554 <__swbuf_r+0x6c>
 800a546:	2e0a      	cmp	r6, #10
 800a548:	d104      	bne.n	800a554 <__swbuf_r+0x6c>
 800a54a:	4621      	mov	r1, r4
 800a54c:	4628      	mov	r0, r5
 800a54e:	f000 f919 	bl	800a784 <_fflush_r>
 800a552:	b988      	cbnz	r0, 800a578 <__swbuf_r+0x90>
 800a554:	4638      	mov	r0, r7
 800a556:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a558:	4b0a      	ldr	r3, [pc, #40]	; (800a584 <__swbuf_r+0x9c>)
 800a55a:	429c      	cmp	r4, r3
 800a55c:	d101      	bne.n	800a562 <__swbuf_r+0x7a>
 800a55e:	68ac      	ldr	r4, [r5, #8]
 800a560:	e7cf      	b.n	800a502 <__swbuf_r+0x1a>
 800a562:	4b09      	ldr	r3, [pc, #36]	; (800a588 <__swbuf_r+0xa0>)
 800a564:	429c      	cmp	r4, r3
 800a566:	bf08      	it	eq
 800a568:	68ec      	ldreq	r4, [r5, #12]
 800a56a:	e7ca      	b.n	800a502 <__swbuf_r+0x1a>
 800a56c:	4621      	mov	r1, r4
 800a56e:	4628      	mov	r0, r5
 800a570:	f000 f80c 	bl	800a58c <__swsetup_r>
 800a574:	2800      	cmp	r0, #0
 800a576:	d0cb      	beq.n	800a510 <__swbuf_r+0x28>
 800a578:	f04f 37ff 	mov.w	r7, #4294967295
 800a57c:	e7ea      	b.n	800a554 <__swbuf_r+0x6c>
 800a57e:	bf00      	nop
 800a580:	0800b904 	.word	0x0800b904
 800a584:	0800b924 	.word	0x0800b924
 800a588:	0800b8e4 	.word	0x0800b8e4

0800a58c <__swsetup_r>:
 800a58c:	4b32      	ldr	r3, [pc, #200]	; (800a658 <__swsetup_r+0xcc>)
 800a58e:	b570      	push	{r4, r5, r6, lr}
 800a590:	681d      	ldr	r5, [r3, #0]
 800a592:	4606      	mov	r6, r0
 800a594:	460c      	mov	r4, r1
 800a596:	b125      	cbz	r5, 800a5a2 <__swsetup_r+0x16>
 800a598:	69ab      	ldr	r3, [r5, #24]
 800a59a:	b913      	cbnz	r3, 800a5a2 <__swsetup_r+0x16>
 800a59c:	4628      	mov	r0, r5
 800a59e:	f000 f985 	bl	800a8ac <__sinit>
 800a5a2:	4b2e      	ldr	r3, [pc, #184]	; (800a65c <__swsetup_r+0xd0>)
 800a5a4:	429c      	cmp	r4, r3
 800a5a6:	d10f      	bne.n	800a5c8 <__swsetup_r+0x3c>
 800a5a8:	686c      	ldr	r4, [r5, #4]
 800a5aa:	89a3      	ldrh	r3, [r4, #12]
 800a5ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a5b0:	0719      	lsls	r1, r3, #28
 800a5b2:	d42c      	bmi.n	800a60e <__swsetup_r+0x82>
 800a5b4:	06dd      	lsls	r5, r3, #27
 800a5b6:	d411      	bmi.n	800a5dc <__swsetup_r+0x50>
 800a5b8:	2309      	movs	r3, #9
 800a5ba:	6033      	str	r3, [r6, #0]
 800a5bc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a5c0:	81a3      	strh	r3, [r4, #12]
 800a5c2:	f04f 30ff 	mov.w	r0, #4294967295
 800a5c6:	e03e      	b.n	800a646 <__swsetup_r+0xba>
 800a5c8:	4b25      	ldr	r3, [pc, #148]	; (800a660 <__swsetup_r+0xd4>)
 800a5ca:	429c      	cmp	r4, r3
 800a5cc:	d101      	bne.n	800a5d2 <__swsetup_r+0x46>
 800a5ce:	68ac      	ldr	r4, [r5, #8]
 800a5d0:	e7eb      	b.n	800a5aa <__swsetup_r+0x1e>
 800a5d2:	4b24      	ldr	r3, [pc, #144]	; (800a664 <__swsetup_r+0xd8>)
 800a5d4:	429c      	cmp	r4, r3
 800a5d6:	bf08      	it	eq
 800a5d8:	68ec      	ldreq	r4, [r5, #12]
 800a5da:	e7e6      	b.n	800a5aa <__swsetup_r+0x1e>
 800a5dc:	0758      	lsls	r0, r3, #29
 800a5de:	d512      	bpl.n	800a606 <__swsetup_r+0x7a>
 800a5e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a5e2:	b141      	cbz	r1, 800a5f6 <__swsetup_r+0x6a>
 800a5e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a5e8:	4299      	cmp	r1, r3
 800a5ea:	d002      	beq.n	800a5f2 <__swsetup_r+0x66>
 800a5ec:	4630      	mov	r0, r6
 800a5ee:	f7ff fb25 	bl	8009c3c <_free_r>
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	6363      	str	r3, [r4, #52]	; 0x34
 800a5f6:	89a3      	ldrh	r3, [r4, #12]
 800a5f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a5fc:	81a3      	strh	r3, [r4, #12]
 800a5fe:	2300      	movs	r3, #0
 800a600:	6063      	str	r3, [r4, #4]
 800a602:	6923      	ldr	r3, [r4, #16]
 800a604:	6023      	str	r3, [r4, #0]
 800a606:	89a3      	ldrh	r3, [r4, #12]
 800a608:	f043 0308 	orr.w	r3, r3, #8
 800a60c:	81a3      	strh	r3, [r4, #12]
 800a60e:	6923      	ldr	r3, [r4, #16]
 800a610:	b94b      	cbnz	r3, 800a626 <__swsetup_r+0x9a>
 800a612:	89a3      	ldrh	r3, [r4, #12]
 800a614:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a618:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a61c:	d003      	beq.n	800a626 <__swsetup_r+0x9a>
 800a61e:	4621      	mov	r1, r4
 800a620:	4630      	mov	r0, r6
 800a622:	f000 fa09 	bl	800aa38 <__smakebuf_r>
 800a626:	89a0      	ldrh	r0, [r4, #12]
 800a628:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a62c:	f010 0301 	ands.w	r3, r0, #1
 800a630:	d00a      	beq.n	800a648 <__swsetup_r+0xbc>
 800a632:	2300      	movs	r3, #0
 800a634:	60a3      	str	r3, [r4, #8]
 800a636:	6963      	ldr	r3, [r4, #20]
 800a638:	425b      	negs	r3, r3
 800a63a:	61a3      	str	r3, [r4, #24]
 800a63c:	6923      	ldr	r3, [r4, #16]
 800a63e:	b943      	cbnz	r3, 800a652 <__swsetup_r+0xc6>
 800a640:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a644:	d1ba      	bne.n	800a5bc <__swsetup_r+0x30>
 800a646:	bd70      	pop	{r4, r5, r6, pc}
 800a648:	0781      	lsls	r1, r0, #30
 800a64a:	bf58      	it	pl
 800a64c:	6963      	ldrpl	r3, [r4, #20]
 800a64e:	60a3      	str	r3, [r4, #8]
 800a650:	e7f4      	b.n	800a63c <__swsetup_r+0xb0>
 800a652:	2000      	movs	r0, #0
 800a654:	e7f7      	b.n	800a646 <__swsetup_r+0xba>
 800a656:	bf00      	nop
 800a658:	2000000c 	.word	0x2000000c
 800a65c:	0800b904 	.word	0x0800b904
 800a660:	0800b924 	.word	0x0800b924
 800a664:	0800b8e4 	.word	0x0800b8e4

0800a668 <abort>:
 800a668:	b508      	push	{r3, lr}
 800a66a:	2006      	movs	r0, #6
 800a66c:	f000 fa54 	bl	800ab18 <raise>
 800a670:	2001      	movs	r0, #1
 800a672:	f7f7 fb9d 	bl	8001db0 <_exit>
	...

0800a678 <__sflush_r>:
 800a678:	898a      	ldrh	r2, [r1, #12]
 800a67a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a67e:	4605      	mov	r5, r0
 800a680:	0710      	lsls	r0, r2, #28
 800a682:	460c      	mov	r4, r1
 800a684:	d458      	bmi.n	800a738 <__sflush_r+0xc0>
 800a686:	684b      	ldr	r3, [r1, #4]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	dc05      	bgt.n	800a698 <__sflush_r+0x20>
 800a68c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a68e:	2b00      	cmp	r3, #0
 800a690:	dc02      	bgt.n	800a698 <__sflush_r+0x20>
 800a692:	2000      	movs	r0, #0
 800a694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a698:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a69a:	2e00      	cmp	r6, #0
 800a69c:	d0f9      	beq.n	800a692 <__sflush_r+0x1a>
 800a69e:	2300      	movs	r3, #0
 800a6a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a6a4:	682f      	ldr	r7, [r5, #0]
 800a6a6:	602b      	str	r3, [r5, #0]
 800a6a8:	d032      	beq.n	800a710 <__sflush_r+0x98>
 800a6aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a6ac:	89a3      	ldrh	r3, [r4, #12]
 800a6ae:	075a      	lsls	r2, r3, #29
 800a6b0:	d505      	bpl.n	800a6be <__sflush_r+0x46>
 800a6b2:	6863      	ldr	r3, [r4, #4]
 800a6b4:	1ac0      	subs	r0, r0, r3
 800a6b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a6b8:	b10b      	cbz	r3, 800a6be <__sflush_r+0x46>
 800a6ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a6bc:	1ac0      	subs	r0, r0, r3
 800a6be:	2300      	movs	r3, #0
 800a6c0:	4602      	mov	r2, r0
 800a6c2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a6c4:	6a21      	ldr	r1, [r4, #32]
 800a6c6:	4628      	mov	r0, r5
 800a6c8:	47b0      	blx	r6
 800a6ca:	1c43      	adds	r3, r0, #1
 800a6cc:	89a3      	ldrh	r3, [r4, #12]
 800a6ce:	d106      	bne.n	800a6de <__sflush_r+0x66>
 800a6d0:	6829      	ldr	r1, [r5, #0]
 800a6d2:	291d      	cmp	r1, #29
 800a6d4:	d82c      	bhi.n	800a730 <__sflush_r+0xb8>
 800a6d6:	4a2a      	ldr	r2, [pc, #168]	; (800a780 <__sflush_r+0x108>)
 800a6d8:	40ca      	lsrs	r2, r1
 800a6da:	07d6      	lsls	r6, r2, #31
 800a6dc:	d528      	bpl.n	800a730 <__sflush_r+0xb8>
 800a6de:	2200      	movs	r2, #0
 800a6e0:	6062      	str	r2, [r4, #4]
 800a6e2:	04d9      	lsls	r1, r3, #19
 800a6e4:	6922      	ldr	r2, [r4, #16]
 800a6e6:	6022      	str	r2, [r4, #0]
 800a6e8:	d504      	bpl.n	800a6f4 <__sflush_r+0x7c>
 800a6ea:	1c42      	adds	r2, r0, #1
 800a6ec:	d101      	bne.n	800a6f2 <__sflush_r+0x7a>
 800a6ee:	682b      	ldr	r3, [r5, #0]
 800a6f0:	b903      	cbnz	r3, 800a6f4 <__sflush_r+0x7c>
 800a6f2:	6560      	str	r0, [r4, #84]	; 0x54
 800a6f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a6f6:	602f      	str	r7, [r5, #0]
 800a6f8:	2900      	cmp	r1, #0
 800a6fa:	d0ca      	beq.n	800a692 <__sflush_r+0x1a>
 800a6fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a700:	4299      	cmp	r1, r3
 800a702:	d002      	beq.n	800a70a <__sflush_r+0x92>
 800a704:	4628      	mov	r0, r5
 800a706:	f7ff fa99 	bl	8009c3c <_free_r>
 800a70a:	2000      	movs	r0, #0
 800a70c:	6360      	str	r0, [r4, #52]	; 0x34
 800a70e:	e7c1      	b.n	800a694 <__sflush_r+0x1c>
 800a710:	6a21      	ldr	r1, [r4, #32]
 800a712:	2301      	movs	r3, #1
 800a714:	4628      	mov	r0, r5
 800a716:	47b0      	blx	r6
 800a718:	1c41      	adds	r1, r0, #1
 800a71a:	d1c7      	bne.n	800a6ac <__sflush_r+0x34>
 800a71c:	682b      	ldr	r3, [r5, #0]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d0c4      	beq.n	800a6ac <__sflush_r+0x34>
 800a722:	2b1d      	cmp	r3, #29
 800a724:	d001      	beq.n	800a72a <__sflush_r+0xb2>
 800a726:	2b16      	cmp	r3, #22
 800a728:	d101      	bne.n	800a72e <__sflush_r+0xb6>
 800a72a:	602f      	str	r7, [r5, #0]
 800a72c:	e7b1      	b.n	800a692 <__sflush_r+0x1a>
 800a72e:	89a3      	ldrh	r3, [r4, #12]
 800a730:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a734:	81a3      	strh	r3, [r4, #12]
 800a736:	e7ad      	b.n	800a694 <__sflush_r+0x1c>
 800a738:	690f      	ldr	r7, [r1, #16]
 800a73a:	2f00      	cmp	r7, #0
 800a73c:	d0a9      	beq.n	800a692 <__sflush_r+0x1a>
 800a73e:	0793      	lsls	r3, r2, #30
 800a740:	680e      	ldr	r6, [r1, #0]
 800a742:	bf08      	it	eq
 800a744:	694b      	ldreq	r3, [r1, #20]
 800a746:	600f      	str	r7, [r1, #0]
 800a748:	bf18      	it	ne
 800a74a:	2300      	movne	r3, #0
 800a74c:	eba6 0807 	sub.w	r8, r6, r7
 800a750:	608b      	str	r3, [r1, #8]
 800a752:	f1b8 0f00 	cmp.w	r8, #0
 800a756:	dd9c      	ble.n	800a692 <__sflush_r+0x1a>
 800a758:	6a21      	ldr	r1, [r4, #32]
 800a75a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a75c:	4643      	mov	r3, r8
 800a75e:	463a      	mov	r2, r7
 800a760:	4628      	mov	r0, r5
 800a762:	47b0      	blx	r6
 800a764:	2800      	cmp	r0, #0
 800a766:	dc06      	bgt.n	800a776 <__sflush_r+0xfe>
 800a768:	89a3      	ldrh	r3, [r4, #12]
 800a76a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a76e:	81a3      	strh	r3, [r4, #12]
 800a770:	f04f 30ff 	mov.w	r0, #4294967295
 800a774:	e78e      	b.n	800a694 <__sflush_r+0x1c>
 800a776:	4407      	add	r7, r0
 800a778:	eba8 0800 	sub.w	r8, r8, r0
 800a77c:	e7e9      	b.n	800a752 <__sflush_r+0xda>
 800a77e:	bf00      	nop
 800a780:	20400001 	.word	0x20400001

0800a784 <_fflush_r>:
 800a784:	b538      	push	{r3, r4, r5, lr}
 800a786:	690b      	ldr	r3, [r1, #16]
 800a788:	4605      	mov	r5, r0
 800a78a:	460c      	mov	r4, r1
 800a78c:	b913      	cbnz	r3, 800a794 <_fflush_r+0x10>
 800a78e:	2500      	movs	r5, #0
 800a790:	4628      	mov	r0, r5
 800a792:	bd38      	pop	{r3, r4, r5, pc}
 800a794:	b118      	cbz	r0, 800a79e <_fflush_r+0x1a>
 800a796:	6983      	ldr	r3, [r0, #24]
 800a798:	b90b      	cbnz	r3, 800a79e <_fflush_r+0x1a>
 800a79a:	f000 f887 	bl	800a8ac <__sinit>
 800a79e:	4b14      	ldr	r3, [pc, #80]	; (800a7f0 <_fflush_r+0x6c>)
 800a7a0:	429c      	cmp	r4, r3
 800a7a2:	d11b      	bne.n	800a7dc <_fflush_r+0x58>
 800a7a4:	686c      	ldr	r4, [r5, #4]
 800a7a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d0ef      	beq.n	800a78e <_fflush_r+0xa>
 800a7ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a7b0:	07d0      	lsls	r0, r2, #31
 800a7b2:	d404      	bmi.n	800a7be <_fflush_r+0x3a>
 800a7b4:	0599      	lsls	r1, r3, #22
 800a7b6:	d402      	bmi.n	800a7be <_fflush_r+0x3a>
 800a7b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a7ba:	f000 f915 	bl	800a9e8 <__retarget_lock_acquire_recursive>
 800a7be:	4628      	mov	r0, r5
 800a7c0:	4621      	mov	r1, r4
 800a7c2:	f7ff ff59 	bl	800a678 <__sflush_r>
 800a7c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a7c8:	07da      	lsls	r2, r3, #31
 800a7ca:	4605      	mov	r5, r0
 800a7cc:	d4e0      	bmi.n	800a790 <_fflush_r+0xc>
 800a7ce:	89a3      	ldrh	r3, [r4, #12]
 800a7d0:	059b      	lsls	r3, r3, #22
 800a7d2:	d4dd      	bmi.n	800a790 <_fflush_r+0xc>
 800a7d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a7d6:	f000 f908 	bl	800a9ea <__retarget_lock_release_recursive>
 800a7da:	e7d9      	b.n	800a790 <_fflush_r+0xc>
 800a7dc:	4b05      	ldr	r3, [pc, #20]	; (800a7f4 <_fflush_r+0x70>)
 800a7de:	429c      	cmp	r4, r3
 800a7e0:	d101      	bne.n	800a7e6 <_fflush_r+0x62>
 800a7e2:	68ac      	ldr	r4, [r5, #8]
 800a7e4:	e7df      	b.n	800a7a6 <_fflush_r+0x22>
 800a7e6:	4b04      	ldr	r3, [pc, #16]	; (800a7f8 <_fflush_r+0x74>)
 800a7e8:	429c      	cmp	r4, r3
 800a7ea:	bf08      	it	eq
 800a7ec:	68ec      	ldreq	r4, [r5, #12]
 800a7ee:	e7da      	b.n	800a7a6 <_fflush_r+0x22>
 800a7f0:	0800b904 	.word	0x0800b904
 800a7f4:	0800b924 	.word	0x0800b924
 800a7f8:	0800b8e4 	.word	0x0800b8e4

0800a7fc <std>:
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	b510      	push	{r4, lr}
 800a800:	4604      	mov	r4, r0
 800a802:	e9c0 3300 	strd	r3, r3, [r0]
 800a806:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a80a:	6083      	str	r3, [r0, #8]
 800a80c:	8181      	strh	r1, [r0, #12]
 800a80e:	6643      	str	r3, [r0, #100]	; 0x64
 800a810:	81c2      	strh	r2, [r0, #14]
 800a812:	6183      	str	r3, [r0, #24]
 800a814:	4619      	mov	r1, r3
 800a816:	2208      	movs	r2, #8
 800a818:	305c      	adds	r0, #92	; 0x5c
 800a81a:	f7fb fdcd 	bl	80063b8 <memset>
 800a81e:	4b05      	ldr	r3, [pc, #20]	; (800a834 <std+0x38>)
 800a820:	6263      	str	r3, [r4, #36]	; 0x24
 800a822:	4b05      	ldr	r3, [pc, #20]	; (800a838 <std+0x3c>)
 800a824:	62a3      	str	r3, [r4, #40]	; 0x28
 800a826:	4b05      	ldr	r3, [pc, #20]	; (800a83c <std+0x40>)
 800a828:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a82a:	4b05      	ldr	r3, [pc, #20]	; (800a840 <std+0x44>)
 800a82c:	6224      	str	r4, [r4, #32]
 800a82e:	6323      	str	r3, [r4, #48]	; 0x30
 800a830:	bd10      	pop	{r4, pc}
 800a832:	bf00      	nop
 800a834:	0800ab51 	.word	0x0800ab51
 800a838:	0800ab73 	.word	0x0800ab73
 800a83c:	0800abab 	.word	0x0800abab
 800a840:	0800abcf 	.word	0x0800abcf

0800a844 <_cleanup_r>:
 800a844:	4901      	ldr	r1, [pc, #4]	; (800a84c <_cleanup_r+0x8>)
 800a846:	f000 b8af 	b.w	800a9a8 <_fwalk_reent>
 800a84a:	bf00      	nop
 800a84c:	0800a785 	.word	0x0800a785

0800a850 <__sfmoreglue>:
 800a850:	b570      	push	{r4, r5, r6, lr}
 800a852:	2268      	movs	r2, #104	; 0x68
 800a854:	1e4d      	subs	r5, r1, #1
 800a856:	4355      	muls	r5, r2
 800a858:	460e      	mov	r6, r1
 800a85a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a85e:	f7ff fa59 	bl	8009d14 <_malloc_r>
 800a862:	4604      	mov	r4, r0
 800a864:	b140      	cbz	r0, 800a878 <__sfmoreglue+0x28>
 800a866:	2100      	movs	r1, #0
 800a868:	e9c0 1600 	strd	r1, r6, [r0]
 800a86c:	300c      	adds	r0, #12
 800a86e:	60a0      	str	r0, [r4, #8]
 800a870:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a874:	f7fb fda0 	bl	80063b8 <memset>
 800a878:	4620      	mov	r0, r4
 800a87a:	bd70      	pop	{r4, r5, r6, pc}

0800a87c <__sfp_lock_acquire>:
 800a87c:	4801      	ldr	r0, [pc, #4]	; (800a884 <__sfp_lock_acquire+0x8>)
 800a87e:	f000 b8b3 	b.w	800a9e8 <__retarget_lock_acquire_recursive>
 800a882:	bf00      	nop
 800a884:	2000038d 	.word	0x2000038d

0800a888 <__sfp_lock_release>:
 800a888:	4801      	ldr	r0, [pc, #4]	; (800a890 <__sfp_lock_release+0x8>)
 800a88a:	f000 b8ae 	b.w	800a9ea <__retarget_lock_release_recursive>
 800a88e:	bf00      	nop
 800a890:	2000038d 	.word	0x2000038d

0800a894 <__sinit_lock_acquire>:
 800a894:	4801      	ldr	r0, [pc, #4]	; (800a89c <__sinit_lock_acquire+0x8>)
 800a896:	f000 b8a7 	b.w	800a9e8 <__retarget_lock_acquire_recursive>
 800a89a:	bf00      	nop
 800a89c:	2000038e 	.word	0x2000038e

0800a8a0 <__sinit_lock_release>:
 800a8a0:	4801      	ldr	r0, [pc, #4]	; (800a8a8 <__sinit_lock_release+0x8>)
 800a8a2:	f000 b8a2 	b.w	800a9ea <__retarget_lock_release_recursive>
 800a8a6:	bf00      	nop
 800a8a8:	2000038e 	.word	0x2000038e

0800a8ac <__sinit>:
 800a8ac:	b510      	push	{r4, lr}
 800a8ae:	4604      	mov	r4, r0
 800a8b0:	f7ff fff0 	bl	800a894 <__sinit_lock_acquire>
 800a8b4:	69a3      	ldr	r3, [r4, #24]
 800a8b6:	b11b      	cbz	r3, 800a8c0 <__sinit+0x14>
 800a8b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a8bc:	f7ff bff0 	b.w	800a8a0 <__sinit_lock_release>
 800a8c0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a8c4:	6523      	str	r3, [r4, #80]	; 0x50
 800a8c6:	4b13      	ldr	r3, [pc, #76]	; (800a914 <__sinit+0x68>)
 800a8c8:	4a13      	ldr	r2, [pc, #76]	; (800a918 <__sinit+0x6c>)
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	62a2      	str	r2, [r4, #40]	; 0x28
 800a8ce:	42a3      	cmp	r3, r4
 800a8d0:	bf04      	itt	eq
 800a8d2:	2301      	moveq	r3, #1
 800a8d4:	61a3      	streq	r3, [r4, #24]
 800a8d6:	4620      	mov	r0, r4
 800a8d8:	f000 f820 	bl	800a91c <__sfp>
 800a8dc:	6060      	str	r0, [r4, #4]
 800a8de:	4620      	mov	r0, r4
 800a8e0:	f000 f81c 	bl	800a91c <__sfp>
 800a8e4:	60a0      	str	r0, [r4, #8]
 800a8e6:	4620      	mov	r0, r4
 800a8e8:	f000 f818 	bl	800a91c <__sfp>
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	60e0      	str	r0, [r4, #12]
 800a8f0:	2104      	movs	r1, #4
 800a8f2:	6860      	ldr	r0, [r4, #4]
 800a8f4:	f7ff ff82 	bl	800a7fc <std>
 800a8f8:	68a0      	ldr	r0, [r4, #8]
 800a8fa:	2201      	movs	r2, #1
 800a8fc:	2109      	movs	r1, #9
 800a8fe:	f7ff ff7d 	bl	800a7fc <std>
 800a902:	68e0      	ldr	r0, [r4, #12]
 800a904:	2202      	movs	r2, #2
 800a906:	2112      	movs	r1, #18
 800a908:	f7ff ff78 	bl	800a7fc <std>
 800a90c:	2301      	movs	r3, #1
 800a90e:	61a3      	str	r3, [r4, #24]
 800a910:	e7d2      	b.n	800a8b8 <__sinit+0xc>
 800a912:	bf00      	nop
 800a914:	0800b4a0 	.word	0x0800b4a0
 800a918:	0800a845 	.word	0x0800a845

0800a91c <__sfp>:
 800a91c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a91e:	4607      	mov	r7, r0
 800a920:	f7ff ffac 	bl	800a87c <__sfp_lock_acquire>
 800a924:	4b1e      	ldr	r3, [pc, #120]	; (800a9a0 <__sfp+0x84>)
 800a926:	681e      	ldr	r6, [r3, #0]
 800a928:	69b3      	ldr	r3, [r6, #24]
 800a92a:	b913      	cbnz	r3, 800a932 <__sfp+0x16>
 800a92c:	4630      	mov	r0, r6
 800a92e:	f7ff ffbd 	bl	800a8ac <__sinit>
 800a932:	3648      	adds	r6, #72	; 0x48
 800a934:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a938:	3b01      	subs	r3, #1
 800a93a:	d503      	bpl.n	800a944 <__sfp+0x28>
 800a93c:	6833      	ldr	r3, [r6, #0]
 800a93e:	b30b      	cbz	r3, 800a984 <__sfp+0x68>
 800a940:	6836      	ldr	r6, [r6, #0]
 800a942:	e7f7      	b.n	800a934 <__sfp+0x18>
 800a944:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a948:	b9d5      	cbnz	r5, 800a980 <__sfp+0x64>
 800a94a:	4b16      	ldr	r3, [pc, #88]	; (800a9a4 <__sfp+0x88>)
 800a94c:	60e3      	str	r3, [r4, #12]
 800a94e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a952:	6665      	str	r5, [r4, #100]	; 0x64
 800a954:	f000 f847 	bl	800a9e6 <__retarget_lock_init_recursive>
 800a958:	f7ff ff96 	bl	800a888 <__sfp_lock_release>
 800a95c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a960:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a964:	6025      	str	r5, [r4, #0]
 800a966:	61a5      	str	r5, [r4, #24]
 800a968:	2208      	movs	r2, #8
 800a96a:	4629      	mov	r1, r5
 800a96c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a970:	f7fb fd22 	bl	80063b8 <memset>
 800a974:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a978:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a97c:	4620      	mov	r0, r4
 800a97e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a980:	3468      	adds	r4, #104	; 0x68
 800a982:	e7d9      	b.n	800a938 <__sfp+0x1c>
 800a984:	2104      	movs	r1, #4
 800a986:	4638      	mov	r0, r7
 800a988:	f7ff ff62 	bl	800a850 <__sfmoreglue>
 800a98c:	4604      	mov	r4, r0
 800a98e:	6030      	str	r0, [r6, #0]
 800a990:	2800      	cmp	r0, #0
 800a992:	d1d5      	bne.n	800a940 <__sfp+0x24>
 800a994:	f7ff ff78 	bl	800a888 <__sfp_lock_release>
 800a998:	230c      	movs	r3, #12
 800a99a:	603b      	str	r3, [r7, #0]
 800a99c:	e7ee      	b.n	800a97c <__sfp+0x60>
 800a99e:	bf00      	nop
 800a9a0:	0800b4a0 	.word	0x0800b4a0
 800a9a4:	ffff0001 	.word	0xffff0001

0800a9a8 <_fwalk_reent>:
 800a9a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a9ac:	4606      	mov	r6, r0
 800a9ae:	4688      	mov	r8, r1
 800a9b0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a9b4:	2700      	movs	r7, #0
 800a9b6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a9ba:	f1b9 0901 	subs.w	r9, r9, #1
 800a9be:	d505      	bpl.n	800a9cc <_fwalk_reent+0x24>
 800a9c0:	6824      	ldr	r4, [r4, #0]
 800a9c2:	2c00      	cmp	r4, #0
 800a9c4:	d1f7      	bne.n	800a9b6 <_fwalk_reent+0xe>
 800a9c6:	4638      	mov	r0, r7
 800a9c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9cc:	89ab      	ldrh	r3, [r5, #12]
 800a9ce:	2b01      	cmp	r3, #1
 800a9d0:	d907      	bls.n	800a9e2 <_fwalk_reent+0x3a>
 800a9d2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a9d6:	3301      	adds	r3, #1
 800a9d8:	d003      	beq.n	800a9e2 <_fwalk_reent+0x3a>
 800a9da:	4629      	mov	r1, r5
 800a9dc:	4630      	mov	r0, r6
 800a9de:	47c0      	blx	r8
 800a9e0:	4307      	orrs	r7, r0
 800a9e2:	3568      	adds	r5, #104	; 0x68
 800a9e4:	e7e9      	b.n	800a9ba <_fwalk_reent+0x12>

0800a9e6 <__retarget_lock_init_recursive>:
 800a9e6:	4770      	bx	lr

0800a9e8 <__retarget_lock_acquire_recursive>:
 800a9e8:	4770      	bx	lr

0800a9ea <__retarget_lock_release_recursive>:
 800a9ea:	4770      	bx	lr

0800a9ec <__swhatbuf_r>:
 800a9ec:	b570      	push	{r4, r5, r6, lr}
 800a9ee:	460e      	mov	r6, r1
 800a9f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9f4:	2900      	cmp	r1, #0
 800a9f6:	b096      	sub	sp, #88	; 0x58
 800a9f8:	4614      	mov	r4, r2
 800a9fa:	461d      	mov	r5, r3
 800a9fc:	da08      	bge.n	800aa10 <__swhatbuf_r+0x24>
 800a9fe:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800aa02:	2200      	movs	r2, #0
 800aa04:	602a      	str	r2, [r5, #0]
 800aa06:	061a      	lsls	r2, r3, #24
 800aa08:	d410      	bmi.n	800aa2c <__swhatbuf_r+0x40>
 800aa0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa0e:	e00e      	b.n	800aa2e <__swhatbuf_r+0x42>
 800aa10:	466a      	mov	r2, sp
 800aa12:	f000 f903 	bl	800ac1c <_fstat_r>
 800aa16:	2800      	cmp	r0, #0
 800aa18:	dbf1      	blt.n	800a9fe <__swhatbuf_r+0x12>
 800aa1a:	9a01      	ldr	r2, [sp, #4]
 800aa1c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800aa20:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800aa24:	425a      	negs	r2, r3
 800aa26:	415a      	adcs	r2, r3
 800aa28:	602a      	str	r2, [r5, #0]
 800aa2a:	e7ee      	b.n	800aa0a <__swhatbuf_r+0x1e>
 800aa2c:	2340      	movs	r3, #64	; 0x40
 800aa2e:	2000      	movs	r0, #0
 800aa30:	6023      	str	r3, [r4, #0]
 800aa32:	b016      	add	sp, #88	; 0x58
 800aa34:	bd70      	pop	{r4, r5, r6, pc}
	...

0800aa38 <__smakebuf_r>:
 800aa38:	898b      	ldrh	r3, [r1, #12]
 800aa3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aa3c:	079d      	lsls	r5, r3, #30
 800aa3e:	4606      	mov	r6, r0
 800aa40:	460c      	mov	r4, r1
 800aa42:	d507      	bpl.n	800aa54 <__smakebuf_r+0x1c>
 800aa44:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800aa48:	6023      	str	r3, [r4, #0]
 800aa4a:	6123      	str	r3, [r4, #16]
 800aa4c:	2301      	movs	r3, #1
 800aa4e:	6163      	str	r3, [r4, #20]
 800aa50:	b002      	add	sp, #8
 800aa52:	bd70      	pop	{r4, r5, r6, pc}
 800aa54:	ab01      	add	r3, sp, #4
 800aa56:	466a      	mov	r2, sp
 800aa58:	f7ff ffc8 	bl	800a9ec <__swhatbuf_r>
 800aa5c:	9900      	ldr	r1, [sp, #0]
 800aa5e:	4605      	mov	r5, r0
 800aa60:	4630      	mov	r0, r6
 800aa62:	f7ff f957 	bl	8009d14 <_malloc_r>
 800aa66:	b948      	cbnz	r0, 800aa7c <__smakebuf_r+0x44>
 800aa68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa6c:	059a      	lsls	r2, r3, #22
 800aa6e:	d4ef      	bmi.n	800aa50 <__smakebuf_r+0x18>
 800aa70:	f023 0303 	bic.w	r3, r3, #3
 800aa74:	f043 0302 	orr.w	r3, r3, #2
 800aa78:	81a3      	strh	r3, [r4, #12]
 800aa7a:	e7e3      	b.n	800aa44 <__smakebuf_r+0xc>
 800aa7c:	4b0d      	ldr	r3, [pc, #52]	; (800aab4 <__smakebuf_r+0x7c>)
 800aa7e:	62b3      	str	r3, [r6, #40]	; 0x28
 800aa80:	89a3      	ldrh	r3, [r4, #12]
 800aa82:	6020      	str	r0, [r4, #0]
 800aa84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa88:	81a3      	strh	r3, [r4, #12]
 800aa8a:	9b00      	ldr	r3, [sp, #0]
 800aa8c:	6163      	str	r3, [r4, #20]
 800aa8e:	9b01      	ldr	r3, [sp, #4]
 800aa90:	6120      	str	r0, [r4, #16]
 800aa92:	b15b      	cbz	r3, 800aaac <__smakebuf_r+0x74>
 800aa94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aa98:	4630      	mov	r0, r6
 800aa9a:	f000 f8d1 	bl	800ac40 <_isatty_r>
 800aa9e:	b128      	cbz	r0, 800aaac <__smakebuf_r+0x74>
 800aaa0:	89a3      	ldrh	r3, [r4, #12]
 800aaa2:	f023 0303 	bic.w	r3, r3, #3
 800aaa6:	f043 0301 	orr.w	r3, r3, #1
 800aaaa:	81a3      	strh	r3, [r4, #12]
 800aaac:	89a0      	ldrh	r0, [r4, #12]
 800aaae:	4305      	orrs	r5, r0
 800aab0:	81a5      	strh	r5, [r4, #12]
 800aab2:	e7cd      	b.n	800aa50 <__smakebuf_r+0x18>
 800aab4:	0800a845 	.word	0x0800a845

0800aab8 <_malloc_usable_size_r>:
 800aab8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aabc:	1f18      	subs	r0, r3, #4
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	bfbc      	itt	lt
 800aac2:	580b      	ldrlt	r3, [r1, r0]
 800aac4:	18c0      	addlt	r0, r0, r3
 800aac6:	4770      	bx	lr

0800aac8 <_raise_r>:
 800aac8:	291f      	cmp	r1, #31
 800aaca:	b538      	push	{r3, r4, r5, lr}
 800aacc:	4604      	mov	r4, r0
 800aace:	460d      	mov	r5, r1
 800aad0:	d904      	bls.n	800aadc <_raise_r+0x14>
 800aad2:	2316      	movs	r3, #22
 800aad4:	6003      	str	r3, [r0, #0]
 800aad6:	f04f 30ff 	mov.w	r0, #4294967295
 800aada:	bd38      	pop	{r3, r4, r5, pc}
 800aadc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800aade:	b112      	cbz	r2, 800aae6 <_raise_r+0x1e>
 800aae0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800aae4:	b94b      	cbnz	r3, 800aafa <_raise_r+0x32>
 800aae6:	4620      	mov	r0, r4
 800aae8:	f000 f830 	bl	800ab4c <_getpid_r>
 800aaec:	462a      	mov	r2, r5
 800aaee:	4601      	mov	r1, r0
 800aaf0:	4620      	mov	r0, r4
 800aaf2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aaf6:	f000 b817 	b.w	800ab28 <_kill_r>
 800aafa:	2b01      	cmp	r3, #1
 800aafc:	d00a      	beq.n	800ab14 <_raise_r+0x4c>
 800aafe:	1c59      	adds	r1, r3, #1
 800ab00:	d103      	bne.n	800ab0a <_raise_r+0x42>
 800ab02:	2316      	movs	r3, #22
 800ab04:	6003      	str	r3, [r0, #0]
 800ab06:	2001      	movs	r0, #1
 800ab08:	e7e7      	b.n	800aada <_raise_r+0x12>
 800ab0a:	2400      	movs	r4, #0
 800ab0c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ab10:	4628      	mov	r0, r5
 800ab12:	4798      	blx	r3
 800ab14:	2000      	movs	r0, #0
 800ab16:	e7e0      	b.n	800aada <_raise_r+0x12>

0800ab18 <raise>:
 800ab18:	4b02      	ldr	r3, [pc, #8]	; (800ab24 <raise+0xc>)
 800ab1a:	4601      	mov	r1, r0
 800ab1c:	6818      	ldr	r0, [r3, #0]
 800ab1e:	f7ff bfd3 	b.w	800aac8 <_raise_r>
 800ab22:	bf00      	nop
 800ab24:	2000000c 	.word	0x2000000c

0800ab28 <_kill_r>:
 800ab28:	b538      	push	{r3, r4, r5, lr}
 800ab2a:	4d07      	ldr	r5, [pc, #28]	; (800ab48 <_kill_r+0x20>)
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	4604      	mov	r4, r0
 800ab30:	4608      	mov	r0, r1
 800ab32:	4611      	mov	r1, r2
 800ab34:	602b      	str	r3, [r5, #0]
 800ab36:	f7f7 f92b 	bl	8001d90 <_kill>
 800ab3a:	1c43      	adds	r3, r0, #1
 800ab3c:	d102      	bne.n	800ab44 <_kill_r+0x1c>
 800ab3e:	682b      	ldr	r3, [r5, #0]
 800ab40:	b103      	cbz	r3, 800ab44 <_kill_r+0x1c>
 800ab42:	6023      	str	r3, [r4, #0]
 800ab44:	bd38      	pop	{r3, r4, r5, pc}
 800ab46:	bf00      	nop
 800ab48:	20000388 	.word	0x20000388

0800ab4c <_getpid_r>:
 800ab4c:	f7f7 b918 	b.w	8001d80 <_getpid>

0800ab50 <__sread>:
 800ab50:	b510      	push	{r4, lr}
 800ab52:	460c      	mov	r4, r1
 800ab54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab58:	f000 f894 	bl	800ac84 <_read_r>
 800ab5c:	2800      	cmp	r0, #0
 800ab5e:	bfab      	itete	ge
 800ab60:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ab62:	89a3      	ldrhlt	r3, [r4, #12]
 800ab64:	181b      	addge	r3, r3, r0
 800ab66:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ab6a:	bfac      	ite	ge
 800ab6c:	6563      	strge	r3, [r4, #84]	; 0x54
 800ab6e:	81a3      	strhlt	r3, [r4, #12]
 800ab70:	bd10      	pop	{r4, pc}

0800ab72 <__swrite>:
 800ab72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab76:	461f      	mov	r7, r3
 800ab78:	898b      	ldrh	r3, [r1, #12]
 800ab7a:	05db      	lsls	r3, r3, #23
 800ab7c:	4605      	mov	r5, r0
 800ab7e:	460c      	mov	r4, r1
 800ab80:	4616      	mov	r6, r2
 800ab82:	d505      	bpl.n	800ab90 <__swrite+0x1e>
 800ab84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab88:	2302      	movs	r3, #2
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	f000 f868 	bl	800ac60 <_lseek_r>
 800ab90:	89a3      	ldrh	r3, [r4, #12]
 800ab92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ab9a:	81a3      	strh	r3, [r4, #12]
 800ab9c:	4632      	mov	r2, r6
 800ab9e:	463b      	mov	r3, r7
 800aba0:	4628      	mov	r0, r5
 800aba2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aba6:	f000 b817 	b.w	800abd8 <_write_r>

0800abaa <__sseek>:
 800abaa:	b510      	push	{r4, lr}
 800abac:	460c      	mov	r4, r1
 800abae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abb2:	f000 f855 	bl	800ac60 <_lseek_r>
 800abb6:	1c43      	adds	r3, r0, #1
 800abb8:	89a3      	ldrh	r3, [r4, #12]
 800abba:	bf15      	itete	ne
 800abbc:	6560      	strne	r0, [r4, #84]	; 0x54
 800abbe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800abc2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800abc6:	81a3      	strheq	r3, [r4, #12]
 800abc8:	bf18      	it	ne
 800abca:	81a3      	strhne	r3, [r4, #12]
 800abcc:	bd10      	pop	{r4, pc}

0800abce <__sclose>:
 800abce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abd2:	f000 b813 	b.w	800abfc <_close_r>
	...

0800abd8 <_write_r>:
 800abd8:	b538      	push	{r3, r4, r5, lr}
 800abda:	4d07      	ldr	r5, [pc, #28]	; (800abf8 <_write_r+0x20>)
 800abdc:	4604      	mov	r4, r0
 800abde:	4608      	mov	r0, r1
 800abe0:	4611      	mov	r1, r2
 800abe2:	2200      	movs	r2, #0
 800abe4:	602a      	str	r2, [r5, #0]
 800abe6:	461a      	mov	r2, r3
 800abe8:	f7f7 f909 	bl	8001dfe <_write>
 800abec:	1c43      	adds	r3, r0, #1
 800abee:	d102      	bne.n	800abf6 <_write_r+0x1e>
 800abf0:	682b      	ldr	r3, [r5, #0]
 800abf2:	b103      	cbz	r3, 800abf6 <_write_r+0x1e>
 800abf4:	6023      	str	r3, [r4, #0]
 800abf6:	bd38      	pop	{r3, r4, r5, pc}
 800abf8:	20000388 	.word	0x20000388

0800abfc <_close_r>:
 800abfc:	b538      	push	{r3, r4, r5, lr}
 800abfe:	4d06      	ldr	r5, [pc, #24]	; (800ac18 <_close_r+0x1c>)
 800ac00:	2300      	movs	r3, #0
 800ac02:	4604      	mov	r4, r0
 800ac04:	4608      	mov	r0, r1
 800ac06:	602b      	str	r3, [r5, #0]
 800ac08:	f7f7 f915 	bl	8001e36 <_close>
 800ac0c:	1c43      	adds	r3, r0, #1
 800ac0e:	d102      	bne.n	800ac16 <_close_r+0x1a>
 800ac10:	682b      	ldr	r3, [r5, #0]
 800ac12:	b103      	cbz	r3, 800ac16 <_close_r+0x1a>
 800ac14:	6023      	str	r3, [r4, #0]
 800ac16:	bd38      	pop	{r3, r4, r5, pc}
 800ac18:	20000388 	.word	0x20000388

0800ac1c <_fstat_r>:
 800ac1c:	b538      	push	{r3, r4, r5, lr}
 800ac1e:	4d07      	ldr	r5, [pc, #28]	; (800ac3c <_fstat_r+0x20>)
 800ac20:	2300      	movs	r3, #0
 800ac22:	4604      	mov	r4, r0
 800ac24:	4608      	mov	r0, r1
 800ac26:	4611      	mov	r1, r2
 800ac28:	602b      	str	r3, [r5, #0]
 800ac2a:	f7f7 f910 	bl	8001e4e <_fstat>
 800ac2e:	1c43      	adds	r3, r0, #1
 800ac30:	d102      	bne.n	800ac38 <_fstat_r+0x1c>
 800ac32:	682b      	ldr	r3, [r5, #0]
 800ac34:	b103      	cbz	r3, 800ac38 <_fstat_r+0x1c>
 800ac36:	6023      	str	r3, [r4, #0]
 800ac38:	bd38      	pop	{r3, r4, r5, pc}
 800ac3a:	bf00      	nop
 800ac3c:	20000388 	.word	0x20000388

0800ac40 <_isatty_r>:
 800ac40:	b538      	push	{r3, r4, r5, lr}
 800ac42:	4d06      	ldr	r5, [pc, #24]	; (800ac5c <_isatty_r+0x1c>)
 800ac44:	2300      	movs	r3, #0
 800ac46:	4604      	mov	r4, r0
 800ac48:	4608      	mov	r0, r1
 800ac4a:	602b      	str	r3, [r5, #0]
 800ac4c:	f7f7 f90f 	bl	8001e6e <_isatty>
 800ac50:	1c43      	adds	r3, r0, #1
 800ac52:	d102      	bne.n	800ac5a <_isatty_r+0x1a>
 800ac54:	682b      	ldr	r3, [r5, #0]
 800ac56:	b103      	cbz	r3, 800ac5a <_isatty_r+0x1a>
 800ac58:	6023      	str	r3, [r4, #0]
 800ac5a:	bd38      	pop	{r3, r4, r5, pc}
 800ac5c:	20000388 	.word	0x20000388

0800ac60 <_lseek_r>:
 800ac60:	b538      	push	{r3, r4, r5, lr}
 800ac62:	4d07      	ldr	r5, [pc, #28]	; (800ac80 <_lseek_r+0x20>)
 800ac64:	4604      	mov	r4, r0
 800ac66:	4608      	mov	r0, r1
 800ac68:	4611      	mov	r1, r2
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	602a      	str	r2, [r5, #0]
 800ac6e:	461a      	mov	r2, r3
 800ac70:	f7f7 f908 	bl	8001e84 <_lseek>
 800ac74:	1c43      	adds	r3, r0, #1
 800ac76:	d102      	bne.n	800ac7e <_lseek_r+0x1e>
 800ac78:	682b      	ldr	r3, [r5, #0]
 800ac7a:	b103      	cbz	r3, 800ac7e <_lseek_r+0x1e>
 800ac7c:	6023      	str	r3, [r4, #0]
 800ac7e:	bd38      	pop	{r3, r4, r5, pc}
 800ac80:	20000388 	.word	0x20000388

0800ac84 <_read_r>:
 800ac84:	b538      	push	{r3, r4, r5, lr}
 800ac86:	4d07      	ldr	r5, [pc, #28]	; (800aca4 <_read_r+0x20>)
 800ac88:	4604      	mov	r4, r0
 800ac8a:	4608      	mov	r0, r1
 800ac8c:	4611      	mov	r1, r2
 800ac8e:	2200      	movs	r2, #0
 800ac90:	602a      	str	r2, [r5, #0]
 800ac92:	461a      	mov	r2, r3
 800ac94:	f7f7 f896 	bl	8001dc4 <_read>
 800ac98:	1c43      	adds	r3, r0, #1
 800ac9a:	d102      	bne.n	800aca2 <_read_r+0x1e>
 800ac9c:	682b      	ldr	r3, [r5, #0]
 800ac9e:	b103      	cbz	r3, 800aca2 <_read_r+0x1e>
 800aca0:	6023      	str	r3, [r4, #0]
 800aca2:	bd38      	pop	{r3, r4, r5, pc}
 800aca4:	20000388 	.word	0x20000388

0800aca8 <powf>:
 800aca8:	b508      	push	{r3, lr}
 800acaa:	ed2d 8b04 	vpush	{d8-d9}
 800acae:	eeb0 8a60 	vmov.f32	s16, s1
 800acb2:	eeb0 9a40 	vmov.f32	s18, s0
 800acb6:	f000 f84f 	bl	800ad58 <__ieee754_powf>
 800acba:	eeb4 8a48 	vcmp.f32	s16, s16
 800acbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acc2:	eef0 8a40 	vmov.f32	s17, s0
 800acc6:	d63e      	bvs.n	800ad46 <powf+0x9e>
 800acc8:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800accc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acd0:	d112      	bne.n	800acf8 <powf+0x50>
 800acd2:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800acd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acda:	d039      	beq.n	800ad50 <powf+0xa8>
 800acdc:	eeb0 0a48 	vmov.f32	s0, s16
 800ace0:	f000 fb35 	bl	800b34e <finitef>
 800ace4:	b378      	cbz	r0, 800ad46 <powf+0x9e>
 800ace6:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800acea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acee:	d52a      	bpl.n	800ad46 <powf+0x9e>
 800acf0:	f7fb fb38 	bl	8006364 <__errno>
 800acf4:	2322      	movs	r3, #34	; 0x22
 800acf6:	e014      	b.n	800ad22 <powf+0x7a>
 800acf8:	f000 fb29 	bl	800b34e <finitef>
 800acfc:	b998      	cbnz	r0, 800ad26 <powf+0x7e>
 800acfe:	eeb0 0a49 	vmov.f32	s0, s18
 800ad02:	f000 fb24 	bl	800b34e <finitef>
 800ad06:	b170      	cbz	r0, 800ad26 <powf+0x7e>
 800ad08:	eeb0 0a48 	vmov.f32	s0, s16
 800ad0c:	f000 fb1f 	bl	800b34e <finitef>
 800ad10:	b148      	cbz	r0, 800ad26 <powf+0x7e>
 800ad12:	eef4 8a68 	vcmp.f32	s17, s17
 800ad16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad1a:	d7e9      	bvc.n	800acf0 <powf+0x48>
 800ad1c:	f7fb fb22 	bl	8006364 <__errno>
 800ad20:	2321      	movs	r3, #33	; 0x21
 800ad22:	6003      	str	r3, [r0, #0]
 800ad24:	e00f      	b.n	800ad46 <powf+0x9e>
 800ad26:	eef5 8a40 	vcmp.f32	s17, #0.0
 800ad2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad2e:	d10a      	bne.n	800ad46 <powf+0x9e>
 800ad30:	eeb0 0a49 	vmov.f32	s0, s18
 800ad34:	f000 fb0b 	bl	800b34e <finitef>
 800ad38:	b128      	cbz	r0, 800ad46 <powf+0x9e>
 800ad3a:	eeb0 0a48 	vmov.f32	s0, s16
 800ad3e:	f000 fb06 	bl	800b34e <finitef>
 800ad42:	2800      	cmp	r0, #0
 800ad44:	d1d4      	bne.n	800acf0 <powf+0x48>
 800ad46:	eeb0 0a68 	vmov.f32	s0, s17
 800ad4a:	ecbd 8b04 	vpop	{d8-d9}
 800ad4e:	bd08      	pop	{r3, pc}
 800ad50:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800ad54:	e7f7      	b.n	800ad46 <powf+0x9e>
	...

0800ad58 <__ieee754_powf>:
 800ad58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad5c:	ee10 4a90 	vmov	r4, s1
 800ad60:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 800ad64:	ed2d 8b02 	vpush	{d8}
 800ad68:	ee10 6a10 	vmov	r6, s0
 800ad6c:	eeb0 8a40 	vmov.f32	s16, s0
 800ad70:	eef0 8a60 	vmov.f32	s17, s1
 800ad74:	d10c      	bne.n	800ad90 <__ieee754_powf+0x38>
 800ad76:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 800ad7a:	0076      	lsls	r6, r6, #1
 800ad7c:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 800ad80:	f240 8296 	bls.w	800b2b0 <__ieee754_powf+0x558>
 800ad84:	ee38 0a28 	vadd.f32	s0, s16, s17
 800ad88:	ecbd 8b02 	vpop	{d8}
 800ad8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad90:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800ad94:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800ad98:	dcf4      	bgt.n	800ad84 <__ieee754_powf+0x2c>
 800ad9a:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800ad9e:	dd08      	ble.n	800adb2 <__ieee754_powf+0x5a>
 800ada0:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 800ada4:	d1ee      	bne.n	800ad84 <__ieee754_powf+0x2c>
 800ada6:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 800adaa:	0064      	lsls	r4, r4, #1
 800adac:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 800adb0:	e7e6      	b.n	800ad80 <__ieee754_powf+0x28>
 800adb2:	2e00      	cmp	r6, #0
 800adb4:	da20      	bge.n	800adf8 <__ieee754_powf+0xa0>
 800adb6:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 800adba:	da2d      	bge.n	800ae18 <__ieee754_powf+0xc0>
 800adbc:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800adc0:	f2c0 827f 	blt.w	800b2c2 <__ieee754_powf+0x56a>
 800adc4:	ea4f 53e8 	mov.w	r3, r8, asr #23
 800adc8:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800adcc:	fa48 f703 	asr.w	r7, r8, r3
 800add0:	fa07 f303 	lsl.w	r3, r7, r3
 800add4:	4543      	cmp	r3, r8
 800add6:	f040 8274 	bne.w	800b2c2 <__ieee754_powf+0x56a>
 800adda:	f007 0701 	and.w	r7, r7, #1
 800adde:	f1c7 0702 	rsb	r7, r7, #2
 800ade2:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800ade6:	d11f      	bne.n	800ae28 <__ieee754_powf+0xd0>
 800ade8:	2c00      	cmp	r4, #0
 800adea:	f280 8267 	bge.w	800b2bc <__ieee754_powf+0x564>
 800adee:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800adf2:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800adf6:	e7c7      	b.n	800ad88 <__ieee754_powf+0x30>
 800adf8:	2700      	movs	r7, #0
 800adfa:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800adfe:	d1f0      	bne.n	800ade2 <__ieee754_powf+0x8a>
 800ae00:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 800ae04:	f000 8254 	beq.w	800b2b0 <__ieee754_powf+0x558>
 800ae08:	dd08      	ble.n	800ae1c <__ieee754_powf+0xc4>
 800ae0a:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 800b114 <__ieee754_powf+0x3bc>
 800ae0e:	2c00      	cmp	r4, #0
 800ae10:	bfa8      	it	ge
 800ae12:	eeb0 0a68 	vmovge.f32	s0, s17
 800ae16:	e7b7      	b.n	800ad88 <__ieee754_powf+0x30>
 800ae18:	2702      	movs	r7, #2
 800ae1a:	e7ee      	b.n	800adfa <__ieee754_powf+0xa2>
 800ae1c:	2c00      	cmp	r4, #0
 800ae1e:	f280 824a 	bge.w	800b2b6 <__ieee754_powf+0x55e>
 800ae22:	eeb1 0a68 	vneg.f32	s0, s17
 800ae26:	e7af      	b.n	800ad88 <__ieee754_powf+0x30>
 800ae28:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800ae2c:	d102      	bne.n	800ae34 <__ieee754_powf+0xdc>
 800ae2e:	ee28 0a08 	vmul.f32	s0, s16, s16
 800ae32:	e7a9      	b.n	800ad88 <__ieee754_powf+0x30>
 800ae34:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800ae38:	eeb0 0a48 	vmov.f32	s0, s16
 800ae3c:	d107      	bne.n	800ae4e <__ieee754_powf+0xf6>
 800ae3e:	2e00      	cmp	r6, #0
 800ae40:	db05      	blt.n	800ae4e <__ieee754_powf+0xf6>
 800ae42:	ecbd 8b02 	vpop	{d8}
 800ae46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae4a:	f000 ba53 	b.w	800b2f4 <__ieee754_sqrtf>
 800ae4e:	f000 fa77 	bl	800b340 <fabsf>
 800ae52:	b125      	cbz	r5, 800ae5e <__ieee754_powf+0x106>
 800ae54:	f026 4340 	bic.w	r3, r6, #3221225472	; 0xc0000000
 800ae58:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800ae5c:	d116      	bne.n	800ae8c <__ieee754_powf+0x134>
 800ae5e:	2c00      	cmp	r4, #0
 800ae60:	bfbc      	itt	lt
 800ae62:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800ae66:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800ae6a:	2e00      	cmp	r6, #0
 800ae6c:	da8c      	bge.n	800ad88 <__ieee754_powf+0x30>
 800ae6e:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 800ae72:	ea55 0307 	orrs.w	r3, r5, r7
 800ae76:	d104      	bne.n	800ae82 <__ieee754_powf+0x12a>
 800ae78:	ee70 7a40 	vsub.f32	s15, s0, s0
 800ae7c:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800ae80:	e782      	b.n	800ad88 <__ieee754_powf+0x30>
 800ae82:	2f01      	cmp	r7, #1
 800ae84:	d180      	bne.n	800ad88 <__ieee754_powf+0x30>
 800ae86:	eeb1 0a40 	vneg.f32	s0, s0
 800ae8a:	e77d      	b.n	800ad88 <__ieee754_powf+0x30>
 800ae8c:	0ff0      	lsrs	r0, r6, #31
 800ae8e:	3801      	subs	r0, #1
 800ae90:	ea57 0300 	orrs.w	r3, r7, r0
 800ae94:	d104      	bne.n	800aea0 <__ieee754_powf+0x148>
 800ae96:	ee38 8a48 	vsub.f32	s16, s16, s16
 800ae9a:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800ae9e:	e773      	b.n	800ad88 <__ieee754_powf+0x30>
 800aea0:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 800aea4:	dd74      	ble.n	800af90 <__ieee754_powf+0x238>
 800aea6:	4b9c      	ldr	r3, [pc, #624]	; (800b118 <__ieee754_powf+0x3c0>)
 800aea8:	429d      	cmp	r5, r3
 800aeaa:	dc08      	bgt.n	800aebe <__ieee754_powf+0x166>
 800aeac:	2c00      	cmp	r4, #0
 800aeae:	da0b      	bge.n	800aec8 <__ieee754_powf+0x170>
 800aeb0:	2000      	movs	r0, #0
 800aeb2:	ecbd 8b02 	vpop	{d8}
 800aeb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aeba:	f000 ba3b 	b.w	800b334 <__math_oflowf>
 800aebe:	4b97      	ldr	r3, [pc, #604]	; (800b11c <__ieee754_powf+0x3c4>)
 800aec0:	429d      	cmp	r5, r3
 800aec2:	dd08      	ble.n	800aed6 <__ieee754_powf+0x17e>
 800aec4:	2c00      	cmp	r4, #0
 800aec6:	dcf3      	bgt.n	800aeb0 <__ieee754_powf+0x158>
 800aec8:	2000      	movs	r0, #0
 800aeca:	ecbd 8b02 	vpop	{d8}
 800aece:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aed2:	f000 ba29 	b.w	800b328 <__math_uflowf>
 800aed6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800aeda:	ee30 0a67 	vsub.f32	s0, s0, s15
 800aede:	eddf 6a90 	vldr	s13, [pc, #576]	; 800b120 <__ieee754_powf+0x3c8>
 800aee2:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800aee6:	eee0 6a67 	vfms.f32	s13, s0, s15
 800aeea:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800aeee:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800aef2:	ee20 7a00 	vmul.f32	s14, s0, s0
 800aef6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aefa:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800b124 <__ieee754_powf+0x3cc>
 800aefe:	ee67 7a67 	vnmul.f32	s15, s14, s15
 800af02:	ed9f 7a89 	vldr	s14, [pc, #548]	; 800b128 <__ieee754_powf+0x3d0>
 800af06:	eee0 7a07 	vfma.f32	s15, s0, s14
 800af0a:	ed9f 7a88 	vldr	s14, [pc, #544]	; 800b12c <__ieee754_powf+0x3d4>
 800af0e:	eef0 6a67 	vmov.f32	s13, s15
 800af12:	eee0 6a07 	vfma.f32	s13, s0, s14
 800af16:	ee16 3a90 	vmov	r3, s13
 800af1a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800af1e:	f023 030f 	bic.w	r3, r3, #15
 800af22:	ee00 3a90 	vmov	s1, r3
 800af26:	eee0 0a47 	vfms.f32	s1, s0, s14
 800af2a:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800af2e:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 800af32:	f024 040f 	bic.w	r4, r4, #15
 800af36:	ee07 4a10 	vmov	s14, r4
 800af3a:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800af3e:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800af42:	ee07 3a90 	vmov	s15, r3
 800af46:	eee7 0a27 	vfma.f32	s1, s14, s15
 800af4a:	3f01      	subs	r7, #1
 800af4c:	ea57 0200 	orrs.w	r2, r7, r0
 800af50:	ee07 4a10 	vmov	s14, r4
 800af54:	ee67 7a87 	vmul.f32	s15, s15, s14
 800af58:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800af5c:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800af60:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800af64:	ee17 4a10 	vmov	r4, s14
 800af68:	bf08      	it	eq
 800af6a:	eeb0 8a40 	vmoveq.f32	s16, s0
 800af6e:	2c00      	cmp	r4, #0
 800af70:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800af74:	f340 817e 	ble.w	800b274 <__ieee754_powf+0x51c>
 800af78:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800af7c:	f340 80f8 	ble.w	800b170 <__ieee754_powf+0x418>
 800af80:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800af84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af88:	bf4c      	ite	mi
 800af8a:	2001      	movmi	r0, #1
 800af8c:	2000      	movpl	r0, #0
 800af8e:	e790      	b.n	800aeb2 <__ieee754_powf+0x15a>
 800af90:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 800af94:	bf01      	itttt	eq
 800af96:	eddf 7a66 	vldreq	s15, [pc, #408]	; 800b130 <__ieee754_powf+0x3d8>
 800af9a:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800af9e:	f06f 0217 	mvneq.w	r2, #23
 800afa2:	ee17 5a90 	vmoveq	r5, s15
 800afa6:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800afaa:	bf18      	it	ne
 800afac:	2200      	movne	r2, #0
 800afae:	3b7f      	subs	r3, #127	; 0x7f
 800afb0:	4413      	add	r3, r2
 800afb2:	4a60      	ldr	r2, [pc, #384]	; (800b134 <__ieee754_powf+0x3dc>)
 800afb4:	f3c5 0516 	ubfx	r5, r5, #0, #23
 800afb8:	4295      	cmp	r5, r2
 800afba:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 800afbe:	dd06      	ble.n	800afce <__ieee754_powf+0x276>
 800afc0:	4a5d      	ldr	r2, [pc, #372]	; (800b138 <__ieee754_powf+0x3e0>)
 800afc2:	4295      	cmp	r5, r2
 800afc4:	f340 80a4 	ble.w	800b110 <__ieee754_powf+0x3b8>
 800afc8:	3301      	adds	r3, #1
 800afca:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800afce:	2500      	movs	r5, #0
 800afd0:	4a5a      	ldr	r2, [pc, #360]	; (800b13c <__ieee754_powf+0x3e4>)
 800afd2:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 800afd6:	ee07 1a90 	vmov	s15, r1
 800afda:	ed92 7a00 	vldr	s14, [r2]
 800afde:	4a58      	ldr	r2, [pc, #352]	; (800b140 <__ieee754_powf+0x3e8>)
 800afe0:	ee37 6a27 	vadd.f32	s12, s14, s15
 800afe4:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800afe8:	eec5 6a86 	vdiv.f32	s13, s11, s12
 800afec:	1049      	asrs	r1, r1, #1
 800afee:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800aff2:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800aff6:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 800affa:	ee37 5ac7 	vsub.f32	s10, s15, s14
 800affe:	ee06 1a10 	vmov	s12, r1
 800b002:	ee65 4a26 	vmul.f32	s9, s10, s13
 800b006:	ee36 7a47 	vsub.f32	s14, s12, s14
 800b00a:	ee14 6a90 	vmov	r6, s9
 800b00e:	4016      	ands	r6, r2
 800b010:	ee05 6a90 	vmov	s11, r6
 800b014:	eea5 5ac6 	vfms.f32	s10, s11, s12
 800b018:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b01c:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800b144 <__ieee754_powf+0x3ec>
 800b020:	eea5 5ae7 	vfms.f32	s10, s11, s15
 800b024:	ee64 7aa4 	vmul.f32	s15, s9, s9
 800b028:	ee25 6a26 	vmul.f32	s12, s10, s13
 800b02c:	eddf 6a46 	vldr	s13, [pc, #280]	; 800b148 <__ieee754_powf+0x3f0>
 800b030:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800b034:	eddf 6a45 	vldr	s13, [pc, #276]	; 800b14c <__ieee754_powf+0x3f4>
 800b038:	eee7 6a27 	vfma.f32	s13, s14, s15
 800b03c:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800b120 <__ieee754_powf+0x3c8>
 800b040:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b044:	eddf 6a42 	vldr	s13, [pc, #264]	; 800b150 <__ieee754_powf+0x3f8>
 800b048:	eee7 6a27 	vfma.f32	s13, s14, s15
 800b04c:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800b154 <__ieee754_powf+0x3fc>
 800b050:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b054:	ee74 6aa5 	vadd.f32	s13, s9, s11
 800b058:	ee27 5aa7 	vmul.f32	s10, s15, s15
 800b05c:	ee66 6a86 	vmul.f32	s13, s13, s12
 800b060:	eee5 6a07 	vfma.f32	s13, s10, s14
 800b064:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 800b068:	eef0 7a45 	vmov.f32	s15, s10
 800b06c:	eee5 7aa5 	vfma.f32	s15, s11, s11
 800b070:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b074:	ee17 1a90 	vmov	r1, s15
 800b078:	4011      	ands	r1, r2
 800b07a:	ee07 1a90 	vmov	s15, r1
 800b07e:	ee37 7ac5 	vsub.f32	s14, s15, s10
 800b082:	eea5 7ae5 	vfms.f32	s14, s11, s11
 800b086:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800b08a:	ee27 7a24 	vmul.f32	s14, s14, s9
 800b08e:	eea6 7a27 	vfma.f32	s14, s12, s15
 800b092:	eeb0 6a47 	vmov.f32	s12, s14
 800b096:	eea5 6aa7 	vfma.f32	s12, s11, s15
 800b09a:	ee16 1a10 	vmov	r1, s12
 800b09e:	4011      	ands	r1, r2
 800b0a0:	ee06 1a90 	vmov	s13, r1
 800b0a4:	eee5 6ae7 	vfms.f32	s13, s11, s15
 800b0a8:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800b158 <__ieee754_powf+0x400>
 800b0ac:	eddf 5a2b 	vldr	s11, [pc, #172]	; 800b15c <__ieee754_powf+0x404>
 800b0b0:	ee37 7a66 	vsub.f32	s14, s14, s13
 800b0b4:	ee06 1a10 	vmov	s12, r1
 800b0b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b0bc:	eddf 7a28 	vldr	s15, [pc, #160]	; 800b160 <__ieee754_powf+0x408>
 800b0c0:	4928      	ldr	r1, [pc, #160]	; (800b164 <__ieee754_powf+0x40c>)
 800b0c2:	eea6 7a27 	vfma.f32	s14, s12, s15
 800b0c6:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 800b0ca:	edd1 7a00 	vldr	s15, [r1]
 800b0ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b0d2:	ee07 3a90 	vmov	s15, r3
 800b0d6:	4b24      	ldr	r3, [pc, #144]	; (800b168 <__ieee754_powf+0x410>)
 800b0d8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800b0dc:	eef0 7a47 	vmov.f32	s15, s14
 800b0e0:	eee6 7a25 	vfma.f32	s15, s12, s11
 800b0e4:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800b0e8:	edd5 0a00 	vldr	s1, [r5]
 800b0ec:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800b0f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0f4:	ee17 3a90 	vmov	r3, s15
 800b0f8:	4013      	ands	r3, r2
 800b0fa:	ee07 3a90 	vmov	s15, r3
 800b0fe:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800b102:	ee76 6ae0 	vsub.f32	s13, s13, s1
 800b106:	eee6 6a65 	vfms.f32	s13, s12, s11
 800b10a:	ee77 7a66 	vsub.f32	s15, s14, s13
 800b10e:	e70e      	b.n	800af2e <__ieee754_powf+0x1d6>
 800b110:	2501      	movs	r5, #1
 800b112:	e75d      	b.n	800afd0 <__ieee754_powf+0x278>
 800b114:	00000000 	.word	0x00000000
 800b118:	3f7ffff3 	.word	0x3f7ffff3
 800b11c:	3f800007 	.word	0x3f800007
 800b120:	3eaaaaab 	.word	0x3eaaaaab
 800b124:	3fb8aa3b 	.word	0x3fb8aa3b
 800b128:	36eca570 	.word	0x36eca570
 800b12c:	3fb8aa00 	.word	0x3fb8aa00
 800b130:	4b800000 	.word	0x4b800000
 800b134:	001cc471 	.word	0x001cc471
 800b138:	005db3d6 	.word	0x005db3d6
 800b13c:	0800b944 	.word	0x0800b944
 800b140:	fffff000 	.word	0xfffff000
 800b144:	3e6c3255 	.word	0x3e6c3255
 800b148:	3e53f142 	.word	0x3e53f142
 800b14c:	3e8ba305 	.word	0x3e8ba305
 800b150:	3edb6db7 	.word	0x3edb6db7
 800b154:	3f19999a 	.word	0x3f19999a
 800b158:	3f76384f 	.word	0x3f76384f
 800b15c:	3f763800 	.word	0x3f763800
 800b160:	369dc3a0 	.word	0x369dc3a0
 800b164:	0800b954 	.word	0x0800b954
 800b168:	0800b94c 	.word	0x0800b94c
 800b16c:	3338aa3c 	.word	0x3338aa3c
 800b170:	f040 8095 	bne.w	800b29e <__ieee754_powf+0x546>
 800b174:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800b16c <__ieee754_powf+0x414>
 800b178:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b17c:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800b180:	eef4 6ac7 	vcmpe.f32	s13, s14
 800b184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b188:	f73f aefa 	bgt.w	800af80 <__ieee754_powf+0x228>
 800b18c:	15db      	asrs	r3, r3, #23
 800b18e:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 800b192:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b196:	4103      	asrs	r3, r0
 800b198:	4423      	add	r3, r4
 800b19a:	494b      	ldr	r1, [pc, #300]	; (800b2c8 <__ieee754_powf+0x570>)
 800b19c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800b1a0:	3a7f      	subs	r2, #127	; 0x7f
 800b1a2:	4111      	asrs	r1, r2
 800b1a4:	ea23 0101 	bic.w	r1, r3, r1
 800b1a8:	ee07 1a10 	vmov	s14, r1
 800b1ac:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800b1b0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800b1b4:	f1c2 0217 	rsb	r2, r2, #23
 800b1b8:	4110      	asrs	r0, r2
 800b1ba:	2c00      	cmp	r4, #0
 800b1bc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b1c0:	bfb8      	it	lt
 800b1c2:	4240      	neglt	r0, r0
 800b1c4:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800b1c8:	ed9f 0a40 	vldr	s0, [pc, #256]	; 800b2cc <__ieee754_powf+0x574>
 800b1cc:	eddf 6a40 	vldr	s13, [pc, #256]	; 800b2d0 <__ieee754_powf+0x578>
 800b1d0:	ee17 3a10 	vmov	r3, s14
 800b1d4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800b1d8:	f023 030f 	bic.w	r3, r3, #15
 800b1dc:	ee07 3a10 	vmov	s14, r3
 800b1e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b1e4:	ee27 0a00 	vmul.f32	s0, s14, s0
 800b1e8:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800b1ec:	eddf 7a39 	vldr	s15, [pc, #228]	; 800b2d4 <__ieee754_powf+0x57c>
 800b1f0:	eea0 0aa7 	vfma.f32	s0, s1, s15
 800b1f4:	eef0 7a40 	vmov.f32	s15, s0
 800b1f8:	eee7 7a26 	vfma.f32	s15, s14, s13
 800b1fc:	eeb0 6a67 	vmov.f32	s12, s15
 800b200:	eea7 6a66 	vfms.f32	s12, s14, s13
 800b204:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800b208:	ee30 0a46 	vsub.f32	s0, s0, s12
 800b20c:	eddf 6a32 	vldr	s13, [pc, #200]	; 800b2d8 <__ieee754_powf+0x580>
 800b210:	ed9f 6a32 	vldr	s12, [pc, #200]	; 800b2dc <__ieee754_powf+0x584>
 800b214:	eee7 6a06 	vfma.f32	s13, s14, s12
 800b218:	ed9f 6a31 	vldr	s12, [pc, #196]	; 800b2e0 <__ieee754_powf+0x588>
 800b21c:	eea6 6a87 	vfma.f32	s12, s13, s14
 800b220:	eddf 6a30 	vldr	s13, [pc, #192]	; 800b2e4 <__ieee754_powf+0x58c>
 800b224:	eee6 6a07 	vfma.f32	s13, s12, s14
 800b228:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 800b2e8 <__ieee754_powf+0x590>
 800b22c:	eea6 6a87 	vfma.f32	s12, s13, s14
 800b230:	eef0 6a67 	vmov.f32	s13, s15
 800b234:	eee6 6a47 	vfms.f32	s13, s12, s14
 800b238:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800b23c:	ee27 6aa6 	vmul.f32	s12, s15, s13
 800b240:	ee76 6ac7 	vsub.f32	s13, s13, s14
 800b244:	eea7 0a80 	vfma.f32	s0, s15, s0
 800b248:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800b24c:	ee37 0a40 	vsub.f32	s0, s14, s0
 800b250:	ee70 7a67 	vsub.f32	s15, s0, s15
 800b254:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800b258:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b25c:	ee10 3a10 	vmov	r3, s0
 800b260:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800b264:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b268:	da1f      	bge.n	800b2aa <__ieee754_powf+0x552>
 800b26a:	f000 f87d 	bl	800b368 <scalbnf>
 800b26e:	ee20 0a08 	vmul.f32	s0, s0, s16
 800b272:	e589      	b.n	800ad88 <__ieee754_powf+0x30>
 800b274:	4a1d      	ldr	r2, [pc, #116]	; (800b2ec <__ieee754_powf+0x594>)
 800b276:	4293      	cmp	r3, r2
 800b278:	dd07      	ble.n	800b28a <__ieee754_powf+0x532>
 800b27a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800b27e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b282:	bf4c      	ite	mi
 800b284:	2001      	movmi	r0, #1
 800b286:	2000      	movpl	r0, #0
 800b288:	e61f      	b.n	800aeca <__ieee754_powf+0x172>
 800b28a:	d108      	bne.n	800b29e <__ieee754_powf+0x546>
 800b28c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b290:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800b294:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b298:	f6ff af78 	blt.w	800b18c <__ieee754_powf+0x434>
 800b29c:	e7ed      	b.n	800b27a <__ieee754_powf+0x522>
 800b29e:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800b2a2:	f73f af73 	bgt.w	800b18c <__ieee754_powf+0x434>
 800b2a6:	2000      	movs	r0, #0
 800b2a8:	e78c      	b.n	800b1c4 <__ieee754_powf+0x46c>
 800b2aa:	ee00 3a10 	vmov	s0, r3
 800b2ae:	e7de      	b.n	800b26e <__ieee754_powf+0x516>
 800b2b0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800b2b4:	e568      	b.n	800ad88 <__ieee754_powf+0x30>
 800b2b6:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800b2f0 <__ieee754_powf+0x598>
 800b2ba:	e565      	b.n	800ad88 <__ieee754_powf+0x30>
 800b2bc:	eeb0 0a48 	vmov.f32	s0, s16
 800b2c0:	e562      	b.n	800ad88 <__ieee754_powf+0x30>
 800b2c2:	2700      	movs	r7, #0
 800b2c4:	e58d      	b.n	800ade2 <__ieee754_powf+0x8a>
 800b2c6:	bf00      	nop
 800b2c8:	007fffff 	.word	0x007fffff
 800b2cc:	35bfbe8c 	.word	0x35bfbe8c
 800b2d0:	3f317200 	.word	0x3f317200
 800b2d4:	3f317218 	.word	0x3f317218
 800b2d8:	b5ddea0e 	.word	0xb5ddea0e
 800b2dc:	3331bb4c 	.word	0x3331bb4c
 800b2e0:	388ab355 	.word	0x388ab355
 800b2e4:	bb360b61 	.word	0xbb360b61
 800b2e8:	3e2aaaab 	.word	0x3e2aaaab
 800b2ec:	43160000 	.word	0x43160000
 800b2f0:	00000000 	.word	0x00000000

0800b2f4 <__ieee754_sqrtf>:
 800b2f4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800b2f8:	4770      	bx	lr

0800b2fa <with_errnof>:
 800b2fa:	b513      	push	{r0, r1, r4, lr}
 800b2fc:	4604      	mov	r4, r0
 800b2fe:	ed8d 0a01 	vstr	s0, [sp, #4]
 800b302:	f7fb f82f 	bl	8006364 <__errno>
 800b306:	ed9d 0a01 	vldr	s0, [sp, #4]
 800b30a:	6004      	str	r4, [r0, #0]
 800b30c:	b002      	add	sp, #8
 800b30e:	bd10      	pop	{r4, pc}

0800b310 <xflowf>:
 800b310:	b130      	cbz	r0, 800b320 <xflowf+0x10>
 800b312:	eef1 7a40 	vneg.f32	s15, s0
 800b316:	ee27 0a80 	vmul.f32	s0, s15, s0
 800b31a:	2022      	movs	r0, #34	; 0x22
 800b31c:	f7ff bfed 	b.w	800b2fa <with_errnof>
 800b320:	eef0 7a40 	vmov.f32	s15, s0
 800b324:	e7f7      	b.n	800b316 <xflowf+0x6>
	...

0800b328 <__math_uflowf>:
 800b328:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b330 <__math_uflowf+0x8>
 800b32c:	f7ff bff0 	b.w	800b310 <xflowf>
 800b330:	10000000 	.word	0x10000000

0800b334 <__math_oflowf>:
 800b334:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b33c <__math_oflowf+0x8>
 800b338:	f7ff bfea 	b.w	800b310 <xflowf>
 800b33c:	70000000 	.word	0x70000000

0800b340 <fabsf>:
 800b340:	ee10 3a10 	vmov	r3, s0
 800b344:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b348:	ee00 3a10 	vmov	s0, r3
 800b34c:	4770      	bx	lr

0800b34e <finitef>:
 800b34e:	b082      	sub	sp, #8
 800b350:	ed8d 0a01 	vstr	s0, [sp, #4]
 800b354:	9801      	ldr	r0, [sp, #4]
 800b356:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800b35a:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800b35e:	bfac      	ite	ge
 800b360:	2000      	movge	r0, #0
 800b362:	2001      	movlt	r0, #1
 800b364:	b002      	add	sp, #8
 800b366:	4770      	bx	lr

0800b368 <scalbnf>:
 800b368:	ee10 3a10 	vmov	r3, s0
 800b36c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800b370:	d025      	beq.n	800b3be <scalbnf+0x56>
 800b372:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800b376:	d302      	bcc.n	800b37e <scalbnf+0x16>
 800b378:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b37c:	4770      	bx	lr
 800b37e:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800b382:	d122      	bne.n	800b3ca <scalbnf+0x62>
 800b384:	4b2a      	ldr	r3, [pc, #168]	; (800b430 <scalbnf+0xc8>)
 800b386:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800b434 <scalbnf+0xcc>
 800b38a:	4298      	cmp	r0, r3
 800b38c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800b390:	db16      	blt.n	800b3c0 <scalbnf+0x58>
 800b392:	ee10 3a10 	vmov	r3, s0
 800b396:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800b39a:	3a19      	subs	r2, #25
 800b39c:	4402      	add	r2, r0
 800b39e:	2afe      	cmp	r2, #254	; 0xfe
 800b3a0:	dd15      	ble.n	800b3ce <scalbnf+0x66>
 800b3a2:	ee10 3a10 	vmov	r3, s0
 800b3a6:	eddf 7a24 	vldr	s15, [pc, #144]	; 800b438 <scalbnf+0xd0>
 800b3aa:	eddf 6a24 	vldr	s13, [pc, #144]	; 800b43c <scalbnf+0xd4>
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	eeb0 7a67 	vmov.f32	s14, s15
 800b3b4:	bfb8      	it	lt
 800b3b6:	eef0 7a66 	vmovlt.f32	s15, s13
 800b3ba:	ee27 0a27 	vmul.f32	s0, s14, s15
 800b3be:	4770      	bx	lr
 800b3c0:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800b440 <scalbnf+0xd8>
 800b3c4:	ee20 0a27 	vmul.f32	s0, s0, s15
 800b3c8:	4770      	bx	lr
 800b3ca:	0dd2      	lsrs	r2, r2, #23
 800b3cc:	e7e6      	b.n	800b39c <scalbnf+0x34>
 800b3ce:	2a00      	cmp	r2, #0
 800b3d0:	dd06      	ble.n	800b3e0 <scalbnf+0x78>
 800b3d2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b3d6:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800b3da:	ee00 3a10 	vmov	s0, r3
 800b3de:	4770      	bx	lr
 800b3e0:	f112 0f16 	cmn.w	r2, #22
 800b3e4:	da1a      	bge.n	800b41c <scalbnf+0xb4>
 800b3e6:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b3ea:	4298      	cmp	r0, r3
 800b3ec:	ee10 3a10 	vmov	r3, s0
 800b3f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b3f4:	dd0a      	ble.n	800b40c <scalbnf+0xa4>
 800b3f6:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800b438 <scalbnf+0xd0>
 800b3fa:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800b43c <scalbnf+0xd4>
 800b3fe:	eef0 7a40 	vmov.f32	s15, s0
 800b402:	2b00      	cmp	r3, #0
 800b404:	bf18      	it	ne
 800b406:	eeb0 0a47 	vmovne.f32	s0, s14
 800b40a:	e7db      	b.n	800b3c4 <scalbnf+0x5c>
 800b40c:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800b440 <scalbnf+0xd8>
 800b410:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800b444 <scalbnf+0xdc>
 800b414:	eef0 7a40 	vmov.f32	s15, s0
 800b418:	2b00      	cmp	r3, #0
 800b41a:	e7f3      	b.n	800b404 <scalbnf+0x9c>
 800b41c:	3219      	adds	r2, #25
 800b41e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b422:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800b426:	eddf 7a08 	vldr	s15, [pc, #32]	; 800b448 <scalbnf+0xe0>
 800b42a:	ee07 3a10 	vmov	s14, r3
 800b42e:	e7c4      	b.n	800b3ba <scalbnf+0x52>
 800b430:	ffff3cb0 	.word	0xffff3cb0
 800b434:	4c000000 	.word	0x4c000000
 800b438:	7149f2ca 	.word	0x7149f2ca
 800b43c:	f149f2ca 	.word	0xf149f2ca
 800b440:	0da24260 	.word	0x0da24260
 800b444:	8da24260 	.word	0x8da24260
 800b448:	33000000 	.word	0x33000000

0800b44c <_init>:
 800b44c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b44e:	bf00      	nop
 800b450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b452:	bc08      	pop	{r3}
 800b454:	469e      	mov	lr, r3
 800b456:	4770      	bx	lr

0800b458 <_fini>:
 800b458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b45a:	bf00      	nop
 800b45c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b45e:	bc08      	pop	{r3}
 800b460:	469e      	mov	lr, r3
 800b462:	4770      	bx	lr
