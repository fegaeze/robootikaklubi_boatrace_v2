
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b2e4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f4  0800b478  0800b478  0001b478  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b96c  0800b96c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b96c  0800b96c  0001b96c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b974  0800b974  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b974  0800b974  0001b974  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b978  0800b978  0001b978  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800b97c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
 10 .bss          000001b0  200001e0  200001e0  000201e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000390  20000390  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001044f  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f1b  00000000  00000000  0003065f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e40  00000000  00000000  00032580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d78  00000000  00000000  000333c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ce3d  00000000  00000000  00034138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011753  00000000  00000000  00050f75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000adca8  00000000  00000000  000626c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00110370  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005410  00000000  00000000  001103c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b45c 	.word	0x0800b45c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800b45c 	.word	0x0800b45c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <togglePowerBtn>:


/*
 * Toggle Robot Start Button
 */
int togglePowerBtn(int powerBtnState) {
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
	if (powerBtnState) {
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d027      	beq.n	8001056 <togglePowerBtn+0x5e>
		block = 0;
 8001006:	4b19      	ldr	r3, [pc, #100]	; (800106c <togglePowerBtn+0x74>)
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
		if (!byteStream && buttonState) {
 800100c:	4b18      	ldr	r3, [pc, #96]	; (8001070 <togglePowerBtn+0x78>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d10c      	bne.n	800102e <togglePowerBtn+0x36>
 8001014:	4b17      	ldr	r3, [pc, #92]	; (8001074 <togglePowerBtn+0x7c>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d008      	beq.n	800102e <togglePowerBtn+0x36>
		  byteStream = 1;
 800101c:	4b14      	ldr	r3, [pc, #80]	; (8001070 <togglePowerBtn+0x78>)
 800101e:	2201      	movs	r2, #1
 8001020:	601a      	str	r2, [r3, #0]
		  buttonState = 0;
 8001022:	4b14      	ldr	r3, [pc, #80]	; (8001074 <togglePowerBtn+0x7c>)
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
		  return buttonState;
 8001028:	4b12      	ldr	r3, [pc, #72]	; (8001074 <togglePowerBtn+0x7c>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	e018      	b.n	8001060 <togglePowerBtn+0x68>
		} else if (!byteStream && !buttonState) {
 800102e:	4b10      	ldr	r3, [pc, #64]	; (8001070 <togglePowerBtn+0x78>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d10c      	bne.n	8001050 <togglePowerBtn+0x58>
 8001036:	4b0f      	ldr	r3, [pc, #60]	; (8001074 <togglePowerBtn+0x7c>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d108      	bne.n	8001050 <togglePowerBtn+0x58>
		  byteStream = 1;
 800103e:	4b0c      	ldr	r3, [pc, #48]	; (8001070 <togglePowerBtn+0x78>)
 8001040:	2201      	movs	r2, #1
 8001042:	601a      	str	r2, [r3, #0]
		  buttonState = 1;
 8001044:	4b0b      	ldr	r3, [pc, #44]	; (8001074 <togglePowerBtn+0x7c>)
 8001046:	2201      	movs	r2, #1
 8001048:	601a      	str	r2, [r3, #0]
		  return buttonState;
 800104a:	4b0a      	ldr	r3, [pc, #40]	; (8001074 <togglePowerBtn+0x7c>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	e007      	b.n	8001060 <togglePowerBtn+0x68>
		} else {
		  return buttonState;
 8001050:	4b08      	ldr	r3, [pc, #32]	; (8001074 <togglePowerBtn+0x7c>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	e004      	b.n	8001060 <togglePowerBtn+0x68>
		}
	} else {
		byteStream = 0;
 8001056:	4b06      	ldr	r3, [pc, #24]	; (8001070 <togglePowerBtn+0x78>)
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
		return buttonState;
 800105c:	4b05      	ldr	r3, [pc, #20]	; (8001074 <togglePowerBtn+0x7c>)
 800105e:	681b      	ldr	r3, [r3, #0]
	}
}
 8001060:	4618      	mov	r0, r3
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr
 800106c:	20000368 	.word	0x20000368
 8001070:	2000036c 	.word	0x2000036c
 8001074:	20000370 	.word	0x20000370

08001078 <ADC_Read>:
 * Read IR sensor value:
 * Update ADC channel config
 * Start, convert and read sensor value
 */
uint16_t ADC_Read(ADC_HandleTypeDef* hadc, uint8_t channel)
{
 8001078:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800107c:	b08c      	sub	sp, #48	; 0x30
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
 8001082:	460b      	mov	r3, r1
 8001084:	70fb      	strb	r3, [r7, #3]
  ADC_ChannelConfTypeDef sConfig;

  sConfig.Channel = channel;
 8001086:	78fb      	ldrb	r3, [r7, #3]
 8001088:	60fb      	str	r3, [r7, #12]
  sConfig.Rank = 1;
 800108a:	2301      	movs	r3, #1
 800108c:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800108e:	2300      	movs	r3, #0
 8001090:	617b      	str	r3, [r7, #20]

  HAL_ADC_ConfigChannel(hadc, &sConfig);
 8001092:	f107 030c 	add.w	r3, r7, #12
 8001096:	4619      	mov	r1, r3
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	f001 fb29 	bl	80026f0 <HAL_ADC_ConfigChannel>

  HAL_ADC_Start(hadc);
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f001 f994 	bl	80023cc <HAL_ADC_Start>
  HAL_ADC_PollForConversion(hadc, 10);
 80010a4:	210a      	movs	r1, #10
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f001 fa46 	bl	8002538 <HAL_ADC_PollForConversion>

  uint64_t sum = 0;
 80010ac:	f04f 0200 	mov.w	r2, #0
 80010b0:	f04f 0300 	mov.w	r3, #0
 80010b4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  for (int i = 0; i < 3; i++) {
 80010b8:	2300      	movs	r3, #0
 80010ba:	627b      	str	r3, [r7, #36]	; 0x24
 80010bc:	e011      	b.n	80010e2 <ADC_Read+0x6a>
  	sum+= HAL_ADC_GetValue(hadc);
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f001 fb08 	bl	80026d4 <HAL_ADC_GetValue>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2200      	movs	r2, #0
 80010c8:	461c      	mov	r4, r3
 80010ca:	4615      	mov	r5, r2
 80010cc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80010d0:	eb12 0804 	adds.w	r8, r2, r4
 80010d4:	eb43 0905 	adc.w	r9, r3, r5
 80010d8:	e9c7 890a 	strd	r8, r9, [r7, #40]	; 0x28
  for (int i = 0; i < 3; i++) {
 80010dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010de:	3301      	adds	r3, #1
 80010e0:	627b      	str	r3, [r7, #36]	; 0x24
 80010e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e4:	2b02      	cmp	r3, #2
 80010e6:	ddea      	ble.n	80010be <ADC_Read+0x46>
  }

  sum = sum / 3;
 80010e8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80010ec:	f04f 0203 	mov.w	r2, #3
 80010f0:	f04f 0300 	mov.w	r3, #0
 80010f4:	f7ff fdc8 	bl	8000c88 <__aeabi_uldivmod>
 80010f8:	4602      	mov	r2, r0
 80010fa:	460b      	mov	r3, r1
 80010fc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

  return sum;
 8001100:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
}
 8001102:	4618      	mov	r0, r3
 8001104:	3730      	adds	r7, #48	; 0x30
 8001106:	46bd      	mov	sp, r7
 8001108:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800110c <setInitialState>:
/*
 * Set Initial State:
 * Set speed to highest settings
 */
void setInitialState()
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
	HAL_Delay(5000);
 8001110:	f241 3088 	movw	r0, #5000	; 0x1388
 8001114:	f000 ffa4 	bl	8002060 <HAL_Delay>
	setMotorSpeed(-255, -255);
 8001118:	f06f 01fe 	mvn.w	r1, #254	; 0xfe
 800111c:	f06f 00fe 	mvn.w	r0, #254	; 0xfe
 8001120:	f000 f91a 	bl	8001358 <setMotorSpeed>
	HAL_Delay(2000);
 8001124:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001128:	f000 ff9a 	bl	8002060 <HAL_Delay>
}
 800112c:	bf00      	nop
 800112e:	bd80      	pop	{r7, pc}

08001130 <getDistance>:
 * Then based on the IR sensor datasheet graph, we determine
 * an equation to get accurate distance levels in centimeters.
 */

float getDistance(float adcVal)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b086      	sub	sp, #24
 8001134:	af00      	add	r7, sp, #0
 8001136:	ed87 0a01 	vstr	s0, [r7, #4]
  float voltageVal = (3.3 * adcVal) / 4096;
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f7ff fa04 	bl	8000548 <__aeabi_f2d>
 8001140:	a334      	add	r3, pc, #208	; (adr r3, 8001214 <getDistance+0xe4>)
 8001142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001146:	f7ff fa57 	bl	80005f8 <__aeabi_dmul>
 800114a:	4602      	mov	r2, r0
 800114c:	460b      	mov	r3, r1
 800114e:	4610      	mov	r0, r2
 8001150:	4619      	mov	r1, r3
 8001152:	f04f 0200 	mov.w	r2, #0
 8001156:	4b2a      	ldr	r3, [pc, #168]	; (8001200 <getDistance+0xd0>)
 8001158:	f7ff fb78 	bl	800084c <__aeabi_ddiv>
 800115c:	4602      	mov	r2, r0
 800115e:	460b      	mov	r3, r1
 8001160:	4610      	mov	r0, r2
 8001162:	4619      	mov	r1, r3
 8001164:	f7ff fd40 	bl	8000be8 <__aeabi_d2f>
 8001168:	4603      	mov	r3, r0
 800116a:	617b      	str	r3, [r7, #20]

  float max_distance = DISTANCE_MAX;
 800116c:	4b25      	ldr	r3, [pc, #148]	; (8001204 <getDistance+0xd4>)
 800116e:	613b      	str	r3, [r7, #16]
  float min_distance = DISTANCE_MIN;
 8001170:	4b25      	ldr	r3, [pc, #148]	; (8001208 <getDistance+0xd8>)
 8001172:	60fb      	str	r3, [r7, #12]

  float distance = 23.4993 / powf(voltageVal, 1.7);
 8001174:	eddf 0a25 	vldr	s1, [pc, #148]	; 800120c <getDistance+0xdc>
 8001178:	ed97 0a05 	vldr	s0, [r7, #20]
 800117c:	f009 fd9c 	bl	800acb8 <powf>
 8001180:	ee10 3a10 	vmov	r3, s0
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff f9df 	bl	8000548 <__aeabi_f2d>
 800118a:	4602      	mov	r2, r0
 800118c:	460b      	mov	r3, r1
 800118e:	a11a      	add	r1, pc, #104	; (adr r1, 80011f8 <getDistance+0xc8>)
 8001190:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001194:	f7ff fb5a 	bl	800084c <__aeabi_ddiv>
 8001198:	4602      	mov	r2, r0
 800119a:	460b      	mov	r3, r1
 800119c:	4610      	mov	r0, r2
 800119e:	4619      	mov	r1, r3
 80011a0:	f7ff fd22 	bl	8000be8 <__aeabi_d2f>
 80011a4:	4603      	mov	r3, r0
 80011a6:	60bb      	str	r3, [r7, #8]

  distance -= DISTANCE_THRESHOLD;
 80011a8:	edd7 7a02 	vldr	s15, [r7, #8]
 80011ac:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80011b0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80011b4:	edc7 7a02 	vstr	s15, [r7, #8]

  if(distance >= DISTANCE_MAX) {
 80011b8:	edd7 7a02 	vldr	s15, [r7, #8]
 80011bc:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001210 <getDistance+0xe0>
 80011c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011c8:	db01      	blt.n	80011ce <getDistance+0x9e>
	  return max_distance;
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	e00b      	b.n	80011e6 <getDistance+0xb6>
  } else if(distance <= DISTANCE_MIN) {
 80011ce:	edd7 7a02 	vldr	s15, [r7, #8]
 80011d2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80011d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011de:	d801      	bhi.n	80011e4 <getDistance+0xb4>
	  return min_distance;
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	e000      	b.n	80011e6 <getDistance+0xb6>
  } else {
	  return distance;
 80011e4:	68bb      	ldr	r3, [r7, #8]
  }
}
 80011e6:	ee07 3a90 	vmov	s15, r3
 80011ea:	eeb0 0a67 	vmov.f32	s0, s15
 80011ee:	3718      	adds	r7, #24
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	f3af 8000 	nop.w
 80011f8:	1ff2e48f 	.word	0x1ff2e48f
 80011fc:	40377fd2 	.word	0x40377fd2
 8001200:	40b00000 	.word	0x40b00000
 8001204:	43160000 	.word	0x43160000
 8001208:	41200000 	.word	0x41200000
 800120c:	3fd9999a 	.word	0x3fd9999a
 8001210:	43160000 	.word	0x43160000
 8001214:	66666666 	.word	0x66666666
 8001218:	400a6666 	.word	0x400a6666

0800121c <calcMotorSpeed>:
 *
 * Formular:
 * https://stackoverflow.com/questions/5731863/mapping-a-numeric-range-onto-another
 * (output_end - output_start) / (input_end - input_start)
 */
float calcMotorSpeed(float dist_diff) {
 800121c:	b480      	push	{r7}
 800121e:	b085      	sub	sp, #20
 8001220:	af00      	add	r7, sp, #0
 8001222:	ed87 0a01 	vstr	s0, [r7, #4]
	float speed = MIN_SPEED + ((dist_diff / (DISTANCE_MAX - DISTANCE_MIN)) * (MAX_SPEED - MIN_SPEED));
 8001226:	ed97 7a01 	vldr	s14, [r7, #4]
 800122a:	eddf 6a17 	vldr	s13, [pc, #92]	; 8001288 <calcMotorSpeed+0x6c>
 800122e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001232:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800128c <calcMotorSpeed+0x70>
 8001236:	ee67 7a87 	vmul.f32	s15, s15, s14
 800123a:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001290 <calcMotorSpeed+0x74>
 800123e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001242:	edc7 7a03 	vstr	s15, [r7, #12]

	if(speed <= MIN_SPEED) {
 8001246:	edd7 7a03 	vldr	s15, [r7, #12]
 800124a:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001290 <calcMotorSpeed+0x74>
 800124e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001256:	d801      	bhi.n	800125c <calcMotorSpeed+0x40>
		return MIN_SPEED;
 8001258:	4b0e      	ldr	r3, [pc, #56]	; (8001294 <calcMotorSpeed+0x78>)
 800125a:	e00b      	b.n	8001274 <calcMotorSpeed+0x58>
	} else if (speed >= MAX_SPEED) {
 800125c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001260:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8001298 <calcMotorSpeed+0x7c>
 8001264:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800126c:	db01      	blt.n	8001272 <calcMotorSpeed+0x56>
		return MAX_SPEED;
 800126e:	4b0b      	ldr	r3, [pc, #44]	; (800129c <calcMotorSpeed+0x80>)
 8001270:	e000      	b.n	8001274 <calcMotorSpeed+0x58>
	} else {
		return speed;
 8001272:	68fb      	ldr	r3, [r7, #12]
	}
}
 8001274:	ee07 3a90 	vmov	s15, r3
 8001278:	eeb0 0a67 	vmov.f32	s0, s15
 800127c:	3714      	adds	r7, #20
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	430c0000 	.word	0x430c0000
 800128c:	43020000 	.word	0x43020000
 8001290:	42fa0000 	.word	0x42fa0000
 8001294:	42fa0000 	.word	0x42fa0000
 8001298:	437f0000 	.word	0x437f0000
 800129c:	437f0000 	.word	0x437f0000

080012a0 <steerBoat>:
 * if turn amount is negative, the boat needs to turn right
 * Constraint: 0 <= turn_amount <= 140
 */

void steerBoat(float left_dist, float front_dist, float right_dist)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b086      	sub	sp, #24
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	ed87 0a03 	vstr	s0, [r7, #12]
 80012aa:	edc7 0a02 	vstr	s1, [r7, #8]
 80012ae:	ed87 1a01 	vstr	s2, [r7, #4]
	float speed;
	float dist_diff = left_dist - right_dist;
 80012b2:	ed97 7a03 	vldr	s14, [r7, #12]
 80012b6:	edd7 7a01 	vldr	s15, [r7, #4]
 80012ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012be:	edc7 7a05 	vstr	s15, [r7, #20]

	if(front_dist > 100) {
 80012c2:	edd7 7a02 	vldr	s15, [r7, #8]
 80012c6:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8001354 <steerBoat+0xb4>
 80012ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012d2:	dd06      	ble.n	80012e2 <steerBoat+0x42>
		setMotorSpeed(-255, -255);
 80012d4:	f06f 01fe 	mvn.w	r1, #254	; 0xfe
 80012d8:	f06f 00fe 	mvn.w	r0, #254	; 0xfe
 80012dc:	f000 f83c 	bl	8001358 <setMotorSpeed>
			setMotorSpeed(100, -50);
		} else {
			setMotorSpeed(-255, -255);
		}
	}
}
 80012e0:	e033      	b.n	800134a <steerBoat+0xaa>
		speed = calcMotorSpeed(fabsf(dist_diff));
 80012e2:	edd7 7a05 	vldr	s15, [r7, #20]
 80012e6:	eef0 7ae7 	vabs.f32	s15, s15
 80012ea:	eeb0 0a67 	vmov.f32	s0, s15
 80012ee:	f7ff ff95 	bl	800121c <calcMotorSpeed>
 80012f2:	ed87 0a04 	vstr	s0, [r7, #16]
		if(dist_diff < -DISTANCE_THRESHOLD) { //Left
 80012f6:	edd7 7a05 	vldr	s15, [r7, #20]
 80012fa:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 80012fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001306:	d508      	bpl.n	800131a <steerBoat+0x7a>
			HAL_Delay(100);
 8001308:	2064      	movs	r0, #100	; 0x64
 800130a:	f000 fea9 	bl	8002060 <HAL_Delay>
			setMotorSpeed(-50, 100);
 800130e:	2164      	movs	r1, #100	; 0x64
 8001310:	f06f 0031 	mvn.w	r0, #49	; 0x31
 8001314:	f000 f820 	bl	8001358 <setMotorSpeed>
}
 8001318:	e017      	b.n	800134a <steerBoat+0xaa>
		} else if(dist_diff > DISTANCE_THRESHOLD) {//Right
 800131a:	edd7 7a05 	vldr	s15, [r7, #20]
 800131e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001322:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800132a:	dd08      	ble.n	800133e <steerBoat+0x9e>
			HAL_Delay(100);
 800132c:	2064      	movs	r0, #100	; 0x64
 800132e:	f000 fe97 	bl	8002060 <HAL_Delay>
			setMotorSpeed(100, -50);
 8001332:	f06f 0131 	mvn.w	r1, #49	; 0x31
 8001336:	2064      	movs	r0, #100	; 0x64
 8001338:	f000 f80e 	bl	8001358 <setMotorSpeed>
}
 800133c:	e005      	b.n	800134a <steerBoat+0xaa>
			setMotorSpeed(-255, -255);
 800133e:	f06f 01fe 	mvn.w	r1, #254	; 0xfe
 8001342:	f06f 00fe 	mvn.w	r0, #254	; 0xfe
 8001346:	f000 f807 	bl	8001358 <setMotorSpeed>
}
 800134a:	bf00      	nop
 800134c:	3718      	adds	r7, #24
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	42c80000 	.word	0x42c80000

08001358 <setMotorSpeed>:
 *
 * if turn amount is positive, the boat needs to turn left
 * if turn amount is negative, the boat needs to turn right
 * Constraint: 0 <= turn_amount <= 140
 */
void setMotorSpeed(int32_t left, int32_t right) {
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	6039      	str	r1, [r7, #0]
	if (left > 0)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2b00      	cmp	r3, #0
 8001366:	dd0c      	ble.n	8001382 <setMotorSpeed+0x2a>
	{
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, -1 * left);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	425a      	negs	r2, r3
 800136c:	4b1a      	ldr	r3, [pc, #104]	; (80013d8 <setMotorSpeed+0x80>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_GPIO_WritePin(LEFT_DM_PHASE_GPIO_Port, LEFT_DM_PHASE_Pin, 1);
 8001372:	2201      	movs	r2, #1
 8001374:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001378:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800137c:	f002 f878 	bl	8003470 <HAL_GPIO_WritePin>
 8001380:	e00a      	b.n	8001398 <setMotorSpeed+0x40>
	}
	else
	{
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, left);
 8001382:	4b15      	ldr	r3, [pc, #84]	; (80013d8 <setMotorSpeed+0x80>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_GPIO_WritePin(LEFT_DM_PHASE_GPIO_Port, LEFT_DM_PHASE_Pin, 0);
 800138a:	2200      	movs	r2, #0
 800138c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001390:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001394:	f002 f86c 	bl	8003470 <HAL_GPIO_WritePin>
	}

	if (right > 0)
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	2b00      	cmp	r3, #0
 800139c:	dd0c      	ble.n	80013b8 <setMotorSpeed+0x60>
	{
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, -1 * right);
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	425a      	negs	r2, r3
 80013a2:	4b0d      	ldr	r3, [pc, #52]	; (80013d8 <setMotorSpeed+0x80>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(RIGHT_DM_PHASE_GPIO_Port, RIGHT_DM_PHASE_Pin, 0);
 80013a8:	2200      	movs	r2, #0
 80013aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013b2:	f002 f85d 	bl	8003470 <HAL_GPIO_WritePin>
	else
	{
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, right);
		HAL_GPIO_WritePin(RIGHT_DM_PHASE_GPIO_Port, RIGHT_DM_PHASE_Pin, 1);
	}
}
 80013b6:	e00a      	b.n	80013ce <setMotorSpeed+0x76>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, right);
 80013b8:	4b07      	ldr	r3, [pc, #28]	; (80013d8 <setMotorSpeed+0x80>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	683a      	ldr	r2, [r7, #0]
 80013be:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(RIGHT_DM_PHASE_GPIO_Port, RIGHT_DM_PHASE_Pin, 1);
 80013c0:	2201      	movs	r2, #1
 80013c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013ca:	f002 f851 	bl	8003470 <HAL_GPIO_WritePin>
}
 80013ce:	bf00      	nop
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	2000024c 	.word	0x2000024c

080013dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b086      	sub	sp, #24
 80013e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013e2:	f000 fdd7 	bl	8001f94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013e6:	f000 f8f9 	bl	80015dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013ea:	f000 fb1d 	bl	8001a28 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80013ee:	f000 faeb 	bl	80019c8 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80013f2:	f000 f9b7 	bl	8001764 <MX_TIM1_Init>
  MX_ADC1_Init();
 80013f6:	f000 f945 	bl	8001684 <MX_ADC1_Init>
  MX_TIM17_Init();
 80013fa:	f000 fa6b 	bl	80018d4 <MX_TIM17_Init>

  uint8_t powerBtnState;

  float left_dist, front_dist, right_dist;

  float left_stored_dist = 0;
 80013fe:	f04f 0300 	mov.w	r3, #0
 8001402:	617b      	str	r3, [r7, #20]
  float right_stored_dist = 0;
 8001404:	f04f 0300 	mov.w	r3, #0
 8001408:	613b      	str	r3, [r7, #16]

  HAL_TIM_Base_Start(&htim1);
 800140a:	4870      	ldr	r0, [pc, #448]	; (80015cc <main+0x1f0>)
 800140c:	f003 fc3a 	bl	8004c84 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim17);
 8001410:	486f      	ldr	r0, [pc, #444]	; (80015d0 <main+0x1f4>)
 8001412:	f003 fc37 	bl	8004c84 <HAL_TIM_Base_Start>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001416:	2100      	movs	r1, #0
 8001418:	486c      	ldr	r0, [pc, #432]	; (80015cc <main+0x1f0>)
 800141a:	f003 fce9 	bl	8004df0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800141e:	2104      	movs	r1, #4
 8001420:	486a      	ldr	r0, [pc, #424]	; (80015cc <main+0x1f0>)
 8001422:	f003 fce5 	bl	8004df0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 8001426:	2100      	movs	r1, #0
 8001428:	4869      	ldr	r0, [pc, #420]	; (80015d0 <main+0x1f4>)
 800142a:	f003 fce1 	bl	8004df0 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		powerBtnState = HAL_GPIO_ReadPin(POWER_BTN_GPIO_Port, POWER_BTN_Pin);
 800142e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001432:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001436:	f002 f803 	bl	8003440 <HAL_GPIO_ReadPin>
 800143a:	4603      	mov	r3, r0
 800143c:	73fb      	strb	r3, [r7, #15]

		if(togglePowerBtn(powerBtnState) == 0 && delay == 1) {
 800143e:	7bfb      	ldrb	r3, [r7, #15]
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff fdd9 	bl	8000ff8 <togglePowerBtn>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d106      	bne.n	800145a <main+0x7e>
 800144c:	4b61      	ldr	r3, [pc, #388]	; (80015d4 <main+0x1f8>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2b01      	cmp	r3, #1
 8001452:	d102      	bne.n	800145a <main+0x7e>
			delay = 0;
 8001454:	4b5f      	ldr	r3, [pc, #380]	; (80015d4 <main+0x1f8>)
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]
		}

		if (togglePowerBtn(powerBtnState) == 1) {
 800145a:	7bfb      	ldrb	r3, [r7, #15]
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff fdcb 	bl	8000ff8 <togglePowerBtn>
 8001462:	4603      	mov	r3, r0
 8001464:	2b01      	cmp	r3, #1
 8001466:	f040 80ab 	bne.w	80015c0 <main+0x1e4>

			if(delay == 0) {
 800146a:	4b5a      	ldr	r3, [pc, #360]	; (80015d4 <main+0x1f8>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d10a      	bne.n	8001488 <main+0xac>
				setInitialState();
 8001472:	f7ff fe4b 	bl	800110c <setInitialState>
				left_stored_dist = 0;
 8001476:	f04f 0300 	mov.w	r3, #0
 800147a:	617b      	str	r3, [r7, #20]
				right_stored_dist = 0;
 800147c:	f04f 0300 	mov.w	r3, #0
 8001480:	613b      	str	r3, [r7, #16]
				delay = 1;
 8001482:	4b54      	ldr	r3, [pc, #336]	; (80015d4 <main+0x1f8>)
 8001484:	2201      	movs	r2, #1
 8001486:	601a      	str	r2, [r3, #0]
			 }

			left_dist = getDistance(ADC_Read(&hadc1, ADC_CHANNEL_1));
 8001488:	2101      	movs	r1, #1
 800148a:	4853      	ldr	r0, [pc, #332]	; (80015d8 <main+0x1fc>)
 800148c:	f7ff fdf4 	bl	8001078 <ADC_Read>
 8001490:	4603      	mov	r3, r0
 8001492:	ee07 3a90 	vmov	s15, r3
 8001496:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800149a:	eeb0 0a67 	vmov.f32	s0, s15
 800149e:	f7ff fe47 	bl	8001130 <getDistance>
 80014a2:	ed87 0a02 	vstr	s0, [r7, #8]
			front_dist = getDistance(ADC_Read(&hadc1, ADC_CHANNEL_2));
 80014a6:	2102      	movs	r1, #2
 80014a8:	484b      	ldr	r0, [pc, #300]	; (80015d8 <main+0x1fc>)
 80014aa:	f7ff fde5 	bl	8001078 <ADC_Read>
 80014ae:	4603      	mov	r3, r0
 80014b0:	ee07 3a90 	vmov	s15, r3
 80014b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014b8:	eeb0 0a67 	vmov.f32	s0, s15
 80014bc:	f7ff fe38 	bl	8001130 <getDistance>
 80014c0:	ed87 0a01 	vstr	s0, [r7, #4]
			right_dist = getDistance(ADC_Read(&hadc1, ADC_CHANNEL_4));
 80014c4:	2104      	movs	r1, #4
 80014c6:	4844      	ldr	r0, [pc, #272]	; (80015d8 <main+0x1fc>)
 80014c8:	f7ff fdd6 	bl	8001078 <ADC_Read>
 80014cc:	4603      	mov	r3, r0
 80014ce:	ee07 3a90 	vmov	s15, r3
 80014d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014d6:	eeb0 0a67 	vmov.f32	s0, s15
 80014da:	f7ff fe29 	bl	8001130 <getDistance>
 80014de:	ed87 0a00 	vstr	s0, [r7]


			// Store distance values to know which turn position to favor
			if(left_stored_dist > 0 && right_stored_dist > 0) {
 80014e2:	edd7 7a05 	vldr	s15, [r7, #20]
 80014e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ee:	dd27      	ble.n	8001540 <main+0x164>
 80014f0:	edd7 7a04 	vldr	s15, [r7, #16]
 80014f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014fc:	dd20      	ble.n	8001540 <main+0x164>
				left_stored_dist += left_dist;
 80014fe:	ed97 7a05 	vldr	s14, [r7, #20]
 8001502:	edd7 7a02 	vldr	s15, [r7, #8]
 8001506:	ee77 7a27 	vadd.f32	s15, s14, s15
 800150a:	edc7 7a05 	vstr	s15, [r7, #20]
				right_stored_dist += right_dist;
 800150e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001512:	edd7 7a00 	vldr	s15, [r7]
 8001516:	ee77 7a27 	vadd.f32	s15, s14, s15
 800151a:	edc7 7a04 	vstr	s15, [r7, #16]

				left_stored_dist /= 2;
 800151e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001522:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001526:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800152a:	edc7 7a05 	vstr	s15, [r7, #20]
				right_stored_dist /= 2;
 800152e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001532:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001536:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800153a:	edc7 7a04 	vstr	s15, [r7, #16]
 800153e:	e003      	b.n	8001548 <main+0x16c>
			} else {
				left_stored_dist = left_dist;
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	617b      	str	r3, [r7, #20]
				right_stored_dist = right_dist;
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	613b      	str	r3, [r7, #16]
			}

			if(front_dist < 15) {
 8001548:	edd7 7a01 	vldr	s15, [r7, #4]
 800154c:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8001550:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001558:	d529      	bpl.n	80015ae <main+0x1d2>
				setMotorSpeed(255, 255);
 800155a:	21ff      	movs	r1, #255	; 0xff
 800155c:	20ff      	movs	r0, #255	; 0xff
 800155e:	f7ff fefb 	bl	8001358 <setMotorSpeed>
				HAL_Delay(1000);
 8001562:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001566:	f000 fd7b 	bl	8002060 <HAL_Delay>

				if(left_stored_dist < right_stored_dist) {
 800156a:	ed97 7a05 	vldr	s14, [r7, #20]
 800156e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001572:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800157a:	d505      	bpl.n	8001588 <main+0x1ac>
					setMotorSpeed(-255, 255);
 800157c:	21ff      	movs	r1, #255	; 0xff
 800157e:	f06f 00fe 	mvn.w	r0, #254	; 0xfe
 8001582:	f7ff fee9 	bl	8001358 <setMotorSpeed>
 8001586:	e00d      	b.n	80015a4 <main+0x1c8>
				} else if(left_stored_dist > right_stored_dist) {
 8001588:	ed97 7a05 	vldr	s14, [r7, #20]
 800158c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001590:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001598:	dd04      	ble.n	80015a4 <main+0x1c8>
					setMotorSpeed(255, -255);
 800159a:	f06f 01fe 	mvn.w	r1, #254	; 0xfe
 800159e:	20ff      	movs	r0, #255	; 0xff
 80015a0:	f7ff feda 	bl	8001358 <setMotorSpeed>
				}

				HAL_Delay(300);
 80015a4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80015a8:	f000 fd5a 	bl	8002060 <HAL_Delay>
 80015ac:	e73f      	b.n	800142e <main+0x52>
			} else {
				steerBoat(left_dist, front_dist, right_dist);
 80015ae:	ed97 1a00 	vldr	s2, [r7]
 80015b2:	edd7 0a01 	vldr	s1, [r7, #4]
 80015b6:	ed97 0a02 	vldr	s0, [r7, #8]
 80015ba:	f7ff fe71 	bl	80012a0 <steerBoat>
 80015be:	e736      	b.n	800142e <main+0x52>
			}

		} else {
			setMotorSpeed(0, 0);
 80015c0:	2100      	movs	r1, #0
 80015c2:	2000      	movs	r0, #0
 80015c4:	f7ff fec8 	bl	8001358 <setMotorSpeed>
		powerBtnState = HAL_GPIO_ReadPin(POWER_BTN_GPIO_Port, POWER_BTN_Pin);
 80015c8:	e731      	b.n	800142e <main+0x52>
 80015ca:	bf00      	nop
 80015cc:	2000024c 	.word	0x2000024c
 80015d0:	20000298 	.word	0x20000298
 80015d4:	20000374 	.word	0x20000374
 80015d8:	200001fc 	.word	0x200001fc

080015dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b096      	sub	sp, #88	; 0x58
 80015e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015e6:	2228      	movs	r2, #40	; 0x28
 80015e8:	2100      	movs	r1, #0
 80015ea:	4618      	mov	r0, r3
 80015ec:	f004 feec 	bl	80063c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015f0:	f107 031c 	add.w	r3, r7, #28
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	605a      	str	r2, [r3, #4]
 80015fa:	609a      	str	r2, [r3, #8]
 80015fc:	60da      	str	r2, [r3, #12]
 80015fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001600:	1d3b      	adds	r3, r7, #4
 8001602:	2200      	movs	r2, #0
 8001604:	601a      	str	r2, [r3, #0]
 8001606:	605a      	str	r2, [r3, #4]
 8001608:	609a      	str	r2, [r3, #8]
 800160a:	60da      	str	r2, [r3, #12]
 800160c:	611a      	str	r2, [r3, #16]
 800160e:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001610:	2302      	movs	r3, #2
 8001612:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001614:	2301      	movs	r3, #1
 8001616:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001618:	2310      	movs	r3, #16
 800161a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800161c:	2300      	movs	r3, #0
 800161e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001620:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001624:	4618      	mov	r0, r3
 8001626:	f001 ff3b 	bl	80034a0 <HAL_RCC_OscConfig>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001630:	f000 fa48 	bl	8001ac4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001634:	230f      	movs	r3, #15
 8001636:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001638:	2300      	movs	r3, #0
 800163a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800163c:	2300      	movs	r3, #0
 800163e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001640:	2300      	movs	r3, #0
 8001642:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001644:	2300      	movs	r3, #0
 8001646:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001648:	f107 031c 	add.w	r3, r7, #28
 800164c:	2100      	movs	r1, #0
 800164e:	4618      	mov	r0, r3
 8001650:	f002 ff64 	bl	800451c <HAL_RCC_ClockConfig>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800165a:	f000 fa33 	bl	8001ac4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 800165e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001662:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8001664:	2300      	movs	r3, #0
 8001666:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001668:	1d3b      	adds	r3, r7, #4
 800166a:	4618      	mov	r0, r3
 800166c:	f003 f98c 	bl	8004988 <HAL_RCCEx_PeriphCLKConfig>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001676:	f000 fa25 	bl	8001ac4 <Error_Handler>
  }
}
 800167a:	bf00      	nop
 800167c:	3758      	adds	r7, #88	; 0x58
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
	...

08001684 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b08a      	sub	sp, #40	; 0x28
 8001688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800168a:	f107 031c 	add.w	r3, r7, #28
 800168e:	2200      	movs	r2, #0
 8001690:	601a      	str	r2, [r3, #0]
 8001692:	605a      	str	r2, [r3, #4]
 8001694:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001696:	1d3b      	adds	r3, r7, #4
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	605a      	str	r2, [r3, #4]
 800169e:	609a      	str	r2, [r3, #8]
 80016a0:	60da      	str	r2, [r3, #12]
 80016a2:	611a      	str	r2, [r3, #16]
 80016a4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80016a6:	4b2e      	ldr	r3, [pc, #184]	; (8001760 <MX_ADC1_Init+0xdc>)
 80016a8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80016ac:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80016ae:	4b2c      	ldr	r3, [pc, #176]	; (8001760 <MX_ADC1_Init+0xdc>)
 80016b0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80016b4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80016b6:	4b2a      	ldr	r3, [pc, #168]	; (8001760 <MX_ADC1_Init+0xdc>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80016bc:	4b28      	ldr	r3, [pc, #160]	; (8001760 <MX_ADC1_Init+0xdc>)
 80016be:	2200      	movs	r2, #0
 80016c0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80016c2:	4b27      	ldr	r3, [pc, #156]	; (8001760 <MX_ADC1_Init+0xdc>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80016c8:	4b25      	ldr	r3, [pc, #148]	; (8001760 <MX_ADC1_Init+0xdc>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80016d0:	4b23      	ldr	r3, [pc, #140]	; (8001760 <MX_ADC1_Init+0xdc>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016d6:	4b22      	ldr	r3, [pc, #136]	; (8001760 <MX_ADC1_Init+0xdc>)
 80016d8:	2201      	movs	r2, #1
 80016da:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016dc:	4b20      	ldr	r3, [pc, #128]	; (8001760 <MX_ADC1_Init+0xdc>)
 80016de:	2200      	movs	r2, #0
 80016e0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80016e2:	4b1f      	ldr	r3, [pc, #124]	; (8001760 <MX_ADC1_Init+0xdc>)
 80016e4:	2201      	movs	r2, #1
 80016e6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80016e8:	4b1d      	ldr	r3, [pc, #116]	; (8001760 <MX_ADC1_Init+0xdc>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80016f0:	4b1b      	ldr	r3, [pc, #108]	; (8001760 <MX_ADC1_Init+0xdc>)
 80016f2:	2204      	movs	r2, #4
 80016f4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80016f6:	4b1a      	ldr	r3, [pc, #104]	; (8001760 <MX_ADC1_Init+0xdc>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80016fc:	4b18      	ldr	r3, [pc, #96]	; (8001760 <MX_ADC1_Init+0xdc>)
 80016fe:	2200      	movs	r2, #0
 8001700:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001702:	4817      	ldr	r0, [pc, #92]	; (8001760 <MX_ADC1_Init+0xdc>)
 8001704:	f000 fcd0 	bl	80020a8 <HAL_ADC_Init>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800170e:	f000 f9d9 	bl	8001ac4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001712:	2300      	movs	r3, #0
 8001714:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001716:	f107 031c 	add.w	r3, r7, #28
 800171a:	4619      	mov	r1, r3
 800171c:	4810      	ldr	r0, [pc, #64]	; (8001760 <MX_ADC1_Init+0xdc>)
 800171e:	f001 faa7 	bl	8002c70 <HAL_ADCEx_MultiModeConfigChannel>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8001728:	f000 f9cc 	bl	8001ac4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800172c:	2301      	movs	r3, #1
 800172e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001730:	2301      	movs	r3, #1
 8001732:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001734:	2300      	movs	r3, #0
 8001736:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001738:	2300      	movs	r3, #0
 800173a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800173c:	2300      	movs	r3, #0
 800173e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001740:	2300      	movs	r3, #0
 8001742:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001744:	1d3b      	adds	r3, r7, #4
 8001746:	4619      	mov	r1, r3
 8001748:	4805      	ldr	r0, [pc, #20]	; (8001760 <MX_ADC1_Init+0xdc>)
 800174a:	f000 ffd1 	bl	80026f0 <HAL_ADC_ConfigChannel>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 8001754:	f000 f9b6 	bl	8001ac4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001758:	bf00      	nop
 800175a:	3728      	adds	r7, #40	; 0x28
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	200001fc 	.word	0x200001fc

08001764 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b09a      	sub	sp, #104	; 0x68
 8001768:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800176a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800176e:	2200      	movs	r2, #0
 8001770:	601a      	str	r2, [r3, #0]
 8001772:	605a      	str	r2, [r3, #4]
 8001774:	609a      	str	r2, [r3, #8]
 8001776:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001778:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]
 8001780:	605a      	str	r2, [r3, #4]
 8001782:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001784:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001788:	2200      	movs	r2, #0
 800178a:	601a      	str	r2, [r3, #0]
 800178c:	605a      	str	r2, [r3, #4]
 800178e:	609a      	str	r2, [r3, #8]
 8001790:	60da      	str	r2, [r3, #12]
 8001792:	611a      	str	r2, [r3, #16]
 8001794:	615a      	str	r2, [r3, #20]
 8001796:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001798:	1d3b      	adds	r3, r7, #4
 800179a:	222c      	movs	r2, #44	; 0x2c
 800179c:	2100      	movs	r1, #0
 800179e:	4618      	mov	r0, r3
 80017a0:	f004 fe12 	bl	80063c8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80017a4:	4b49      	ldr	r3, [pc, #292]	; (80018cc <MX_TIM1_Init+0x168>)
 80017a6:	4a4a      	ldr	r2, [pc, #296]	; (80018d0 <MX_TIM1_Init+0x16c>)
 80017a8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 625-1;
 80017aa:	4b48      	ldr	r3, [pc, #288]	; (80018cc <MX_TIM1_Init+0x168>)
 80017ac:	f44f 721c 	mov.w	r2, #624	; 0x270
 80017b0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017b2:	4b46      	ldr	r3, [pc, #280]	; (80018cc <MX_TIM1_Init+0x168>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 256-1;
 80017b8:	4b44      	ldr	r3, [pc, #272]	; (80018cc <MX_TIM1_Init+0x168>)
 80017ba:	22ff      	movs	r2, #255	; 0xff
 80017bc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017be:	4b43      	ldr	r3, [pc, #268]	; (80018cc <MX_TIM1_Init+0x168>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80017c4:	4b41      	ldr	r3, [pc, #260]	; (80018cc <MX_TIM1_Init+0x168>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80017ca:	4b40      	ldr	r3, [pc, #256]	; (80018cc <MX_TIM1_Init+0x168>)
 80017cc:	2280      	movs	r2, #128	; 0x80
 80017ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80017d0:	483e      	ldr	r0, [pc, #248]	; (80018cc <MX_TIM1_Init+0x168>)
 80017d2:	f003 f9ff 	bl	8004bd4 <HAL_TIM_Base_Init>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80017dc:	f000 f972 	bl	8001ac4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017e4:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80017e6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80017ea:	4619      	mov	r1, r3
 80017ec:	4837      	ldr	r0, [pc, #220]	; (80018cc <MX_TIM1_Init+0x168>)
 80017ee:	f003 fcff 	bl	80051f0 <HAL_TIM_ConfigClockSource>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d001      	beq.n	80017fc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80017f8:	f000 f964 	bl	8001ac4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80017fc:	4833      	ldr	r0, [pc, #204]	; (80018cc <MX_TIM1_Init+0x168>)
 80017fe:	f003 fa95 	bl	8004d2c <HAL_TIM_PWM_Init>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001808:	f000 f95c 	bl	8001ac4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800180c:	2300      	movs	r3, #0
 800180e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001810:	2300      	movs	r3, #0
 8001812:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001814:	2300      	movs	r3, #0
 8001816:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001818:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800181c:	4619      	mov	r1, r3
 800181e:	482b      	ldr	r0, [pc, #172]	; (80018cc <MX_TIM1_Init+0x168>)
 8001820:	f004 f98e 	bl	8005b40 <HAL_TIMEx_MasterConfigSynchronization>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800182a:	f000 f94b 	bl	8001ac4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800182e:	2360      	movs	r3, #96	; 0x60
 8001830:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001832:	2300      	movs	r3, #0
 8001834:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001836:	2300      	movs	r3, #0
 8001838:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800183a:	2300      	movs	r3, #0
 800183c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800183e:	2300      	movs	r3, #0
 8001840:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001842:	2300      	movs	r3, #0
 8001844:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001846:	2300      	movs	r3, #0
 8001848:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800184a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800184e:	2200      	movs	r2, #0
 8001850:	4619      	mov	r1, r3
 8001852:	481e      	ldr	r0, [pc, #120]	; (80018cc <MX_TIM1_Init+0x168>)
 8001854:	f003 fbb8 	bl	8004fc8 <HAL_TIM_PWM_ConfigChannel>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800185e:	f000 f931 	bl	8001ac4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001862:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001866:	2204      	movs	r2, #4
 8001868:	4619      	mov	r1, r3
 800186a:	4818      	ldr	r0, [pc, #96]	; (80018cc <MX_TIM1_Init+0x168>)
 800186c:	f003 fbac 	bl	8004fc8 <HAL_TIM_PWM_ConfigChannel>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001876:	f000 f925 	bl	8001ac4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800187a:	2300      	movs	r3, #0
 800187c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800187e:	2300      	movs	r3, #0
 8001880:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001882:	2300      	movs	r3, #0
 8001884:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001886:	2300      	movs	r3, #0
 8001888:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800188a:	2300      	movs	r3, #0
 800188c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800188e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001892:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001894:	2300      	movs	r3, #0
 8001896:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001898:	2300      	movs	r3, #0
 800189a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800189c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018a0:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80018a2:	2300      	movs	r3, #0
 80018a4:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80018a6:	2300      	movs	r3, #0
 80018a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80018aa:	1d3b      	adds	r3, r7, #4
 80018ac:	4619      	mov	r1, r3
 80018ae:	4807      	ldr	r0, [pc, #28]	; (80018cc <MX_TIM1_Init+0x168>)
 80018b0:	f004 f9b4 	bl	8005c1c <HAL_TIMEx_ConfigBreakDeadTime>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 80018ba:	f000 f903 	bl	8001ac4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80018be:	4803      	ldr	r0, [pc, #12]	; (80018cc <MX_TIM1_Init+0x168>)
 80018c0:	f000 f99a 	bl	8001bf8 <HAL_TIM_MspPostInit>

}
 80018c4:	bf00      	nop
 80018c6:	3768      	adds	r7, #104	; 0x68
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	2000024c 	.word	0x2000024c
 80018d0:	40012c00 	.word	0x40012c00

080018d4 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b092      	sub	sp, #72	; 0x48
 80018d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80018da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018de:	2200      	movs	r2, #0
 80018e0:	601a      	str	r2, [r3, #0]
 80018e2:	605a      	str	r2, [r3, #4]
 80018e4:	609a      	str	r2, [r3, #8]
 80018e6:	60da      	str	r2, [r3, #12]
 80018e8:	611a      	str	r2, [r3, #16]
 80018ea:	615a      	str	r2, [r3, #20]
 80018ec:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80018ee:	463b      	mov	r3, r7
 80018f0:	222c      	movs	r2, #44	; 0x2c
 80018f2:	2100      	movs	r1, #0
 80018f4:	4618      	mov	r0, r3
 80018f6:	f004 fd67 	bl	80063c8 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80018fa:	4b31      	ldr	r3, [pc, #196]	; (80019c0 <MX_TIM17_Init+0xec>)
 80018fc:	4a31      	ldr	r2, [pc, #196]	; (80019c4 <MX_TIM17_Init+0xf0>)
 80018fe:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 8-1;
 8001900:	4b2f      	ldr	r3, [pc, #188]	; (80019c0 <MX_TIM17_Init+0xec>)
 8001902:	2207      	movs	r2, #7
 8001904:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001906:	4b2e      	ldr	r3, [pc, #184]	; (80019c0 <MX_TIM17_Init+0xec>)
 8001908:	2200      	movs	r2, #0
 800190a:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 20000-1;
 800190c:	4b2c      	ldr	r3, [pc, #176]	; (80019c0 <MX_TIM17_Init+0xec>)
 800190e:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001912:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001914:	4b2a      	ldr	r3, [pc, #168]	; (80019c0 <MX_TIM17_Init+0xec>)
 8001916:	2200      	movs	r2, #0
 8001918:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800191a:	4b29      	ldr	r3, [pc, #164]	; (80019c0 <MX_TIM17_Init+0xec>)
 800191c:	2200      	movs	r2, #0
 800191e:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001920:	4b27      	ldr	r3, [pc, #156]	; (80019c0 <MX_TIM17_Init+0xec>)
 8001922:	2280      	movs	r2, #128	; 0x80
 8001924:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001926:	4826      	ldr	r0, [pc, #152]	; (80019c0 <MX_TIM17_Init+0xec>)
 8001928:	f003 f954 	bl	8004bd4 <HAL_TIM_Base_Init>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8001932:	f000 f8c7 	bl	8001ac4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8001936:	4822      	ldr	r0, [pc, #136]	; (80019c0 <MX_TIM17_Init+0xec>)
 8001938:	f003 f9f8 	bl	8004d2c <HAL_TIM_PWM_Init>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8001942:	f000 f8bf 	bl	8001ac4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001946:	2360      	movs	r3, #96	; 0x60
 8001948:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 800194a:	2300      	movs	r3, #0
 800194c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800194e:	2300      	movs	r3, #0
 8001950:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001952:	2300      	movs	r3, #0
 8001954:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001956:	2300      	movs	r3, #0
 8001958:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800195a:	2300      	movs	r3, #0
 800195c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800195e:	2300      	movs	r3, #0
 8001960:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001962:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001966:	2200      	movs	r2, #0
 8001968:	4619      	mov	r1, r3
 800196a:	4815      	ldr	r0, [pc, #84]	; (80019c0 <MX_TIM17_Init+0xec>)
 800196c:	f003 fb2c 	bl	8004fc8 <HAL_TIM_PWM_ConfigChannel>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 8001976:	f000 f8a5 	bl	8001ac4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800197a:	2300      	movs	r3, #0
 800197c:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800197e:	2300      	movs	r3, #0
 8001980:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001982:	2300      	movs	r3, #0
 8001984:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001986:	2300      	movs	r3, #0
 8001988:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800198a:	2300      	movs	r3, #0
 800198c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800198e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001992:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001994:	2300      	movs	r3, #0
 8001996:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001998:	2300      	movs	r3, #0
 800199a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 800199c:	463b      	mov	r3, r7
 800199e:	4619      	mov	r1, r3
 80019a0:	4807      	ldr	r0, [pc, #28]	; (80019c0 <MX_TIM17_Init+0xec>)
 80019a2:	f004 f93b 	bl	8005c1c <HAL_TIMEx_ConfigBreakDeadTime>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 80019ac:	f000 f88a 	bl	8001ac4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 80019b0:	4803      	ldr	r0, [pc, #12]	; (80019c0 <MX_TIM17_Init+0xec>)
 80019b2:	f000 f921 	bl	8001bf8 <HAL_TIM_MspPostInit>

}
 80019b6:	bf00      	nop
 80019b8:	3748      	adds	r7, #72	; 0x48
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	20000298 	.word	0x20000298
 80019c4:	40014800 	.word	0x40014800

080019c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80019cc:	4b14      	ldr	r3, [pc, #80]	; (8001a20 <MX_USART2_UART_Init+0x58>)
 80019ce:	4a15      	ldr	r2, [pc, #84]	; (8001a24 <MX_USART2_UART_Init+0x5c>)
 80019d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80019d2:	4b13      	ldr	r3, [pc, #76]	; (8001a20 <MX_USART2_UART_Init+0x58>)
 80019d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019da:	4b11      	ldr	r3, [pc, #68]	; (8001a20 <MX_USART2_UART_Init+0x58>)
 80019dc:	2200      	movs	r2, #0
 80019de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80019e0:	4b0f      	ldr	r3, [pc, #60]	; (8001a20 <MX_USART2_UART_Init+0x58>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80019e6:	4b0e      	ldr	r3, [pc, #56]	; (8001a20 <MX_USART2_UART_Init+0x58>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80019ec:	4b0c      	ldr	r3, [pc, #48]	; (8001a20 <MX_USART2_UART_Init+0x58>)
 80019ee:	220c      	movs	r2, #12
 80019f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019f2:	4b0b      	ldr	r3, [pc, #44]	; (8001a20 <MX_USART2_UART_Init+0x58>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019f8:	4b09      	ldr	r3, [pc, #36]	; (8001a20 <MX_USART2_UART_Init+0x58>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019fe:	4b08      	ldr	r3, [pc, #32]	; (8001a20 <MX_USART2_UART_Init+0x58>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a04:	4b06      	ldr	r3, [pc, #24]	; (8001a20 <MX_USART2_UART_Init+0x58>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a0a:	4805      	ldr	r0, [pc, #20]	; (8001a20 <MX_USART2_UART_Init+0x58>)
 8001a0c:	f004 f97e 	bl	8005d0c <HAL_UART_Init>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001a16:	f000 f855 	bl	8001ac4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a1a:	bf00      	nop
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	200002e4 	.word	0x200002e4
 8001a24:	40004400 	.word	0x40004400

08001a28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b088      	sub	sp, #32
 8001a2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a2e:	f107 030c 	add.w	r3, r7, #12
 8001a32:	2200      	movs	r2, #0
 8001a34:	601a      	str	r2, [r3, #0]
 8001a36:	605a      	str	r2, [r3, #4]
 8001a38:	609a      	str	r2, [r3, #8]
 8001a3a:	60da      	str	r2, [r3, #12]
 8001a3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a3e:	4b20      	ldr	r3, [pc, #128]	; (8001ac0 <MX_GPIO_Init+0x98>)
 8001a40:	695b      	ldr	r3, [r3, #20]
 8001a42:	4a1f      	ldr	r2, [pc, #124]	; (8001ac0 <MX_GPIO_Init+0x98>)
 8001a44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a48:	6153      	str	r3, [r2, #20]
 8001a4a:	4b1d      	ldr	r3, [pc, #116]	; (8001ac0 <MX_GPIO_Init+0x98>)
 8001a4c:	695b      	ldr	r3, [r3, #20]
 8001a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a52:	60bb      	str	r3, [r7, #8]
 8001a54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a56:	4b1a      	ldr	r3, [pc, #104]	; (8001ac0 <MX_GPIO_Init+0x98>)
 8001a58:	695b      	ldr	r3, [r3, #20]
 8001a5a:	4a19      	ldr	r2, [pc, #100]	; (8001ac0 <MX_GPIO_Init+0x98>)
 8001a5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a60:	6153      	str	r3, [r2, #20]
 8001a62:	4b17      	ldr	r3, [pc, #92]	; (8001ac0 <MX_GPIO_Init+0x98>)
 8001a64:	695b      	ldr	r3, [r3, #20]
 8001a66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a6a:	607b      	str	r3, [r7, #4]
 8001a6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RIGHT_DM_PHASE_Pin|LEFT_DM_PHASE_Pin, GPIO_PIN_RESET);
 8001a6e:	2200      	movs	r2, #0
 8001a70:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8001a74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a78:	f001 fcfa 	bl	8003470 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RIGHT_DM_PHASE_Pin LEFT_DM_PHASE_Pin */
  GPIO_InitStruct.Pin = RIGHT_DM_PHASE_Pin|LEFT_DM_PHASE_Pin;
 8001a7c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001a80:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a82:	2301      	movs	r3, #1
 8001a84:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a86:	2300      	movs	r3, #0
 8001a88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a8e:	f107 030c 	add.w	r3, r7, #12
 8001a92:	4619      	mov	r1, r3
 8001a94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a98:	f001 fb60 	bl	800315c <HAL_GPIO_Init>

  /*Configure GPIO pin : POWER_BTN_Pin */
  GPIO_InitStruct.Pin = POWER_BTN_Pin;
 8001a9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001aa0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(POWER_BTN_GPIO_Port, &GPIO_InitStruct);
 8001aaa:	f107 030c 	add.w	r3, r7, #12
 8001aae:	4619      	mov	r1, r3
 8001ab0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ab4:	f001 fb52 	bl	800315c <HAL_GPIO_Init>

}
 8001ab8:	bf00      	nop
 8001aba:	3720      	adds	r7, #32
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	40021000 	.word	0x40021000

08001ac4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ac8:	b672      	cpsid	i
}
 8001aca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001acc:	e7fe      	b.n	8001acc <Error_Handler+0x8>
	...

08001ad0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ad6:	4b0f      	ldr	r3, [pc, #60]	; (8001b14 <HAL_MspInit+0x44>)
 8001ad8:	699b      	ldr	r3, [r3, #24]
 8001ada:	4a0e      	ldr	r2, [pc, #56]	; (8001b14 <HAL_MspInit+0x44>)
 8001adc:	f043 0301 	orr.w	r3, r3, #1
 8001ae0:	6193      	str	r3, [r2, #24]
 8001ae2:	4b0c      	ldr	r3, [pc, #48]	; (8001b14 <HAL_MspInit+0x44>)
 8001ae4:	699b      	ldr	r3, [r3, #24]
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	607b      	str	r3, [r7, #4]
 8001aec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aee:	4b09      	ldr	r3, [pc, #36]	; (8001b14 <HAL_MspInit+0x44>)
 8001af0:	69db      	ldr	r3, [r3, #28]
 8001af2:	4a08      	ldr	r2, [pc, #32]	; (8001b14 <HAL_MspInit+0x44>)
 8001af4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001af8:	61d3      	str	r3, [r2, #28]
 8001afa:	4b06      	ldr	r3, [pc, #24]	; (8001b14 <HAL_MspInit+0x44>)
 8001afc:	69db      	ldr	r3, [r3, #28]
 8001afe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b02:	603b      	str	r3, [r7, #0]
 8001b04:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b06:	bf00      	nop
 8001b08:	370c      	adds	r7, #12
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	40021000 	.word	0x40021000

08001b18 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b08a      	sub	sp, #40	; 0x28
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b20:	f107 0314 	add.w	r3, r7, #20
 8001b24:	2200      	movs	r2, #0
 8001b26:	601a      	str	r2, [r3, #0]
 8001b28:	605a      	str	r2, [r3, #4]
 8001b2a:	609a      	str	r2, [r3, #8]
 8001b2c:	60da      	str	r2, [r3, #12]
 8001b2e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b38:	d124      	bne.n	8001b84 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001b3a:	4b14      	ldr	r3, [pc, #80]	; (8001b8c <HAL_ADC_MspInit+0x74>)
 8001b3c:	695b      	ldr	r3, [r3, #20]
 8001b3e:	4a13      	ldr	r2, [pc, #76]	; (8001b8c <HAL_ADC_MspInit+0x74>)
 8001b40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b44:	6153      	str	r3, [r2, #20]
 8001b46:	4b11      	ldr	r3, [pc, #68]	; (8001b8c <HAL_ADC_MspInit+0x74>)
 8001b48:	695b      	ldr	r3, [r3, #20]
 8001b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b4e:	613b      	str	r3, [r7, #16]
 8001b50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b52:	4b0e      	ldr	r3, [pc, #56]	; (8001b8c <HAL_ADC_MspInit+0x74>)
 8001b54:	695b      	ldr	r3, [r3, #20]
 8001b56:	4a0d      	ldr	r2, [pc, #52]	; (8001b8c <HAL_ADC_MspInit+0x74>)
 8001b58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b5c:	6153      	str	r3, [r2, #20]
 8001b5e:	4b0b      	ldr	r3, [pc, #44]	; (8001b8c <HAL_ADC_MspInit+0x74>)
 8001b60:	695b      	ldr	r3, [r3, #20]
 8001b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b66:	60fb      	str	r3, [r7, #12]
 8001b68:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = IR_LEFT_Pin|IR_CENTER_Pin|IR_RIGHT_Pin;
 8001b6a:	230b      	movs	r3, #11
 8001b6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b72:	2300      	movs	r3, #0
 8001b74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b76:	f107 0314 	add.w	r3, r7, #20
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b80:	f001 faec 	bl	800315c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001b84:	bf00      	nop
 8001b86:	3728      	adds	r7, #40	; 0x28
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	40021000 	.word	0x40021000

08001b90 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b085      	sub	sp, #20
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a13      	ldr	r2, [pc, #76]	; (8001bec <HAL_TIM_Base_MspInit+0x5c>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d10c      	bne.n	8001bbc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ba2:	4b13      	ldr	r3, [pc, #76]	; (8001bf0 <HAL_TIM_Base_MspInit+0x60>)
 8001ba4:	699b      	ldr	r3, [r3, #24]
 8001ba6:	4a12      	ldr	r2, [pc, #72]	; (8001bf0 <HAL_TIM_Base_MspInit+0x60>)
 8001ba8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001bac:	6193      	str	r3, [r2, #24]
 8001bae:	4b10      	ldr	r3, [pc, #64]	; (8001bf0 <HAL_TIM_Base_MspInit+0x60>)
 8001bb0:	699b      	ldr	r3, [r3, #24]
 8001bb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001bb6:	60fb      	str	r3, [r7, #12]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001bba:	e010      	b.n	8001bde <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM17)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a0c      	ldr	r2, [pc, #48]	; (8001bf4 <HAL_TIM_Base_MspInit+0x64>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d10b      	bne.n	8001bde <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001bc6:	4b0a      	ldr	r3, [pc, #40]	; (8001bf0 <HAL_TIM_Base_MspInit+0x60>)
 8001bc8:	699b      	ldr	r3, [r3, #24]
 8001bca:	4a09      	ldr	r2, [pc, #36]	; (8001bf0 <HAL_TIM_Base_MspInit+0x60>)
 8001bcc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bd0:	6193      	str	r3, [r2, #24]
 8001bd2:	4b07      	ldr	r3, [pc, #28]	; (8001bf0 <HAL_TIM_Base_MspInit+0x60>)
 8001bd4:	699b      	ldr	r3, [r3, #24]
 8001bd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bda:	60bb      	str	r3, [r7, #8]
 8001bdc:	68bb      	ldr	r3, [r7, #8]
}
 8001bde:	bf00      	nop
 8001be0:	3714      	adds	r7, #20
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	40012c00 	.word	0x40012c00
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	40014800 	.word	0x40014800

08001bf8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b08a      	sub	sp, #40	; 0x28
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c00:	f107 0314 	add.w	r3, r7, #20
 8001c04:	2200      	movs	r2, #0
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	605a      	str	r2, [r3, #4]
 8001c0a:	609a      	str	r2, [r3, #8]
 8001c0c:	60da      	str	r2, [r3, #12]
 8001c0e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a23      	ldr	r2, [pc, #140]	; (8001ca4 <HAL_TIM_MspPostInit+0xac>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d11e      	bne.n	8001c58 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c1a:	4b23      	ldr	r3, [pc, #140]	; (8001ca8 <HAL_TIM_MspPostInit+0xb0>)
 8001c1c:	695b      	ldr	r3, [r3, #20]
 8001c1e:	4a22      	ldr	r2, [pc, #136]	; (8001ca8 <HAL_TIM_MspPostInit+0xb0>)
 8001c20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c24:	6153      	str	r3, [r2, #20]
 8001c26:	4b20      	ldr	r3, [pc, #128]	; (8001ca8 <HAL_TIM_MspPostInit+0xb0>)
 8001c28:	695b      	ldr	r3, [r3, #20]
 8001c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c2e:	613b      	str	r3, [r7, #16]
 8001c30:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = RIGHT_DM_ENBL_Pin|LEFT_DM_ENBL_Pin;
 8001c32:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c38:	2302      	movs	r3, #2
 8001c3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c40:	2300      	movs	r3, #0
 8001c42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001c44:	2306      	movs	r3, #6
 8001c46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c48:	f107 0314 	add.w	r3, r7, #20
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c52:	f001 fa83 	bl	800315c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8001c56:	e020      	b.n	8001c9a <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM17)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a13      	ldr	r2, [pc, #76]	; (8001cac <HAL_TIM_MspPostInit+0xb4>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d11b      	bne.n	8001c9a <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c62:	4b11      	ldr	r3, [pc, #68]	; (8001ca8 <HAL_TIM_MspPostInit+0xb0>)
 8001c64:	695b      	ldr	r3, [r3, #20]
 8001c66:	4a10      	ldr	r2, [pc, #64]	; (8001ca8 <HAL_TIM_MspPostInit+0xb0>)
 8001c68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c6c:	6153      	str	r3, [r2, #20]
 8001c6e:	4b0e      	ldr	r3, [pc, #56]	; (8001ca8 <HAL_TIM_MspPostInit+0xb0>)
 8001c70:	695b      	ldr	r3, [r3, #20]
 8001c72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c76:	60fb      	str	r3, [r7, #12]
 8001c78:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SERVO_MOTOR_Pin;
 8001c7a:	2320      	movs	r3, #32
 8001c7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c7e:	2302      	movs	r3, #2
 8001c80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c82:	2300      	movs	r3, #0
 8001c84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c86:	2300      	movs	r3, #0
 8001c88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM17;
 8001c8a:	230a      	movs	r3, #10
 8001c8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SERVO_MOTOR_GPIO_Port, &GPIO_InitStruct);
 8001c8e:	f107 0314 	add.w	r3, r7, #20
 8001c92:	4619      	mov	r1, r3
 8001c94:	4806      	ldr	r0, [pc, #24]	; (8001cb0 <HAL_TIM_MspPostInit+0xb8>)
 8001c96:	f001 fa61 	bl	800315c <HAL_GPIO_Init>
}
 8001c9a:	bf00      	nop
 8001c9c:	3728      	adds	r7, #40	; 0x28
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	40012c00 	.word	0x40012c00
 8001ca8:	40021000 	.word	0x40021000
 8001cac:	40014800 	.word	0x40014800
 8001cb0:	48000400 	.word	0x48000400

08001cb4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b08a      	sub	sp, #40	; 0x28
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cbc:	f107 0314 	add.w	r3, r7, #20
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	601a      	str	r2, [r3, #0]
 8001cc4:	605a      	str	r2, [r3, #4]
 8001cc6:	609a      	str	r2, [r3, #8]
 8001cc8:	60da      	str	r2, [r3, #12]
 8001cca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a18      	ldr	r2, [pc, #96]	; (8001d34 <HAL_UART_MspInit+0x80>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d129      	bne.n	8001d2a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001cd6:	4b18      	ldr	r3, [pc, #96]	; (8001d38 <HAL_UART_MspInit+0x84>)
 8001cd8:	69db      	ldr	r3, [r3, #28]
 8001cda:	4a17      	ldr	r2, [pc, #92]	; (8001d38 <HAL_UART_MspInit+0x84>)
 8001cdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ce0:	61d3      	str	r3, [r2, #28]
 8001ce2:	4b15      	ldr	r3, [pc, #84]	; (8001d38 <HAL_UART_MspInit+0x84>)
 8001ce4:	69db      	ldr	r3, [r3, #28]
 8001ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cea:	613b      	str	r3, [r7, #16]
 8001cec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cee:	4b12      	ldr	r3, [pc, #72]	; (8001d38 <HAL_UART_MspInit+0x84>)
 8001cf0:	695b      	ldr	r3, [r3, #20]
 8001cf2:	4a11      	ldr	r2, [pc, #68]	; (8001d38 <HAL_UART_MspInit+0x84>)
 8001cf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cf8:	6153      	str	r3, [r2, #20]
 8001cfa:	4b0f      	ldr	r3, [pc, #60]	; (8001d38 <HAL_UART_MspInit+0x84>)
 8001cfc:	695b      	ldr	r3, [r3, #20]
 8001cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d02:	60fb      	str	r3, [r7, #12]
 8001d04:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8001d06:	f248 0304 	movw	r3, #32772	; 0x8004
 8001d0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d10:	2300      	movs	r3, #0
 8001d12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d14:	2303      	movs	r3, #3
 8001d16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d18:	2307      	movs	r3, #7
 8001d1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d1c:	f107 0314 	add.w	r3, r7, #20
 8001d20:	4619      	mov	r1, r3
 8001d22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d26:	f001 fa19 	bl	800315c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001d2a:	bf00      	nop
 8001d2c:	3728      	adds	r7, #40	; 0x28
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	40004400 	.word	0x40004400
 8001d38:	40021000 	.word	0x40021000

08001d3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d40:	e7fe      	b.n	8001d40 <NMI_Handler+0x4>

08001d42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d42:	b480      	push	{r7}
 8001d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d46:	e7fe      	b.n	8001d46 <HardFault_Handler+0x4>

08001d48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d4c:	e7fe      	b.n	8001d4c <MemManage_Handler+0x4>

08001d4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d4e:	b480      	push	{r7}
 8001d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d52:	e7fe      	b.n	8001d52 <BusFault_Handler+0x4>

08001d54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d58:	e7fe      	b.n	8001d58 <UsageFault_Handler+0x4>

08001d5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d5e:	bf00      	nop
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d6c:	bf00      	nop
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr

08001d76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d76:	b480      	push	{r7}
 8001d78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d7a:	bf00      	nop
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d88:	f000 f94a 	bl	8002020 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d8c:	bf00      	nop
 8001d8e:	bd80      	pop	{r7, pc}

08001d90 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
	return 1;
 8001d94:	2301      	movs	r3, #1
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <_kill>:

int _kill(int pid, int sig)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001daa:	f004 fae3 	bl	8006374 <__errno>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2216      	movs	r2, #22
 8001db2:	601a      	str	r2, [r3, #0]
	return -1;
 8001db4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3708      	adds	r7, #8
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}

08001dc0 <_exit>:

void _exit (int status)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001dc8:	f04f 31ff 	mov.w	r1, #4294967295
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f7ff ffe7 	bl	8001da0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001dd2:	e7fe      	b.n	8001dd2 <_exit+0x12>

08001dd4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b086      	sub	sp, #24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	60f8      	str	r0, [r7, #12]
 8001ddc:	60b9      	str	r1, [r7, #8]
 8001dde:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001de0:	2300      	movs	r3, #0
 8001de2:	617b      	str	r3, [r7, #20]
 8001de4:	e00a      	b.n	8001dfc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001de6:	f3af 8000 	nop.w
 8001dea:	4601      	mov	r1, r0
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	1c5a      	adds	r2, r3, #1
 8001df0:	60ba      	str	r2, [r7, #8]
 8001df2:	b2ca      	uxtb	r2, r1
 8001df4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	3301      	adds	r3, #1
 8001dfa:	617b      	str	r3, [r7, #20]
 8001dfc:	697a      	ldr	r2, [r7, #20]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	dbf0      	blt.n	8001de6 <_read+0x12>
	}

return len;
 8001e04:	687b      	ldr	r3, [r7, #4]
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3718      	adds	r7, #24
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b086      	sub	sp, #24
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	60f8      	str	r0, [r7, #12]
 8001e16:	60b9      	str	r1, [r7, #8]
 8001e18:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	617b      	str	r3, [r7, #20]
 8001e1e:	e009      	b.n	8001e34 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	1c5a      	adds	r2, r3, #1
 8001e24:	60ba      	str	r2, [r7, #8]
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	3301      	adds	r3, #1
 8001e32:	617b      	str	r3, [r7, #20]
 8001e34:	697a      	ldr	r2, [r7, #20]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	dbf1      	blt.n	8001e20 <_write+0x12>
	}
	return len;
 8001e3c:	687b      	ldr	r3, [r7, #4]
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3718      	adds	r7, #24
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <_close>:

int _close(int file)
{
 8001e46:	b480      	push	{r7}
 8001e48:	b083      	sub	sp, #12
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
	return -1;
 8001e4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	370c      	adds	r7, #12
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr

08001e5e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e5e:	b480      	push	{r7}
 8001e60:	b083      	sub	sp, #12
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
 8001e66:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e6e:	605a      	str	r2, [r3, #4]
	return 0;
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr

08001e7e <_isatty>:

int _isatty(int file)
{
 8001e7e:	b480      	push	{r7}
 8001e80:	b083      	sub	sp, #12
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
	return 1;
 8001e86:	2301      	movs	r3, #1
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b085      	sub	sp, #20
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	60f8      	str	r0, [r7, #12]
 8001e9c:	60b9      	str	r1, [r7, #8]
 8001e9e:	607a      	str	r2, [r7, #4]
	return 0;
 8001ea0:	2300      	movs	r3, #0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3714      	adds	r7, #20
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
	...

08001eb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b086      	sub	sp, #24
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001eb8:	4a14      	ldr	r2, [pc, #80]	; (8001f0c <_sbrk+0x5c>)
 8001eba:	4b15      	ldr	r3, [pc, #84]	; (8001f10 <_sbrk+0x60>)
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ec4:	4b13      	ldr	r3, [pc, #76]	; (8001f14 <_sbrk+0x64>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d102      	bne.n	8001ed2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ecc:	4b11      	ldr	r3, [pc, #68]	; (8001f14 <_sbrk+0x64>)
 8001ece:	4a12      	ldr	r2, [pc, #72]	; (8001f18 <_sbrk+0x68>)
 8001ed0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ed2:	4b10      	ldr	r3, [pc, #64]	; (8001f14 <_sbrk+0x64>)
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4413      	add	r3, r2
 8001eda:	693a      	ldr	r2, [r7, #16]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d207      	bcs.n	8001ef0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ee0:	f004 fa48 	bl	8006374 <__errno>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	220c      	movs	r2, #12
 8001ee8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001eea:	f04f 33ff 	mov.w	r3, #4294967295
 8001eee:	e009      	b.n	8001f04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ef0:	4b08      	ldr	r3, [pc, #32]	; (8001f14 <_sbrk+0x64>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ef6:	4b07      	ldr	r3, [pc, #28]	; (8001f14 <_sbrk+0x64>)
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4413      	add	r3, r2
 8001efe:	4a05      	ldr	r2, [pc, #20]	; (8001f14 <_sbrk+0x64>)
 8001f00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f02:	68fb      	ldr	r3, [r7, #12]
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3718      	adds	r7, #24
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	20003000 	.word	0x20003000
 8001f10:	00000400 	.word	0x00000400
 8001f14:	20000378 	.word	0x20000378
 8001f18:	20000390 	.word	0x20000390

08001f1c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f20:	4b06      	ldr	r3, [pc, #24]	; (8001f3c <SystemInit+0x20>)
 8001f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f26:	4a05      	ldr	r2, [pc, #20]	; (8001f3c <SystemInit+0x20>)
 8001f28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f30:	bf00      	nop
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop
 8001f3c:	e000ed00 	.word	0xe000ed00

08001f40 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001f40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f78 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f44:	480d      	ldr	r0, [pc, #52]	; (8001f7c <LoopForever+0x6>)
  ldr r1, =_edata
 8001f46:	490e      	ldr	r1, [pc, #56]	; (8001f80 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f48:	4a0e      	ldr	r2, [pc, #56]	; (8001f84 <LoopForever+0xe>)
  movs r3, #0
 8001f4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f4c:	e002      	b.n	8001f54 <LoopCopyDataInit>

08001f4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f52:	3304      	adds	r3, #4

08001f54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f58:	d3f9      	bcc.n	8001f4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f5a:	4a0b      	ldr	r2, [pc, #44]	; (8001f88 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f5c:	4c0b      	ldr	r4, [pc, #44]	; (8001f8c <LoopForever+0x16>)
  movs r3, #0
 8001f5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f60:	e001      	b.n	8001f66 <LoopFillZerobss>

08001f62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f64:	3204      	adds	r2, #4

08001f66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f68:	d3fb      	bcc.n	8001f62 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001f6a:	f7ff ffd7 	bl	8001f1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f6e:	f004 fa07 	bl	8006380 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f72:	f7ff fa33 	bl	80013dc <main>

08001f76 <LoopForever>:

LoopForever:
    b LoopForever
 8001f76:	e7fe      	b.n	8001f76 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001f78:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001f7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f80:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001f84:	0800b97c 	.word	0x0800b97c
  ldr r2, =_sbss
 8001f88:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001f8c:	20000390 	.word	0x20000390

08001f90 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f90:	e7fe      	b.n	8001f90 <ADC1_2_IRQHandler>
	...

08001f94 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f98:	4b08      	ldr	r3, [pc, #32]	; (8001fbc <HAL_Init+0x28>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a07      	ldr	r2, [pc, #28]	; (8001fbc <HAL_Init+0x28>)
 8001f9e:	f043 0310 	orr.w	r3, r3, #16
 8001fa2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fa4:	2003      	movs	r0, #3
 8001fa6:	f001 f8a5 	bl	80030f4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001faa:	2000      	movs	r0, #0
 8001fac:	f000 f808 	bl	8001fc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fb0:	f7ff fd8e 	bl	8001ad0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fb4:	2300      	movs	r3, #0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	40022000 	.word	0x40022000

08001fc0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fc8:	4b12      	ldr	r3, [pc, #72]	; (8002014 <HAL_InitTick+0x54>)
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	4b12      	ldr	r3, [pc, #72]	; (8002018 <HAL_InitTick+0x58>)
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fda:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f001 f8af 	bl	8003142 <HAL_SYSTICK_Config>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d001      	beq.n	8001fee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e00e      	b.n	800200c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2b0f      	cmp	r3, #15
 8001ff2:	d80a      	bhi.n	800200a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	6879      	ldr	r1, [r7, #4]
 8001ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ffc:	f001 f885 	bl	800310a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002000:	4a06      	ldr	r2, [pc, #24]	; (800201c <HAL_InitTick+0x5c>)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002006:	2300      	movs	r3, #0
 8002008:	e000      	b.n	800200c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
}
 800200c:	4618      	mov	r0, r3
 800200e:	3708      	adds	r7, #8
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	20000000 	.word	0x20000000
 8002018:	20000008 	.word	0x20000008
 800201c:	20000004 	.word	0x20000004

08002020 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002024:	4b06      	ldr	r3, [pc, #24]	; (8002040 <HAL_IncTick+0x20>)
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	461a      	mov	r2, r3
 800202a:	4b06      	ldr	r3, [pc, #24]	; (8002044 <HAL_IncTick+0x24>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4413      	add	r3, r2
 8002030:	4a04      	ldr	r2, [pc, #16]	; (8002044 <HAL_IncTick+0x24>)
 8002032:	6013      	str	r3, [r2, #0]
}
 8002034:	bf00      	nop
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop
 8002040:	20000008 	.word	0x20000008
 8002044:	2000037c 	.word	0x2000037c

08002048 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  return uwTick;  
 800204c:	4b03      	ldr	r3, [pc, #12]	; (800205c <HAL_GetTick+0x14>)
 800204e:	681b      	ldr	r3, [r3, #0]
}
 8002050:	4618      	mov	r0, r3
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	2000037c 	.word	0x2000037c

08002060 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002068:	f7ff ffee 	bl	8002048 <HAL_GetTick>
 800206c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002078:	d005      	beq.n	8002086 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800207a:	4b0a      	ldr	r3, [pc, #40]	; (80020a4 <HAL_Delay+0x44>)
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	461a      	mov	r2, r3
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	4413      	add	r3, r2
 8002084:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002086:	bf00      	nop
 8002088:	f7ff ffde 	bl	8002048 <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	68fa      	ldr	r2, [r7, #12]
 8002094:	429a      	cmp	r2, r3
 8002096:	d8f7      	bhi.n	8002088 <HAL_Delay+0x28>
  {
  }
}
 8002098:	bf00      	nop
 800209a:	bf00      	nop
 800209c:	3710      	adds	r7, #16
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	20000008 	.word	0x20000008

080020a8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b09a      	sub	sp, #104	; 0x68
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020b0:	2300      	movs	r3, #0
 80020b2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80020b6:	2300      	movs	r3, #0
 80020b8:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80020ba:	2300      	movs	r3, #0
 80020bc:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d101      	bne.n	80020c8 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e172      	b.n	80023ae <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	691b      	ldr	r3, [r3, #16]
 80020cc:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d2:	f003 0310 	and.w	r3, r3, #16
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d176      	bne.n	80021c8 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d152      	bne.n	8002188 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2200      	movs	r2, #0
 80020ec:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2200      	movs	r2, #0
 80020f2:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2200      	movs	r2, #0
 80020f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f7ff fd0b 	bl	8001b18 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d13b      	bne.n	8002188 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f000 fed7 	bl	8002ec4 <ADC_Disable>
 8002116:	4603      	mov	r3, r0
 8002118:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002120:	f003 0310 	and.w	r3, r3, #16
 8002124:	2b00      	cmp	r3, #0
 8002126:	d12f      	bne.n	8002188 <HAL_ADC_Init+0xe0>
 8002128:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800212c:	2b00      	cmp	r3, #0
 800212e:	d12b      	bne.n	8002188 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002134:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002138:	f023 0302 	bic.w	r3, r3, #2
 800213c:	f043 0202 	orr.w	r2, r3, #2
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	689a      	ldr	r2, [r3, #8]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002152:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	689a      	ldr	r2, [r3, #8]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002162:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002164:	4b94      	ldr	r3, [pc, #592]	; (80023b8 <HAL_ADC_Init+0x310>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a94      	ldr	r2, [pc, #592]	; (80023bc <HAL_ADC_Init+0x314>)
 800216a:	fba2 2303 	umull	r2, r3, r2, r3
 800216e:	0c9a      	lsrs	r2, r3, #18
 8002170:	4613      	mov	r3, r2
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	4413      	add	r3, r2
 8002176:	005b      	lsls	r3, r3, #1
 8002178:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800217a:	e002      	b.n	8002182 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	3b01      	subs	r3, #1
 8002180:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d1f9      	bne.n	800217c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d007      	beq.n	80021a6 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80021a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80021a4:	d110      	bne.n	80021c8 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021aa:	f023 0312 	bic.w	r3, r3, #18
 80021ae:	f043 0210 	orr.w	r2, r3, #16
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ba:	f043 0201 	orr.w	r2, r3, #1
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021cc:	f003 0310 	and.w	r3, r3, #16
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	f040 80df 	bne.w	8002394 <HAL_ADC_Init+0x2ec>
 80021d6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80021da:	2b00      	cmp	r3, #0
 80021dc:	f040 80da 	bne.w	8002394 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	f040 80d2 	bne.w	8002394 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80021f8:	f043 0202 	orr.w	r2, r3, #2
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002200:	4b6f      	ldr	r3, [pc, #444]	; (80023c0 <HAL_ADC_Init+0x318>)
 8002202:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800220c:	d102      	bne.n	8002214 <HAL_ADC_Init+0x16c>
 800220e:	4b6d      	ldr	r3, [pc, #436]	; (80023c4 <HAL_ADC_Init+0x31c>)
 8002210:	60fb      	str	r3, [r7, #12]
 8002212:	e002      	b.n	800221a <HAL_ADC_Init+0x172>
 8002214:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002218:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	f003 0303 	and.w	r3, r3, #3
 8002224:	2b01      	cmp	r3, #1
 8002226:	d108      	bne.n	800223a <HAL_ADC_Init+0x192>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0301 	and.w	r3, r3, #1
 8002232:	2b01      	cmp	r3, #1
 8002234:	d101      	bne.n	800223a <HAL_ADC_Init+0x192>
 8002236:	2301      	movs	r3, #1
 8002238:	e000      	b.n	800223c <HAL_ADC_Init+0x194>
 800223a:	2300      	movs	r3, #0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d11c      	bne.n	800227a <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002240:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002242:	2b00      	cmp	r3, #0
 8002244:	d010      	beq.n	8002268 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	f003 0303 	and.w	r3, r3, #3
 800224e:	2b01      	cmp	r3, #1
 8002250:	d107      	bne.n	8002262 <HAL_ADC_Init+0x1ba>
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0301 	and.w	r3, r3, #1
 800225a:	2b01      	cmp	r3, #1
 800225c:	d101      	bne.n	8002262 <HAL_ADC_Init+0x1ba>
 800225e:	2301      	movs	r3, #1
 8002260:	e000      	b.n	8002264 <HAL_ADC_Init+0x1bc>
 8002262:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002264:	2b00      	cmp	r3, #0
 8002266:	d108      	bne.n	800227a <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002268:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	431a      	orrs	r2, r3
 8002276:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002278:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	7e5b      	ldrb	r3, [r3, #25]
 800227e:	035b      	lsls	r3, r3, #13
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002284:	2a01      	cmp	r2, #1
 8002286:	d002      	beq.n	800228e <HAL_ADC_Init+0x1e6>
 8002288:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800228c:	e000      	b.n	8002290 <HAL_ADC_Init+0x1e8>
 800228e:	2200      	movs	r2, #0
 8002290:	431a      	orrs	r2, r3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	68db      	ldr	r3, [r3, #12]
 8002296:	431a      	orrs	r2, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	4313      	orrs	r3, r2
 800229e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80022a0:	4313      	orrs	r3, r2
 80022a2:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d11b      	bne.n	80022e6 <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	7e5b      	ldrb	r3, [r3, #25]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d109      	bne.n	80022ca <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ba:	3b01      	subs	r3, #1
 80022bc:	045a      	lsls	r2, r3, #17
 80022be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80022c0:	4313      	orrs	r3, r2
 80022c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022c6:	663b      	str	r3, [r7, #96]	; 0x60
 80022c8:	e00d      	b.n	80022e6 <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ce:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80022d2:	f043 0220 	orr.w	r2, r3, #32
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022de:	f043 0201 	orr.w	r2, r3, #1
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d007      	beq.n	80022fe <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f6:	4313      	orrs	r3, r2
 80022f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80022fa:	4313      	orrs	r3, r2
 80022fc:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	f003 030c 	and.w	r3, r3, #12
 8002308:	2b00      	cmp	r3, #0
 800230a:	d114      	bne.n	8002336 <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	68db      	ldr	r3, [r3, #12]
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	6812      	ldr	r2, [r2, #0]
 8002316:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800231a:	f023 0302 	bic.w	r3, r3, #2
 800231e:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	7e1b      	ldrb	r3, [r3, #24]
 8002324:	039a      	lsls	r2, r3, #14
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	4313      	orrs	r3, r2
 8002330:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002332:	4313      	orrs	r3, r2
 8002334:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	68da      	ldr	r2, [r3, #12]
 800233c:	4b22      	ldr	r3, [pc, #136]	; (80023c8 <HAL_ADC_Init+0x320>)
 800233e:	4013      	ands	r3, r2
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	6812      	ldr	r2, [r2, #0]
 8002344:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002346:	430b      	orrs	r3, r1
 8002348:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	691b      	ldr	r3, [r3, #16]
 800234e:	2b01      	cmp	r3, #1
 8002350:	d10c      	bne.n	800236c <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002358:	f023 010f 	bic.w	r1, r3, #15
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	69db      	ldr	r3, [r3, #28]
 8002360:	1e5a      	subs	r2, r3, #1
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	430a      	orrs	r2, r1
 8002368:	631a      	str	r2, [r3, #48]	; 0x30
 800236a:	e007      	b.n	800237c <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f022 020f 	bic.w	r2, r2, #15
 800237a:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2200      	movs	r2, #0
 8002380:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002386:	f023 0303 	bic.w	r3, r3, #3
 800238a:	f043 0201 	orr.w	r2, r3, #1
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	641a      	str	r2, [r3, #64]	; 0x40
 8002392:	e00a      	b.n	80023aa <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002398:	f023 0312 	bic.w	r3, r3, #18
 800239c:	f043 0210 	orr.w	r2, r3, #16
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80023a4:	2301      	movs	r3, #1
 80023a6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80023aa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3768      	adds	r7, #104	; 0x68
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	20000000 	.word	0x20000000
 80023bc:	431bde83 	.word	0x431bde83
 80023c0:	50000300 	.word	0x50000300
 80023c4:	50000100 	.word	0x50000100
 80023c8:	fff0c007 	.word	0xfff0c007

080023cc <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b084      	sub	sp, #16
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023d4:	2300      	movs	r3, #0
 80023d6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	f003 0304 	and.w	r3, r3, #4
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	f040 809c 	bne.w	8002520 <HAL_ADC_Start+0x154>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d101      	bne.n	80023f6 <HAL_ADC_Start+0x2a>
 80023f2:	2302      	movs	r3, #2
 80023f4:	e097      	b.n	8002526 <HAL_ADC_Start+0x15a>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2201      	movs	r2, #1
 80023fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f000 fcfc 	bl	8002dfc <ADC_Enable>
 8002404:	4603      	mov	r3, r0
 8002406:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002408:	7bfb      	ldrb	r3, [r7, #15]
 800240a:	2b00      	cmp	r3, #0
 800240c:	f040 8083 	bne.w	8002516 <HAL_ADC_Start+0x14a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002414:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002418:	f023 0301 	bic.w	r3, r3, #1
 800241c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002424:	4b42      	ldr	r3, [pc, #264]	; (8002530 <HAL_ADC_Start+0x164>)
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	f003 031f 	and.w	r3, r3, #31
 800242c:	2b00      	cmp	r3, #0
 800242e:	d004      	beq.n	800243a <HAL_ADC_Start+0x6e>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002438:	d115      	bne.n	8002466 <HAL_ADC_Start+0x9a>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002450:	2b00      	cmp	r3, #0
 8002452:	d027      	beq.n	80024a4 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002458:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800245c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002464:	e01e      	b.n	80024a4 <HAL_ADC_Start+0xd8>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800247a:	d004      	beq.n	8002486 <HAL_ADC_Start+0xba>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a2c      	ldr	r2, [pc, #176]	; (8002534 <HAL_ADC_Start+0x168>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d10e      	bne.n	80024a4 <HAL_ADC_Start+0xd8>
 8002486:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002490:	2b00      	cmp	r3, #0
 8002492:	d007      	beq.n	80024a4 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002498:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800249c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024b0:	d106      	bne.n	80024c0 <HAL_ADC_Start+0xf4>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b6:	f023 0206 	bic.w	r2, r3, #6
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	645a      	str	r2, [r3, #68]	; 0x44
 80024be:	e002      	b.n	80024c6 <HAL_ADC_Start+0xfa>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2200      	movs	r2, #0
 80024c4:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	221c      	movs	r2, #28
 80024d4:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80024d6:	4b16      	ldr	r3, [pc, #88]	; (8002530 <HAL_ADC_Start+0x164>)
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	f003 031f 	and.w	r3, r3, #31
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d010      	beq.n	8002504 <HAL_ADC_Start+0x138>
 80024e2:	4b13      	ldr	r3, [pc, #76]	; (8002530 <HAL_ADC_Start+0x164>)
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	f003 031f 	and.w	r3, r3, #31
 80024ea:	2b05      	cmp	r3, #5
 80024ec:	d00a      	beq.n	8002504 <HAL_ADC_Start+0x138>
 80024ee:	4b10      	ldr	r3, [pc, #64]	; (8002530 <HAL_ADC_Start+0x164>)
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	f003 031f 	and.w	r3, r3, #31
 80024f6:	2b09      	cmp	r3, #9
 80024f8:	d004      	beq.n	8002504 <HAL_ADC_Start+0x138>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002502:	d10f      	bne.n	8002524 <HAL_ADC_Start+0x158>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	689a      	ldr	r2, [r3, #8]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f042 0204 	orr.w	r2, r2, #4
 8002512:	609a      	str	r2, [r3, #8]
 8002514:	e006      	b.n	8002524 <HAL_ADC_Start+0x158>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800251e:	e001      	b.n	8002524 <HAL_ADC_Start+0x158>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002520:	2302      	movs	r3, #2
 8002522:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002524:	7bfb      	ldrb	r3, [r7, #15]
}
 8002526:	4618      	mov	r0, r3
 8002528:	3710      	adds	r7, #16
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	50000300 	.word	0x50000300
 8002534:	50000100 	.word	0x50000100

08002538 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b086      	sub	sp, #24
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8002542:	2300      	movs	r3, #0
 8002544:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	695b      	ldr	r3, [r3, #20]
 800254a:	2b08      	cmp	r3, #8
 800254c:	d102      	bne.n	8002554 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800254e:	2308      	movs	r3, #8
 8002550:	617b      	str	r3, [r7, #20]
 8002552:	e02e      	b.n	80025b2 <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002554:	4b5e      	ldr	r3, [pc, #376]	; (80026d0 <HAL_ADC_PollForConversion+0x198>)
 8002556:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	f003 031f 	and.w	r3, r3, #31
 8002560:	2b00      	cmp	r3, #0
 8002562:	d112      	bne.n	800258a <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	68db      	ldr	r3, [r3, #12]
 800256a:	f003 0301 	and.w	r3, r3, #1
 800256e:	2b01      	cmp	r3, #1
 8002570:	d11d      	bne.n	80025ae <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002576:	f043 0220 	orr.w	r2, r3, #32
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2200      	movs	r2, #0
 8002582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e09d      	b.n	80026c6 <HAL_ADC_PollForConversion+0x18e>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d00b      	beq.n	80025ae <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259a:	f043 0220 	orr.w	r2, r3, #32
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e08b      	b.n	80026c6 <HAL_ADC_PollForConversion+0x18e>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80025ae:	230c      	movs	r3, #12
 80025b0:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80025b2:	4b47      	ldr	r3, [pc, #284]	; (80026d0 <HAL_ADC_PollForConversion+0x198>)
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	f003 031f 	and.w	r3, r3, #31
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d004      	beq.n	80025c8 <HAL_ADC_PollForConversion+0x90>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025c6:	d104      	bne.n	80025d2 <HAL_ADC_PollForConversion+0x9a>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	613b      	str	r3, [r7, #16]
 80025d0:	e003      	b.n	80025da <HAL_ADC_PollForConversion+0xa2>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80025d2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 80025da:	f7ff fd35 	bl	8002048 <HAL_GetTick>
 80025de:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80025e0:	e021      	b.n	8002626 <HAL_ADC_PollForConversion+0xee>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025e8:	d01d      	beq.n	8002626 <HAL_ADC_PollForConversion+0xee>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d007      	beq.n	8002600 <HAL_ADC_PollForConversion+0xc8>
 80025f0:	f7ff fd2a 	bl	8002048 <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	683a      	ldr	r2, [r7, #0]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d212      	bcs.n	8002626 <HAL_ADC_PollForConversion+0xee>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	4013      	ands	r3, r2
 800260a:	2b00      	cmp	r3, #0
 800260c:	d10b      	bne.n	8002626 <HAL_ADC_PollForConversion+0xee>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002612:	f043 0204 	orr.w	r2, r3, #4
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e04f      	b.n	80026c6 <HAL_ADC_PollForConversion+0x18e>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	4013      	ands	r3, r2
 8002630:	2b00      	cmp	r3, #0
 8002632:	d0d6      	beq.n	80025e2 <HAL_ADC_PollForConversion+0xaa>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002638:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800264a:	2b00      	cmp	r3, #0
 800264c:	d131      	bne.n	80026b2 <HAL_ADC_PollForConversion+0x17a>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8002654:	2b00      	cmp	r3, #0
 8002656:	d12c      	bne.n	80026b2 <HAL_ADC_PollForConversion+0x17a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0308 	and.w	r3, r3, #8
 8002662:	2b08      	cmp	r3, #8
 8002664:	d125      	bne.n	80026b2 <HAL_ADC_PollForConversion+0x17a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	f003 0304 	and.w	r3, r3, #4
 8002670:	2b00      	cmp	r3, #0
 8002672:	d112      	bne.n	800269a <HAL_ADC_PollForConversion+0x162>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002678:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002684:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d112      	bne.n	80026b2 <HAL_ADC_PollForConversion+0x17a>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002690:	f043 0201 	orr.w	r2, r3, #1
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	641a      	str	r2, [r3, #64]	; 0x40
 8002698:	e00b      	b.n	80026b2 <HAL_ADC_PollForConversion+0x17a>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269e:	f043 0220 	orr.w	r2, r3, #32
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026aa:	f043 0201 	orr.w	r2, r3, #1
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d103      	bne.n	80026c4 <HAL_ADC_PollForConversion+0x18c>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	697a      	ldr	r2, [r7, #20]
 80026c2:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3718      	adds	r7, #24
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	50000300 	.word	0x50000300

080026d4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	370c      	adds	r7, #12
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
	...

080026f0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b09b      	sub	sp, #108	; 0x6c
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026fa:	2300      	movs	r3, #0
 80026fc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002700:	2300      	movs	r3, #0
 8002702:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800270a:	2b01      	cmp	r3, #1
 800270c:	d101      	bne.n	8002712 <HAL_ADC_ConfigChannel+0x22>
 800270e:	2302      	movs	r3, #2
 8002710:	e2a4      	b.n	8002c5c <HAL_ADC_ConfigChannel+0x56c>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2201      	movs	r2, #1
 8002716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	f003 0304 	and.w	r3, r3, #4
 8002724:	2b00      	cmp	r3, #0
 8002726:	f040 8288 	bne.w	8002c3a <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	2b04      	cmp	r3, #4
 8002730:	d81c      	bhi.n	800276c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	685a      	ldr	r2, [r3, #4]
 800273c:	4613      	mov	r3, r2
 800273e:	005b      	lsls	r3, r3, #1
 8002740:	4413      	add	r3, r2
 8002742:	005b      	lsls	r3, r3, #1
 8002744:	461a      	mov	r2, r3
 8002746:	231f      	movs	r3, #31
 8002748:	4093      	lsls	r3, r2
 800274a:	43db      	mvns	r3, r3
 800274c:	4019      	ands	r1, r3
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	6818      	ldr	r0, [r3, #0]
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	685a      	ldr	r2, [r3, #4]
 8002756:	4613      	mov	r3, r2
 8002758:	005b      	lsls	r3, r3, #1
 800275a:	4413      	add	r3, r2
 800275c:	005b      	lsls	r3, r3, #1
 800275e:	fa00 f203 	lsl.w	r2, r0, r3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	430a      	orrs	r2, r1
 8002768:	631a      	str	r2, [r3, #48]	; 0x30
 800276a:	e063      	b.n	8002834 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	2b09      	cmp	r3, #9
 8002772:	d81e      	bhi.n	80027b2 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	685a      	ldr	r2, [r3, #4]
 800277e:	4613      	mov	r3, r2
 8002780:	005b      	lsls	r3, r3, #1
 8002782:	4413      	add	r3, r2
 8002784:	005b      	lsls	r3, r3, #1
 8002786:	3b1e      	subs	r3, #30
 8002788:	221f      	movs	r2, #31
 800278a:	fa02 f303 	lsl.w	r3, r2, r3
 800278e:	43db      	mvns	r3, r3
 8002790:	4019      	ands	r1, r3
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	6818      	ldr	r0, [r3, #0]
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	685a      	ldr	r2, [r3, #4]
 800279a:	4613      	mov	r3, r2
 800279c:	005b      	lsls	r3, r3, #1
 800279e:	4413      	add	r3, r2
 80027a0:	005b      	lsls	r3, r3, #1
 80027a2:	3b1e      	subs	r3, #30
 80027a4:	fa00 f203 	lsl.w	r2, r0, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	430a      	orrs	r2, r1
 80027ae:	635a      	str	r2, [r3, #52]	; 0x34
 80027b0:	e040      	b.n	8002834 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	2b0e      	cmp	r3, #14
 80027b8:	d81e      	bhi.n	80027f8 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	685a      	ldr	r2, [r3, #4]
 80027c4:	4613      	mov	r3, r2
 80027c6:	005b      	lsls	r3, r3, #1
 80027c8:	4413      	add	r3, r2
 80027ca:	005b      	lsls	r3, r3, #1
 80027cc:	3b3c      	subs	r3, #60	; 0x3c
 80027ce:	221f      	movs	r2, #31
 80027d0:	fa02 f303 	lsl.w	r3, r2, r3
 80027d4:	43db      	mvns	r3, r3
 80027d6:	4019      	ands	r1, r3
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	6818      	ldr	r0, [r3, #0]
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	685a      	ldr	r2, [r3, #4]
 80027e0:	4613      	mov	r3, r2
 80027e2:	005b      	lsls	r3, r3, #1
 80027e4:	4413      	add	r3, r2
 80027e6:	005b      	lsls	r3, r3, #1
 80027e8:	3b3c      	subs	r3, #60	; 0x3c
 80027ea:	fa00 f203 	lsl.w	r2, r0, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	430a      	orrs	r2, r1
 80027f4:	639a      	str	r2, [r3, #56]	; 0x38
 80027f6:	e01d      	b.n	8002834 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	685a      	ldr	r2, [r3, #4]
 8002802:	4613      	mov	r3, r2
 8002804:	005b      	lsls	r3, r3, #1
 8002806:	4413      	add	r3, r2
 8002808:	005b      	lsls	r3, r3, #1
 800280a:	3b5a      	subs	r3, #90	; 0x5a
 800280c:	221f      	movs	r2, #31
 800280e:	fa02 f303 	lsl.w	r3, r2, r3
 8002812:	43db      	mvns	r3, r3
 8002814:	4019      	ands	r1, r3
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	6818      	ldr	r0, [r3, #0]
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	685a      	ldr	r2, [r3, #4]
 800281e:	4613      	mov	r3, r2
 8002820:	005b      	lsls	r3, r3, #1
 8002822:	4413      	add	r3, r2
 8002824:	005b      	lsls	r3, r3, #1
 8002826:	3b5a      	subs	r3, #90	; 0x5a
 8002828:	fa00 f203 	lsl.w	r2, r0, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	430a      	orrs	r2, r1
 8002832:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f003 030c 	and.w	r3, r3, #12
 800283e:	2b00      	cmp	r3, #0
 8002840:	f040 80e5 	bne.w	8002a0e <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	2b09      	cmp	r3, #9
 800284a:	d91c      	bls.n	8002886 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	6999      	ldr	r1, [r3, #24]
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	4613      	mov	r3, r2
 8002858:	005b      	lsls	r3, r3, #1
 800285a:	4413      	add	r3, r2
 800285c:	3b1e      	subs	r3, #30
 800285e:	2207      	movs	r2, #7
 8002860:	fa02 f303 	lsl.w	r3, r2, r3
 8002864:	43db      	mvns	r3, r3
 8002866:	4019      	ands	r1, r3
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	6898      	ldr	r0, [r3, #8]
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	4613      	mov	r3, r2
 8002872:	005b      	lsls	r3, r3, #1
 8002874:	4413      	add	r3, r2
 8002876:	3b1e      	subs	r3, #30
 8002878:	fa00 f203 	lsl.w	r2, r0, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	430a      	orrs	r2, r1
 8002882:	619a      	str	r2, [r3, #24]
 8002884:	e019      	b.n	80028ba <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	6959      	ldr	r1, [r3, #20]
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	4613      	mov	r3, r2
 8002892:	005b      	lsls	r3, r3, #1
 8002894:	4413      	add	r3, r2
 8002896:	2207      	movs	r2, #7
 8002898:	fa02 f303 	lsl.w	r3, r2, r3
 800289c:	43db      	mvns	r3, r3
 800289e:	4019      	ands	r1, r3
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	6898      	ldr	r0, [r3, #8]
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	4613      	mov	r3, r2
 80028aa:	005b      	lsls	r3, r3, #1
 80028ac:	4413      	add	r3, r2
 80028ae:	fa00 f203 	lsl.w	r2, r0, r3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	430a      	orrs	r2, r1
 80028b8:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	695a      	ldr	r2, [r3, #20]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	08db      	lsrs	r3, r3, #3
 80028c6:	f003 0303 	and.w	r3, r3, #3
 80028ca:	005b      	lsls	r3, r3, #1
 80028cc:	fa02 f303 	lsl.w	r3, r2, r3
 80028d0:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	691b      	ldr	r3, [r3, #16]
 80028d6:	3b01      	subs	r3, #1
 80028d8:	2b03      	cmp	r3, #3
 80028da:	d84f      	bhi.n	800297c <HAL_ADC_ConfigChannel+0x28c>
 80028dc:	a201      	add	r2, pc, #4	; (adr r2, 80028e4 <HAL_ADC_ConfigChannel+0x1f4>)
 80028de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028e2:	bf00      	nop
 80028e4:	080028f5 	.word	0x080028f5
 80028e8:	08002917 	.word	0x08002917
 80028ec:	08002939 	.word	0x08002939
 80028f0:	0800295b 	.word	0x0800295b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80028fa:	4b94      	ldr	r3, [pc, #592]	; (8002b4c <HAL_ADC_ConfigChannel+0x45c>)
 80028fc:	4013      	ands	r3, r2
 80028fe:	683a      	ldr	r2, [r7, #0]
 8002900:	6812      	ldr	r2, [r2, #0]
 8002902:	0691      	lsls	r1, r2, #26
 8002904:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002906:	430a      	orrs	r2, r1
 8002908:	431a      	orrs	r2, r3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002912:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002914:	e07e      	b.n	8002a14 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800291c:	4b8b      	ldr	r3, [pc, #556]	; (8002b4c <HAL_ADC_ConfigChannel+0x45c>)
 800291e:	4013      	ands	r3, r2
 8002920:	683a      	ldr	r2, [r7, #0]
 8002922:	6812      	ldr	r2, [r2, #0]
 8002924:	0691      	lsls	r1, r2, #26
 8002926:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002928:	430a      	orrs	r2, r1
 800292a:	431a      	orrs	r2, r3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002934:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002936:	e06d      	b.n	8002a14 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800293e:	4b83      	ldr	r3, [pc, #524]	; (8002b4c <HAL_ADC_ConfigChannel+0x45c>)
 8002940:	4013      	ands	r3, r2
 8002942:	683a      	ldr	r2, [r7, #0]
 8002944:	6812      	ldr	r2, [r2, #0]
 8002946:	0691      	lsls	r1, r2, #26
 8002948:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800294a:	430a      	orrs	r2, r1
 800294c:	431a      	orrs	r2, r3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002956:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002958:	e05c      	b.n	8002a14 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002960:	4b7a      	ldr	r3, [pc, #488]	; (8002b4c <HAL_ADC_ConfigChannel+0x45c>)
 8002962:	4013      	ands	r3, r2
 8002964:	683a      	ldr	r2, [r7, #0]
 8002966:	6812      	ldr	r2, [r2, #0]
 8002968:	0691      	lsls	r1, r2, #26
 800296a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800296c:	430a      	orrs	r2, r1
 800296e:	431a      	orrs	r2, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002978:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800297a:	e04b      	b.n	8002a14 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002982:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	069b      	lsls	r3, r3, #26
 800298c:	429a      	cmp	r2, r3
 800298e:	d107      	bne.n	80029a0 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800299e:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	069b      	lsls	r3, r3, #26
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d107      	bne.n	80029c4 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80029c2:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029ca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	069b      	lsls	r3, r3, #26
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d107      	bne.n	80029e8 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80029e6:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	069b      	lsls	r3, r3, #26
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d10a      	bne.n	8002a12 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002a0a:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002a0c:	e001      	b.n	8002a12 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8002a0e:	bf00      	nop
 8002a10:	e000      	b.n	8002a14 <HAL_ADC_ConfigChannel+0x324>
      break;
 8002a12:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	f003 0303 	and.w	r3, r3, #3
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d108      	bne.n	8002a34 <HAL_ADC_ConfigChannel+0x344>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0301 	and.w	r3, r3, #1
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d101      	bne.n	8002a34 <HAL_ADC_ConfigChannel+0x344>
 8002a30:	2301      	movs	r3, #1
 8002a32:	e000      	b.n	8002a36 <HAL_ADC_ConfigChannel+0x346>
 8002a34:	2300      	movs	r3, #0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	f040 810a 	bne.w	8002c50 <HAL_ADC_ConfigChannel+0x560>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d00f      	beq.n	8002a64 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	2201      	movs	r2, #1
 8002a52:	fa02 f303 	lsl.w	r3, r2, r3
 8002a56:	43da      	mvns	r2, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	400a      	ands	r2, r1
 8002a5e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002a62:	e049      	b.n	8002af8 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	2201      	movs	r2, #1
 8002a72:	409a      	lsls	r2, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	430a      	orrs	r2, r1
 8002a7a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	2b09      	cmp	r3, #9
 8002a84:	d91c      	bls.n	8002ac0 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	6999      	ldr	r1, [r3, #24]
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	4613      	mov	r3, r2
 8002a92:	005b      	lsls	r3, r3, #1
 8002a94:	4413      	add	r3, r2
 8002a96:	3b1b      	subs	r3, #27
 8002a98:	2207      	movs	r2, #7
 8002a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9e:	43db      	mvns	r3, r3
 8002aa0:	4019      	ands	r1, r3
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	6898      	ldr	r0, [r3, #8]
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	4613      	mov	r3, r2
 8002aac:	005b      	lsls	r3, r3, #1
 8002aae:	4413      	add	r3, r2
 8002ab0:	3b1b      	subs	r3, #27
 8002ab2:	fa00 f203 	lsl.w	r2, r0, r3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	430a      	orrs	r2, r1
 8002abc:	619a      	str	r2, [r3, #24]
 8002abe:	e01b      	b.n	8002af8 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	6959      	ldr	r1, [r3, #20]
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	1c5a      	adds	r2, r3, #1
 8002acc:	4613      	mov	r3, r2
 8002ace:	005b      	lsls	r3, r3, #1
 8002ad0:	4413      	add	r3, r2
 8002ad2:	2207      	movs	r2, #7
 8002ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad8:	43db      	mvns	r3, r3
 8002ada:	4019      	ands	r1, r3
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	6898      	ldr	r0, [r3, #8]
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	1c5a      	adds	r2, r3, #1
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	005b      	lsls	r3, r3, #1
 8002aea:	4413      	add	r3, r2
 8002aec:	fa00 f203 	lsl.w	r2, r0, r3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	430a      	orrs	r2, r1
 8002af6:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002af8:	4b15      	ldr	r3, [pc, #84]	; (8002b50 <HAL_ADC_ConfigChannel+0x460>)
 8002afa:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2b10      	cmp	r3, #16
 8002b02:	d105      	bne.n	8002b10 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002b04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d015      	beq.n	8002b3c <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002b14:	2b11      	cmp	r3, #17
 8002b16:	d105      	bne.n	8002b24 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002b18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d00b      	beq.n	8002b3c <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002b28:	2b12      	cmp	r3, #18
 8002b2a:	f040 8091 	bne.w	8002c50 <HAL_ADC_ConfigChannel+0x560>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002b2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	f040 808a 	bne.w	8002c50 <HAL_ADC_ConfigChannel+0x560>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b44:	d108      	bne.n	8002b58 <HAL_ADC_ConfigChannel+0x468>
 8002b46:	4b03      	ldr	r3, [pc, #12]	; (8002b54 <HAL_ADC_ConfigChannel+0x464>)
 8002b48:	60fb      	str	r3, [r7, #12]
 8002b4a:	e008      	b.n	8002b5e <HAL_ADC_ConfigChannel+0x46e>
 8002b4c:	83fff000 	.word	0x83fff000
 8002b50:	50000300 	.word	0x50000300
 8002b54:	50000100 	.word	0x50000100
 8002b58:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002b5c:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f003 0303 	and.w	r3, r3, #3
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d108      	bne.n	8002b7e <HAL_ADC_ConfigChannel+0x48e>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0301 	and.w	r3, r3, #1
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d101      	bne.n	8002b7e <HAL_ADC_ConfigChannel+0x48e>
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e000      	b.n	8002b80 <HAL_ADC_ConfigChannel+0x490>
 8002b7e:	2300      	movs	r3, #0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d150      	bne.n	8002c26 <HAL_ADC_ConfigChannel+0x536>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002b84:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d010      	beq.n	8002bac <HAL_ADC_ConfigChannel+0x4bc>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	f003 0303 	and.w	r3, r3, #3
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d107      	bne.n	8002ba6 <HAL_ADC_ConfigChannel+0x4b6>
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d101      	bne.n	8002ba6 <HAL_ADC_ConfigChannel+0x4b6>
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e000      	b.n	8002ba8 <HAL_ADC_ConfigChannel+0x4b8>
 8002ba6:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d13c      	bne.n	8002c26 <HAL_ADC_ConfigChannel+0x536>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	2b10      	cmp	r3, #16
 8002bb2:	d11d      	bne.n	8002bf0 <HAL_ADC_ConfigChannel+0x500>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bbc:	d118      	bne.n	8002bf0 <HAL_ADC_ConfigChannel+0x500>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002bbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002bc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bc8:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002bca:	4b27      	ldr	r3, [pc, #156]	; (8002c68 <HAL_ADC_ConfigChannel+0x578>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a27      	ldr	r2, [pc, #156]	; (8002c6c <HAL_ADC_ConfigChannel+0x57c>)
 8002bd0:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd4:	0c9a      	lsrs	r2, r3, #18
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	4413      	add	r3, r2
 8002bdc:	005b      	lsls	r3, r3, #1
 8002bde:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002be0:	e002      	b.n	8002be8 <HAL_ADC_ConfigChannel+0x4f8>
          {
            wait_loop_index--;
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	3b01      	subs	r3, #1
 8002be6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d1f9      	bne.n	8002be2 <HAL_ADC_ConfigChannel+0x4f2>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002bee:	e02e      	b.n	8002c4e <HAL_ADC_ConfigChannel+0x55e>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2b11      	cmp	r3, #17
 8002bf6:	d10b      	bne.n	8002c10 <HAL_ADC_ConfigChannel+0x520>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c00:	d106      	bne.n	8002c10 <HAL_ADC_ConfigChannel+0x520>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002c02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002c0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c0c:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002c0e:	e01e      	b.n	8002c4e <HAL_ADC_ConfigChannel+0x55e>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2b12      	cmp	r3, #18
 8002c16:	d11a      	bne.n	8002c4e <HAL_ADC_ConfigChannel+0x55e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002c18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002c20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c22:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002c24:	e013      	b.n	8002c4e <HAL_ADC_ConfigChannel+0x55e>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2a:	f043 0220 	orr.w	r2, r3, #32
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002c38:	e00a      	b.n	8002c50 <HAL_ADC_ConfigChannel+0x560>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3e:	f043 0220 	orr.w	r2, r3, #32
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002c4c:	e000      	b.n	8002c50 <HAL_ADC_ConfigChannel+0x560>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002c4e:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2200      	movs	r2, #0
 8002c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002c58:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	376c      	adds	r7, #108	; 0x6c
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr
 8002c68:	20000000 	.word	0x20000000
 8002c6c:	431bde83 	.word	0x431bde83

08002c70 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b099      	sub	sp, #100	; 0x64
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c88:	d102      	bne.n	8002c90 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8002c8a:	4b5a      	ldr	r3, [pc, #360]	; (8002df4 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8002c8c:	60bb      	str	r3, [r7, #8]
 8002c8e:	e002      	b.n	8002c96 <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8002c90:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002c94:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d101      	bne.n	8002ca0 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e0a2      	b.n	8002de6 <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d101      	bne.n	8002cae <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002caa:	2302      	movs	r3, #2
 8002cac:	e09b      	b.n	8002de6 <HAL_ADCEx_MultiModeConfigChannel+0x176>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	f003 0304 	and.w	r3, r3, #4
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d17f      	bne.n	8002dc4 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	f003 0304 	and.w	r3, r3, #4
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d179      	bne.n	8002dc4 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002cd0:	4b49      	ldr	r3, [pc, #292]	; (8002df8 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 8002cd2:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d040      	beq.n	8002d5e <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002cdc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	6859      	ldr	r1, [r3, #4]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002cee:	035b      	lsls	r3, r3, #13
 8002cf0:	430b      	orrs	r3, r1
 8002cf2:	431a      	orrs	r2, r3
 8002cf4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cf6:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	f003 0303 	and.w	r3, r3, #3
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d108      	bne.n	8002d18 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0301 	and.w	r3, r3, #1
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d101      	bne.n	8002d18 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002d14:	2301      	movs	r3, #1
 8002d16:	e000      	b.n	8002d1a <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8002d18:	2300      	movs	r3, #0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d15c      	bne.n	8002dd8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	f003 0303 	and.w	r3, r3, #3
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d107      	bne.n	8002d3a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0301 	and.w	r3, r3, #1
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d101      	bne.n	8002d3a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002d36:	2301      	movs	r3, #1
 8002d38:	e000      	b.n	8002d3c <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8002d3a:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d14b      	bne.n	8002dd8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002d40:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002d48:	f023 030f 	bic.w	r3, r3, #15
 8002d4c:	683a      	ldr	r2, [r7, #0]
 8002d4e:	6811      	ldr	r1, [r2, #0]
 8002d50:	683a      	ldr	r2, [r7, #0]
 8002d52:	6892      	ldr	r2, [r2, #8]
 8002d54:	430a      	orrs	r2, r1
 8002d56:	431a      	orrs	r2, r3
 8002d58:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d5a:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d5c:	e03c      	b.n	8002dd8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002d5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d68:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	f003 0303 	and.w	r3, r3, #3
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d108      	bne.n	8002d8a <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0301 	and.w	r3, r3, #1
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d101      	bne.n	8002d8a <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8002d86:	2301      	movs	r3, #1
 8002d88:	e000      	b.n	8002d8c <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d123      	bne.n	8002dd8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	f003 0303 	and.w	r3, r3, #3
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d107      	bne.n	8002dac <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0301 	and.w	r3, r3, #1
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d101      	bne.n	8002dac <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8002da8:	2301      	movs	r3, #1
 8002daa:	e000      	b.n	8002dae <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8002dac:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d112      	bne.n	8002dd8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002db2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002dba:	f023 030f 	bic.w	r3, r3, #15
 8002dbe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002dc0:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002dc2:	e009      	b.n	8002dd8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc8:	f043 0220 	orr.w	r2, r3, #32
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002dd6:	e000      	b.n	8002dda <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002dd8:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002de2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8002de6:	4618      	mov	r0, r3
 8002de8:	3764      	adds	r7, #100	; 0x64
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr
 8002df2:	bf00      	nop
 8002df4:	50000100 	.word	0x50000100
 8002df8:	50000300 	.word	0x50000300

08002dfc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e04:	2300      	movs	r3, #0
 8002e06:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f003 0303 	and.w	r3, r3, #3
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d108      	bne.n	8002e28 <ADC_Enable+0x2c>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0301 	and.w	r3, r3, #1
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d101      	bne.n	8002e28 <ADC_Enable+0x2c>
 8002e24:	2301      	movs	r3, #1
 8002e26:	e000      	b.n	8002e2a <ADC_Enable+0x2e>
 8002e28:	2300      	movs	r3, #0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d143      	bne.n	8002eb6 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	689a      	ldr	r2, [r3, #8]
 8002e34:	4b22      	ldr	r3, [pc, #136]	; (8002ec0 <ADC_Enable+0xc4>)
 8002e36:	4013      	ands	r3, r2
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d00d      	beq.n	8002e58 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e40:	f043 0210 	orr.w	r2, r3, #16
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e4c:	f043 0201 	orr.w	r2, r3, #1
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e02f      	b.n	8002eb8 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	689a      	ldr	r2, [r3, #8]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f042 0201 	orr.w	r2, r2, #1
 8002e66:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002e68:	f7ff f8ee 	bl	8002048 <HAL_GetTick>
 8002e6c:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002e6e:	e01b      	b.n	8002ea8 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002e70:	f7ff f8ea 	bl	8002048 <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d914      	bls.n	8002ea8 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0301 	and.w	r3, r3, #1
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d00d      	beq.n	8002ea8 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e90:	f043 0210 	orr.w	r2, r3, #16
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e9c:	f043 0201 	orr.w	r2, r3, #1
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e007      	b.n	8002eb8 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0301 	and.w	r3, r3, #1
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d1dc      	bne.n	8002e70 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002eb6:	2300      	movs	r3, #0
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3710      	adds	r7, #16
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	8000003f 	.word	0x8000003f

08002ec4 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	f003 0303 	and.w	r3, r3, #3
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d108      	bne.n	8002ef0 <ADC_Disable+0x2c>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0301 	and.w	r3, r3, #1
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d101      	bne.n	8002ef0 <ADC_Disable+0x2c>
 8002eec:	2301      	movs	r3, #1
 8002eee:	e000      	b.n	8002ef2 <ADC_Disable+0x2e>
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d047      	beq.n	8002f86 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	f003 030d 	and.w	r3, r3, #13
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d10f      	bne.n	8002f24 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	689a      	ldr	r2, [r3, #8]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f042 0202 	orr.w	r2, r2, #2
 8002f12:	609a      	str	r2, [r3, #8]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	2203      	movs	r2, #3
 8002f1a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002f1c:	f7ff f894 	bl	8002048 <HAL_GetTick>
 8002f20:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002f22:	e029      	b.n	8002f78 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f28:	f043 0210 	orr.w	r2, r3, #16
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f34:	f043 0201 	orr.w	r2, r3, #1
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e023      	b.n	8002f88 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002f40:	f7ff f882 	bl	8002048 <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d914      	bls.n	8002f78 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	f003 0301 	and.w	r3, r3, #1
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d10d      	bne.n	8002f78 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f60:	f043 0210 	orr.w	r2, r3, #16
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f6c:	f043 0201 	orr.w	r2, r3, #1
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e007      	b.n	8002f88 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	f003 0301 	and.w	r3, r3, #1
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d0dc      	beq.n	8002f40 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002f86:	2300      	movs	r3, #0
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3710      	adds	r7, #16
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b085      	sub	sp, #20
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	f003 0307 	and.w	r3, r3, #7
 8002f9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fa0:	4b0c      	ldr	r3, [pc, #48]	; (8002fd4 <__NVIC_SetPriorityGrouping+0x44>)
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fa6:	68ba      	ldr	r2, [r7, #8]
 8002fa8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002fac:	4013      	ands	r3, r2
 8002fae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002fbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fc2:	4a04      	ldr	r2, [pc, #16]	; (8002fd4 <__NVIC_SetPriorityGrouping+0x44>)
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	60d3      	str	r3, [r2, #12]
}
 8002fc8:	bf00      	nop
 8002fca:	3714      	adds	r7, #20
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr
 8002fd4:	e000ed00 	.word	0xe000ed00

08002fd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fdc:	4b04      	ldr	r3, [pc, #16]	; (8002ff0 <__NVIC_GetPriorityGrouping+0x18>)
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	0a1b      	lsrs	r3, r3, #8
 8002fe2:	f003 0307 	and.w	r3, r3, #7
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr
 8002ff0:	e000ed00 	.word	0xe000ed00

08002ff4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	6039      	str	r1, [r7, #0]
 8002ffe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003000:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003004:	2b00      	cmp	r3, #0
 8003006:	db0a      	blt.n	800301e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	b2da      	uxtb	r2, r3
 800300c:	490c      	ldr	r1, [pc, #48]	; (8003040 <__NVIC_SetPriority+0x4c>)
 800300e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003012:	0112      	lsls	r2, r2, #4
 8003014:	b2d2      	uxtb	r2, r2
 8003016:	440b      	add	r3, r1
 8003018:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800301c:	e00a      	b.n	8003034 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	b2da      	uxtb	r2, r3
 8003022:	4908      	ldr	r1, [pc, #32]	; (8003044 <__NVIC_SetPriority+0x50>)
 8003024:	79fb      	ldrb	r3, [r7, #7]
 8003026:	f003 030f 	and.w	r3, r3, #15
 800302a:	3b04      	subs	r3, #4
 800302c:	0112      	lsls	r2, r2, #4
 800302e:	b2d2      	uxtb	r2, r2
 8003030:	440b      	add	r3, r1
 8003032:	761a      	strb	r2, [r3, #24]
}
 8003034:	bf00      	nop
 8003036:	370c      	adds	r7, #12
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr
 8003040:	e000e100 	.word	0xe000e100
 8003044:	e000ed00 	.word	0xe000ed00

08003048 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003048:	b480      	push	{r7}
 800304a:	b089      	sub	sp, #36	; 0x24
 800304c:	af00      	add	r7, sp, #0
 800304e:	60f8      	str	r0, [r7, #12]
 8003050:	60b9      	str	r1, [r7, #8]
 8003052:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	f003 0307 	and.w	r3, r3, #7
 800305a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	f1c3 0307 	rsb	r3, r3, #7
 8003062:	2b04      	cmp	r3, #4
 8003064:	bf28      	it	cs
 8003066:	2304      	movcs	r3, #4
 8003068:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	3304      	adds	r3, #4
 800306e:	2b06      	cmp	r3, #6
 8003070:	d902      	bls.n	8003078 <NVIC_EncodePriority+0x30>
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	3b03      	subs	r3, #3
 8003076:	e000      	b.n	800307a <NVIC_EncodePriority+0x32>
 8003078:	2300      	movs	r3, #0
 800307a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800307c:	f04f 32ff 	mov.w	r2, #4294967295
 8003080:	69bb      	ldr	r3, [r7, #24]
 8003082:	fa02 f303 	lsl.w	r3, r2, r3
 8003086:	43da      	mvns	r2, r3
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	401a      	ands	r2, r3
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003090:	f04f 31ff 	mov.w	r1, #4294967295
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	fa01 f303 	lsl.w	r3, r1, r3
 800309a:	43d9      	mvns	r1, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030a0:	4313      	orrs	r3, r2
         );
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3724      	adds	r7, #36	; 0x24
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
	...

080030b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b082      	sub	sp, #8
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	3b01      	subs	r3, #1
 80030bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030c0:	d301      	bcc.n	80030c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030c2:	2301      	movs	r3, #1
 80030c4:	e00f      	b.n	80030e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030c6:	4a0a      	ldr	r2, [pc, #40]	; (80030f0 <SysTick_Config+0x40>)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	3b01      	subs	r3, #1
 80030cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030ce:	210f      	movs	r1, #15
 80030d0:	f04f 30ff 	mov.w	r0, #4294967295
 80030d4:	f7ff ff8e 	bl	8002ff4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030d8:	4b05      	ldr	r3, [pc, #20]	; (80030f0 <SysTick_Config+0x40>)
 80030da:	2200      	movs	r2, #0
 80030dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030de:	4b04      	ldr	r3, [pc, #16]	; (80030f0 <SysTick_Config+0x40>)
 80030e0:	2207      	movs	r2, #7
 80030e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3708      	adds	r7, #8
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	e000e010 	.word	0xe000e010

080030f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b082      	sub	sp, #8
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f7ff ff47 	bl	8002f90 <__NVIC_SetPriorityGrouping>
}
 8003102:	bf00      	nop
 8003104:	3708      	adds	r7, #8
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}

0800310a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800310a:	b580      	push	{r7, lr}
 800310c:	b086      	sub	sp, #24
 800310e:	af00      	add	r7, sp, #0
 8003110:	4603      	mov	r3, r0
 8003112:	60b9      	str	r1, [r7, #8]
 8003114:	607a      	str	r2, [r7, #4]
 8003116:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003118:	2300      	movs	r3, #0
 800311a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800311c:	f7ff ff5c 	bl	8002fd8 <__NVIC_GetPriorityGrouping>
 8003120:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	68b9      	ldr	r1, [r7, #8]
 8003126:	6978      	ldr	r0, [r7, #20]
 8003128:	f7ff ff8e 	bl	8003048 <NVIC_EncodePriority>
 800312c:	4602      	mov	r2, r0
 800312e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003132:	4611      	mov	r1, r2
 8003134:	4618      	mov	r0, r3
 8003136:	f7ff ff5d 	bl	8002ff4 <__NVIC_SetPriority>
}
 800313a:	bf00      	nop
 800313c:	3718      	adds	r7, #24
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}

08003142 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003142:	b580      	push	{r7, lr}
 8003144:	b082      	sub	sp, #8
 8003146:	af00      	add	r7, sp, #0
 8003148:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f7ff ffb0 	bl	80030b0 <SysTick_Config>
 8003150:	4603      	mov	r3, r0
}
 8003152:	4618      	mov	r0, r3
 8003154:	3708      	adds	r7, #8
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
	...

0800315c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800315c:	b480      	push	{r7}
 800315e:	b087      	sub	sp, #28
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003166:	2300      	movs	r3, #0
 8003168:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800316a:	e14e      	b.n	800340a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	2101      	movs	r1, #1
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	fa01 f303 	lsl.w	r3, r1, r3
 8003178:	4013      	ands	r3, r2
 800317a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2b00      	cmp	r3, #0
 8003180:	f000 8140 	beq.w	8003404 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	f003 0303 	and.w	r3, r3, #3
 800318c:	2b01      	cmp	r3, #1
 800318e:	d005      	beq.n	800319c <HAL_GPIO_Init+0x40>
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f003 0303 	and.w	r3, r3, #3
 8003198:	2b02      	cmp	r3, #2
 800319a:	d130      	bne.n	80031fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	005b      	lsls	r3, r3, #1
 80031a6:	2203      	movs	r2, #3
 80031a8:	fa02 f303 	lsl.w	r3, r2, r3
 80031ac:	43db      	mvns	r3, r3
 80031ae:	693a      	ldr	r2, [r7, #16]
 80031b0:	4013      	ands	r3, r2
 80031b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	68da      	ldr	r2, [r3, #12]
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	005b      	lsls	r3, r3, #1
 80031bc:	fa02 f303 	lsl.w	r3, r2, r3
 80031c0:	693a      	ldr	r2, [r7, #16]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	693a      	ldr	r2, [r7, #16]
 80031ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031d2:	2201      	movs	r2, #1
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	fa02 f303 	lsl.w	r3, r2, r3
 80031da:	43db      	mvns	r3, r3
 80031dc:	693a      	ldr	r2, [r7, #16]
 80031de:	4013      	ands	r3, r2
 80031e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	091b      	lsrs	r3, r3, #4
 80031e8:	f003 0201 	and.w	r2, r3, #1
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	fa02 f303 	lsl.w	r3, r2, r3
 80031f2:	693a      	ldr	r2, [r7, #16]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	693a      	ldr	r2, [r7, #16]
 80031fc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	f003 0303 	and.w	r3, r3, #3
 8003206:	2b03      	cmp	r3, #3
 8003208:	d017      	beq.n	800323a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	68db      	ldr	r3, [r3, #12]
 800320e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	005b      	lsls	r3, r3, #1
 8003214:	2203      	movs	r2, #3
 8003216:	fa02 f303 	lsl.w	r3, r2, r3
 800321a:	43db      	mvns	r3, r3
 800321c:	693a      	ldr	r2, [r7, #16]
 800321e:	4013      	ands	r3, r2
 8003220:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	689a      	ldr	r2, [r3, #8]
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	005b      	lsls	r3, r3, #1
 800322a:	fa02 f303 	lsl.w	r3, r2, r3
 800322e:	693a      	ldr	r2, [r7, #16]
 8003230:	4313      	orrs	r3, r2
 8003232:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	693a      	ldr	r2, [r7, #16]
 8003238:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f003 0303 	and.w	r3, r3, #3
 8003242:	2b02      	cmp	r3, #2
 8003244:	d123      	bne.n	800328e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	08da      	lsrs	r2, r3, #3
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	3208      	adds	r2, #8
 800324e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003252:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	f003 0307 	and.w	r3, r3, #7
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	220f      	movs	r2, #15
 800325e:	fa02 f303 	lsl.w	r3, r2, r3
 8003262:	43db      	mvns	r3, r3
 8003264:	693a      	ldr	r2, [r7, #16]
 8003266:	4013      	ands	r3, r2
 8003268:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	691a      	ldr	r2, [r3, #16]
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	f003 0307 	and.w	r3, r3, #7
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	fa02 f303 	lsl.w	r3, r2, r3
 800327a:	693a      	ldr	r2, [r7, #16]
 800327c:	4313      	orrs	r3, r2
 800327e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	08da      	lsrs	r2, r3, #3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	3208      	adds	r2, #8
 8003288:	6939      	ldr	r1, [r7, #16]
 800328a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	005b      	lsls	r3, r3, #1
 8003298:	2203      	movs	r2, #3
 800329a:	fa02 f303 	lsl.w	r3, r2, r3
 800329e:	43db      	mvns	r3, r3
 80032a0:	693a      	ldr	r2, [r7, #16]
 80032a2:	4013      	ands	r3, r2
 80032a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	f003 0203 	and.w	r2, r3, #3
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	005b      	lsls	r3, r3, #1
 80032b2:	fa02 f303 	lsl.w	r3, r2, r3
 80032b6:	693a      	ldr	r2, [r7, #16]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	693a      	ldr	r2, [r7, #16]
 80032c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	f000 809a 	beq.w	8003404 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032d0:	4b55      	ldr	r3, [pc, #340]	; (8003428 <HAL_GPIO_Init+0x2cc>)
 80032d2:	699b      	ldr	r3, [r3, #24]
 80032d4:	4a54      	ldr	r2, [pc, #336]	; (8003428 <HAL_GPIO_Init+0x2cc>)
 80032d6:	f043 0301 	orr.w	r3, r3, #1
 80032da:	6193      	str	r3, [r2, #24]
 80032dc:	4b52      	ldr	r3, [pc, #328]	; (8003428 <HAL_GPIO_Init+0x2cc>)
 80032de:	699b      	ldr	r3, [r3, #24]
 80032e0:	f003 0301 	and.w	r3, r3, #1
 80032e4:	60bb      	str	r3, [r7, #8]
 80032e6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80032e8:	4a50      	ldr	r2, [pc, #320]	; (800342c <HAL_GPIO_Init+0x2d0>)
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	089b      	lsrs	r3, r3, #2
 80032ee:	3302      	adds	r3, #2
 80032f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	f003 0303 	and.w	r3, r3, #3
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	220f      	movs	r2, #15
 8003300:	fa02 f303 	lsl.w	r3, r2, r3
 8003304:	43db      	mvns	r3, r3
 8003306:	693a      	ldr	r2, [r7, #16]
 8003308:	4013      	ands	r3, r2
 800330a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003312:	d013      	beq.n	800333c <HAL_GPIO_Init+0x1e0>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	4a46      	ldr	r2, [pc, #280]	; (8003430 <HAL_GPIO_Init+0x2d4>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d00d      	beq.n	8003338 <HAL_GPIO_Init+0x1dc>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	4a45      	ldr	r2, [pc, #276]	; (8003434 <HAL_GPIO_Init+0x2d8>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d007      	beq.n	8003334 <HAL_GPIO_Init+0x1d8>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	4a44      	ldr	r2, [pc, #272]	; (8003438 <HAL_GPIO_Init+0x2dc>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d101      	bne.n	8003330 <HAL_GPIO_Init+0x1d4>
 800332c:	2303      	movs	r3, #3
 800332e:	e006      	b.n	800333e <HAL_GPIO_Init+0x1e2>
 8003330:	2305      	movs	r3, #5
 8003332:	e004      	b.n	800333e <HAL_GPIO_Init+0x1e2>
 8003334:	2302      	movs	r3, #2
 8003336:	e002      	b.n	800333e <HAL_GPIO_Init+0x1e2>
 8003338:	2301      	movs	r3, #1
 800333a:	e000      	b.n	800333e <HAL_GPIO_Init+0x1e2>
 800333c:	2300      	movs	r3, #0
 800333e:	697a      	ldr	r2, [r7, #20]
 8003340:	f002 0203 	and.w	r2, r2, #3
 8003344:	0092      	lsls	r2, r2, #2
 8003346:	4093      	lsls	r3, r2
 8003348:	693a      	ldr	r2, [r7, #16]
 800334a:	4313      	orrs	r3, r2
 800334c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800334e:	4937      	ldr	r1, [pc, #220]	; (800342c <HAL_GPIO_Init+0x2d0>)
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	089b      	lsrs	r3, r3, #2
 8003354:	3302      	adds	r3, #2
 8003356:	693a      	ldr	r2, [r7, #16]
 8003358:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800335c:	4b37      	ldr	r3, [pc, #220]	; (800343c <HAL_GPIO_Init+0x2e0>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	43db      	mvns	r3, r3
 8003366:	693a      	ldr	r2, [r7, #16]
 8003368:	4013      	ands	r3, r2
 800336a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003374:	2b00      	cmp	r3, #0
 8003376:	d003      	beq.n	8003380 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8003378:	693a      	ldr	r2, [r7, #16]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	4313      	orrs	r3, r2
 800337e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003380:	4a2e      	ldr	r2, [pc, #184]	; (800343c <HAL_GPIO_Init+0x2e0>)
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003386:	4b2d      	ldr	r3, [pc, #180]	; (800343c <HAL_GPIO_Init+0x2e0>)
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	43db      	mvns	r3, r3
 8003390:	693a      	ldr	r2, [r7, #16]
 8003392:	4013      	ands	r3, r2
 8003394:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d003      	beq.n	80033aa <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80033a2:	693a      	ldr	r2, [r7, #16]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	4313      	orrs	r3, r2
 80033a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80033aa:	4a24      	ldr	r2, [pc, #144]	; (800343c <HAL_GPIO_Init+0x2e0>)
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80033b0:	4b22      	ldr	r3, [pc, #136]	; (800343c <HAL_GPIO_Init+0x2e0>)
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	43db      	mvns	r3, r3
 80033ba:	693a      	ldr	r2, [r7, #16]
 80033bc:	4013      	ands	r3, r2
 80033be:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d003      	beq.n	80033d4 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80033cc:	693a      	ldr	r2, [r7, #16]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80033d4:	4a19      	ldr	r2, [pc, #100]	; (800343c <HAL_GPIO_Init+0x2e0>)
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80033da:	4b18      	ldr	r3, [pc, #96]	; (800343c <HAL_GPIO_Init+0x2e0>)
 80033dc:	68db      	ldr	r3, [r3, #12]
 80033de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	43db      	mvns	r3, r3
 80033e4:	693a      	ldr	r2, [r7, #16]
 80033e6:	4013      	ands	r3, r2
 80033e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d003      	beq.n	80033fe <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80033f6:	693a      	ldr	r2, [r7, #16]
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80033fe:	4a0f      	ldr	r2, [pc, #60]	; (800343c <HAL_GPIO_Init+0x2e0>)
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	3301      	adds	r3, #1
 8003408:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	fa22 f303 	lsr.w	r3, r2, r3
 8003414:	2b00      	cmp	r3, #0
 8003416:	f47f aea9 	bne.w	800316c <HAL_GPIO_Init+0x10>
  }
}
 800341a:	bf00      	nop
 800341c:	bf00      	nop
 800341e:	371c      	adds	r7, #28
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr
 8003428:	40021000 	.word	0x40021000
 800342c:	40010000 	.word	0x40010000
 8003430:	48000400 	.word	0x48000400
 8003434:	48000800 	.word	0x48000800
 8003438:	48000c00 	.word	0x48000c00
 800343c:	40010400 	.word	0x40010400

08003440 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003440:	b480      	push	{r7}
 8003442:	b085      	sub	sp, #20
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	460b      	mov	r3, r1
 800344a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	691a      	ldr	r2, [r3, #16]
 8003450:	887b      	ldrh	r3, [r7, #2]
 8003452:	4013      	ands	r3, r2
 8003454:	2b00      	cmp	r3, #0
 8003456:	d002      	beq.n	800345e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003458:	2301      	movs	r3, #1
 800345a:	73fb      	strb	r3, [r7, #15]
 800345c:	e001      	b.n	8003462 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800345e:	2300      	movs	r3, #0
 8003460:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003462:	7bfb      	ldrb	r3, [r7, #15]
}
 8003464:	4618      	mov	r0, r3
 8003466:	3714      	adds	r7, #20
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr

08003470 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	460b      	mov	r3, r1
 800347a:	807b      	strh	r3, [r7, #2]
 800347c:	4613      	mov	r3, r2
 800347e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003480:	787b      	ldrb	r3, [r7, #1]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d003      	beq.n	800348e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003486:	887a      	ldrh	r2, [r7, #2]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800348c:	e002      	b.n	8003494 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800348e:	887a      	ldrh	r2, [r7, #2]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003494:	bf00      	nop
 8003496:	370c      	adds	r7, #12
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr

080034a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034ac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80034b0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80034b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d102      	bne.n	80034c6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	f001 b823 	b.w	800450c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0301 	and.w	r3, r3, #1
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	f000 817d 	beq.w	80037d6 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80034dc:	4bbc      	ldr	r3, [pc, #752]	; (80037d0 <HAL_RCC_OscConfig+0x330>)
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f003 030c 	and.w	r3, r3, #12
 80034e4:	2b04      	cmp	r3, #4
 80034e6:	d00c      	beq.n	8003502 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80034e8:	4bb9      	ldr	r3, [pc, #740]	; (80037d0 <HAL_RCC_OscConfig+0x330>)
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f003 030c 	and.w	r3, r3, #12
 80034f0:	2b08      	cmp	r3, #8
 80034f2:	d15c      	bne.n	80035ae <HAL_RCC_OscConfig+0x10e>
 80034f4:	4bb6      	ldr	r3, [pc, #728]	; (80037d0 <HAL_RCC_OscConfig+0x330>)
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003500:	d155      	bne.n	80035ae <HAL_RCC_OscConfig+0x10e>
 8003502:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003506:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800350a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800350e:	fa93 f3a3 	rbit	r3, r3
 8003512:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003516:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800351a:	fab3 f383 	clz	r3, r3
 800351e:	b2db      	uxtb	r3, r3
 8003520:	095b      	lsrs	r3, r3, #5
 8003522:	b2db      	uxtb	r3, r3
 8003524:	f043 0301 	orr.w	r3, r3, #1
 8003528:	b2db      	uxtb	r3, r3
 800352a:	2b01      	cmp	r3, #1
 800352c:	d102      	bne.n	8003534 <HAL_RCC_OscConfig+0x94>
 800352e:	4ba8      	ldr	r3, [pc, #672]	; (80037d0 <HAL_RCC_OscConfig+0x330>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	e015      	b.n	8003560 <HAL_RCC_OscConfig+0xc0>
 8003534:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003538:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800353c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8003540:	fa93 f3a3 	rbit	r3, r3
 8003544:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003548:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800354c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003550:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8003554:	fa93 f3a3 	rbit	r3, r3
 8003558:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800355c:	4b9c      	ldr	r3, [pc, #624]	; (80037d0 <HAL_RCC_OscConfig+0x330>)
 800355e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003560:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003564:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8003568:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800356c:	fa92 f2a2 	rbit	r2, r2
 8003570:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8003574:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8003578:	fab2 f282 	clz	r2, r2
 800357c:	b2d2      	uxtb	r2, r2
 800357e:	f042 0220 	orr.w	r2, r2, #32
 8003582:	b2d2      	uxtb	r2, r2
 8003584:	f002 021f 	and.w	r2, r2, #31
 8003588:	2101      	movs	r1, #1
 800358a:	fa01 f202 	lsl.w	r2, r1, r2
 800358e:	4013      	ands	r3, r2
 8003590:	2b00      	cmp	r3, #0
 8003592:	f000 811f 	beq.w	80037d4 <HAL_RCC_OscConfig+0x334>
 8003596:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800359a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	f040 8116 	bne.w	80037d4 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	f000 bfaf 	b.w	800450c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035be:	d106      	bne.n	80035ce <HAL_RCC_OscConfig+0x12e>
 80035c0:	4b83      	ldr	r3, [pc, #524]	; (80037d0 <HAL_RCC_OscConfig+0x330>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a82      	ldr	r2, [pc, #520]	; (80037d0 <HAL_RCC_OscConfig+0x330>)
 80035c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035ca:	6013      	str	r3, [r2, #0]
 80035cc:	e036      	b.n	800363c <HAL_RCC_OscConfig+0x19c>
 80035ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d10c      	bne.n	80035f8 <HAL_RCC_OscConfig+0x158>
 80035de:	4b7c      	ldr	r3, [pc, #496]	; (80037d0 <HAL_RCC_OscConfig+0x330>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a7b      	ldr	r2, [pc, #492]	; (80037d0 <HAL_RCC_OscConfig+0x330>)
 80035e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035e8:	6013      	str	r3, [r2, #0]
 80035ea:	4b79      	ldr	r3, [pc, #484]	; (80037d0 <HAL_RCC_OscConfig+0x330>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a78      	ldr	r2, [pc, #480]	; (80037d0 <HAL_RCC_OscConfig+0x330>)
 80035f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035f4:	6013      	str	r3, [r2, #0]
 80035f6:	e021      	b.n	800363c <HAL_RCC_OscConfig+0x19c>
 80035f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035fc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003608:	d10c      	bne.n	8003624 <HAL_RCC_OscConfig+0x184>
 800360a:	4b71      	ldr	r3, [pc, #452]	; (80037d0 <HAL_RCC_OscConfig+0x330>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a70      	ldr	r2, [pc, #448]	; (80037d0 <HAL_RCC_OscConfig+0x330>)
 8003610:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003614:	6013      	str	r3, [r2, #0]
 8003616:	4b6e      	ldr	r3, [pc, #440]	; (80037d0 <HAL_RCC_OscConfig+0x330>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a6d      	ldr	r2, [pc, #436]	; (80037d0 <HAL_RCC_OscConfig+0x330>)
 800361c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003620:	6013      	str	r3, [r2, #0]
 8003622:	e00b      	b.n	800363c <HAL_RCC_OscConfig+0x19c>
 8003624:	4b6a      	ldr	r3, [pc, #424]	; (80037d0 <HAL_RCC_OscConfig+0x330>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a69      	ldr	r2, [pc, #420]	; (80037d0 <HAL_RCC_OscConfig+0x330>)
 800362a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800362e:	6013      	str	r3, [r2, #0]
 8003630:	4b67      	ldr	r3, [pc, #412]	; (80037d0 <HAL_RCC_OscConfig+0x330>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a66      	ldr	r2, [pc, #408]	; (80037d0 <HAL_RCC_OscConfig+0x330>)
 8003636:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800363a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800363c:	4b64      	ldr	r3, [pc, #400]	; (80037d0 <HAL_RCC_OscConfig+0x330>)
 800363e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003640:	f023 020f 	bic.w	r2, r3, #15
 8003644:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003648:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	495f      	ldr	r1, [pc, #380]	; (80037d0 <HAL_RCC_OscConfig+0x330>)
 8003652:	4313      	orrs	r3, r2
 8003654:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003656:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800365a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d059      	beq.n	800371a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003666:	f7fe fcef 	bl	8002048 <HAL_GetTick>
 800366a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800366e:	e00a      	b.n	8003686 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003670:	f7fe fcea 	bl	8002048 <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	2b64      	cmp	r3, #100	; 0x64
 800367e:	d902      	bls.n	8003686 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003680:	2303      	movs	r3, #3
 8003682:	f000 bf43 	b.w	800450c <HAL_RCC_OscConfig+0x106c>
 8003686:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800368a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800368e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8003692:	fa93 f3a3 	rbit	r3, r3
 8003696:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800369a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800369e:	fab3 f383 	clz	r3, r3
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	095b      	lsrs	r3, r3, #5
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	f043 0301 	orr.w	r3, r3, #1
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d102      	bne.n	80036b8 <HAL_RCC_OscConfig+0x218>
 80036b2:	4b47      	ldr	r3, [pc, #284]	; (80037d0 <HAL_RCC_OscConfig+0x330>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	e015      	b.n	80036e4 <HAL_RCC_OscConfig+0x244>
 80036b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036bc:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80036c4:	fa93 f3a3 	rbit	r3, r3
 80036c8:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80036cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036d0:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80036d4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80036d8:	fa93 f3a3 	rbit	r3, r3
 80036dc:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80036e0:	4b3b      	ldr	r3, [pc, #236]	; (80037d0 <HAL_RCC_OscConfig+0x330>)
 80036e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80036e8:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80036ec:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80036f0:	fa92 f2a2 	rbit	r2, r2
 80036f4:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80036f8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80036fc:	fab2 f282 	clz	r2, r2
 8003700:	b2d2      	uxtb	r2, r2
 8003702:	f042 0220 	orr.w	r2, r2, #32
 8003706:	b2d2      	uxtb	r2, r2
 8003708:	f002 021f 	and.w	r2, r2, #31
 800370c:	2101      	movs	r1, #1
 800370e:	fa01 f202 	lsl.w	r2, r1, r2
 8003712:	4013      	ands	r3, r2
 8003714:	2b00      	cmp	r3, #0
 8003716:	d0ab      	beq.n	8003670 <HAL_RCC_OscConfig+0x1d0>
 8003718:	e05d      	b.n	80037d6 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800371a:	f7fe fc95 	bl	8002048 <HAL_GetTick>
 800371e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003722:	e00a      	b.n	800373a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003724:	f7fe fc90 	bl	8002048 <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800372e:	1ad3      	subs	r3, r2, r3
 8003730:	2b64      	cmp	r3, #100	; 0x64
 8003732:	d902      	bls.n	800373a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8003734:	2303      	movs	r3, #3
 8003736:	f000 bee9 	b.w	800450c <HAL_RCC_OscConfig+0x106c>
 800373a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800373e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003742:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003746:	fa93 f3a3 	rbit	r3, r3
 800374a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800374e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003752:	fab3 f383 	clz	r3, r3
 8003756:	b2db      	uxtb	r3, r3
 8003758:	095b      	lsrs	r3, r3, #5
 800375a:	b2db      	uxtb	r3, r3
 800375c:	f043 0301 	orr.w	r3, r3, #1
 8003760:	b2db      	uxtb	r3, r3
 8003762:	2b01      	cmp	r3, #1
 8003764:	d102      	bne.n	800376c <HAL_RCC_OscConfig+0x2cc>
 8003766:	4b1a      	ldr	r3, [pc, #104]	; (80037d0 <HAL_RCC_OscConfig+0x330>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	e015      	b.n	8003798 <HAL_RCC_OscConfig+0x2f8>
 800376c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003770:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003774:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003778:	fa93 f3a3 	rbit	r3, r3
 800377c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003780:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003784:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003788:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800378c:	fa93 f3a3 	rbit	r3, r3
 8003790:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003794:	4b0e      	ldr	r3, [pc, #56]	; (80037d0 <HAL_RCC_OscConfig+0x330>)
 8003796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003798:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800379c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80037a0:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80037a4:	fa92 f2a2 	rbit	r2, r2
 80037a8:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80037ac:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80037b0:	fab2 f282 	clz	r2, r2
 80037b4:	b2d2      	uxtb	r2, r2
 80037b6:	f042 0220 	orr.w	r2, r2, #32
 80037ba:	b2d2      	uxtb	r2, r2
 80037bc:	f002 021f 	and.w	r2, r2, #31
 80037c0:	2101      	movs	r1, #1
 80037c2:	fa01 f202 	lsl.w	r2, r1, r2
 80037c6:	4013      	ands	r3, r2
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d1ab      	bne.n	8003724 <HAL_RCC_OscConfig+0x284>
 80037cc:	e003      	b.n	80037d6 <HAL_RCC_OscConfig+0x336>
 80037ce:	bf00      	nop
 80037d0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 0302 	and.w	r3, r3, #2
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	f000 817d 	beq.w	8003ae6 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80037ec:	4ba6      	ldr	r3, [pc, #664]	; (8003a88 <HAL_RCC_OscConfig+0x5e8>)
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f003 030c 	and.w	r3, r3, #12
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d00b      	beq.n	8003810 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80037f8:	4ba3      	ldr	r3, [pc, #652]	; (8003a88 <HAL_RCC_OscConfig+0x5e8>)
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	f003 030c 	and.w	r3, r3, #12
 8003800:	2b08      	cmp	r3, #8
 8003802:	d172      	bne.n	80038ea <HAL_RCC_OscConfig+0x44a>
 8003804:	4ba0      	ldr	r3, [pc, #640]	; (8003a88 <HAL_RCC_OscConfig+0x5e8>)
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800380c:	2b00      	cmp	r3, #0
 800380e:	d16c      	bne.n	80038ea <HAL_RCC_OscConfig+0x44a>
 8003810:	2302      	movs	r3, #2
 8003812:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003816:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800381a:	fa93 f3a3 	rbit	r3, r3
 800381e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003822:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003826:	fab3 f383 	clz	r3, r3
 800382a:	b2db      	uxtb	r3, r3
 800382c:	095b      	lsrs	r3, r3, #5
 800382e:	b2db      	uxtb	r3, r3
 8003830:	f043 0301 	orr.w	r3, r3, #1
 8003834:	b2db      	uxtb	r3, r3
 8003836:	2b01      	cmp	r3, #1
 8003838:	d102      	bne.n	8003840 <HAL_RCC_OscConfig+0x3a0>
 800383a:	4b93      	ldr	r3, [pc, #588]	; (8003a88 <HAL_RCC_OscConfig+0x5e8>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	e013      	b.n	8003868 <HAL_RCC_OscConfig+0x3c8>
 8003840:	2302      	movs	r3, #2
 8003842:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003846:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800384a:	fa93 f3a3 	rbit	r3, r3
 800384e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003852:	2302      	movs	r3, #2
 8003854:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003858:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800385c:	fa93 f3a3 	rbit	r3, r3
 8003860:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003864:	4b88      	ldr	r3, [pc, #544]	; (8003a88 <HAL_RCC_OscConfig+0x5e8>)
 8003866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003868:	2202      	movs	r2, #2
 800386a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800386e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003872:	fa92 f2a2 	rbit	r2, r2
 8003876:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800387a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800387e:	fab2 f282 	clz	r2, r2
 8003882:	b2d2      	uxtb	r2, r2
 8003884:	f042 0220 	orr.w	r2, r2, #32
 8003888:	b2d2      	uxtb	r2, r2
 800388a:	f002 021f 	and.w	r2, r2, #31
 800388e:	2101      	movs	r1, #1
 8003890:	fa01 f202 	lsl.w	r2, r1, r2
 8003894:	4013      	ands	r3, r2
 8003896:	2b00      	cmp	r3, #0
 8003898:	d00a      	beq.n	80038b0 <HAL_RCC_OscConfig+0x410>
 800389a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800389e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	691b      	ldr	r3, [r3, #16]
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d002      	beq.n	80038b0 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	f000 be2e 	b.w	800450c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038b0:	4b75      	ldr	r3, [pc, #468]	; (8003a88 <HAL_RCC_OscConfig+0x5e8>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038bc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	695b      	ldr	r3, [r3, #20]
 80038c4:	21f8      	movs	r1, #248	; 0xf8
 80038c6:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ca:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80038ce:	fa91 f1a1 	rbit	r1, r1
 80038d2:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80038d6:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80038da:	fab1 f181 	clz	r1, r1
 80038de:	b2c9      	uxtb	r1, r1
 80038e0:	408b      	lsls	r3, r1
 80038e2:	4969      	ldr	r1, [pc, #420]	; (8003a88 <HAL_RCC_OscConfig+0x5e8>)
 80038e4:	4313      	orrs	r3, r2
 80038e6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038e8:	e0fd      	b.n	8003ae6 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80038ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	691b      	ldr	r3, [r3, #16]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	f000 8088 	beq.w	8003a0c <HAL_RCC_OscConfig+0x56c>
 80038fc:	2301      	movs	r3, #1
 80038fe:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003902:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003906:	fa93 f3a3 	rbit	r3, r3
 800390a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800390e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003912:	fab3 f383 	clz	r3, r3
 8003916:	b2db      	uxtb	r3, r3
 8003918:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800391c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	461a      	mov	r2, r3
 8003924:	2301      	movs	r3, #1
 8003926:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003928:	f7fe fb8e 	bl	8002048 <HAL_GetTick>
 800392c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003930:	e00a      	b.n	8003948 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003932:	f7fe fb89 	bl	8002048 <HAL_GetTick>
 8003936:	4602      	mov	r2, r0
 8003938:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	2b02      	cmp	r3, #2
 8003940:	d902      	bls.n	8003948 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	f000 bde2 	b.w	800450c <HAL_RCC_OscConfig+0x106c>
 8003948:	2302      	movs	r3, #2
 800394a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800394e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003952:	fa93 f3a3 	rbit	r3, r3
 8003956:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800395a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800395e:	fab3 f383 	clz	r3, r3
 8003962:	b2db      	uxtb	r3, r3
 8003964:	095b      	lsrs	r3, r3, #5
 8003966:	b2db      	uxtb	r3, r3
 8003968:	f043 0301 	orr.w	r3, r3, #1
 800396c:	b2db      	uxtb	r3, r3
 800396e:	2b01      	cmp	r3, #1
 8003970:	d102      	bne.n	8003978 <HAL_RCC_OscConfig+0x4d8>
 8003972:	4b45      	ldr	r3, [pc, #276]	; (8003a88 <HAL_RCC_OscConfig+0x5e8>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	e013      	b.n	80039a0 <HAL_RCC_OscConfig+0x500>
 8003978:	2302      	movs	r3, #2
 800397a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800397e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003982:	fa93 f3a3 	rbit	r3, r3
 8003986:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800398a:	2302      	movs	r3, #2
 800398c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003990:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003994:	fa93 f3a3 	rbit	r3, r3
 8003998:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800399c:	4b3a      	ldr	r3, [pc, #232]	; (8003a88 <HAL_RCC_OscConfig+0x5e8>)
 800399e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a0:	2202      	movs	r2, #2
 80039a2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80039a6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80039aa:	fa92 f2a2 	rbit	r2, r2
 80039ae:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80039b2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80039b6:	fab2 f282 	clz	r2, r2
 80039ba:	b2d2      	uxtb	r2, r2
 80039bc:	f042 0220 	orr.w	r2, r2, #32
 80039c0:	b2d2      	uxtb	r2, r2
 80039c2:	f002 021f 	and.w	r2, r2, #31
 80039c6:	2101      	movs	r1, #1
 80039c8:	fa01 f202 	lsl.w	r2, r1, r2
 80039cc:	4013      	ands	r3, r2
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d0af      	beq.n	8003932 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039d2:	4b2d      	ldr	r3, [pc, #180]	; (8003a88 <HAL_RCC_OscConfig+0x5e8>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	695b      	ldr	r3, [r3, #20]
 80039e6:	21f8      	movs	r1, #248	; 0xf8
 80039e8:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ec:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80039f0:	fa91 f1a1 	rbit	r1, r1
 80039f4:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80039f8:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80039fc:	fab1 f181 	clz	r1, r1
 8003a00:	b2c9      	uxtb	r1, r1
 8003a02:	408b      	lsls	r3, r1
 8003a04:	4920      	ldr	r1, [pc, #128]	; (8003a88 <HAL_RCC_OscConfig+0x5e8>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	600b      	str	r3, [r1, #0]
 8003a0a:	e06c      	b.n	8003ae6 <HAL_RCC_OscConfig+0x646>
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a12:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003a16:	fa93 f3a3 	rbit	r3, r3
 8003a1a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003a1e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a22:	fab3 f383 	clz	r3, r3
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003a2c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	461a      	mov	r2, r3
 8003a34:	2300      	movs	r3, #0
 8003a36:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a38:	f7fe fb06 	bl	8002048 <HAL_GetTick>
 8003a3c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a40:	e00a      	b.n	8003a58 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a42:	f7fe fb01 	bl	8002048 <HAL_GetTick>
 8003a46:	4602      	mov	r2, r0
 8003a48:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	2b02      	cmp	r3, #2
 8003a50:	d902      	bls.n	8003a58 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	f000 bd5a 	b.w	800450c <HAL_RCC_OscConfig+0x106c>
 8003a58:	2302      	movs	r3, #2
 8003a5a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a5e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003a62:	fa93 f3a3 	rbit	r3, r3
 8003a66:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003a6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a6e:	fab3 f383 	clz	r3, r3
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	095b      	lsrs	r3, r3, #5
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	f043 0301 	orr.w	r3, r3, #1
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d104      	bne.n	8003a8c <HAL_RCC_OscConfig+0x5ec>
 8003a82:	4b01      	ldr	r3, [pc, #4]	; (8003a88 <HAL_RCC_OscConfig+0x5e8>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	e015      	b.n	8003ab4 <HAL_RCC_OscConfig+0x614>
 8003a88:	40021000 	.word	0x40021000
 8003a8c:	2302      	movs	r3, #2
 8003a8e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a92:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003a96:	fa93 f3a3 	rbit	r3, r3
 8003a9a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003a9e:	2302      	movs	r3, #2
 8003aa0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003aa4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003aa8:	fa93 f3a3 	rbit	r3, r3
 8003aac:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003ab0:	4bc8      	ldr	r3, [pc, #800]	; (8003dd4 <HAL_RCC_OscConfig+0x934>)
 8003ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab4:	2202      	movs	r2, #2
 8003ab6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003aba:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003abe:	fa92 f2a2 	rbit	r2, r2
 8003ac2:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003ac6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003aca:	fab2 f282 	clz	r2, r2
 8003ace:	b2d2      	uxtb	r2, r2
 8003ad0:	f042 0220 	orr.w	r2, r2, #32
 8003ad4:	b2d2      	uxtb	r2, r2
 8003ad6:	f002 021f 	and.w	r2, r2, #31
 8003ada:	2101      	movs	r1, #1
 8003adc:	fa01 f202 	lsl.w	r2, r1, r2
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d1ad      	bne.n	8003a42 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ae6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0308 	and.w	r3, r3, #8
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	f000 8110 	beq.w	8003d1c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003afc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b00:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	699b      	ldr	r3, [r3, #24]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d079      	beq.n	8003c00 <HAL_RCC_OscConfig+0x760>
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b12:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003b16:	fa93 f3a3 	rbit	r3, r3
 8003b1a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003b1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b22:	fab3 f383 	clz	r3, r3
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	461a      	mov	r2, r3
 8003b2a:	4bab      	ldr	r3, [pc, #684]	; (8003dd8 <HAL_RCC_OscConfig+0x938>)
 8003b2c:	4413      	add	r3, r2
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	461a      	mov	r2, r3
 8003b32:	2301      	movs	r3, #1
 8003b34:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b36:	f7fe fa87 	bl	8002048 <HAL_GetTick>
 8003b3a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b3e:	e00a      	b.n	8003b56 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b40:	f7fe fa82 	bl	8002048 <HAL_GetTick>
 8003b44:	4602      	mov	r2, r0
 8003b46:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b4a:	1ad3      	subs	r3, r2, r3
 8003b4c:	2b02      	cmp	r3, #2
 8003b4e:	d902      	bls.n	8003b56 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003b50:	2303      	movs	r3, #3
 8003b52:	f000 bcdb 	b.w	800450c <HAL_RCC_OscConfig+0x106c>
 8003b56:	2302      	movs	r3, #2
 8003b58:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b5c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003b60:	fa93 f3a3 	rbit	r3, r3
 8003b64:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003b68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b6c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003b70:	2202      	movs	r2, #2
 8003b72:	601a      	str	r2, [r3, #0]
 8003b74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b78:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	fa93 f2a3 	rbit	r2, r3
 8003b82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b86:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003b8a:	601a      	str	r2, [r3, #0]
 8003b8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003b94:	2202      	movs	r2, #2
 8003b96:	601a      	str	r2, [r3, #0]
 8003b98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	fa93 f2a3 	rbit	r2, r3
 8003ba6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003baa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003bae:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bb0:	4b88      	ldr	r3, [pc, #544]	; (8003dd4 <HAL_RCC_OscConfig+0x934>)
 8003bb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bb8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003bbc:	2102      	movs	r1, #2
 8003bbe:	6019      	str	r1, [r3, #0]
 8003bc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bc4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	fa93 f1a3 	rbit	r1, r3
 8003bce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bd2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003bd6:	6019      	str	r1, [r3, #0]
  return result;
 8003bd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bdc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	fab3 f383 	clz	r3, r3
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	f003 031f 	and.w	r3, r3, #31
 8003bf2:	2101      	movs	r1, #1
 8003bf4:	fa01 f303 	lsl.w	r3, r1, r3
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d0a0      	beq.n	8003b40 <HAL_RCC_OscConfig+0x6a0>
 8003bfe:	e08d      	b.n	8003d1c <HAL_RCC_OscConfig+0x87c>
 8003c00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c04:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003c08:	2201      	movs	r2, #1
 8003c0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c10:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	fa93 f2a3 	rbit	r2, r3
 8003c1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c1e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003c22:	601a      	str	r2, [r3, #0]
  return result;
 8003c24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c28:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003c2c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c2e:	fab3 f383 	clz	r3, r3
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	461a      	mov	r2, r3
 8003c36:	4b68      	ldr	r3, [pc, #416]	; (8003dd8 <HAL_RCC_OscConfig+0x938>)
 8003c38:	4413      	add	r3, r2
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	2300      	movs	r3, #0
 8003c40:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c42:	f7fe fa01 	bl	8002048 <HAL_GetTick>
 8003c46:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c4a:	e00a      	b.n	8003c62 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c4c:	f7fe f9fc 	bl	8002048 <HAL_GetTick>
 8003c50:	4602      	mov	r2, r0
 8003c52:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	2b02      	cmp	r3, #2
 8003c5a:	d902      	bls.n	8003c62 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003c5c:	2303      	movs	r3, #3
 8003c5e:	f000 bc55 	b.w	800450c <HAL_RCC_OscConfig+0x106c>
 8003c62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c66:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003c6a:	2202      	movs	r2, #2
 8003c6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c72:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	fa93 f2a3 	rbit	r2, r3
 8003c7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c80:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003c84:	601a      	str	r2, [r3, #0]
 8003c86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c8a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003c8e:	2202      	movs	r2, #2
 8003c90:	601a      	str	r2, [r3, #0]
 8003c92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c96:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	fa93 f2a3 	rbit	r2, r3
 8003ca0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ca4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003ca8:	601a      	str	r2, [r3, #0]
 8003caa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003cb2:	2202      	movs	r2, #2
 8003cb4:	601a      	str	r2, [r3, #0]
 8003cb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	fa93 f2a3 	rbit	r2, r3
 8003cc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cc8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003ccc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cce:	4b41      	ldr	r3, [pc, #260]	; (8003dd4 <HAL_RCC_OscConfig+0x934>)
 8003cd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003cd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cd6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003cda:	2102      	movs	r1, #2
 8003cdc:	6019      	str	r1, [r3, #0]
 8003cde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ce2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	fa93 f1a3 	rbit	r1, r3
 8003cec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cf0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003cf4:	6019      	str	r1, [r3, #0]
  return result;
 8003cf6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cfa:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	fab3 f383 	clz	r3, r3
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	f003 031f 	and.w	r3, r3, #31
 8003d10:	2101      	movs	r1, #1
 8003d12:	fa01 f303 	lsl.w	r3, r1, r3
 8003d16:	4013      	ands	r3, r2
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d197      	bne.n	8003c4c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d20:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0304 	and.w	r3, r3, #4
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	f000 81a1 	beq.w	8004074 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d32:	2300      	movs	r3, #0
 8003d34:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d38:	4b26      	ldr	r3, [pc, #152]	; (8003dd4 <HAL_RCC_OscConfig+0x934>)
 8003d3a:	69db      	ldr	r3, [r3, #28]
 8003d3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d116      	bne.n	8003d72 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d44:	4b23      	ldr	r3, [pc, #140]	; (8003dd4 <HAL_RCC_OscConfig+0x934>)
 8003d46:	69db      	ldr	r3, [r3, #28]
 8003d48:	4a22      	ldr	r2, [pc, #136]	; (8003dd4 <HAL_RCC_OscConfig+0x934>)
 8003d4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d4e:	61d3      	str	r3, [r2, #28]
 8003d50:	4b20      	ldr	r3, [pc, #128]	; (8003dd4 <HAL_RCC_OscConfig+0x934>)
 8003d52:	69db      	ldr	r3, [r3, #28]
 8003d54:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003d58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d5c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003d60:	601a      	str	r2, [r3, #0]
 8003d62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d66:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003d6a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d72:	4b1a      	ldr	r3, [pc, #104]	; (8003ddc <HAL_RCC_OscConfig+0x93c>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d11a      	bne.n	8003db4 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d7e:	4b17      	ldr	r3, [pc, #92]	; (8003ddc <HAL_RCC_OscConfig+0x93c>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a16      	ldr	r2, [pc, #88]	; (8003ddc <HAL_RCC_OscConfig+0x93c>)
 8003d84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d88:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d8a:	f7fe f95d 	bl	8002048 <HAL_GetTick>
 8003d8e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d92:	e009      	b.n	8003da8 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d94:	f7fe f958 	bl	8002048 <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003d9e:	1ad3      	subs	r3, r2, r3
 8003da0:	2b64      	cmp	r3, #100	; 0x64
 8003da2:	d901      	bls.n	8003da8 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003da4:	2303      	movs	r3, #3
 8003da6:	e3b1      	b.n	800450c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003da8:	4b0c      	ldr	r3, [pc, #48]	; (8003ddc <HAL_RCC_OscConfig+0x93c>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d0ef      	beq.n	8003d94 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003db4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003db8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d10d      	bne.n	8003de0 <HAL_RCC_OscConfig+0x940>
 8003dc4:	4b03      	ldr	r3, [pc, #12]	; (8003dd4 <HAL_RCC_OscConfig+0x934>)
 8003dc6:	6a1b      	ldr	r3, [r3, #32]
 8003dc8:	4a02      	ldr	r2, [pc, #8]	; (8003dd4 <HAL_RCC_OscConfig+0x934>)
 8003dca:	f043 0301 	orr.w	r3, r3, #1
 8003dce:	6213      	str	r3, [r2, #32]
 8003dd0:	e03c      	b.n	8003e4c <HAL_RCC_OscConfig+0x9ac>
 8003dd2:	bf00      	nop
 8003dd4:	40021000 	.word	0x40021000
 8003dd8:	10908120 	.word	0x10908120
 8003ddc:	40007000 	.word	0x40007000
 8003de0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003de4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d10c      	bne.n	8003e0a <HAL_RCC_OscConfig+0x96a>
 8003df0:	4bc1      	ldr	r3, [pc, #772]	; (80040f8 <HAL_RCC_OscConfig+0xc58>)
 8003df2:	6a1b      	ldr	r3, [r3, #32]
 8003df4:	4ac0      	ldr	r2, [pc, #768]	; (80040f8 <HAL_RCC_OscConfig+0xc58>)
 8003df6:	f023 0301 	bic.w	r3, r3, #1
 8003dfa:	6213      	str	r3, [r2, #32]
 8003dfc:	4bbe      	ldr	r3, [pc, #760]	; (80040f8 <HAL_RCC_OscConfig+0xc58>)
 8003dfe:	6a1b      	ldr	r3, [r3, #32]
 8003e00:	4abd      	ldr	r2, [pc, #756]	; (80040f8 <HAL_RCC_OscConfig+0xc58>)
 8003e02:	f023 0304 	bic.w	r3, r3, #4
 8003e06:	6213      	str	r3, [r2, #32]
 8003e08:	e020      	b.n	8003e4c <HAL_RCC_OscConfig+0x9ac>
 8003e0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e0e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	68db      	ldr	r3, [r3, #12]
 8003e16:	2b05      	cmp	r3, #5
 8003e18:	d10c      	bne.n	8003e34 <HAL_RCC_OscConfig+0x994>
 8003e1a:	4bb7      	ldr	r3, [pc, #732]	; (80040f8 <HAL_RCC_OscConfig+0xc58>)
 8003e1c:	6a1b      	ldr	r3, [r3, #32]
 8003e1e:	4ab6      	ldr	r2, [pc, #728]	; (80040f8 <HAL_RCC_OscConfig+0xc58>)
 8003e20:	f043 0304 	orr.w	r3, r3, #4
 8003e24:	6213      	str	r3, [r2, #32]
 8003e26:	4bb4      	ldr	r3, [pc, #720]	; (80040f8 <HAL_RCC_OscConfig+0xc58>)
 8003e28:	6a1b      	ldr	r3, [r3, #32]
 8003e2a:	4ab3      	ldr	r2, [pc, #716]	; (80040f8 <HAL_RCC_OscConfig+0xc58>)
 8003e2c:	f043 0301 	orr.w	r3, r3, #1
 8003e30:	6213      	str	r3, [r2, #32]
 8003e32:	e00b      	b.n	8003e4c <HAL_RCC_OscConfig+0x9ac>
 8003e34:	4bb0      	ldr	r3, [pc, #704]	; (80040f8 <HAL_RCC_OscConfig+0xc58>)
 8003e36:	6a1b      	ldr	r3, [r3, #32]
 8003e38:	4aaf      	ldr	r2, [pc, #700]	; (80040f8 <HAL_RCC_OscConfig+0xc58>)
 8003e3a:	f023 0301 	bic.w	r3, r3, #1
 8003e3e:	6213      	str	r3, [r2, #32]
 8003e40:	4bad      	ldr	r3, [pc, #692]	; (80040f8 <HAL_RCC_OscConfig+0xc58>)
 8003e42:	6a1b      	ldr	r3, [r3, #32]
 8003e44:	4aac      	ldr	r2, [pc, #688]	; (80040f8 <HAL_RCC_OscConfig+0xc58>)
 8003e46:	f023 0304 	bic.w	r3, r3, #4
 8003e4a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e50:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	68db      	ldr	r3, [r3, #12]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	f000 8081 	beq.w	8003f60 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e5e:	f7fe f8f3 	bl	8002048 <HAL_GetTick>
 8003e62:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e66:	e00b      	b.n	8003e80 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e68:	f7fe f8ee 	bl	8002048 <HAL_GetTick>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d901      	bls.n	8003e80 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	e345      	b.n	800450c <HAL_RCC_OscConfig+0x106c>
 8003e80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e84:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003e88:	2202      	movs	r2, #2
 8003e8a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e90:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	fa93 f2a3 	rbit	r2, r3
 8003e9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e9e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003ea2:	601a      	str	r2, [r3, #0]
 8003ea4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ea8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003eac:	2202      	movs	r2, #2
 8003eae:	601a      	str	r2, [r3, #0]
 8003eb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003eb4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	fa93 f2a3 	rbit	r2, r3
 8003ebe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ec2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003ec6:	601a      	str	r2, [r3, #0]
  return result;
 8003ec8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ecc:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003ed0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ed2:	fab3 f383 	clz	r3, r3
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	095b      	lsrs	r3, r3, #5
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	f043 0302 	orr.w	r3, r3, #2
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	2b02      	cmp	r3, #2
 8003ee4:	d102      	bne.n	8003eec <HAL_RCC_OscConfig+0xa4c>
 8003ee6:	4b84      	ldr	r3, [pc, #528]	; (80040f8 <HAL_RCC_OscConfig+0xc58>)
 8003ee8:	6a1b      	ldr	r3, [r3, #32]
 8003eea:	e013      	b.n	8003f14 <HAL_RCC_OscConfig+0xa74>
 8003eec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ef0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003ef4:	2202      	movs	r2, #2
 8003ef6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ef8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003efc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	fa93 f2a3 	rbit	r2, r3
 8003f06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f0a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003f0e:	601a      	str	r2, [r3, #0]
 8003f10:	4b79      	ldr	r3, [pc, #484]	; (80040f8 <HAL_RCC_OscConfig+0xc58>)
 8003f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f14:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f18:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003f1c:	2102      	movs	r1, #2
 8003f1e:	6011      	str	r1, [r2, #0]
 8003f20:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f24:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003f28:	6812      	ldr	r2, [r2, #0]
 8003f2a:	fa92 f1a2 	rbit	r1, r2
 8003f2e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f32:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003f36:	6011      	str	r1, [r2, #0]
  return result;
 8003f38:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f3c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003f40:	6812      	ldr	r2, [r2, #0]
 8003f42:	fab2 f282 	clz	r2, r2
 8003f46:	b2d2      	uxtb	r2, r2
 8003f48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f4c:	b2d2      	uxtb	r2, r2
 8003f4e:	f002 021f 	and.w	r2, r2, #31
 8003f52:	2101      	movs	r1, #1
 8003f54:	fa01 f202 	lsl.w	r2, r1, r2
 8003f58:	4013      	ands	r3, r2
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d084      	beq.n	8003e68 <HAL_RCC_OscConfig+0x9c8>
 8003f5e:	e07f      	b.n	8004060 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f60:	f7fe f872 	bl	8002048 <HAL_GetTick>
 8003f64:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f68:	e00b      	b.n	8003f82 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f6a:	f7fe f86d 	bl	8002048 <HAL_GetTick>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d901      	bls.n	8003f82 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003f7e:	2303      	movs	r3, #3
 8003f80:	e2c4      	b.n	800450c <HAL_RCC_OscConfig+0x106c>
 8003f82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f86:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003f8a:	2202      	movs	r2, #2
 8003f8c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f92:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	fa93 f2a3 	rbit	r2, r3
 8003f9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fa0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003fa4:	601a      	str	r2, [r3, #0]
 8003fa6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003faa:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003fae:	2202      	movs	r2, #2
 8003fb0:	601a      	str	r2, [r3, #0]
 8003fb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fb6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	fa93 f2a3 	rbit	r2, r3
 8003fc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fc4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003fc8:	601a      	str	r2, [r3, #0]
  return result;
 8003fca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fce:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003fd2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fd4:	fab3 f383 	clz	r3, r3
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	095b      	lsrs	r3, r3, #5
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	f043 0302 	orr.w	r3, r3, #2
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	2b02      	cmp	r3, #2
 8003fe6:	d102      	bne.n	8003fee <HAL_RCC_OscConfig+0xb4e>
 8003fe8:	4b43      	ldr	r3, [pc, #268]	; (80040f8 <HAL_RCC_OscConfig+0xc58>)
 8003fea:	6a1b      	ldr	r3, [r3, #32]
 8003fec:	e013      	b.n	8004016 <HAL_RCC_OscConfig+0xb76>
 8003fee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ff2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003ff6:	2202      	movs	r2, #2
 8003ff8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ffa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ffe:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	fa93 f2a3 	rbit	r2, r3
 8004008:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800400c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004010:	601a      	str	r2, [r3, #0]
 8004012:	4b39      	ldr	r3, [pc, #228]	; (80040f8 <HAL_RCC_OscConfig+0xc58>)
 8004014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004016:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800401a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800401e:	2102      	movs	r1, #2
 8004020:	6011      	str	r1, [r2, #0]
 8004022:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004026:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800402a:	6812      	ldr	r2, [r2, #0]
 800402c:	fa92 f1a2 	rbit	r1, r2
 8004030:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004034:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004038:	6011      	str	r1, [r2, #0]
  return result;
 800403a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800403e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004042:	6812      	ldr	r2, [r2, #0]
 8004044:	fab2 f282 	clz	r2, r2
 8004048:	b2d2      	uxtb	r2, r2
 800404a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800404e:	b2d2      	uxtb	r2, r2
 8004050:	f002 021f 	and.w	r2, r2, #31
 8004054:	2101      	movs	r1, #1
 8004056:	fa01 f202 	lsl.w	r2, r1, r2
 800405a:	4013      	ands	r3, r2
 800405c:	2b00      	cmp	r3, #0
 800405e:	d184      	bne.n	8003f6a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004060:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8004064:	2b01      	cmp	r3, #1
 8004066:	d105      	bne.n	8004074 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004068:	4b23      	ldr	r3, [pc, #140]	; (80040f8 <HAL_RCC_OscConfig+0xc58>)
 800406a:	69db      	ldr	r3, [r3, #28]
 800406c:	4a22      	ldr	r2, [pc, #136]	; (80040f8 <HAL_RCC_OscConfig+0xc58>)
 800406e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004072:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004074:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004078:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	69db      	ldr	r3, [r3, #28]
 8004080:	2b00      	cmp	r3, #0
 8004082:	f000 8242 	beq.w	800450a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004086:	4b1c      	ldr	r3, [pc, #112]	; (80040f8 <HAL_RCC_OscConfig+0xc58>)
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	f003 030c 	and.w	r3, r3, #12
 800408e:	2b08      	cmp	r3, #8
 8004090:	f000 8213 	beq.w	80044ba <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004094:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004098:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	69db      	ldr	r3, [r3, #28]
 80040a0:	2b02      	cmp	r3, #2
 80040a2:	f040 8162 	bne.w	800436a <HAL_RCC_OscConfig+0xeca>
 80040a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040aa:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80040ae:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80040b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040b8:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	fa93 f2a3 	rbit	r2, r3
 80040c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040c6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80040ca:	601a      	str	r2, [r3, #0]
  return result;
 80040cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040d0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80040d4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040d6:	fab3 f383 	clz	r3, r3
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80040e0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	461a      	mov	r2, r3
 80040e8:	2300      	movs	r3, #0
 80040ea:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040ec:	f7fd ffac 	bl	8002048 <HAL_GetTick>
 80040f0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040f4:	e00c      	b.n	8004110 <HAL_RCC_OscConfig+0xc70>
 80040f6:	bf00      	nop
 80040f8:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040fc:	f7fd ffa4 	bl	8002048 <HAL_GetTick>
 8004100:	4602      	mov	r2, r0
 8004102:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004106:	1ad3      	subs	r3, r2, r3
 8004108:	2b02      	cmp	r3, #2
 800410a:	d901      	bls.n	8004110 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800410c:	2303      	movs	r3, #3
 800410e:	e1fd      	b.n	800450c <HAL_RCC_OscConfig+0x106c>
 8004110:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004114:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004118:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800411c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800411e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004122:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	fa93 f2a3 	rbit	r2, r3
 800412c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004130:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004134:	601a      	str	r2, [r3, #0]
  return result;
 8004136:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800413a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800413e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004140:	fab3 f383 	clz	r3, r3
 8004144:	b2db      	uxtb	r3, r3
 8004146:	095b      	lsrs	r3, r3, #5
 8004148:	b2db      	uxtb	r3, r3
 800414a:	f043 0301 	orr.w	r3, r3, #1
 800414e:	b2db      	uxtb	r3, r3
 8004150:	2b01      	cmp	r3, #1
 8004152:	d102      	bne.n	800415a <HAL_RCC_OscConfig+0xcba>
 8004154:	4bb0      	ldr	r3, [pc, #704]	; (8004418 <HAL_RCC_OscConfig+0xf78>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	e027      	b.n	80041aa <HAL_RCC_OscConfig+0xd0a>
 800415a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800415e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004162:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004166:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004168:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800416c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	fa93 f2a3 	rbit	r2, r3
 8004176:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800417a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800417e:	601a      	str	r2, [r3, #0]
 8004180:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004184:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004188:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800418c:	601a      	str	r2, [r3, #0]
 800418e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004192:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	fa93 f2a3 	rbit	r2, r3
 800419c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041a0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80041a4:	601a      	str	r2, [r3, #0]
 80041a6:	4b9c      	ldr	r3, [pc, #624]	; (8004418 <HAL_RCC_OscConfig+0xf78>)
 80041a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041aa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80041ae:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80041b2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80041b6:	6011      	str	r1, [r2, #0]
 80041b8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80041bc:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80041c0:	6812      	ldr	r2, [r2, #0]
 80041c2:	fa92 f1a2 	rbit	r1, r2
 80041c6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80041ca:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80041ce:	6011      	str	r1, [r2, #0]
  return result;
 80041d0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80041d4:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80041d8:	6812      	ldr	r2, [r2, #0]
 80041da:	fab2 f282 	clz	r2, r2
 80041de:	b2d2      	uxtb	r2, r2
 80041e0:	f042 0220 	orr.w	r2, r2, #32
 80041e4:	b2d2      	uxtb	r2, r2
 80041e6:	f002 021f 	and.w	r2, r2, #31
 80041ea:	2101      	movs	r1, #1
 80041ec:	fa01 f202 	lsl.w	r2, r1, r2
 80041f0:	4013      	ands	r3, r2
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d182      	bne.n	80040fc <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041f6:	4b88      	ldr	r3, [pc, #544]	; (8004418 <HAL_RCC_OscConfig+0xf78>)
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80041fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004202:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800420a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800420e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	6a1b      	ldr	r3, [r3, #32]
 8004216:	430b      	orrs	r3, r1
 8004218:	497f      	ldr	r1, [pc, #508]	; (8004418 <HAL_RCC_OscConfig+0xf78>)
 800421a:	4313      	orrs	r3, r2
 800421c:	604b      	str	r3, [r1, #4]
 800421e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004222:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004226:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800422a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800422c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004230:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	fa93 f2a3 	rbit	r2, r3
 800423a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800423e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004242:	601a      	str	r2, [r3, #0]
  return result;
 8004244:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004248:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800424c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800424e:	fab3 f383 	clz	r3, r3
 8004252:	b2db      	uxtb	r3, r3
 8004254:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004258:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800425c:	009b      	lsls	r3, r3, #2
 800425e:	461a      	mov	r2, r3
 8004260:	2301      	movs	r3, #1
 8004262:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004264:	f7fd fef0 	bl	8002048 <HAL_GetTick>
 8004268:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800426c:	e009      	b.n	8004282 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800426e:	f7fd feeb 	bl	8002048 <HAL_GetTick>
 8004272:	4602      	mov	r2, r0
 8004274:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	2b02      	cmp	r3, #2
 800427c:	d901      	bls.n	8004282 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800427e:	2303      	movs	r3, #3
 8004280:	e144      	b.n	800450c <HAL_RCC_OscConfig+0x106c>
 8004282:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004286:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800428a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800428e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004290:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004294:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	fa93 f2a3 	rbit	r2, r3
 800429e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042a2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80042a6:	601a      	str	r2, [r3, #0]
  return result;
 80042a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042ac:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80042b0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80042b2:	fab3 f383 	clz	r3, r3
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	095b      	lsrs	r3, r3, #5
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	f043 0301 	orr.w	r3, r3, #1
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d102      	bne.n	80042cc <HAL_RCC_OscConfig+0xe2c>
 80042c6:	4b54      	ldr	r3, [pc, #336]	; (8004418 <HAL_RCC_OscConfig+0xf78>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	e027      	b.n	800431c <HAL_RCC_OscConfig+0xe7c>
 80042cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042d0:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80042d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80042d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042de:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	fa93 f2a3 	rbit	r2, r3
 80042e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042ec:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80042f0:	601a      	str	r2, [r3, #0]
 80042f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042f6:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80042fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80042fe:	601a      	str	r2, [r3, #0]
 8004300:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004304:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	fa93 f2a3 	rbit	r2, r3
 800430e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004312:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004316:	601a      	str	r2, [r3, #0]
 8004318:	4b3f      	ldr	r3, [pc, #252]	; (8004418 <HAL_RCC_OscConfig+0xf78>)
 800431a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004320:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004324:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004328:	6011      	str	r1, [r2, #0]
 800432a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800432e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004332:	6812      	ldr	r2, [r2, #0]
 8004334:	fa92 f1a2 	rbit	r1, r2
 8004338:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800433c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004340:	6011      	str	r1, [r2, #0]
  return result;
 8004342:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004346:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800434a:	6812      	ldr	r2, [r2, #0]
 800434c:	fab2 f282 	clz	r2, r2
 8004350:	b2d2      	uxtb	r2, r2
 8004352:	f042 0220 	orr.w	r2, r2, #32
 8004356:	b2d2      	uxtb	r2, r2
 8004358:	f002 021f 	and.w	r2, r2, #31
 800435c:	2101      	movs	r1, #1
 800435e:	fa01 f202 	lsl.w	r2, r1, r2
 8004362:	4013      	ands	r3, r2
 8004364:	2b00      	cmp	r3, #0
 8004366:	d082      	beq.n	800426e <HAL_RCC_OscConfig+0xdce>
 8004368:	e0cf      	b.n	800450a <HAL_RCC_OscConfig+0x106a>
 800436a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800436e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004372:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004376:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004378:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800437c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	fa93 f2a3 	rbit	r2, r3
 8004386:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800438a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800438e:	601a      	str	r2, [r3, #0]
  return result;
 8004390:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004394:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004398:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800439a:	fab3 f383 	clz	r3, r3
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80043a4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	461a      	mov	r2, r3
 80043ac:	2300      	movs	r3, #0
 80043ae:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043b0:	f7fd fe4a 	bl	8002048 <HAL_GetTick>
 80043b4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043b8:	e009      	b.n	80043ce <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043ba:	f7fd fe45 	bl	8002048 <HAL_GetTick>
 80043be:	4602      	mov	r2, r0
 80043c0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	2b02      	cmp	r3, #2
 80043c8:	d901      	bls.n	80043ce <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80043ca:	2303      	movs	r3, #3
 80043cc:	e09e      	b.n	800450c <HAL_RCC_OscConfig+0x106c>
 80043ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043d2:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80043d6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80043da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043e0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	fa93 f2a3 	rbit	r2, r3
 80043ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043ee:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80043f2:	601a      	str	r2, [r3, #0]
  return result;
 80043f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043f8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80043fc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043fe:	fab3 f383 	clz	r3, r3
 8004402:	b2db      	uxtb	r3, r3
 8004404:	095b      	lsrs	r3, r3, #5
 8004406:	b2db      	uxtb	r3, r3
 8004408:	f043 0301 	orr.w	r3, r3, #1
 800440c:	b2db      	uxtb	r3, r3
 800440e:	2b01      	cmp	r3, #1
 8004410:	d104      	bne.n	800441c <HAL_RCC_OscConfig+0xf7c>
 8004412:	4b01      	ldr	r3, [pc, #4]	; (8004418 <HAL_RCC_OscConfig+0xf78>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	e029      	b.n	800446c <HAL_RCC_OscConfig+0xfcc>
 8004418:	40021000 	.word	0x40021000
 800441c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004420:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004424:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004428:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800442a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800442e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	fa93 f2a3 	rbit	r2, r3
 8004438:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800443c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004440:	601a      	str	r2, [r3, #0]
 8004442:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004446:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800444a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800444e:	601a      	str	r2, [r3, #0]
 8004450:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004454:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	fa93 f2a3 	rbit	r2, r3
 800445e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004462:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004466:	601a      	str	r2, [r3, #0]
 8004468:	4b2b      	ldr	r3, [pc, #172]	; (8004518 <HAL_RCC_OscConfig+0x1078>)
 800446a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004470:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004474:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004478:	6011      	str	r1, [r2, #0]
 800447a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800447e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004482:	6812      	ldr	r2, [r2, #0]
 8004484:	fa92 f1a2 	rbit	r1, r2
 8004488:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800448c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004490:	6011      	str	r1, [r2, #0]
  return result;
 8004492:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004496:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800449a:	6812      	ldr	r2, [r2, #0]
 800449c:	fab2 f282 	clz	r2, r2
 80044a0:	b2d2      	uxtb	r2, r2
 80044a2:	f042 0220 	orr.w	r2, r2, #32
 80044a6:	b2d2      	uxtb	r2, r2
 80044a8:	f002 021f 	and.w	r2, r2, #31
 80044ac:	2101      	movs	r1, #1
 80044ae:	fa01 f202 	lsl.w	r2, r1, r2
 80044b2:	4013      	ands	r3, r2
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d180      	bne.n	80043ba <HAL_RCC_OscConfig+0xf1a>
 80044b8:	e027      	b.n	800450a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	69db      	ldr	r3, [r3, #28]
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	d101      	bne.n	80044ce <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e01e      	b.n	800450c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80044ce:	4b12      	ldr	r3, [pc, #72]	; (8004518 <HAL_RCC_OscConfig+0x1078>)
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80044d6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80044da:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80044de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	6a1b      	ldr	r3, [r3, #32]
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d10b      	bne.n	8004506 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80044ee:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80044f2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80044f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004502:	429a      	cmp	r2, r3
 8004504:	d001      	beq.n	800450a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e000      	b.n	800450c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800450a:	2300      	movs	r3, #0
}
 800450c:	4618      	mov	r0, r3
 800450e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop
 8004518:	40021000 	.word	0x40021000

0800451c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b09e      	sub	sp, #120	; 0x78
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004526:	2300      	movs	r3, #0
 8004528:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d101      	bne.n	8004534 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	e162      	b.n	80047fa <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004534:	4b90      	ldr	r3, [pc, #576]	; (8004778 <HAL_RCC_ClockConfig+0x25c>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 0307 	and.w	r3, r3, #7
 800453c:	683a      	ldr	r2, [r7, #0]
 800453e:	429a      	cmp	r2, r3
 8004540:	d910      	bls.n	8004564 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004542:	4b8d      	ldr	r3, [pc, #564]	; (8004778 <HAL_RCC_ClockConfig+0x25c>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f023 0207 	bic.w	r2, r3, #7
 800454a:	498b      	ldr	r1, [pc, #556]	; (8004778 <HAL_RCC_ClockConfig+0x25c>)
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	4313      	orrs	r3, r2
 8004550:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004552:	4b89      	ldr	r3, [pc, #548]	; (8004778 <HAL_RCC_ClockConfig+0x25c>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 0307 	and.w	r3, r3, #7
 800455a:	683a      	ldr	r2, [r7, #0]
 800455c:	429a      	cmp	r2, r3
 800455e:	d001      	beq.n	8004564 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	e14a      	b.n	80047fa <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 0302 	and.w	r3, r3, #2
 800456c:	2b00      	cmp	r3, #0
 800456e:	d008      	beq.n	8004582 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004570:	4b82      	ldr	r3, [pc, #520]	; (800477c <HAL_RCC_ClockConfig+0x260>)
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	497f      	ldr	r1, [pc, #508]	; (800477c <HAL_RCC_ClockConfig+0x260>)
 800457e:	4313      	orrs	r3, r2
 8004580:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 0301 	and.w	r3, r3, #1
 800458a:	2b00      	cmp	r3, #0
 800458c:	f000 80dc 	beq.w	8004748 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	2b01      	cmp	r3, #1
 8004596:	d13c      	bne.n	8004612 <HAL_RCC_ClockConfig+0xf6>
 8004598:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800459c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800459e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80045a0:	fa93 f3a3 	rbit	r3, r3
 80045a4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80045a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045a8:	fab3 f383 	clz	r3, r3
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	095b      	lsrs	r3, r3, #5
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	f043 0301 	orr.w	r3, r3, #1
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d102      	bne.n	80045c2 <HAL_RCC_ClockConfig+0xa6>
 80045bc:	4b6f      	ldr	r3, [pc, #444]	; (800477c <HAL_RCC_ClockConfig+0x260>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	e00f      	b.n	80045e2 <HAL_RCC_ClockConfig+0xc6>
 80045c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80045c6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80045ca:	fa93 f3a3 	rbit	r3, r3
 80045ce:	667b      	str	r3, [r7, #100]	; 0x64
 80045d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80045d4:	663b      	str	r3, [r7, #96]	; 0x60
 80045d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80045d8:	fa93 f3a3 	rbit	r3, r3
 80045dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80045de:	4b67      	ldr	r3, [pc, #412]	; (800477c <HAL_RCC_ClockConfig+0x260>)
 80045e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80045e6:	65ba      	str	r2, [r7, #88]	; 0x58
 80045e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80045ea:	fa92 f2a2 	rbit	r2, r2
 80045ee:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80045f0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80045f2:	fab2 f282 	clz	r2, r2
 80045f6:	b2d2      	uxtb	r2, r2
 80045f8:	f042 0220 	orr.w	r2, r2, #32
 80045fc:	b2d2      	uxtb	r2, r2
 80045fe:	f002 021f 	and.w	r2, r2, #31
 8004602:	2101      	movs	r1, #1
 8004604:	fa01 f202 	lsl.w	r2, r1, r2
 8004608:	4013      	ands	r3, r2
 800460a:	2b00      	cmp	r3, #0
 800460c:	d17b      	bne.n	8004706 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e0f3      	b.n	80047fa <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	2b02      	cmp	r3, #2
 8004618:	d13c      	bne.n	8004694 <HAL_RCC_ClockConfig+0x178>
 800461a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800461e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004620:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004622:	fa93 f3a3 	rbit	r3, r3
 8004626:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004628:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800462a:	fab3 f383 	clz	r3, r3
 800462e:	b2db      	uxtb	r3, r3
 8004630:	095b      	lsrs	r3, r3, #5
 8004632:	b2db      	uxtb	r3, r3
 8004634:	f043 0301 	orr.w	r3, r3, #1
 8004638:	b2db      	uxtb	r3, r3
 800463a:	2b01      	cmp	r3, #1
 800463c:	d102      	bne.n	8004644 <HAL_RCC_ClockConfig+0x128>
 800463e:	4b4f      	ldr	r3, [pc, #316]	; (800477c <HAL_RCC_ClockConfig+0x260>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	e00f      	b.n	8004664 <HAL_RCC_ClockConfig+0x148>
 8004644:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004648:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800464a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800464c:	fa93 f3a3 	rbit	r3, r3
 8004650:	647b      	str	r3, [r7, #68]	; 0x44
 8004652:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004656:	643b      	str	r3, [r7, #64]	; 0x40
 8004658:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800465a:	fa93 f3a3 	rbit	r3, r3
 800465e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004660:	4b46      	ldr	r3, [pc, #280]	; (800477c <HAL_RCC_ClockConfig+0x260>)
 8004662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004664:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004668:	63ba      	str	r2, [r7, #56]	; 0x38
 800466a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800466c:	fa92 f2a2 	rbit	r2, r2
 8004670:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004672:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004674:	fab2 f282 	clz	r2, r2
 8004678:	b2d2      	uxtb	r2, r2
 800467a:	f042 0220 	orr.w	r2, r2, #32
 800467e:	b2d2      	uxtb	r2, r2
 8004680:	f002 021f 	and.w	r2, r2, #31
 8004684:	2101      	movs	r1, #1
 8004686:	fa01 f202 	lsl.w	r2, r1, r2
 800468a:	4013      	ands	r3, r2
 800468c:	2b00      	cmp	r3, #0
 800468e:	d13a      	bne.n	8004706 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	e0b2      	b.n	80047fa <HAL_RCC_ClockConfig+0x2de>
 8004694:	2302      	movs	r3, #2
 8004696:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800469a:	fa93 f3a3 	rbit	r3, r3
 800469e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80046a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046a2:	fab3 f383 	clz	r3, r3
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	095b      	lsrs	r3, r3, #5
 80046aa:	b2db      	uxtb	r3, r3
 80046ac:	f043 0301 	orr.w	r3, r3, #1
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d102      	bne.n	80046bc <HAL_RCC_ClockConfig+0x1a0>
 80046b6:	4b31      	ldr	r3, [pc, #196]	; (800477c <HAL_RCC_ClockConfig+0x260>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	e00d      	b.n	80046d8 <HAL_RCC_ClockConfig+0x1bc>
 80046bc:	2302      	movs	r3, #2
 80046be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046c2:	fa93 f3a3 	rbit	r3, r3
 80046c6:	627b      	str	r3, [r7, #36]	; 0x24
 80046c8:	2302      	movs	r3, #2
 80046ca:	623b      	str	r3, [r7, #32]
 80046cc:	6a3b      	ldr	r3, [r7, #32]
 80046ce:	fa93 f3a3 	rbit	r3, r3
 80046d2:	61fb      	str	r3, [r7, #28]
 80046d4:	4b29      	ldr	r3, [pc, #164]	; (800477c <HAL_RCC_ClockConfig+0x260>)
 80046d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d8:	2202      	movs	r2, #2
 80046da:	61ba      	str	r2, [r7, #24]
 80046dc:	69ba      	ldr	r2, [r7, #24]
 80046de:	fa92 f2a2 	rbit	r2, r2
 80046e2:	617a      	str	r2, [r7, #20]
  return result;
 80046e4:	697a      	ldr	r2, [r7, #20]
 80046e6:	fab2 f282 	clz	r2, r2
 80046ea:	b2d2      	uxtb	r2, r2
 80046ec:	f042 0220 	orr.w	r2, r2, #32
 80046f0:	b2d2      	uxtb	r2, r2
 80046f2:	f002 021f 	and.w	r2, r2, #31
 80046f6:	2101      	movs	r1, #1
 80046f8:	fa01 f202 	lsl.w	r2, r1, r2
 80046fc:	4013      	ands	r3, r2
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d101      	bne.n	8004706 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e079      	b.n	80047fa <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004706:	4b1d      	ldr	r3, [pc, #116]	; (800477c <HAL_RCC_ClockConfig+0x260>)
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	f023 0203 	bic.w	r2, r3, #3
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	491a      	ldr	r1, [pc, #104]	; (800477c <HAL_RCC_ClockConfig+0x260>)
 8004714:	4313      	orrs	r3, r2
 8004716:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004718:	f7fd fc96 	bl	8002048 <HAL_GetTick>
 800471c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800471e:	e00a      	b.n	8004736 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004720:	f7fd fc92 	bl	8002048 <HAL_GetTick>
 8004724:	4602      	mov	r2, r0
 8004726:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	f241 3288 	movw	r2, #5000	; 0x1388
 800472e:	4293      	cmp	r3, r2
 8004730:	d901      	bls.n	8004736 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	e061      	b.n	80047fa <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004736:	4b11      	ldr	r3, [pc, #68]	; (800477c <HAL_RCC_ClockConfig+0x260>)
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	f003 020c 	and.w	r2, r3, #12
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	429a      	cmp	r2, r3
 8004746:	d1eb      	bne.n	8004720 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004748:	4b0b      	ldr	r3, [pc, #44]	; (8004778 <HAL_RCC_ClockConfig+0x25c>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f003 0307 	and.w	r3, r3, #7
 8004750:	683a      	ldr	r2, [r7, #0]
 8004752:	429a      	cmp	r2, r3
 8004754:	d214      	bcs.n	8004780 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004756:	4b08      	ldr	r3, [pc, #32]	; (8004778 <HAL_RCC_ClockConfig+0x25c>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f023 0207 	bic.w	r2, r3, #7
 800475e:	4906      	ldr	r1, [pc, #24]	; (8004778 <HAL_RCC_ClockConfig+0x25c>)
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	4313      	orrs	r3, r2
 8004764:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004766:	4b04      	ldr	r3, [pc, #16]	; (8004778 <HAL_RCC_ClockConfig+0x25c>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 0307 	and.w	r3, r3, #7
 800476e:	683a      	ldr	r2, [r7, #0]
 8004770:	429a      	cmp	r2, r3
 8004772:	d005      	beq.n	8004780 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	e040      	b.n	80047fa <HAL_RCC_ClockConfig+0x2de>
 8004778:	40022000 	.word	0x40022000
 800477c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 0304 	and.w	r3, r3, #4
 8004788:	2b00      	cmp	r3, #0
 800478a:	d008      	beq.n	800479e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800478c:	4b1d      	ldr	r3, [pc, #116]	; (8004804 <HAL_RCC_ClockConfig+0x2e8>)
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	491a      	ldr	r1, [pc, #104]	; (8004804 <HAL_RCC_ClockConfig+0x2e8>)
 800479a:	4313      	orrs	r3, r2
 800479c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 0308 	and.w	r3, r3, #8
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d009      	beq.n	80047be <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80047aa:	4b16      	ldr	r3, [pc, #88]	; (8004804 <HAL_RCC_ClockConfig+0x2e8>)
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	691b      	ldr	r3, [r3, #16]
 80047b6:	00db      	lsls	r3, r3, #3
 80047b8:	4912      	ldr	r1, [pc, #72]	; (8004804 <HAL_RCC_ClockConfig+0x2e8>)
 80047ba:	4313      	orrs	r3, r2
 80047bc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80047be:	f000 f829 	bl	8004814 <HAL_RCC_GetSysClockFreq>
 80047c2:	4601      	mov	r1, r0
 80047c4:	4b0f      	ldr	r3, [pc, #60]	; (8004804 <HAL_RCC_ClockConfig+0x2e8>)
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047cc:	22f0      	movs	r2, #240	; 0xf0
 80047ce:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047d0:	693a      	ldr	r2, [r7, #16]
 80047d2:	fa92 f2a2 	rbit	r2, r2
 80047d6:	60fa      	str	r2, [r7, #12]
  return result;
 80047d8:	68fa      	ldr	r2, [r7, #12]
 80047da:	fab2 f282 	clz	r2, r2
 80047de:	b2d2      	uxtb	r2, r2
 80047e0:	40d3      	lsrs	r3, r2
 80047e2:	4a09      	ldr	r2, [pc, #36]	; (8004808 <HAL_RCC_ClockConfig+0x2ec>)
 80047e4:	5cd3      	ldrb	r3, [r2, r3]
 80047e6:	fa21 f303 	lsr.w	r3, r1, r3
 80047ea:	4a08      	ldr	r2, [pc, #32]	; (800480c <HAL_RCC_ClockConfig+0x2f0>)
 80047ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80047ee:	4b08      	ldr	r3, [pc, #32]	; (8004810 <HAL_RCC_ClockConfig+0x2f4>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4618      	mov	r0, r3
 80047f4:	f7fd fbe4 	bl	8001fc0 <HAL_InitTick>
  
  return HAL_OK;
 80047f8:	2300      	movs	r3, #0
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3778      	adds	r7, #120	; 0x78
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
 8004802:	bf00      	nop
 8004804:	40021000 	.word	0x40021000
 8004808:	0800b478 	.word	0x0800b478
 800480c:	20000000 	.word	0x20000000
 8004810:	20000004 	.word	0x20000004

08004814 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004814:	b480      	push	{r7}
 8004816:	b08b      	sub	sp, #44	; 0x2c
 8004818:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800481a:	2300      	movs	r3, #0
 800481c:	61fb      	str	r3, [r7, #28]
 800481e:	2300      	movs	r3, #0
 8004820:	61bb      	str	r3, [r7, #24]
 8004822:	2300      	movs	r3, #0
 8004824:	627b      	str	r3, [r7, #36]	; 0x24
 8004826:	2300      	movs	r3, #0
 8004828:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800482a:	2300      	movs	r3, #0
 800482c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800482e:	4b29      	ldr	r3, [pc, #164]	; (80048d4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004834:	69fb      	ldr	r3, [r7, #28]
 8004836:	f003 030c 	and.w	r3, r3, #12
 800483a:	2b04      	cmp	r3, #4
 800483c:	d002      	beq.n	8004844 <HAL_RCC_GetSysClockFreq+0x30>
 800483e:	2b08      	cmp	r3, #8
 8004840:	d003      	beq.n	800484a <HAL_RCC_GetSysClockFreq+0x36>
 8004842:	e03c      	b.n	80048be <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004844:	4b24      	ldr	r3, [pc, #144]	; (80048d8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004846:	623b      	str	r3, [r7, #32]
      break;
 8004848:	e03c      	b.n	80048c4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800484a:	69fb      	ldr	r3, [r7, #28]
 800484c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004850:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004854:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004856:	68ba      	ldr	r2, [r7, #8]
 8004858:	fa92 f2a2 	rbit	r2, r2
 800485c:	607a      	str	r2, [r7, #4]
  return result;
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	fab2 f282 	clz	r2, r2
 8004864:	b2d2      	uxtb	r2, r2
 8004866:	40d3      	lsrs	r3, r2
 8004868:	4a1c      	ldr	r2, [pc, #112]	; (80048dc <HAL_RCC_GetSysClockFreq+0xc8>)
 800486a:	5cd3      	ldrb	r3, [r2, r3]
 800486c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800486e:	4b19      	ldr	r3, [pc, #100]	; (80048d4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004872:	f003 030f 	and.w	r3, r3, #15
 8004876:	220f      	movs	r2, #15
 8004878:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800487a:	693a      	ldr	r2, [r7, #16]
 800487c:	fa92 f2a2 	rbit	r2, r2
 8004880:	60fa      	str	r2, [r7, #12]
  return result;
 8004882:	68fa      	ldr	r2, [r7, #12]
 8004884:	fab2 f282 	clz	r2, r2
 8004888:	b2d2      	uxtb	r2, r2
 800488a:	40d3      	lsrs	r3, r2
 800488c:	4a14      	ldr	r2, [pc, #80]	; (80048e0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800488e:	5cd3      	ldrb	r3, [r2, r3]
 8004890:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004892:	69fb      	ldr	r3, [r7, #28]
 8004894:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004898:	2b00      	cmp	r3, #0
 800489a:	d008      	beq.n	80048ae <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800489c:	4a0e      	ldr	r2, [pc, #56]	; (80048d8 <HAL_RCC_GetSysClockFreq+0xc4>)
 800489e:	69bb      	ldr	r3, [r7, #24]
 80048a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	fb02 f303 	mul.w	r3, r2, r3
 80048aa:	627b      	str	r3, [r7, #36]	; 0x24
 80048ac:	e004      	b.n	80048b8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	4a0c      	ldr	r2, [pc, #48]	; (80048e4 <HAL_RCC_GetSysClockFreq+0xd0>)
 80048b2:	fb02 f303 	mul.w	r3, r2, r3
 80048b6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80048b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ba:	623b      	str	r3, [r7, #32]
      break;
 80048bc:	e002      	b.n	80048c4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80048be:	4b06      	ldr	r3, [pc, #24]	; (80048d8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80048c0:	623b      	str	r3, [r7, #32]
      break;
 80048c2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80048c4:	6a3b      	ldr	r3, [r7, #32]
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	372c      	adds	r7, #44	; 0x2c
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr
 80048d2:	bf00      	nop
 80048d4:	40021000 	.word	0x40021000
 80048d8:	007a1200 	.word	0x007a1200
 80048dc:	0800b490 	.word	0x0800b490
 80048e0:	0800b4a0 	.word	0x0800b4a0
 80048e4:	003d0900 	.word	0x003d0900

080048e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048e8:	b480      	push	{r7}
 80048ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048ec:	4b03      	ldr	r3, [pc, #12]	; (80048fc <HAL_RCC_GetHCLKFreq+0x14>)
 80048ee:	681b      	ldr	r3, [r3, #0]
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr
 80048fa:	bf00      	nop
 80048fc:	20000000 	.word	0x20000000

08004900 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b082      	sub	sp, #8
 8004904:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004906:	f7ff ffef 	bl	80048e8 <HAL_RCC_GetHCLKFreq>
 800490a:	4601      	mov	r1, r0
 800490c:	4b0b      	ldr	r3, [pc, #44]	; (800493c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004914:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004918:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	fa92 f2a2 	rbit	r2, r2
 8004920:	603a      	str	r2, [r7, #0]
  return result;
 8004922:	683a      	ldr	r2, [r7, #0]
 8004924:	fab2 f282 	clz	r2, r2
 8004928:	b2d2      	uxtb	r2, r2
 800492a:	40d3      	lsrs	r3, r2
 800492c:	4a04      	ldr	r2, [pc, #16]	; (8004940 <HAL_RCC_GetPCLK1Freq+0x40>)
 800492e:	5cd3      	ldrb	r3, [r2, r3]
 8004930:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004934:	4618      	mov	r0, r3
 8004936:	3708      	adds	r7, #8
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}
 800493c:	40021000 	.word	0x40021000
 8004940:	0800b488 	.word	0x0800b488

08004944 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b082      	sub	sp, #8
 8004948:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800494a:	f7ff ffcd 	bl	80048e8 <HAL_RCC_GetHCLKFreq>
 800494e:	4601      	mov	r1, r0
 8004950:	4b0b      	ldr	r3, [pc, #44]	; (8004980 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004958:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800495c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	fa92 f2a2 	rbit	r2, r2
 8004964:	603a      	str	r2, [r7, #0]
  return result;
 8004966:	683a      	ldr	r2, [r7, #0]
 8004968:	fab2 f282 	clz	r2, r2
 800496c:	b2d2      	uxtb	r2, r2
 800496e:	40d3      	lsrs	r3, r2
 8004970:	4a04      	ldr	r2, [pc, #16]	; (8004984 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004972:	5cd3      	ldrb	r3, [r2, r3]
 8004974:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004978:	4618      	mov	r0, r3
 800497a:	3708      	adds	r7, #8
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}
 8004980:	40021000 	.word	0x40021000
 8004984:	0800b488 	.word	0x0800b488

08004988 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b092      	sub	sp, #72	; 0x48
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004990:	2300      	movs	r3, #0
 8004992:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004994:	2300      	movs	r3, #0
 8004996:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004998:	2300      	movs	r3, #0
 800499a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	f000 80cd 	beq.w	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049ac:	4b86      	ldr	r3, [pc, #536]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80049ae:	69db      	ldr	r3, [r3, #28]
 80049b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d10e      	bne.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049b8:	4b83      	ldr	r3, [pc, #524]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80049ba:	69db      	ldr	r3, [r3, #28]
 80049bc:	4a82      	ldr	r2, [pc, #520]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80049be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049c2:	61d3      	str	r3, [r2, #28]
 80049c4:	4b80      	ldr	r3, [pc, #512]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80049c6:	69db      	ldr	r3, [r3, #28]
 80049c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049cc:	60bb      	str	r3, [r7, #8]
 80049ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049d0:	2301      	movs	r3, #1
 80049d2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049d6:	4b7d      	ldr	r3, [pc, #500]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d118      	bne.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049e2:	4b7a      	ldr	r3, [pc, #488]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a79      	ldr	r2, [pc, #484]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80049e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049ec:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049ee:	f7fd fb2b 	bl	8002048 <HAL_GetTick>
 80049f2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049f4:	e008      	b.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049f6:	f7fd fb27 	bl	8002048 <HAL_GetTick>
 80049fa:	4602      	mov	r2, r0
 80049fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049fe:	1ad3      	subs	r3, r2, r3
 8004a00:	2b64      	cmp	r3, #100	; 0x64
 8004a02:	d901      	bls.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004a04:	2303      	movs	r3, #3
 8004a06:	e0db      	b.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a08:	4b70      	ldr	r3, [pc, #448]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d0f0      	beq.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004a14:	4b6c      	ldr	r3, [pc, #432]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004a16:	6a1b      	ldr	r3, [r3, #32]
 8004a18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a1c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004a1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d07d      	beq.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a2c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d076      	beq.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004a32:	4b65      	ldr	r3, [pc, #404]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004a34:	6a1b      	ldr	r3, [r3, #32]
 8004a36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a3c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004a40:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a44:	fa93 f3a3 	rbit	r3, r3
 8004a48:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004a4c:	fab3 f383 	clz	r3, r3
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	461a      	mov	r2, r3
 8004a54:	4b5e      	ldr	r3, [pc, #376]	; (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004a56:	4413      	add	r3, r2
 8004a58:	009b      	lsls	r3, r3, #2
 8004a5a:	461a      	mov	r2, r3
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	6013      	str	r3, [r2, #0]
 8004a60:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004a64:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a68:	fa93 f3a3 	rbit	r3, r3
 8004a6c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004a6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004a70:	fab3 f383 	clz	r3, r3
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	461a      	mov	r2, r3
 8004a78:	4b55      	ldr	r3, [pc, #340]	; (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004a7a:	4413      	add	r3, r2
 8004a7c:	009b      	lsls	r3, r3, #2
 8004a7e:	461a      	mov	r2, r3
 8004a80:	2300      	movs	r3, #0
 8004a82:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004a84:	4a50      	ldr	r2, [pc, #320]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004a86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a88:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004a8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a8c:	f003 0301 	and.w	r3, r3, #1
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d045      	beq.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a94:	f7fd fad8 	bl	8002048 <HAL_GetTick>
 8004a98:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a9a:	e00a      	b.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a9c:	f7fd fad4 	bl	8002048 <HAL_GetTick>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004aa4:	1ad3      	subs	r3, r2, r3
 8004aa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d901      	bls.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8004aae:	2303      	movs	r3, #3
 8004ab0:	e086      	b.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8004ab2:	2302      	movs	r3, #2
 8004ab4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab8:	fa93 f3a3 	rbit	r3, r3
 8004abc:	627b      	str	r3, [r7, #36]	; 0x24
 8004abe:	2302      	movs	r3, #2
 8004ac0:	623b      	str	r3, [r7, #32]
 8004ac2:	6a3b      	ldr	r3, [r7, #32]
 8004ac4:	fa93 f3a3 	rbit	r3, r3
 8004ac8:	61fb      	str	r3, [r7, #28]
  return result;
 8004aca:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004acc:	fab3 f383 	clz	r3, r3
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	095b      	lsrs	r3, r3, #5
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	f043 0302 	orr.w	r3, r3, #2
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	2b02      	cmp	r3, #2
 8004ade:	d102      	bne.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004ae0:	4b39      	ldr	r3, [pc, #228]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004ae2:	6a1b      	ldr	r3, [r3, #32]
 8004ae4:	e007      	b.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8004ae6:	2302      	movs	r3, #2
 8004ae8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aea:	69bb      	ldr	r3, [r7, #24]
 8004aec:	fa93 f3a3 	rbit	r3, r3
 8004af0:	617b      	str	r3, [r7, #20]
 8004af2:	4b35      	ldr	r3, [pc, #212]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af6:	2202      	movs	r2, #2
 8004af8:	613a      	str	r2, [r7, #16]
 8004afa:	693a      	ldr	r2, [r7, #16]
 8004afc:	fa92 f2a2 	rbit	r2, r2
 8004b00:	60fa      	str	r2, [r7, #12]
  return result;
 8004b02:	68fa      	ldr	r2, [r7, #12]
 8004b04:	fab2 f282 	clz	r2, r2
 8004b08:	b2d2      	uxtb	r2, r2
 8004b0a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b0e:	b2d2      	uxtb	r2, r2
 8004b10:	f002 021f 	and.w	r2, r2, #31
 8004b14:	2101      	movs	r1, #1
 8004b16:	fa01 f202 	lsl.w	r2, r1, r2
 8004b1a:	4013      	ands	r3, r2
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d0bd      	beq.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004b20:	4b29      	ldr	r3, [pc, #164]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004b22:	6a1b      	ldr	r3, [r3, #32]
 8004b24:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	4926      	ldr	r1, [pc, #152]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004b32:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d105      	bne.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b3a:	4b23      	ldr	r3, [pc, #140]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004b3c:	69db      	ldr	r3, [r3, #28]
 8004b3e:	4a22      	ldr	r2, [pc, #136]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004b40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b44:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 0301 	and.w	r3, r3, #1
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d008      	beq.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004b52:	4b1d      	ldr	r3, [pc, #116]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b56:	f023 0203 	bic.w	r2, r3, #3
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	491a      	ldr	r1, [pc, #104]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004b60:	4313      	orrs	r3, r2
 8004b62:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 0320 	and.w	r3, r3, #32
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d008      	beq.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b70:	4b15      	ldr	r3, [pc, #84]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b74:	f023 0210 	bic.w	r2, r3, #16
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	4912      	ldr	r1, [pc, #72]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d008      	beq.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004b8e:	4b0e      	ldr	r3, [pc, #56]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b92:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	691b      	ldr	r3, [r3, #16]
 8004b9a:	490b      	ldr	r1, [pc, #44]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d008      	beq.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004bac:	4b06      	ldr	r3, [pc, #24]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	695b      	ldr	r3, [r3, #20]
 8004bb8:	4903      	ldr	r1, [pc, #12]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004bbe:	2300      	movs	r3, #0
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3748      	adds	r7, #72	; 0x48
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}
 8004bc8:	40021000 	.word	0x40021000
 8004bcc:	40007000 	.word	0x40007000
 8004bd0:	10908100 	.word	0x10908100

08004bd4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b082      	sub	sp, #8
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d101      	bne.n	8004be6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	e049      	b.n	8004c7a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d106      	bne.n	8004c00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f7fc ffc8 	bl	8001b90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2202      	movs	r2, #2
 8004c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	3304      	adds	r3, #4
 8004c10:	4619      	mov	r1, r3
 8004c12:	4610      	mov	r0, r2
 8004c14:	f000 fbb6 	bl	8005384 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2201      	movs	r2, #1
 8004c34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2201      	movs	r2, #1
 8004c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c78:	2300      	movs	r3, #0
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3708      	adds	r7, #8
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
	...

08004c84 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b085      	sub	sp, #20
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c92:	b2db      	uxtb	r3, r3
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d001      	beq.n	8004c9c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e038      	b.n	8004d0e <HAL_TIM_Base_Start+0x8a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2202      	movs	r2, #2
 8004ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a1c      	ldr	r2, [pc, #112]	; (8004d1c <HAL_TIM_Base_Start+0x98>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d00e      	beq.n	8004ccc <HAL_TIM_Base_Start+0x48>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cb6:	d009      	beq.n	8004ccc <HAL_TIM_Base_Start+0x48>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a18      	ldr	r2, [pc, #96]	; (8004d20 <HAL_TIM_Base_Start+0x9c>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d004      	beq.n	8004ccc <HAL_TIM_Base_Start+0x48>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a17      	ldr	r2, [pc, #92]	; (8004d24 <HAL_TIM_Base_Start+0xa0>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d115      	bne.n	8004cf8 <HAL_TIM_Base_Start+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	689a      	ldr	r2, [r3, #8]
 8004cd2:	4b15      	ldr	r3, [pc, #84]	; (8004d28 <HAL_TIM_Base_Start+0xa4>)
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2b06      	cmp	r3, #6
 8004cdc:	d015      	beq.n	8004d0a <HAL_TIM_Base_Start+0x86>
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ce4:	d011      	beq.n	8004d0a <HAL_TIM_Base_Start+0x86>
    {
      __HAL_TIM_ENABLE(htim);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f042 0201 	orr.w	r2, r2, #1
 8004cf4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cf6:	e008      	b.n	8004d0a <HAL_TIM_Base_Start+0x86>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f042 0201 	orr.w	r2, r2, #1
 8004d06:	601a      	str	r2, [r3, #0]
 8004d08:	e000      	b.n	8004d0c <HAL_TIM_Base_Start+0x88>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d0a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004d0c:	2300      	movs	r3, #0
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3714      	adds	r7, #20
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr
 8004d1a:	bf00      	nop
 8004d1c:	40012c00 	.word	0x40012c00
 8004d20:	40000400 	.word	0x40000400
 8004d24:	40014000 	.word	0x40014000
 8004d28:	00010007 	.word	0x00010007

08004d2c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b082      	sub	sp, #8
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d101      	bne.n	8004d3e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e049      	b.n	8004dd2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d44:	b2db      	uxtb	r3, r3
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d106      	bne.n	8004d58 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f000 f841 	bl	8004dda <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2202      	movs	r2, #2
 8004d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	3304      	adds	r3, #4
 8004d68:	4619      	mov	r1, r3
 8004d6a:	4610      	mov	r0, r2
 8004d6c:	f000 fb0a 	bl	8005384 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2201      	movs	r2, #1
 8004d74:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2201      	movs	r2, #1
 8004d84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2201      	movs	r2, #1
 8004da4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2201      	movs	r2, #1
 8004dac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004dd0:	2300      	movs	r3, #0
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3708      	adds	r7, #8
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}

08004dda <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004dda:	b480      	push	{r7}
 8004ddc:	b083      	sub	sp, #12
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004de2:	bf00      	nop
 8004de4:	370c      	adds	r7, #12
 8004de6:	46bd      	mov	sp, r7
 8004de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dec:	4770      	bx	lr
	...

08004df0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b084      	sub	sp, #16
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d109      	bne.n	8004e14 <HAL_TIM_PWM_Start+0x24>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e06:	b2db      	uxtb	r3, r3
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	bf14      	ite	ne
 8004e0c:	2301      	movne	r3, #1
 8004e0e:	2300      	moveq	r3, #0
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	e03c      	b.n	8004e8e <HAL_TIM_PWM_Start+0x9e>
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	2b04      	cmp	r3, #4
 8004e18:	d109      	bne.n	8004e2e <HAL_TIM_PWM_Start+0x3e>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	bf14      	ite	ne
 8004e26:	2301      	movne	r3, #1
 8004e28:	2300      	moveq	r3, #0
 8004e2a:	b2db      	uxtb	r3, r3
 8004e2c:	e02f      	b.n	8004e8e <HAL_TIM_PWM_Start+0x9e>
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	2b08      	cmp	r3, #8
 8004e32:	d109      	bne.n	8004e48 <HAL_TIM_PWM_Start+0x58>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e3a:	b2db      	uxtb	r3, r3
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	bf14      	ite	ne
 8004e40:	2301      	movne	r3, #1
 8004e42:	2300      	moveq	r3, #0
 8004e44:	b2db      	uxtb	r3, r3
 8004e46:	e022      	b.n	8004e8e <HAL_TIM_PWM_Start+0x9e>
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	2b0c      	cmp	r3, #12
 8004e4c:	d109      	bne.n	8004e62 <HAL_TIM_PWM_Start+0x72>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	bf14      	ite	ne
 8004e5a:	2301      	movne	r3, #1
 8004e5c:	2300      	moveq	r3, #0
 8004e5e:	b2db      	uxtb	r3, r3
 8004e60:	e015      	b.n	8004e8e <HAL_TIM_PWM_Start+0x9e>
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	2b10      	cmp	r3, #16
 8004e66:	d109      	bne.n	8004e7c <HAL_TIM_PWM_Start+0x8c>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004e6e:	b2db      	uxtb	r3, r3
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	bf14      	ite	ne
 8004e74:	2301      	movne	r3, #1
 8004e76:	2300      	moveq	r3, #0
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	e008      	b.n	8004e8e <HAL_TIM_PWM_Start+0x9e>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004e82:	b2db      	uxtb	r3, r3
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	bf14      	ite	ne
 8004e88:	2301      	movne	r3, #1
 8004e8a:	2300      	moveq	r3, #0
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d001      	beq.n	8004e96 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	e088      	b.n	8004fa8 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d104      	bne.n	8004ea6 <HAL_TIM_PWM_Start+0xb6>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2202      	movs	r2, #2
 8004ea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ea4:	e023      	b.n	8004eee <HAL_TIM_PWM_Start+0xfe>
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	2b04      	cmp	r3, #4
 8004eaa:	d104      	bne.n	8004eb6 <HAL_TIM_PWM_Start+0xc6>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2202      	movs	r2, #2
 8004eb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004eb4:	e01b      	b.n	8004eee <HAL_TIM_PWM_Start+0xfe>
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	2b08      	cmp	r3, #8
 8004eba:	d104      	bne.n	8004ec6 <HAL_TIM_PWM_Start+0xd6>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2202      	movs	r2, #2
 8004ec0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ec4:	e013      	b.n	8004eee <HAL_TIM_PWM_Start+0xfe>
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	2b0c      	cmp	r3, #12
 8004eca:	d104      	bne.n	8004ed6 <HAL_TIM_PWM_Start+0xe6>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2202      	movs	r2, #2
 8004ed0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004ed4:	e00b      	b.n	8004eee <HAL_TIM_PWM_Start+0xfe>
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	2b10      	cmp	r3, #16
 8004eda:	d104      	bne.n	8004ee6 <HAL_TIM_PWM_Start+0xf6>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2202      	movs	r2, #2
 8004ee0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ee4:	e003      	b.n	8004eee <HAL_TIM_PWM_Start+0xfe>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2202      	movs	r2, #2
 8004eea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	6839      	ldr	r1, [r7, #0]
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f000 fdfc 	bl	8005af4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a2b      	ldr	r2, [pc, #172]	; (8004fb0 <HAL_TIM_PWM_Start+0x1c0>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d00e      	beq.n	8004f24 <HAL_TIM_PWM_Start+0x134>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a2a      	ldr	r2, [pc, #168]	; (8004fb4 <HAL_TIM_PWM_Start+0x1c4>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d009      	beq.n	8004f24 <HAL_TIM_PWM_Start+0x134>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a28      	ldr	r2, [pc, #160]	; (8004fb8 <HAL_TIM_PWM_Start+0x1c8>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d004      	beq.n	8004f24 <HAL_TIM_PWM_Start+0x134>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a27      	ldr	r2, [pc, #156]	; (8004fbc <HAL_TIM_PWM_Start+0x1cc>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d101      	bne.n	8004f28 <HAL_TIM_PWM_Start+0x138>
 8004f24:	2301      	movs	r3, #1
 8004f26:	e000      	b.n	8004f2a <HAL_TIM_PWM_Start+0x13a>
 8004f28:	2300      	movs	r3, #0
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d007      	beq.n	8004f3e <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f3c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a1b      	ldr	r2, [pc, #108]	; (8004fb0 <HAL_TIM_PWM_Start+0x1c0>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d00e      	beq.n	8004f66 <HAL_TIM_PWM_Start+0x176>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f50:	d009      	beq.n	8004f66 <HAL_TIM_PWM_Start+0x176>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a1a      	ldr	r2, [pc, #104]	; (8004fc0 <HAL_TIM_PWM_Start+0x1d0>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d004      	beq.n	8004f66 <HAL_TIM_PWM_Start+0x176>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a14      	ldr	r2, [pc, #80]	; (8004fb4 <HAL_TIM_PWM_Start+0x1c4>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d115      	bne.n	8004f92 <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	689a      	ldr	r2, [r3, #8]
 8004f6c:	4b15      	ldr	r3, [pc, #84]	; (8004fc4 <HAL_TIM_PWM_Start+0x1d4>)
 8004f6e:	4013      	ands	r3, r2
 8004f70:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2b06      	cmp	r3, #6
 8004f76:	d015      	beq.n	8004fa4 <HAL_TIM_PWM_Start+0x1b4>
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f7e:	d011      	beq.n	8004fa4 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f042 0201 	orr.w	r2, r2, #1
 8004f8e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f90:	e008      	b.n	8004fa4 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f042 0201 	orr.w	r2, r2, #1
 8004fa0:	601a      	str	r2, [r3, #0]
 8004fa2:	e000      	b.n	8004fa6 <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fa4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004fa6:	2300      	movs	r3, #0
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3710      	adds	r7, #16
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}
 8004fb0:	40012c00 	.word	0x40012c00
 8004fb4:	40014000 	.word	0x40014000
 8004fb8:	40014400 	.word	0x40014400
 8004fbc:	40014800 	.word	0x40014800
 8004fc0:	40000400 	.word	0x40000400
 8004fc4:	00010007 	.word	0x00010007

08004fc8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b086      	sub	sp, #24
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	60f8      	str	r0, [r7, #12]
 8004fd0:	60b9      	str	r1, [r7, #8]
 8004fd2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	d101      	bne.n	8004fe6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004fe2:	2302      	movs	r3, #2
 8004fe4:	e0ff      	b.n	80051e6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2201      	movs	r2, #1
 8004fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2b14      	cmp	r3, #20
 8004ff2:	f200 80f0 	bhi.w	80051d6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004ff6:	a201      	add	r2, pc, #4	; (adr r2, 8004ffc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ffc:	08005051 	.word	0x08005051
 8005000:	080051d7 	.word	0x080051d7
 8005004:	080051d7 	.word	0x080051d7
 8005008:	080051d7 	.word	0x080051d7
 800500c:	08005091 	.word	0x08005091
 8005010:	080051d7 	.word	0x080051d7
 8005014:	080051d7 	.word	0x080051d7
 8005018:	080051d7 	.word	0x080051d7
 800501c:	080050d3 	.word	0x080050d3
 8005020:	080051d7 	.word	0x080051d7
 8005024:	080051d7 	.word	0x080051d7
 8005028:	080051d7 	.word	0x080051d7
 800502c:	08005113 	.word	0x08005113
 8005030:	080051d7 	.word	0x080051d7
 8005034:	080051d7 	.word	0x080051d7
 8005038:	080051d7 	.word	0x080051d7
 800503c:	08005155 	.word	0x08005155
 8005040:	080051d7 	.word	0x080051d7
 8005044:	080051d7 	.word	0x080051d7
 8005048:	080051d7 	.word	0x080051d7
 800504c:	08005195 	.word	0x08005195
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	68b9      	ldr	r1, [r7, #8]
 8005056:	4618      	mov	r0, r3
 8005058:	f000 fa0c 	bl	8005474 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	699a      	ldr	r2, [r3, #24]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f042 0208 	orr.w	r2, r2, #8
 800506a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	699a      	ldr	r2, [r3, #24]
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f022 0204 	bic.w	r2, r2, #4
 800507a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	6999      	ldr	r1, [r3, #24]
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	691a      	ldr	r2, [r3, #16]
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	430a      	orrs	r2, r1
 800508c:	619a      	str	r2, [r3, #24]
      break;
 800508e:	e0a5      	b.n	80051dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	68b9      	ldr	r1, [r7, #8]
 8005096:	4618      	mov	r0, r3
 8005098:	f000 fa72 	bl	8005580 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	699a      	ldr	r2, [r3, #24]
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	699a      	ldr	r2, [r3, #24]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	6999      	ldr	r1, [r3, #24]
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	691b      	ldr	r3, [r3, #16]
 80050c6:	021a      	lsls	r2, r3, #8
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	430a      	orrs	r2, r1
 80050ce:	619a      	str	r2, [r3, #24]
      break;
 80050d0:	e084      	b.n	80051dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	68b9      	ldr	r1, [r7, #8]
 80050d8:	4618      	mov	r0, r3
 80050da:	f000 fad1 	bl	8005680 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	69da      	ldr	r2, [r3, #28]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f042 0208 	orr.w	r2, r2, #8
 80050ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	69da      	ldr	r2, [r3, #28]
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f022 0204 	bic.w	r2, r2, #4
 80050fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	69d9      	ldr	r1, [r3, #28]
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	691a      	ldr	r2, [r3, #16]
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	430a      	orrs	r2, r1
 800510e:	61da      	str	r2, [r3, #28]
      break;
 8005110:	e064      	b.n	80051dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	68b9      	ldr	r1, [r7, #8]
 8005118:	4618      	mov	r0, r3
 800511a:	f000 fb2f 	bl	800577c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	69da      	ldr	r2, [r3, #28]
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800512c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	69da      	ldr	r2, [r3, #28]
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800513c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	69d9      	ldr	r1, [r3, #28]
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	691b      	ldr	r3, [r3, #16]
 8005148:	021a      	lsls	r2, r3, #8
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	430a      	orrs	r2, r1
 8005150:	61da      	str	r2, [r3, #28]
      break;
 8005152:	e043      	b.n	80051dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	68b9      	ldr	r1, [r7, #8]
 800515a:	4618      	mov	r0, r3
 800515c:	f000 fb72 	bl	8005844 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f042 0208 	orr.w	r2, r2, #8
 800516e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f022 0204 	bic.w	r2, r2, #4
 800517e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	691a      	ldr	r2, [r3, #16]
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	430a      	orrs	r2, r1
 8005190:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005192:	e023      	b.n	80051dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	68b9      	ldr	r1, [r7, #8]
 800519a:	4618      	mov	r0, r3
 800519c:	f000 fbb0 	bl	8005900 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051ae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051be:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	691b      	ldr	r3, [r3, #16]
 80051ca:	021a      	lsls	r2, r3, #8
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	430a      	orrs	r2, r1
 80051d2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80051d4:	e002      	b.n	80051dc <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	75fb      	strb	r3, [r7, #23]
      break;
 80051da:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2200      	movs	r2, #0
 80051e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80051e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3718      	adds	r7, #24
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}
 80051ee:	bf00      	nop

080051f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b084      	sub	sp, #16
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80051fa:	2300      	movs	r3, #0
 80051fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005204:	2b01      	cmp	r3, #1
 8005206:	d101      	bne.n	800520c <HAL_TIM_ConfigClockSource+0x1c>
 8005208:	2302      	movs	r3, #2
 800520a:	e0b6      	b.n	800537a <HAL_TIM_ConfigClockSource+0x18a>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2202      	movs	r2, #2
 8005218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800522a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800522e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005236:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	68ba      	ldr	r2, [r7, #8]
 800523e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005248:	d03e      	beq.n	80052c8 <HAL_TIM_ConfigClockSource+0xd8>
 800524a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800524e:	f200 8087 	bhi.w	8005360 <HAL_TIM_ConfigClockSource+0x170>
 8005252:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005256:	f000 8086 	beq.w	8005366 <HAL_TIM_ConfigClockSource+0x176>
 800525a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800525e:	d87f      	bhi.n	8005360 <HAL_TIM_ConfigClockSource+0x170>
 8005260:	2b70      	cmp	r3, #112	; 0x70
 8005262:	d01a      	beq.n	800529a <HAL_TIM_ConfigClockSource+0xaa>
 8005264:	2b70      	cmp	r3, #112	; 0x70
 8005266:	d87b      	bhi.n	8005360 <HAL_TIM_ConfigClockSource+0x170>
 8005268:	2b60      	cmp	r3, #96	; 0x60
 800526a:	d050      	beq.n	800530e <HAL_TIM_ConfigClockSource+0x11e>
 800526c:	2b60      	cmp	r3, #96	; 0x60
 800526e:	d877      	bhi.n	8005360 <HAL_TIM_ConfigClockSource+0x170>
 8005270:	2b50      	cmp	r3, #80	; 0x50
 8005272:	d03c      	beq.n	80052ee <HAL_TIM_ConfigClockSource+0xfe>
 8005274:	2b50      	cmp	r3, #80	; 0x50
 8005276:	d873      	bhi.n	8005360 <HAL_TIM_ConfigClockSource+0x170>
 8005278:	2b40      	cmp	r3, #64	; 0x40
 800527a:	d058      	beq.n	800532e <HAL_TIM_ConfigClockSource+0x13e>
 800527c:	2b40      	cmp	r3, #64	; 0x40
 800527e:	d86f      	bhi.n	8005360 <HAL_TIM_ConfigClockSource+0x170>
 8005280:	2b30      	cmp	r3, #48	; 0x30
 8005282:	d064      	beq.n	800534e <HAL_TIM_ConfigClockSource+0x15e>
 8005284:	2b30      	cmp	r3, #48	; 0x30
 8005286:	d86b      	bhi.n	8005360 <HAL_TIM_ConfigClockSource+0x170>
 8005288:	2b20      	cmp	r3, #32
 800528a:	d060      	beq.n	800534e <HAL_TIM_ConfigClockSource+0x15e>
 800528c:	2b20      	cmp	r3, #32
 800528e:	d867      	bhi.n	8005360 <HAL_TIM_ConfigClockSource+0x170>
 8005290:	2b00      	cmp	r3, #0
 8005292:	d05c      	beq.n	800534e <HAL_TIM_ConfigClockSource+0x15e>
 8005294:	2b10      	cmp	r3, #16
 8005296:	d05a      	beq.n	800534e <HAL_TIM_ConfigClockSource+0x15e>
 8005298:	e062      	b.n	8005360 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6818      	ldr	r0, [r3, #0]
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	6899      	ldr	r1, [r3, #8]
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	685a      	ldr	r2, [r3, #4]
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	68db      	ldr	r3, [r3, #12]
 80052aa:	f000 fc03 	bl	8005ab4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80052bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	68ba      	ldr	r2, [r7, #8]
 80052c4:	609a      	str	r2, [r3, #8]
      break;
 80052c6:	e04f      	b.n	8005368 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6818      	ldr	r0, [r3, #0]
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	6899      	ldr	r1, [r3, #8]
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	685a      	ldr	r2, [r3, #4]
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	68db      	ldr	r3, [r3, #12]
 80052d8:	f000 fbec 	bl	8005ab4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	689a      	ldr	r2, [r3, #8]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052ea:	609a      	str	r2, [r3, #8]
      break;
 80052ec:	e03c      	b.n	8005368 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6818      	ldr	r0, [r3, #0]
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	6859      	ldr	r1, [r3, #4]
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	68db      	ldr	r3, [r3, #12]
 80052fa:	461a      	mov	r2, r3
 80052fc:	f000 fb60 	bl	80059c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	2150      	movs	r1, #80	; 0x50
 8005306:	4618      	mov	r0, r3
 8005308:	f000 fbb9 	bl	8005a7e <TIM_ITRx_SetConfig>
      break;
 800530c:	e02c      	b.n	8005368 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6818      	ldr	r0, [r3, #0]
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	6859      	ldr	r1, [r3, #4]
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	68db      	ldr	r3, [r3, #12]
 800531a:	461a      	mov	r2, r3
 800531c:	f000 fb7f 	bl	8005a1e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	2160      	movs	r1, #96	; 0x60
 8005326:	4618      	mov	r0, r3
 8005328:	f000 fba9 	bl	8005a7e <TIM_ITRx_SetConfig>
      break;
 800532c:	e01c      	b.n	8005368 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6818      	ldr	r0, [r3, #0]
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	6859      	ldr	r1, [r3, #4]
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	68db      	ldr	r3, [r3, #12]
 800533a:	461a      	mov	r2, r3
 800533c:	f000 fb40 	bl	80059c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	2140      	movs	r1, #64	; 0x40
 8005346:	4618      	mov	r0, r3
 8005348:	f000 fb99 	bl	8005a7e <TIM_ITRx_SetConfig>
      break;
 800534c:	e00c      	b.n	8005368 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4619      	mov	r1, r3
 8005358:	4610      	mov	r0, r2
 800535a:	f000 fb90 	bl	8005a7e <TIM_ITRx_SetConfig>
      break;
 800535e:	e003      	b.n	8005368 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005360:	2301      	movs	r3, #1
 8005362:	73fb      	strb	r3, [r7, #15]
      break;
 8005364:	e000      	b.n	8005368 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005366:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2201      	movs	r2, #1
 800536c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2200      	movs	r2, #0
 8005374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005378:	7bfb      	ldrb	r3, [r7, #15]
}
 800537a:	4618      	mov	r0, r3
 800537c:	3710      	adds	r7, #16
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}
	...

08005384 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005384:	b480      	push	{r7}
 8005386:	b085      	sub	sp, #20
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
 800538c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	4a32      	ldr	r2, [pc, #200]	; (8005460 <TIM_Base_SetConfig+0xdc>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d007      	beq.n	80053ac <TIM_Base_SetConfig+0x28>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053a2:	d003      	beq.n	80053ac <TIM_Base_SetConfig+0x28>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	4a2f      	ldr	r2, [pc, #188]	; (8005464 <TIM_Base_SetConfig+0xe0>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d108      	bne.n	80053be <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	68fa      	ldr	r2, [r7, #12]
 80053ba:	4313      	orrs	r3, r2
 80053bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4a27      	ldr	r2, [pc, #156]	; (8005460 <TIM_Base_SetConfig+0xdc>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d013      	beq.n	80053ee <TIM_Base_SetConfig+0x6a>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053cc:	d00f      	beq.n	80053ee <TIM_Base_SetConfig+0x6a>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4a24      	ldr	r2, [pc, #144]	; (8005464 <TIM_Base_SetConfig+0xe0>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d00b      	beq.n	80053ee <TIM_Base_SetConfig+0x6a>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4a23      	ldr	r2, [pc, #140]	; (8005468 <TIM_Base_SetConfig+0xe4>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d007      	beq.n	80053ee <TIM_Base_SetConfig+0x6a>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4a22      	ldr	r2, [pc, #136]	; (800546c <TIM_Base_SetConfig+0xe8>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d003      	beq.n	80053ee <TIM_Base_SetConfig+0x6a>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	4a21      	ldr	r2, [pc, #132]	; (8005470 <TIM_Base_SetConfig+0xec>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d108      	bne.n	8005400 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	68db      	ldr	r3, [r3, #12]
 80053fa:	68fa      	ldr	r2, [r7, #12]
 80053fc:	4313      	orrs	r3, r2
 80053fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	695b      	ldr	r3, [r3, #20]
 800540a:	4313      	orrs	r3, r2
 800540c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	68fa      	ldr	r2, [r7, #12]
 8005412:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	689a      	ldr	r2, [r3, #8]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	4a0e      	ldr	r2, [pc, #56]	; (8005460 <TIM_Base_SetConfig+0xdc>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d00b      	beq.n	8005444 <TIM_Base_SetConfig+0xc0>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	4a0e      	ldr	r2, [pc, #56]	; (8005468 <TIM_Base_SetConfig+0xe4>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d007      	beq.n	8005444 <TIM_Base_SetConfig+0xc0>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	4a0d      	ldr	r2, [pc, #52]	; (800546c <TIM_Base_SetConfig+0xe8>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d003      	beq.n	8005444 <TIM_Base_SetConfig+0xc0>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	4a0c      	ldr	r2, [pc, #48]	; (8005470 <TIM_Base_SetConfig+0xec>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d103      	bne.n	800544c <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	691a      	ldr	r2, [r3, #16]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2201      	movs	r2, #1
 8005450:	615a      	str	r2, [r3, #20]
}
 8005452:	bf00      	nop
 8005454:	3714      	adds	r7, #20
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr
 800545e:	bf00      	nop
 8005460:	40012c00 	.word	0x40012c00
 8005464:	40000400 	.word	0x40000400
 8005468:	40014000 	.word	0x40014000
 800546c:	40014400 	.word	0x40014400
 8005470:	40014800 	.word	0x40014800

08005474 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005474:	b480      	push	{r7}
 8005476:	b087      	sub	sp, #28
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6a1b      	ldr	r3, [r3, #32]
 8005482:	f023 0201 	bic.w	r2, r3, #1
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6a1b      	ldr	r3, [r3, #32]
 800548e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	699b      	ldr	r3, [r3, #24]
 800549a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f023 0303 	bic.w	r3, r3, #3
 80054ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	68fa      	ldr	r2, [r7, #12]
 80054b6:	4313      	orrs	r3, r2
 80054b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	f023 0302 	bic.w	r3, r3, #2
 80054c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	697a      	ldr	r2, [r7, #20]
 80054c8:	4313      	orrs	r3, r2
 80054ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	4a28      	ldr	r2, [pc, #160]	; (8005570 <TIM_OC1_SetConfig+0xfc>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d00b      	beq.n	80054ec <TIM_OC1_SetConfig+0x78>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	4a27      	ldr	r2, [pc, #156]	; (8005574 <TIM_OC1_SetConfig+0x100>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d007      	beq.n	80054ec <TIM_OC1_SetConfig+0x78>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	4a26      	ldr	r2, [pc, #152]	; (8005578 <TIM_OC1_SetConfig+0x104>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d003      	beq.n	80054ec <TIM_OC1_SetConfig+0x78>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	4a25      	ldr	r2, [pc, #148]	; (800557c <TIM_OC1_SetConfig+0x108>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d10c      	bne.n	8005506 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	f023 0308 	bic.w	r3, r3, #8
 80054f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	68db      	ldr	r3, [r3, #12]
 80054f8:	697a      	ldr	r2, [r7, #20]
 80054fa:	4313      	orrs	r3, r2
 80054fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	f023 0304 	bic.w	r3, r3, #4
 8005504:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	4a19      	ldr	r2, [pc, #100]	; (8005570 <TIM_OC1_SetConfig+0xfc>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d00b      	beq.n	8005526 <TIM_OC1_SetConfig+0xb2>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	4a18      	ldr	r2, [pc, #96]	; (8005574 <TIM_OC1_SetConfig+0x100>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d007      	beq.n	8005526 <TIM_OC1_SetConfig+0xb2>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	4a17      	ldr	r2, [pc, #92]	; (8005578 <TIM_OC1_SetConfig+0x104>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d003      	beq.n	8005526 <TIM_OC1_SetConfig+0xb2>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	4a16      	ldr	r2, [pc, #88]	; (800557c <TIM_OC1_SetConfig+0x108>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d111      	bne.n	800554a <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800552c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005534:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	695b      	ldr	r3, [r3, #20]
 800553a:	693a      	ldr	r2, [r7, #16]
 800553c:	4313      	orrs	r3, r2
 800553e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	699b      	ldr	r3, [r3, #24]
 8005544:	693a      	ldr	r2, [r7, #16]
 8005546:	4313      	orrs	r3, r2
 8005548:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	693a      	ldr	r2, [r7, #16]
 800554e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	68fa      	ldr	r2, [r7, #12]
 8005554:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	685a      	ldr	r2, [r3, #4]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	697a      	ldr	r2, [r7, #20]
 8005562:	621a      	str	r2, [r3, #32]
}
 8005564:	bf00      	nop
 8005566:	371c      	adds	r7, #28
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr
 8005570:	40012c00 	.word	0x40012c00
 8005574:	40014000 	.word	0x40014000
 8005578:	40014400 	.word	0x40014400
 800557c:	40014800 	.word	0x40014800

08005580 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005580:	b480      	push	{r7}
 8005582:	b087      	sub	sp, #28
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
 8005588:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6a1b      	ldr	r3, [r3, #32]
 800558e:	f023 0210 	bic.w	r2, r3, #16
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6a1b      	ldr	r3, [r3, #32]
 800559a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	699b      	ldr	r3, [r3, #24]
 80055a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80055ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	021b      	lsls	r3, r3, #8
 80055c2:	68fa      	ldr	r2, [r7, #12]
 80055c4:	4313      	orrs	r3, r2
 80055c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	f023 0320 	bic.w	r3, r3, #32
 80055ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	011b      	lsls	r3, r3, #4
 80055d6:	697a      	ldr	r2, [r7, #20]
 80055d8:	4313      	orrs	r3, r2
 80055da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	4a24      	ldr	r2, [pc, #144]	; (8005670 <TIM_OC2_SetConfig+0xf0>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d10d      	bne.n	8005600 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	68db      	ldr	r3, [r3, #12]
 80055f0:	011b      	lsls	r3, r3, #4
 80055f2:	697a      	ldr	r2, [r7, #20]
 80055f4:	4313      	orrs	r3, r2
 80055f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055fe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	4a1b      	ldr	r2, [pc, #108]	; (8005670 <TIM_OC2_SetConfig+0xf0>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d00b      	beq.n	8005620 <TIM_OC2_SetConfig+0xa0>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	4a1a      	ldr	r2, [pc, #104]	; (8005674 <TIM_OC2_SetConfig+0xf4>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d007      	beq.n	8005620 <TIM_OC2_SetConfig+0xa0>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	4a19      	ldr	r2, [pc, #100]	; (8005678 <TIM_OC2_SetConfig+0xf8>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d003      	beq.n	8005620 <TIM_OC2_SetConfig+0xa0>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	4a18      	ldr	r2, [pc, #96]	; (800567c <TIM_OC2_SetConfig+0xfc>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d113      	bne.n	8005648 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005626:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800562e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	695b      	ldr	r3, [r3, #20]
 8005634:	009b      	lsls	r3, r3, #2
 8005636:	693a      	ldr	r2, [r7, #16]
 8005638:	4313      	orrs	r3, r2
 800563a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	699b      	ldr	r3, [r3, #24]
 8005640:	009b      	lsls	r3, r3, #2
 8005642:	693a      	ldr	r2, [r7, #16]
 8005644:	4313      	orrs	r3, r2
 8005646:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	693a      	ldr	r2, [r7, #16]
 800564c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	68fa      	ldr	r2, [r7, #12]
 8005652:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	685a      	ldr	r2, [r3, #4]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	697a      	ldr	r2, [r7, #20]
 8005660:	621a      	str	r2, [r3, #32]
}
 8005662:	bf00      	nop
 8005664:	371c      	adds	r7, #28
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr
 800566e:	bf00      	nop
 8005670:	40012c00 	.word	0x40012c00
 8005674:	40014000 	.word	0x40014000
 8005678:	40014400 	.word	0x40014400
 800567c:	40014800 	.word	0x40014800

08005680 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005680:	b480      	push	{r7}
 8005682:	b087      	sub	sp, #28
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6a1b      	ldr	r3, [r3, #32]
 800568e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6a1b      	ldr	r3, [r3, #32]
 800569a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	69db      	ldr	r3, [r3, #28]
 80056a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f023 0303 	bic.w	r3, r3, #3
 80056ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	68fa      	ldr	r2, [r7, #12]
 80056c2:	4313      	orrs	r3, r2
 80056c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80056cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	021b      	lsls	r3, r3, #8
 80056d4:	697a      	ldr	r2, [r7, #20]
 80056d6:	4313      	orrs	r3, r2
 80056d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	4a23      	ldr	r2, [pc, #140]	; (800576c <TIM_OC3_SetConfig+0xec>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d10d      	bne.n	80056fe <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80056e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	68db      	ldr	r3, [r3, #12]
 80056ee:	021b      	lsls	r3, r3, #8
 80056f0:	697a      	ldr	r2, [r7, #20]
 80056f2:	4313      	orrs	r3, r2
 80056f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80056fc:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4a1a      	ldr	r2, [pc, #104]	; (800576c <TIM_OC3_SetConfig+0xec>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d00b      	beq.n	800571e <TIM_OC3_SetConfig+0x9e>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4a19      	ldr	r2, [pc, #100]	; (8005770 <TIM_OC3_SetConfig+0xf0>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d007      	beq.n	800571e <TIM_OC3_SetConfig+0x9e>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	4a18      	ldr	r2, [pc, #96]	; (8005774 <TIM_OC3_SetConfig+0xf4>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d003      	beq.n	800571e <TIM_OC3_SetConfig+0x9e>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	4a17      	ldr	r2, [pc, #92]	; (8005778 <TIM_OC3_SetConfig+0xf8>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d113      	bne.n	8005746 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005724:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800572c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	695b      	ldr	r3, [r3, #20]
 8005732:	011b      	lsls	r3, r3, #4
 8005734:	693a      	ldr	r2, [r7, #16]
 8005736:	4313      	orrs	r3, r2
 8005738:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	699b      	ldr	r3, [r3, #24]
 800573e:	011b      	lsls	r3, r3, #4
 8005740:	693a      	ldr	r2, [r7, #16]
 8005742:	4313      	orrs	r3, r2
 8005744:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	693a      	ldr	r2, [r7, #16]
 800574a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	68fa      	ldr	r2, [r7, #12]
 8005750:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	685a      	ldr	r2, [r3, #4]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	697a      	ldr	r2, [r7, #20]
 800575e:	621a      	str	r2, [r3, #32]
}
 8005760:	bf00      	nop
 8005762:	371c      	adds	r7, #28
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	4770      	bx	lr
 800576c:	40012c00 	.word	0x40012c00
 8005770:	40014000 	.word	0x40014000
 8005774:	40014400 	.word	0x40014400
 8005778:	40014800 	.word	0x40014800

0800577c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800577c:	b480      	push	{r7}
 800577e:	b087      	sub	sp, #28
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
 8005784:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6a1b      	ldr	r3, [r3, #32]
 800578a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6a1b      	ldr	r3, [r3, #32]
 8005796:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	69db      	ldr	r3, [r3, #28]
 80057a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80057aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	021b      	lsls	r3, r3, #8
 80057be:	68fa      	ldr	r2, [r7, #12]
 80057c0:	4313      	orrs	r3, r2
 80057c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80057ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	031b      	lsls	r3, r3, #12
 80057d2:	693a      	ldr	r2, [r7, #16]
 80057d4:	4313      	orrs	r3, r2
 80057d6:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	4a16      	ldr	r2, [pc, #88]	; (8005834 <TIM_OC4_SetConfig+0xb8>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d00b      	beq.n	80057f8 <TIM_OC4_SetConfig+0x7c>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	4a15      	ldr	r2, [pc, #84]	; (8005838 <TIM_OC4_SetConfig+0xbc>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d007      	beq.n	80057f8 <TIM_OC4_SetConfig+0x7c>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	4a14      	ldr	r2, [pc, #80]	; (800583c <TIM_OC4_SetConfig+0xc0>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d003      	beq.n	80057f8 <TIM_OC4_SetConfig+0x7c>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	4a13      	ldr	r2, [pc, #76]	; (8005840 <TIM_OC4_SetConfig+0xc4>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d109      	bne.n	800580c <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80057fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	695b      	ldr	r3, [r3, #20]
 8005804:	019b      	lsls	r3, r3, #6
 8005806:	697a      	ldr	r2, [r7, #20]
 8005808:	4313      	orrs	r3, r2
 800580a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	697a      	ldr	r2, [r7, #20]
 8005810:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	68fa      	ldr	r2, [r7, #12]
 8005816:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	685a      	ldr	r2, [r3, #4]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	693a      	ldr	r2, [r7, #16]
 8005824:	621a      	str	r2, [r3, #32]
}
 8005826:	bf00      	nop
 8005828:	371c      	adds	r7, #28
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr
 8005832:	bf00      	nop
 8005834:	40012c00 	.word	0x40012c00
 8005838:	40014000 	.word	0x40014000
 800583c:	40014400 	.word	0x40014400
 8005840:	40014800 	.word	0x40014800

08005844 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005844:	b480      	push	{r7}
 8005846:	b087      	sub	sp, #28
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
 800584c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6a1b      	ldr	r3, [r3, #32]
 8005852:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6a1b      	ldr	r3, [r3, #32]
 800585e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800586a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005872:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005876:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	68fa      	ldr	r2, [r7, #12]
 800587e:	4313      	orrs	r3, r2
 8005880:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005888:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	041b      	lsls	r3, r3, #16
 8005890:	693a      	ldr	r2, [r7, #16]
 8005892:	4313      	orrs	r3, r2
 8005894:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	4a15      	ldr	r2, [pc, #84]	; (80058f0 <TIM_OC5_SetConfig+0xac>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d00b      	beq.n	80058b6 <TIM_OC5_SetConfig+0x72>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	4a14      	ldr	r2, [pc, #80]	; (80058f4 <TIM_OC5_SetConfig+0xb0>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d007      	beq.n	80058b6 <TIM_OC5_SetConfig+0x72>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	4a13      	ldr	r2, [pc, #76]	; (80058f8 <TIM_OC5_SetConfig+0xb4>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d003      	beq.n	80058b6 <TIM_OC5_SetConfig+0x72>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	4a12      	ldr	r2, [pc, #72]	; (80058fc <TIM_OC5_SetConfig+0xb8>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d109      	bne.n	80058ca <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058bc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	695b      	ldr	r3, [r3, #20]
 80058c2:	021b      	lsls	r3, r3, #8
 80058c4:	697a      	ldr	r2, [r7, #20]
 80058c6:	4313      	orrs	r3, r2
 80058c8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	697a      	ldr	r2, [r7, #20]
 80058ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	68fa      	ldr	r2, [r7, #12]
 80058d4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	685a      	ldr	r2, [r3, #4]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	693a      	ldr	r2, [r7, #16]
 80058e2:	621a      	str	r2, [r3, #32]
}
 80058e4:	bf00      	nop
 80058e6:	371c      	adds	r7, #28
 80058e8:	46bd      	mov	sp, r7
 80058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ee:	4770      	bx	lr
 80058f0:	40012c00 	.word	0x40012c00
 80058f4:	40014000 	.word	0x40014000
 80058f8:	40014400 	.word	0x40014400
 80058fc:	40014800 	.word	0x40014800

08005900 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005900:	b480      	push	{r7}
 8005902:	b087      	sub	sp, #28
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
 8005908:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6a1b      	ldr	r3, [r3, #32]
 800590e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6a1b      	ldr	r3, [r3, #32]
 800591a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005926:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800592e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005932:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	021b      	lsls	r3, r3, #8
 800593a:	68fa      	ldr	r2, [r7, #12]
 800593c:	4313      	orrs	r3, r2
 800593e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005946:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	051b      	lsls	r3, r3, #20
 800594e:	693a      	ldr	r2, [r7, #16]
 8005950:	4313      	orrs	r3, r2
 8005952:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	4a16      	ldr	r2, [pc, #88]	; (80059b0 <TIM_OC6_SetConfig+0xb0>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d00b      	beq.n	8005974 <TIM_OC6_SetConfig+0x74>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	4a15      	ldr	r2, [pc, #84]	; (80059b4 <TIM_OC6_SetConfig+0xb4>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d007      	beq.n	8005974 <TIM_OC6_SetConfig+0x74>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	4a14      	ldr	r2, [pc, #80]	; (80059b8 <TIM_OC6_SetConfig+0xb8>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d003      	beq.n	8005974 <TIM_OC6_SetConfig+0x74>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	4a13      	ldr	r2, [pc, #76]	; (80059bc <TIM_OC6_SetConfig+0xbc>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d109      	bne.n	8005988 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800597a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	695b      	ldr	r3, [r3, #20]
 8005980:	029b      	lsls	r3, r3, #10
 8005982:	697a      	ldr	r2, [r7, #20]
 8005984:	4313      	orrs	r3, r2
 8005986:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	697a      	ldr	r2, [r7, #20]
 800598c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	68fa      	ldr	r2, [r7, #12]
 8005992:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	685a      	ldr	r2, [r3, #4]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	693a      	ldr	r2, [r7, #16]
 80059a0:	621a      	str	r2, [r3, #32]
}
 80059a2:	bf00      	nop
 80059a4:	371c      	adds	r7, #28
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr
 80059ae:	bf00      	nop
 80059b0:	40012c00 	.word	0x40012c00
 80059b4:	40014000 	.word	0x40014000
 80059b8:	40014400 	.word	0x40014400
 80059bc:	40014800 	.word	0x40014800

080059c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b087      	sub	sp, #28
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	60f8      	str	r0, [r7, #12]
 80059c8:	60b9      	str	r1, [r7, #8]
 80059ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	6a1b      	ldr	r3, [r3, #32]
 80059d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	6a1b      	ldr	r3, [r3, #32]
 80059d6:	f023 0201 	bic.w	r2, r3, #1
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	699b      	ldr	r3, [r3, #24]
 80059e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80059ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	011b      	lsls	r3, r3, #4
 80059f0:	693a      	ldr	r2, [r7, #16]
 80059f2:	4313      	orrs	r3, r2
 80059f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	f023 030a 	bic.w	r3, r3, #10
 80059fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80059fe:	697a      	ldr	r2, [r7, #20]
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	4313      	orrs	r3, r2
 8005a04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	693a      	ldr	r2, [r7, #16]
 8005a0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	697a      	ldr	r2, [r7, #20]
 8005a10:	621a      	str	r2, [r3, #32]
}
 8005a12:	bf00      	nop
 8005a14:	371c      	adds	r7, #28
 8005a16:	46bd      	mov	sp, r7
 8005a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1c:	4770      	bx	lr

08005a1e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a1e:	b480      	push	{r7}
 8005a20:	b087      	sub	sp, #28
 8005a22:	af00      	add	r7, sp, #0
 8005a24:	60f8      	str	r0, [r7, #12]
 8005a26:	60b9      	str	r1, [r7, #8]
 8005a28:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	6a1b      	ldr	r3, [r3, #32]
 8005a2e:	f023 0210 	bic.w	r2, r3, #16
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	699b      	ldr	r3, [r3, #24]
 8005a3a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	6a1b      	ldr	r3, [r3, #32]
 8005a40:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005a48:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	031b      	lsls	r3, r3, #12
 8005a4e:	697a      	ldr	r2, [r7, #20]
 8005a50:	4313      	orrs	r3, r2
 8005a52:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005a5a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	011b      	lsls	r3, r3, #4
 8005a60:	693a      	ldr	r2, [r7, #16]
 8005a62:	4313      	orrs	r3, r2
 8005a64:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	697a      	ldr	r2, [r7, #20]
 8005a6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	693a      	ldr	r2, [r7, #16]
 8005a70:	621a      	str	r2, [r3, #32]
}
 8005a72:	bf00      	nop
 8005a74:	371c      	adds	r7, #28
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr

08005a7e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a7e:	b480      	push	{r7}
 8005a80:	b085      	sub	sp, #20
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	6078      	str	r0, [r7, #4]
 8005a86:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a94:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a96:	683a      	ldr	r2, [r7, #0]
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	f043 0307 	orr.w	r3, r3, #7
 8005aa0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	68fa      	ldr	r2, [r7, #12]
 8005aa6:	609a      	str	r2, [r3, #8]
}
 8005aa8:	bf00      	nop
 8005aaa:	3714      	adds	r7, #20
 8005aac:	46bd      	mov	sp, r7
 8005aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab2:	4770      	bx	lr

08005ab4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b087      	sub	sp, #28
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	60f8      	str	r0, [r7, #12]
 8005abc:	60b9      	str	r1, [r7, #8]
 8005abe:	607a      	str	r2, [r7, #4]
 8005ac0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	689b      	ldr	r3, [r3, #8]
 8005ac6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ace:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	021a      	lsls	r2, r3, #8
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	431a      	orrs	r2, r3
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	4313      	orrs	r3, r2
 8005adc:	697a      	ldr	r2, [r7, #20]
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	697a      	ldr	r2, [r7, #20]
 8005ae6:	609a      	str	r2, [r3, #8]
}
 8005ae8:	bf00      	nop
 8005aea:	371c      	adds	r7, #28
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr

08005af4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b087      	sub	sp, #28
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	60f8      	str	r0, [r7, #12]
 8005afc:	60b9      	str	r1, [r7, #8]
 8005afe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	f003 031f 	and.w	r3, r3, #31
 8005b06:	2201      	movs	r2, #1
 8005b08:	fa02 f303 	lsl.w	r3, r2, r3
 8005b0c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	6a1a      	ldr	r2, [r3, #32]
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	43db      	mvns	r3, r3
 8005b16:	401a      	ands	r2, r3
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	6a1a      	ldr	r2, [r3, #32]
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	f003 031f 	and.w	r3, r3, #31
 8005b26:	6879      	ldr	r1, [r7, #4]
 8005b28:	fa01 f303 	lsl.w	r3, r1, r3
 8005b2c:	431a      	orrs	r2, r3
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	621a      	str	r2, [r3, #32]
}
 8005b32:	bf00      	nop
 8005b34:	371c      	adds	r7, #28
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr
	...

08005b40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b085      	sub	sp, #20
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d101      	bne.n	8005b58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b54:	2302      	movs	r3, #2
 8005b56:	e054      	b.n	8005c02 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2202      	movs	r2, #2
 8005b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a24      	ldr	r2, [pc, #144]	; (8005c10 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d108      	bne.n	8005b94 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005b88:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	68fa      	ldr	r2, [r7, #12]
 8005b90:	4313      	orrs	r3, r2
 8005b92:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b9a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	68fa      	ldr	r2, [r7, #12]
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	68fa      	ldr	r2, [r7, #12]
 8005bac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a17      	ldr	r2, [pc, #92]	; (8005c10 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d00e      	beq.n	8005bd6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bc0:	d009      	beq.n	8005bd6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a13      	ldr	r2, [pc, #76]	; (8005c14 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d004      	beq.n	8005bd6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a11      	ldr	r2, [pc, #68]	; (8005c18 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d10c      	bne.n	8005bf0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005bdc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	68ba      	ldr	r2, [r7, #8]
 8005be4:	4313      	orrs	r3, r2
 8005be6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	68ba      	ldr	r2, [r7, #8]
 8005bee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c00:	2300      	movs	r3, #0
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3714      	adds	r7, #20
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr
 8005c0e:	bf00      	nop
 8005c10:	40012c00 	.word	0x40012c00
 8005c14:	40000400 	.word	0x40000400
 8005c18:	40014000 	.word	0x40014000

08005c1c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b085      	sub	sp, #20
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
 8005c24:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005c26:	2300      	movs	r3, #0
 8005c28:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d101      	bne.n	8005c38 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005c34:	2302      	movs	r3, #2
 8005c36:	e060      	b.n	8005cfa <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	68db      	ldr	r3, [r3, #12]
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	689b      	ldr	r3, [r3, #8]
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	4313      	orrs	r3, r2
 8005c68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4313      	orrs	r3, r2
 8005c76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	691b      	ldr	r3, [r3, #16]
 8005c82:	4313      	orrs	r3, r2
 8005c84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	695b      	ldr	r3, [r3, #20]
 8005c90:	4313      	orrs	r3, r2
 8005c92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	699b      	ldr	r3, [r3, #24]
 8005cac:	041b      	lsls	r3, r3, #16
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a14      	ldr	r2, [pc, #80]	; (8005d08 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d115      	bne.n	8005ce8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc6:	051b      	lsls	r3, r3, #20
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	69db      	ldr	r3, [r3, #28]
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	6a1b      	ldr	r3, [r3, #32]
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	68fa      	ldr	r2, [r7, #12]
 8005cee:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005cf8:	2300      	movs	r3, #0
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3714      	adds	r7, #20
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d04:	4770      	bx	lr
 8005d06:	bf00      	nop
 8005d08:	40012c00 	.word	0x40012c00

08005d0c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b082      	sub	sp, #8
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d101      	bne.n	8005d1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	e040      	b.n	8005da0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d106      	bne.n	8005d34 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f7fb ffc0 	bl	8001cb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2224      	movs	r2, #36	; 0x24
 8005d38:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	681a      	ldr	r2, [r3, #0]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f022 0201 	bic.w	r2, r2, #1
 8005d48:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f000 f82c 	bl	8005da8 <UART_SetConfig>
 8005d50:	4603      	mov	r3, r0
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	d101      	bne.n	8005d5a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005d56:	2301      	movs	r3, #1
 8005d58:	e022      	b.n	8005da0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d002      	beq.n	8005d68 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f000 f956 	bl	8006014 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	685a      	ldr	r2, [r3, #4]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005d76:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	689a      	ldr	r2, [r3, #8]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d86:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	681a      	ldr	r2, [r3, #0]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f042 0201 	orr.w	r2, r2, #1
 8005d96:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	f000 f9dd 	bl	8006158 <UART_CheckIdleState>
 8005d9e:	4603      	mov	r3, r0
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3708      	adds	r7, #8
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}

08005da8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b088      	sub	sp, #32
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005db0:	2300      	movs	r3, #0
 8005db2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	689a      	ldr	r2, [r3, #8]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	691b      	ldr	r3, [r3, #16]
 8005dbc:	431a      	orrs	r2, r3
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	695b      	ldr	r3, [r3, #20]
 8005dc2:	431a      	orrs	r2, r3
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	69db      	ldr	r3, [r3, #28]
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	4b8a      	ldr	r3, [pc, #552]	; (8005ffc <UART_SetConfig+0x254>)
 8005dd4:	4013      	ands	r3, r2
 8005dd6:	687a      	ldr	r2, [r7, #4]
 8005dd8:	6812      	ldr	r2, [r2, #0]
 8005dda:	6979      	ldr	r1, [r7, #20]
 8005ddc:	430b      	orrs	r3, r1
 8005dde:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	68da      	ldr	r2, [r3, #12]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	430a      	orrs	r2, r1
 8005df4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	699b      	ldr	r3, [r3, #24]
 8005dfa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6a1b      	ldr	r3, [r3, #32]
 8005e00:	697a      	ldr	r2, [r7, #20]
 8005e02:	4313      	orrs	r3, r2
 8005e04:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	697a      	ldr	r2, [r7, #20]
 8005e16:	430a      	orrs	r2, r1
 8005e18:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a78      	ldr	r2, [pc, #480]	; (8006000 <UART_SetConfig+0x258>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d120      	bne.n	8005e66 <UART_SetConfig+0xbe>
 8005e24:	4b77      	ldr	r3, [pc, #476]	; (8006004 <UART_SetConfig+0x25c>)
 8005e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e28:	f003 0303 	and.w	r3, r3, #3
 8005e2c:	2b03      	cmp	r3, #3
 8005e2e:	d817      	bhi.n	8005e60 <UART_SetConfig+0xb8>
 8005e30:	a201      	add	r2, pc, #4	; (adr r2, 8005e38 <UART_SetConfig+0x90>)
 8005e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e36:	bf00      	nop
 8005e38:	08005e49 	.word	0x08005e49
 8005e3c:	08005e55 	.word	0x08005e55
 8005e40:	08005e5b 	.word	0x08005e5b
 8005e44:	08005e4f 	.word	0x08005e4f
 8005e48:	2300      	movs	r3, #0
 8005e4a:	77fb      	strb	r3, [r7, #31]
 8005e4c:	e01d      	b.n	8005e8a <UART_SetConfig+0xe2>
 8005e4e:	2302      	movs	r3, #2
 8005e50:	77fb      	strb	r3, [r7, #31]
 8005e52:	e01a      	b.n	8005e8a <UART_SetConfig+0xe2>
 8005e54:	2304      	movs	r3, #4
 8005e56:	77fb      	strb	r3, [r7, #31]
 8005e58:	e017      	b.n	8005e8a <UART_SetConfig+0xe2>
 8005e5a:	2308      	movs	r3, #8
 8005e5c:	77fb      	strb	r3, [r7, #31]
 8005e5e:	e014      	b.n	8005e8a <UART_SetConfig+0xe2>
 8005e60:	2310      	movs	r3, #16
 8005e62:	77fb      	strb	r3, [r7, #31]
 8005e64:	e011      	b.n	8005e8a <UART_SetConfig+0xe2>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a67      	ldr	r2, [pc, #412]	; (8006008 <UART_SetConfig+0x260>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d102      	bne.n	8005e76 <UART_SetConfig+0xce>
 8005e70:	2300      	movs	r3, #0
 8005e72:	77fb      	strb	r3, [r7, #31]
 8005e74:	e009      	b.n	8005e8a <UART_SetConfig+0xe2>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a64      	ldr	r2, [pc, #400]	; (800600c <UART_SetConfig+0x264>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d102      	bne.n	8005e86 <UART_SetConfig+0xde>
 8005e80:	2300      	movs	r3, #0
 8005e82:	77fb      	strb	r3, [r7, #31]
 8005e84:	e001      	b.n	8005e8a <UART_SetConfig+0xe2>
 8005e86:	2310      	movs	r3, #16
 8005e88:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	69db      	ldr	r3, [r3, #28]
 8005e8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e92:	d15b      	bne.n	8005f4c <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8005e94:	7ffb      	ldrb	r3, [r7, #31]
 8005e96:	2b08      	cmp	r3, #8
 8005e98:	d827      	bhi.n	8005eea <UART_SetConfig+0x142>
 8005e9a:	a201      	add	r2, pc, #4	; (adr r2, 8005ea0 <UART_SetConfig+0xf8>)
 8005e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ea0:	08005ec5 	.word	0x08005ec5
 8005ea4:	08005ecd 	.word	0x08005ecd
 8005ea8:	08005ed5 	.word	0x08005ed5
 8005eac:	08005eeb 	.word	0x08005eeb
 8005eb0:	08005edb 	.word	0x08005edb
 8005eb4:	08005eeb 	.word	0x08005eeb
 8005eb8:	08005eeb 	.word	0x08005eeb
 8005ebc:	08005eeb 	.word	0x08005eeb
 8005ec0:	08005ee3 	.word	0x08005ee3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ec4:	f7fe fd1c 	bl	8004900 <HAL_RCC_GetPCLK1Freq>
 8005ec8:	61b8      	str	r0, [r7, #24]
        break;
 8005eca:	e013      	b.n	8005ef4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ecc:	f7fe fd3a 	bl	8004944 <HAL_RCC_GetPCLK2Freq>
 8005ed0:	61b8      	str	r0, [r7, #24]
        break;
 8005ed2:	e00f      	b.n	8005ef4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ed4:	4b4e      	ldr	r3, [pc, #312]	; (8006010 <UART_SetConfig+0x268>)
 8005ed6:	61bb      	str	r3, [r7, #24]
        break;
 8005ed8:	e00c      	b.n	8005ef4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005eda:	f7fe fc9b 	bl	8004814 <HAL_RCC_GetSysClockFreq>
 8005ede:	61b8      	str	r0, [r7, #24]
        break;
 8005ee0:	e008      	b.n	8005ef4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ee2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ee6:	61bb      	str	r3, [r7, #24]
        break;
 8005ee8:	e004      	b.n	8005ef4 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8005eea:	2300      	movs	r3, #0
 8005eec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	77bb      	strb	r3, [r7, #30]
        break;
 8005ef2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005ef4:	69bb      	ldr	r3, [r7, #24]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d074      	beq.n	8005fe4 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005efa:	69bb      	ldr	r3, [r7, #24]
 8005efc:	005a      	lsls	r2, r3, #1
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	085b      	lsrs	r3, r3, #1
 8005f04:	441a      	add	r2, r3
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f0e:	b29b      	uxth	r3, r3
 8005f10:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	2b0f      	cmp	r3, #15
 8005f16:	d916      	bls.n	8005f46 <UART_SetConfig+0x19e>
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f1e:	d212      	bcs.n	8005f46 <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	b29b      	uxth	r3, r3
 8005f24:	f023 030f 	bic.w	r3, r3, #15
 8005f28:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	085b      	lsrs	r3, r3, #1
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	f003 0307 	and.w	r3, r3, #7
 8005f34:	b29a      	uxth	r2, r3
 8005f36:	89fb      	ldrh	r3, [r7, #14]
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	89fa      	ldrh	r2, [r7, #14]
 8005f42:	60da      	str	r2, [r3, #12]
 8005f44:	e04e      	b.n	8005fe4 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005f46:	2301      	movs	r3, #1
 8005f48:	77bb      	strb	r3, [r7, #30]
 8005f4a:	e04b      	b.n	8005fe4 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005f4c:	7ffb      	ldrb	r3, [r7, #31]
 8005f4e:	2b08      	cmp	r3, #8
 8005f50:	d827      	bhi.n	8005fa2 <UART_SetConfig+0x1fa>
 8005f52:	a201      	add	r2, pc, #4	; (adr r2, 8005f58 <UART_SetConfig+0x1b0>)
 8005f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f58:	08005f7d 	.word	0x08005f7d
 8005f5c:	08005f85 	.word	0x08005f85
 8005f60:	08005f8d 	.word	0x08005f8d
 8005f64:	08005fa3 	.word	0x08005fa3
 8005f68:	08005f93 	.word	0x08005f93
 8005f6c:	08005fa3 	.word	0x08005fa3
 8005f70:	08005fa3 	.word	0x08005fa3
 8005f74:	08005fa3 	.word	0x08005fa3
 8005f78:	08005f9b 	.word	0x08005f9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f7c:	f7fe fcc0 	bl	8004900 <HAL_RCC_GetPCLK1Freq>
 8005f80:	61b8      	str	r0, [r7, #24]
        break;
 8005f82:	e013      	b.n	8005fac <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f84:	f7fe fcde 	bl	8004944 <HAL_RCC_GetPCLK2Freq>
 8005f88:	61b8      	str	r0, [r7, #24]
        break;
 8005f8a:	e00f      	b.n	8005fac <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f8c:	4b20      	ldr	r3, [pc, #128]	; (8006010 <UART_SetConfig+0x268>)
 8005f8e:	61bb      	str	r3, [r7, #24]
        break;
 8005f90:	e00c      	b.n	8005fac <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f92:	f7fe fc3f 	bl	8004814 <HAL_RCC_GetSysClockFreq>
 8005f96:	61b8      	str	r0, [r7, #24]
        break;
 8005f98:	e008      	b.n	8005fac <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f9e:	61bb      	str	r3, [r7, #24]
        break;
 8005fa0:	e004      	b.n	8005fac <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	77bb      	strb	r3, [r7, #30]
        break;
 8005faa:	bf00      	nop
    }

    if (pclk != 0U)
 8005fac:	69bb      	ldr	r3, [r7, #24]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d018      	beq.n	8005fe4 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	085a      	lsrs	r2, r3, #1
 8005fb8:	69bb      	ldr	r3, [r7, #24]
 8005fba:	441a      	add	r2, r3
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	2b0f      	cmp	r3, #15
 8005fcc:	d908      	bls.n	8005fe0 <UART_SetConfig+0x238>
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fd4:	d204      	bcs.n	8005fe0 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	693a      	ldr	r2, [r7, #16]
 8005fdc:	60da      	str	r2, [r3, #12]
 8005fde:	e001      	b.n	8005fe4 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2200      	movs	r2, #0
 8005fee:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005ff0:	7fbb      	ldrb	r3, [r7, #30]
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3720      	adds	r7, #32
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}
 8005ffa:	bf00      	nop
 8005ffc:	efff69f3 	.word	0xefff69f3
 8006000:	40013800 	.word	0x40013800
 8006004:	40021000 	.word	0x40021000
 8006008:	40004400 	.word	0x40004400
 800600c:	40004800 	.word	0x40004800
 8006010:	007a1200 	.word	0x007a1200

08006014 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006014:	b480      	push	{r7}
 8006016:	b083      	sub	sp, #12
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006020:	f003 0301 	and.w	r3, r3, #1
 8006024:	2b00      	cmp	r3, #0
 8006026:	d00a      	beq.n	800603e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	430a      	orrs	r2, r1
 800603c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006042:	f003 0302 	and.w	r3, r3, #2
 8006046:	2b00      	cmp	r3, #0
 8006048:	d00a      	beq.n	8006060 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	430a      	orrs	r2, r1
 800605e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006064:	f003 0304 	and.w	r3, r3, #4
 8006068:	2b00      	cmp	r3, #0
 800606a:	d00a      	beq.n	8006082 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	430a      	orrs	r2, r1
 8006080:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006086:	f003 0308 	and.w	r3, r3, #8
 800608a:	2b00      	cmp	r3, #0
 800608c:	d00a      	beq.n	80060a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	430a      	orrs	r2, r1
 80060a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a8:	f003 0310 	and.w	r3, r3, #16
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d00a      	beq.n	80060c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	430a      	orrs	r2, r1
 80060c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ca:	f003 0320 	and.w	r3, r3, #32
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d00a      	beq.n	80060e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	689b      	ldr	r3, [r3, #8]
 80060d8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	430a      	orrs	r2, r1
 80060e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d01a      	beq.n	800612a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	430a      	orrs	r2, r1
 8006108:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800610e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006112:	d10a      	bne.n	800612a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	430a      	orrs	r2, r1
 8006128:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800612e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006132:	2b00      	cmp	r3, #0
 8006134:	d00a      	beq.n	800614c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	430a      	orrs	r2, r1
 800614a:	605a      	str	r2, [r3, #4]
  }
}
 800614c:	bf00      	nop
 800614e:	370c      	adds	r7, #12
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr

08006158 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b086      	sub	sp, #24
 800615c:	af02      	add	r7, sp, #8
 800615e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2200      	movs	r2, #0
 8006164:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006168:	f7fb ff6e 	bl	8002048 <HAL_GetTick>
 800616c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f003 0308 	and.w	r3, r3, #8
 8006178:	2b08      	cmp	r3, #8
 800617a:	d10e      	bne.n	800619a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800617c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006180:	9300      	str	r3, [sp, #0]
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2200      	movs	r2, #0
 8006186:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f000 f82d 	bl	80061ea <UART_WaitOnFlagUntilTimeout>
 8006190:	4603      	mov	r3, r0
 8006192:	2b00      	cmp	r3, #0
 8006194:	d001      	beq.n	800619a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006196:	2303      	movs	r3, #3
 8006198:	e023      	b.n	80061e2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f003 0304 	and.w	r3, r3, #4
 80061a4:	2b04      	cmp	r3, #4
 80061a6:	d10e      	bne.n	80061c6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80061a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80061ac:	9300      	str	r3, [sp, #0]
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2200      	movs	r2, #0
 80061b2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f000 f817 	bl	80061ea <UART_WaitOnFlagUntilTimeout>
 80061bc:	4603      	mov	r3, r0
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d001      	beq.n	80061c6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80061c2:	2303      	movs	r3, #3
 80061c4:	e00d      	b.n	80061e2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2220      	movs	r2, #32
 80061ca:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2220      	movs	r2, #32
 80061d0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2200      	movs	r2, #0
 80061d6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2200      	movs	r2, #0
 80061dc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80061e0:	2300      	movs	r3, #0
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	3710      	adds	r7, #16
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}

080061ea <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80061ea:	b580      	push	{r7, lr}
 80061ec:	b09c      	sub	sp, #112	; 0x70
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	60f8      	str	r0, [r7, #12]
 80061f2:	60b9      	str	r1, [r7, #8]
 80061f4:	603b      	str	r3, [r7, #0]
 80061f6:	4613      	mov	r3, r2
 80061f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061fa:	e0a5      	b.n	8006348 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80061fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006202:	f000 80a1 	beq.w	8006348 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006206:	f7fb ff1f 	bl	8002048 <HAL_GetTick>
 800620a:	4602      	mov	r2, r0
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	1ad3      	subs	r3, r2, r3
 8006210:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006212:	429a      	cmp	r2, r3
 8006214:	d302      	bcc.n	800621c <UART_WaitOnFlagUntilTimeout+0x32>
 8006216:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006218:	2b00      	cmp	r3, #0
 800621a:	d13e      	bne.n	800629a <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006222:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006224:	e853 3f00 	ldrex	r3, [r3]
 8006228:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800622a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800622c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006230:	667b      	str	r3, [r7, #100]	; 0x64
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	461a      	mov	r2, r3
 8006238:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800623a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800623c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800623e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006240:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006242:	e841 2300 	strex	r3, r2, [r1]
 8006246:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006248:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800624a:	2b00      	cmp	r3, #0
 800624c:	d1e6      	bne.n	800621c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	3308      	adds	r3, #8
 8006254:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006256:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006258:	e853 3f00 	ldrex	r3, [r3]
 800625c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800625e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006260:	f023 0301 	bic.w	r3, r3, #1
 8006264:	663b      	str	r3, [r7, #96]	; 0x60
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	3308      	adds	r3, #8
 800626c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800626e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006270:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006272:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006274:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006276:	e841 2300 	strex	r3, r2, [r1]
 800627a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800627c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800627e:	2b00      	cmp	r3, #0
 8006280:	d1e5      	bne.n	800624e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2220      	movs	r2, #32
 8006286:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2220      	movs	r2, #32
 800628c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2200      	movs	r2, #0
 8006292:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006296:	2303      	movs	r3, #3
 8006298:	e067      	b.n	800636a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f003 0304 	and.w	r3, r3, #4
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d04f      	beq.n	8006348 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	69db      	ldr	r3, [r3, #28]
 80062ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062b6:	d147      	bne.n	8006348 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80062c0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ca:	e853 3f00 	ldrex	r3, [r3]
 80062ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80062d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80062d6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	461a      	mov	r2, r3
 80062de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062e0:	637b      	str	r3, [r7, #52]	; 0x34
 80062e2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062e4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80062e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80062e8:	e841 2300 	strex	r3, r2, [r1]
 80062ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80062ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d1e6      	bne.n	80062c2 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	3308      	adds	r3, #8
 80062fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	e853 3f00 	ldrex	r3, [r3]
 8006302:	613b      	str	r3, [r7, #16]
   return(result);
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	f023 0301 	bic.w	r3, r3, #1
 800630a:	66bb      	str	r3, [r7, #104]	; 0x68
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	3308      	adds	r3, #8
 8006312:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006314:	623a      	str	r2, [r7, #32]
 8006316:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006318:	69f9      	ldr	r1, [r7, #28]
 800631a:	6a3a      	ldr	r2, [r7, #32]
 800631c:	e841 2300 	strex	r3, r2, [r1]
 8006320:	61bb      	str	r3, [r7, #24]
   return(result);
 8006322:	69bb      	ldr	r3, [r7, #24]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d1e5      	bne.n	80062f4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2220      	movs	r2, #32
 800632c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2220      	movs	r2, #32
 8006332:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	2220      	movs	r2, #32
 8006338:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2200      	movs	r2, #0
 8006340:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006344:	2303      	movs	r3, #3
 8006346:	e010      	b.n	800636a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	69da      	ldr	r2, [r3, #28]
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	4013      	ands	r3, r2
 8006352:	68ba      	ldr	r2, [r7, #8]
 8006354:	429a      	cmp	r2, r3
 8006356:	bf0c      	ite	eq
 8006358:	2301      	moveq	r3, #1
 800635a:	2300      	movne	r3, #0
 800635c:	b2db      	uxtb	r3, r3
 800635e:	461a      	mov	r2, r3
 8006360:	79fb      	ldrb	r3, [r7, #7]
 8006362:	429a      	cmp	r2, r3
 8006364:	f43f af4a 	beq.w	80061fc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006368:	2300      	movs	r3, #0
}
 800636a:	4618      	mov	r0, r3
 800636c:	3770      	adds	r7, #112	; 0x70
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}
	...

08006374 <__errno>:
 8006374:	4b01      	ldr	r3, [pc, #4]	; (800637c <__errno+0x8>)
 8006376:	6818      	ldr	r0, [r3, #0]
 8006378:	4770      	bx	lr
 800637a:	bf00      	nop
 800637c:	2000000c 	.word	0x2000000c

08006380 <__libc_init_array>:
 8006380:	b570      	push	{r4, r5, r6, lr}
 8006382:	4d0d      	ldr	r5, [pc, #52]	; (80063b8 <__libc_init_array+0x38>)
 8006384:	4c0d      	ldr	r4, [pc, #52]	; (80063bc <__libc_init_array+0x3c>)
 8006386:	1b64      	subs	r4, r4, r5
 8006388:	10a4      	asrs	r4, r4, #2
 800638a:	2600      	movs	r6, #0
 800638c:	42a6      	cmp	r6, r4
 800638e:	d109      	bne.n	80063a4 <__libc_init_array+0x24>
 8006390:	4d0b      	ldr	r5, [pc, #44]	; (80063c0 <__libc_init_array+0x40>)
 8006392:	4c0c      	ldr	r4, [pc, #48]	; (80063c4 <__libc_init_array+0x44>)
 8006394:	f005 f862 	bl	800b45c <_init>
 8006398:	1b64      	subs	r4, r4, r5
 800639a:	10a4      	asrs	r4, r4, #2
 800639c:	2600      	movs	r6, #0
 800639e:	42a6      	cmp	r6, r4
 80063a0:	d105      	bne.n	80063ae <__libc_init_array+0x2e>
 80063a2:	bd70      	pop	{r4, r5, r6, pc}
 80063a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80063a8:	4798      	blx	r3
 80063aa:	3601      	adds	r6, #1
 80063ac:	e7ee      	b.n	800638c <__libc_init_array+0xc>
 80063ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80063b2:	4798      	blx	r3
 80063b4:	3601      	adds	r6, #1
 80063b6:	e7f2      	b.n	800639e <__libc_init_array+0x1e>
 80063b8:	0800b974 	.word	0x0800b974
 80063bc:	0800b974 	.word	0x0800b974
 80063c0:	0800b974 	.word	0x0800b974
 80063c4:	0800b978 	.word	0x0800b978

080063c8 <memset>:
 80063c8:	4402      	add	r2, r0
 80063ca:	4603      	mov	r3, r0
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d100      	bne.n	80063d2 <memset+0xa>
 80063d0:	4770      	bx	lr
 80063d2:	f803 1b01 	strb.w	r1, [r3], #1
 80063d6:	e7f9      	b.n	80063cc <memset+0x4>

080063d8 <__cvt>:
 80063d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80063dc:	ec55 4b10 	vmov	r4, r5, d0
 80063e0:	2d00      	cmp	r5, #0
 80063e2:	460e      	mov	r6, r1
 80063e4:	4619      	mov	r1, r3
 80063e6:	462b      	mov	r3, r5
 80063e8:	bfbb      	ittet	lt
 80063ea:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80063ee:	461d      	movlt	r5, r3
 80063f0:	2300      	movge	r3, #0
 80063f2:	232d      	movlt	r3, #45	; 0x2d
 80063f4:	700b      	strb	r3, [r1, #0]
 80063f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80063f8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80063fc:	4691      	mov	r9, r2
 80063fe:	f023 0820 	bic.w	r8, r3, #32
 8006402:	bfbc      	itt	lt
 8006404:	4622      	movlt	r2, r4
 8006406:	4614      	movlt	r4, r2
 8006408:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800640c:	d005      	beq.n	800641a <__cvt+0x42>
 800640e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006412:	d100      	bne.n	8006416 <__cvt+0x3e>
 8006414:	3601      	adds	r6, #1
 8006416:	2102      	movs	r1, #2
 8006418:	e000      	b.n	800641c <__cvt+0x44>
 800641a:	2103      	movs	r1, #3
 800641c:	ab03      	add	r3, sp, #12
 800641e:	9301      	str	r3, [sp, #4]
 8006420:	ab02      	add	r3, sp, #8
 8006422:	9300      	str	r3, [sp, #0]
 8006424:	ec45 4b10 	vmov	d0, r4, r5
 8006428:	4653      	mov	r3, sl
 800642a:	4632      	mov	r2, r6
 800642c:	f001 fdac 	bl	8007f88 <_dtoa_r>
 8006430:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006434:	4607      	mov	r7, r0
 8006436:	d102      	bne.n	800643e <__cvt+0x66>
 8006438:	f019 0f01 	tst.w	r9, #1
 800643c:	d022      	beq.n	8006484 <__cvt+0xac>
 800643e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006442:	eb07 0906 	add.w	r9, r7, r6
 8006446:	d110      	bne.n	800646a <__cvt+0x92>
 8006448:	783b      	ldrb	r3, [r7, #0]
 800644a:	2b30      	cmp	r3, #48	; 0x30
 800644c:	d10a      	bne.n	8006464 <__cvt+0x8c>
 800644e:	2200      	movs	r2, #0
 8006450:	2300      	movs	r3, #0
 8006452:	4620      	mov	r0, r4
 8006454:	4629      	mov	r1, r5
 8006456:	f7fa fb37 	bl	8000ac8 <__aeabi_dcmpeq>
 800645a:	b918      	cbnz	r0, 8006464 <__cvt+0x8c>
 800645c:	f1c6 0601 	rsb	r6, r6, #1
 8006460:	f8ca 6000 	str.w	r6, [sl]
 8006464:	f8da 3000 	ldr.w	r3, [sl]
 8006468:	4499      	add	r9, r3
 800646a:	2200      	movs	r2, #0
 800646c:	2300      	movs	r3, #0
 800646e:	4620      	mov	r0, r4
 8006470:	4629      	mov	r1, r5
 8006472:	f7fa fb29 	bl	8000ac8 <__aeabi_dcmpeq>
 8006476:	b108      	cbz	r0, 800647c <__cvt+0xa4>
 8006478:	f8cd 900c 	str.w	r9, [sp, #12]
 800647c:	2230      	movs	r2, #48	; 0x30
 800647e:	9b03      	ldr	r3, [sp, #12]
 8006480:	454b      	cmp	r3, r9
 8006482:	d307      	bcc.n	8006494 <__cvt+0xbc>
 8006484:	9b03      	ldr	r3, [sp, #12]
 8006486:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006488:	1bdb      	subs	r3, r3, r7
 800648a:	4638      	mov	r0, r7
 800648c:	6013      	str	r3, [r2, #0]
 800648e:	b004      	add	sp, #16
 8006490:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006494:	1c59      	adds	r1, r3, #1
 8006496:	9103      	str	r1, [sp, #12]
 8006498:	701a      	strb	r2, [r3, #0]
 800649a:	e7f0      	b.n	800647e <__cvt+0xa6>

0800649c <__exponent>:
 800649c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800649e:	4603      	mov	r3, r0
 80064a0:	2900      	cmp	r1, #0
 80064a2:	bfb8      	it	lt
 80064a4:	4249      	neglt	r1, r1
 80064a6:	f803 2b02 	strb.w	r2, [r3], #2
 80064aa:	bfb4      	ite	lt
 80064ac:	222d      	movlt	r2, #45	; 0x2d
 80064ae:	222b      	movge	r2, #43	; 0x2b
 80064b0:	2909      	cmp	r1, #9
 80064b2:	7042      	strb	r2, [r0, #1]
 80064b4:	dd2a      	ble.n	800650c <__exponent+0x70>
 80064b6:	f10d 0407 	add.w	r4, sp, #7
 80064ba:	46a4      	mov	ip, r4
 80064bc:	270a      	movs	r7, #10
 80064be:	46a6      	mov	lr, r4
 80064c0:	460a      	mov	r2, r1
 80064c2:	fb91 f6f7 	sdiv	r6, r1, r7
 80064c6:	fb07 1516 	mls	r5, r7, r6, r1
 80064ca:	3530      	adds	r5, #48	; 0x30
 80064cc:	2a63      	cmp	r2, #99	; 0x63
 80064ce:	f104 34ff 	add.w	r4, r4, #4294967295
 80064d2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80064d6:	4631      	mov	r1, r6
 80064d8:	dcf1      	bgt.n	80064be <__exponent+0x22>
 80064da:	3130      	adds	r1, #48	; 0x30
 80064dc:	f1ae 0502 	sub.w	r5, lr, #2
 80064e0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80064e4:	1c44      	adds	r4, r0, #1
 80064e6:	4629      	mov	r1, r5
 80064e8:	4561      	cmp	r1, ip
 80064ea:	d30a      	bcc.n	8006502 <__exponent+0x66>
 80064ec:	f10d 0209 	add.w	r2, sp, #9
 80064f0:	eba2 020e 	sub.w	r2, r2, lr
 80064f4:	4565      	cmp	r5, ip
 80064f6:	bf88      	it	hi
 80064f8:	2200      	movhi	r2, #0
 80064fa:	4413      	add	r3, r2
 80064fc:	1a18      	subs	r0, r3, r0
 80064fe:	b003      	add	sp, #12
 8006500:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006502:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006506:	f804 2f01 	strb.w	r2, [r4, #1]!
 800650a:	e7ed      	b.n	80064e8 <__exponent+0x4c>
 800650c:	2330      	movs	r3, #48	; 0x30
 800650e:	3130      	adds	r1, #48	; 0x30
 8006510:	7083      	strb	r3, [r0, #2]
 8006512:	70c1      	strb	r1, [r0, #3]
 8006514:	1d03      	adds	r3, r0, #4
 8006516:	e7f1      	b.n	80064fc <__exponent+0x60>

08006518 <_printf_float>:
 8006518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800651c:	ed2d 8b02 	vpush	{d8}
 8006520:	b08d      	sub	sp, #52	; 0x34
 8006522:	460c      	mov	r4, r1
 8006524:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006528:	4616      	mov	r6, r2
 800652a:	461f      	mov	r7, r3
 800652c:	4605      	mov	r5, r0
 800652e:	f002 fe89 	bl	8009244 <_localeconv_r>
 8006532:	f8d0 a000 	ldr.w	sl, [r0]
 8006536:	4650      	mov	r0, sl
 8006538:	f7f9 fe4a 	bl	80001d0 <strlen>
 800653c:	2300      	movs	r3, #0
 800653e:	930a      	str	r3, [sp, #40]	; 0x28
 8006540:	6823      	ldr	r3, [r4, #0]
 8006542:	9305      	str	r3, [sp, #20]
 8006544:	f8d8 3000 	ldr.w	r3, [r8]
 8006548:	f894 b018 	ldrb.w	fp, [r4, #24]
 800654c:	3307      	adds	r3, #7
 800654e:	f023 0307 	bic.w	r3, r3, #7
 8006552:	f103 0208 	add.w	r2, r3, #8
 8006556:	f8c8 2000 	str.w	r2, [r8]
 800655a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800655e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006562:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006566:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800656a:	9307      	str	r3, [sp, #28]
 800656c:	f8cd 8018 	str.w	r8, [sp, #24]
 8006570:	ee08 0a10 	vmov	s16, r0
 8006574:	4b9f      	ldr	r3, [pc, #636]	; (80067f4 <_printf_float+0x2dc>)
 8006576:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800657a:	f04f 32ff 	mov.w	r2, #4294967295
 800657e:	f7fa fad5 	bl	8000b2c <__aeabi_dcmpun>
 8006582:	bb88      	cbnz	r0, 80065e8 <_printf_float+0xd0>
 8006584:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006588:	4b9a      	ldr	r3, [pc, #616]	; (80067f4 <_printf_float+0x2dc>)
 800658a:	f04f 32ff 	mov.w	r2, #4294967295
 800658e:	f7fa faaf 	bl	8000af0 <__aeabi_dcmple>
 8006592:	bb48      	cbnz	r0, 80065e8 <_printf_float+0xd0>
 8006594:	2200      	movs	r2, #0
 8006596:	2300      	movs	r3, #0
 8006598:	4640      	mov	r0, r8
 800659a:	4649      	mov	r1, r9
 800659c:	f7fa fa9e 	bl	8000adc <__aeabi_dcmplt>
 80065a0:	b110      	cbz	r0, 80065a8 <_printf_float+0x90>
 80065a2:	232d      	movs	r3, #45	; 0x2d
 80065a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065a8:	4b93      	ldr	r3, [pc, #588]	; (80067f8 <_printf_float+0x2e0>)
 80065aa:	4894      	ldr	r0, [pc, #592]	; (80067fc <_printf_float+0x2e4>)
 80065ac:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80065b0:	bf94      	ite	ls
 80065b2:	4698      	movls	r8, r3
 80065b4:	4680      	movhi	r8, r0
 80065b6:	2303      	movs	r3, #3
 80065b8:	6123      	str	r3, [r4, #16]
 80065ba:	9b05      	ldr	r3, [sp, #20]
 80065bc:	f023 0204 	bic.w	r2, r3, #4
 80065c0:	6022      	str	r2, [r4, #0]
 80065c2:	f04f 0900 	mov.w	r9, #0
 80065c6:	9700      	str	r7, [sp, #0]
 80065c8:	4633      	mov	r3, r6
 80065ca:	aa0b      	add	r2, sp, #44	; 0x2c
 80065cc:	4621      	mov	r1, r4
 80065ce:	4628      	mov	r0, r5
 80065d0:	f000 f9d8 	bl	8006984 <_printf_common>
 80065d4:	3001      	adds	r0, #1
 80065d6:	f040 8090 	bne.w	80066fa <_printf_float+0x1e2>
 80065da:	f04f 30ff 	mov.w	r0, #4294967295
 80065de:	b00d      	add	sp, #52	; 0x34
 80065e0:	ecbd 8b02 	vpop	{d8}
 80065e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065e8:	4642      	mov	r2, r8
 80065ea:	464b      	mov	r3, r9
 80065ec:	4640      	mov	r0, r8
 80065ee:	4649      	mov	r1, r9
 80065f0:	f7fa fa9c 	bl	8000b2c <__aeabi_dcmpun>
 80065f4:	b140      	cbz	r0, 8006608 <_printf_float+0xf0>
 80065f6:	464b      	mov	r3, r9
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	bfbc      	itt	lt
 80065fc:	232d      	movlt	r3, #45	; 0x2d
 80065fe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006602:	487f      	ldr	r0, [pc, #508]	; (8006800 <_printf_float+0x2e8>)
 8006604:	4b7f      	ldr	r3, [pc, #508]	; (8006804 <_printf_float+0x2ec>)
 8006606:	e7d1      	b.n	80065ac <_printf_float+0x94>
 8006608:	6863      	ldr	r3, [r4, #4]
 800660a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800660e:	9206      	str	r2, [sp, #24]
 8006610:	1c5a      	adds	r2, r3, #1
 8006612:	d13f      	bne.n	8006694 <_printf_float+0x17c>
 8006614:	2306      	movs	r3, #6
 8006616:	6063      	str	r3, [r4, #4]
 8006618:	9b05      	ldr	r3, [sp, #20]
 800661a:	6861      	ldr	r1, [r4, #4]
 800661c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006620:	2300      	movs	r3, #0
 8006622:	9303      	str	r3, [sp, #12]
 8006624:	ab0a      	add	r3, sp, #40	; 0x28
 8006626:	e9cd b301 	strd	fp, r3, [sp, #4]
 800662a:	ab09      	add	r3, sp, #36	; 0x24
 800662c:	ec49 8b10 	vmov	d0, r8, r9
 8006630:	9300      	str	r3, [sp, #0]
 8006632:	6022      	str	r2, [r4, #0]
 8006634:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006638:	4628      	mov	r0, r5
 800663a:	f7ff fecd 	bl	80063d8 <__cvt>
 800663e:	9b06      	ldr	r3, [sp, #24]
 8006640:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006642:	2b47      	cmp	r3, #71	; 0x47
 8006644:	4680      	mov	r8, r0
 8006646:	d108      	bne.n	800665a <_printf_float+0x142>
 8006648:	1cc8      	adds	r0, r1, #3
 800664a:	db02      	blt.n	8006652 <_printf_float+0x13a>
 800664c:	6863      	ldr	r3, [r4, #4]
 800664e:	4299      	cmp	r1, r3
 8006650:	dd41      	ble.n	80066d6 <_printf_float+0x1be>
 8006652:	f1ab 0b02 	sub.w	fp, fp, #2
 8006656:	fa5f fb8b 	uxtb.w	fp, fp
 800665a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800665e:	d820      	bhi.n	80066a2 <_printf_float+0x18a>
 8006660:	3901      	subs	r1, #1
 8006662:	465a      	mov	r2, fp
 8006664:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006668:	9109      	str	r1, [sp, #36]	; 0x24
 800666a:	f7ff ff17 	bl	800649c <__exponent>
 800666e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006670:	1813      	adds	r3, r2, r0
 8006672:	2a01      	cmp	r2, #1
 8006674:	4681      	mov	r9, r0
 8006676:	6123      	str	r3, [r4, #16]
 8006678:	dc02      	bgt.n	8006680 <_printf_float+0x168>
 800667a:	6822      	ldr	r2, [r4, #0]
 800667c:	07d2      	lsls	r2, r2, #31
 800667e:	d501      	bpl.n	8006684 <_printf_float+0x16c>
 8006680:	3301      	adds	r3, #1
 8006682:	6123      	str	r3, [r4, #16]
 8006684:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006688:	2b00      	cmp	r3, #0
 800668a:	d09c      	beq.n	80065c6 <_printf_float+0xae>
 800668c:	232d      	movs	r3, #45	; 0x2d
 800668e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006692:	e798      	b.n	80065c6 <_printf_float+0xae>
 8006694:	9a06      	ldr	r2, [sp, #24]
 8006696:	2a47      	cmp	r2, #71	; 0x47
 8006698:	d1be      	bne.n	8006618 <_printf_float+0x100>
 800669a:	2b00      	cmp	r3, #0
 800669c:	d1bc      	bne.n	8006618 <_printf_float+0x100>
 800669e:	2301      	movs	r3, #1
 80066a0:	e7b9      	b.n	8006616 <_printf_float+0xfe>
 80066a2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80066a6:	d118      	bne.n	80066da <_printf_float+0x1c2>
 80066a8:	2900      	cmp	r1, #0
 80066aa:	6863      	ldr	r3, [r4, #4]
 80066ac:	dd0b      	ble.n	80066c6 <_printf_float+0x1ae>
 80066ae:	6121      	str	r1, [r4, #16]
 80066b0:	b913      	cbnz	r3, 80066b8 <_printf_float+0x1a0>
 80066b2:	6822      	ldr	r2, [r4, #0]
 80066b4:	07d0      	lsls	r0, r2, #31
 80066b6:	d502      	bpl.n	80066be <_printf_float+0x1a6>
 80066b8:	3301      	adds	r3, #1
 80066ba:	440b      	add	r3, r1
 80066bc:	6123      	str	r3, [r4, #16]
 80066be:	65a1      	str	r1, [r4, #88]	; 0x58
 80066c0:	f04f 0900 	mov.w	r9, #0
 80066c4:	e7de      	b.n	8006684 <_printf_float+0x16c>
 80066c6:	b913      	cbnz	r3, 80066ce <_printf_float+0x1b6>
 80066c8:	6822      	ldr	r2, [r4, #0]
 80066ca:	07d2      	lsls	r2, r2, #31
 80066cc:	d501      	bpl.n	80066d2 <_printf_float+0x1ba>
 80066ce:	3302      	adds	r3, #2
 80066d0:	e7f4      	b.n	80066bc <_printf_float+0x1a4>
 80066d2:	2301      	movs	r3, #1
 80066d4:	e7f2      	b.n	80066bc <_printf_float+0x1a4>
 80066d6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80066da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066dc:	4299      	cmp	r1, r3
 80066de:	db05      	blt.n	80066ec <_printf_float+0x1d4>
 80066e0:	6823      	ldr	r3, [r4, #0]
 80066e2:	6121      	str	r1, [r4, #16]
 80066e4:	07d8      	lsls	r0, r3, #31
 80066e6:	d5ea      	bpl.n	80066be <_printf_float+0x1a6>
 80066e8:	1c4b      	adds	r3, r1, #1
 80066ea:	e7e7      	b.n	80066bc <_printf_float+0x1a4>
 80066ec:	2900      	cmp	r1, #0
 80066ee:	bfd4      	ite	le
 80066f0:	f1c1 0202 	rsble	r2, r1, #2
 80066f4:	2201      	movgt	r2, #1
 80066f6:	4413      	add	r3, r2
 80066f8:	e7e0      	b.n	80066bc <_printf_float+0x1a4>
 80066fa:	6823      	ldr	r3, [r4, #0]
 80066fc:	055a      	lsls	r2, r3, #21
 80066fe:	d407      	bmi.n	8006710 <_printf_float+0x1f8>
 8006700:	6923      	ldr	r3, [r4, #16]
 8006702:	4642      	mov	r2, r8
 8006704:	4631      	mov	r1, r6
 8006706:	4628      	mov	r0, r5
 8006708:	47b8      	blx	r7
 800670a:	3001      	adds	r0, #1
 800670c:	d12c      	bne.n	8006768 <_printf_float+0x250>
 800670e:	e764      	b.n	80065da <_printf_float+0xc2>
 8006710:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006714:	f240 80e0 	bls.w	80068d8 <_printf_float+0x3c0>
 8006718:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800671c:	2200      	movs	r2, #0
 800671e:	2300      	movs	r3, #0
 8006720:	f7fa f9d2 	bl	8000ac8 <__aeabi_dcmpeq>
 8006724:	2800      	cmp	r0, #0
 8006726:	d034      	beq.n	8006792 <_printf_float+0x27a>
 8006728:	4a37      	ldr	r2, [pc, #220]	; (8006808 <_printf_float+0x2f0>)
 800672a:	2301      	movs	r3, #1
 800672c:	4631      	mov	r1, r6
 800672e:	4628      	mov	r0, r5
 8006730:	47b8      	blx	r7
 8006732:	3001      	adds	r0, #1
 8006734:	f43f af51 	beq.w	80065da <_printf_float+0xc2>
 8006738:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800673c:	429a      	cmp	r2, r3
 800673e:	db02      	blt.n	8006746 <_printf_float+0x22e>
 8006740:	6823      	ldr	r3, [r4, #0]
 8006742:	07d8      	lsls	r0, r3, #31
 8006744:	d510      	bpl.n	8006768 <_printf_float+0x250>
 8006746:	ee18 3a10 	vmov	r3, s16
 800674a:	4652      	mov	r2, sl
 800674c:	4631      	mov	r1, r6
 800674e:	4628      	mov	r0, r5
 8006750:	47b8      	blx	r7
 8006752:	3001      	adds	r0, #1
 8006754:	f43f af41 	beq.w	80065da <_printf_float+0xc2>
 8006758:	f04f 0800 	mov.w	r8, #0
 800675c:	f104 091a 	add.w	r9, r4, #26
 8006760:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006762:	3b01      	subs	r3, #1
 8006764:	4543      	cmp	r3, r8
 8006766:	dc09      	bgt.n	800677c <_printf_float+0x264>
 8006768:	6823      	ldr	r3, [r4, #0]
 800676a:	079b      	lsls	r3, r3, #30
 800676c:	f100 8105 	bmi.w	800697a <_printf_float+0x462>
 8006770:	68e0      	ldr	r0, [r4, #12]
 8006772:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006774:	4298      	cmp	r0, r3
 8006776:	bfb8      	it	lt
 8006778:	4618      	movlt	r0, r3
 800677a:	e730      	b.n	80065de <_printf_float+0xc6>
 800677c:	2301      	movs	r3, #1
 800677e:	464a      	mov	r2, r9
 8006780:	4631      	mov	r1, r6
 8006782:	4628      	mov	r0, r5
 8006784:	47b8      	blx	r7
 8006786:	3001      	adds	r0, #1
 8006788:	f43f af27 	beq.w	80065da <_printf_float+0xc2>
 800678c:	f108 0801 	add.w	r8, r8, #1
 8006790:	e7e6      	b.n	8006760 <_printf_float+0x248>
 8006792:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006794:	2b00      	cmp	r3, #0
 8006796:	dc39      	bgt.n	800680c <_printf_float+0x2f4>
 8006798:	4a1b      	ldr	r2, [pc, #108]	; (8006808 <_printf_float+0x2f0>)
 800679a:	2301      	movs	r3, #1
 800679c:	4631      	mov	r1, r6
 800679e:	4628      	mov	r0, r5
 80067a0:	47b8      	blx	r7
 80067a2:	3001      	adds	r0, #1
 80067a4:	f43f af19 	beq.w	80065da <_printf_float+0xc2>
 80067a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80067ac:	4313      	orrs	r3, r2
 80067ae:	d102      	bne.n	80067b6 <_printf_float+0x29e>
 80067b0:	6823      	ldr	r3, [r4, #0]
 80067b2:	07d9      	lsls	r1, r3, #31
 80067b4:	d5d8      	bpl.n	8006768 <_printf_float+0x250>
 80067b6:	ee18 3a10 	vmov	r3, s16
 80067ba:	4652      	mov	r2, sl
 80067bc:	4631      	mov	r1, r6
 80067be:	4628      	mov	r0, r5
 80067c0:	47b8      	blx	r7
 80067c2:	3001      	adds	r0, #1
 80067c4:	f43f af09 	beq.w	80065da <_printf_float+0xc2>
 80067c8:	f04f 0900 	mov.w	r9, #0
 80067cc:	f104 0a1a 	add.w	sl, r4, #26
 80067d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067d2:	425b      	negs	r3, r3
 80067d4:	454b      	cmp	r3, r9
 80067d6:	dc01      	bgt.n	80067dc <_printf_float+0x2c4>
 80067d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067da:	e792      	b.n	8006702 <_printf_float+0x1ea>
 80067dc:	2301      	movs	r3, #1
 80067de:	4652      	mov	r2, sl
 80067e0:	4631      	mov	r1, r6
 80067e2:	4628      	mov	r0, r5
 80067e4:	47b8      	blx	r7
 80067e6:	3001      	adds	r0, #1
 80067e8:	f43f aef7 	beq.w	80065da <_printf_float+0xc2>
 80067ec:	f109 0901 	add.w	r9, r9, #1
 80067f0:	e7ee      	b.n	80067d0 <_printf_float+0x2b8>
 80067f2:	bf00      	nop
 80067f4:	7fefffff 	.word	0x7fefffff
 80067f8:	0800b4b4 	.word	0x0800b4b4
 80067fc:	0800b4b8 	.word	0x0800b4b8
 8006800:	0800b4c0 	.word	0x0800b4c0
 8006804:	0800b4bc 	.word	0x0800b4bc
 8006808:	0800b4c4 	.word	0x0800b4c4
 800680c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800680e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006810:	429a      	cmp	r2, r3
 8006812:	bfa8      	it	ge
 8006814:	461a      	movge	r2, r3
 8006816:	2a00      	cmp	r2, #0
 8006818:	4691      	mov	r9, r2
 800681a:	dc37      	bgt.n	800688c <_printf_float+0x374>
 800681c:	f04f 0b00 	mov.w	fp, #0
 8006820:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006824:	f104 021a 	add.w	r2, r4, #26
 8006828:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800682a:	9305      	str	r3, [sp, #20]
 800682c:	eba3 0309 	sub.w	r3, r3, r9
 8006830:	455b      	cmp	r3, fp
 8006832:	dc33      	bgt.n	800689c <_printf_float+0x384>
 8006834:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006838:	429a      	cmp	r2, r3
 800683a:	db3b      	blt.n	80068b4 <_printf_float+0x39c>
 800683c:	6823      	ldr	r3, [r4, #0]
 800683e:	07da      	lsls	r2, r3, #31
 8006840:	d438      	bmi.n	80068b4 <_printf_float+0x39c>
 8006842:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006844:	9a05      	ldr	r2, [sp, #20]
 8006846:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006848:	1a9a      	subs	r2, r3, r2
 800684a:	eba3 0901 	sub.w	r9, r3, r1
 800684e:	4591      	cmp	r9, r2
 8006850:	bfa8      	it	ge
 8006852:	4691      	movge	r9, r2
 8006854:	f1b9 0f00 	cmp.w	r9, #0
 8006858:	dc35      	bgt.n	80068c6 <_printf_float+0x3ae>
 800685a:	f04f 0800 	mov.w	r8, #0
 800685e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006862:	f104 0a1a 	add.w	sl, r4, #26
 8006866:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800686a:	1a9b      	subs	r3, r3, r2
 800686c:	eba3 0309 	sub.w	r3, r3, r9
 8006870:	4543      	cmp	r3, r8
 8006872:	f77f af79 	ble.w	8006768 <_printf_float+0x250>
 8006876:	2301      	movs	r3, #1
 8006878:	4652      	mov	r2, sl
 800687a:	4631      	mov	r1, r6
 800687c:	4628      	mov	r0, r5
 800687e:	47b8      	blx	r7
 8006880:	3001      	adds	r0, #1
 8006882:	f43f aeaa 	beq.w	80065da <_printf_float+0xc2>
 8006886:	f108 0801 	add.w	r8, r8, #1
 800688a:	e7ec      	b.n	8006866 <_printf_float+0x34e>
 800688c:	4613      	mov	r3, r2
 800688e:	4631      	mov	r1, r6
 8006890:	4642      	mov	r2, r8
 8006892:	4628      	mov	r0, r5
 8006894:	47b8      	blx	r7
 8006896:	3001      	adds	r0, #1
 8006898:	d1c0      	bne.n	800681c <_printf_float+0x304>
 800689a:	e69e      	b.n	80065da <_printf_float+0xc2>
 800689c:	2301      	movs	r3, #1
 800689e:	4631      	mov	r1, r6
 80068a0:	4628      	mov	r0, r5
 80068a2:	9205      	str	r2, [sp, #20]
 80068a4:	47b8      	blx	r7
 80068a6:	3001      	adds	r0, #1
 80068a8:	f43f ae97 	beq.w	80065da <_printf_float+0xc2>
 80068ac:	9a05      	ldr	r2, [sp, #20]
 80068ae:	f10b 0b01 	add.w	fp, fp, #1
 80068b2:	e7b9      	b.n	8006828 <_printf_float+0x310>
 80068b4:	ee18 3a10 	vmov	r3, s16
 80068b8:	4652      	mov	r2, sl
 80068ba:	4631      	mov	r1, r6
 80068bc:	4628      	mov	r0, r5
 80068be:	47b8      	blx	r7
 80068c0:	3001      	adds	r0, #1
 80068c2:	d1be      	bne.n	8006842 <_printf_float+0x32a>
 80068c4:	e689      	b.n	80065da <_printf_float+0xc2>
 80068c6:	9a05      	ldr	r2, [sp, #20]
 80068c8:	464b      	mov	r3, r9
 80068ca:	4442      	add	r2, r8
 80068cc:	4631      	mov	r1, r6
 80068ce:	4628      	mov	r0, r5
 80068d0:	47b8      	blx	r7
 80068d2:	3001      	adds	r0, #1
 80068d4:	d1c1      	bne.n	800685a <_printf_float+0x342>
 80068d6:	e680      	b.n	80065da <_printf_float+0xc2>
 80068d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80068da:	2a01      	cmp	r2, #1
 80068dc:	dc01      	bgt.n	80068e2 <_printf_float+0x3ca>
 80068de:	07db      	lsls	r3, r3, #31
 80068e0:	d538      	bpl.n	8006954 <_printf_float+0x43c>
 80068e2:	2301      	movs	r3, #1
 80068e4:	4642      	mov	r2, r8
 80068e6:	4631      	mov	r1, r6
 80068e8:	4628      	mov	r0, r5
 80068ea:	47b8      	blx	r7
 80068ec:	3001      	adds	r0, #1
 80068ee:	f43f ae74 	beq.w	80065da <_printf_float+0xc2>
 80068f2:	ee18 3a10 	vmov	r3, s16
 80068f6:	4652      	mov	r2, sl
 80068f8:	4631      	mov	r1, r6
 80068fa:	4628      	mov	r0, r5
 80068fc:	47b8      	blx	r7
 80068fe:	3001      	adds	r0, #1
 8006900:	f43f ae6b 	beq.w	80065da <_printf_float+0xc2>
 8006904:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006908:	2200      	movs	r2, #0
 800690a:	2300      	movs	r3, #0
 800690c:	f7fa f8dc 	bl	8000ac8 <__aeabi_dcmpeq>
 8006910:	b9d8      	cbnz	r0, 800694a <_printf_float+0x432>
 8006912:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006914:	f108 0201 	add.w	r2, r8, #1
 8006918:	3b01      	subs	r3, #1
 800691a:	4631      	mov	r1, r6
 800691c:	4628      	mov	r0, r5
 800691e:	47b8      	blx	r7
 8006920:	3001      	adds	r0, #1
 8006922:	d10e      	bne.n	8006942 <_printf_float+0x42a>
 8006924:	e659      	b.n	80065da <_printf_float+0xc2>
 8006926:	2301      	movs	r3, #1
 8006928:	4652      	mov	r2, sl
 800692a:	4631      	mov	r1, r6
 800692c:	4628      	mov	r0, r5
 800692e:	47b8      	blx	r7
 8006930:	3001      	adds	r0, #1
 8006932:	f43f ae52 	beq.w	80065da <_printf_float+0xc2>
 8006936:	f108 0801 	add.w	r8, r8, #1
 800693a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800693c:	3b01      	subs	r3, #1
 800693e:	4543      	cmp	r3, r8
 8006940:	dcf1      	bgt.n	8006926 <_printf_float+0x40e>
 8006942:	464b      	mov	r3, r9
 8006944:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006948:	e6dc      	b.n	8006704 <_printf_float+0x1ec>
 800694a:	f04f 0800 	mov.w	r8, #0
 800694e:	f104 0a1a 	add.w	sl, r4, #26
 8006952:	e7f2      	b.n	800693a <_printf_float+0x422>
 8006954:	2301      	movs	r3, #1
 8006956:	4642      	mov	r2, r8
 8006958:	e7df      	b.n	800691a <_printf_float+0x402>
 800695a:	2301      	movs	r3, #1
 800695c:	464a      	mov	r2, r9
 800695e:	4631      	mov	r1, r6
 8006960:	4628      	mov	r0, r5
 8006962:	47b8      	blx	r7
 8006964:	3001      	adds	r0, #1
 8006966:	f43f ae38 	beq.w	80065da <_printf_float+0xc2>
 800696a:	f108 0801 	add.w	r8, r8, #1
 800696e:	68e3      	ldr	r3, [r4, #12]
 8006970:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006972:	1a5b      	subs	r3, r3, r1
 8006974:	4543      	cmp	r3, r8
 8006976:	dcf0      	bgt.n	800695a <_printf_float+0x442>
 8006978:	e6fa      	b.n	8006770 <_printf_float+0x258>
 800697a:	f04f 0800 	mov.w	r8, #0
 800697e:	f104 0919 	add.w	r9, r4, #25
 8006982:	e7f4      	b.n	800696e <_printf_float+0x456>

08006984 <_printf_common>:
 8006984:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006988:	4616      	mov	r6, r2
 800698a:	4699      	mov	r9, r3
 800698c:	688a      	ldr	r2, [r1, #8]
 800698e:	690b      	ldr	r3, [r1, #16]
 8006990:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006994:	4293      	cmp	r3, r2
 8006996:	bfb8      	it	lt
 8006998:	4613      	movlt	r3, r2
 800699a:	6033      	str	r3, [r6, #0]
 800699c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80069a0:	4607      	mov	r7, r0
 80069a2:	460c      	mov	r4, r1
 80069a4:	b10a      	cbz	r2, 80069aa <_printf_common+0x26>
 80069a6:	3301      	adds	r3, #1
 80069a8:	6033      	str	r3, [r6, #0]
 80069aa:	6823      	ldr	r3, [r4, #0]
 80069ac:	0699      	lsls	r1, r3, #26
 80069ae:	bf42      	ittt	mi
 80069b0:	6833      	ldrmi	r3, [r6, #0]
 80069b2:	3302      	addmi	r3, #2
 80069b4:	6033      	strmi	r3, [r6, #0]
 80069b6:	6825      	ldr	r5, [r4, #0]
 80069b8:	f015 0506 	ands.w	r5, r5, #6
 80069bc:	d106      	bne.n	80069cc <_printf_common+0x48>
 80069be:	f104 0a19 	add.w	sl, r4, #25
 80069c2:	68e3      	ldr	r3, [r4, #12]
 80069c4:	6832      	ldr	r2, [r6, #0]
 80069c6:	1a9b      	subs	r3, r3, r2
 80069c8:	42ab      	cmp	r3, r5
 80069ca:	dc26      	bgt.n	8006a1a <_printf_common+0x96>
 80069cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80069d0:	1e13      	subs	r3, r2, #0
 80069d2:	6822      	ldr	r2, [r4, #0]
 80069d4:	bf18      	it	ne
 80069d6:	2301      	movne	r3, #1
 80069d8:	0692      	lsls	r2, r2, #26
 80069da:	d42b      	bmi.n	8006a34 <_printf_common+0xb0>
 80069dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80069e0:	4649      	mov	r1, r9
 80069e2:	4638      	mov	r0, r7
 80069e4:	47c0      	blx	r8
 80069e6:	3001      	adds	r0, #1
 80069e8:	d01e      	beq.n	8006a28 <_printf_common+0xa4>
 80069ea:	6823      	ldr	r3, [r4, #0]
 80069ec:	68e5      	ldr	r5, [r4, #12]
 80069ee:	6832      	ldr	r2, [r6, #0]
 80069f0:	f003 0306 	and.w	r3, r3, #6
 80069f4:	2b04      	cmp	r3, #4
 80069f6:	bf08      	it	eq
 80069f8:	1aad      	subeq	r5, r5, r2
 80069fa:	68a3      	ldr	r3, [r4, #8]
 80069fc:	6922      	ldr	r2, [r4, #16]
 80069fe:	bf0c      	ite	eq
 8006a00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a04:	2500      	movne	r5, #0
 8006a06:	4293      	cmp	r3, r2
 8006a08:	bfc4      	itt	gt
 8006a0a:	1a9b      	subgt	r3, r3, r2
 8006a0c:	18ed      	addgt	r5, r5, r3
 8006a0e:	2600      	movs	r6, #0
 8006a10:	341a      	adds	r4, #26
 8006a12:	42b5      	cmp	r5, r6
 8006a14:	d11a      	bne.n	8006a4c <_printf_common+0xc8>
 8006a16:	2000      	movs	r0, #0
 8006a18:	e008      	b.n	8006a2c <_printf_common+0xa8>
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	4652      	mov	r2, sl
 8006a1e:	4649      	mov	r1, r9
 8006a20:	4638      	mov	r0, r7
 8006a22:	47c0      	blx	r8
 8006a24:	3001      	adds	r0, #1
 8006a26:	d103      	bne.n	8006a30 <_printf_common+0xac>
 8006a28:	f04f 30ff 	mov.w	r0, #4294967295
 8006a2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a30:	3501      	adds	r5, #1
 8006a32:	e7c6      	b.n	80069c2 <_printf_common+0x3e>
 8006a34:	18e1      	adds	r1, r4, r3
 8006a36:	1c5a      	adds	r2, r3, #1
 8006a38:	2030      	movs	r0, #48	; 0x30
 8006a3a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006a3e:	4422      	add	r2, r4
 8006a40:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006a44:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006a48:	3302      	adds	r3, #2
 8006a4a:	e7c7      	b.n	80069dc <_printf_common+0x58>
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	4622      	mov	r2, r4
 8006a50:	4649      	mov	r1, r9
 8006a52:	4638      	mov	r0, r7
 8006a54:	47c0      	blx	r8
 8006a56:	3001      	adds	r0, #1
 8006a58:	d0e6      	beq.n	8006a28 <_printf_common+0xa4>
 8006a5a:	3601      	adds	r6, #1
 8006a5c:	e7d9      	b.n	8006a12 <_printf_common+0x8e>
	...

08006a60 <_printf_i>:
 8006a60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a64:	7e0f      	ldrb	r7, [r1, #24]
 8006a66:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006a68:	2f78      	cmp	r7, #120	; 0x78
 8006a6a:	4691      	mov	r9, r2
 8006a6c:	4680      	mov	r8, r0
 8006a6e:	460c      	mov	r4, r1
 8006a70:	469a      	mov	sl, r3
 8006a72:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006a76:	d807      	bhi.n	8006a88 <_printf_i+0x28>
 8006a78:	2f62      	cmp	r7, #98	; 0x62
 8006a7a:	d80a      	bhi.n	8006a92 <_printf_i+0x32>
 8006a7c:	2f00      	cmp	r7, #0
 8006a7e:	f000 80d8 	beq.w	8006c32 <_printf_i+0x1d2>
 8006a82:	2f58      	cmp	r7, #88	; 0x58
 8006a84:	f000 80a3 	beq.w	8006bce <_printf_i+0x16e>
 8006a88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006a90:	e03a      	b.n	8006b08 <_printf_i+0xa8>
 8006a92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006a96:	2b15      	cmp	r3, #21
 8006a98:	d8f6      	bhi.n	8006a88 <_printf_i+0x28>
 8006a9a:	a101      	add	r1, pc, #4	; (adr r1, 8006aa0 <_printf_i+0x40>)
 8006a9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006aa0:	08006af9 	.word	0x08006af9
 8006aa4:	08006b0d 	.word	0x08006b0d
 8006aa8:	08006a89 	.word	0x08006a89
 8006aac:	08006a89 	.word	0x08006a89
 8006ab0:	08006a89 	.word	0x08006a89
 8006ab4:	08006a89 	.word	0x08006a89
 8006ab8:	08006b0d 	.word	0x08006b0d
 8006abc:	08006a89 	.word	0x08006a89
 8006ac0:	08006a89 	.word	0x08006a89
 8006ac4:	08006a89 	.word	0x08006a89
 8006ac8:	08006a89 	.word	0x08006a89
 8006acc:	08006c19 	.word	0x08006c19
 8006ad0:	08006b3d 	.word	0x08006b3d
 8006ad4:	08006bfb 	.word	0x08006bfb
 8006ad8:	08006a89 	.word	0x08006a89
 8006adc:	08006a89 	.word	0x08006a89
 8006ae0:	08006c3b 	.word	0x08006c3b
 8006ae4:	08006a89 	.word	0x08006a89
 8006ae8:	08006b3d 	.word	0x08006b3d
 8006aec:	08006a89 	.word	0x08006a89
 8006af0:	08006a89 	.word	0x08006a89
 8006af4:	08006c03 	.word	0x08006c03
 8006af8:	682b      	ldr	r3, [r5, #0]
 8006afa:	1d1a      	adds	r2, r3, #4
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	602a      	str	r2, [r5, #0]
 8006b00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006b08:	2301      	movs	r3, #1
 8006b0a:	e0a3      	b.n	8006c54 <_printf_i+0x1f4>
 8006b0c:	6820      	ldr	r0, [r4, #0]
 8006b0e:	6829      	ldr	r1, [r5, #0]
 8006b10:	0606      	lsls	r6, r0, #24
 8006b12:	f101 0304 	add.w	r3, r1, #4
 8006b16:	d50a      	bpl.n	8006b2e <_printf_i+0xce>
 8006b18:	680e      	ldr	r6, [r1, #0]
 8006b1a:	602b      	str	r3, [r5, #0]
 8006b1c:	2e00      	cmp	r6, #0
 8006b1e:	da03      	bge.n	8006b28 <_printf_i+0xc8>
 8006b20:	232d      	movs	r3, #45	; 0x2d
 8006b22:	4276      	negs	r6, r6
 8006b24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b28:	485e      	ldr	r0, [pc, #376]	; (8006ca4 <_printf_i+0x244>)
 8006b2a:	230a      	movs	r3, #10
 8006b2c:	e019      	b.n	8006b62 <_printf_i+0x102>
 8006b2e:	680e      	ldr	r6, [r1, #0]
 8006b30:	602b      	str	r3, [r5, #0]
 8006b32:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006b36:	bf18      	it	ne
 8006b38:	b236      	sxthne	r6, r6
 8006b3a:	e7ef      	b.n	8006b1c <_printf_i+0xbc>
 8006b3c:	682b      	ldr	r3, [r5, #0]
 8006b3e:	6820      	ldr	r0, [r4, #0]
 8006b40:	1d19      	adds	r1, r3, #4
 8006b42:	6029      	str	r1, [r5, #0]
 8006b44:	0601      	lsls	r1, r0, #24
 8006b46:	d501      	bpl.n	8006b4c <_printf_i+0xec>
 8006b48:	681e      	ldr	r6, [r3, #0]
 8006b4a:	e002      	b.n	8006b52 <_printf_i+0xf2>
 8006b4c:	0646      	lsls	r6, r0, #25
 8006b4e:	d5fb      	bpl.n	8006b48 <_printf_i+0xe8>
 8006b50:	881e      	ldrh	r6, [r3, #0]
 8006b52:	4854      	ldr	r0, [pc, #336]	; (8006ca4 <_printf_i+0x244>)
 8006b54:	2f6f      	cmp	r7, #111	; 0x6f
 8006b56:	bf0c      	ite	eq
 8006b58:	2308      	moveq	r3, #8
 8006b5a:	230a      	movne	r3, #10
 8006b5c:	2100      	movs	r1, #0
 8006b5e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006b62:	6865      	ldr	r5, [r4, #4]
 8006b64:	60a5      	str	r5, [r4, #8]
 8006b66:	2d00      	cmp	r5, #0
 8006b68:	bfa2      	ittt	ge
 8006b6a:	6821      	ldrge	r1, [r4, #0]
 8006b6c:	f021 0104 	bicge.w	r1, r1, #4
 8006b70:	6021      	strge	r1, [r4, #0]
 8006b72:	b90e      	cbnz	r6, 8006b78 <_printf_i+0x118>
 8006b74:	2d00      	cmp	r5, #0
 8006b76:	d04d      	beq.n	8006c14 <_printf_i+0x1b4>
 8006b78:	4615      	mov	r5, r2
 8006b7a:	fbb6 f1f3 	udiv	r1, r6, r3
 8006b7e:	fb03 6711 	mls	r7, r3, r1, r6
 8006b82:	5dc7      	ldrb	r7, [r0, r7]
 8006b84:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006b88:	4637      	mov	r7, r6
 8006b8a:	42bb      	cmp	r3, r7
 8006b8c:	460e      	mov	r6, r1
 8006b8e:	d9f4      	bls.n	8006b7a <_printf_i+0x11a>
 8006b90:	2b08      	cmp	r3, #8
 8006b92:	d10b      	bne.n	8006bac <_printf_i+0x14c>
 8006b94:	6823      	ldr	r3, [r4, #0]
 8006b96:	07de      	lsls	r6, r3, #31
 8006b98:	d508      	bpl.n	8006bac <_printf_i+0x14c>
 8006b9a:	6923      	ldr	r3, [r4, #16]
 8006b9c:	6861      	ldr	r1, [r4, #4]
 8006b9e:	4299      	cmp	r1, r3
 8006ba0:	bfde      	ittt	le
 8006ba2:	2330      	movle	r3, #48	; 0x30
 8006ba4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006ba8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006bac:	1b52      	subs	r2, r2, r5
 8006bae:	6122      	str	r2, [r4, #16]
 8006bb0:	f8cd a000 	str.w	sl, [sp]
 8006bb4:	464b      	mov	r3, r9
 8006bb6:	aa03      	add	r2, sp, #12
 8006bb8:	4621      	mov	r1, r4
 8006bba:	4640      	mov	r0, r8
 8006bbc:	f7ff fee2 	bl	8006984 <_printf_common>
 8006bc0:	3001      	adds	r0, #1
 8006bc2:	d14c      	bne.n	8006c5e <_printf_i+0x1fe>
 8006bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8006bc8:	b004      	add	sp, #16
 8006bca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bce:	4835      	ldr	r0, [pc, #212]	; (8006ca4 <_printf_i+0x244>)
 8006bd0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006bd4:	6829      	ldr	r1, [r5, #0]
 8006bd6:	6823      	ldr	r3, [r4, #0]
 8006bd8:	f851 6b04 	ldr.w	r6, [r1], #4
 8006bdc:	6029      	str	r1, [r5, #0]
 8006bde:	061d      	lsls	r5, r3, #24
 8006be0:	d514      	bpl.n	8006c0c <_printf_i+0x1ac>
 8006be2:	07df      	lsls	r7, r3, #31
 8006be4:	bf44      	itt	mi
 8006be6:	f043 0320 	orrmi.w	r3, r3, #32
 8006bea:	6023      	strmi	r3, [r4, #0]
 8006bec:	b91e      	cbnz	r6, 8006bf6 <_printf_i+0x196>
 8006bee:	6823      	ldr	r3, [r4, #0]
 8006bf0:	f023 0320 	bic.w	r3, r3, #32
 8006bf4:	6023      	str	r3, [r4, #0]
 8006bf6:	2310      	movs	r3, #16
 8006bf8:	e7b0      	b.n	8006b5c <_printf_i+0xfc>
 8006bfa:	6823      	ldr	r3, [r4, #0]
 8006bfc:	f043 0320 	orr.w	r3, r3, #32
 8006c00:	6023      	str	r3, [r4, #0]
 8006c02:	2378      	movs	r3, #120	; 0x78
 8006c04:	4828      	ldr	r0, [pc, #160]	; (8006ca8 <_printf_i+0x248>)
 8006c06:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006c0a:	e7e3      	b.n	8006bd4 <_printf_i+0x174>
 8006c0c:	0659      	lsls	r1, r3, #25
 8006c0e:	bf48      	it	mi
 8006c10:	b2b6      	uxthmi	r6, r6
 8006c12:	e7e6      	b.n	8006be2 <_printf_i+0x182>
 8006c14:	4615      	mov	r5, r2
 8006c16:	e7bb      	b.n	8006b90 <_printf_i+0x130>
 8006c18:	682b      	ldr	r3, [r5, #0]
 8006c1a:	6826      	ldr	r6, [r4, #0]
 8006c1c:	6961      	ldr	r1, [r4, #20]
 8006c1e:	1d18      	adds	r0, r3, #4
 8006c20:	6028      	str	r0, [r5, #0]
 8006c22:	0635      	lsls	r5, r6, #24
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	d501      	bpl.n	8006c2c <_printf_i+0x1cc>
 8006c28:	6019      	str	r1, [r3, #0]
 8006c2a:	e002      	b.n	8006c32 <_printf_i+0x1d2>
 8006c2c:	0670      	lsls	r0, r6, #25
 8006c2e:	d5fb      	bpl.n	8006c28 <_printf_i+0x1c8>
 8006c30:	8019      	strh	r1, [r3, #0]
 8006c32:	2300      	movs	r3, #0
 8006c34:	6123      	str	r3, [r4, #16]
 8006c36:	4615      	mov	r5, r2
 8006c38:	e7ba      	b.n	8006bb0 <_printf_i+0x150>
 8006c3a:	682b      	ldr	r3, [r5, #0]
 8006c3c:	1d1a      	adds	r2, r3, #4
 8006c3e:	602a      	str	r2, [r5, #0]
 8006c40:	681d      	ldr	r5, [r3, #0]
 8006c42:	6862      	ldr	r2, [r4, #4]
 8006c44:	2100      	movs	r1, #0
 8006c46:	4628      	mov	r0, r5
 8006c48:	f7f9 faca 	bl	80001e0 <memchr>
 8006c4c:	b108      	cbz	r0, 8006c52 <_printf_i+0x1f2>
 8006c4e:	1b40      	subs	r0, r0, r5
 8006c50:	6060      	str	r0, [r4, #4]
 8006c52:	6863      	ldr	r3, [r4, #4]
 8006c54:	6123      	str	r3, [r4, #16]
 8006c56:	2300      	movs	r3, #0
 8006c58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c5c:	e7a8      	b.n	8006bb0 <_printf_i+0x150>
 8006c5e:	6923      	ldr	r3, [r4, #16]
 8006c60:	462a      	mov	r2, r5
 8006c62:	4649      	mov	r1, r9
 8006c64:	4640      	mov	r0, r8
 8006c66:	47d0      	blx	sl
 8006c68:	3001      	adds	r0, #1
 8006c6a:	d0ab      	beq.n	8006bc4 <_printf_i+0x164>
 8006c6c:	6823      	ldr	r3, [r4, #0]
 8006c6e:	079b      	lsls	r3, r3, #30
 8006c70:	d413      	bmi.n	8006c9a <_printf_i+0x23a>
 8006c72:	68e0      	ldr	r0, [r4, #12]
 8006c74:	9b03      	ldr	r3, [sp, #12]
 8006c76:	4298      	cmp	r0, r3
 8006c78:	bfb8      	it	lt
 8006c7a:	4618      	movlt	r0, r3
 8006c7c:	e7a4      	b.n	8006bc8 <_printf_i+0x168>
 8006c7e:	2301      	movs	r3, #1
 8006c80:	4632      	mov	r2, r6
 8006c82:	4649      	mov	r1, r9
 8006c84:	4640      	mov	r0, r8
 8006c86:	47d0      	blx	sl
 8006c88:	3001      	adds	r0, #1
 8006c8a:	d09b      	beq.n	8006bc4 <_printf_i+0x164>
 8006c8c:	3501      	adds	r5, #1
 8006c8e:	68e3      	ldr	r3, [r4, #12]
 8006c90:	9903      	ldr	r1, [sp, #12]
 8006c92:	1a5b      	subs	r3, r3, r1
 8006c94:	42ab      	cmp	r3, r5
 8006c96:	dcf2      	bgt.n	8006c7e <_printf_i+0x21e>
 8006c98:	e7eb      	b.n	8006c72 <_printf_i+0x212>
 8006c9a:	2500      	movs	r5, #0
 8006c9c:	f104 0619 	add.w	r6, r4, #25
 8006ca0:	e7f5      	b.n	8006c8e <_printf_i+0x22e>
 8006ca2:	bf00      	nop
 8006ca4:	0800b4c6 	.word	0x0800b4c6
 8006ca8:	0800b4d7 	.word	0x0800b4d7

08006cac <_scanf_float>:
 8006cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cb0:	b087      	sub	sp, #28
 8006cb2:	4617      	mov	r7, r2
 8006cb4:	9303      	str	r3, [sp, #12]
 8006cb6:	688b      	ldr	r3, [r1, #8]
 8006cb8:	1e5a      	subs	r2, r3, #1
 8006cba:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006cbe:	bf83      	ittte	hi
 8006cc0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006cc4:	195b      	addhi	r3, r3, r5
 8006cc6:	9302      	strhi	r3, [sp, #8]
 8006cc8:	2300      	movls	r3, #0
 8006cca:	bf86      	itte	hi
 8006ccc:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006cd0:	608b      	strhi	r3, [r1, #8]
 8006cd2:	9302      	strls	r3, [sp, #8]
 8006cd4:	680b      	ldr	r3, [r1, #0]
 8006cd6:	468b      	mov	fp, r1
 8006cd8:	2500      	movs	r5, #0
 8006cda:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006cde:	f84b 3b1c 	str.w	r3, [fp], #28
 8006ce2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006ce6:	4680      	mov	r8, r0
 8006ce8:	460c      	mov	r4, r1
 8006cea:	465e      	mov	r6, fp
 8006cec:	46aa      	mov	sl, r5
 8006cee:	46a9      	mov	r9, r5
 8006cf0:	9501      	str	r5, [sp, #4]
 8006cf2:	68a2      	ldr	r2, [r4, #8]
 8006cf4:	b152      	cbz	r2, 8006d0c <_scanf_float+0x60>
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	781b      	ldrb	r3, [r3, #0]
 8006cfa:	2b4e      	cmp	r3, #78	; 0x4e
 8006cfc:	d864      	bhi.n	8006dc8 <_scanf_float+0x11c>
 8006cfe:	2b40      	cmp	r3, #64	; 0x40
 8006d00:	d83c      	bhi.n	8006d7c <_scanf_float+0xd0>
 8006d02:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006d06:	b2c8      	uxtb	r0, r1
 8006d08:	280e      	cmp	r0, #14
 8006d0a:	d93a      	bls.n	8006d82 <_scanf_float+0xd6>
 8006d0c:	f1b9 0f00 	cmp.w	r9, #0
 8006d10:	d003      	beq.n	8006d1a <_scanf_float+0x6e>
 8006d12:	6823      	ldr	r3, [r4, #0]
 8006d14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d18:	6023      	str	r3, [r4, #0]
 8006d1a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006d1e:	f1ba 0f01 	cmp.w	sl, #1
 8006d22:	f200 8113 	bhi.w	8006f4c <_scanf_float+0x2a0>
 8006d26:	455e      	cmp	r6, fp
 8006d28:	f200 8105 	bhi.w	8006f36 <_scanf_float+0x28a>
 8006d2c:	2501      	movs	r5, #1
 8006d2e:	4628      	mov	r0, r5
 8006d30:	b007      	add	sp, #28
 8006d32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d36:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006d3a:	2a0d      	cmp	r2, #13
 8006d3c:	d8e6      	bhi.n	8006d0c <_scanf_float+0x60>
 8006d3e:	a101      	add	r1, pc, #4	; (adr r1, 8006d44 <_scanf_float+0x98>)
 8006d40:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006d44:	08006e83 	.word	0x08006e83
 8006d48:	08006d0d 	.word	0x08006d0d
 8006d4c:	08006d0d 	.word	0x08006d0d
 8006d50:	08006d0d 	.word	0x08006d0d
 8006d54:	08006ee3 	.word	0x08006ee3
 8006d58:	08006ebb 	.word	0x08006ebb
 8006d5c:	08006d0d 	.word	0x08006d0d
 8006d60:	08006d0d 	.word	0x08006d0d
 8006d64:	08006e91 	.word	0x08006e91
 8006d68:	08006d0d 	.word	0x08006d0d
 8006d6c:	08006d0d 	.word	0x08006d0d
 8006d70:	08006d0d 	.word	0x08006d0d
 8006d74:	08006d0d 	.word	0x08006d0d
 8006d78:	08006e49 	.word	0x08006e49
 8006d7c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006d80:	e7db      	b.n	8006d3a <_scanf_float+0x8e>
 8006d82:	290e      	cmp	r1, #14
 8006d84:	d8c2      	bhi.n	8006d0c <_scanf_float+0x60>
 8006d86:	a001      	add	r0, pc, #4	; (adr r0, 8006d8c <_scanf_float+0xe0>)
 8006d88:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006d8c:	08006e3b 	.word	0x08006e3b
 8006d90:	08006d0d 	.word	0x08006d0d
 8006d94:	08006e3b 	.word	0x08006e3b
 8006d98:	08006ecf 	.word	0x08006ecf
 8006d9c:	08006d0d 	.word	0x08006d0d
 8006da0:	08006de9 	.word	0x08006de9
 8006da4:	08006e25 	.word	0x08006e25
 8006da8:	08006e25 	.word	0x08006e25
 8006dac:	08006e25 	.word	0x08006e25
 8006db0:	08006e25 	.word	0x08006e25
 8006db4:	08006e25 	.word	0x08006e25
 8006db8:	08006e25 	.word	0x08006e25
 8006dbc:	08006e25 	.word	0x08006e25
 8006dc0:	08006e25 	.word	0x08006e25
 8006dc4:	08006e25 	.word	0x08006e25
 8006dc8:	2b6e      	cmp	r3, #110	; 0x6e
 8006dca:	d809      	bhi.n	8006de0 <_scanf_float+0x134>
 8006dcc:	2b60      	cmp	r3, #96	; 0x60
 8006dce:	d8b2      	bhi.n	8006d36 <_scanf_float+0x8a>
 8006dd0:	2b54      	cmp	r3, #84	; 0x54
 8006dd2:	d077      	beq.n	8006ec4 <_scanf_float+0x218>
 8006dd4:	2b59      	cmp	r3, #89	; 0x59
 8006dd6:	d199      	bne.n	8006d0c <_scanf_float+0x60>
 8006dd8:	2d07      	cmp	r5, #7
 8006dda:	d197      	bne.n	8006d0c <_scanf_float+0x60>
 8006ddc:	2508      	movs	r5, #8
 8006dde:	e029      	b.n	8006e34 <_scanf_float+0x188>
 8006de0:	2b74      	cmp	r3, #116	; 0x74
 8006de2:	d06f      	beq.n	8006ec4 <_scanf_float+0x218>
 8006de4:	2b79      	cmp	r3, #121	; 0x79
 8006de6:	e7f6      	b.n	8006dd6 <_scanf_float+0x12a>
 8006de8:	6821      	ldr	r1, [r4, #0]
 8006dea:	05c8      	lsls	r0, r1, #23
 8006dec:	d51a      	bpl.n	8006e24 <_scanf_float+0x178>
 8006dee:	9b02      	ldr	r3, [sp, #8]
 8006df0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006df4:	6021      	str	r1, [r4, #0]
 8006df6:	f109 0901 	add.w	r9, r9, #1
 8006dfa:	b11b      	cbz	r3, 8006e04 <_scanf_float+0x158>
 8006dfc:	3b01      	subs	r3, #1
 8006dfe:	3201      	adds	r2, #1
 8006e00:	9302      	str	r3, [sp, #8]
 8006e02:	60a2      	str	r2, [r4, #8]
 8006e04:	68a3      	ldr	r3, [r4, #8]
 8006e06:	3b01      	subs	r3, #1
 8006e08:	60a3      	str	r3, [r4, #8]
 8006e0a:	6923      	ldr	r3, [r4, #16]
 8006e0c:	3301      	adds	r3, #1
 8006e0e:	6123      	str	r3, [r4, #16]
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	3b01      	subs	r3, #1
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	607b      	str	r3, [r7, #4]
 8006e18:	f340 8084 	ble.w	8006f24 <_scanf_float+0x278>
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	3301      	adds	r3, #1
 8006e20:	603b      	str	r3, [r7, #0]
 8006e22:	e766      	b.n	8006cf2 <_scanf_float+0x46>
 8006e24:	eb1a 0f05 	cmn.w	sl, r5
 8006e28:	f47f af70 	bne.w	8006d0c <_scanf_float+0x60>
 8006e2c:	6822      	ldr	r2, [r4, #0]
 8006e2e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006e32:	6022      	str	r2, [r4, #0]
 8006e34:	f806 3b01 	strb.w	r3, [r6], #1
 8006e38:	e7e4      	b.n	8006e04 <_scanf_float+0x158>
 8006e3a:	6822      	ldr	r2, [r4, #0]
 8006e3c:	0610      	lsls	r0, r2, #24
 8006e3e:	f57f af65 	bpl.w	8006d0c <_scanf_float+0x60>
 8006e42:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006e46:	e7f4      	b.n	8006e32 <_scanf_float+0x186>
 8006e48:	f1ba 0f00 	cmp.w	sl, #0
 8006e4c:	d10e      	bne.n	8006e6c <_scanf_float+0x1c0>
 8006e4e:	f1b9 0f00 	cmp.w	r9, #0
 8006e52:	d10e      	bne.n	8006e72 <_scanf_float+0x1c6>
 8006e54:	6822      	ldr	r2, [r4, #0]
 8006e56:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006e5a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006e5e:	d108      	bne.n	8006e72 <_scanf_float+0x1c6>
 8006e60:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006e64:	6022      	str	r2, [r4, #0]
 8006e66:	f04f 0a01 	mov.w	sl, #1
 8006e6a:	e7e3      	b.n	8006e34 <_scanf_float+0x188>
 8006e6c:	f1ba 0f02 	cmp.w	sl, #2
 8006e70:	d055      	beq.n	8006f1e <_scanf_float+0x272>
 8006e72:	2d01      	cmp	r5, #1
 8006e74:	d002      	beq.n	8006e7c <_scanf_float+0x1d0>
 8006e76:	2d04      	cmp	r5, #4
 8006e78:	f47f af48 	bne.w	8006d0c <_scanf_float+0x60>
 8006e7c:	3501      	adds	r5, #1
 8006e7e:	b2ed      	uxtb	r5, r5
 8006e80:	e7d8      	b.n	8006e34 <_scanf_float+0x188>
 8006e82:	f1ba 0f01 	cmp.w	sl, #1
 8006e86:	f47f af41 	bne.w	8006d0c <_scanf_float+0x60>
 8006e8a:	f04f 0a02 	mov.w	sl, #2
 8006e8e:	e7d1      	b.n	8006e34 <_scanf_float+0x188>
 8006e90:	b97d      	cbnz	r5, 8006eb2 <_scanf_float+0x206>
 8006e92:	f1b9 0f00 	cmp.w	r9, #0
 8006e96:	f47f af3c 	bne.w	8006d12 <_scanf_float+0x66>
 8006e9a:	6822      	ldr	r2, [r4, #0]
 8006e9c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006ea0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006ea4:	f47f af39 	bne.w	8006d1a <_scanf_float+0x6e>
 8006ea8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006eac:	6022      	str	r2, [r4, #0]
 8006eae:	2501      	movs	r5, #1
 8006eb0:	e7c0      	b.n	8006e34 <_scanf_float+0x188>
 8006eb2:	2d03      	cmp	r5, #3
 8006eb4:	d0e2      	beq.n	8006e7c <_scanf_float+0x1d0>
 8006eb6:	2d05      	cmp	r5, #5
 8006eb8:	e7de      	b.n	8006e78 <_scanf_float+0x1cc>
 8006eba:	2d02      	cmp	r5, #2
 8006ebc:	f47f af26 	bne.w	8006d0c <_scanf_float+0x60>
 8006ec0:	2503      	movs	r5, #3
 8006ec2:	e7b7      	b.n	8006e34 <_scanf_float+0x188>
 8006ec4:	2d06      	cmp	r5, #6
 8006ec6:	f47f af21 	bne.w	8006d0c <_scanf_float+0x60>
 8006eca:	2507      	movs	r5, #7
 8006ecc:	e7b2      	b.n	8006e34 <_scanf_float+0x188>
 8006ece:	6822      	ldr	r2, [r4, #0]
 8006ed0:	0591      	lsls	r1, r2, #22
 8006ed2:	f57f af1b 	bpl.w	8006d0c <_scanf_float+0x60>
 8006ed6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006eda:	6022      	str	r2, [r4, #0]
 8006edc:	f8cd 9004 	str.w	r9, [sp, #4]
 8006ee0:	e7a8      	b.n	8006e34 <_scanf_float+0x188>
 8006ee2:	6822      	ldr	r2, [r4, #0]
 8006ee4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006ee8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006eec:	d006      	beq.n	8006efc <_scanf_float+0x250>
 8006eee:	0550      	lsls	r0, r2, #21
 8006ef0:	f57f af0c 	bpl.w	8006d0c <_scanf_float+0x60>
 8006ef4:	f1b9 0f00 	cmp.w	r9, #0
 8006ef8:	f43f af0f 	beq.w	8006d1a <_scanf_float+0x6e>
 8006efc:	0591      	lsls	r1, r2, #22
 8006efe:	bf58      	it	pl
 8006f00:	9901      	ldrpl	r1, [sp, #4]
 8006f02:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006f06:	bf58      	it	pl
 8006f08:	eba9 0101 	subpl.w	r1, r9, r1
 8006f0c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006f10:	bf58      	it	pl
 8006f12:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006f16:	6022      	str	r2, [r4, #0]
 8006f18:	f04f 0900 	mov.w	r9, #0
 8006f1c:	e78a      	b.n	8006e34 <_scanf_float+0x188>
 8006f1e:	f04f 0a03 	mov.w	sl, #3
 8006f22:	e787      	b.n	8006e34 <_scanf_float+0x188>
 8006f24:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006f28:	4639      	mov	r1, r7
 8006f2a:	4640      	mov	r0, r8
 8006f2c:	4798      	blx	r3
 8006f2e:	2800      	cmp	r0, #0
 8006f30:	f43f aedf 	beq.w	8006cf2 <_scanf_float+0x46>
 8006f34:	e6ea      	b.n	8006d0c <_scanf_float+0x60>
 8006f36:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006f3a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006f3e:	463a      	mov	r2, r7
 8006f40:	4640      	mov	r0, r8
 8006f42:	4798      	blx	r3
 8006f44:	6923      	ldr	r3, [r4, #16]
 8006f46:	3b01      	subs	r3, #1
 8006f48:	6123      	str	r3, [r4, #16]
 8006f4a:	e6ec      	b.n	8006d26 <_scanf_float+0x7a>
 8006f4c:	1e6b      	subs	r3, r5, #1
 8006f4e:	2b06      	cmp	r3, #6
 8006f50:	d825      	bhi.n	8006f9e <_scanf_float+0x2f2>
 8006f52:	2d02      	cmp	r5, #2
 8006f54:	d836      	bhi.n	8006fc4 <_scanf_float+0x318>
 8006f56:	455e      	cmp	r6, fp
 8006f58:	f67f aee8 	bls.w	8006d2c <_scanf_float+0x80>
 8006f5c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006f60:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006f64:	463a      	mov	r2, r7
 8006f66:	4640      	mov	r0, r8
 8006f68:	4798      	blx	r3
 8006f6a:	6923      	ldr	r3, [r4, #16]
 8006f6c:	3b01      	subs	r3, #1
 8006f6e:	6123      	str	r3, [r4, #16]
 8006f70:	e7f1      	b.n	8006f56 <_scanf_float+0x2aa>
 8006f72:	9802      	ldr	r0, [sp, #8]
 8006f74:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006f78:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006f7c:	9002      	str	r0, [sp, #8]
 8006f7e:	463a      	mov	r2, r7
 8006f80:	4640      	mov	r0, r8
 8006f82:	4798      	blx	r3
 8006f84:	6923      	ldr	r3, [r4, #16]
 8006f86:	3b01      	subs	r3, #1
 8006f88:	6123      	str	r3, [r4, #16]
 8006f8a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006f8e:	fa5f fa8a 	uxtb.w	sl, sl
 8006f92:	f1ba 0f02 	cmp.w	sl, #2
 8006f96:	d1ec      	bne.n	8006f72 <_scanf_float+0x2c6>
 8006f98:	3d03      	subs	r5, #3
 8006f9a:	b2ed      	uxtb	r5, r5
 8006f9c:	1b76      	subs	r6, r6, r5
 8006f9e:	6823      	ldr	r3, [r4, #0]
 8006fa0:	05da      	lsls	r2, r3, #23
 8006fa2:	d52f      	bpl.n	8007004 <_scanf_float+0x358>
 8006fa4:	055b      	lsls	r3, r3, #21
 8006fa6:	d510      	bpl.n	8006fca <_scanf_float+0x31e>
 8006fa8:	455e      	cmp	r6, fp
 8006faa:	f67f aebf 	bls.w	8006d2c <_scanf_float+0x80>
 8006fae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006fb2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006fb6:	463a      	mov	r2, r7
 8006fb8:	4640      	mov	r0, r8
 8006fba:	4798      	blx	r3
 8006fbc:	6923      	ldr	r3, [r4, #16]
 8006fbe:	3b01      	subs	r3, #1
 8006fc0:	6123      	str	r3, [r4, #16]
 8006fc2:	e7f1      	b.n	8006fa8 <_scanf_float+0x2fc>
 8006fc4:	46aa      	mov	sl, r5
 8006fc6:	9602      	str	r6, [sp, #8]
 8006fc8:	e7df      	b.n	8006f8a <_scanf_float+0x2de>
 8006fca:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006fce:	6923      	ldr	r3, [r4, #16]
 8006fd0:	2965      	cmp	r1, #101	; 0x65
 8006fd2:	f103 33ff 	add.w	r3, r3, #4294967295
 8006fd6:	f106 35ff 	add.w	r5, r6, #4294967295
 8006fda:	6123      	str	r3, [r4, #16]
 8006fdc:	d00c      	beq.n	8006ff8 <_scanf_float+0x34c>
 8006fde:	2945      	cmp	r1, #69	; 0x45
 8006fe0:	d00a      	beq.n	8006ff8 <_scanf_float+0x34c>
 8006fe2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006fe6:	463a      	mov	r2, r7
 8006fe8:	4640      	mov	r0, r8
 8006fea:	4798      	blx	r3
 8006fec:	6923      	ldr	r3, [r4, #16]
 8006fee:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006ff2:	3b01      	subs	r3, #1
 8006ff4:	1eb5      	subs	r5, r6, #2
 8006ff6:	6123      	str	r3, [r4, #16]
 8006ff8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006ffc:	463a      	mov	r2, r7
 8006ffe:	4640      	mov	r0, r8
 8007000:	4798      	blx	r3
 8007002:	462e      	mov	r6, r5
 8007004:	6825      	ldr	r5, [r4, #0]
 8007006:	f015 0510 	ands.w	r5, r5, #16
 800700a:	d159      	bne.n	80070c0 <_scanf_float+0x414>
 800700c:	7035      	strb	r5, [r6, #0]
 800700e:	6823      	ldr	r3, [r4, #0]
 8007010:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007014:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007018:	d11b      	bne.n	8007052 <_scanf_float+0x3a6>
 800701a:	9b01      	ldr	r3, [sp, #4]
 800701c:	454b      	cmp	r3, r9
 800701e:	eba3 0209 	sub.w	r2, r3, r9
 8007022:	d123      	bne.n	800706c <_scanf_float+0x3c0>
 8007024:	2200      	movs	r2, #0
 8007026:	4659      	mov	r1, fp
 8007028:	4640      	mov	r0, r8
 800702a:	f000 fe97 	bl	8007d5c <_strtod_r>
 800702e:	6822      	ldr	r2, [r4, #0]
 8007030:	9b03      	ldr	r3, [sp, #12]
 8007032:	f012 0f02 	tst.w	r2, #2
 8007036:	ec57 6b10 	vmov	r6, r7, d0
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	d021      	beq.n	8007082 <_scanf_float+0x3d6>
 800703e:	9903      	ldr	r1, [sp, #12]
 8007040:	1d1a      	adds	r2, r3, #4
 8007042:	600a      	str	r2, [r1, #0]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	e9c3 6700 	strd	r6, r7, [r3]
 800704a:	68e3      	ldr	r3, [r4, #12]
 800704c:	3301      	adds	r3, #1
 800704e:	60e3      	str	r3, [r4, #12]
 8007050:	e66d      	b.n	8006d2e <_scanf_float+0x82>
 8007052:	9b04      	ldr	r3, [sp, #16]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d0e5      	beq.n	8007024 <_scanf_float+0x378>
 8007058:	9905      	ldr	r1, [sp, #20]
 800705a:	230a      	movs	r3, #10
 800705c:	462a      	mov	r2, r5
 800705e:	3101      	adds	r1, #1
 8007060:	4640      	mov	r0, r8
 8007062:	f000 ff03 	bl	8007e6c <_strtol_r>
 8007066:	9b04      	ldr	r3, [sp, #16]
 8007068:	9e05      	ldr	r6, [sp, #20]
 800706a:	1ac2      	subs	r2, r0, r3
 800706c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007070:	429e      	cmp	r6, r3
 8007072:	bf28      	it	cs
 8007074:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007078:	4912      	ldr	r1, [pc, #72]	; (80070c4 <_scanf_float+0x418>)
 800707a:	4630      	mov	r0, r6
 800707c:	f000 f82c 	bl	80070d8 <siprintf>
 8007080:	e7d0      	b.n	8007024 <_scanf_float+0x378>
 8007082:	9903      	ldr	r1, [sp, #12]
 8007084:	f012 0f04 	tst.w	r2, #4
 8007088:	f103 0204 	add.w	r2, r3, #4
 800708c:	600a      	str	r2, [r1, #0]
 800708e:	d1d9      	bne.n	8007044 <_scanf_float+0x398>
 8007090:	f8d3 8000 	ldr.w	r8, [r3]
 8007094:	ee10 2a10 	vmov	r2, s0
 8007098:	ee10 0a10 	vmov	r0, s0
 800709c:	463b      	mov	r3, r7
 800709e:	4639      	mov	r1, r7
 80070a0:	f7f9 fd44 	bl	8000b2c <__aeabi_dcmpun>
 80070a4:	b128      	cbz	r0, 80070b2 <_scanf_float+0x406>
 80070a6:	4808      	ldr	r0, [pc, #32]	; (80070c8 <_scanf_float+0x41c>)
 80070a8:	f000 f810 	bl	80070cc <nanf>
 80070ac:	ed88 0a00 	vstr	s0, [r8]
 80070b0:	e7cb      	b.n	800704a <_scanf_float+0x39e>
 80070b2:	4630      	mov	r0, r6
 80070b4:	4639      	mov	r1, r7
 80070b6:	f7f9 fd97 	bl	8000be8 <__aeabi_d2f>
 80070ba:	f8c8 0000 	str.w	r0, [r8]
 80070be:	e7c4      	b.n	800704a <_scanf_float+0x39e>
 80070c0:	2500      	movs	r5, #0
 80070c2:	e634      	b.n	8006d2e <_scanf_float+0x82>
 80070c4:	0800b4e8 	.word	0x0800b4e8
 80070c8:	0800b8f0 	.word	0x0800b8f0

080070cc <nanf>:
 80070cc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80070d4 <nanf+0x8>
 80070d0:	4770      	bx	lr
 80070d2:	bf00      	nop
 80070d4:	7fc00000 	.word	0x7fc00000

080070d8 <siprintf>:
 80070d8:	b40e      	push	{r1, r2, r3}
 80070da:	b500      	push	{lr}
 80070dc:	b09c      	sub	sp, #112	; 0x70
 80070de:	ab1d      	add	r3, sp, #116	; 0x74
 80070e0:	9002      	str	r0, [sp, #8]
 80070e2:	9006      	str	r0, [sp, #24]
 80070e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80070e8:	4809      	ldr	r0, [pc, #36]	; (8007110 <siprintf+0x38>)
 80070ea:	9107      	str	r1, [sp, #28]
 80070ec:	9104      	str	r1, [sp, #16]
 80070ee:	4909      	ldr	r1, [pc, #36]	; (8007114 <siprintf+0x3c>)
 80070f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80070f4:	9105      	str	r1, [sp, #20]
 80070f6:	6800      	ldr	r0, [r0, #0]
 80070f8:	9301      	str	r3, [sp, #4]
 80070fa:	a902      	add	r1, sp, #8
 80070fc:	f002 fee2 	bl	8009ec4 <_svfiprintf_r>
 8007100:	9b02      	ldr	r3, [sp, #8]
 8007102:	2200      	movs	r2, #0
 8007104:	701a      	strb	r2, [r3, #0]
 8007106:	b01c      	add	sp, #112	; 0x70
 8007108:	f85d eb04 	ldr.w	lr, [sp], #4
 800710c:	b003      	add	sp, #12
 800710e:	4770      	bx	lr
 8007110:	2000000c 	.word	0x2000000c
 8007114:	ffff0208 	.word	0xffff0208

08007118 <sulp>:
 8007118:	b570      	push	{r4, r5, r6, lr}
 800711a:	4604      	mov	r4, r0
 800711c:	460d      	mov	r5, r1
 800711e:	ec45 4b10 	vmov	d0, r4, r5
 8007122:	4616      	mov	r6, r2
 8007124:	f002 fc2c 	bl	8009980 <__ulp>
 8007128:	ec51 0b10 	vmov	r0, r1, d0
 800712c:	b17e      	cbz	r6, 800714e <sulp+0x36>
 800712e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007132:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007136:	2b00      	cmp	r3, #0
 8007138:	dd09      	ble.n	800714e <sulp+0x36>
 800713a:	051b      	lsls	r3, r3, #20
 800713c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007140:	2400      	movs	r4, #0
 8007142:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007146:	4622      	mov	r2, r4
 8007148:	462b      	mov	r3, r5
 800714a:	f7f9 fa55 	bl	80005f8 <__aeabi_dmul>
 800714e:	bd70      	pop	{r4, r5, r6, pc}

08007150 <_strtod_l>:
 8007150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007154:	ed2d 8b02 	vpush	{d8}
 8007158:	b09d      	sub	sp, #116	; 0x74
 800715a:	461f      	mov	r7, r3
 800715c:	2300      	movs	r3, #0
 800715e:	9318      	str	r3, [sp, #96]	; 0x60
 8007160:	4ba2      	ldr	r3, [pc, #648]	; (80073ec <_strtod_l+0x29c>)
 8007162:	9213      	str	r2, [sp, #76]	; 0x4c
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	9305      	str	r3, [sp, #20]
 8007168:	4604      	mov	r4, r0
 800716a:	4618      	mov	r0, r3
 800716c:	4688      	mov	r8, r1
 800716e:	f7f9 f82f 	bl	80001d0 <strlen>
 8007172:	f04f 0a00 	mov.w	sl, #0
 8007176:	4605      	mov	r5, r0
 8007178:	f04f 0b00 	mov.w	fp, #0
 800717c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007180:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007182:	781a      	ldrb	r2, [r3, #0]
 8007184:	2a2b      	cmp	r2, #43	; 0x2b
 8007186:	d04e      	beq.n	8007226 <_strtod_l+0xd6>
 8007188:	d83b      	bhi.n	8007202 <_strtod_l+0xb2>
 800718a:	2a0d      	cmp	r2, #13
 800718c:	d834      	bhi.n	80071f8 <_strtod_l+0xa8>
 800718e:	2a08      	cmp	r2, #8
 8007190:	d834      	bhi.n	80071fc <_strtod_l+0xac>
 8007192:	2a00      	cmp	r2, #0
 8007194:	d03e      	beq.n	8007214 <_strtod_l+0xc4>
 8007196:	2300      	movs	r3, #0
 8007198:	930a      	str	r3, [sp, #40]	; 0x28
 800719a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800719c:	7833      	ldrb	r3, [r6, #0]
 800719e:	2b30      	cmp	r3, #48	; 0x30
 80071a0:	f040 80b0 	bne.w	8007304 <_strtod_l+0x1b4>
 80071a4:	7873      	ldrb	r3, [r6, #1]
 80071a6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80071aa:	2b58      	cmp	r3, #88	; 0x58
 80071ac:	d168      	bne.n	8007280 <_strtod_l+0x130>
 80071ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071b0:	9301      	str	r3, [sp, #4]
 80071b2:	ab18      	add	r3, sp, #96	; 0x60
 80071b4:	9702      	str	r7, [sp, #8]
 80071b6:	9300      	str	r3, [sp, #0]
 80071b8:	4a8d      	ldr	r2, [pc, #564]	; (80073f0 <_strtod_l+0x2a0>)
 80071ba:	ab19      	add	r3, sp, #100	; 0x64
 80071bc:	a917      	add	r1, sp, #92	; 0x5c
 80071be:	4620      	mov	r0, r4
 80071c0:	f001 fd38 	bl	8008c34 <__gethex>
 80071c4:	f010 0707 	ands.w	r7, r0, #7
 80071c8:	4605      	mov	r5, r0
 80071ca:	d005      	beq.n	80071d8 <_strtod_l+0x88>
 80071cc:	2f06      	cmp	r7, #6
 80071ce:	d12c      	bne.n	800722a <_strtod_l+0xda>
 80071d0:	3601      	adds	r6, #1
 80071d2:	2300      	movs	r3, #0
 80071d4:	9617      	str	r6, [sp, #92]	; 0x5c
 80071d6:	930a      	str	r3, [sp, #40]	; 0x28
 80071d8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80071da:	2b00      	cmp	r3, #0
 80071dc:	f040 8590 	bne.w	8007d00 <_strtod_l+0xbb0>
 80071e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071e2:	b1eb      	cbz	r3, 8007220 <_strtod_l+0xd0>
 80071e4:	4652      	mov	r2, sl
 80071e6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80071ea:	ec43 2b10 	vmov	d0, r2, r3
 80071ee:	b01d      	add	sp, #116	; 0x74
 80071f0:	ecbd 8b02 	vpop	{d8}
 80071f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071f8:	2a20      	cmp	r2, #32
 80071fa:	d1cc      	bne.n	8007196 <_strtod_l+0x46>
 80071fc:	3301      	adds	r3, #1
 80071fe:	9317      	str	r3, [sp, #92]	; 0x5c
 8007200:	e7be      	b.n	8007180 <_strtod_l+0x30>
 8007202:	2a2d      	cmp	r2, #45	; 0x2d
 8007204:	d1c7      	bne.n	8007196 <_strtod_l+0x46>
 8007206:	2201      	movs	r2, #1
 8007208:	920a      	str	r2, [sp, #40]	; 0x28
 800720a:	1c5a      	adds	r2, r3, #1
 800720c:	9217      	str	r2, [sp, #92]	; 0x5c
 800720e:	785b      	ldrb	r3, [r3, #1]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d1c2      	bne.n	800719a <_strtod_l+0x4a>
 8007214:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007216:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800721a:	2b00      	cmp	r3, #0
 800721c:	f040 856e 	bne.w	8007cfc <_strtod_l+0xbac>
 8007220:	4652      	mov	r2, sl
 8007222:	465b      	mov	r3, fp
 8007224:	e7e1      	b.n	80071ea <_strtod_l+0x9a>
 8007226:	2200      	movs	r2, #0
 8007228:	e7ee      	b.n	8007208 <_strtod_l+0xb8>
 800722a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800722c:	b13a      	cbz	r2, 800723e <_strtod_l+0xee>
 800722e:	2135      	movs	r1, #53	; 0x35
 8007230:	a81a      	add	r0, sp, #104	; 0x68
 8007232:	f002 fcb0 	bl	8009b96 <__copybits>
 8007236:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007238:	4620      	mov	r0, r4
 800723a:	f002 f86f 	bl	800931c <_Bfree>
 800723e:	3f01      	subs	r7, #1
 8007240:	2f04      	cmp	r7, #4
 8007242:	d806      	bhi.n	8007252 <_strtod_l+0x102>
 8007244:	e8df f007 	tbb	[pc, r7]
 8007248:	1714030a 	.word	0x1714030a
 800724c:	0a          	.byte	0x0a
 800724d:	00          	.byte	0x00
 800724e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8007252:	0728      	lsls	r0, r5, #28
 8007254:	d5c0      	bpl.n	80071d8 <_strtod_l+0x88>
 8007256:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800725a:	e7bd      	b.n	80071d8 <_strtod_l+0x88>
 800725c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8007260:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007262:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007266:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800726a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800726e:	e7f0      	b.n	8007252 <_strtod_l+0x102>
 8007270:	f8df b180 	ldr.w	fp, [pc, #384]	; 80073f4 <_strtod_l+0x2a4>
 8007274:	e7ed      	b.n	8007252 <_strtod_l+0x102>
 8007276:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800727a:	f04f 3aff 	mov.w	sl, #4294967295
 800727e:	e7e8      	b.n	8007252 <_strtod_l+0x102>
 8007280:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007282:	1c5a      	adds	r2, r3, #1
 8007284:	9217      	str	r2, [sp, #92]	; 0x5c
 8007286:	785b      	ldrb	r3, [r3, #1]
 8007288:	2b30      	cmp	r3, #48	; 0x30
 800728a:	d0f9      	beq.n	8007280 <_strtod_l+0x130>
 800728c:	2b00      	cmp	r3, #0
 800728e:	d0a3      	beq.n	80071d8 <_strtod_l+0x88>
 8007290:	2301      	movs	r3, #1
 8007292:	f04f 0900 	mov.w	r9, #0
 8007296:	9304      	str	r3, [sp, #16]
 8007298:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800729a:	9308      	str	r3, [sp, #32]
 800729c:	f8cd 901c 	str.w	r9, [sp, #28]
 80072a0:	464f      	mov	r7, r9
 80072a2:	220a      	movs	r2, #10
 80072a4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80072a6:	7806      	ldrb	r6, [r0, #0]
 80072a8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80072ac:	b2d9      	uxtb	r1, r3
 80072ae:	2909      	cmp	r1, #9
 80072b0:	d92a      	bls.n	8007308 <_strtod_l+0x1b8>
 80072b2:	9905      	ldr	r1, [sp, #20]
 80072b4:	462a      	mov	r2, r5
 80072b6:	f002 ff1f 	bl	800a0f8 <strncmp>
 80072ba:	b398      	cbz	r0, 8007324 <_strtod_l+0x1d4>
 80072bc:	2000      	movs	r0, #0
 80072be:	4632      	mov	r2, r6
 80072c0:	463d      	mov	r5, r7
 80072c2:	9005      	str	r0, [sp, #20]
 80072c4:	4603      	mov	r3, r0
 80072c6:	2a65      	cmp	r2, #101	; 0x65
 80072c8:	d001      	beq.n	80072ce <_strtod_l+0x17e>
 80072ca:	2a45      	cmp	r2, #69	; 0x45
 80072cc:	d118      	bne.n	8007300 <_strtod_l+0x1b0>
 80072ce:	b91d      	cbnz	r5, 80072d8 <_strtod_l+0x188>
 80072d0:	9a04      	ldr	r2, [sp, #16]
 80072d2:	4302      	orrs	r2, r0
 80072d4:	d09e      	beq.n	8007214 <_strtod_l+0xc4>
 80072d6:	2500      	movs	r5, #0
 80072d8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80072dc:	f108 0201 	add.w	r2, r8, #1
 80072e0:	9217      	str	r2, [sp, #92]	; 0x5c
 80072e2:	f898 2001 	ldrb.w	r2, [r8, #1]
 80072e6:	2a2b      	cmp	r2, #43	; 0x2b
 80072e8:	d075      	beq.n	80073d6 <_strtod_l+0x286>
 80072ea:	2a2d      	cmp	r2, #45	; 0x2d
 80072ec:	d07b      	beq.n	80073e6 <_strtod_l+0x296>
 80072ee:	f04f 0c00 	mov.w	ip, #0
 80072f2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80072f6:	2909      	cmp	r1, #9
 80072f8:	f240 8082 	bls.w	8007400 <_strtod_l+0x2b0>
 80072fc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007300:	2600      	movs	r6, #0
 8007302:	e09d      	b.n	8007440 <_strtod_l+0x2f0>
 8007304:	2300      	movs	r3, #0
 8007306:	e7c4      	b.n	8007292 <_strtod_l+0x142>
 8007308:	2f08      	cmp	r7, #8
 800730a:	bfd8      	it	le
 800730c:	9907      	ldrle	r1, [sp, #28]
 800730e:	f100 0001 	add.w	r0, r0, #1
 8007312:	bfda      	itte	le
 8007314:	fb02 3301 	mlale	r3, r2, r1, r3
 8007318:	9307      	strle	r3, [sp, #28]
 800731a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800731e:	3701      	adds	r7, #1
 8007320:	9017      	str	r0, [sp, #92]	; 0x5c
 8007322:	e7bf      	b.n	80072a4 <_strtod_l+0x154>
 8007324:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007326:	195a      	adds	r2, r3, r5
 8007328:	9217      	str	r2, [sp, #92]	; 0x5c
 800732a:	5d5a      	ldrb	r2, [r3, r5]
 800732c:	2f00      	cmp	r7, #0
 800732e:	d037      	beq.n	80073a0 <_strtod_l+0x250>
 8007330:	9005      	str	r0, [sp, #20]
 8007332:	463d      	mov	r5, r7
 8007334:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007338:	2b09      	cmp	r3, #9
 800733a:	d912      	bls.n	8007362 <_strtod_l+0x212>
 800733c:	2301      	movs	r3, #1
 800733e:	e7c2      	b.n	80072c6 <_strtod_l+0x176>
 8007340:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007342:	1c5a      	adds	r2, r3, #1
 8007344:	9217      	str	r2, [sp, #92]	; 0x5c
 8007346:	785a      	ldrb	r2, [r3, #1]
 8007348:	3001      	adds	r0, #1
 800734a:	2a30      	cmp	r2, #48	; 0x30
 800734c:	d0f8      	beq.n	8007340 <_strtod_l+0x1f0>
 800734e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007352:	2b08      	cmp	r3, #8
 8007354:	f200 84d9 	bhi.w	8007d0a <_strtod_l+0xbba>
 8007358:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800735a:	9005      	str	r0, [sp, #20]
 800735c:	2000      	movs	r0, #0
 800735e:	9308      	str	r3, [sp, #32]
 8007360:	4605      	mov	r5, r0
 8007362:	3a30      	subs	r2, #48	; 0x30
 8007364:	f100 0301 	add.w	r3, r0, #1
 8007368:	d014      	beq.n	8007394 <_strtod_l+0x244>
 800736a:	9905      	ldr	r1, [sp, #20]
 800736c:	4419      	add	r1, r3
 800736e:	9105      	str	r1, [sp, #20]
 8007370:	462b      	mov	r3, r5
 8007372:	eb00 0e05 	add.w	lr, r0, r5
 8007376:	210a      	movs	r1, #10
 8007378:	4573      	cmp	r3, lr
 800737a:	d113      	bne.n	80073a4 <_strtod_l+0x254>
 800737c:	182b      	adds	r3, r5, r0
 800737e:	2b08      	cmp	r3, #8
 8007380:	f105 0501 	add.w	r5, r5, #1
 8007384:	4405      	add	r5, r0
 8007386:	dc1c      	bgt.n	80073c2 <_strtod_l+0x272>
 8007388:	9907      	ldr	r1, [sp, #28]
 800738a:	230a      	movs	r3, #10
 800738c:	fb03 2301 	mla	r3, r3, r1, r2
 8007390:	9307      	str	r3, [sp, #28]
 8007392:	2300      	movs	r3, #0
 8007394:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007396:	1c51      	adds	r1, r2, #1
 8007398:	9117      	str	r1, [sp, #92]	; 0x5c
 800739a:	7852      	ldrb	r2, [r2, #1]
 800739c:	4618      	mov	r0, r3
 800739e:	e7c9      	b.n	8007334 <_strtod_l+0x1e4>
 80073a0:	4638      	mov	r0, r7
 80073a2:	e7d2      	b.n	800734a <_strtod_l+0x1fa>
 80073a4:	2b08      	cmp	r3, #8
 80073a6:	dc04      	bgt.n	80073b2 <_strtod_l+0x262>
 80073a8:	9e07      	ldr	r6, [sp, #28]
 80073aa:	434e      	muls	r6, r1
 80073ac:	9607      	str	r6, [sp, #28]
 80073ae:	3301      	adds	r3, #1
 80073b0:	e7e2      	b.n	8007378 <_strtod_l+0x228>
 80073b2:	f103 0c01 	add.w	ip, r3, #1
 80073b6:	f1bc 0f10 	cmp.w	ip, #16
 80073ba:	bfd8      	it	le
 80073bc:	fb01 f909 	mulle.w	r9, r1, r9
 80073c0:	e7f5      	b.n	80073ae <_strtod_l+0x25e>
 80073c2:	2d10      	cmp	r5, #16
 80073c4:	bfdc      	itt	le
 80073c6:	230a      	movle	r3, #10
 80073c8:	fb03 2909 	mlale	r9, r3, r9, r2
 80073cc:	e7e1      	b.n	8007392 <_strtod_l+0x242>
 80073ce:	2300      	movs	r3, #0
 80073d0:	9305      	str	r3, [sp, #20]
 80073d2:	2301      	movs	r3, #1
 80073d4:	e77c      	b.n	80072d0 <_strtod_l+0x180>
 80073d6:	f04f 0c00 	mov.w	ip, #0
 80073da:	f108 0202 	add.w	r2, r8, #2
 80073de:	9217      	str	r2, [sp, #92]	; 0x5c
 80073e0:	f898 2002 	ldrb.w	r2, [r8, #2]
 80073e4:	e785      	b.n	80072f2 <_strtod_l+0x1a2>
 80073e6:	f04f 0c01 	mov.w	ip, #1
 80073ea:	e7f6      	b.n	80073da <_strtod_l+0x28a>
 80073ec:	0800b738 	.word	0x0800b738
 80073f0:	0800b4f0 	.word	0x0800b4f0
 80073f4:	7ff00000 	.word	0x7ff00000
 80073f8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80073fa:	1c51      	adds	r1, r2, #1
 80073fc:	9117      	str	r1, [sp, #92]	; 0x5c
 80073fe:	7852      	ldrb	r2, [r2, #1]
 8007400:	2a30      	cmp	r2, #48	; 0x30
 8007402:	d0f9      	beq.n	80073f8 <_strtod_l+0x2a8>
 8007404:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007408:	2908      	cmp	r1, #8
 800740a:	f63f af79 	bhi.w	8007300 <_strtod_l+0x1b0>
 800740e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8007412:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007414:	9206      	str	r2, [sp, #24]
 8007416:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007418:	1c51      	adds	r1, r2, #1
 800741a:	9117      	str	r1, [sp, #92]	; 0x5c
 800741c:	7852      	ldrb	r2, [r2, #1]
 800741e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8007422:	2e09      	cmp	r6, #9
 8007424:	d937      	bls.n	8007496 <_strtod_l+0x346>
 8007426:	9e06      	ldr	r6, [sp, #24]
 8007428:	1b89      	subs	r1, r1, r6
 800742a:	2908      	cmp	r1, #8
 800742c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8007430:	dc02      	bgt.n	8007438 <_strtod_l+0x2e8>
 8007432:	4576      	cmp	r6, lr
 8007434:	bfa8      	it	ge
 8007436:	4676      	movge	r6, lr
 8007438:	f1bc 0f00 	cmp.w	ip, #0
 800743c:	d000      	beq.n	8007440 <_strtod_l+0x2f0>
 800743e:	4276      	negs	r6, r6
 8007440:	2d00      	cmp	r5, #0
 8007442:	d14d      	bne.n	80074e0 <_strtod_l+0x390>
 8007444:	9904      	ldr	r1, [sp, #16]
 8007446:	4301      	orrs	r1, r0
 8007448:	f47f aec6 	bne.w	80071d8 <_strtod_l+0x88>
 800744c:	2b00      	cmp	r3, #0
 800744e:	f47f aee1 	bne.w	8007214 <_strtod_l+0xc4>
 8007452:	2a69      	cmp	r2, #105	; 0x69
 8007454:	d027      	beq.n	80074a6 <_strtod_l+0x356>
 8007456:	dc24      	bgt.n	80074a2 <_strtod_l+0x352>
 8007458:	2a49      	cmp	r2, #73	; 0x49
 800745a:	d024      	beq.n	80074a6 <_strtod_l+0x356>
 800745c:	2a4e      	cmp	r2, #78	; 0x4e
 800745e:	f47f aed9 	bne.w	8007214 <_strtod_l+0xc4>
 8007462:	499f      	ldr	r1, [pc, #636]	; (80076e0 <_strtod_l+0x590>)
 8007464:	a817      	add	r0, sp, #92	; 0x5c
 8007466:	f001 fe3d 	bl	80090e4 <__match>
 800746a:	2800      	cmp	r0, #0
 800746c:	f43f aed2 	beq.w	8007214 <_strtod_l+0xc4>
 8007470:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007472:	781b      	ldrb	r3, [r3, #0]
 8007474:	2b28      	cmp	r3, #40	; 0x28
 8007476:	d12d      	bne.n	80074d4 <_strtod_l+0x384>
 8007478:	499a      	ldr	r1, [pc, #616]	; (80076e4 <_strtod_l+0x594>)
 800747a:	aa1a      	add	r2, sp, #104	; 0x68
 800747c:	a817      	add	r0, sp, #92	; 0x5c
 800747e:	f001 fe45 	bl	800910c <__hexnan>
 8007482:	2805      	cmp	r0, #5
 8007484:	d126      	bne.n	80074d4 <_strtod_l+0x384>
 8007486:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007488:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800748c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007490:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007494:	e6a0      	b.n	80071d8 <_strtod_l+0x88>
 8007496:	210a      	movs	r1, #10
 8007498:	fb01 2e0e 	mla	lr, r1, lr, r2
 800749c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80074a0:	e7b9      	b.n	8007416 <_strtod_l+0x2c6>
 80074a2:	2a6e      	cmp	r2, #110	; 0x6e
 80074a4:	e7db      	b.n	800745e <_strtod_l+0x30e>
 80074a6:	4990      	ldr	r1, [pc, #576]	; (80076e8 <_strtod_l+0x598>)
 80074a8:	a817      	add	r0, sp, #92	; 0x5c
 80074aa:	f001 fe1b 	bl	80090e4 <__match>
 80074ae:	2800      	cmp	r0, #0
 80074b0:	f43f aeb0 	beq.w	8007214 <_strtod_l+0xc4>
 80074b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80074b6:	498d      	ldr	r1, [pc, #564]	; (80076ec <_strtod_l+0x59c>)
 80074b8:	3b01      	subs	r3, #1
 80074ba:	a817      	add	r0, sp, #92	; 0x5c
 80074bc:	9317      	str	r3, [sp, #92]	; 0x5c
 80074be:	f001 fe11 	bl	80090e4 <__match>
 80074c2:	b910      	cbnz	r0, 80074ca <_strtod_l+0x37a>
 80074c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80074c6:	3301      	adds	r3, #1
 80074c8:	9317      	str	r3, [sp, #92]	; 0x5c
 80074ca:	f8df b230 	ldr.w	fp, [pc, #560]	; 80076fc <_strtod_l+0x5ac>
 80074ce:	f04f 0a00 	mov.w	sl, #0
 80074d2:	e681      	b.n	80071d8 <_strtod_l+0x88>
 80074d4:	4886      	ldr	r0, [pc, #536]	; (80076f0 <_strtod_l+0x5a0>)
 80074d6:	f002 fdf7 	bl	800a0c8 <nan>
 80074da:	ec5b ab10 	vmov	sl, fp, d0
 80074de:	e67b      	b.n	80071d8 <_strtod_l+0x88>
 80074e0:	9b05      	ldr	r3, [sp, #20]
 80074e2:	9807      	ldr	r0, [sp, #28]
 80074e4:	1af3      	subs	r3, r6, r3
 80074e6:	2f00      	cmp	r7, #0
 80074e8:	bf08      	it	eq
 80074ea:	462f      	moveq	r7, r5
 80074ec:	2d10      	cmp	r5, #16
 80074ee:	9306      	str	r3, [sp, #24]
 80074f0:	46a8      	mov	r8, r5
 80074f2:	bfa8      	it	ge
 80074f4:	f04f 0810 	movge.w	r8, #16
 80074f8:	f7f9 f804 	bl	8000504 <__aeabi_ui2d>
 80074fc:	2d09      	cmp	r5, #9
 80074fe:	4682      	mov	sl, r0
 8007500:	468b      	mov	fp, r1
 8007502:	dd13      	ble.n	800752c <_strtod_l+0x3dc>
 8007504:	4b7b      	ldr	r3, [pc, #492]	; (80076f4 <_strtod_l+0x5a4>)
 8007506:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800750a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800750e:	f7f9 f873 	bl	80005f8 <__aeabi_dmul>
 8007512:	4682      	mov	sl, r0
 8007514:	4648      	mov	r0, r9
 8007516:	468b      	mov	fp, r1
 8007518:	f7f8 fff4 	bl	8000504 <__aeabi_ui2d>
 800751c:	4602      	mov	r2, r0
 800751e:	460b      	mov	r3, r1
 8007520:	4650      	mov	r0, sl
 8007522:	4659      	mov	r1, fp
 8007524:	f7f8 feb2 	bl	800028c <__adddf3>
 8007528:	4682      	mov	sl, r0
 800752a:	468b      	mov	fp, r1
 800752c:	2d0f      	cmp	r5, #15
 800752e:	dc38      	bgt.n	80075a2 <_strtod_l+0x452>
 8007530:	9b06      	ldr	r3, [sp, #24]
 8007532:	2b00      	cmp	r3, #0
 8007534:	f43f ae50 	beq.w	80071d8 <_strtod_l+0x88>
 8007538:	dd24      	ble.n	8007584 <_strtod_l+0x434>
 800753a:	2b16      	cmp	r3, #22
 800753c:	dc0b      	bgt.n	8007556 <_strtod_l+0x406>
 800753e:	496d      	ldr	r1, [pc, #436]	; (80076f4 <_strtod_l+0x5a4>)
 8007540:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007544:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007548:	4652      	mov	r2, sl
 800754a:	465b      	mov	r3, fp
 800754c:	f7f9 f854 	bl	80005f8 <__aeabi_dmul>
 8007550:	4682      	mov	sl, r0
 8007552:	468b      	mov	fp, r1
 8007554:	e640      	b.n	80071d8 <_strtod_l+0x88>
 8007556:	9a06      	ldr	r2, [sp, #24]
 8007558:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800755c:	4293      	cmp	r3, r2
 800755e:	db20      	blt.n	80075a2 <_strtod_l+0x452>
 8007560:	4c64      	ldr	r4, [pc, #400]	; (80076f4 <_strtod_l+0x5a4>)
 8007562:	f1c5 050f 	rsb	r5, r5, #15
 8007566:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800756a:	4652      	mov	r2, sl
 800756c:	465b      	mov	r3, fp
 800756e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007572:	f7f9 f841 	bl	80005f8 <__aeabi_dmul>
 8007576:	9b06      	ldr	r3, [sp, #24]
 8007578:	1b5d      	subs	r5, r3, r5
 800757a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800757e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007582:	e7e3      	b.n	800754c <_strtod_l+0x3fc>
 8007584:	9b06      	ldr	r3, [sp, #24]
 8007586:	3316      	adds	r3, #22
 8007588:	db0b      	blt.n	80075a2 <_strtod_l+0x452>
 800758a:	9b05      	ldr	r3, [sp, #20]
 800758c:	1b9e      	subs	r6, r3, r6
 800758e:	4b59      	ldr	r3, [pc, #356]	; (80076f4 <_strtod_l+0x5a4>)
 8007590:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8007594:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007598:	4650      	mov	r0, sl
 800759a:	4659      	mov	r1, fp
 800759c:	f7f9 f956 	bl	800084c <__aeabi_ddiv>
 80075a0:	e7d6      	b.n	8007550 <_strtod_l+0x400>
 80075a2:	9b06      	ldr	r3, [sp, #24]
 80075a4:	eba5 0808 	sub.w	r8, r5, r8
 80075a8:	4498      	add	r8, r3
 80075aa:	f1b8 0f00 	cmp.w	r8, #0
 80075ae:	dd74      	ble.n	800769a <_strtod_l+0x54a>
 80075b0:	f018 030f 	ands.w	r3, r8, #15
 80075b4:	d00a      	beq.n	80075cc <_strtod_l+0x47c>
 80075b6:	494f      	ldr	r1, [pc, #316]	; (80076f4 <_strtod_l+0x5a4>)
 80075b8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80075bc:	4652      	mov	r2, sl
 80075be:	465b      	mov	r3, fp
 80075c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80075c4:	f7f9 f818 	bl	80005f8 <__aeabi_dmul>
 80075c8:	4682      	mov	sl, r0
 80075ca:	468b      	mov	fp, r1
 80075cc:	f038 080f 	bics.w	r8, r8, #15
 80075d0:	d04f      	beq.n	8007672 <_strtod_l+0x522>
 80075d2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80075d6:	dd22      	ble.n	800761e <_strtod_l+0x4ce>
 80075d8:	2500      	movs	r5, #0
 80075da:	462e      	mov	r6, r5
 80075dc:	9507      	str	r5, [sp, #28]
 80075de:	9505      	str	r5, [sp, #20]
 80075e0:	2322      	movs	r3, #34	; 0x22
 80075e2:	f8df b118 	ldr.w	fp, [pc, #280]	; 80076fc <_strtod_l+0x5ac>
 80075e6:	6023      	str	r3, [r4, #0]
 80075e8:	f04f 0a00 	mov.w	sl, #0
 80075ec:	9b07      	ldr	r3, [sp, #28]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	f43f adf2 	beq.w	80071d8 <_strtod_l+0x88>
 80075f4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80075f6:	4620      	mov	r0, r4
 80075f8:	f001 fe90 	bl	800931c <_Bfree>
 80075fc:	9905      	ldr	r1, [sp, #20]
 80075fe:	4620      	mov	r0, r4
 8007600:	f001 fe8c 	bl	800931c <_Bfree>
 8007604:	4631      	mov	r1, r6
 8007606:	4620      	mov	r0, r4
 8007608:	f001 fe88 	bl	800931c <_Bfree>
 800760c:	9907      	ldr	r1, [sp, #28]
 800760e:	4620      	mov	r0, r4
 8007610:	f001 fe84 	bl	800931c <_Bfree>
 8007614:	4629      	mov	r1, r5
 8007616:	4620      	mov	r0, r4
 8007618:	f001 fe80 	bl	800931c <_Bfree>
 800761c:	e5dc      	b.n	80071d8 <_strtod_l+0x88>
 800761e:	4b36      	ldr	r3, [pc, #216]	; (80076f8 <_strtod_l+0x5a8>)
 8007620:	9304      	str	r3, [sp, #16]
 8007622:	2300      	movs	r3, #0
 8007624:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007628:	4650      	mov	r0, sl
 800762a:	4659      	mov	r1, fp
 800762c:	4699      	mov	r9, r3
 800762e:	f1b8 0f01 	cmp.w	r8, #1
 8007632:	dc21      	bgt.n	8007678 <_strtod_l+0x528>
 8007634:	b10b      	cbz	r3, 800763a <_strtod_l+0x4ea>
 8007636:	4682      	mov	sl, r0
 8007638:	468b      	mov	fp, r1
 800763a:	4b2f      	ldr	r3, [pc, #188]	; (80076f8 <_strtod_l+0x5a8>)
 800763c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8007640:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8007644:	4652      	mov	r2, sl
 8007646:	465b      	mov	r3, fp
 8007648:	e9d9 0100 	ldrd	r0, r1, [r9]
 800764c:	f7f8 ffd4 	bl	80005f8 <__aeabi_dmul>
 8007650:	4b2a      	ldr	r3, [pc, #168]	; (80076fc <_strtod_l+0x5ac>)
 8007652:	460a      	mov	r2, r1
 8007654:	400b      	ands	r3, r1
 8007656:	492a      	ldr	r1, [pc, #168]	; (8007700 <_strtod_l+0x5b0>)
 8007658:	428b      	cmp	r3, r1
 800765a:	4682      	mov	sl, r0
 800765c:	d8bc      	bhi.n	80075d8 <_strtod_l+0x488>
 800765e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007662:	428b      	cmp	r3, r1
 8007664:	bf86      	itte	hi
 8007666:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8007704 <_strtod_l+0x5b4>
 800766a:	f04f 3aff 	movhi.w	sl, #4294967295
 800766e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8007672:	2300      	movs	r3, #0
 8007674:	9304      	str	r3, [sp, #16]
 8007676:	e084      	b.n	8007782 <_strtod_l+0x632>
 8007678:	f018 0f01 	tst.w	r8, #1
 800767c:	d005      	beq.n	800768a <_strtod_l+0x53a>
 800767e:	9b04      	ldr	r3, [sp, #16]
 8007680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007684:	f7f8 ffb8 	bl	80005f8 <__aeabi_dmul>
 8007688:	2301      	movs	r3, #1
 800768a:	9a04      	ldr	r2, [sp, #16]
 800768c:	3208      	adds	r2, #8
 800768e:	f109 0901 	add.w	r9, r9, #1
 8007692:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007696:	9204      	str	r2, [sp, #16]
 8007698:	e7c9      	b.n	800762e <_strtod_l+0x4de>
 800769a:	d0ea      	beq.n	8007672 <_strtod_l+0x522>
 800769c:	f1c8 0800 	rsb	r8, r8, #0
 80076a0:	f018 020f 	ands.w	r2, r8, #15
 80076a4:	d00a      	beq.n	80076bc <_strtod_l+0x56c>
 80076a6:	4b13      	ldr	r3, [pc, #76]	; (80076f4 <_strtod_l+0x5a4>)
 80076a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80076ac:	4650      	mov	r0, sl
 80076ae:	4659      	mov	r1, fp
 80076b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076b4:	f7f9 f8ca 	bl	800084c <__aeabi_ddiv>
 80076b8:	4682      	mov	sl, r0
 80076ba:	468b      	mov	fp, r1
 80076bc:	ea5f 1828 	movs.w	r8, r8, asr #4
 80076c0:	d0d7      	beq.n	8007672 <_strtod_l+0x522>
 80076c2:	f1b8 0f1f 	cmp.w	r8, #31
 80076c6:	dd1f      	ble.n	8007708 <_strtod_l+0x5b8>
 80076c8:	2500      	movs	r5, #0
 80076ca:	462e      	mov	r6, r5
 80076cc:	9507      	str	r5, [sp, #28]
 80076ce:	9505      	str	r5, [sp, #20]
 80076d0:	2322      	movs	r3, #34	; 0x22
 80076d2:	f04f 0a00 	mov.w	sl, #0
 80076d6:	f04f 0b00 	mov.w	fp, #0
 80076da:	6023      	str	r3, [r4, #0]
 80076dc:	e786      	b.n	80075ec <_strtod_l+0x49c>
 80076de:	bf00      	nop
 80076e0:	0800b4c1 	.word	0x0800b4c1
 80076e4:	0800b504 	.word	0x0800b504
 80076e8:	0800b4b9 	.word	0x0800b4b9
 80076ec:	0800b644 	.word	0x0800b644
 80076f0:	0800b8f0 	.word	0x0800b8f0
 80076f4:	0800b7d0 	.word	0x0800b7d0
 80076f8:	0800b7a8 	.word	0x0800b7a8
 80076fc:	7ff00000 	.word	0x7ff00000
 8007700:	7ca00000 	.word	0x7ca00000
 8007704:	7fefffff 	.word	0x7fefffff
 8007708:	f018 0310 	ands.w	r3, r8, #16
 800770c:	bf18      	it	ne
 800770e:	236a      	movne	r3, #106	; 0x6a
 8007710:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8007ac0 <_strtod_l+0x970>
 8007714:	9304      	str	r3, [sp, #16]
 8007716:	4650      	mov	r0, sl
 8007718:	4659      	mov	r1, fp
 800771a:	2300      	movs	r3, #0
 800771c:	f018 0f01 	tst.w	r8, #1
 8007720:	d004      	beq.n	800772c <_strtod_l+0x5dc>
 8007722:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007726:	f7f8 ff67 	bl	80005f8 <__aeabi_dmul>
 800772a:	2301      	movs	r3, #1
 800772c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8007730:	f109 0908 	add.w	r9, r9, #8
 8007734:	d1f2      	bne.n	800771c <_strtod_l+0x5cc>
 8007736:	b10b      	cbz	r3, 800773c <_strtod_l+0x5ec>
 8007738:	4682      	mov	sl, r0
 800773a:	468b      	mov	fp, r1
 800773c:	9b04      	ldr	r3, [sp, #16]
 800773e:	b1c3      	cbz	r3, 8007772 <_strtod_l+0x622>
 8007740:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007744:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007748:	2b00      	cmp	r3, #0
 800774a:	4659      	mov	r1, fp
 800774c:	dd11      	ble.n	8007772 <_strtod_l+0x622>
 800774e:	2b1f      	cmp	r3, #31
 8007750:	f340 8124 	ble.w	800799c <_strtod_l+0x84c>
 8007754:	2b34      	cmp	r3, #52	; 0x34
 8007756:	bfde      	ittt	le
 8007758:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800775c:	f04f 33ff 	movle.w	r3, #4294967295
 8007760:	fa03 f202 	lslle.w	r2, r3, r2
 8007764:	f04f 0a00 	mov.w	sl, #0
 8007768:	bfcc      	ite	gt
 800776a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800776e:	ea02 0b01 	andle.w	fp, r2, r1
 8007772:	2200      	movs	r2, #0
 8007774:	2300      	movs	r3, #0
 8007776:	4650      	mov	r0, sl
 8007778:	4659      	mov	r1, fp
 800777a:	f7f9 f9a5 	bl	8000ac8 <__aeabi_dcmpeq>
 800777e:	2800      	cmp	r0, #0
 8007780:	d1a2      	bne.n	80076c8 <_strtod_l+0x578>
 8007782:	9b07      	ldr	r3, [sp, #28]
 8007784:	9300      	str	r3, [sp, #0]
 8007786:	9908      	ldr	r1, [sp, #32]
 8007788:	462b      	mov	r3, r5
 800778a:	463a      	mov	r2, r7
 800778c:	4620      	mov	r0, r4
 800778e:	f001 fe2d 	bl	80093ec <__s2b>
 8007792:	9007      	str	r0, [sp, #28]
 8007794:	2800      	cmp	r0, #0
 8007796:	f43f af1f 	beq.w	80075d8 <_strtod_l+0x488>
 800779a:	9b05      	ldr	r3, [sp, #20]
 800779c:	1b9e      	subs	r6, r3, r6
 800779e:	9b06      	ldr	r3, [sp, #24]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	bfb4      	ite	lt
 80077a4:	4633      	movlt	r3, r6
 80077a6:	2300      	movge	r3, #0
 80077a8:	930c      	str	r3, [sp, #48]	; 0x30
 80077aa:	9b06      	ldr	r3, [sp, #24]
 80077ac:	2500      	movs	r5, #0
 80077ae:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80077b2:	9312      	str	r3, [sp, #72]	; 0x48
 80077b4:	462e      	mov	r6, r5
 80077b6:	9b07      	ldr	r3, [sp, #28]
 80077b8:	4620      	mov	r0, r4
 80077ba:	6859      	ldr	r1, [r3, #4]
 80077bc:	f001 fd6e 	bl	800929c <_Balloc>
 80077c0:	9005      	str	r0, [sp, #20]
 80077c2:	2800      	cmp	r0, #0
 80077c4:	f43f af0c 	beq.w	80075e0 <_strtod_l+0x490>
 80077c8:	9b07      	ldr	r3, [sp, #28]
 80077ca:	691a      	ldr	r2, [r3, #16]
 80077cc:	3202      	adds	r2, #2
 80077ce:	f103 010c 	add.w	r1, r3, #12
 80077d2:	0092      	lsls	r2, r2, #2
 80077d4:	300c      	adds	r0, #12
 80077d6:	f001 fd53 	bl	8009280 <memcpy>
 80077da:	ec4b ab10 	vmov	d0, sl, fp
 80077de:	aa1a      	add	r2, sp, #104	; 0x68
 80077e0:	a919      	add	r1, sp, #100	; 0x64
 80077e2:	4620      	mov	r0, r4
 80077e4:	f002 f948 	bl	8009a78 <__d2b>
 80077e8:	ec4b ab18 	vmov	d8, sl, fp
 80077ec:	9018      	str	r0, [sp, #96]	; 0x60
 80077ee:	2800      	cmp	r0, #0
 80077f0:	f43f aef6 	beq.w	80075e0 <_strtod_l+0x490>
 80077f4:	2101      	movs	r1, #1
 80077f6:	4620      	mov	r0, r4
 80077f8:	f001 fe92 	bl	8009520 <__i2b>
 80077fc:	4606      	mov	r6, r0
 80077fe:	2800      	cmp	r0, #0
 8007800:	f43f aeee 	beq.w	80075e0 <_strtod_l+0x490>
 8007804:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007806:	9904      	ldr	r1, [sp, #16]
 8007808:	2b00      	cmp	r3, #0
 800780a:	bfab      	itete	ge
 800780c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800780e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8007810:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8007812:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8007816:	bfac      	ite	ge
 8007818:	eb03 0902 	addge.w	r9, r3, r2
 800781c:	1ad7      	sublt	r7, r2, r3
 800781e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007820:	eba3 0801 	sub.w	r8, r3, r1
 8007824:	4490      	add	r8, r2
 8007826:	4ba1      	ldr	r3, [pc, #644]	; (8007aac <_strtod_l+0x95c>)
 8007828:	f108 38ff 	add.w	r8, r8, #4294967295
 800782c:	4598      	cmp	r8, r3
 800782e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007832:	f280 80c7 	bge.w	80079c4 <_strtod_l+0x874>
 8007836:	eba3 0308 	sub.w	r3, r3, r8
 800783a:	2b1f      	cmp	r3, #31
 800783c:	eba2 0203 	sub.w	r2, r2, r3
 8007840:	f04f 0101 	mov.w	r1, #1
 8007844:	f300 80b1 	bgt.w	80079aa <_strtod_l+0x85a>
 8007848:	fa01 f303 	lsl.w	r3, r1, r3
 800784c:	930d      	str	r3, [sp, #52]	; 0x34
 800784e:	2300      	movs	r3, #0
 8007850:	9308      	str	r3, [sp, #32]
 8007852:	eb09 0802 	add.w	r8, r9, r2
 8007856:	9b04      	ldr	r3, [sp, #16]
 8007858:	45c1      	cmp	r9, r8
 800785a:	4417      	add	r7, r2
 800785c:	441f      	add	r7, r3
 800785e:	464b      	mov	r3, r9
 8007860:	bfa8      	it	ge
 8007862:	4643      	movge	r3, r8
 8007864:	42bb      	cmp	r3, r7
 8007866:	bfa8      	it	ge
 8007868:	463b      	movge	r3, r7
 800786a:	2b00      	cmp	r3, #0
 800786c:	bfc2      	ittt	gt
 800786e:	eba8 0803 	subgt.w	r8, r8, r3
 8007872:	1aff      	subgt	r7, r7, r3
 8007874:	eba9 0903 	subgt.w	r9, r9, r3
 8007878:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800787a:	2b00      	cmp	r3, #0
 800787c:	dd17      	ble.n	80078ae <_strtod_l+0x75e>
 800787e:	4631      	mov	r1, r6
 8007880:	461a      	mov	r2, r3
 8007882:	4620      	mov	r0, r4
 8007884:	f001 ff0c 	bl	80096a0 <__pow5mult>
 8007888:	4606      	mov	r6, r0
 800788a:	2800      	cmp	r0, #0
 800788c:	f43f aea8 	beq.w	80075e0 <_strtod_l+0x490>
 8007890:	4601      	mov	r1, r0
 8007892:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007894:	4620      	mov	r0, r4
 8007896:	f001 fe59 	bl	800954c <__multiply>
 800789a:	900b      	str	r0, [sp, #44]	; 0x2c
 800789c:	2800      	cmp	r0, #0
 800789e:	f43f ae9f 	beq.w	80075e0 <_strtod_l+0x490>
 80078a2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80078a4:	4620      	mov	r0, r4
 80078a6:	f001 fd39 	bl	800931c <_Bfree>
 80078aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078ac:	9318      	str	r3, [sp, #96]	; 0x60
 80078ae:	f1b8 0f00 	cmp.w	r8, #0
 80078b2:	f300 808c 	bgt.w	80079ce <_strtod_l+0x87e>
 80078b6:	9b06      	ldr	r3, [sp, #24]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	dd08      	ble.n	80078ce <_strtod_l+0x77e>
 80078bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80078be:	9905      	ldr	r1, [sp, #20]
 80078c0:	4620      	mov	r0, r4
 80078c2:	f001 feed 	bl	80096a0 <__pow5mult>
 80078c6:	9005      	str	r0, [sp, #20]
 80078c8:	2800      	cmp	r0, #0
 80078ca:	f43f ae89 	beq.w	80075e0 <_strtod_l+0x490>
 80078ce:	2f00      	cmp	r7, #0
 80078d0:	dd08      	ble.n	80078e4 <_strtod_l+0x794>
 80078d2:	9905      	ldr	r1, [sp, #20]
 80078d4:	463a      	mov	r2, r7
 80078d6:	4620      	mov	r0, r4
 80078d8:	f001 ff3c 	bl	8009754 <__lshift>
 80078dc:	9005      	str	r0, [sp, #20]
 80078de:	2800      	cmp	r0, #0
 80078e0:	f43f ae7e 	beq.w	80075e0 <_strtod_l+0x490>
 80078e4:	f1b9 0f00 	cmp.w	r9, #0
 80078e8:	dd08      	ble.n	80078fc <_strtod_l+0x7ac>
 80078ea:	4631      	mov	r1, r6
 80078ec:	464a      	mov	r2, r9
 80078ee:	4620      	mov	r0, r4
 80078f0:	f001 ff30 	bl	8009754 <__lshift>
 80078f4:	4606      	mov	r6, r0
 80078f6:	2800      	cmp	r0, #0
 80078f8:	f43f ae72 	beq.w	80075e0 <_strtod_l+0x490>
 80078fc:	9a05      	ldr	r2, [sp, #20]
 80078fe:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007900:	4620      	mov	r0, r4
 8007902:	f001 ffb3 	bl	800986c <__mdiff>
 8007906:	4605      	mov	r5, r0
 8007908:	2800      	cmp	r0, #0
 800790a:	f43f ae69 	beq.w	80075e0 <_strtod_l+0x490>
 800790e:	68c3      	ldr	r3, [r0, #12]
 8007910:	930b      	str	r3, [sp, #44]	; 0x2c
 8007912:	2300      	movs	r3, #0
 8007914:	60c3      	str	r3, [r0, #12]
 8007916:	4631      	mov	r1, r6
 8007918:	f001 ff8c 	bl	8009834 <__mcmp>
 800791c:	2800      	cmp	r0, #0
 800791e:	da60      	bge.n	80079e2 <_strtod_l+0x892>
 8007920:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007922:	ea53 030a 	orrs.w	r3, r3, sl
 8007926:	f040 8082 	bne.w	8007a2e <_strtod_l+0x8de>
 800792a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800792e:	2b00      	cmp	r3, #0
 8007930:	d17d      	bne.n	8007a2e <_strtod_l+0x8de>
 8007932:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007936:	0d1b      	lsrs	r3, r3, #20
 8007938:	051b      	lsls	r3, r3, #20
 800793a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800793e:	d976      	bls.n	8007a2e <_strtod_l+0x8de>
 8007940:	696b      	ldr	r3, [r5, #20]
 8007942:	b913      	cbnz	r3, 800794a <_strtod_l+0x7fa>
 8007944:	692b      	ldr	r3, [r5, #16]
 8007946:	2b01      	cmp	r3, #1
 8007948:	dd71      	ble.n	8007a2e <_strtod_l+0x8de>
 800794a:	4629      	mov	r1, r5
 800794c:	2201      	movs	r2, #1
 800794e:	4620      	mov	r0, r4
 8007950:	f001 ff00 	bl	8009754 <__lshift>
 8007954:	4631      	mov	r1, r6
 8007956:	4605      	mov	r5, r0
 8007958:	f001 ff6c 	bl	8009834 <__mcmp>
 800795c:	2800      	cmp	r0, #0
 800795e:	dd66      	ble.n	8007a2e <_strtod_l+0x8de>
 8007960:	9904      	ldr	r1, [sp, #16]
 8007962:	4a53      	ldr	r2, [pc, #332]	; (8007ab0 <_strtod_l+0x960>)
 8007964:	465b      	mov	r3, fp
 8007966:	2900      	cmp	r1, #0
 8007968:	f000 8081 	beq.w	8007a6e <_strtod_l+0x91e>
 800796c:	ea02 010b 	and.w	r1, r2, fp
 8007970:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007974:	dc7b      	bgt.n	8007a6e <_strtod_l+0x91e>
 8007976:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800797a:	f77f aea9 	ble.w	80076d0 <_strtod_l+0x580>
 800797e:	4b4d      	ldr	r3, [pc, #308]	; (8007ab4 <_strtod_l+0x964>)
 8007980:	4650      	mov	r0, sl
 8007982:	4659      	mov	r1, fp
 8007984:	2200      	movs	r2, #0
 8007986:	f7f8 fe37 	bl	80005f8 <__aeabi_dmul>
 800798a:	460b      	mov	r3, r1
 800798c:	4303      	orrs	r3, r0
 800798e:	bf08      	it	eq
 8007990:	2322      	moveq	r3, #34	; 0x22
 8007992:	4682      	mov	sl, r0
 8007994:	468b      	mov	fp, r1
 8007996:	bf08      	it	eq
 8007998:	6023      	streq	r3, [r4, #0]
 800799a:	e62b      	b.n	80075f4 <_strtod_l+0x4a4>
 800799c:	f04f 32ff 	mov.w	r2, #4294967295
 80079a0:	fa02 f303 	lsl.w	r3, r2, r3
 80079a4:	ea03 0a0a 	and.w	sl, r3, sl
 80079a8:	e6e3      	b.n	8007772 <_strtod_l+0x622>
 80079aa:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80079ae:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80079b2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80079b6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80079ba:	fa01 f308 	lsl.w	r3, r1, r8
 80079be:	9308      	str	r3, [sp, #32]
 80079c0:	910d      	str	r1, [sp, #52]	; 0x34
 80079c2:	e746      	b.n	8007852 <_strtod_l+0x702>
 80079c4:	2300      	movs	r3, #0
 80079c6:	9308      	str	r3, [sp, #32]
 80079c8:	2301      	movs	r3, #1
 80079ca:	930d      	str	r3, [sp, #52]	; 0x34
 80079cc:	e741      	b.n	8007852 <_strtod_l+0x702>
 80079ce:	9918      	ldr	r1, [sp, #96]	; 0x60
 80079d0:	4642      	mov	r2, r8
 80079d2:	4620      	mov	r0, r4
 80079d4:	f001 febe 	bl	8009754 <__lshift>
 80079d8:	9018      	str	r0, [sp, #96]	; 0x60
 80079da:	2800      	cmp	r0, #0
 80079dc:	f47f af6b 	bne.w	80078b6 <_strtod_l+0x766>
 80079e0:	e5fe      	b.n	80075e0 <_strtod_l+0x490>
 80079e2:	465f      	mov	r7, fp
 80079e4:	d16e      	bne.n	8007ac4 <_strtod_l+0x974>
 80079e6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80079e8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80079ec:	b342      	cbz	r2, 8007a40 <_strtod_l+0x8f0>
 80079ee:	4a32      	ldr	r2, [pc, #200]	; (8007ab8 <_strtod_l+0x968>)
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d128      	bne.n	8007a46 <_strtod_l+0x8f6>
 80079f4:	9b04      	ldr	r3, [sp, #16]
 80079f6:	4651      	mov	r1, sl
 80079f8:	b1eb      	cbz	r3, 8007a36 <_strtod_l+0x8e6>
 80079fa:	4b2d      	ldr	r3, [pc, #180]	; (8007ab0 <_strtod_l+0x960>)
 80079fc:	403b      	ands	r3, r7
 80079fe:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007a02:	f04f 32ff 	mov.w	r2, #4294967295
 8007a06:	d819      	bhi.n	8007a3c <_strtod_l+0x8ec>
 8007a08:	0d1b      	lsrs	r3, r3, #20
 8007a0a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a12:	4299      	cmp	r1, r3
 8007a14:	d117      	bne.n	8007a46 <_strtod_l+0x8f6>
 8007a16:	4b29      	ldr	r3, [pc, #164]	; (8007abc <_strtod_l+0x96c>)
 8007a18:	429f      	cmp	r7, r3
 8007a1a:	d102      	bne.n	8007a22 <_strtod_l+0x8d2>
 8007a1c:	3101      	adds	r1, #1
 8007a1e:	f43f addf 	beq.w	80075e0 <_strtod_l+0x490>
 8007a22:	4b23      	ldr	r3, [pc, #140]	; (8007ab0 <_strtod_l+0x960>)
 8007a24:	403b      	ands	r3, r7
 8007a26:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8007a2a:	f04f 0a00 	mov.w	sl, #0
 8007a2e:	9b04      	ldr	r3, [sp, #16]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d1a4      	bne.n	800797e <_strtod_l+0x82e>
 8007a34:	e5de      	b.n	80075f4 <_strtod_l+0x4a4>
 8007a36:	f04f 33ff 	mov.w	r3, #4294967295
 8007a3a:	e7ea      	b.n	8007a12 <_strtod_l+0x8c2>
 8007a3c:	4613      	mov	r3, r2
 8007a3e:	e7e8      	b.n	8007a12 <_strtod_l+0x8c2>
 8007a40:	ea53 030a 	orrs.w	r3, r3, sl
 8007a44:	d08c      	beq.n	8007960 <_strtod_l+0x810>
 8007a46:	9b08      	ldr	r3, [sp, #32]
 8007a48:	b1db      	cbz	r3, 8007a82 <_strtod_l+0x932>
 8007a4a:	423b      	tst	r3, r7
 8007a4c:	d0ef      	beq.n	8007a2e <_strtod_l+0x8de>
 8007a4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a50:	9a04      	ldr	r2, [sp, #16]
 8007a52:	4650      	mov	r0, sl
 8007a54:	4659      	mov	r1, fp
 8007a56:	b1c3      	cbz	r3, 8007a8a <_strtod_l+0x93a>
 8007a58:	f7ff fb5e 	bl	8007118 <sulp>
 8007a5c:	4602      	mov	r2, r0
 8007a5e:	460b      	mov	r3, r1
 8007a60:	ec51 0b18 	vmov	r0, r1, d8
 8007a64:	f7f8 fc12 	bl	800028c <__adddf3>
 8007a68:	4682      	mov	sl, r0
 8007a6a:	468b      	mov	fp, r1
 8007a6c:	e7df      	b.n	8007a2e <_strtod_l+0x8de>
 8007a6e:	4013      	ands	r3, r2
 8007a70:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007a74:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007a78:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007a7c:	f04f 3aff 	mov.w	sl, #4294967295
 8007a80:	e7d5      	b.n	8007a2e <_strtod_l+0x8de>
 8007a82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a84:	ea13 0f0a 	tst.w	r3, sl
 8007a88:	e7e0      	b.n	8007a4c <_strtod_l+0x8fc>
 8007a8a:	f7ff fb45 	bl	8007118 <sulp>
 8007a8e:	4602      	mov	r2, r0
 8007a90:	460b      	mov	r3, r1
 8007a92:	ec51 0b18 	vmov	r0, r1, d8
 8007a96:	f7f8 fbf7 	bl	8000288 <__aeabi_dsub>
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	4682      	mov	sl, r0
 8007aa0:	468b      	mov	fp, r1
 8007aa2:	f7f9 f811 	bl	8000ac8 <__aeabi_dcmpeq>
 8007aa6:	2800      	cmp	r0, #0
 8007aa8:	d0c1      	beq.n	8007a2e <_strtod_l+0x8de>
 8007aaa:	e611      	b.n	80076d0 <_strtod_l+0x580>
 8007aac:	fffffc02 	.word	0xfffffc02
 8007ab0:	7ff00000 	.word	0x7ff00000
 8007ab4:	39500000 	.word	0x39500000
 8007ab8:	000fffff 	.word	0x000fffff
 8007abc:	7fefffff 	.word	0x7fefffff
 8007ac0:	0800b518 	.word	0x0800b518
 8007ac4:	4631      	mov	r1, r6
 8007ac6:	4628      	mov	r0, r5
 8007ac8:	f002 f832 	bl	8009b30 <__ratio>
 8007acc:	ec59 8b10 	vmov	r8, r9, d0
 8007ad0:	ee10 0a10 	vmov	r0, s0
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007ada:	4649      	mov	r1, r9
 8007adc:	f7f9 f808 	bl	8000af0 <__aeabi_dcmple>
 8007ae0:	2800      	cmp	r0, #0
 8007ae2:	d07a      	beq.n	8007bda <_strtod_l+0xa8a>
 8007ae4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d04a      	beq.n	8007b80 <_strtod_l+0xa30>
 8007aea:	4b95      	ldr	r3, [pc, #596]	; (8007d40 <_strtod_l+0xbf0>)
 8007aec:	2200      	movs	r2, #0
 8007aee:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007af2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8007d40 <_strtod_l+0xbf0>
 8007af6:	f04f 0800 	mov.w	r8, #0
 8007afa:	4b92      	ldr	r3, [pc, #584]	; (8007d44 <_strtod_l+0xbf4>)
 8007afc:	403b      	ands	r3, r7
 8007afe:	930d      	str	r3, [sp, #52]	; 0x34
 8007b00:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007b02:	4b91      	ldr	r3, [pc, #580]	; (8007d48 <_strtod_l+0xbf8>)
 8007b04:	429a      	cmp	r2, r3
 8007b06:	f040 80b0 	bne.w	8007c6a <_strtod_l+0xb1a>
 8007b0a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007b0e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8007b12:	ec4b ab10 	vmov	d0, sl, fp
 8007b16:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007b1a:	f001 ff31 	bl	8009980 <__ulp>
 8007b1e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007b22:	ec53 2b10 	vmov	r2, r3, d0
 8007b26:	f7f8 fd67 	bl	80005f8 <__aeabi_dmul>
 8007b2a:	4652      	mov	r2, sl
 8007b2c:	465b      	mov	r3, fp
 8007b2e:	f7f8 fbad 	bl	800028c <__adddf3>
 8007b32:	460b      	mov	r3, r1
 8007b34:	4983      	ldr	r1, [pc, #524]	; (8007d44 <_strtod_l+0xbf4>)
 8007b36:	4a85      	ldr	r2, [pc, #532]	; (8007d4c <_strtod_l+0xbfc>)
 8007b38:	4019      	ands	r1, r3
 8007b3a:	4291      	cmp	r1, r2
 8007b3c:	4682      	mov	sl, r0
 8007b3e:	d960      	bls.n	8007c02 <_strtod_l+0xab2>
 8007b40:	ee18 3a90 	vmov	r3, s17
 8007b44:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d104      	bne.n	8007b56 <_strtod_l+0xa06>
 8007b4c:	ee18 3a10 	vmov	r3, s16
 8007b50:	3301      	adds	r3, #1
 8007b52:	f43f ad45 	beq.w	80075e0 <_strtod_l+0x490>
 8007b56:	f8df b200 	ldr.w	fp, [pc, #512]	; 8007d58 <_strtod_l+0xc08>
 8007b5a:	f04f 3aff 	mov.w	sl, #4294967295
 8007b5e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007b60:	4620      	mov	r0, r4
 8007b62:	f001 fbdb 	bl	800931c <_Bfree>
 8007b66:	9905      	ldr	r1, [sp, #20]
 8007b68:	4620      	mov	r0, r4
 8007b6a:	f001 fbd7 	bl	800931c <_Bfree>
 8007b6e:	4631      	mov	r1, r6
 8007b70:	4620      	mov	r0, r4
 8007b72:	f001 fbd3 	bl	800931c <_Bfree>
 8007b76:	4629      	mov	r1, r5
 8007b78:	4620      	mov	r0, r4
 8007b7a:	f001 fbcf 	bl	800931c <_Bfree>
 8007b7e:	e61a      	b.n	80077b6 <_strtod_l+0x666>
 8007b80:	f1ba 0f00 	cmp.w	sl, #0
 8007b84:	d11b      	bne.n	8007bbe <_strtod_l+0xa6e>
 8007b86:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007b8a:	b9f3      	cbnz	r3, 8007bca <_strtod_l+0xa7a>
 8007b8c:	4b6c      	ldr	r3, [pc, #432]	; (8007d40 <_strtod_l+0xbf0>)
 8007b8e:	2200      	movs	r2, #0
 8007b90:	4640      	mov	r0, r8
 8007b92:	4649      	mov	r1, r9
 8007b94:	f7f8 ffa2 	bl	8000adc <__aeabi_dcmplt>
 8007b98:	b9d0      	cbnz	r0, 8007bd0 <_strtod_l+0xa80>
 8007b9a:	4640      	mov	r0, r8
 8007b9c:	4649      	mov	r1, r9
 8007b9e:	4b6c      	ldr	r3, [pc, #432]	; (8007d50 <_strtod_l+0xc00>)
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	f7f8 fd29 	bl	80005f8 <__aeabi_dmul>
 8007ba6:	4680      	mov	r8, r0
 8007ba8:	4689      	mov	r9, r1
 8007baa:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007bae:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8007bb2:	9315      	str	r3, [sp, #84]	; 0x54
 8007bb4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007bb8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007bbc:	e79d      	b.n	8007afa <_strtod_l+0x9aa>
 8007bbe:	f1ba 0f01 	cmp.w	sl, #1
 8007bc2:	d102      	bne.n	8007bca <_strtod_l+0xa7a>
 8007bc4:	2f00      	cmp	r7, #0
 8007bc6:	f43f ad83 	beq.w	80076d0 <_strtod_l+0x580>
 8007bca:	4b62      	ldr	r3, [pc, #392]	; (8007d54 <_strtod_l+0xc04>)
 8007bcc:	2200      	movs	r2, #0
 8007bce:	e78e      	b.n	8007aee <_strtod_l+0x99e>
 8007bd0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8007d50 <_strtod_l+0xc00>
 8007bd4:	f04f 0800 	mov.w	r8, #0
 8007bd8:	e7e7      	b.n	8007baa <_strtod_l+0xa5a>
 8007bda:	4b5d      	ldr	r3, [pc, #372]	; (8007d50 <_strtod_l+0xc00>)
 8007bdc:	4640      	mov	r0, r8
 8007bde:	4649      	mov	r1, r9
 8007be0:	2200      	movs	r2, #0
 8007be2:	f7f8 fd09 	bl	80005f8 <__aeabi_dmul>
 8007be6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007be8:	4680      	mov	r8, r0
 8007bea:	4689      	mov	r9, r1
 8007bec:	b933      	cbnz	r3, 8007bfc <_strtod_l+0xaac>
 8007bee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007bf2:	900e      	str	r0, [sp, #56]	; 0x38
 8007bf4:	930f      	str	r3, [sp, #60]	; 0x3c
 8007bf6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007bfa:	e7dd      	b.n	8007bb8 <_strtod_l+0xa68>
 8007bfc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8007c00:	e7f9      	b.n	8007bf6 <_strtod_l+0xaa6>
 8007c02:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8007c06:	9b04      	ldr	r3, [sp, #16]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d1a8      	bne.n	8007b5e <_strtod_l+0xa0e>
 8007c0c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007c10:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007c12:	0d1b      	lsrs	r3, r3, #20
 8007c14:	051b      	lsls	r3, r3, #20
 8007c16:	429a      	cmp	r2, r3
 8007c18:	d1a1      	bne.n	8007b5e <_strtod_l+0xa0e>
 8007c1a:	4640      	mov	r0, r8
 8007c1c:	4649      	mov	r1, r9
 8007c1e:	f7f9 f84b 	bl	8000cb8 <__aeabi_d2lz>
 8007c22:	f7f8 fcbb 	bl	800059c <__aeabi_l2d>
 8007c26:	4602      	mov	r2, r0
 8007c28:	460b      	mov	r3, r1
 8007c2a:	4640      	mov	r0, r8
 8007c2c:	4649      	mov	r1, r9
 8007c2e:	f7f8 fb2b 	bl	8000288 <__aeabi_dsub>
 8007c32:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007c34:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007c38:	ea43 030a 	orr.w	r3, r3, sl
 8007c3c:	4313      	orrs	r3, r2
 8007c3e:	4680      	mov	r8, r0
 8007c40:	4689      	mov	r9, r1
 8007c42:	d055      	beq.n	8007cf0 <_strtod_l+0xba0>
 8007c44:	a336      	add	r3, pc, #216	; (adr r3, 8007d20 <_strtod_l+0xbd0>)
 8007c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c4a:	f7f8 ff47 	bl	8000adc <__aeabi_dcmplt>
 8007c4e:	2800      	cmp	r0, #0
 8007c50:	f47f acd0 	bne.w	80075f4 <_strtod_l+0x4a4>
 8007c54:	a334      	add	r3, pc, #208	; (adr r3, 8007d28 <_strtod_l+0xbd8>)
 8007c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c5a:	4640      	mov	r0, r8
 8007c5c:	4649      	mov	r1, r9
 8007c5e:	f7f8 ff5b 	bl	8000b18 <__aeabi_dcmpgt>
 8007c62:	2800      	cmp	r0, #0
 8007c64:	f43f af7b 	beq.w	8007b5e <_strtod_l+0xa0e>
 8007c68:	e4c4      	b.n	80075f4 <_strtod_l+0x4a4>
 8007c6a:	9b04      	ldr	r3, [sp, #16]
 8007c6c:	b333      	cbz	r3, 8007cbc <_strtod_l+0xb6c>
 8007c6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c70:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007c74:	d822      	bhi.n	8007cbc <_strtod_l+0xb6c>
 8007c76:	a32e      	add	r3, pc, #184	; (adr r3, 8007d30 <_strtod_l+0xbe0>)
 8007c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c7c:	4640      	mov	r0, r8
 8007c7e:	4649      	mov	r1, r9
 8007c80:	f7f8 ff36 	bl	8000af0 <__aeabi_dcmple>
 8007c84:	b1a0      	cbz	r0, 8007cb0 <_strtod_l+0xb60>
 8007c86:	4649      	mov	r1, r9
 8007c88:	4640      	mov	r0, r8
 8007c8a:	f7f8 ff8d 	bl	8000ba8 <__aeabi_d2uiz>
 8007c8e:	2801      	cmp	r0, #1
 8007c90:	bf38      	it	cc
 8007c92:	2001      	movcc	r0, #1
 8007c94:	f7f8 fc36 	bl	8000504 <__aeabi_ui2d>
 8007c98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c9a:	4680      	mov	r8, r0
 8007c9c:	4689      	mov	r9, r1
 8007c9e:	bb23      	cbnz	r3, 8007cea <_strtod_l+0xb9a>
 8007ca0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007ca4:	9010      	str	r0, [sp, #64]	; 0x40
 8007ca6:	9311      	str	r3, [sp, #68]	; 0x44
 8007ca8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007cac:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007cb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cb2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007cb4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007cb8:	1a9b      	subs	r3, r3, r2
 8007cba:	9309      	str	r3, [sp, #36]	; 0x24
 8007cbc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007cc0:	eeb0 0a48 	vmov.f32	s0, s16
 8007cc4:	eef0 0a68 	vmov.f32	s1, s17
 8007cc8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007ccc:	f001 fe58 	bl	8009980 <__ulp>
 8007cd0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007cd4:	ec53 2b10 	vmov	r2, r3, d0
 8007cd8:	f7f8 fc8e 	bl	80005f8 <__aeabi_dmul>
 8007cdc:	ec53 2b18 	vmov	r2, r3, d8
 8007ce0:	f7f8 fad4 	bl	800028c <__adddf3>
 8007ce4:	4682      	mov	sl, r0
 8007ce6:	468b      	mov	fp, r1
 8007ce8:	e78d      	b.n	8007c06 <_strtod_l+0xab6>
 8007cea:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8007cee:	e7db      	b.n	8007ca8 <_strtod_l+0xb58>
 8007cf0:	a311      	add	r3, pc, #68	; (adr r3, 8007d38 <_strtod_l+0xbe8>)
 8007cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cf6:	f7f8 fef1 	bl	8000adc <__aeabi_dcmplt>
 8007cfa:	e7b2      	b.n	8007c62 <_strtod_l+0xb12>
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	930a      	str	r3, [sp, #40]	; 0x28
 8007d00:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007d02:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007d04:	6013      	str	r3, [r2, #0]
 8007d06:	f7ff ba6b 	b.w	80071e0 <_strtod_l+0x90>
 8007d0a:	2a65      	cmp	r2, #101	; 0x65
 8007d0c:	f43f ab5f 	beq.w	80073ce <_strtod_l+0x27e>
 8007d10:	2a45      	cmp	r2, #69	; 0x45
 8007d12:	f43f ab5c 	beq.w	80073ce <_strtod_l+0x27e>
 8007d16:	2301      	movs	r3, #1
 8007d18:	f7ff bb94 	b.w	8007444 <_strtod_l+0x2f4>
 8007d1c:	f3af 8000 	nop.w
 8007d20:	94a03595 	.word	0x94a03595
 8007d24:	3fdfffff 	.word	0x3fdfffff
 8007d28:	35afe535 	.word	0x35afe535
 8007d2c:	3fe00000 	.word	0x3fe00000
 8007d30:	ffc00000 	.word	0xffc00000
 8007d34:	41dfffff 	.word	0x41dfffff
 8007d38:	94a03595 	.word	0x94a03595
 8007d3c:	3fcfffff 	.word	0x3fcfffff
 8007d40:	3ff00000 	.word	0x3ff00000
 8007d44:	7ff00000 	.word	0x7ff00000
 8007d48:	7fe00000 	.word	0x7fe00000
 8007d4c:	7c9fffff 	.word	0x7c9fffff
 8007d50:	3fe00000 	.word	0x3fe00000
 8007d54:	bff00000 	.word	0xbff00000
 8007d58:	7fefffff 	.word	0x7fefffff

08007d5c <_strtod_r>:
 8007d5c:	4b01      	ldr	r3, [pc, #4]	; (8007d64 <_strtod_r+0x8>)
 8007d5e:	f7ff b9f7 	b.w	8007150 <_strtod_l>
 8007d62:	bf00      	nop
 8007d64:	20000074 	.word	0x20000074

08007d68 <_strtol_l.constprop.0>:
 8007d68:	2b01      	cmp	r3, #1
 8007d6a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d6e:	d001      	beq.n	8007d74 <_strtol_l.constprop.0+0xc>
 8007d70:	2b24      	cmp	r3, #36	; 0x24
 8007d72:	d906      	bls.n	8007d82 <_strtol_l.constprop.0+0x1a>
 8007d74:	f7fe fafe 	bl	8006374 <__errno>
 8007d78:	2316      	movs	r3, #22
 8007d7a:	6003      	str	r3, [r0, #0]
 8007d7c:	2000      	movs	r0, #0
 8007d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d82:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007e68 <_strtol_l.constprop.0+0x100>
 8007d86:	460d      	mov	r5, r1
 8007d88:	462e      	mov	r6, r5
 8007d8a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007d8e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8007d92:	f017 0708 	ands.w	r7, r7, #8
 8007d96:	d1f7      	bne.n	8007d88 <_strtol_l.constprop.0+0x20>
 8007d98:	2c2d      	cmp	r4, #45	; 0x2d
 8007d9a:	d132      	bne.n	8007e02 <_strtol_l.constprop.0+0x9a>
 8007d9c:	782c      	ldrb	r4, [r5, #0]
 8007d9e:	2701      	movs	r7, #1
 8007da0:	1cb5      	adds	r5, r6, #2
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d05b      	beq.n	8007e5e <_strtol_l.constprop.0+0xf6>
 8007da6:	2b10      	cmp	r3, #16
 8007da8:	d109      	bne.n	8007dbe <_strtol_l.constprop.0+0x56>
 8007daa:	2c30      	cmp	r4, #48	; 0x30
 8007dac:	d107      	bne.n	8007dbe <_strtol_l.constprop.0+0x56>
 8007dae:	782c      	ldrb	r4, [r5, #0]
 8007db0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007db4:	2c58      	cmp	r4, #88	; 0x58
 8007db6:	d14d      	bne.n	8007e54 <_strtol_l.constprop.0+0xec>
 8007db8:	786c      	ldrb	r4, [r5, #1]
 8007dba:	2310      	movs	r3, #16
 8007dbc:	3502      	adds	r5, #2
 8007dbe:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007dc2:	f108 38ff 	add.w	r8, r8, #4294967295
 8007dc6:	f04f 0c00 	mov.w	ip, #0
 8007dca:	fbb8 f9f3 	udiv	r9, r8, r3
 8007dce:	4666      	mov	r6, ip
 8007dd0:	fb03 8a19 	mls	sl, r3, r9, r8
 8007dd4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8007dd8:	f1be 0f09 	cmp.w	lr, #9
 8007ddc:	d816      	bhi.n	8007e0c <_strtol_l.constprop.0+0xa4>
 8007dde:	4674      	mov	r4, lr
 8007de0:	42a3      	cmp	r3, r4
 8007de2:	dd24      	ble.n	8007e2e <_strtol_l.constprop.0+0xc6>
 8007de4:	f1bc 0f00 	cmp.w	ip, #0
 8007de8:	db1e      	blt.n	8007e28 <_strtol_l.constprop.0+0xc0>
 8007dea:	45b1      	cmp	r9, r6
 8007dec:	d31c      	bcc.n	8007e28 <_strtol_l.constprop.0+0xc0>
 8007dee:	d101      	bne.n	8007df4 <_strtol_l.constprop.0+0x8c>
 8007df0:	45a2      	cmp	sl, r4
 8007df2:	db19      	blt.n	8007e28 <_strtol_l.constprop.0+0xc0>
 8007df4:	fb06 4603 	mla	r6, r6, r3, r4
 8007df8:	f04f 0c01 	mov.w	ip, #1
 8007dfc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007e00:	e7e8      	b.n	8007dd4 <_strtol_l.constprop.0+0x6c>
 8007e02:	2c2b      	cmp	r4, #43	; 0x2b
 8007e04:	bf04      	itt	eq
 8007e06:	782c      	ldrbeq	r4, [r5, #0]
 8007e08:	1cb5      	addeq	r5, r6, #2
 8007e0a:	e7ca      	b.n	8007da2 <_strtol_l.constprop.0+0x3a>
 8007e0c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8007e10:	f1be 0f19 	cmp.w	lr, #25
 8007e14:	d801      	bhi.n	8007e1a <_strtol_l.constprop.0+0xb2>
 8007e16:	3c37      	subs	r4, #55	; 0x37
 8007e18:	e7e2      	b.n	8007de0 <_strtol_l.constprop.0+0x78>
 8007e1a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8007e1e:	f1be 0f19 	cmp.w	lr, #25
 8007e22:	d804      	bhi.n	8007e2e <_strtol_l.constprop.0+0xc6>
 8007e24:	3c57      	subs	r4, #87	; 0x57
 8007e26:	e7db      	b.n	8007de0 <_strtol_l.constprop.0+0x78>
 8007e28:	f04f 3cff 	mov.w	ip, #4294967295
 8007e2c:	e7e6      	b.n	8007dfc <_strtol_l.constprop.0+0x94>
 8007e2e:	f1bc 0f00 	cmp.w	ip, #0
 8007e32:	da05      	bge.n	8007e40 <_strtol_l.constprop.0+0xd8>
 8007e34:	2322      	movs	r3, #34	; 0x22
 8007e36:	6003      	str	r3, [r0, #0]
 8007e38:	4646      	mov	r6, r8
 8007e3a:	b942      	cbnz	r2, 8007e4e <_strtol_l.constprop.0+0xe6>
 8007e3c:	4630      	mov	r0, r6
 8007e3e:	e79e      	b.n	8007d7e <_strtol_l.constprop.0+0x16>
 8007e40:	b107      	cbz	r7, 8007e44 <_strtol_l.constprop.0+0xdc>
 8007e42:	4276      	negs	r6, r6
 8007e44:	2a00      	cmp	r2, #0
 8007e46:	d0f9      	beq.n	8007e3c <_strtol_l.constprop.0+0xd4>
 8007e48:	f1bc 0f00 	cmp.w	ip, #0
 8007e4c:	d000      	beq.n	8007e50 <_strtol_l.constprop.0+0xe8>
 8007e4e:	1e69      	subs	r1, r5, #1
 8007e50:	6011      	str	r1, [r2, #0]
 8007e52:	e7f3      	b.n	8007e3c <_strtol_l.constprop.0+0xd4>
 8007e54:	2430      	movs	r4, #48	; 0x30
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d1b1      	bne.n	8007dbe <_strtol_l.constprop.0+0x56>
 8007e5a:	2308      	movs	r3, #8
 8007e5c:	e7af      	b.n	8007dbe <_strtol_l.constprop.0+0x56>
 8007e5e:	2c30      	cmp	r4, #48	; 0x30
 8007e60:	d0a5      	beq.n	8007dae <_strtol_l.constprop.0+0x46>
 8007e62:	230a      	movs	r3, #10
 8007e64:	e7ab      	b.n	8007dbe <_strtol_l.constprop.0+0x56>
 8007e66:	bf00      	nop
 8007e68:	0800b541 	.word	0x0800b541

08007e6c <_strtol_r>:
 8007e6c:	f7ff bf7c 	b.w	8007d68 <_strtol_l.constprop.0>

08007e70 <quorem>:
 8007e70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e74:	6903      	ldr	r3, [r0, #16]
 8007e76:	690c      	ldr	r4, [r1, #16]
 8007e78:	42a3      	cmp	r3, r4
 8007e7a:	4607      	mov	r7, r0
 8007e7c:	f2c0 8081 	blt.w	8007f82 <quorem+0x112>
 8007e80:	3c01      	subs	r4, #1
 8007e82:	f101 0814 	add.w	r8, r1, #20
 8007e86:	f100 0514 	add.w	r5, r0, #20
 8007e8a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007e8e:	9301      	str	r3, [sp, #4]
 8007e90:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007e94:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007e98:	3301      	adds	r3, #1
 8007e9a:	429a      	cmp	r2, r3
 8007e9c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007ea0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007ea4:	fbb2 f6f3 	udiv	r6, r2, r3
 8007ea8:	d331      	bcc.n	8007f0e <quorem+0x9e>
 8007eaa:	f04f 0e00 	mov.w	lr, #0
 8007eae:	4640      	mov	r0, r8
 8007eb0:	46ac      	mov	ip, r5
 8007eb2:	46f2      	mov	sl, lr
 8007eb4:	f850 2b04 	ldr.w	r2, [r0], #4
 8007eb8:	b293      	uxth	r3, r2
 8007eba:	fb06 e303 	mla	r3, r6, r3, lr
 8007ebe:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007ec2:	b29b      	uxth	r3, r3
 8007ec4:	ebaa 0303 	sub.w	r3, sl, r3
 8007ec8:	f8dc a000 	ldr.w	sl, [ip]
 8007ecc:	0c12      	lsrs	r2, r2, #16
 8007ece:	fa13 f38a 	uxtah	r3, r3, sl
 8007ed2:	fb06 e202 	mla	r2, r6, r2, lr
 8007ed6:	9300      	str	r3, [sp, #0]
 8007ed8:	9b00      	ldr	r3, [sp, #0]
 8007eda:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007ede:	b292      	uxth	r2, r2
 8007ee0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007ee4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007ee8:	f8bd 3000 	ldrh.w	r3, [sp]
 8007eec:	4581      	cmp	r9, r0
 8007eee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007ef2:	f84c 3b04 	str.w	r3, [ip], #4
 8007ef6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007efa:	d2db      	bcs.n	8007eb4 <quorem+0x44>
 8007efc:	f855 300b 	ldr.w	r3, [r5, fp]
 8007f00:	b92b      	cbnz	r3, 8007f0e <quorem+0x9e>
 8007f02:	9b01      	ldr	r3, [sp, #4]
 8007f04:	3b04      	subs	r3, #4
 8007f06:	429d      	cmp	r5, r3
 8007f08:	461a      	mov	r2, r3
 8007f0a:	d32e      	bcc.n	8007f6a <quorem+0xfa>
 8007f0c:	613c      	str	r4, [r7, #16]
 8007f0e:	4638      	mov	r0, r7
 8007f10:	f001 fc90 	bl	8009834 <__mcmp>
 8007f14:	2800      	cmp	r0, #0
 8007f16:	db24      	blt.n	8007f62 <quorem+0xf2>
 8007f18:	3601      	adds	r6, #1
 8007f1a:	4628      	mov	r0, r5
 8007f1c:	f04f 0c00 	mov.w	ip, #0
 8007f20:	f858 2b04 	ldr.w	r2, [r8], #4
 8007f24:	f8d0 e000 	ldr.w	lr, [r0]
 8007f28:	b293      	uxth	r3, r2
 8007f2a:	ebac 0303 	sub.w	r3, ip, r3
 8007f2e:	0c12      	lsrs	r2, r2, #16
 8007f30:	fa13 f38e 	uxtah	r3, r3, lr
 8007f34:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007f38:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007f3c:	b29b      	uxth	r3, r3
 8007f3e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007f42:	45c1      	cmp	r9, r8
 8007f44:	f840 3b04 	str.w	r3, [r0], #4
 8007f48:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007f4c:	d2e8      	bcs.n	8007f20 <quorem+0xb0>
 8007f4e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007f52:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007f56:	b922      	cbnz	r2, 8007f62 <quorem+0xf2>
 8007f58:	3b04      	subs	r3, #4
 8007f5a:	429d      	cmp	r5, r3
 8007f5c:	461a      	mov	r2, r3
 8007f5e:	d30a      	bcc.n	8007f76 <quorem+0x106>
 8007f60:	613c      	str	r4, [r7, #16]
 8007f62:	4630      	mov	r0, r6
 8007f64:	b003      	add	sp, #12
 8007f66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f6a:	6812      	ldr	r2, [r2, #0]
 8007f6c:	3b04      	subs	r3, #4
 8007f6e:	2a00      	cmp	r2, #0
 8007f70:	d1cc      	bne.n	8007f0c <quorem+0x9c>
 8007f72:	3c01      	subs	r4, #1
 8007f74:	e7c7      	b.n	8007f06 <quorem+0x96>
 8007f76:	6812      	ldr	r2, [r2, #0]
 8007f78:	3b04      	subs	r3, #4
 8007f7a:	2a00      	cmp	r2, #0
 8007f7c:	d1f0      	bne.n	8007f60 <quorem+0xf0>
 8007f7e:	3c01      	subs	r4, #1
 8007f80:	e7eb      	b.n	8007f5a <quorem+0xea>
 8007f82:	2000      	movs	r0, #0
 8007f84:	e7ee      	b.n	8007f64 <quorem+0xf4>
	...

08007f88 <_dtoa_r>:
 8007f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f8c:	ed2d 8b04 	vpush	{d8-d9}
 8007f90:	ec57 6b10 	vmov	r6, r7, d0
 8007f94:	b093      	sub	sp, #76	; 0x4c
 8007f96:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007f98:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007f9c:	9106      	str	r1, [sp, #24]
 8007f9e:	ee10 aa10 	vmov	sl, s0
 8007fa2:	4604      	mov	r4, r0
 8007fa4:	9209      	str	r2, [sp, #36]	; 0x24
 8007fa6:	930c      	str	r3, [sp, #48]	; 0x30
 8007fa8:	46bb      	mov	fp, r7
 8007faa:	b975      	cbnz	r5, 8007fca <_dtoa_r+0x42>
 8007fac:	2010      	movs	r0, #16
 8007fae:	f001 f94d 	bl	800924c <malloc>
 8007fb2:	4602      	mov	r2, r0
 8007fb4:	6260      	str	r0, [r4, #36]	; 0x24
 8007fb6:	b920      	cbnz	r0, 8007fc2 <_dtoa_r+0x3a>
 8007fb8:	4ba7      	ldr	r3, [pc, #668]	; (8008258 <_dtoa_r+0x2d0>)
 8007fba:	21ea      	movs	r1, #234	; 0xea
 8007fbc:	48a7      	ldr	r0, [pc, #668]	; (800825c <_dtoa_r+0x2d4>)
 8007fbe:	f002 f8bd 	bl	800a13c <__assert_func>
 8007fc2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007fc6:	6005      	str	r5, [r0, #0]
 8007fc8:	60c5      	str	r5, [r0, #12]
 8007fca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007fcc:	6819      	ldr	r1, [r3, #0]
 8007fce:	b151      	cbz	r1, 8007fe6 <_dtoa_r+0x5e>
 8007fd0:	685a      	ldr	r2, [r3, #4]
 8007fd2:	604a      	str	r2, [r1, #4]
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	4093      	lsls	r3, r2
 8007fd8:	608b      	str	r3, [r1, #8]
 8007fda:	4620      	mov	r0, r4
 8007fdc:	f001 f99e 	bl	800931c <_Bfree>
 8007fe0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	601a      	str	r2, [r3, #0]
 8007fe6:	1e3b      	subs	r3, r7, #0
 8007fe8:	bfaa      	itet	ge
 8007fea:	2300      	movge	r3, #0
 8007fec:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007ff0:	f8c8 3000 	strge.w	r3, [r8]
 8007ff4:	4b9a      	ldr	r3, [pc, #616]	; (8008260 <_dtoa_r+0x2d8>)
 8007ff6:	bfbc      	itt	lt
 8007ff8:	2201      	movlt	r2, #1
 8007ffa:	f8c8 2000 	strlt.w	r2, [r8]
 8007ffe:	ea33 030b 	bics.w	r3, r3, fp
 8008002:	d11b      	bne.n	800803c <_dtoa_r+0xb4>
 8008004:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008006:	f242 730f 	movw	r3, #9999	; 0x270f
 800800a:	6013      	str	r3, [r2, #0]
 800800c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008010:	4333      	orrs	r3, r6
 8008012:	f000 8592 	beq.w	8008b3a <_dtoa_r+0xbb2>
 8008016:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008018:	b963      	cbnz	r3, 8008034 <_dtoa_r+0xac>
 800801a:	4b92      	ldr	r3, [pc, #584]	; (8008264 <_dtoa_r+0x2dc>)
 800801c:	e022      	b.n	8008064 <_dtoa_r+0xdc>
 800801e:	4b92      	ldr	r3, [pc, #584]	; (8008268 <_dtoa_r+0x2e0>)
 8008020:	9301      	str	r3, [sp, #4]
 8008022:	3308      	adds	r3, #8
 8008024:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008026:	6013      	str	r3, [r2, #0]
 8008028:	9801      	ldr	r0, [sp, #4]
 800802a:	b013      	add	sp, #76	; 0x4c
 800802c:	ecbd 8b04 	vpop	{d8-d9}
 8008030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008034:	4b8b      	ldr	r3, [pc, #556]	; (8008264 <_dtoa_r+0x2dc>)
 8008036:	9301      	str	r3, [sp, #4]
 8008038:	3303      	adds	r3, #3
 800803a:	e7f3      	b.n	8008024 <_dtoa_r+0x9c>
 800803c:	2200      	movs	r2, #0
 800803e:	2300      	movs	r3, #0
 8008040:	4650      	mov	r0, sl
 8008042:	4659      	mov	r1, fp
 8008044:	f7f8 fd40 	bl	8000ac8 <__aeabi_dcmpeq>
 8008048:	ec4b ab19 	vmov	d9, sl, fp
 800804c:	4680      	mov	r8, r0
 800804e:	b158      	cbz	r0, 8008068 <_dtoa_r+0xe0>
 8008050:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008052:	2301      	movs	r3, #1
 8008054:	6013      	str	r3, [r2, #0]
 8008056:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008058:	2b00      	cmp	r3, #0
 800805a:	f000 856b 	beq.w	8008b34 <_dtoa_r+0xbac>
 800805e:	4883      	ldr	r0, [pc, #524]	; (800826c <_dtoa_r+0x2e4>)
 8008060:	6018      	str	r0, [r3, #0]
 8008062:	1e43      	subs	r3, r0, #1
 8008064:	9301      	str	r3, [sp, #4]
 8008066:	e7df      	b.n	8008028 <_dtoa_r+0xa0>
 8008068:	ec4b ab10 	vmov	d0, sl, fp
 800806c:	aa10      	add	r2, sp, #64	; 0x40
 800806e:	a911      	add	r1, sp, #68	; 0x44
 8008070:	4620      	mov	r0, r4
 8008072:	f001 fd01 	bl	8009a78 <__d2b>
 8008076:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800807a:	ee08 0a10 	vmov	s16, r0
 800807e:	2d00      	cmp	r5, #0
 8008080:	f000 8084 	beq.w	800818c <_dtoa_r+0x204>
 8008084:	ee19 3a90 	vmov	r3, s19
 8008088:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800808c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008090:	4656      	mov	r6, sl
 8008092:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008096:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800809a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800809e:	4b74      	ldr	r3, [pc, #464]	; (8008270 <_dtoa_r+0x2e8>)
 80080a0:	2200      	movs	r2, #0
 80080a2:	4630      	mov	r0, r6
 80080a4:	4639      	mov	r1, r7
 80080a6:	f7f8 f8ef 	bl	8000288 <__aeabi_dsub>
 80080aa:	a365      	add	r3, pc, #404	; (adr r3, 8008240 <_dtoa_r+0x2b8>)
 80080ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080b0:	f7f8 faa2 	bl	80005f8 <__aeabi_dmul>
 80080b4:	a364      	add	r3, pc, #400	; (adr r3, 8008248 <_dtoa_r+0x2c0>)
 80080b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ba:	f7f8 f8e7 	bl	800028c <__adddf3>
 80080be:	4606      	mov	r6, r0
 80080c0:	4628      	mov	r0, r5
 80080c2:	460f      	mov	r7, r1
 80080c4:	f7f8 fa2e 	bl	8000524 <__aeabi_i2d>
 80080c8:	a361      	add	r3, pc, #388	; (adr r3, 8008250 <_dtoa_r+0x2c8>)
 80080ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ce:	f7f8 fa93 	bl	80005f8 <__aeabi_dmul>
 80080d2:	4602      	mov	r2, r0
 80080d4:	460b      	mov	r3, r1
 80080d6:	4630      	mov	r0, r6
 80080d8:	4639      	mov	r1, r7
 80080da:	f7f8 f8d7 	bl	800028c <__adddf3>
 80080de:	4606      	mov	r6, r0
 80080e0:	460f      	mov	r7, r1
 80080e2:	f7f8 fd39 	bl	8000b58 <__aeabi_d2iz>
 80080e6:	2200      	movs	r2, #0
 80080e8:	9000      	str	r0, [sp, #0]
 80080ea:	2300      	movs	r3, #0
 80080ec:	4630      	mov	r0, r6
 80080ee:	4639      	mov	r1, r7
 80080f0:	f7f8 fcf4 	bl	8000adc <__aeabi_dcmplt>
 80080f4:	b150      	cbz	r0, 800810c <_dtoa_r+0x184>
 80080f6:	9800      	ldr	r0, [sp, #0]
 80080f8:	f7f8 fa14 	bl	8000524 <__aeabi_i2d>
 80080fc:	4632      	mov	r2, r6
 80080fe:	463b      	mov	r3, r7
 8008100:	f7f8 fce2 	bl	8000ac8 <__aeabi_dcmpeq>
 8008104:	b910      	cbnz	r0, 800810c <_dtoa_r+0x184>
 8008106:	9b00      	ldr	r3, [sp, #0]
 8008108:	3b01      	subs	r3, #1
 800810a:	9300      	str	r3, [sp, #0]
 800810c:	9b00      	ldr	r3, [sp, #0]
 800810e:	2b16      	cmp	r3, #22
 8008110:	d85a      	bhi.n	80081c8 <_dtoa_r+0x240>
 8008112:	9a00      	ldr	r2, [sp, #0]
 8008114:	4b57      	ldr	r3, [pc, #348]	; (8008274 <_dtoa_r+0x2ec>)
 8008116:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800811a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800811e:	ec51 0b19 	vmov	r0, r1, d9
 8008122:	f7f8 fcdb 	bl	8000adc <__aeabi_dcmplt>
 8008126:	2800      	cmp	r0, #0
 8008128:	d050      	beq.n	80081cc <_dtoa_r+0x244>
 800812a:	9b00      	ldr	r3, [sp, #0]
 800812c:	3b01      	subs	r3, #1
 800812e:	9300      	str	r3, [sp, #0]
 8008130:	2300      	movs	r3, #0
 8008132:	930b      	str	r3, [sp, #44]	; 0x2c
 8008134:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008136:	1b5d      	subs	r5, r3, r5
 8008138:	1e6b      	subs	r3, r5, #1
 800813a:	9305      	str	r3, [sp, #20]
 800813c:	bf45      	ittet	mi
 800813e:	f1c5 0301 	rsbmi	r3, r5, #1
 8008142:	9304      	strmi	r3, [sp, #16]
 8008144:	2300      	movpl	r3, #0
 8008146:	2300      	movmi	r3, #0
 8008148:	bf4c      	ite	mi
 800814a:	9305      	strmi	r3, [sp, #20]
 800814c:	9304      	strpl	r3, [sp, #16]
 800814e:	9b00      	ldr	r3, [sp, #0]
 8008150:	2b00      	cmp	r3, #0
 8008152:	db3d      	blt.n	80081d0 <_dtoa_r+0x248>
 8008154:	9b05      	ldr	r3, [sp, #20]
 8008156:	9a00      	ldr	r2, [sp, #0]
 8008158:	920a      	str	r2, [sp, #40]	; 0x28
 800815a:	4413      	add	r3, r2
 800815c:	9305      	str	r3, [sp, #20]
 800815e:	2300      	movs	r3, #0
 8008160:	9307      	str	r3, [sp, #28]
 8008162:	9b06      	ldr	r3, [sp, #24]
 8008164:	2b09      	cmp	r3, #9
 8008166:	f200 8089 	bhi.w	800827c <_dtoa_r+0x2f4>
 800816a:	2b05      	cmp	r3, #5
 800816c:	bfc4      	itt	gt
 800816e:	3b04      	subgt	r3, #4
 8008170:	9306      	strgt	r3, [sp, #24]
 8008172:	9b06      	ldr	r3, [sp, #24]
 8008174:	f1a3 0302 	sub.w	r3, r3, #2
 8008178:	bfcc      	ite	gt
 800817a:	2500      	movgt	r5, #0
 800817c:	2501      	movle	r5, #1
 800817e:	2b03      	cmp	r3, #3
 8008180:	f200 8087 	bhi.w	8008292 <_dtoa_r+0x30a>
 8008184:	e8df f003 	tbb	[pc, r3]
 8008188:	59383a2d 	.word	0x59383a2d
 800818c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008190:	441d      	add	r5, r3
 8008192:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008196:	2b20      	cmp	r3, #32
 8008198:	bfc1      	itttt	gt
 800819a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800819e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80081a2:	fa0b f303 	lslgt.w	r3, fp, r3
 80081a6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80081aa:	bfda      	itte	le
 80081ac:	f1c3 0320 	rsble	r3, r3, #32
 80081b0:	fa06 f003 	lslle.w	r0, r6, r3
 80081b4:	4318      	orrgt	r0, r3
 80081b6:	f7f8 f9a5 	bl	8000504 <__aeabi_ui2d>
 80081ba:	2301      	movs	r3, #1
 80081bc:	4606      	mov	r6, r0
 80081be:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80081c2:	3d01      	subs	r5, #1
 80081c4:	930e      	str	r3, [sp, #56]	; 0x38
 80081c6:	e76a      	b.n	800809e <_dtoa_r+0x116>
 80081c8:	2301      	movs	r3, #1
 80081ca:	e7b2      	b.n	8008132 <_dtoa_r+0x1aa>
 80081cc:	900b      	str	r0, [sp, #44]	; 0x2c
 80081ce:	e7b1      	b.n	8008134 <_dtoa_r+0x1ac>
 80081d0:	9b04      	ldr	r3, [sp, #16]
 80081d2:	9a00      	ldr	r2, [sp, #0]
 80081d4:	1a9b      	subs	r3, r3, r2
 80081d6:	9304      	str	r3, [sp, #16]
 80081d8:	4253      	negs	r3, r2
 80081da:	9307      	str	r3, [sp, #28]
 80081dc:	2300      	movs	r3, #0
 80081de:	930a      	str	r3, [sp, #40]	; 0x28
 80081e0:	e7bf      	b.n	8008162 <_dtoa_r+0x1da>
 80081e2:	2300      	movs	r3, #0
 80081e4:	9308      	str	r3, [sp, #32]
 80081e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	dc55      	bgt.n	8008298 <_dtoa_r+0x310>
 80081ec:	2301      	movs	r3, #1
 80081ee:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80081f2:	461a      	mov	r2, r3
 80081f4:	9209      	str	r2, [sp, #36]	; 0x24
 80081f6:	e00c      	b.n	8008212 <_dtoa_r+0x28a>
 80081f8:	2301      	movs	r3, #1
 80081fa:	e7f3      	b.n	80081e4 <_dtoa_r+0x25c>
 80081fc:	2300      	movs	r3, #0
 80081fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008200:	9308      	str	r3, [sp, #32]
 8008202:	9b00      	ldr	r3, [sp, #0]
 8008204:	4413      	add	r3, r2
 8008206:	9302      	str	r3, [sp, #8]
 8008208:	3301      	adds	r3, #1
 800820a:	2b01      	cmp	r3, #1
 800820c:	9303      	str	r3, [sp, #12]
 800820e:	bfb8      	it	lt
 8008210:	2301      	movlt	r3, #1
 8008212:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008214:	2200      	movs	r2, #0
 8008216:	6042      	str	r2, [r0, #4]
 8008218:	2204      	movs	r2, #4
 800821a:	f102 0614 	add.w	r6, r2, #20
 800821e:	429e      	cmp	r6, r3
 8008220:	6841      	ldr	r1, [r0, #4]
 8008222:	d93d      	bls.n	80082a0 <_dtoa_r+0x318>
 8008224:	4620      	mov	r0, r4
 8008226:	f001 f839 	bl	800929c <_Balloc>
 800822a:	9001      	str	r0, [sp, #4]
 800822c:	2800      	cmp	r0, #0
 800822e:	d13b      	bne.n	80082a8 <_dtoa_r+0x320>
 8008230:	4b11      	ldr	r3, [pc, #68]	; (8008278 <_dtoa_r+0x2f0>)
 8008232:	4602      	mov	r2, r0
 8008234:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008238:	e6c0      	b.n	8007fbc <_dtoa_r+0x34>
 800823a:	2301      	movs	r3, #1
 800823c:	e7df      	b.n	80081fe <_dtoa_r+0x276>
 800823e:	bf00      	nop
 8008240:	636f4361 	.word	0x636f4361
 8008244:	3fd287a7 	.word	0x3fd287a7
 8008248:	8b60c8b3 	.word	0x8b60c8b3
 800824c:	3fc68a28 	.word	0x3fc68a28
 8008250:	509f79fb 	.word	0x509f79fb
 8008254:	3fd34413 	.word	0x3fd34413
 8008258:	0800b64e 	.word	0x0800b64e
 800825c:	0800b665 	.word	0x0800b665
 8008260:	7ff00000 	.word	0x7ff00000
 8008264:	0800b64a 	.word	0x0800b64a
 8008268:	0800b641 	.word	0x0800b641
 800826c:	0800b4c5 	.word	0x0800b4c5
 8008270:	3ff80000 	.word	0x3ff80000
 8008274:	0800b7d0 	.word	0x0800b7d0
 8008278:	0800b6c0 	.word	0x0800b6c0
 800827c:	2501      	movs	r5, #1
 800827e:	2300      	movs	r3, #0
 8008280:	9306      	str	r3, [sp, #24]
 8008282:	9508      	str	r5, [sp, #32]
 8008284:	f04f 33ff 	mov.w	r3, #4294967295
 8008288:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800828c:	2200      	movs	r2, #0
 800828e:	2312      	movs	r3, #18
 8008290:	e7b0      	b.n	80081f4 <_dtoa_r+0x26c>
 8008292:	2301      	movs	r3, #1
 8008294:	9308      	str	r3, [sp, #32]
 8008296:	e7f5      	b.n	8008284 <_dtoa_r+0x2fc>
 8008298:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800829a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800829e:	e7b8      	b.n	8008212 <_dtoa_r+0x28a>
 80082a0:	3101      	adds	r1, #1
 80082a2:	6041      	str	r1, [r0, #4]
 80082a4:	0052      	lsls	r2, r2, #1
 80082a6:	e7b8      	b.n	800821a <_dtoa_r+0x292>
 80082a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80082aa:	9a01      	ldr	r2, [sp, #4]
 80082ac:	601a      	str	r2, [r3, #0]
 80082ae:	9b03      	ldr	r3, [sp, #12]
 80082b0:	2b0e      	cmp	r3, #14
 80082b2:	f200 809d 	bhi.w	80083f0 <_dtoa_r+0x468>
 80082b6:	2d00      	cmp	r5, #0
 80082b8:	f000 809a 	beq.w	80083f0 <_dtoa_r+0x468>
 80082bc:	9b00      	ldr	r3, [sp, #0]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	dd32      	ble.n	8008328 <_dtoa_r+0x3a0>
 80082c2:	4ab7      	ldr	r2, [pc, #732]	; (80085a0 <_dtoa_r+0x618>)
 80082c4:	f003 030f 	and.w	r3, r3, #15
 80082c8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80082cc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80082d0:	9b00      	ldr	r3, [sp, #0]
 80082d2:	05d8      	lsls	r0, r3, #23
 80082d4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80082d8:	d516      	bpl.n	8008308 <_dtoa_r+0x380>
 80082da:	4bb2      	ldr	r3, [pc, #712]	; (80085a4 <_dtoa_r+0x61c>)
 80082dc:	ec51 0b19 	vmov	r0, r1, d9
 80082e0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80082e4:	f7f8 fab2 	bl	800084c <__aeabi_ddiv>
 80082e8:	f007 070f 	and.w	r7, r7, #15
 80082ec:	4682      	mov	sl, r0
 80082ee:	468b      	mov	fp, r1
 80082f0:	2503      	movs	r5, #3
 80082f2:	4eac      	ldr	r6, [pc, #688]	; (80085a4 <_dtoa_r+0x61c>)
 80082f4:	b957      	cbnz	r7, 800830c <_dtoa_r+0x384>
 80082f6:	4642      	mov	r2, r8
 80082f8:	464b      	mov	r3, r9
 80082fa:	4650      	mov	r0, sl
 80082fc:	4659      	mov	r1, fp
 80082fe:	f7f8 faa5 	bl	800084c <__aeabi_ddiv>
 8008302:	4682      	mov	sl, r0
 8008304:	468b      	mov	fp, r1
 8008306:	e028      	b.n	800835a <_dtoa_r+0x3d2>
 8008308:	2502      	movs	r5, #2
 800830a:	e7f2      	b.n	80082f2 <_dtoa_r+0x36a>
 800830c:	07f9      	lsls	r1, r7, #31
 800830e:	d508      	bpl.n	8008322 <_dtoa_r+0x39a>
 8008310:	4640      	mov	r0, r8
 8008312:	4649      	mov	r1, r9
 8008314:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008318:	f7f8 f96e 	bl	80005f8 <__aeabi_dmul>
 800831c:	3501      	adds	r5, #1
 800831e:	4680      	mov	r8, r0
 8008320:	4689      	mov	r9, r1
 8008322:	107f      	asrs	r7, r7, #1
 8008324:	3608      	adds	r6, #8
 8008326:	e7e5      	b.n	80082f4 <_dtoa_r+0x36c>
 8008328:	f000 809b 	beq.w	8008462 <_dtoa_r+0x4da>
 800832c:	9b00      	ldr	r3, [sp, #0]
 800832e:	4f9d      	ldr	r7, [pc, #628]	; (80085a4 <_dtoa_r+0x61c>)
 8008330:	425e      	negs	r6, r3
 8008332:	4b9b      	ldr	r3, [pc, #620]	; (80085a0 <_dtoa_r+0x618>)
 8008334:	f006 020f 	and.w	r2, r6, #15
 8008338:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800833c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008340:	ec51 0b19 	vmov	r0, r1, d9
 8008344:	f7f8 f958 	bl	80005f8 <__aeabi_dmul>
 8008348:	1136      	asrs	r6, r6, #4
 800834a:	4682      	mov	sl, r0
 800834c:	468b      	mov	fp, r1
 800834e:	2300      	movs	r3, #0
 8008350:	2502      	movs	r5, #2
 8008352:	2e00      	cmp	r6, #0
 8008354:	d17a      	bne.n	800844c <_dtoa_r+0x4c4>
 8008356:	2b00      	cmp	r3, #0
 8008358:	d1d3      	bne.n	8008302 <_dtoa_r+0x37a>
 800835a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800835c:	2b00      	cmp	r3, #0
 800835e:	f000 8082 	beq.w	8008466 <_dtoa_r+0x4de>
 8008362:	4b91      	ldr	r3, [pc, #580]	; (80085a8 <_dtoa_r+0x620>)
 8008364:	2200      	movs	r2, #0
 8008366:	4650      	mov	r0, sl
 8008368:	4659      	mov	r1, fp
 800836a:	f7f8 fbb7 	bl	8000adc <__aeabi_dcmplt>
 800836e:	2800      	cmp	r0, #0
 8008370:	d079      	beq.n	8008466 <_dtoa_r+0x4de>
 8008372:	9b03      	ldr	r3, [sp, #12]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d076      	beq.n	8008466 <_dtoa_r+0x4de>
 8008378:	9b02      	ldr	r3, [sp, #8]
 800837a:	2b00      	cmp	r3, #0
 800837c:	dd36      	ble.n	80083ec <_dtoa_r+0x464>
 800837e:	9b00      	ldr	r3, [sp, #0]
 8008380:	4650      	mov	r0, sl
 8008382:	4659      	mov	r1, fp
 8008384:	1e5f      	subs	r7, r3, #1
 8008386:	2200      	movs	r2, #0
 8008388:	4b88      	ldr	r3, [pc, #544]	; (80085ac <_dtoa_r+0x624>)
 800838a:	f7f8 f935 	bl	80005f8 <__aeabi_dmul>
 800838e:	9e02      	ldr	r6, [sp, #8]
 8008390:	4682      	mov	sl, r0
 8008392:	468b      	mov	fp, r1
 8008394:	3501      	adds	r5, #1
 8008396:	4628      	mov	r0, r5
 8008398:	f7f8 f8c4 	bl	8000524 <__aeabi_i2d>
 800839c:	4652      	mov	r2, sl
 800839e:	465b      	mov	r3, fp
 80083a0:	f7f8 f92a 	bl	80005f8 <__aeabi_dmul>
 80083a4:	4b82      	ldr	r3, [pc, #520]	; (80085b0 <_dtoa_r+0x628>)
 80083a6:	2200      	movs	r2, #0
 80083a8:	f7f7 ff70 	bl	800028c <__adddf3>
 80083ac:	46d0      	mov	r8, sl
 80083ae:	46d9      	mov	r9, fp
 80083b0:	4682      	mov	sl, r0
 80083b2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80083b6:	2e00      	cmp	r6, #0
 80083b8:	d158      	bne.n	800846c <_dtoa_r+0x4e4>
 80083ba:	4b7e      	ldr	r3, [pc, #504]	; (80085b4 <_dtoa_r+0x62c>)
 80083bc:	2200      	movs	r2, #0
 80083be:	4640      	mov	r0, r8
 80083c0:	4649      	mov	r1, r9
 80083c2:	f7f7 ff61 	bl	8000288 <__aeabi_dsub>
 80083c6:	4652      	mov	r2, sl
 80083c8:	465b      	mov	r3, fp
 80083ca:	4680      	mov	r8, r0
 80083cc:	4689      	mov	r9, r1
 80083ce:	f7f8 fba3 	bl	8000b18 <__aeabi_dcmpgt>
 80083d2:	2800      	cmp	r0, #0
 80083d4:	f040 8295 	bne.w	8008902 <_dtoa_r+0x97a>
 80083d8:	4652      	mov	r2, sl
 80083da:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80083de:	4640      	mov	r0, r8
 80083e0:	4649      	mov	r1, r9
 80083e2:	f7f8 fb7b 	bl	8000adc <__aeabi_dcmplt>
 80083e6:	2800      	cmp	r0, #0
 80083e8:	f040 8289 	bne.w	80088fe <_dtoa_r+0x976>
 80083ec:	ec5b ab19 	vmov	sl, fp, d9
 80083f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	f2c0 8148 	blt.w	8008688 <_dtoa_r+0x700>
 80083f8:	9a00      	ldr	r2, [sp, #0]
 80083fa:	2a0e      	cmp	r2, #14
 80083fc:	f300 8144 	bgt.w	8008688 <_dtoa_r+0x700>
 8008400:	4b67      	ldr	r3, [pc, #412]	; (80085a0 <_dtoa_r+0x618>)
 8008402:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008406:	e9d3 8900 	ldrd	r8, r9, [r3]
 800840a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800840c:	2b00      	cmp	r3, #0
 800840e:	f280 80d5 	bge.w	80085bc <_dtoa_r+0x634>
 8008412:	9b03      	ldr	r3, [sp, #12]
 8008414:	2b00      	cmp	r3, #0
 8008416:	f300 80d1 	bgt.w	80085bc <_dtoa_r+0x634>
 800841a:	f040 826f 	bne.w	80088fc <_dtoa_r+0x974>
 800841e:	4b65      	ldr	r3, [pc, #404]	; (80085b4 <_dtoa_r+0x62c>)
 8008420:	2200      	movs	r2, #0
 8008422:	4640      	mov	r0, r8
 8008424:	4649      	mov	r1, r9
 8008426:	f7f8 f8e7 	bl	80005f8 <__aeabi_dmul>
 800842a:	4652      	mov	r2, sl
 800842c:	465b      	mov	r3, fp
 800842e:	f7f8 fb69 	bl	8000b04 <__aeabi_dcmpge>
 8008432:	9e03      	ldr	r6, [sp, #12]
 8008434:	4637      	mov	r7, r6
 8008436:	2800      	cmp	r0, #0
 8008438:	f040 8245 	bne.w	80088c6 <_dtoa_r+0x93e>
 800843c:	9d01      	ldr	r5, [sp, #4]
 800843e:	2331      	movs	r3, #49	; 0x31
 8008440:	f805 3b01 	strb.w	r3, [r5], #1
 8008444:	9b00      	ldr	r3, [sp, #0]
 8008446:	3301      	adds	r3, #1
 8008448:	9300      	str	r3, [sp, #0]
 800844a:	e240      	b.n	80088ce <_dtoa_r+0x946>
 800844c:	07f2      	lsls	r2, r6, #31
 800844e:	d505      	bpl.n	800845c <_dtoa_r+0x4d4>
 8008450:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008454:	f7f8 f8d0 	bl	80005f8 <__aeabi_dmul>
 8008458:	3501      	adds	r5, #1
 800845a:	2301      	movs	r3, #1
 800845c:	1076      	asrs	r6, r6, #1
 800845e:	3708      	adds	r7, #8
 8008460:	e777      	b.n	8008352 <_dtoa_r+0x3ca>
 8008462:	2502      	movs	r5, #2
 8008464:	e779      	b.n	800835a <_dtoa_r+0x3d2>
 8008466:	9f00      	ldr	r7, [sp, #0]
 8008468:	9e03      	ldr	r6, [sp, #12]
 800846a:	e794      	b.n	8008396 <_dtoa_r+0x40e>
 800846c:	9901      	ldr	r1, [sp, #4]
 800846e:	4b4c      	ldr	r3, [pc, #304]	; (80085a0 <_dtoa_r+0x618>)
 8008470:	4431      	add	r1, r6
 8008472:	910d      	str	r1, [sp, #52]	; 0x34
 8008474:	9908      	ldr	r1, [sp, #32]
 8008476:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800847a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800847e:	2900      	cmp	r1, #0
 8008480:	d043      	beq.n	800850a <_dtoa_r+0x582>
 8008482:	494d      	ldr	r1, [pc, #308]	; (80085b8 <_dtoa_r+0x630>)
 8008484:	2000      	movs	r0, #0
 8008486:	f7f8 f9e1 	bl	800084c <__aeabi_ddiv>
 800848a:	4652      	mov	r2, sl
 800848c:	465b      	mov	r3, fp
 800848e:	f7f7 fefb 	bl	8000288 <__aeabi_dsub>
 8008492:	9d01      	ldr	r5, [sp, #4]
 8008494:	4682      	mov	sl, r0
 8008496:	468b      	mov	fp, r1
 8008498:	4649      	mov	r1, r9
 800849a:	4640      	mov	r0, r8
 800849c:	f7f8 fb5c 	bl	8000b58 <__aeabi_d2iz>
 80084a0:	4606      	mov	r6, r0
 80084a2:	f7f8 f83f 	bl	8000524 <__aeabi_i2d>
 80084a6:	4602      	mov	r2, r0
 80084a8:	460b      	mov	r3, r1
 80084aa:	4640      	mov	r0, r8
 80084ac:	4649      	mov	r1, r9
 80084ae:	f7f7 feeb 	bl	8000288 <__aeabi_dsub>
 80084b2:	3630      	adds	r6, #48	; 0x30
 80084b4:	f805 6b01 	strb.w	r6, [r5], #1
 80084b8:	4652      	mov	r2, sl
 80084ba:	465b      	mov	r3, fp
 80084bc:	4680      	mov	r8, r0
 80084be:	4689      	mov	r9, r1
 80084c0:	f7f8 fb0c 	bl	8000adc <__aeabi_dcmplt>
 80084c4:	2800      	cmp	r0, #0
 80084c6:	d163      	bne.n	8008590 <_dtoa_r+0x608>
 80084c8:	4642      	mov	r2, r8
 80084ca:	464b      	mov	r3, r9
 80084cc:	4936      	ldr	r1, [pc, #216]	; (80085a8 <_dtoa_r+0x620>)
 80084ce:	2000      	movs	r0, #0
 80084d0:	f7f7 feda 	bl	8000288 <__aeabi_dsub>
 80084d4:	4652      	mov	r2, sl
 80084d6:	465b      	mov	r3, fp
 80084d8:	f7f8 fb00 	bl	8000adc <__aeabi_dcmplt>
 80084dc:	2800      	cmp	r0, #0
 80084de:	f040 80b5 	bne.w	800864c <_dtoa_r+0x6c4>
 80084e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80084e4:	429d      	cmp	r5, r3
 80084e6:	d081      	beq.n	80083ec <_dtoa_r+0x464>
 80084e8:	4b30      	ldr	r3, [pc, #192]	; (80085ac <_dtoa_r+0x624>)
 80084ea:	2200      	movs	r2, #0
 80084ec:	4650      	mov	r0, sl
 80084ee:	4659      	mov	r1, fp
 80084f0:	f7f8 f882 	bl	80005f8 <__aeabi_dmul>
 80084f4:	4b2d      	ldr	r3, [pc, #180]	; (80085ac <_dtoa_r+0x624>)
 80084f6:	4682      	mov	sl, r0
 80084f8:	468b      	mov	fp, r1
 80084fa:	4640      	mov	r0, r8
 80084fc:	4649      	mov	r1, r9
 80084fe:	2200      	movs	r2, #0
 8008500:	f7f8 f87a 	bl	80005f8 <__aeabi_dmul>
 8008504:	4680      	mov	r8, r0
 8008506:	4689      	mov	r9, r1
 8008508:	e7c6      	b.n	8008498 <_dtoa_r+0x510>
 800850a:	4650      	mov	r0, sl
 800850c:	4659      	mov	r1, fp
 800850e:	f7f8 f873 	bl	80005f8 <__aeabi_dmul>
 8008512:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008514:	9d01      	ldr	r5, [sp, #4]
 8008516:	930f      	str	r3, [sp, #60]	; 0x3c
 8008518:	4682      	mov	sl, r0
 800851a:	468b      	mov	fp, r1
 800851c:	4649      	mov	r1, r9
 800851e:	4640      	mov	r0, r8
 8008520:	f7f8 fb1a 	bl	8000b58 <__aeabi_d2iz>
 8008524:	4606      	mov	r6, r0
 8008526:	f7f7 fffd 	bl	8000524 <__aeabi_i2d>
 800852a:	3630      	adds	r6, #48	; 0x30
 800852c:	4602      	mov	r2, r0
 800852e:	460b      	mov	r3, r1
 8008530:	4640      	mov	r0, r8
 8008532:	4649      	mov	r1, r9
 8008534:	f7f7 fea8 	bl	8000288 <__aeabi_dsub>
 8008538:	f805 6b01 	strb.w	r6, [r5], #1
 800853c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800853e:	429d      	cmp	r5, r3
 8008540:	4680      	mov	r8, r0
 8008542:	4689      	mov	r9, r1
 8008544:	f04f 0200 	mov.w	r2, #0
 8008548:	d124      	bne.n	8008594 <_dtoa_r+0x60c>
 800854a:	4b1b      	ldr	r3, [pc, #108]	; (80085b8 <_dtoa_r+0x630>)
 800854c:	4650      	mov	r0, sl
 800854e:	4659      	mov	r1, fp
 8008550:	f7f7 fe9c 	bl	800028c <__adddf3>
 8008554:	4602      	mov	r2, r0
 8008556:	460b      	mov	r3, r1
 8008558:	4640      	mov	r0, r8
 800855a:	4649      	mov	r1, r9
 800855c:	f7f8 fadc 	bl	8000b18 <__aeabi_dcmpgt>
 8008560:	2800      	cmp	r0, #0
 8008562:	d173      	bne.n	800864c <_dtoa_r+0x6c4>
 8008564:	4652      	mov	r2, sl
 8008566:	465b      	mov	r3, fp
 8008568:	4913      	ldr	r1, [pc, #76]	; (80085b8 <_dtoa_r+0x630>)
 800856a:	2000      	movs	r0, #0
 800856c:	f7f7 fe8c 	bl	8000288 <__aeabi_dsub>
 8008570:	4602      	mov	r2, r0
 8008572:	460b      	mov	r3, r1
 8008574:	4640      	mov	r0, r8
 8008576:	4649      	mov	r1, r9
 8008578:	f7f8 fab0 	bl	8000adc <__aeabi_dcmplt>
 800857c:	2800      	cmp	r0, #0
 800857e:	f43f af35 	beq.w	80083ec <_dtoa_r+0x464>
 8008582:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008584:	1e6b      	subs	r3, r5, #1
 8008586:	930f      	str	r3, [sp, #60]	; 0x3c
 8008588:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800858c:	2b30      	cmp	r3, #48	; 0x30
 800858e:	d0f8      	beq.n	8008582 <_dtoa_r+0x5fa>
 8008590:	9700      	str	r7, [sp, #0]
 8008592:	e049      	b.n	8008628 <_dtoa_r+0x6a0>
 8008594:	4b05      	ldr	r3, [pc, #20]	; (80085ac <_dtoa_r+0x624>)
 8008596:	f7f8 f82f 	bl	80005f8 <__aeabi_dmul>
 800859a:	4680      	mov	r8, r0
 800859c:	4689      	mov	r9, r1
 800859e:	e7bd      	b.n	800851c <_dtoa_r+0x594>
 80085a0:	0800b7d0 	.word	0x0800b7d0
 80085a4:	0800b7a8 	.word	0x0800b7a8
 80085a8:	3ff00000 	.word	0x3ff00000
 80085ac:	40240000 	.word	0x40240000
 80085b0:	401c0000 	.word	0x401c0000
 80085b4:	40140000 	.word	0x40140000
 80085b8:	3fe00000 	.word	0x3fe00000
 80085bc:	9d01      	ldr	r5, [sp, #4]
 80085be:	4656      	mov	r6, sl
 80085c0:	465f      	mov	r7, fp
 80085c2:	4642      	mov	r2, r8
 80085c4:	464b      	mov	r3, r9
 80085c6:	4630      	mov	r0, r6
 80085c8:	4639      	mov	r1, r7
 80085ca:	f7f8 f93f 	bl	800084c <__aeabi_ddiv>
 80085ce:	f7f8 fac3 	bl	8000b58 <__aeabi_d2iz>
 80085d2:	4682      	mov	sl, r0
 80085d4:	f7f7 ffa6 	bl	8000524 <__aeabi_i2d>
 80085d8:	4642      	mov	r2, r8
 80085da:	464b      	mov	r3, r9
 80085dc:	f7f8 f80c 	bl	80005f8 <__aeabi_dmul>
 80085e0:	4602      	mov	r2, r0
 80085e2:	460b      	mov	r3, r1
 80085e4:	4630      	mov	r0, r6
 80085e6:	4639      	mov	r1, r7
 80085e8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80085ec:	f7f7 fe4c 	bl	8000288 <__aeabi_dsub>
 80085f0:	f805 6b01 	strb.w	r6, [r5], #1
 80085f4:	9e01      	ldr	r6, [sp, #4]
 80085f6:	9f03      	ldr	r7, [sp, #12]
 80085f8:	1bae      	subs	r6, r5, r6
 80085fa:	42b7      	cmp	r7, r6
 80085fc:	4602      	mov	r2, r0
 80085fe:	460b      	mov	r3, r1
 8008600:	d135      	bne.n	800866e <_dtoa_r+0x6e6>
 8008602:	f7f7 fe43 	bl	800028c <__adddf3>
 8008606:	4642      	mov	r2, r8
 8008608:	464b      	mov	r3, r9
 800860a:	4606      	mov	r6, r0
 800860c:	460f      	mov	r7, r1
 800860e:	f7f8 fa83 	bl	8000b18 <__aeabi_dcmpgt>
 8008612:	b9d0      	cbnz	r0, 800864a <_dtoa_r+0x6c2>
 8008614:	4642      	mov	r2, r8
 8008616:	464b      	mov	r3, r9
 8008618:	4630      	mov	r0, r6
 800861a:	4639      	mov	r1, r7
 800861c:	f7f8 fa54 	bl	8000ac8 <__aeabi_dcmpeq>
 8008620:	b110      	cbz	r0, 8008628 <_dtoa_r+0x6a0>
 8008622:	f01a 0f01 	tst.w	sl, #1
 8008626:	d110      	bne.n	800864a <_dtoa_r+0x6c2>
 8008628:	4620      	mov	r0, r4
 800862a:	ee18 1a10 	vmov	r1, s16
 800862e:	f000 fe75 	bl	800931c <_Bfree>
 8008632:	2300      	movs	r3, #0
 8008634:	9800      	ldr	r0, [sp, #0]
 8008636:	702b      	strb	r3, [r5, #0]
 8008638:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800863a:	3001      	adds	r0, #1
 800863c:	6018      	str	r0, [r3, #0]
 800863e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008640:	2b00      	cmp	r3, #0
 8008642:	f43f acf1 	beq.w	8008028 <_dtoa_r+0xa0>
 8008646:	601d      	str	r5, [r3, #0]
 8008648:	e4ee      	b.n	8008028 <_dtoa_r+0xa0>
 800864a:	9f00      	ldr	r7, [sp, #0]
 800864c:	462b      	mov	r3, r5
 800864e:	461d      	mov	r5, r3
 8008650:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008654:	2a39      	cmp	r2, #57	; 0x39
 8008656:	d106      	bne.n	8008666 <_dtoa_r+0x6de>
 8008658:	9a01      	ldr	r2, [sp, #4]
 800865a:	429a      	cmp	r2, r3
 800865c:	d1f7      	bne.n	800864e <_dtoa_r+0x6c6>
 800865e:	9901      	ldr	r1, [sp, #4]
 8008660:	2230      	movs	r2, #48	; 0x30
 8008662:	3701      	adds	r7, #1
 8008664:	700a      	strb	r2, [r1, #0]
 8008666:	781a      	ldrb	r2, [r3, #0]
 8008668:	3201      	adds	r2, #1
 800866a:	701a      	strb	r2, [r3, #0]
 800866c:	e790      	b.n	8008590 <_dtoa_r+0x608>
 800866e:	4ba6      	ldr	r3, [pc, #664]	; (8008908 <_dtoa_r+0x980>)
 8008670:	2200      	movs	r2, #0
 8008672:	f7f7 ffc1 	bl	80005f8 <__aeabi_dmul>
 8008676:	2200      	movs	r2, #0
 8008678:	2300      	movs	r3, #0
 800867a:	4606      	mov	r6, r0
 800867c:	460f      	mov	r7, r1
 800867e:	f7f8 fa23 	bl	8000ac8 <__aeabi_dcmpeq>
 8008682:	2800      	cmp	r0, #0
 8008684:	d09d      	beq.n	80085c2 <_dtoa_r+0x63a>
 8008686:	e7cf      	b.n	8008628 <_dtoa_r+0x6a0>
 8008688:	9a08      	ldr	r2, [sp, #32]
 800868a:	2a00      	cmp	r2, #0
 800868c:	f000 80d7 	beq.w	800883e <_dtoa_r+0x8b6>
 8008690:	9a06      	ldr	r2, [sp, #24]
 8008692:	2a01      	cmp	r2, #1
 8008694:	f300 80ba 	bgt.w	800880c <_dtoa_r+0x884>
 8008698:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800869a:	2a00      	cmp	r2, #0
 800869c:	f000 80b2 	beq.w	8008804 <_dtoa_r+0x87c>
 80086a0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80086a4:	9e07      	ldr	r6, [sp, #28]
 80086a6:	9d04      	ldr	r5, [sp, #16]
 80086a8:	9a04      	ldr	r2, [sp, #16]
 80086aa:	441a      	add	r2, r3
 80086ac:	9204      	str	r2, [sp, #16]
 80086ae:	9a05      	ldr	r2, [sp, #20]
 80086b0:	2101      	movs	r1, #1
 80086b2:	441a      	add	r2, r3
 80086b4:	4620      	mov	r0, r4
 80086b6:	9205      	str	r2, [sp, #20]
 80086b8:	f000 ff32 	bl	8009520 <__i2b>
 80086bc:	4607      	mov	r7, r0
 80086be:	2d00      	cmp	r5, #0
 80086c0:	dd0c      	ble.n	80086dc <_dtoa_r+0x754>
 80086c2:	9b05      	ldr	r3, [sp, #20]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	dd09      	ble.n	80086dc <_dtoa_r+0x754>
 80086c8:	42ab      	cmp	r3, r5
 80086ca:	9a04      	ldr	r2, [sp, #16]
 80086cc:	bfa8      	it	ge
 80086ce:	462b      	movge	r3, r5
 80086d0:	1ad2      	subs	r2, r2, r3
 80086d2:	9204      	str	r2, [sp, #16]
 80086d4:	9a05      	ldr	r2, [sp, #20]
 80086d6:	1aed      	subs	r5, r5, r3
 80086d8:	1ad3      	subs	r3, r2, r3
 80086da:	9305      	str	r3, [sp, #20]
 80086dc:	9b07      	ldr	r3, [sp, #28]
 80086de:	b31b      	cbz	r3, 8008728 <_dtoa_r+0x7a0>
 80086e0:	9b08      	ldr	r3, [sp, #32]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	f000 80af 	beq.w	8008846 <_dtoa_r+0x8be>
 80086e8:	2e00      	cmp	r6, #0
 80086ea:	dd13      	ble.n	8008714 <_dtoa_r+0x78c>
 80086ec:	4639      	mov	r1, r7
 80086ee:	4632      	mov	r2, r6
 80086f0:	4620      	mov	r0, r4
 80086f2:	f000 ffd5 	bl	80096a0 <__pow5mult>
 80086f6:	ee18 2a10 	vmov	r2, s16
 80086fa:	4601      	mov	r1, r0
 80086fc:	4607      	mov	r7, r0
 80086fe:	4620      	mov	r0, r4
 8008700:	f000 ff24 	bl	800954c <__multiply>
 8008704:	ee18 1a10 	vmov	r1, s16
 8008708:	4680      	mov	r8, r0
 800870a:	4620      	mov	r0, r4
 800870c:	f000 fe06 	bl	800931c <_Bfree>
 8008710:	ee08 8a10 	vmov	s16, r8
 8008714:	9b07      	ldr	r3, [sp, #28]
 8008716:	1b9a      	subs	r2, r3, r6
 8008718:	d006      	beq.n	8008728 <_dtoa_r+0x7a0>
 800871a:	ee18 1a10 	vmov	r1, s16
 800871e:	4620      	mov	r0, r4
 8008720:	f000 ffbe 	bl	80096a0 <__pow5mult>
 8008724:	ee08 0a10 	vmov	s16, r0
 8008728:	2101      	movs	r1, #1
 800872a:	4620      	mov	r0, r4
 800872c:	f000 fef8 	bl	8009520 <__i2b>
 8008730:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008732:	2b00      	cmp	r3, #0
 8008734:	4606      	mov	r6, r0
 8008736:	f340 8088 	ble.w	800884a <_dtoa_r+0x8c2>
 800873a:	461a      	mov	r2, r3
 800873c:	4601      	mov	r1, r0
 800873e:	4620      	mov	r0, r4
 8008740:	f000 ffae 	bl	80096a0 <__pow5mult>
 8008744:	9b06      	ldr	r3, [sp, #24]
 8008746:	2b01      	cmp	r3, #1
 8008748:	4606      	mov	r6, r0
 800874a:	f340 8081 	ble.w	8008850 <_dtoa_r+0x8c8>
 800874e:	f04f 0800 	mov.w	r8, #0
 8008752:	6933      	ldr	r3, [r6, #16]
 8008754:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008758:	6918      	ldr	r0, [r3, #16]
 800875a:	f000 fe91 	bl	8009480 <__hi0bits>
 800875e:	f1c0 0020 	rsb	r0, r0, #32
 8008762:	9b05      	ldr	r3, [sp, #20]
 8008764:	4418      	add	r0, r3
 8008766:	f010 001f 	ands.w	r0, r0, #31
 800876a:	f000 8092 	beq.w	8008892 <_dtoa_r+0x90a>
 800876e:	f1c0 0320 	rsb	r3, r0, #32
 8008772:	2b04      	cmp	r3, #4
 8008774:	f340 808a 	ble.w	800888c <_dtoa_r+0x904>
 8008778:	f1c0 001c 	rsb	r0, r0, #28
 800877c:	9b04      	ldr	r3, [sp, #16]
 800877e:	4403      	add	r3, r0
 8008780:	9304      	str	r3, [sp, #16]
 8008782:	9b05      	ldr	r3, [sp, #20]
 8008784:	4403      	add	r3, r0
 8008786:	4405      	add	r5, r0
 8008788:	9305      	str	r3, [sp, #20]
 800878a:	9b04      	ldr	r3, [sp, #16]
 800878c:	2b00      	cmp	r3, #0
 800878e:	dd07      	ble.n	80087a0 <_dtoa_r+0x818>
 8008790:	ee18 1a10 	vmov	r1, s16
 8008794:	461a      	mov	r2, r3
 8008796:	4620      	mov	r0, r4
 8008798:	f000 ffdc 	bl	8009754 <__lshift>
 800879c:	ee08 0a10 	vmov	s16, r0
 80087a0:	9b05      	ldr	r3, [sp, #20]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	dd05      	ble.n	80087b2 <_dtoa_r+0x82a>
 80087a6:	4631      	mov	r1, r6
 80087a8:	461a      	mov	r2, r3
 80087aa:	4620      	mov	r0, r4
 80087ac:	f000 ffd2 	bl	8009754 <__lshift>
 80087b0:	4606      	mov	r6, r0
 80087b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d06e      	beq.n	8008896 <_dtoa_r+0x90e>
 80087b8:	ee18 0a10 	vmov	r0, s16
 80087bc:	4631      	mov	r1, r6
 80087be:	f001 f839 	bl	8009834 <__mcmp>
 80087c2:	2800      	cmp	r0, #0
 80087c4:	da67      	bge.n	8008896 <_dtoa_r+0x90e>
 80087c6:	9b00      	ldr	r3, [sp, #0]
 80087c8:	3b01      	subs	r3, #1
 80087ca:	ee18 1a10 	vmov	r1, s16
 80087ce:	9300      	str	r3, [sp, #0]
 80087d0:	220a      	movs	r2, #10
 80087d2:	2300      	movs	r3, #0
 80087d4:	4620      	mov	r0, r4
 80087d6:	f000 fdc3 	bl	8009360 <__multadd>
 80087da:	9b08      	ldr	r3, [sp, #32]
 80087dc:	ee08 0a10 	vmov	s16, r0
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	f000 81b1 	beq.w	8008b48 <_dtoa_r+0xbc0>
 80087e6:	2300      	movs	r3, #0
 80087e8:	4639      	mov	r1, r7
 80087ea:	220a      	movs	r2, #10
 80087ec:	4620      	mov	r0, r4
 80087ee:	f000 fdb7 	bl	8009360 <__multadd>
 80087f2:	9b02      	ldr	r3, [sp, #8]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	4607      	mov	r7, r0
 80087f8:	f300 808e 	bgt.w	8008918 <_dtoa_r+0x990>
 80087fc:	9b06      	ldr	r3, [sp, #24]
 80087fe:	2b02      	cmp	r3, #2
 8008800:	dc51      	bgt.n	80088a6 <_dtoa_r+0x91e>
 8008802:	e089      	b.n	8008918 <_dtoa_r+0x990>
 8008804:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008806:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800880a:	e74b      	b.n	80086a4 <_dtoa_r+0x71c>
 800880c:	9b03      	ldr	r3, [sp, #12]
 800880e:	1e5e      	subs	r6, r3, #1
 8008810:	9b07      	ldr	r3, [sp, #28]
 8008812:	42b3      	cmp	r3, r6
 8008814:	bfbf      	itttt	lt
 8008816:	9b07      	ldrlt	r3, [sp, #28]
 8008818:	9607      	strlt	r6, [sp, #28]
 800881a:	1af2      	sublt	r2, r6, r3
 800881c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800881e:	bfb6      	itet	lt
 8008820:	189b      	addlt	r3, r3, r2
 8008822:	1b9e      	subge	r6, r3, r6
 8008824:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008826:	9b03      	ldr	r3, [sp, #12]
 8008828:	bfb8      	it	lt
 800882a:	2600      	movlt	r6, #0
 800882c:	2b00      	cmp	r3, #0
 800882e:	bfb7      	itett	lt
 8008830:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008834:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008838:	1a9d      	sublt	r5, r3, r2
 800883a:	2300      	movlt	r3, #0
 800883c:	e734      	b.n	80086a8 <_dtoa_r+0x720>
 800883e:	9e07      	ldr	r6, [sp, #28]
 8008840:	9d04      	ldr	r5, [sp, #16]
 8008842:	9f08      	ldr	r7, [sp, #32]
 8008844:	e73b      	b.n	80086be <_dtoa_r+0x736>
 8008846:	9a07      	ldr	r2, [sp, #28]
 8008848:	e767      	b.n	800871a <_dtoa_r+0x792>
 800884a:	9b06      	ldr	r3, [sp, #24]
 800884c:	2b01      	cmp	r3, #1
 800884e:	dc18      	bgt.n	8008882 <_dtoa_r+0x8fa>
 8008850:	f1ba 0f00 	cmp.w	sl, #0
 8008854:	d115      	bne.n	8008882 <_dtoa_r+0x8fa>
 8008856:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800885a:	b993      	cbnz	r3, 8008882 <_dtoa_r+0x8fa>
 800885c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008860:	0d1b      	lsrs	r3, r3, #20
 8008862:	051b      	lsls	r3, r3, #20
 8008864:	b183      	cbz	r3, 8008888 <_dtoa_r+0x900>
 8008866:	9b04      	ldr	r3, [sp, #16]
 8008868:	3301      	adds	r3, #1
 800886a:	9304      	str	r3, [sp, #16]
 800886c:	9b05      	ldr	r3, [sp, #20]
 800886e:	3301      	adds	r3, #1
 8008870:	9305      	str	r3, [sp, #20]
 8008872:	f04f 0801 	mov.w	r8, #1
 8008876:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008878:	2b00      	cmp	r3, #0
 800887a:	f47f af6a 	bne.w	8008752 <_dtoa_r+0x7ca>
 800887e:	2001      	movs	r0, #1
 8008880:	e76f      	b.n	8008762 <_dtoa_r+0x7da>
 8008882:	f04f 0800 	mov.w	r8, #0
 8008886:	e7f6      	b.n	8008876 <_dtoa_r+0x8ee>
 8008888:	4698      	mov	r8, r3
 800888a:	e7f4      	b.n	8008876 <_dtoa_r+0x8ee>
 800888c:	f43f af7d 	beq.w	800878a <_dtoa_r+0x802>
 8008890:	4618      	mov	r0, r3
 8008892:	301c      	adds	r0, #28
 8008894:	e772      	b.n	800877c <_dtoa_r+0x7f4>
 8008896:	9b03      	ldr	r3, [sp, #12]
 8008898:	2b00      	cmp	r3, #0
 800889a:	dc37      	bgt.n	800890c <_dtoa_r+0x984>
 800889c:	9b06      	ldr	r3, [sp, #24]
 800889e:	2b02      	cmp	r3, #2
 80088a0:	dd34      	ble.n	800890c <_dtoa_r+0x984>
 80088a2:	9b03      	ldr	r3, [sp, #12]
 80088a4:	9302      	str	r3, [sp, #8]
 80088a6:	9b02      	ldr	r3, [sp, #8]
 80088a8:	b96b      	cbnz	r3, 80088c6 <_dtoa_r+0x93e>
 80088aa:	4631      	mov	r1, r6
 80088ac:	2205      	movs	r2, #5
 80088ae:	4620      	mov	r0, r4
 80088b0:	f000 fd56 	bl	8009360 <__multadd>
 80088b4:	4601      	mov	r1, r0
 80088b6:	4606      	mov	r6, r0
 80088b8:	ee18 0a10 	vmov	r0, s16
 80088bc:	f000 ffba 	bl	8009834 <__mcmp>
 80088c0:	2800      	cmp	r0, #0
 80088c2:	f73f adbb 	bgt.w	800843c <_dtoa_r+0x4b4>
 80088c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088c8:	9d01      	ldr	r5, [sp, #4]
 80088ca:	43db      	mvns	r3, r3
 80088cc:	9300      	str	r3, [sp, #0]
 80088ce:	f04f 0800 	mov.w	r8, #0
 80088d2:	4631      	mov	r1, r6
 80088d4:	4620      	mov	r0, r4
 80088d6:	f000 fd21 	bl	800931c <_Bfree>
 80088da:	2f00      	cmp	r7, #0
 80088dc:	f43f aea4 	beq.w	8008628 <_dtoa_r+0x6a0>
 80088e0:	f1b8 0f00 	cmp.w	r8, #0
 80088e4:	d005      	beq.n	80088f2 <_dtoa_r+0x96a>
 80088e6:	45b8      	cmp	r8, r7
 80088e8:	d003      	beq.n	80088f2 <_dtoa_r+0x96a>
 80088ea:	4641      	mov	r1, r8
 80088ec:	4620      	mov	r0, r4
 80088ee:	f000 fd15 	bl	800931c <_Bfree>
 80088f2:	4639      	mov	r1, r7
 80088f4:	4620      	mov	r0, r4
 80088f6:	f000 fd11 	bl	800931c <_Bfree>
 80088fa:	e695      	b.n	8008628 <_dtoa_r+0x6a0>
 80088fc:	2600      	movs	r6, #0
 80088fe:	4637      	mov	r7, r6
 8008900:	e7e1      	b.n	80088c6 <_dtoa_r+0x93e>
 8008902:	9700      	str	r7, [sp, #0]
 8008904:	4637      	mov	r7, r6
 8008906:	e599      	b.n	800843c <_dtoa_r+0x4b4>
 8008908:	40240000 	.word	0x40240000
 800890c:	9b08      	ldr	r3, [sp, #32]
 800890e:	2b00      	cmp	r3, #0
 8008910:	f000 80ca 	beq.w	8008aa8 <_dtoa_r+0xb20>
 8008914:	9b03      	ldr	r3, [sp, #12]
 8008916:	9302      	str	r3, [sp, #8]
 8008918:	2d00      	cmp	r5, #0
 800891a:	dd05      	ble.n	8008928 <_dtoa_r+0x9a0>
 800891c:	4639      	mov	r1, r7
 800891e:	462a      	mov	r2, r5
 8008920:	4620      	mov	r0, r4
 8008922:	f000 ff17 	bl	8009754 <__lshift>
 8008926:	4607      	mov	r7, r0
 8008928:	f1b8 0f00 	cmp.w	r8, #0
 800892c:	d05b      	beq.n	80089e6 <_dtoa_r+0xa5e>
 800892e:	6879      	ldr	r1, [r7, #4]
 8008930:	4620      	mov	r0, r4
 8008932:	f000 fcb3 	bl	800929c <_Balloc>
 8008936:	4605      	mov	r5, r0
 8008938:	b928      	cbnz	r0, 8008946 <_dtoa_r+0x9be>
 800893a:	4b87      	ldr	r3, [pc, #540]	; (8008b58 <_dtoa_r+0xbd0>)
 800893c:	4602      	mov	r2, r0
 800893e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008942:	f7ff bb3b 	b.w	8007fbc <_dtoa_r+0x34>
 8008946:	693a      	ldr	r2, [r7, #16]
 8008948:	3202      	adds	r2, #2
 800894a:	0092      	lsls	r2, r2, #2
 800894c:	f107 010c 	add.w	r1, r7, #12
 8008950:	300c      	adds	r0, #12
 8008952:	f000 fc95 	bl	8009280 <memcpy>
 8008956:	2201      	movs	r2, #1
 8008958:	4629      	mov	r1, r5
 800895a:	4620      	mov	r0, r4
 800895c:	f000 fefa 	bl	8009754 <__lshift>
 8008960:	9b01      	ldr	r3, [sp, #4]
 8008962:	f103 0901 	add.w	r9, r3, #1
 8008966:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800896a:	4413      	add	r3, r2
 800896c:	9305      	str	r3, [sp, #20]
 800896e:	f00a 0301 	and.w	r3, sl, #1
 8008972:	46b8      	mov	r8, r7
 8008974:	9304      	str	r3, [sp, #16]
 8008976:	4607      	mov	r7, r0
 8008978:	4631      	mov	r1, r6
 800897a:	ee18 0a10 	vmov	r0, s16
 800897e:	f7ff fa77 	bl	8007e70 <quorem>
 8008982:	4641      	mov	r1, r8
 8008984:	9002      	str	r0, [sp, #8]
 8008986:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800898a:	ee18 0a10 	vmov	r0, s16
 800898e:	f000 ff51 	bl	8009834 <__mcmp>
 8008992:	463a      	mov	r2, r7
 8008994:	9003      	str	r0, [sp, #12]
 8008996:	4631      	mov	r1, r6
 8008998:	4620      	mov	r0, r4
 800899a:	f000 ff67 	bl	800986c <__mdiff>
 800899e:	68c2      	ldr	r2, [r0, #12]
 80089a0:	f109 3bff 	add.w	fp, r9, #4294967295
 80089a4:	4605      	mov	r5, r0
 80089a6:	bb02      	cbnz	r2, 80089ea <_dtoa_r+0xa62>
 80089a8:	4601      	mov	r1, r0
 80089aa:	ee18 0a10 	vmov	r0, s16
 80089ae:	f000 ff41 	bl	8009834 <__mcmp>
 80089b2:	4602      	mov	r2, r0
 80089b4:	4629      	mov	r1, r5
 80089b6:	4620      	mov	r0, r4
 80089b8:	9207      	str	r2, [sp, #28]
 80089ba:	f000 fcaf 	bl	800931c <_Bfree>
 80089be:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80089c2:	ea43 0102 	orr.w	r1, r3, r2
 80089c6:	9b04      	ldr	r3, [sp, #16]
 80089c8:	430b      	orrs	r3, r1
 80089ca:	464d      	mov	r5, r9
 80089cc:	d10f      	bne.n	80089ee <_dtoa_r+0xa66>
 80089ce:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80089d2:	d02a      	beq.n	8008a2a <_dtoa_r+0xaa2>
 80089d4:	9b03      	ldr	r3, [sp, #12]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	dd02      	ble.n	80089e0 <_dtoa_r+0xa58>
 80089da:	9b02      	ldr	r3, [sp, #8]
 80089dc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80089e0:	f88b a000 	strb.w	sl, [fp]
 80089e4:	e775      	b.n	80088d2 <_dtoa_r+0x94a>
 80089e6:	4638      	mov	r0, r7
 80089e8:	e7ba      	b.n	8008960 <_dtoa_r+0x9d8>
 80089ea:	2201      	movs	r2, #1
 80089ec:	e7e2      	b.n	80089b4 <_dtoa_r+0xa2c>
 80089ee:	9b03      	ldr	r3, [sp, #12]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	db04      	blt.n	80089fe <_dtoa_r+0xa76>
 80089f4:	9906      	ldr	r1, [sp, #24]
 80089f6:	430b      	orrs	r3, r1
 80089f8:	9904      	ldr	r1, [sp, #16]
 80089fa:	430b      	orrs	r3, r1
 80089fc:	d122      	bne.n	8008a44 <_dtoa_r+0xabc>
 80089fe:	2a00      	cmp	r2, #0
 8008a00:	ddee      	ble.n	80089e0 <_dtoa_r+0xa58>
 8008a02:	ee18 1a10 	vmov	r1, s16
 8008a06:	2201      	movs	r2, #1
 8008a08:	4620      	mov	r0, r4
 8008a0a:	f000 fea3 	bl	8009754 <__lshift>
 8008a0e:	4631      	mov	r1, r6
 8008a10:	ee08 0a10 	vmov	s16, r0
 8008a14:	f000 ff0e 	bl	8009834 <__mcmp>
 8008a18:	2800      	cmp	r0, #0
 8008a1a:	dc03      	bgt.n	8008a24 <_dtoa_r+0xa9c>
 8008a1c:	d1e0      	bne.n	80089e0 <_dtoa_r+0xa58>
 8008a1e:	f01a 0f01 	tst.w	sl, #1
 8008a22:	d0dd      	beq.n	80089e0 <_dtoa_r+0xa58>
 8008a24:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008a28:	d1d7      	bne.n	80089da <_dtoa_r+0xa52>
 8008a2a:	2339      	movs	r3, #57	; 0x39
 8008a2c:	f88b 3000 	strb.w	r3, [fp]
 8008a30:	462b      	mov	r3, r5
 8008a32:	461d      	mov	r5, r3
 8008a34:	3b01      	subs	r3, #1
 8008a36:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008a3a:	2a39      	cmp	r2, #57	; 0x39
 8008a3c:	d071      	beq.n	8008b22 <_dtoa_r+0xb9a>
 8008a3e:	3201      	adds	r2, #1
 8008a40:	701a      	strb	r2, [r3, #0]
 8008a42:	e746      	b.n	80088d2 <_dtoa_r+0x94a>
 8008a44:	2a00      	cmp	r2, #0
 8008a46:	dd07      	ble.n	8008a58 <_dtoa_r+0xad0>
 8008a48:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008a4c:	d0ed      	beq.n	8008a2a <_dtoa_r+0xaa2>
 8008a4e:	f10a 0301 	add.w	r3, sl, #1
 8008a52:	f88b 3000 	strb.w	r3, [fp]
 8008a56:	e73c      	b.n	80088d2 <_dtoa_r+0x94a>
 8008a58:	9b05      	ldr	r3, [sp, #20]
 8008a5a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008a5e:	4599      	cmp	r9, r3
 8008a60:	d047      	beq.n	8008af2 <_dtoa_r+0xb6a>
 8008a62:	ee18 1a10 	vmov	r1, s16
 8008a66:	2300      	movs	r3, #0
 8008a68:	220a      	movs	r2, #10
 8008a6a:	4620      	mov	r0, r4
 8008a6c:	f000 fc78 	bl	8009360 <__multadd>
 8008a70:	45b8      	cmp	r8, r7
 8008a72:	ee08 0a10 	vmov	s16, r0
 8008a76:	f04f 0300 	mov.w	r3, #0
 8008a7a:	f04f 020a 	mov.w	r2, #10
 8008a7e:	4641      	mov	r1, r8
 8008a80:	4620      	mov	r0, r4
 8008a82:	d106      	bne.n	8008a92 <_dtoa_r+0xb0a>
 8008a84:	f000 fc6c 	bl	8009360 <__multadd>
 8008a88:	4680      	mov	r8, r0
 8008a8a:	4607      	mov	r7, r0
 8008a8c:	f109 0901 	add.w	r9, r9, #1
 8008a90:	e772      	b.n	8008978 <_dtoa_r+0x9f0>
 8008a92:	f000 fc65 	bl	8009360 <__multadd>
 8008a96:	4639      	mov	r1, r7
 8008a98:	4680      	mov	r8, r0
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	220a      	movs	r2, #10
 8008a9e:	4620      	mov	r0, r4
 8008aa0:	f000 fc5e 	bl	8009360 <__multadd>
 8008aa4:	4607      	mov	r7, r0
 8008aa6:	e7f1      	b.n	8008a8c <_dtoa_r+0xb04>
 8008aa8:	9b03      	ldr	r3, [sp, #12]
 8008aaa:	9302      	str	r3, [sp, #8]
 8008aac:	9d01      	ldr	r5, [sp, #4]
 8008aae:	ee18 0a10 	vmov	r0, s16
 8008ab2:	4631      	mov	r1, r6
 8008ab4:	f7ff f9dc 	bl	8007e70 <quorem>
 8008ab8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008abc:	9b01      	ldr	r3, [sp, #4]
 8008abe:	f805 ab01 	strb.w	sl, [r5], #1
 8008ac2:	1aea      	subs	r2, r5, r3
 8008ac4:	9b02      	ldr	r3, [sp, #8]
 8008ac6:	4293      	cmp	r3, r2
 8008ac8:	dd09      	ble.n	8008ade <_dtoa_r+0xb56>
 8008aca:	ee18 1a10 	vmov	r1, s16
 8008ace:	2300      	movs	r3, #0
 8008ad0:	220a      	movs	r2, #10
 8008ad2:	4620      	mov	r0, r4
 8008ad4:	f000 fc44 	bl	8009360 <__multadd>
 8008ad8:	ee08 0a10 	vmov	s16, r0
 8008adc:	e7e7      	b.n	8008aae <_dtoa_r+0xb26>
 8008ade:	9b02      	ldr	r3, [sp, #8]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	bfc8      	it	gt
 8008ae4:	461d      	movgt	r5, r3
 8008ae6:	9b01      	ldr	r3, [sp, #4]
 8008ae8:	bfd8      	it	le
 8008aea:	2501      	movle	r5, #1
 8008aec:	441d      	add	r5, r3
 8008aee:	f04f 0800 	mov.w	r8, #0
 8008af2:	ee18 1a10 	vmov	r1, s16
 8008af6:	2201      	movs	r2, #1
 8008af8:	4620      	mov	r0, r4
 8008afa:	f000 fe2b 	bl	8009754 <__lshift>
 8008afe:	4631      	mov	r1, r6
 8008b00:	ee08 0a10 	vmov	s16, r0
 8008b04:	f000 fe96 	bl	8009834 <__mcmp>
 8008b08:	2800      	cmp	r0, #0
 8008b0a:	dc91      	bgt.n	8008a30 <_dtoa_r+0xaa8>
 8008b0c:	d102      	bne.n	8008b14 <_dtoa_r+0xb8c>
 8008b0e:	f01a 0f01 	tst.w	sl, #1
 8008b12:	d18d      	bne.n	8008a30 <_dtoa_r+0xaa8>
 8008b14:	462b      	mov	r3, r5
 8008b16:	461d      	mov	r5, r3
 8008b18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008b1c:	2a30      	cmp	r2, #48	; 0x30
 8008b1e:	d0fa      	beq.n	8008b16 <_dtoa_r+0xb8e>
 8008b20:	e6d7      	b.n	80088d2 <_dtoa_r+0x94a>
 8008b22:	9a01      	ldr	r2, [sp, #4]
 8008b24:	429a      	cmp	r2, r3
 8008b26:	d184      	bne.n	8008a32 <_dtoa_r+0xaaa>
 8008b28:	9b00      	ldr	r3, [sp, #0]
 8008b2a:	3301      	adds	r3, #1
 8008b2c:	9300      	str	r3, [sp, #0]
 8008b2e:	2331      	movs	r3, #49	; 0x31
 8008b30:	7013      	strb	r3, [r2, #0]
 8008b32:	e6ce      	b.n	80088d2 <_dtoa_r+0x94a>
 8008b34:	4b09      	ldr	r3, [pc, #36]	; (8008b5c <_dtoa_r+0xbd4>)
 8008b36:	f7ff ba95 	b.w	8008064 <_dtoa_r+0xdc>
 8008b3a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	f47f aa6e 	bne.w	800801e <_dtoa_r+0x96>
 8008b42:	4b07      	ldr	r3, [pc, #28]	; (8008b60 <_dtoa_r+0xbd8>)
 8008b44:	f7ff ba8e 	b.w	8008064 <_dtoa_r+0xdc>
 8008b48:	9b02      	ldr	r3, [sp, #8]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	dcae      	bgt.n	8008aac <_dtoa_r+0xb24>
 8008b4e:	9b06      	ldr	r3, [sp, #24]
 8008b50:	2b02      	cmp	r3, #2
 8008b52:	f73f aea8 	bgt.w	80088a6 <_dtoa_r+0x91e>
 8008b56:	e7a9      	b.n	8008aac <_dtoa_r+0xb24>
 8008b58:	0800b6c0 	.word	0x0800b6c0
 8008b5c:	0800b4c4 	.word	0x0800b4c4
 8008b60:	0800b641 	.word	0x0800b641

08008b64 <rshift>:
 8008b64:	6903      	ldr	r3, [r0, #16]
 8008b66:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008b6a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008b6e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008b72:	f100 0414 	add.w	r4, r0, #20
 8008b76:	dd45      	ble.n	8008c04 <rshift+0xa0>
 8008b78:	f011 011f 	ands.w	r1, r1, #31
 8008b7c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008b80:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008b84:	d10c      	bne.n	8008ba0 <rshift+0x3c>
 8008b86:	f100 0710 	add.w	r7, r0, #16
 8008b8a:	4629      	mov	r1, r5
 8008b8c:	42b1      	cmp	r1, r6
 8008b8e:	d334      	bcc.n	8008bfa <rshift+0x96>
 8008b90:	1a9b      	subs	r3, r3, r2
 8008b92:	009b      	lsls	r3, r3, #2
 8008b94:	1eea      	subs	r2, r5, #3
 8008b96:	4296      	cmp	r6, r2
 8008b98:	bf38      	it	cc
 8008b9a:	2300      	movcc	r3, #0
 8008b9c:	4423      	add	r3, r4
 8008b9e:	e015      	b.n	8008bcc <rshift+0x68>
 8008ba0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008ba4:	f1c1 0820 	rsb	r8, r1, #32
 8008ba8:	40cf      	lsrs	r7, r1
 8008baa:	f105 0e04 	add.w	lr, r5, #4
 8008bae:	46a1      	mov	r9, r4
 8008bb0:	4576      	cmp	r6, lr
 8008bb2:	46f4      	mov	ip, lr
 8008bb4:	d815      	bhi.n	8008be2 <rshift+0x7e>
 8008bb6:	1a9a      	subs	r2, r3, r2
 8008bb8:	0092      	lsls	r2, r2, #2
 8008bba:	3a04      	subs	r2, #4
 8008bbc:	3501      	adds	r5, #1
 8008bbe:	42ae      	cmp	r6, r5
 8008bc0:	bf38      	it	cc
 8008bc2:	2200      	movcc	r2, #0
 8008bc4:	18a3      	adds	r3, r4, r2
 8008bc6:	50a7      	str	r7, [r4, r2]
 8008bc8:	b107      	cbz	r7, 8008bcc <rshift+0x68>
 8008bca:	3304      	adds	r3, #4
 8008bcc:	1b1a      	subs	r2, r3, r4
 8008bce:	42a3      	cmp	r3, r4
 8008bd0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008bd4:	bf08      	it	eq
 8008bd6:	2300      	moveq	r3, #0
 8008bd8:	6102      	str	r2, [r0, #16]
 8008bda:	bf08      	it	eq
 8008bdc:	6143      	streq	r3, [r0, #20]
 8008bde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008be2:	f8dc c000 	ldr.w	ip, [ip]
 8008be6:	fa0c fc08 	lsl.w	ip, ip, r8
 8008bea:	ea4c 0707 	orr.w	r7, ip, r7
 8008bee:	f849 7b04 	str.w	r7, [r9], #4
 8008bf2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008bf6:	40cf      	lsrs	r7, r1
 8008bf8:	e7da      	b.n	8008bb0 <rshift+0x4c>
 8008bfa:	f851 cb04 	ldr.w	ip, [r1], #4
 8008bfe:	f847 cf04 	str.w	ip, [r7, #4]!
 8008c02:	e7c3      	b.n	8008b8c <rshift+0x28>
 8008c04:	4623      	mov	r3, r4
 8008c06:	e7e1      	b.n	8008bcc <rshift+0x68>

08008c08 <__hexdig_fun>:
 8008c08:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008c0c:	2b09      	cmp	r3, #9
 8008c0e:	d802      	bhi.n	8008c16 <__hexdig_fun+0xe>
 8008c10:	3820      	subs	r0, #32
 8008c12:	b2c0      	uxtb	r0, r0
 8008c14:	4770      	bx	lr
 8008c16:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008c1a:	2b05      	cmp	r3, #5
 8008c1c:	d801      	bhi.n	8008c22 <__hexdig_fun+0x1a>
 8008c1e:	3847      	subs	r0, #71	; 0x47
 8008c20:	e7f7      	b.n	8008c12 <__hexdig_fun+0xa>
 8008c22:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008c26:	2b05      	cmp	r3, #5
 8008c28:	d801      	bhi.n	8008c2e <__hexdig_fun+0x26>
 8008c2a:	3827      	subs	r0, #39	; 0x27
 8008c2c:	e7f1      	b.n	8008c12 <__hexdig_fun+0xa>
 8008c2e:	2000      	movs	r0, #0
 8008c30:	4770      	bx	lr
	...

08008c34 <__gethex>:
 8008c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c38:	ed2d 8b02 	vpush	{d8}
 8008c3c:	b089      	sub	sp, #36	; 0x24
 8008c3e:	ee08 0a10 	vmov	s16, r0
 8008c42:	9304      	str	r3, [sp, #16]
 8008c44:	4bb4      	ldr	r3, [pc, #720]	; (8008f18 <__gethex+0x2e4>)
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	9301      	str	r3, [sp, #4]
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	468b      	mov	fp, r1
 8008c4e:	4690      	mov	r8, r2
 8008c50:	f7f7 fabe 	bl	80001d0 <strlen>
 8008c54:	9b01      	ldr	r3, [sp, #4]
 8008c56:	f8db 2000 	ldr.w	r2, [fp]
 8008c5a:	4403      	add	r3, r0
 8008c5c:	4682      	mov	sl, r0
 8008c5e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008c62:	9305      	str	r3, [sp, #20]
 8008c64:	1c93      	adds	r3, r2, #2
 8008c66:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008c6a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008c6e:	32fe      	adds	r2, #254	; 0xfe
 8008c70:	18d1      	adds	r1, r2, r3
 8008c72:	461f      	mov	r7, r3
 8008c74:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008c78:	9100      	str	r1, [sp, #0]
 8008c7a:	2830      	cmp	r0, #48	; 0x30
 8008c7c:	d0f8      	beq.n	8008c70 <__gethex+0x3c>
 8008c7e:	f7ff ffc3 	bl	8008c08 <__hexdig_fun>
 8008c82:	4604      	mov	r4, r0
 8008c84:	2800      	cmp	r0, #0
 8008c86:	d13a      	bne.n	8008cfe <__gethex+0xca>
 8008c88:	9901      	ldr	r1, [sp, #4]
 8008c8a:	4652      	mov	r2, sl
 8008c8c:	4638      	mov	r0, r7
 8008c8e:	f001 fa33 	bl	800a0f8 <strncmp>
 8008c92:	4605      	mov	r5, r0
 8008c94:	2800      	cmp	r0, #0
 8008c96:	d168      	bne.n	8008d6a <__gethex+0x136>
 8008c98:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008c9c:	eb07 060a 	add.w	r6, r7, sl
 8008ca0:	f7ff ffb2 	bl	8008c08 <__hexdig_fun>
 8008ca4:	2800      	cmp	r0, #0
 8008ca6:	d062      	beq.n	8008d6e <__gethex+0x13a>
 8008ca8:	4633      	mov	r3, r6
 8008caa:	7818      	ldrb	r0, [r3, #0]
 8008cac:	2830      	cmp	r0, #48	; 0x30
 8008cae:	461f      	mov	r7, r3
 8008cb0:	f103 0301 	add.w	r3, r3, #1
 8008cb4:	d0f9      	beq.n	8008caa <__gethex+0x76>
 8008cb6:	f7ff ffa7 	bl	8008c08 <__hexdig_fun>
 8008cba:	2301      	movs	r3, #1
 8008cbc:	fab0 f480 	clz	r4, r0
 8008cc0:	0964      	lsrs	r4, r4, #5
 8008cc2:	4635      	mov	r5, r6
 8008cc4:	9300      	str	r3, [sp, #0]
 8008cc6:	463a      	mov	r2, r7
 8008cc8:	4616      	mov	r6, r2
 8008cca:	3201      	adds	r2, #1
 8008ccc:	7830      	ldrb	r0, [r6, #0]
 8008cce:	f7ff ff9b 	bl	8008c08 <__hexdig_fun>
 8008cd2:	2800      	cmp	r0, #0
 8008cd4:	d1f8      	bne.n	8008cc8 <__gethex+0x94>
 8008cd6:	9901      	ldr	r1, [sp, #4]
 8008cd8:	4652      	mov	r2, sl
 8008cda:	4630      	mov	r0, r6
 8008cdc:	f001 fa0c 	bl	800a0f8 <strncmp>
 8008ce0:	b980      	cbnz	r0, 8008d04 <__gethex+0xd0>
 8008ce2:	b94d      	cbnz	r5, 8008cf8 <__gethex+0xc4>
 8008ce4:	eb06 050a 	add.w	r5, r6, sl
 8008ce8:	462a      	mov	r2, r5
 8008cea:	4616      	mov	r6, r2
 8008cec:	3201      	adds	r2, #1
 8008cee:	7830      	ldrb	r0, [r6, #0]
 8008cf0:	f7ff ff8a 	bl	8008c08 <__hexdig_fun>
 8008cf4:	2800      	cmp	r0, #0
 8008cf6:	d1f8      	bne.n	8008cea <__gethex+0xb6>
 8008cf8:	1bad      	subs	r5, r5, r6
 8008cfa:	00ad      	lsls	r5, r5, #2
 8008cfc:	e004      	b.n	8008d08 <__gethex+0xd4>
 8008cfe:	2400      	movs	r4, #0
 8008d00:	4625      	mov	r5, r4
 8008d02:	e7e0      	b.n	8008cc6 <__gethex+0x92>
 8008d04:	2d00      	cmp	r5, #0
 8008d06:	d1f7      	bne.n	8008cf8 <__gethex+0xc4>
 8008d08:	7833      	ldrb	r3, [r6, #0]
 8008d0a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008d0e:	2b50      	cmp	r3, #80	; 0x50
 8008d10:	d13b      	bne.n	8008d8a <__gethex+0x156>
 8008d12:	7873      	ldrb	r3, [r6, #1]
 8008d14:	2b2b      	cmp	r3, #43	; 0x2b
 8008d16:	d02c      	beq.n	8008d72 <__gethex+0x13e>
 8008d18:	2b2d      	cmp	r3, #45	; 0x2d
 8008d1a:	d02e      	beq.n	8008d7a <__gethex+0x146>
 8008d1c:	1c71      	adds	r1, r6, #1
 8008d1e:	f04f 0900 	mov.w	r9, #0
 8008d22:	7808      	ldrb	r0, [r1, #0]
 8008d24:	f7ff ff70 	bl	8008c08 <__hexdig_fun>
 8008d28:	1e43      	subs	r3, r0, #1
 8008d2a:	b2db      	uxtb	r3, r3
 8008d2c:	2b18      	cmp	r3, #24
 8008d2e:	d82c      	bhi.n	8008d8a <__gethex+0x156>
 8008d30:	f1a0 0210 	sub.w	r2, r0, #16
 8008d34:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008d38:	f7ff ff66 	bl	8008c08 <__hexdig_fun>
 8008d3c:	1e43      	subs	r3, r0, #1
 8008d3e:	b2db      	uxtb	r3, r3
 8008d40:	2b18      	cmp	r3, #24
 8008d42:	d91d      	bls.n	8008d80 <__gethex+0x14c>
 8008d44:	f1b9 0f00 	cmp.w	r9, #0
 8008d48:	d000      	beq.n	8008d4c <__gethex+0x118>
 8008d4a:	4252      	negs	r2, r2
 8008d4c:	4415      	add	r5, r2
 8008d4e:	f8cb 1000 	str.w	r1, [fp]
 8008d52:	b1e4      	cbz	r4, 8008d8e <__gethex+0x15a>
 8008d54:	9b00      	ldr	r3, [sp, #0]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	bf14      	ite	ne
 8008d5a:	2700      	movne	r7, #0
 8008d5c:	2706      	moveq	r7, #6
 8008d5e:	4638      	mov	r0, r7
 8008d60:	b009      	add	sp, #36	; 0x24
 8008d62:	ecbd 8b02 	vpop	{d8}
 8008d66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d6a:	463e      	mov	r6, r7
 8008d6c:	4625      	mov	r5, r4
 8008d6e:	2401      	movs	r4, #1
 8008d70:	e7ca      	b.n	8008d08 <__gethex+0xd4>
 8008d72:	f04f 0900 	mov.w	r9, #0
 8008d76:	1cb1      	adds	r1, r6, #2
 8008d78:	e7d3      	b.n	8008d22 <__gethex+0xee>
 8008d7a:	f04f 0901 	mov.w	r9, #1
 8008d7e:	e7fa      	b.n	8008d76 <__gethex+0x142>
 8008d80:	230a      	movs	r3, #10
 8008d82:	fb03 0202 	mla	r2, r3, r2, r0
 8008d86:	3a10      	subs	r2, #16
 8008d88:	e7d4      	b.n	8008d34 <__gethex+0x100>
 8008d8a:	4631      	mov	r1, r6
 8008d8c:	e7df      	b.n	8008d4e <__gethex+0x11a>
 8008d8e:	1bf3      	subs	r3, r6, r7
 8008d90:	3b01      	subs	r3, #1
 8008d92:	4621      	mov	r1, r4
 8008d94:	2b07      	cmp	r3, #7
 8008d96:	dc0b      	bgt.n	8008db0 <__gethex+0x17c>
 8008d98:	ee18 0a10 	vmov	r0, s16
 8008d9c:	f000 fa7e 	bl	800929c <_Balloc>
 8008da0:	4604      	mov	r4, r0
 8008da2:	b940      	cbnz	r0, 8008db6 <__gethex+0x182>
 8008da4:	4b5d      	ldr	r3, [pc, #372]	; (8008f1c <__gethex+0x2e8>)
 8008da6:	4602      	mov	r2, r0
 8008da8:	21de      	movs	r1, #222	; 0xde
 8008daa:	485d      	ldr	r0, [pc, #372]	; (8008f20 <__gethex+0x2ec>)
 8008dac:	f001 f9c6 	bl	800a13c <__assert_func>
 8008db0:	3101      	adds	r1, #1
 8008db2:	105b      	asrs	r3, r3, #1
 8008db4:	e7ee      	b.n	8008d94 <__gethex+0x160>
 8008db6:	f100 0914 	add.w	r9, r0, #20
 8008dba:	f04f 0b00 	mov.w	fp, #0
 8008dbe:	f1ca 0301 	rsb	r3, sl, #1
 8008dc2:	f8cd 9008 	str.w	r9, [sp, #8]
 8008dc6:	f8cd b000 	str.w	fp, [sp]
 8008dca:	9306      	str	r3, [sp, #24]
 8008dcc:	42b7      	cmp	r7, r6
 8008dce:	d340      	bcc.n	8008e52 <__gethex+0x21e>
 8008dd0:	9802      	ldr	r0, [sp, #8]
 8008dd2:	9b00      	ldr	r3, [sp, #0]
 8008dd4:	f840 3b04 	str.w	r3, [r0], #4
 8008dd8:	eba0 0009 	sub.w	r0, r0, r9
 8008ddc:	1080      	asrs	r0, r0, #2
 8008dde:	0146      	lsls	r6, r0, #5
 8008de0:	6120      	str	r0, [r4, #16]
 8008de2:	4618      	mov	r0, r3
 8008de4:	f000 fb4c 	bl	8009480 <__hi0bits>
 8008de8:	1a30      	subs	r0, r6, r0
 8008dea:	f8d8 6000 	ldr.w	r6, [r8]
 8008dee:	42b0      	cmp	r0, r6
 8008df0:	dd63      	ble.n	8008eba <__gethex+0x286>
 8008df2:	1b87      	subs	r7, r0, r6
 8008df4:	4639      	mov	r1, r7
 8008df6:	4620      	mov	r0, r4
 8008df8:	f000 fef0 	bl	8009bdc <__any_on>
 8008dfc:	4682      	mov	sl, r0
 8008dfe:	b1a8      	cbz	r0, 8008e2c <__gethex+0x1f8>
 8008e00:	1e7b      	subs	r3, r7, #1
 8008e02:	1159      	asrs	r1, r3, #5
 8008e04:	f003 021f 	and.w	r2, r3, #31
 8008e08:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008e0c:	f04f 0a01 	mov.w	sl, #1
 8008e10:	fa0a f202 	lsl.w	r2, sl, r2
 8008e14:	420a      	tst	r2, r1
 8008e16:	d009      	beq.n	8008e2c <__gethex+0x1f8>
 8008e18:	4553      	cmp	r3, sl
 8008e1a:	dd05      	ble.n	8008e28 <__gethex+0x1f4>
 8008e1c:	1eb9      	subs	r1, r7, #2
 8008e1e:	4620      	mov	r0, r4
 8008e20:	f000 fedc 	bl	8009bdc <__any_on>
 8008e24:	2800      	cmp	r0, #0
 8008e26:	d145      	bne.n	8008eb4 <__gethex+0x280>
 8008e28:	f04f 0a02 	mov.w	sl, #2
 8008e2c:	4639      	mov	r1, r7
 8008e2e:	4620      	mov	r0, r4
 8008e30:	f7ff fe98 	bl	8008b64 <rshift>
 8008e34:	443d      	add	r5, r7
 8008e36:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008e3a:	42ab      	cmp	r3, r5
 8008e3c:	da4c      	bge.n	8008ed8 <__gethex+0x2a4>
 8008e3e:	ee18 0a10 	vmov	r0, s16
 8008e42:	4621      	mov	r1, r4
 8008e44:	f000 fa6a 	bl	800931c <_Bfree>
 8008e48:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	6013      	str	r3, [r2, #0]
 8008e4e:	27a3      	movs	r7, #163	; 0xa3
 8008e50:	e785      	b.n	8008d5e <__gethex+0x12a>
 8008e52:	1e73      	subs	r3, r6, #1
 8008e54:	9a05      	ldr	r2, [sp, #20]
 8008e56:	9303      	str	r3, [sp, #12]
 8008e58:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	d019      	beq.n	8008e94 <__gethex+0x260>
 8008e60:	f1bb 0f20 	cmp.w	fp, #32
 8008e64:	d107      	bne.n	8008e76 <__gethex+0x242>
 8008e66:	9b02      	ldr	r3, [sp, #8]
 8008e68:	9a00      	ldr	r2, [sp, #0]
 8008e6a:	f843 2b04 	str.w	r2, [r3], #4
 8008e6e:	9302      	str	r3, [sp, #8]
 8008e70:	2300      	movs	r3, #0
 8008e72:	9300      	str	r3, [sp, #0]
 8008e74:	469b      	mov	fp, r3
 8008e76:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008e7a:	f7ff fec5 	bl	8008c08 <__hexdig_fun>
 8008e7e:	9b00      	ldr	r3, [sp, #0]
 8008e80:	f000 000f 	and.w	r0, r0, #15
 8008e84:	fa00 f00b 	lsl.w	r0, r0, fp
 8008e88:	4303      	orrs	r3, r0
 8008e8a:	9300      	str	r3, [sp, #0]
 8008e8c:	f10b 0b04 	add.w	fp, fp, #4
 8008e90:	9b03      	ldr	r3, [sp, #12]
 8008e92:	e00d      	b.n	8008eb0 <__gethex+0x27c>
 8008e94:	9b03      	ldr	r3, [sp, #12]
 8008e96:	9a06      	ldr	r2, [sp, #24]
 8008e98:	4413      	add	r3, r2
 8008e9a:	42bb      	cmp	r3, r7
 8008e9c:	d3e0      	bcc.n	8008e60 <__gethex+0x22c>
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	9901      	ldr	r1, [sp, #4]
 8008ea2:	9307      	str	r3, [sp, #28]
 8008ea4:	4652      	mov	r2, sl
 8008ea6:	f001 f927 	bl	800a0f8 <strncmp>
 8008eaa:	9b07      	ldr	r3, [sp, #28]
 8008eac:	2800      	cmp	r0, #0
 8008eae:	d1d7      	bne.n	8008e60 <__gethex+0x22c>
 8008eb0:	461e      	mov	r6, r3
 8008eb2:	e78b      	b.n	8008dcc <__gethex+0x198>
 8008eb4:	f04f 0a03 	mov.w	sl, #3
 8008eb8:	e7b8      	b.n	8008e2c <__gethex+0x1f8>
 8008eba:	da0a      	bge.n	8008ed2 <__gethex+0x29e>
 8008ebc:	1a37      	subs	r7, r6, r0
 8008ebe:	4621      	mov	r1, r4
 8008ec0:	ee18 0a10 	vmov	r0, s16
 8008ec4:	463a      	mov	r2, r7
 8008ec6:	f000 fc45 	bl	8009754 <__lshift>
 8008eca:	1bed      	subs	r5, r5, r7
 8008ecc:	4604      	mov	r4, r0
 8008ece:	f100 0914 	add.w	r9, r0, #20
 8008ed2:	f04f 0a00 	mov.w	sl, #0
 8008ed6:	e7ae      	b.n	8008e36 <__gethex+0x202>
 8008ed8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008edc:	42a8      	cmp	r0, r5
 8008ede:	dd72      	ble.n	8008fc6 <__gethex+0x392>
 8008ee0:	1b45      	subs	r5, r0, r5
 8008ee2:	42ae      	cmp	r6, r5
 8008ee4:	dc36      	bgt.n	8008f54 <__gethex+0x320>
 8008ee6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008eea:	2b02      	cmp	r3, #2
 8008eec:	d02a      	beq.n	8008f44 <__gethex+0x310>
 8008eee:	2b03      	cmp	r3, #3
 8008ef0:	d02c      	beq.n	8008f4c <__gethex+0x318>
 8008ef2:	2b01      	cmp	r3, #1
 8008ef4:	d11c      	bne.n	8008f30 <__gethex+0x2fc>
 8008ef6:	42ae      	cmp	r6, r5
 8008ef8:	d11a      	bne.n	8008f30 <__gethex+0x2fc>
 8008efa:	2e01      	cmp	r6, #1
 8008efc:	d112      	bne.n	8008f24 <__gethex+0x2f0>
 8008efe:	9a04      	ldr	r2, [sp, #16]
 8008f00:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008f04:	6013      	str	r3, [r2, #0]
 8008f06:	2301      	movs	r3, #1
 8008f08:	6123      	str	r3, [r4, #16]
 8008f0a:	f8c9 3000 	str.w	r3, [r9]
 8008f0e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008f10:	2762      	movs	r7, #98	; 0x62
 8008f12:	601c      	str	r4, [r3, #0]
 8008f14:	e723      	b.n	8008d5e <__gethex+0x12a>
 8008f16:	bf00      	nop
 8008f18:	0800b738 	.word	0x0800b738
 8008f1c:	0800b6c0 	.word	0x0800b6c0
 8008f20:	0800b6d1 	.word	0x0800b6d1
 8008f24:	1e71      	subs	r1, r6, #1
 8008f26:	4620      	mov	r0, r4
 8008f28:	f000 fe58 	bl	8009bdc <__any_on>
 8008f2c:	2800      	cmp	r0, #0
 8008f2e:	d1e6      	bne.n	8008efe <__gethex+0x2ca>
 8008f30:	ee18 0a10 	vmov	r0, s16
 8008f34:	4621      	mov	r1, r4
 8008f36:	f000 f9f1 	bl	800931c <_Bfree>
 8008f3a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	6013      	str	r3, [r2, #0]
 8008f40:	2750      	movs	r7, #80	; 0x50
 8008f42:	e70c      	b.n	8008d5e <__gethex+0x12a>
 8008f44:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d1f2      	bne.n	8008f30 <__gethex+0x2fc>
 8008f4a:	e7d8      	b.n	8008efe <__gethex+0x2ca>
 8008f4c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d1d5      	bne.n	8008efe <__gethex+0x2ca>
 8008f52:	e7ed      	b.n	8008f30 <__gethex+0x2fc>
 8008f54:	1e6f      	subs	r7, r5, #1
 8008f56:	f1ba 0f00 	cmp.w	sl, #0
 8008f5a:	d131      	bne.n	8008fc0 <__gethex+0x38c>
 8008f5c:	b127      	cbz	r7, 8008f68 <__gethex+0x334>
 8008f5e:	4639      	mov	r1, r7
 8008f60:	4620      	mov	r0, r4
 8008f62:	f000 fe3b 	bl	8009bdc <__any_on>
 8008f66:	4682      	mov	sl, r0
 8008f68:	117b      	asrs	r3, r7, #5
 8008f6a:	2101      	movs	r1, #1
 8008f6c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008f70:	f007 071f 	and.w	r7, r7, #31
 8008f74:	fa01 f707 	lsl.w	r7, r1, r7
 8008f78:	421f      	tst	r7, r3
 8008f7a:	4629      	mov	r1, r5
 8008f7c:	4620      	mov	r0, r4
 8008f7e:	bf18      	it	ne
 8008f80:	f04a 0a02 	orrne.w	sl, sl, #2
 8008f84:	1b76      	subs	r6, r6, r5
 8008f86:	f7ff fded 	bl	8008b64 <rshift>
 8008f8a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008f8e:	2702      	movs	r7, #2
 8008f90:	f1ba 0f00 	cmp.w	sl, #0
 8008f94:	d048      	beq.n	8009028 <__gethex+0x3f4>
 8008f96:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008f9a:	2b02      	cmp	r3, #2
 8008f9c:	d015      	beq.n	8008fca <__gethex+0x396>
 8008f9e:	2b03      	cmp	r3, #3
 8008fa0:	d017      	beq.n	8008fd2 <__gethex+0x39e>
 8008fa2:	2b01      	cmp	r3, #1
 8008fa4:	d109      	bne.n	8008fba <__gethex+0x386>
 8008fa6:	f01a 0f02 	tst.w	sl, #2
 8008faa:	d006      	beq.n	8008fba <__gethex+0x386>
 8008fac:	f8d9 0000 	ldr.w	r0, [r9]
 8008fb0:	ea4a 0a00 	orr.w	sl, sl, r0
 8008fb4:	f01a 0f01 	tst.w	sl, #1
 8008fb8:	d10e      	bne.n	8008fd8 <__gethex+0x3a4>
 8008fba:	f047 0710 	orr.w	r7, r7, #16
 8008fbe:	e033      	b.n	8009028 <__gethex+0x3f4>
 8008fc0:	f04f 0a01 	mov.w	sl, #1
 8008fc4:	e7d0      	b.n	8008f68 <__gethex+0x334>
 8008fc6:	2701      	movs	r7, #1
 8008fc8:	e7e2      	b.n	8008f90 <__gethex+0x35c>
 8008fca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008fcc:	f1c3 0301 	rsb	r3, r3, #1
 8008fd0:	9315      	str	r3, [sp, #84]	; 0x54
 8008fd2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d0f0      	beq.n	8008fba <__gethex+0x386>
 8008fd8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008fdc:	f104 0314 	add.w	r3, r4, #20
 8008fe0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008fe4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008fe8:	f04f 0c00 	mov.w	ip, #0
 8008fec:	4618      	mov	r0, r3
 8008fee:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ff2:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008ff6:	d01c      	beq.n	8009032 <__gethex+0x3fe>
 8008ff8:	3201      	adds	r2, #1
 8008ffa:	6002      	str	r2, [r0, #0]
 8008ffc:	2f02      	cmp	r7, #2
 8008ffe:	f104 0314 	add.w	r3, r4, #20
 8009002:	d13f      	bne.n	8009084 <__gethex+0x450>
 8009004:	f8d8 2000 	ldr.w	r2, [r8]
 8009008:	3a01      	subs	r2, #1
 800900a:	42b2      	cmp	r2, r6
 800900c:	d10a      	bne.n	8009024 <__gethex+0x3f0>
 800900e:	1171      	asrs	r1, r6, #5
 8009010:	2201      	movs	r2, #1
 8009012:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009016:	f006 061f 	and.w	r6, r6, #31
 800901a:	fa02 f606 	lsl.w	r6, r2, r6
 800901e:	421e      	tst	r6, r3
 8009020:	bf18      	it	ne
 8009022:	4617      	movne	r7, r2
 8009024:	f047 0720 	orr.w	r7, r7, #32
 8009028:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800902a:	601c      	str	r4, [r3, #0]
 800902c:	9b04      	ldr	r3, [sp, #16]
 800902e:	601d      	str	r5, [r3, #0]
 8009030:	e695      	b.n	8008d5e <__gethex+0x12a>
 8009032:	4299      	cmp	r1, r3
 8009034:	f843 cc04 	str.w	ip, [r3, #-4]
 8009038:	d8d8      	bhi.n	8008fec <__gethex+0x3b8>
 800903a:	68a3      	ldr	r3, [r4, #8]
 800903c:	459b      	cmp	fp, r3
 800903e:	db19      	blt.n	8009074 <__gethex+0x440>
 8009040:	6861      	ldr	r1, [r4, #4]
 8009042:	ee18 0a10 	vmov	r0, s16
 8009046:	3101      	adds	r1, #1
 8009048:	f000 f928 	bl	800929c <_Balloc>
 800904c:	4681      	mov	r9, r0
 800904e:	b918      	cbnz	r0, 8009058 <__gethex+0x424>
 8009050:	4b1a      	ldr	r3, [pc, #104]	; (80090bc <__gethex+0x488>)
 8009052:	4602      	mov	r2, r0
 8009054:	2184      	movs	r1, #132	; 0x84
 8009056:	e6a8      	b.n	8008daa <__gethex+0x176>
 8009058:	6922      	ldr	r2, [r4, #16]
 800905a:	3202      	adds	r2, #2
 800905c:	f104 010c 	add.w	r1, r4, #12
 8009060:	0092      	lsls	r2, r2, #2
 8009062:	300c      	adds	r0, #12
 8009064:	f000 f90c 	bl	8009280 <memcpy>
 8009068:	4621      	mov	r1, r4
 800906a:	ee18 0a10 	vmov	r0, s16
 800906e:	f000 f955 	bl	800931c <_Bfree>
 8009072:	464c      	mov	r4, r9
 8009074:	6923      	ldr	r3, [r4, #16]
 8009076:	1c5a      	adds	r2, r3, #1
 8009078:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800907c:	6122      	str	r2, [r4, #16]
 800907e:	2201      	movs	r2, #1
 8009080:	615a      	str	r2, [r3, #20]
 8009082:	e7bb      	b.n	8008ffc <__gethex+0x3c8>
 8009084:	6922      	ldr	r2, [r4, #16]
 8009086:	455a      	cmp	r2, fp
 8009088:	dd0b      	ble.n	80090a2 <__gethex+0x46e>
 800908a:	2101      	movs	r1, #1
 800908c:	4620      	mov	r0, r4
 800908e:	f7ff fd69 	bl	8008b64 <rshift>
 8009092:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009096:	3501      	adds	r5, #1
 8009098:	42ab      	cmp	r3, r5
 800909a:	f6ff aed0 	blt.w	8008e3e <__gethex+0x20a>
 800909e:	2701      	movs	r7, #1
 80090a0:	e7c0      	b.n	8009024 <__gethex+0x3f0>
 80090a2:	f016 061f 	ands.w	r6, r6, #31
 80090a6:	d0fa      	beq.n	800909e <__gethex+0x46a>
 80090a8:	4453      	add	r3, sl
 80090aa:	f1c6 0620 	rsb	r6, r6, #32
 80090ae:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80090b2:	f000 f9e5 	bl	8009480 <__hi0bits>
 80090b6:	42b0      	cmp	r0, r6
 80090b8:	dbe7      	blt.n	800908a <__gethex+0x456>
 80090ba:	e7f0      	b.n	800909e <__gethex+0x46a>
 80090bc:	0800b6c0 	.word	0x0800b6c0

080090c0 <L_shift>:
 80090c0:	f1c2 0208 	rsb	r2, r2, #8
 80090c4:	0092      	lsls	r2, r2, #2
 80090c6:	b570      	push	{r4, r5, r6, lr}
 80090c8:	f1c2 0620 	rsb	r6, r2, #32
 80090cc:	6843      	ldr	r3, [r0, #4]
 80090ce:	6804      	ldr	r4, [r0, #0]
 80090d0:	fa03 f506 	lsl.w	r5, r3, r6
 80090d4:	432c      	orrs	r4, r5
 80090d6:	40d3      	lsrs	r3, r2
 80090d8:	6004      	str	r4, [r0, #0]
 80090da:	f840 3f04 	str.w	r3, [r0, #4]!
 80090de:	4288      	cmp	r0, r1
 80090e0:	d3f4      	bcc.n	80090cc <L_shift+0xc>
 80090e2:	bd70      	pop	{r4, r5, r6, pc}

080090e4 <__match>:
 80090e4:	b530      	push	{r4, r5, lr}
 80090e6:	6803      	ldr	r3, [r0, #0]
 80090e8:	3301      	adds	r3, #1
 80090ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80090ee:	b914      	cbnz	r4, 80090f6 <__match+0x12>
 80090f0:	6003      	str	r3, [r0, #0]
 80090f2:	2001      	movs	r0, #1
 80090f4:	bd30      	pop	{r4, r5, pc}
 80090f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80090fa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80090fe:	2d19      	cmp	r5, #25
 8009100:	bf98      	it	ls
 8009102:	3220      	addls	r2, #32
 8009104:	42a2      	cmp	r2, r4
 8009106:	d0f0      	beq.n	80090ea <__match+0x6>
 8009108:	2000      	movs	r0, #0
 800910a:	e7f3      	b.n	80090f4 <__match+0x10>

0800910c <__hexnan>:
 800910c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009110:	680b      	ldr	r3, [r1, #0]
 8009112:	115e      	asrs	r6, r3, #5
 8009114:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009118:	f013 031f 	ands.w	r3, r3, #31
 800911c:	b087      	sub	sp, #28
 800911e:	bf18      	it	ne
 8009120:	3604      	addne	r6, #4
 8009122:	2500      	movs	r5, #0
 8009124:	1f37      	subs	r7, r6, #4
 8009126:	4690      	mov	r8, r2
 8009128:	6802      	ldr	r2, [r0, #0]
 800912a:	9301      	str	r3, [sp, #4]
 800912c:	4682      	mov	sl, r0
 800912e:	f846 5c04 	str.w	r5, [r6, #-4]
 8009132:	46b9      	mov	r9, r7
 8009134:	463c      	mov	r4, r7
 8009136:	9502      	str	r5, [sp, #8]
 8009138:	46ab      	mov	fp, r5
 800913a:	7851      	ldrb	r1, [r2, #1]
 800913c:	1c53      	adds	r3, r2, #1
 800913e:	9303      	str	r3, [sp, #12]
 8009140:	b341      	cbz	r1, 8009194 <__hexnan+0x88>
 8009142:	4608      	mov	r0, r1
 8009144:	9205      	str	r2, [sp, #20]
 8009146:	9104      	str	r1, [sp, #16]
 8009148:	f7ff fd5e 	bl	8008c08 <__hexdig_fun>
 800914c:	2800      	cmp	r0, #0
 800914e:	d14f      	bne.n	80091f0 <__hexnan+0xe4>
 8009150:	9904      	ldr	r1, [sp, #16]
 8009152:	9a05      	ldr	r2, [sp, #20]
 8009154:	2920      	cmp	r1, #32
 8009156:	d818      	bhi.n	800918a <__hexnan+0x7e>
 8009158:	9b02      	ldr	r3, [sp, #8]
 800915a:	459b      	cmp	fp, r3
 800915c:	dd13      	ble.n	8009186 <__hexnan+0x7a>
 800915e:	454c      	cmp	r4, r9
 8009160:	d206      	bcs.n	8009170 <__hexnan+0x64>
 8009162:	2d07      	cmp	r5, #7
 8009164:	dc04      	bgt.n	8009170 <__hexnan+0x64>
 8009166:	462a      	mov	r2, r5
 8009168:	4649      	mov	r1, r9
 800916a:	4620      	mov	r0, r4
 800916c:	f7ff ffa8 	bl	80090c0 <L_shift>
 8009170:	4544      	cmp	r4, r8
 8009172:	d950      	bls.n	8009216 <__hexnan+0x10a>
 8009174:	2300      	movs	r3, #0
 8009176:	f1a4 0904 	sub.w	r9, r4, #4
 800917a:	f844 3c04 	str.w	r3, [r4, #-4]
 800917e:	f8cd b008 	str.w	fp, [sp, #8]
 8009182:	464c      	mov	r4, r9
 8009184:	461d      	mov	r5, r3
 8009186:	9a03      	ldr	r2, [sp, #12]
 8009188:	e7d7      	b.n	800913a <__hexnan+0x2e>
 800918a:	2929      	cmp	r1, #41	; 0x29
 800918c:	d156      	bne.n	800923c <__hexnan+0x130>
 800918e:	3202      	adds	r2, #2
 8009190:	f8ca 2000 	str.w	r2, [sl]
 8009194:	f1bb 0f00 	cmp.w	fp, #0
 8009198:	d050      	beq.n	800923c <__hexnan+0x130>
 800919a:	454c      	cmp	r4, r9
 800919c:	d206      	bcs.n	80091ac <__hexnan+0xa0>
 800919e:	2d07      	cmp	r5, #7
 80091a0:	dc04      	bgt.n	80091ac <__hexnan+0xa0>
 80091a2:	462a      	mov	r2, r5
 80091a4:	4649      	mov	r1, r9
 80091a6:	4620      	mov	r0, r4
 80091a8:	f7ff ff8a 	bl	80090c0 <L_shift>
 80091ac:	4544      	cmp	r4, r8
 80091ae:	d934      	bls.n	800921a <__hexnan+0x10e>
 80091b0:	f1a8 0204 	sub.w	r2, r8, #4
 80091b4:	4623      	mov	r3, r4
 80091b6:	f853 1b04 	ldr.w	r1, [r3], #4
 80091ba:	f842 1f04 	str.w	r1, [r2, #4]!
 80091be:	429f      	cmp	r7, r3
 80091c0:	d2f9      	bcs.n	80091b6 <__hexnan+0xaa>
 80091c2:	1b3b      	subs	r3, r7, r4
 80091c4:	f023 0303 	bic.w	r3, r3, #3
 80091c8:	3304      	adds	r3, #4
 80091ca:	3401      	adds	r4, #1
 80091cc:	3e03      	subs	r6, #3
 80091ce:	42b4      	cmp	r4, r6
 80091d0:	bf88      	it	hi
 80091d2:	2304      	movhi	r3, #4
 80091d4:	4443      	add	r3, r8
 80091d6:	2200      	movs	r2, #0
 80091d8:	f843 2b04 	str.w	r2, [r3], #4
 80091dc:	429f      	cmp	r7, r3
 80091de:	d2fb      	bcs.n	80091d8 <__hexnan+0xcc>
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	b91b      	cbnz	r3, 80091ec <__hexnan+0xe0>
 80091e4:	4547      	cmp	r7, r8
 80091e6:	d127      	bne.n	8009238 <__hexnan+0x12c>
 80091e8:	2301      	movs	r3, #1
 80091ea:	603b      	str	r3, [r7, #0]
 80091ec:	2005      	movs	r0, #5
 80091ee:	e026      	b.n	800923e <__hexnan+0x132>
 80091f0:	3501      	adds	r5, #1
 80091f2:	2d08      	cmp	r5, #8
 80091f4:	f10b 0b01 	add.w	fp, fp, #1
 80091f8:	dd06      	ble.n	8009208 <__hexnan+0xfc>
 80091fa:	4544      	cmp	r4, r8
 80091fc:	d9c3      	bls.n	8009186 <__hexnan+0x7a>
 80091fe:	2300      	movs	r3, #0
 8009200:	f844 3c04 	str.w	r3, [r4, #-4]
 8009204:	2501      	movs	r5, #1
 8009206:	3c04      	subs	r4, #4
 8009208:	6822      	ldr	r2, [r4, #0]
 800920a:	f000 000f 	and.w	r0, r0, #15
 800920e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8009212:	6022      	str	r2, [r4, #0]
 8009214:	e7b7      	b.n	8009186 <__hexnan+0x7a>
 8009216:	2508      	movs	r5, #8
 8009218:	e7b5      	b.n	8009186 <__hexnan+0x7a>
 800921a:	9b01      	ldr	r3, [sp, #4]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d0df      	beq.n	80091e0 <__hexnan+0xd4>
 8009220:	f04f 32ff 	mov.w	r2, #4294967295
 8009224:	f1c3 0320 	rsb	r3, r3, #32
 8009228:	fa22 f303 	lsr.w	r3, r2, r3
 800922c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009230:	401a      	ands	r2, r3
 8009232:	f846 2c04 	str.w	r2, [r6, #-4]
 8009236:	e7d3      	b.n	80091e0 <__hexnan+0xd4>
 8009238:	3f04      	subs	r7, #4
 800923a:	e7d1      	b.n	80091e0 <__hexnan+0xd4>
 800923c:	2004      	movs	r0, #4
 800923e:	b007      	add	sp, #28
 8009240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009244 <_localeconv_r>:
 8009244:	4800      	ldr	r0, [pc, #0]	; (8009248 <_localeconv_r+0x4>)
 8009246:	4770      	bx	lr
 8009248:	20000164 	.word	0x20000164

0800924c <malloc>:
 800924c:	4b02      	ldr	r3, [pc, #8]	; (8009258 <malloc+0xc>)
 800924e:	4601      	mov	r1, r0
 8009250:	6818      	ldr	r0, [r3, #0]
 8009252:	f000 bd67 	b.w	8009d24 <_malloc_r>
 8009256:	bf00      	nop
 8009258:	2000000c 	.word	0x2000000c

0800925c <__ascii_mbtowc>:
 800925c:	b082      	sub	sp, #8
 800925e:	b901      	cbnz	r1, 8009262 <__ascii_mbtowc+0x6>
 8009260:	a901      	add	r1, sp, #4
 8009262:	b142      	cbz	r2, 8009276 <__ascii_mbtowc+0x1a>
 8009264:	b14b      	cbz	r3, 800927a <__ascii_mbtowc+0x1e>
 8009266:	7813      	ldrb	r3, [r2, #0]
 8009268:	600b      	str	r3, [r1, #0]
 800926a:	7812      	ldrb	r2, [r2, #0]
 800926c:	1e10      	subs	r0, r2, #0
 800926e:	bf18      	it	ne
 8009270:	2001      	movne	r0, #1
 8009272:	b002      	add	sp, #8
 8009274:	4770      	bx	lr
 8009276:	4610      	mov	r0, r2
 8009278:	e7fb      	b.n	8009272 <__ascii_mbtowc+0x16>
 800927a:	f06f 0001 	mvn.w	r0, #1
 800927e:	e7f8      	b.n	8009272 <__ascii_mbtowc+0x16>

08009280 <memcpy>:
 8009280:	440a      	add	r2, r1
 8009282:	4291      	cmp	r1, r2
 8009284:	f100 33ff 	add.w	r3, r0, #4294967295
 8009288:	d100      	bne.n	800928c <memcpy+0xc>
 800928a:	4770      	bx	lr
 800928c:	b510      	push	{r4, lr}
 800928e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009292:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009296:	4291      	cmp	r1, r2
 8009298:	d1f9      	bne.n	800928e <memcpy+0xe>
 800929a:	bd10      	pop	{r4, pc}

0800929c <_Balloc>:
 800929c:	b570      	push	{r4, r5, r6, lr}
 800929e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80092a0:	4604      	mov	r4, r0
 80092a2:	460d      	mov	r5, r1
 80092a4:	b976      	cbnz	r6, 80092c4 <_Balloc+0x28>
 80092a6:	2010      	movs	r0, #16
 80092a8:	f7ff ffd0 	bl	800924c <malloc>
 80092ac:	4602      	mov	r2, r0
 80092ae:	6260      	str	r0, [r4, #36]	; 0x24
 80092b0:	b920      	cbnz	r0, 80092bc <_Balloc+0x20>
 80092b2:	4b18      	ldr	r3, [pc, #96]	; (8009314 <_Balloc+0x78>)
 80092b4:	4818      	ldr	r0, [pc, #96]	; (8009318 <_Balloc+0x7c>)
 80092b6:	2166      	movs	r1, #102	; 0x66
 80092b8:	f000 ff40 	bl	800a13c <__assert_func>
 80092bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80092c0:	6006      	str	r6, [r0, #0]
 80092c2:	60c6      	str	r6, [r0, #12]
 80092c4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80092c6:	68f3      	ldr	r3, [r6, #12]
 80092c8:	b183      	cbz	r3, 80092ec <_Balloc+0x50>
 80092ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80092cc:	68db      	ldr	r3, [r3, #12]
 80092ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80092d2:	b9b8      	cbnz	r0, 8009304 <_Balloc+0x68>
 80092d4:	2101      	movs	r1, #1
 80092d6:	fa01 f605 	lsl.w	r6, r1, r5
 80092da:	1d72      	adds	r2, r6, #5
 80092dc:	0092      	lsls	r2, r2, #2
 80092de:	4620      	mov	r0, r4
 80092e0:	f000 fc9d 	bl	8009c1e <_calloc_r>
 80092e4:	b160      	cbz	r0, 8009300 <_Balloc+0x64>
 80092e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80092ea:	e00e      	b.n	800930a <_Balloc+0x6e>
 80092ec:	2221      	movs	r2, #33	; 0x21
 80092ee:	2104      	movs	r1, #4
 80092f0:	4620      	mov	r0, r4
 80092f2:	f000 fc94 	bl	8009c1e <_calloc_r>
 80092f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80092f8:	60f0      	str	r0, [r6, #12]
 80092fa:	68db      	ldr	r3, [r3, #12]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d1e4      	bne.n	80092ca <_Balloc+0x2e>
 8009300:	2000      	movs	r0, #0
 8009302:	bd70      	pop	{r4, r5, r6, pc}
 8009304:	6802      	ldr	r2, [r0, #0]
 8009306:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800930a:	2300      	movs	r3, #0
 800930c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009310:	e7f7      	b.n	8009302 <_Balloc+0x66>
 8009312:	bf00      	nop
 8009314:	0800b64e 	.word	0x0800b64e
 8009318:	0800b74c 	.word	0x0800b74c

0800931c <_Bfree>:
 800931c:	b570      	push	{r4, r5, r6, lr}
 800931e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009320:	4605      	mov	r5, r0
 8009322:	460c      	mov	r4, r1
 8009324:	b976      	cbnz	r6, 8009344 <_Bfree+0x28>
 8009326:	2010      	movs	r0, #16
 8009328:	f7ff ff90 	bl	800924c <malloc>
 800932c:	4602      	mov	r2, r0
 800932e:	6268      	str	r0, [r5, #36]	; 0x24
 8009330:	b920      	cbnz	r0, 800933c <_Bfree+0x20>
 8009332:	4b09      	ldr	r3, [pc, #36]	; (8009358 <_Bfree+0x3c>)
 8009334:	4809      	ldr	r0, [pc, #36]	; (800935c <_Bfree+0x40>)
 8009336:	218a      	movs	r1, #138	; 0x8a
 8009338:	f000 ff00 	bl	800a13c <__assert_func>
 800933c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009340:	6006      	str	r6, [r0, #0]
 8009342:	60c6      	str	r6, [r0, #12]
 8009344:	b13c      	cbz	r4, 8009356 <_Bfree+0x3a>
 8009346:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009348:	6862      	ldr	r2, [r4, #4]
 800934a:	68db      	ldr	r3, [r3, #12]
 800934c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009350:	6021      	str	r1, [r4, #0]
 8009352:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009356:	bd70      	pop	{r4, r5, r6, pc}
 8009358:	0800b64e 	.word	0x0800b64e
 800935c:	0800b74c 	.word	0x0800b74c

08009360 <__multadd>:
 8009360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009364:	690d      	ldr	r5, [r1, #16]
 8009366:	4607      	mov	r7, r0
 8009368:	460c      	mov	r4, r1
 800936a:	461e      	mov	r6, r3
 800936c:	f101 0c14 	add.w	ip, r1, #20
 8009370:	2000      	movs	r0, #0
 8009372:	f8dc 3000 	ldr.w	r3, [ip]
 8009376:	b299      	uxth	r1, r3
 8009378:	fb02 6101 	mla	r1, r2, r1, r6
 800937c:	0c1e      	lsrs	r6, r3, #16
 800937e:	0c0b      	lsrs	r3, r1, #16
 8009380:	fb02 3306 	mla	r3, r2, r6, r3
 8009384:	b289      	uxth	r1, r1
 8009386:	3001      	adds	r0, #1
 8009388:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800938c:	4285      	cmp	r5, r0
 800938e:	f84c 1b04 	str.w	r1, [ip], #4
 8009392:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009396:	dcec      	bgt.n	8009372 <__multadd+0x12>
 8009398:	b30e      	cbz	r6, 80093de <__multadd+0x7e>
 800939a:	68a3      	ldr	r3, [r4, #8]
 800939c:	42ab      	cmp	r3, r5
 800939e:	dc19      	bgt.n	80093d4 <__multadd+0x74>
 80093a0:	6861      	ldr	r1, [r4, #4]
 80093a2:	4638      	mov	r0, r7
 80093a4:	3101      	adds	r1, #1
 80093a6:	f7ff ff79 	bl	800929c <_Balloc>
 80093aa:	4680      	mov	r8, r0
 80093ac:	b928      	cbnz	r0, 80093ba <__multadd+0x5a>
 80093ae:	4602      	mov	r2, r0
 80093b0:	4b0c      	ldr	r3, [pc, #48]	; (80093e4 <__multadd+0x84>)
 80093b2:	480d      	ldr	r0, [pc, #52]	; (80093e8 <__multadd+0x88>)
 80093b4:	21b5      	movs	r1, #181	; 0xb5
 80093b6:	f000 fec1 	bl	800a13c <__assert_func>
 80093ba:	6922      	ldr	r2, [r4, #16]
 80093bc:	3202      	adds	r2, #2
 80093be:	f104 010c 	add.w	r1, r4, #12
 80093c2:	0092      	lsls	r2, r2, #2
 80093c4:	300c      	adds	r0, #12
 80093c6:	f7ff ff5b 	bl	8009280 <memcpy>
 80093ca:	4621      	mov	r1, r4
 80093cc:	4638      	mov	r0, r7
 80093ce:	f7ff ffa5 	bl	800931c <_Bfree>
 80093d2:	4644      	mov	r4, r8
 80093d4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80093d8:	3501      	adds	r5, #1
 80093da:	615e      	str	r6, [r3, #20]
 80093dc:	6125      	str	r5, [r4, #16]
 80093de:	4620      	mov	r0, r4
 80093e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093e4:	0800b6c0 	.word	0x0800b6c0
 80093e8:	0800b74c 	.word	0x0800b74c

080093ec <__s2b>:
 80093ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093f0:	460c      	mov	r4, r1
 80093f2:	4615      	mov	r5, r2
 80093f4:	461f      	mov	r7, r3
 80093f6:	2209      	movs	r2, #9
 80093f8:	3308      	adds	r3, #8
 80093fa:	4606      	mov	r6, r0
 80093fc:	fb93 f3f2 	sdiv	r3, r3, r2
 8009400:	2100      	movs	r1, #0
 8009402:	2201      	movs	r2, #1
 8009404:	429a      	cmp	r2, r3
 8009406:	db09      	blt.n	800941c <__s2b+0x30>
 8009408:	4630      	mov	r0, r6
 800940a:	f7ff ff47 	bl	800929c <_Balloc>
 800940e:	b940      	cbnz	r0, 8009422 <__s2b+0x36>
 8009410:	4602      	mov	r2, r0
 8009412:	4b19      	ldr	r3, [pc, #100]	; (8009478 <__s2b+0x8c>)
 8009414:	4819      	ldr	r0, [pc, #100]	; (800947c <__s2b+0x90>)
 8009416:	21ce      	movs	r1, #206	; 0xce
 8009418:	f000 fe90 	bl	800a13c <__assert_func>
 800941c:	0052      	lsls	r2, r2, #1
 800941e:	3101      	adds	r1, #1
 8009420:	e7f0      	b.n	8009404 <__s2b+0x18>
 8009422:	9b08      	ldr	r3, [sp, #32]
 8009424:	6143      	str	r3, [r0, #20]
 8009426:	2d09      	cmp	r5, #9
 8009428:	f04f 0301 	mov.w	r3, #1
 800942c:	6103      	str	r3, [r0, #16]
 800942e:	dd16      	ble.n	800945e <__s2b+0x72>
 8009430:	f104 0909 	add.w	r9, r4, #9
 8009434:	46c8      	mov	r8, r9
 8009436:	442c      	add	r4, r5
 8009438:	f818 3b01 	ldrb.w	r3, [r8], #1
 800943c:	4601      	mov	r1, r0
 800943e:	3b30      	subs	r3, #48	; 0x30
 8009440:	220a      	movs	r2, #10
 8009442:	4630      	mov	r0, r6
 8009444:	f7ff ff8c 	bl	8009360 <__multadd>
 8009448:	45a0      	cmp	r8, r4
 800944a:	d1f5      	bne.n	8009438 <__s2b+0x4c>
 800944c:	f1a5 0408 	sub.w	r4, r5, #8
 8009450:	444c      	add	r4, r9
 8009452:	1b2d      	subs	r5, r5, r4
 8009454:	1963      	adds	r3, r4, r5
 8009456:	42bb      	cmp	r3, r7
 8009458:	db04      	blt.n	8009464 <__s2b+0x78>
 800945a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800945e:	340a      	adds	r4, #10
 8009460:	2509      	movs	r5, #9
 8009462:	e7f6      	b.n	8009452 <__s2b+0x66>
 8009464:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009468:	4601      	mov	r1, r0
 800946a:	3b30      	subs	r3, #48	; 0x30
 800946c:	220a      	movs	r2, #10
 800946e:	4630      	mov	r0, r6
 8009470:	f7ff ff76 	bl	8009360 <__multadd>
 8009474:	e7ee      	b.n	8009454 <__s2b+0x68>
 8009476:	bf00      	nop
 8009478:	0800b6c0 	.word	0x0800b6c0
 800947c:	0800b74c 	.word	0x0800b74c

08009480 <__hi0bits>:
 8009480:	0c03      	lsrs	r3, r0, #16
 8009482:	041b      	lsls	r3, r3, #16
 8009484:	b9d3      	cbnz	r3, 80094bc <__hi0bits+0x3c>
 8009486:	0400      	lsls	r0, r0, #16
 8009488:	2310      	movs	r3, #16
 800948a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800948e:	bf04      	itt	eq
 8009490:	0200      	lsleq	r0, r0, #8
 8009492:	3308      	addeq	r3, #8
 8009494:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009498:	bf04      	itt	eq
 800949a:	0100      	lsleq	r0, r0, #4
 800949c:	3304      	addeq	r3, #4
 800949e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80094a2:	bf04      	itt	eq
 80094a4:	0080      	lsleq	r0, r0, #2
 80094a6:	3302      	addeq	r3, #2
 80094a8:	2800      	cmp	r0, #0
 80094aa:	db05      	blt.n	80094b8 <__hi0bits+0x38>
 80094ac:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80094b0:	f103 0301 	add.w	r3, r3, #1
 80094b4:	bf08      	it	eq
 80094b6:	2320      	moveq	r3, #32
 80094b8:	4618      	mov	r0, r3
 80094ba:	4770      	bx	lr
 80094bc:	2300      	movs	r3, #0
 80094be:	e7e4      	b.n	800948a <__hi0bits+0xa>

080094c0 <__lo0bits>:
 80094c0:	6803      	ldr	r3, [r0, #0]
 80094c2:	f013 0207 	ands.w	r2, r3, #7
 80094c6:	4601      	mov	r1, r0
 80094c8:	d00b      	beq.n	80094e2 <__lo0bits+0x22>
 80094ca:	07da      	lsls	r2, r3, #31
 80094cc:	d423      	bmi.n	8009516 <__lo0bits+0x56>
 80094ce:	0798      	lsls	r0, r3, #30
 80094d0:	bf49      	itett	mi
 80094d2:	085b      	lsrmi	r3, r3, #1
 80094d4:	089b      	lsrpl	r3, r3, #2
 80094d6:	2001      	movmi	r0, #1
 80094d8:	600b      	strmi	r3, [r1, #0]
 80094da:	bf5c      	itt	pl
 80094dc:	600b      	strpl	r3, [r1, #0]
 80094de:	2002      	movpl	r0, #2
 80094e0:	4770      	bx	lr
 80094e2:	b298      	uxth	r0, r3
 80094e4:	b9a8      	cbnz	r0, 8009512 <__lo0bits+0x52>
 80094e6:	0c1b      	lsrs	r3, r3, #16
 80094e8:	2010      	movs	r0, #16
 80094ea:	b2da      	uxtb	r2, r3
 80094ec:	b90a      	cbnz	r2, 80094f2 <__lo0bits+0x32>
 80094ee:	3008      	adds	r0, #8
 80094f0:	0a1b      	lsrs	r3, r3, #8
 80094f2:	071a      	lsls	r2, r3, #28
 80094f4:	bf04      	itt	eq
 80094f6:	091b      	lsreq	r3, r3, #4
 80094f8:	3004      	addeq	r0, #4
 80094fa:	079a      	lsls	r2, r3, #30
 80094fc:	bf04      	itt	eq
 80094fe:	089b      	lsreq	r3, r3, #2
 8009500:	3002      	addeq	r0, #2
 8009502:	07da      	lsls	r2, r3, #31
 8009504:	d403      	bmi.n	800950e <__lo0bits+0x4e>
 8009506:	085b      	lsrs	r3, r3, #1
 8009508:	f100 0001 	add.w	r0, r0, #1
 800950c:	d005      	beq.n	800951a <__lo0bits+0x5a>
 800950e:	600b      	str	r3, [r1, #0]
 8009510:	4770      	bx	lr
 8009512:	4610      	mov	r0, r2
 8009514:	e7e9      	b.n	80094ea <__lo0bits+0x2a>
 8009516:	2000      	movs	r0, #0
 8009518:	4770      	bx	lr
 800951a:	2020      	movs	r0, #32
 800951c:	4770      	bx	lr
	...

08009520 <__i2b>:
 8009520:	b510      	push	{r4, lr}
 8009522:	460c      	mov	r4, r1
 8009524:	2101      	movs	r1, #1
 8009526:	f7ff feb9 	bl	800929c <_Balloc>
 800952a:	4602      	mov	r2, r0
 800952c:	b928      	cbnz	r0, 800953a <__i2b+0x1a>
 800952e:	4b05      	ldr	r3, [pc, #20]	; (8009544 <__i2b+0x24>)
 8009530:	4805      	ldr	r0, [pc, #20]	; (8009548 <__i2b+0x28>)
 8009532:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009536:	f000 fe01 	bl	800a13c <__assert_func>
 800953a:	2301      	movs	r3, #1
 800953c:	6144      	str	r4, [r0, #20]
 800953e:	6103      	str	r3, [r0, #16]
 8009540:	bd10      	pop	{r4, pc}
 8009542:	bf00      	nop
 8009544:	0800b6c0 	.word	0x0800b6c0
 8009548:	0800b74c 	.word	0x0800b74c

0800954c <__multiply>:
 800954c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009550:	4691      	mov	r9, r2
 8009552:	690a      	ldr	r2, [r1, #16]
 8009554:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009558:	429a      	cmp	r2, r3
 800955a:	bfb8      	it	lt
 800955c:	460b      	movlt	r3, r1
 800955e:	460c      	mov	r4, r1
 8009560:	bfbc      	itt	lt
 8009562:	464c      	movlt	r4, r9
 8009564:	4699      	movlt	r9, r3
 8009566:	6927      	ldr	r7, [r4, #16]
 8009568:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800956c:	68a3      	ldr	r3, [r4, #8]
 800956e:	6861      	ldr	r1, [r4, #4]
 8009570:	eb07 060a 	add.w	r6, r7, sl
 8009574:	42b3      	cmp	r3, r6
 8009576:	b085      	sub	sp, #20
 8009578:	bfb8      	it	lt
 800957a:	3101      	addlt	r1, #1
 800957c:	f7ff fe8e 	bl	800929c <_Balloc>
 8009580:	b930      	cbnz	r0, 8009590 <__multiply+0x44>
 8009582:	4602      	mov	r2, r0
 8009584:	4b44      	ldr	r3, [pc, #272]	; (8009698 <__multiply+0x14c>)
 8009586:	4845      	ldr	r0, [pc, #276]	; (800969c <__multiply+0x150>)
 8009588:	f240 115d 	movw	r1, #349	; 0x15d
 800958c:	f000 fdd6 	bl	800a13c <__assert_func>
 8009590:	f100 0514 	add.w	r5, r0, #20
 8009594:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009598:	462b      	mov	r3, r5
 800959a:	2200      	movs	r2, #0
 800959c:	4543      	cmp	r3, r8
 800959e:	d321      	bcc.n	80095e4 <__multiply+0x98>
 80095a0:	f104 0314 	add.w	r3, r4, #20
 80095a4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80095a8:	f109 0314 	add.w	r3, r9, #20
 80095ac:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80095b0:	9202      	str	r2, [sp, #8]
 80095b2:	1b3a      	subs	r2, r7, r4
 80095b4:	3a15      	subs	r2, #21
 80095b6:	f022 0203 	bic.w	r2, r2, #3
 80095ba:	3204      	adds	r2, #4
 80095bc:	f104 0115 	add.w	r1, r4, #21
 80095c0:	428f      	cmp	r7, r1
 80095c2:	bf38      	it	cc
 80095c4:	2204      	movcc	r2, #4
 80095c6:	9201      	str	r2, [sp, #4]
 80095c8:	9a02      	ldr	r2, [sp, #8]
 80095ca:	9303      	str	r3, [sp, #12]
 80095cc:	429a      	cmp	r2, r3
 80095ce:	d80c      	bhi.n	80095ea <__multiply+0x9e>
 80095d0:	2e00      	cmp	r6, #0
 80095d2:	dd03      	ble.n	80095dc <__multiply+0x90>
 80095d4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d05a      	beq.n	8009692 <__multiply+0x146>
 80095dc:	6106      	str	r6, [r0, #16]
 80095de:	b005      	add	sp, #20
 80095e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095e4:	f843 2b04 	str.w	r2, [r3], #4
 80095e8:	e7d8      	b.n	800959c <__multiply+0x50>
 80095ea:	f8b3 a000 	ldrh.w	sl, [r3]
 80095ee:	f1ba 0f00 	cmp.w	sl, #0
 80095f2:	d024      	beq.n	800963e <__multiply+0xf2>
 80095f4:	f104 0e14 	add.w	lr, r4, #20
 80095f8:	46a9      	mov	r9, r5
 80095fa:	f04f 0c00 	mov.w	ip, #0
 80095fe:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009602:	f8d9 1000 	ldr.w	r1, [r9]
 8009606:	fa1f fb82 	uxth.w	fp, r2
 800960a:	b289      	uxth	r1, r1
 800960c:	fb0a 110b 	mla	r1, sl, fp, r1
 8009610:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009614:	f8d9 2000 	ldr.w	r2, [r9]
 8009618:	4461      	add	r1, ip
 800961a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800961e:	fb0a c20b 	mla	r2, sl, fp, ip
 8009622:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009626:	b289      	uxth	r1, r1
 8009628:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800962c:	4577      	cmp	r7, lr
 800962e:	f849 1b04 	str.w	r1, [r9], #4
 8009632:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009636:	d8e2      	bhi.n	80095fe <__multiply+0xb2>
 8009638:	9a01      	ldr	r2, [sp, #4]
 800963a:	f845 c002 	str.w	ip, [r5, r2]
 800963e:	9a03      	ldr	r2, [sp, #12]
 8009640:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009644:	3304      	adds	r3, #4
 8009646:	f1b9 0f00 	cmp.w	r9, #0
 800964a:	d020      	beq.n	800968e <__multiply+0x142>
 800964c:	6829      	ldr	r1, [r5, #0]
 800964e:	f104 0c14 	add.w	ip, r4, #20
 8009652:	46ae      	mov	lr, r5
 8009654:	f04f 0a00 	mov.w	sl, #0
 8009658:	f8bc b000 	ldrh.w	fp, [ip]
 800965c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009660:	fb09 220b 	mla	r2, r9, fp, r2
 8009664:	4492      	add	sl, r2
 8009666:	b289      	uxth	r1, r1
 8009668:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800966c:	f84e 1b04 	str.w	r1, [lr], #4
 8009670:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009674:	f8be 1000 	ldrh.w	r1, [lr]
 8009678:	0c12      	lsrs	r2, r2, #16
 800967a:	fb09 1102 	mla	r1, r9, r2, r1
 800967e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009682:	4567      	cmp	r7, ip
 8009684:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009688:	d8e6      	bhi.n	8009658 <__multiply+0x10c>
 800968a:	9a01      	ldr	r2, [sp, #4]
 800968c:	50a9      	str	r1, [r5, r2]
 800968e:	3504      	adds	r5, #4
 8009690:	e79a      	b.n	80095c8 <__multiply+0x7c>
 8009692:	3e01      	subs	r6, #1
 8009694:	e79c      	b.n	80095d0 <__multiply+0x84>
 8009696:	bf00      	nop
 8009698:	0800b6c0 	.word	0x0800b6c0
 800969c:	0800b74c 	.word	0x0800b74c

080096a0 <__pow5mult>:
 80096a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096a4:	4615      	mov	r5, r2
 80096a6:	f012 0203 	ands.w	r2, r2, #3
 80096aa:	4606      	mov	r6, r0
 80096ac:	460f      	mov	r7, r1
 80096ae:	d007      	beq.n	80096c0 <__pow5mult+0x20>
 80096b0:	4c25      	ldr	r4, [pc, #148]	; (8009748 <__pow5mult+0xa8>)
 80096b2:	3a01      	subs	r2, #1
 80096b4:	2300      	movs	r3, #0
 80096b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80096ba:	f7ff fe51 	bl	8009360 <__multadd>
 80096be:	4607      	mov	r7, r0
 80096c0:	10ad      	asrs	r5, r5, #2
 80096c2:	d03d      	beq.n	8009740 <__pow5mult+0xa0>
 80096c4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80096c6:	b97c      	cbnz	r4, 80096e8 <__pow5mult+0x48>
 80096c8:	2010      	movs	r0, #16
 80096ca:	f7ff fdbf 	bl	800924c <malloc>
 80096ce:	4602      	mov	r2, r0
 80096d0:	6270      	str	r0, [r6, #36]	; 0x24
 80096d2:	b928      	cbnz	r0, 80096e0 <__pow5mult+0x40>
 80096d4:	4b1d      	ldr	r3, [pc, #116]	; (800974c <__pow5mult+0xac>)
 80096d6:	481e      	ldr	r0, [pc, #120]	; (8009750 <__pow5mult+0xb0>)
 80096d8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80096dc:	f000 fd2e 	bl	800a13c <__assert_func>
 80096e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80096e4:	6004      	str	r4, [r0, #0]
 80096e6:	60c4      	str	r4, [r0, #12]
 80096e8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80096ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80096f0:	b94c      	cbnz	r4, 8009706 <__pow5mult+0x66>
 80096f2:	f240 2171 	movw	r1, #625	; 0x271
 80096f6:	4630      	mov	r0, r6
 80096f8:	f7ff ff12 	bl	8009520 <__i2b>
 80096fc:	2300      	movs	r3, #0
 80096fe:	f8c8 0008 	str.w	r0, [r8, #8]
 8009702:	4604      	mov	r4, r0
 8009704:	6003      	str	r3, [r0, #0]
 8009706:	f04f 0900 	mov.w	r9, #0
 800970a:	07eb      	lsls	r3, r5, #31
 800970c:	d50a      	bpl.n	8009724 <__pow5mult+0x84>
 800970e:	4639      	mov	r1, r7
 8009710:	4622      	mov	r2, r4
 8009712:	4630      	mov	r0, r6
 8009714:	f7ff ff1a 	bl	800954c <__multiply>
 8009718:	4639      	mov	r1, r7
 800971a:	4680      	mov	r8, r0
 800971c:	4630      	mov	r0, r6
 800971e:	f7ff fdfd 	bl	800931c <_Bfree>
 8009722:	4647      	mov	r7, r8
 8009724:	106d      	asrs	r5, r5, #1
 8009726:	d00b      	beq.n	8009740 <__pow5mult+0xa0>
 8009728:	6820      	ldr	r0, [r4, #0]
 800972a:	b938      	cbnz	r0, 800973c <__pow5mult+0x9c>
 800972c:	4622      	mov	r2, r4
 800972e:	4621      	mov	r1, r4
 8009730:	4630      	mov	r0, r6
 8009732:	f7ff ff0b 	bl	800954c <__multiply>
 8009736:	6020      	str	r0, [r4, #0]
 8009738:	f8c0 9000 	str.w	r9, [r0]
 800973c:	4604      	mov	r4, r0
 800973e:	e7e4      	b.n	800970a <__pow5mult+0x6a>
 8009740:	4638      	mov	r0, r7
 8009742:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009746:	bf00      	nop
 8009748:	0800b898 	.word	0x0800b898
 800974c:	0800b64e 	.word	0x0800b64e
 8009750:	0800b74c 	.word	0x0800b74c

08009754 <__lshift>:
 8009754:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009758:	460c      	mov	r4, r1
 800975a:	6849      	ldr	r1, [r1, #4]
 800975c:	6923      	ldr	r3, [r4, #16]
 800975e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009762:	68a3      	ldr	r3, [r4, #8]
 8009764:	4607      	mov	r7, r0
 8009766:	4691      	mov	r9, r2
 8009768:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800976c:	f108 0601 	add.w	r6, r8, #1
 8009770:	42b3      	cmp	r3, r6
 8009772:	db0b      	blt.n	800978c <__lshift+0x38>
 8009774:	4638      	mov	r0, r7
 8009776:	f7ff fd91 	bl	800929c <_Balloc>
 800977a:	4605      	mov	r5, r0
 800977c:	b948      	cbnz	r0, 8009792 <__lshift+0x3e>
 800977e:	4602      	mov	r2, r0
 8009780:	4b2a      	ldr	r3, [pc, #168]	; (800982c <__lshift+0xd8>)
 8009782:	482b      	ldr	r0, [pc, #172]	; (8009830 <__lshift+0xdc>)
 8009784:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009788:	f000 fcd8 	bl	800a13c <__assert_func>
 800978c:	3101      	adds	r1, #1
 800978e:	005b      	lsls	r3, r3, #1
 8009790:	e7ee      	b.n	8009770 <__lshift+0x1c>
 8009792:	2300      	movs	r3, #0
 8009794:	f100 0114 	add.w	r1, r0, #20
 8009798:	f100 0210 	add.w	r2, r0, #16
 800979c:	4618      	mov	r0, r3
 800979e:	4553      	cmp	r3, sl
 80097a0:	db37      	blt.n	8009812 <__lshift+0xbe>
 80097a2:	6920      	ldr	r0, [r4, #16]
 80097a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80097a8:	f104 0314 	add.w	r3, r4, #20
 80097ac:	f019 091f 	ands.w	r9, r9, #31
 80097b0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80097b4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80097b8:	d02f      	beq.n	800981a <__lshift+0xc6>
 80097ba:	f1c9 0e20 	rsb	lr, r9, #32
 80097be:	468a      	mov	sl, r1
 80097c0:	f04f 0c00 	mov.w	ip, #0
 80097c4:	681a      	ldr	r2, [r3, #0]
 80097c6:	fa02 f209 	lsl.w	r2, r2, r9
 80097ca:	ea42 020c 	orr.w	r2, r2, ip
 80097ce:	f84a 2b04 	str.w	r2, [sl], #4
 80097d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80097d6:	4298      	cmp	r0, r3
 80097d8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80097dc:	d8f2      	bhi.n	80097c4 <__lshift+0x70>
 80097de:	1b03      	subs	r3, r0, r4
 80097e0:	3b15      	subs	r3, #21
 80097e2:	f023 0303 	bic.w	r3, r3, #3
 80097e6:	3304      	adds	r3, #4
 80097e8:	f104 0215 	add.w	r2, r4, #21
 80097ec:	4290      	cmp	r0, r2
 80097ee:	bf38      	it	cc
 80097f0:	2304      	movcc	r3, #4
 80097f2:	f841 c003 	str.w	ip, [r1, r3]
 80097f6:	f1bc 0f00 	cmp.w	ip, #0
 80097fa:	d001      	beq.n	8009800 <__lshift+0xac>
 80097fc:	f108 0602 	add.w	r6, r8, #2
 8009800:	3e01      	subs	r6, #1
 8009802:	4638      	mov	r0, r7
 8009804:	612e      	str	r6, [r5, #16]
 8009806:	4621      	mov	r1, r4
 8009808:	f7ff fd88 	bl	800931c <_Bfree>
 800980c:	4628      	mov	r0, r5
 800980e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009812:	f842 0f04 	str.w	r0, [r2, #4]!
 8009816:	3301      	adds	r3, #1
 8009818:	e7c1      	b.n	800979e <__lshift+0x4a>
 800981a:	3904      	subs	r1, #4
 800981c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009820:	f841 2f04 	str.w	r2, [r1, #4]!
 8009824:	4298      	cmp	r0, r3
 8009826:	d8f9      	bhi.n	800981c <__lshift+0xc8>
 8009828:	e7ea      	b.n	8009800 <__lshift+0xac>
 800982a:	bf00      	nop
 800982c:	0800b6c0 	.word	0x0800b6c0
 8009830:	0800b74c 	.word	0x0800b74c

08009834 <__mcmp>:
 8009834:	b530      	push	{r4, r5, lr}
 8009836:	6902      	ldr	r2, [r0, #16]
 8009838:	690c      	ldr	r4, [r1, #16]
 800983a:	1b12      	subs	r2, r2, r4
 800983c:	d10e      	bne.n	800985c <__mcmp+0x28>
 800983e:	f100 0314 	add.w	r3, r0, #20
 8009842:	3114      	adds	r1, #20
 8009844:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009848:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800984c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009850:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009854:	42a5      	cmp	r5, r4
 8009856:	d003      	beq.n	8009860 <__mcmp+0x2c>
 8009858:	d305      	bcc.n	8009866 <__mcmp+0x32>
 800985a:	2201      	movs	r2, #1
 800985c:	4610      	mov	r0, r2
 800985e:	bd30      	pop	{r4, r5, pc}
 8009860:	4283      	cmp	r3, r0
 8009862:	d3f3      	bcc.n	800984c <__mcmp+0x18>
 8009864:	e7fa      	b.n	800985c <__mcmp+0x28>
 8009866:	f04f 32ff 	mov.w	r2, #4294967295
 800986a:	e7f7      	b.n	800985c <__mcmp+0x28>

0800986c <__mdiff>:
 800986c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009870:	460c      	mov	r4, r1
 8009872:	4606      	mov	r6, r0
 8009874:	4611      	mov	r1, r2
 8009876:	4620      	mov	r0, r4
 8009878:	4690      	mov	r8, r2
 800987a:	f7ff ffdb 	bl	8009834 <__mcmp>
 800987e:	1e05      	subs	r5, r0, #0
 8009880:	d110      	bne.n	80098a4 <__mdiff+0x38>
 8009882:	4629      	mov	r1, r5
 8009884:	4630      	mov	r0, r6
 8009886:	f7ff fd09 	bl	800929c <_Balloc>
 800988a:	b930      	cbnz	r0, 800989a <__mdiff+0x2e>
 800988c:	4b3a      	ldr	r3, [pc, #232]	; (8009978 <__mdiff+0x10c>)
 800988e:	4602      	mov	r2, r0
 8009890:	f240 2132 	movw	r1, #562	; 0x232
 8009894:	4839      	ldr	r0, [pc, #228]	; (800997c <__mdiff+0x110>)
 8009896:	f000 fc51 	bl	800a13c <__assert_func>
 800989a:	2301      	movs	r3, #1
 800989c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80098a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098a4:	bfa4      	itt	ge
 80098a6:	4643      	movge	r3, r8
 80098a8:	46a0      	movge	r8, r4
 80098aa:	4630      	mov	r0, r6
 80098ac:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80098b0:	bfa6      	itte	ge
 80098b2:	461c      	movge	r4, r3
 80098b4:	2500      	movge	r5, #0
 80098b6:	2501      	movlt	r5, #1
 80098b8:	f7ff fcf0 	bl	800929c <_Balloc>
 80098bc:	b920      	cbnz	r0, 80098c8 <__mdiff+0x5c>
 80098be:	4b2e      	ldr	r3, [pc, #184]	; (8009978 <__mdiff+0x10c>)
 80098c0:	4602      	mov	r2, r0
 80098c2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80098c6:	e7e5      	b.n	8009894 <__mdiff+0x28>
 80098c8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80098cc:	6926      	ldr	r6, [r4, #16]
 80098ce:	60c5      	str	r5, [r0, #12]
 80098d0:	f104 0914 	add.w	r9, r4, #20
 80098d4:	f108 0514 	add.w	r5, r8, #20
 80098d8:	f100 0e14 	add.w	lr, r0, #20
 80098dc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80098e0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80098e4:	f108 0210 	add.w	r2, r8, #16
 80098e8:	46f2      	mov	sl, lr
 80098ea:	2100      	movs	r1, #0
 80098ec:	f859 3b04 	ldr.w	r3, [r9], #4
 80098f0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80098f4:	fa1f f883 	uxth.w	r8, r3
 80098f8:	fa11 f18b 	uxtah	r1, r1, fp
 80098fc:	0c1b      	lsrs	r3, r3, #16
 80098fe:	eba1 0808 	sub.w	r8, r1, r8
 8009902:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009906:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800990a:	fa1f f888 	uxth.w	r8, r8
 800990e:	1419      	asrs	r1, r3, #16
 8009910:	454e      	cmp	r6, r9
 8009912:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009916:	f84a 3b04 	str.w	r3, [sl], #4
 800991a:	d8e7      	bhi.n	80098ec <__mdiff+0x80>
 800991c:	1b33      	subs	r3, r6, r4
 800991e:	3b15      	subs	r3, #21
 8009920:	f023 0303 	bic.w	r3, r3, #3
 8009924:	3304      	adds	r3, #4
 8009926:	3415      	adds	r4, #21
 8009928:	42a6      	cmp	r6, r4
 800992a:	bf38      	it	cc
 800992c:	2304      	movcc	r3, #4
 800992e:	441d      	add	r5, r3
 8009930:	4473      	add	r3, lr
 8009932:	469e      	mov	lr, r3
 8009934:	462e      	mov	r6, r5
 8009936:	4566      	cmp	r6, ip
 8009938:	d30e      	bcc.n	8009958 <__mdiff+0xec>
 800993a:	f10c 0203 	add.w	r2, ip, #3
 800993e:	1b52      	subs	r2, r2, r5
 8009940:	f022 0203 	bic.w	r2, r2, #3
 8009944:	3d03      	subs	r5, #3
 8009946:	45ac      	cmp	ip, r5
 8009948:	bf38      	it	cc
 800994a:	2200      	movcc	r2, #0
 800994c:	441a      	add	r2, r3
 800994e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009952:	b17b      	cbz	r3, 8009974 <__mdiff+0x108>
 8009954:	6107      	str	r7, [r0, #16]
 8009956:	e7a3      	b.n	80098a0 <__mdiff+0x34>
 8009958:	f856 8b04 	ldr.w	r8, [r6], #4
 800995c:	fa11 f288 	uxtah	r2, r1, r8
 8009960:	1414      	asrs	r4, r2, #16
 8009962:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009966:	b292      	uxth	r2, r2
 8009968:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800996c:	f84e 2b04 	str.w	r2, [lr], #4
 8009970:	1421      	asrs	r1, r4, #16
 8009972:	e7e0      	b.n	8009936 <__mdiff+0xca>
 8009974:	3f01      	subs	r7, #1
 8009976:	e7ea      	b.n	800994e <__mdiff+0xe2>
 8009978:	0800b6c0 	.word	0x0800b6c0
 800997c:	0800b74c 	.word	0x0800b74c

08009980 <__ulp>:
 8009980:	b082      	sub	sp, #8
 8009982:	ed8d 0b00 	vstr	d0, [sp]
 8009986:	9b01      	ldr	r3, [sp, #4]
 8009988:	4912      	ldr	r1, [pc, #72]	; (80099d4 <__ulp+0x54>)
 800998a:	4019      	ands	r1, r3
 800998c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8009990:	2900      	cmp	r1, #0
 8009992:	dd05      	ble.n	80099a0 <__ulp+0x20>
 8009994:	2200      	movs	r2, #0
 8009996:	460b      	mov	r3, r1
 8009998:	ec43 2b10 	vmov	d0, r2, r3
 800999c:	b002      	add	sp, #8
 800999e:	4770      	bx	lr
 80099a0:	4249      	negs	r1, r1
 80099a2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80099a6:	ea4f 5021 	mov.w	r0, r1, asr #20
 80099aa:	f04f 0200 	mov.w	r2, #0
 80099ae:	f04f 0300 	mov.w	r3, #0
 80099b2:	da04      	bge.n	80099be <__ulp+0x3e>
 80099b4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80099b8:	fa41 f300 	asr.w	r3, r1, r0
 80099bc:	e7ec      	b.n	8009998 <__ulp+0x18>
 80099be:	f1a0 0114 	sub.w	r1, r0, #20
 80099c2:	291e      	cmp	r1, #30
 80099c4:	bfda      	itte	le
 80099c6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80099ca:	fa20 f101 	lsrle.w	r1, r0, r1
 80099ce:	2101      	movgt	r1, #1
 80099d0:	460a      	mov	r2, r1
 80099d2:	e7e1      	b.n	8009998 <__ulp+0x18>
 80099d4:	7ff00000 	.word	0x7ff00000

080099d8 <__b2d>:
 80099d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099da:	6905      	ldr	r5, [r0, #16]
 80099dc:	f100 0714 	add.w	r7, r0, #20
 80099e0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80099e4:	1f2e      	subs	r6, r5, #4
 80099e6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80099ea:	4620      	mov	r0, r4
 80099ec:	f7ff fd48 	bl	8009480 <__hi0bits>
 80099f0:	f1c0 0320 	rsb	r3, r0, #32
 80099f4:	280a      	cmp	r0, #10
 80099f6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8009a74 <__b2d+0x9c>
 80099fa:	600b      	str	r3, [r1, #0]
 80099fc:	dc14      	bgt.n	8009a28 <__b2d+0x50>
 80099fe:	f1c0 0e0b 	rsb	lr, r0, #11
 8009a02:	fa24 f10e 	lsr.w	r1, r4, lr
 8009a06:	42b7      	cmp	r7, r6
 8009a08:	ea41 030c 	orr.w	r3, r1, ip
 8009a0c:	bf34      	ite	cc
 8009a0e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009a12:	2100      	movcs	r1, #0
 8009a14:	3015      	adds	r0, #21
 8009a16:	fa04 f000 	lsl.w	r0, r4, r0
 8009a1a:	fa21 f10e 	lsr.w	r1, r1, lr
 8009a1e:	ea40 0201 	orr.w	r2, r0, r1
 8009a22:	ec43 2b10 	vmov	d0, r2, r3
 8009a26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a28:	42b7      	cmp	r7, r6
 8009a2a:	bf3a      	itte	cc
 8009a2c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009a30:	f1a5 0608 	subcc.w	r6, r5, #8
 8009a34:	2100      	movcs	r1, #0
 8009a36:	380b      	subs	r0, #11
 8009a38:	d017      	beq.n	8009a6a <__b2d+0x92>
 8009a3a:	f1c0 0c20 	rsb	ip, r0, #32
 8009a3e:	fa04 f500 	lsl.w	r5, r4, r0
 8009a42:	42be      	cmp	r6, r7
 8009a44:	fa21 f40c 	lsr.w	r4, r1, ip
 8009a48:	ea45 0504 	orr.w	r5, r5, r4
 8009a4c:	bf8c      	ite	hi
 8009a4e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8009a52:	2400      	movls	r4, #0
 8009a54:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8009a58:	fa01 f000 	lsl.w	r0, r1, r0
 8009a5c:	fa24 f40c 	lsr.w	r4, r4, ip
 8009a60:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009a64:	ea40 0204 	orr.w	r2, r0, r4
 8009a68:	e7db      	b.n	8009a22 <__b2d+0x4a>
 8009a6a:	ea44 030c 	orr.w	r3, r4, ip
 8009a6e:	460a      	mov	r2, r1
 8009a70:	e7d7      	b.n	8009a22 <__b2d+0x4a>
 8009a72:	bf00      	nop
 8009a74:	3ff00000 	.word	0x3ff00000

08009a78 <__d2b>:
 8009a78:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009a7c:	4689      	mov	r9, r1
 8009a7e:	2101      	movs	r1, #1
 8009a80:	ec57 6b10 	vmov	r6, r7, d0
 8009a84:	4690      	mov	r8, r2
 8009a86:	f7ff fc09 	bl	800929c <_Balloc>
 8009a8a:	4604      	mov	r4, r0
 8009a8c:	b930      	cbnz	r0, 8009a9c <__d2b+0x24>
 8009a8e:	4602      	mov	r2, r0
 8009a90:	4b25      	ldr	r3, [pc, #148]	; (8009b28 <__d2b+0xb0>)
 8009a92:	4826      	ldr	r0, [pc, #152]	; (8009b2c <__d2b+0xb4>)
 8009a94:	f240 310a 	movw	r1, #778	; 0x30a
 8009a98:	f000 fb50 	bl	800a13c <__assert_func>
 8009a9c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009aa0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009aa4:	bb35      	cbnz	r5, 8009af4 <__d2b+0x7c>
 8009aa6:	2e00      	cmp	r6, #0
 8009aa8:	9301      	str	r3, [sp, #4]
 8009aaa:	d028      	beq.n	8009afe <__d2b+0x86>
 8009aac:	4668      	mov	r0, sp
 8009aae:	9600      	str	r6, [sp, #0]
 8009ab0:	f7ff fd06 	bl	80094c0 <__lo0bits>
 8009ab4:	9900      	ldr	r1, [sp, #0]
 8009ab6:	b300      	cbz	r0, 8009afa <__d2b+0x82>
 8009ab8:	9a01      	ldr	r2, [sp, #4]
 8009aba:	f1c0 0320 	rsb	r3, r0, #32
 8009abe:	fa02 f303 	lsl.w	r3, r2, r3
 8009ac2:	430b      	orrs	r3, r1
 8009ac4:	40c2      	lsrs	r2, r0
 8009ac6:	6163      	str	r3, [r4, #20]
 8009ac8:	9201      	str	r2, [sp, #4]
 8009aca:	9b01      	ldr	r3, [sp, #4]
 8009acc:	61a3      	str	r3, [r4, #24]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	bf14      	ite	ne
 8009ad2:	2202      	movne	r2, #2
 8009ad4:	2201      	moveq	r2, #1
 8009ad6:	6122      	str	r2, [r4, #16]
 8009ad8:	b1d5      	cbz	r5, 8009b10 <__d2b+0x98>
 8009ada:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009ade:	4405      	add	r5, r0
 8009ae0:	f8c9 5000 	str.w	r5, [r9]
 8009ae4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009ae8:	f8c8 0000 	str.w	r0, [r8]
 8009aec:	4620      	mov	r0, r4
 8009aee:	b003      	add	sp, #12
 8009af0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009af4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009af8:	e7d5      	b.n	8009aa6 <__d2b+0x2e>
 8009afa:	6161      	str	r1, [r4, #20]
 8009afc:	e7e5      	b.n	8009aca <__d2b+0x52>
 8009afe:	a801      	add	r0, sp, #4
 8009b00:	f7ff fcde 	bl	80094c0 <__lo0bits>
 8009b04:	9b01      	ldr	r3, [sp, #4]
 8009b06:	6163      	str	r3, [r4, #20]
 8009b08:	2201      	movs	r2, #1
 8009b0a:	6122      	str	r2, [r4, #16]
 8009b0c:	3020      	adds	r0, #32
 8009b0e:	e7e3      	b.n	8009ad8 <__d2b+0x60>
 8009b10:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009b14:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009b18:	f8c9 0000 	str.w	r0, [r9]
 8009b1c:	6918      	ldr	r0, [r3, #16]
 8009b1e:	f7ff fcaf 	bl	8009480 <__hi0bits>
 8009b22:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009b26:	e7df      	b.n	8009ae8 <__d2b+0x70>
 8009b28:	0800b6c0 	.word	0x0800b6c0
 8009b2c:	0800b74c 	.word	0x0800b74c

08009b30 <__ratio>:
 8009b30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b34:	4688      	mov	r8, r1
 8009b36:	4669      	mov	r1, sp
 8009b38:	4681      	mov	r9, r0
 8009b3a:	f7ff ff4d 	bl	80099d8 <__b2d>
 8009b3e:	a901      	add	r1, sp, #4
 8009b40:	4640      	mov	r0, r8
 8009b42:	ec55 4b10 	vmov	r4, r5, d0
 8009b46:	f7ff ff47 	bl	80099d8 <__b2d>
 8009b4a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009b4e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009b52:	eba3 0c02 	sub.w	ip, r3, r2
 8009b56:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009b5a:	1a9b      	subs	r3, r3, r2
 8009b5c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009b60:	ec51 0b10 	vmov	r0, r1, d0
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	bfd6      	itet	le
 8009b68:	460a      	movle	r2, r1
 8009b6a:	462a      	movgt	r2, r5
 8009b6c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009b70:	468b      	mov	fp, r1
 8009b72:	462f      	mov	r7, r5
 8009b74:	bfd4      	ite	le
 8009b76:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009b7a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009b7e:	4620      	mov	r0, r4
 8009b80:	ee10 2a10 	vmov	r2, s0
 8009b84:	465b      	mov	r3, fp
 8009b86:	4639      	mov	r1, r7
 8009b88:	f7f6 fe60 	bl	800084c <__aeabi_ddiv>
 8009b8c:	ec41 0b10 	vmov	d0, r0, r1
 8009b90:	b003      	add	sp, #12
 8009b92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009b96 <__copybits>:
 8009b96:	3901      	subs	r1, #1
 8009b98:	b570      	push	{r4, r5, r6, lr}
 8009b9a:	1149      	asrs	r1, r1, #5
 8009b9c:	6914      	ldr	r4, [r2, #16]
 8009b9e:	3101      	adds	r1, #1
 8009ba0:	f102 0314 	add.w	r3, r2, #20
 8009ba4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009ba8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009bac:	1f05      	subs	r5, r0, #4
 8009bae:	42a3      	cmp	r3, r4
 8009bb0:	d30c      	bcc.n	8009bcc <__copybits+0x36>
 8009bb2:	1aa3      	subs	r3, r4, r2
 8009bb4:	3b11      	subs	r3, #17
 8009bb6:	f023 0303 	bic.w	r3, r3, #3
 8009bba:	3211      	adds	r2, #17
 8009bbc:	42a2      	cmp	r2, r4
 8009bbe:	bf88      	it	hi
 8009bc0:	2300      	movhi	r3, #0
 8009bc2:	4418      	add	r0, r3
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	4288      	cmp	r0, r1
 8009bc8:	d305      	bcc.n	8009bd6 <__copybits+0x40>
 8009bca:	bd70      	pop	{r4, r5, r6, pc}
 8009bcc:	f853 6b04 	ldr.w	r6, [r3], #4
 8009bd0:	f845 6f04 	str.w	r6, [r5, #4]!
 8009bd4:	e7eb      	b.n	8009bae <__copybits+0x18>
 8009bd6:	f840 3b04 	str.w	r3, [r0], #4
 8009bda:	e7f4      	b.n	8009bc6 <__copybits+0x30>

08009bdc <__any_on>:
 8009bdc:	f100 0214 	add.w	r2, r0, #20
 8009be0:	6900      	ldr	r0, [r0, #16]
 8009be2:	114b      	asrs	r3, r1, #5
 8009be4:	4298      	cmp	r0, r3
 8009be6:	b510      	push	{r4, lr}
 8009be8:	db11      	blt.n	8009c0e <__any_on+0x32>
 8009bea:	dd0a      	ble.n	8009c02 <__any_on+0x26>
 8009bec:	f011 011f 	ands.w	r1, r1, #31
 8009bf0:	d007      	beq.n	8009c02 <__any_on+0x26>
 8009bf2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009bf6:	fa24 f001 	lsr.w	r0, r4, r1
 8009bfa:	fa00 f101 	lsl.w	r1, r0, r1
 8009bfe:	428c      	cmp	r4, r1
 8009c00:	d10b      	bne.n	8009c1a <__any_on+0x3e>
 8009c02:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009c06:	4293      	cmp	r3, r2
 8009c08:	d803      	bhi.n	8009c12 <__any_on+0x36>
 8009c0a:	2000      	movs	r0, #0
 8009c0c:	bd10      	pop	{r4, pc}
 8009c0e:	4603      	mov	r3, r0
 8009c10:	e7f7      	b.n	8009c02 <__any_on+0x26>
 8009c12:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009c16:	2900      	cmp	r1, #0
 8009c18:	d0f5      	beq.n	8009c06 <__any_on+0x2a>
 8009c1a:	2001      	movs	r0, #1
 8009c1c:	e7f6      	b.n	8009c0c <__any_on+0x30>

08009c1e <_calloc_r>:
 8009c1e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009c20:	fba1 2402 	umull	r2, r4, r1, r2
 8009c24:	b94c      	cbnz	r4, 8009c3a <_calloc_r+0x1c>
 8009c26:	4611      	mov	r1, r2
 8009c28:	9201      	str	r2, [sp, #4]
 8009c2a:	f000 f87b 	bl	8009d24 <_malloc_r>
 8009c2e:	9a01      	ldr	r2, [sp, #4]
 8009c30:	4605      	mov	r5, r0
 8009c32:	b930      	cbnz	r0, 8009c42 <_calloc_r+0x24>
 8009c34:	4628      	mov	r0, r5
 8009c36:	b003      	add	sp, #12
 8009c38:	bd30      	pop	{r4, r5, pc}
 8009c3a:	220c      	movs	r2, #12
 8009c3c:	6002      	str	r2, [r0, #0]
 8009c3e:	2500      	movs	r5, #0
 8009c40:	e7f8      	b.n	8009c34 <_calloc_r+0x16>
 8009c42:	4621      	mov	r1, r4
 8009c44:	f7fc fbc0 	bl	80063c8 <memset>
 8009c48:	e7f4      	b.n	8009c34 <_calloc_r+0x16>
	...

08009c4c <_free_r>:
 8009c4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009c4e:	2900      	cmp	r1, #0
 8009c50:	d044      	beq.n	8009cdc <_free_r+0x90>
 8009c52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c56:	9001      	str	r0, [sp, #4]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	f1a1 0404 	sub.w	r4, r1, #4
 8009c5e:	bfb8      	it	lt
 8009c60:	18e4      	addlt	r4, r4, r3
 8009c62:	f000 fab5 	bl	800a1d0 <__malloc_lock>
 8009c66:	4a1e      	ldr	r2, [pc, #120]	; (8009ce0 <_free_r+0x94>)
 8009c68:	9801      	ldr	r0, [sp, #4]
 8009c6a:	6813      	ldr	r3, [r2, #0]
 8009c6c:	b933      	cbnz	r3, 8009c7c <_free_r+0x30>
 8009c6e:	6063      	str	r3, [r4, #4]
 8009c70:	6014      	str	r4, [r2, #0]
 8009c72:	b003      	add	sp, #12
 8009c74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009c78:	f000 bab0 	b.w	800a1dc <__malloc_unlock>
 8009c7c:	42a3      	cmp	r3, r4
 8009c7e:	d908      	bls.n	8009c92 <_free_r+0x46>
 8009c80:	6825      	ldr	r5, [r4, #0]
 8009c82:	1961      	adds	r1, r4, r5
 8009c84:	428b      	cmp	r3, r1
 8009c86:	bf01      	itttt	eq
 8009c88:	6819      	ldreq	r1, [r3, #0]
 8009c8a:	685b      	ldreq	r3, [r3, #4]
 8009c8c:	1949      	addeq	r1, r1, r5
 8009c8e:	6021      	streq	r1, [r4, #0]
 8009c90:	e7ed      	b.n	8009c6e <_free_r+0x22>
 8009c92:	461a      	mov	r2, r3
 8009c94:	685b      	ldr	r3, [r3, #4]
 8009c96:	b10b      	cbz	r3, 8009c9c <_free_r+0x50>
 8009c98:	42a3      	cmp	r3, r4
 8009c9a:	d9fa      	bls.n	8009c92 <_free_r+0x46>
 8009c9c:	6811      	ldr	r1, [r2, #0]
 8009c9e:	1855      	adds	r5, r2, r1
 8009ca0:	42a5      	cmp	r5, r4
 8009ca2:	d10b      	bne.n	8009cbc <_free_r+0x70>
 8009ca4:	6824      	ldr	r4, [r4, #0]
 8009ca6:	4421      	add	r1, r4
 8009ca8:	1854      	adds	r4, r2, r1
 8009caa:	42a3      	cmp	r3, r4
 8009cac:	6011      	str	r1, [r2, #0]
 8009cae:	d1e0      	bne.n	8009c72 <_free_r+0x26>
 8009cb0:	681c      	ldr	r4, [r3, #0]
 8009cb2:	685b      	ldr	r3, [r3, #4]
 8009cb4:	6053      	str	r3, [r2, #4]
 8009cb6:	4421      	add	r1, r4
 8009cb8:	6011      	str	r1, [r2, #0]
 8009cba:	e7da      	b.n	8009c72 <_free_r+0x26>
 8009cbc:	d902      	bls.n	8009cc4 <_free_r+0x78>
 8009cbe:	230c      	movs	r3, #12
 8009cc0:	6003      	str	r3, [r0, #0]
 8009cc2:	e7d6      	b.n	8009c72 <_free_r+0x26>
 8009cc4:	6825      	ldr	r5, [r4, #0]
 8009cc6:	1961      	adds	r1, r4, r5
 8009cc8:	428b      	cmp	r3, r1
 8009cca:	bf04      	itt	eq
 8009ccc:	6819      	ldreq	r1, [r3, #0]
 8009cce:	685b      	ldreq	r3, [r3, #4]
 8009cd0:	6063      	str	r3, [r4, #4]
 8009cd2:	bf04      	itt	eq
 8009cd4:	1949      	addeq	r1, r1, r5
 8009cd6:	6021      	streq	r1, [r4, #0]
 8009cd8:	6054      	str	r4, [r2, #4]
 8009cda:	e7ca      	b.n	8009c72 <_free_r+0x26>
 8009cdc:	b003      	add	sp, #12
 8009cde:	bd30      	pop	{r4, r5, pc}
 8009ce0:	20000380 	.word	0x20000380

08009ce4 <sbrk_aligned>:
 8009ce4:	b570      	push	{r4, r5, r6, lr}
 8009ce6:	4e0e      	ldr	r6, [pc, #56]	; (8009d20 <sbrk_aligned+0x3c>)
 8009ce8:	460c      	mov	r4, r1
 8009cea:	6831      	ldr	r1, [r6, #0]
 8009cec:	4605      	mov	r5, r0
 8009cee:	b911      	cbnz	r1, 8009cf6 <sbrk_aligned+0x12>
 8009cf0:	f000 f9f2 	bl	800a0d8 <_sbrk_r>
 8009cf4:	6030      	str	r0, [r6, #0]
 8009cf6:	4621      	mov	r1, r4
 8009cf8:	4628      	mov	r0, r5
 8009cfa:	f000 f9ed 	bl	800a0d8 <_sbrk_r>
 8009cfe:	1c43      	adds	r3, r0, #1
 8009d00:	d00a      	beq.n	8009d18 <sbrk_aligned+0x34>
 8009d02:	1cc4      	adds	r4, r0, #3
 8009d04:	f024 0403 	bic.w	r4, r4, #3
 8009d08:	42a0      	cmp	r0, r4
 8009d0a:	d007      	beq.n	8009d1c <sbrk_aligned+0x38>
 8009d0c:	1a21      	subs	r1, r4, r0
 8009d0e:	4628      	mov	r0, r5
 8009d10:	f000 f9e2 	bl	800a0d8 <_sbrk_r>
 8009d14:	3001      	adds	r0, #1
 8009d16:	d101      	bne.n	8009d1c <sbrk_aligned+0x38>
 8009d18:	f04f 34ff 	mov.w	r4, #4294967295
 8009d1c:	4620      	mov	r0, r4
 8009d1e:	bd70      	pop	{r4, r5, r6, pc}
 8009d20:	20000384 	.word	0x20000384

08009d24 <_malloc_r>:
 8009d24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d28:	1ccd      	adds	r5, r1, #3
 8009d2a:	f025 0503 	bic.w	r5, r5, #3
 8009d2e:	3508      	adds	r5, #8
 8009d30:	2d0c      	cmp	r5, #12
 8009d32:	bf38      	it	cc
 8009d34:	250c      	movcc	r5, #12
 8009d36:	2d00      	cmp	r5, #0
 8009d38:	4607      	mov	r7, r0
 8009d3a:	db01      	blt.n	8009d40 <_malloc_r+0x1c>
 8009d3c:	42a9      	cmp	r1, r5
 8009d3e:	d905      	bls.n	8009d4c <_malloc_r+0x28>
 8009d40:	230c      	movs	r3, #12
 8009d42:	603b      	str	r3, [r7, #0]
 8009d44:	2600      	movs	r6, #0
 8009d46:	4630      	mov	r0, r6
 8009d48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d4c:	4e2e      	ldr	r6, [pc, #184]	; (8009e08 <_malloc_r+0xe4>)
 8009d4e:	f000 fa3f 	bl	800a1d0 <__malloc_lock>
 8009d52:	6833      	ldr	r3, [r6, #0]
 8009d54:	461c      	mov	r4, r3
 8009d56:	bb34      	cbnz	r4, 8009da6 <_malloc_r+0x82>
 8009d58:	4629      	mov	r1, r5
 8009d5a:	4638      	mov	r0, r7
 8009d5c:	f7ff ffc2 	bl	8009ce4 <sbrk_aligned>
 8009d60:	1c43      	adds	r3, r0, #1
 8009d62:	4604      	mov	r4, r0
 8009d64:	d14d      	bne.n	8009e02 <_malloc_r+0xde>
 8009d66:	6834      	ldr	r4, [r6, #0]
 8009d68:	4626      	mov	r6, r4
 8009d6a:	2e00      	cmp	r6, #0
 8009d6c:	d140      	bne.n	8009df0 <_malloc_r+0xcc>
 8009d6e:	6823      	ldr	r3, [r4, #0]
 8009d70:	4631      	mov	r1, r6
 8009d72:	4638      	mov	r0, r7
 8009d74:	eb04 0803 	add.w	r8, r4, r3
 8009d78:	f000 f9ae 	bl	800a0d8 <_sbrk_r>
 8009d7c:	4580      	cmp	r8, r0
 8009d7e:	d13a      	bne.n	8009df6 <_malloc_r+0xd2>
 8009d80:	6821      	ldr	r1, [r4, #0]
 8009d82:	3503      	adds	r5, #3
 8009d84:	1a6d      	subs	r5, r5, r1
 8009d86:	f025 0503 	bic.w	r5, r5, #3
 8009d8a:	3508      	adds	r5, #8
 8009d8c:	2d0c      	cmp	r5, #12
 8009d8e:	bf38      	it	cc
 8009d90:	250c      	movcc	r5, #12
 8009d92:	4629      	mov	r1, r5
 8009d94:	4638      	mov	r0, r7
 8009d96:	f7ff ffa5 	bl	8009ce4 <sbrk_aligned>
 8009d9a:	3001      	adds	r0, #1
 8009d9c:	d02b      	beq.n	8009df6 <_malloc_r+0xd2>
 8009d9e:	6823      	ldr	r3, [r4, #0]
 8009da0:	442b      	add	r3, r5
 8009da2:	6023      	str	r3, [r4, #0]
 8009da4:	e00e      	b.n	8009dc4 <_malloc_r+0xa0>
 8009da6:	6822      	ldr	r2, [r4, #0]
 8009da8:	1b52      	subs	r2, r2, r5
 8009daa:	d41e      	bmi.n	8009dea <_malloc_r+0xc6>
 8009dac:	2a0b      	cmp	r2, #11
 8009dae:	d916      	bls.n	8009dde <_malloc_r+0xba>
 8009db0:	1961      	adds	r1, r4, r5
 8009db2:	42a3      	cmp	r3, r4
 8009db4:	6025      	str	r5, [r4, #0]
 8009db6:	bf18      	it	ne
 8009db8:	6059      	strne	r1, [r3, #4]
 8009dba:	6863      	ldr	r3, [r4, #4]
 8009dbc:	bf08      	it	eq
 8009dbe:	6031      	streq	r1, [r6, #0]
 8009dc0:	5162      	str	r2, [r4, r5]
 8009dc2:	604b      	str	r3, [r1, #4]
 8009dc4:	4638      	mov	r0, r7
 8009dc6:	f104 060b 	add.w	r6, r4, #11
 8009dca:	f000 fa07 	bl	800a1dc <__malloc_unlock>
 8009dce:	f026 0607 	bic.w	r6, r6, #7
 8009dd2:	1d23      	adds	r3, r4, #4
 8009dd4:	1af2      	subs	r2, r6, r3
 8009dd6:	d0b6      	beq.n	8009d46 <_malloc_r+0x22>
 8009dd8:	1b9b      	subs	r3, r3, r6
 8009dda:	50a3      	str	r3, [r4, r2]
 8009ddc:	e7b3      	b.n	8009d46 <_malloc_r+0x22>
 8009dde:	6862      	ldr	r2, [r4, #4]
 8009de0:	42a3      	cmp	r3, r4
 8009de2:	bf0c      	ite	eq
 8009de4:	6032      	streq	r2, [r6, #0]
 8009de6:	605a      	strne	r2, [r3, #4]
 8009de8:	e7ec      	b.n	8009dc4 <_malloc_r+0xa0>
 8009dea:	4623      	mov	r3, r4
 8009dec:	6864      	ldr	r4, [r4, #4]
 8009dee:	e7b2      	b.n	8009d56 <_malloc_r+0x32>
 8009df0:	4634      	mov	r4, r6
 8009df2:	6876      	ldr	r6, [r6, #4]
 8009df4:	e7b9      	b.n	8009d6a <_malloc_r+0x46>
 8009df6:	230c      	movs	r3, #12
 8009df8:	603b      	str	r3, [r7, #0]
 8009dfa:	4638      	mov	r0, r7
 8009dfc:	f000 f9ee 	bl	800a1dc <__malloc_unlock>
 8009e00:	e7a1      	b.n	8009d46 <_malloc_r+0x22>
 8009e02:	6025      	str	r5, [r4, #0]
 8009e04:	e7de      	b.n	8009dc4 <_malloc_r+0xa0>
 8009e06:	bf00      	nop
 8009e08:	20000380 	.word	0x20000380

08009e0c <__ssputs_r>:
 8009e0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e10:	688e      	ldr	r6, [r1, #8]
 8009e12:	429e      	cmp	r6, r3
 8009e14:	4682      	mov	sl, r0
 8009e16:	460c      	mov	r4, r1
 8009e18:	4690      	mov	r8, r2
 8009e1a:	461f      	mov	r7, r3
 8009e1c:	d838      	bhi.n	8009e90 <__ssputs_r+0x84>
 8009e1e:	898a      	ldrh	r2, [r1, #12]
 8009e20:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009e24:	d032      	beq.n	8009e8c <__ssputs_r+0x80>
 8009e26:	6825      	ldr	r5, [r4, #0]
 8009e28:	6909      	ldr	r1, [r1, #16]
 8009e2a:	eba5 0901 	sub.w	r9, r5, r1
 8009e2e:	6965      	ldr	r5, [r4, #20]
 8009e30:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009e34:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009e38:	3301      	adds	r3, #1
 8009e3a:	444b      	add	r3, r9
 8009e3c:	106d      	asrs	r5, r5, #1
 8009e3e:	429d      	cmp	r5, r3
 8009e40:	bf38      	it	cc
 8009e42:	461d      	movcc	r5, r3
 8009e44:	0553      	lsls	r3, r2, #21
 8009e46:	d531      	bpl.n	8009eac <__ssputs_r+0xa0>
 8009e48:	4629      	mov	r1, r5
 8009e4a:	f7ff ff6b 	bl	8009d24 <_malloc_r>
 8009e4e:	4606      	mov	r6, r0
 8009e50:	b950      	cbnz	r0, 8009e68 <__ssputs_r+0x5c>
 8009e52:	230c      	movs	r3, #12
 8009e54:	f8ca 3000 	str.w	r3, [sl]
 8009e58:	89a3      	ldrh	r3, [r4, #12]
 8009e5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e5e:	81a3      	strh	r3, [r4, #12]
 8009e60:	f04f 30ff 	mov.w	r0, #4294967295
 8009e64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e68:	6921      	ldr	r1, [r4, #16]
 8009e6a:	464a      	mov	r2, r9
 8009e6c:	f7ff fa08 	bl	8009280 <memcpy>
 8009e70:	89a3      	ldrh	r3, [r4, #12]
 8009e72:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009e76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e7a:	81a3      	strh	r3, [r4, #12]
 8009e7c:	6126      	str	r6, [r4, #16]
 8009e7e:	6165      	str	r5, [r4, #20]
 8009e80:	444e      	add	r6, r9
 8009e82:	eba5 0509 	sub.w	r5, r5, r9
 8009e86:	6026      	str	r6, [r4, #0]
 8009e88:	60a5      	str	r5, [r4, #8]
 8009e8a:	463e      	mov	r6, r7
 8009e8c:	42be      	cmp	r6, r7
 8009e8e:	d900      	bls.n	8009e92 <__ssputs_r+0x86>
 8009e90:	463e      	mov	r6, r7
 8009e92:	6820      	ldr	r0, [r4, #0]
 8009e94:	4632      	mov	r2, r6
 8009e96:	4641      	mov	r1, r8
 8009e98:	f000 f980 	bl	800a19c <memmove>
 8009e9c:	68a3      	ldr	r3, [r4, #8]
 8009e9e:	1b9b      	subs	r3, r3, r6
 8009ea0:	60a3      	str	r3, [r4, #8]
 8009ea2:	6823      	ldr	r3, [r4, #0]
 8009ea4:	4433      	add	r3, r6
 8009ea6:	6023      	str	r3, [r4, #0]
 8009ea8:	2000      	movs	r0, #0
 8009eaa:	e7db      	b.n	8009e64 <__ssputs_r+0x58>
 8009eac:	462a      	mov	r2, r5
 8009eae:	f000 f99b 	bl	800a1e8 <_realloc_r>
 8009eb2:	4606      	mov	r6, r0
 8009eb4:	2800      	cmp	r0, #0
 8009eb6:	d1e1      	bne.n	8009e7c <__ssputs_r+0x70>
 8009eb8:	6921      	ldr	r1, [r4, #16]
 8009eba:	4650      	mov	r0, sl
 8009ebc:	f7ff fec6 	bl	8009c4c <_free_r>
 8009ec0:	e7c7      	b.n	8009e52 <__ssputs_r+0x46>
	...

08009ec4 <_svfiprintf_r>:
 8009ec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ec8:	4698      	mov	r8, r3
 8009eca:	898b      	ldrh	r3, [r1, #12]
 8009ecc:	061b      	lsls	r3, r3, #24
 8009ece:	b09d      	sub	sp, #116	; 0x74
 8009ed0:	4607      	mov	r7, r0
 8009ed2:	460d      	mov	r5, r1
 8009ed4:	4614      	mov	r4, r2
 8009ed6:	d50e      	bpl.n	8009ef6 <_svfiprintf_r+0x32>
 8009ed8:	690b      	ldr	r3, [r1, #16]
 8009eda:	b963      	cbnz	r3, 8009ef6 <_svfiprintf_r+0x32>
 8009edc:	2140      	movs	r1, #64	; 0x40
 8009ede:	f7ff ff21 	bl	8009d24 <_malloc_r>
 8009ee2:	6028      	str	r0, [r5, #0]
 8009ee4:	6128      	str	r0, [r5, #16]
 8009ee6:	b920      	cbnz	r0, 8009ef2 <_svfiprintf_r+0x2e>
 8009ee8:	230c      	movs	r3, #12
 8009eea:	603b      	str	r3, [r7, #0]
 8009eec:	f04f 30ff 	mov.w	r0, #4294967295
 8009ef0:	e0d1      	b.n	800a096 <_svfiprintf_r+0x1d2>
 8009ef2:	2340      	movs	r3, #64	; 0x40
 8009ef4:	616b      	str	r3, [r5, #20]
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	9309      	str	r3, [sp, #36]	; 0x24
 8009efa:	2320      	movs	r3, #32
 8009efc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009f00:	f8cd 800c 	str.w	r8, [sp, #12]
 8009f04:	2330      	movs	r3, #48	; 0x30
 8009f06:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a0b0 <_svfiprintf_r+0x1ec>
 8009f0a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009f0e:	f04f 0901 	mov.w	r9, #1
 8009f12:	4623      	mov	r3, r4
 8009f14:	469a      	mov	sl, r3
 8009f16:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f1a:	b10a      	cbz	r2, 8009f20 <_svfiprintf_r+0x5c>
 8009f1c:	2a25      	cmp	r2, #37	; 0x25
 8009f1e:	d1f9      	bne.n	8009f14 <_svfiprintf_r+0x50>
 8009f20:	ebba 0b04 	subs.w	fp, sl, r4
 8009f24:	d00b      	beq.n	8009f3e <_svfiprintf_r+0x7a>
 8009f26:	465b      	mov	r3, fp
 8009f28:	4622      	mov	r2, r4
 8009f2a:	4629      	mov	r1, r5
 8009f2c:	4638      	mov	r0, r7
 8009f2e:	f7ff ff6d 	bl	8009e0c <__ssputs_r>
 8009f32:	3001      	adds	r0, #1
 8009f34:	f000 80aa 	beq.w	800a08c <_svfiprintf_r+0x1c8>
 8009f38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f3a:	445a      	add	r2, fp
 8009f3c:	9209      	str	r2, [sp, #36]	; 0x24
 8009f3e:	f89a 3000 	ldrb.w	r3, [sl]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	f000 80a2 	beq.w	800a08c <_svfiprintf_r+0x1c8>
 8009f48:	2300      	movs	r3, #0
 8009f4a:	f04f 32ff 	mov.w	r2, #4294967295
 8009f4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009f52:	f10a 0a01 	add.w	sl, sl, #1
 8009f56:	9304      	str	r3, [sp, #16]
 8009f58:	9307      	str	r3, [sp, #28]
 8009f5a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009f5e:	931a      	str	r3, [sp, #104]	; 0x68
 8009f60:	4654      	mov	r4, sl
 8009f62:	2205      	movs	r2, #5
 8009f64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f68:	4851      	ldr	r0, [pc, #324]	; (800a0b0 <_svfiprintf_r+0x1ec>)
 8009f6a:	f7f6 f939 	bl	80001e0 <memchr>
 8009f6e:	9a04      	ldr	r2, [sp, #16]
 8009f70:	b9d8      	cbnz	r0, 8009faa <_svfiprintf_r+0xe6>
 8009f72:	06d0      	lsls	r0, r2, #27
 8009f74:	bf44      	itt	mi
 8009f76:	2320      	movmi	r3, #32
 8009f78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f7c:	0711      	lsls	r1, r2, #28
 8009f7e:	bf44      	itt	mi
 8009f80:	232b      	movmi	r3, #43	; 0x2b
 8009f82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f86:	f89a 3000 	ldrb.w	r3, [sl]
 8009f8a:	2b2a      	cmp	r3, #42	; 0x2a
 8009f8c:	d015      	beq.n	8009fba <_svfiprintf_r+0xf6>
 8009f8e:	9a07      	ldr	r2, [sp, #28]
 8009f90:	4654      	mov	r4, sl
 8009f92:	2000      	movs	r0, #0
 8009f94:	f04f 0c0a 	mov.w	ip, #10
 8009f98:	4621      	mov	r1, r4
 8009f9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009f9e:	3b30      	subs	r3, #48	; 0x30
 8009fa0:	2b09      	cmp	r3, #9
 8009fa2:	d94e      	bls.n	800a042 <_svfiprintf_r+0x17e>
 8009fa4:	b1b0      	cbz	r0, 8009fd4 <_svfiprintf_r+0x110>
 8009fa6:	9207      	str	r2, [sp, #28]
 8009fa8:	e014      	b.n	8009fd4 <_svfiprintf_r+0x110>
 8009faa:	eba0 0308 	sub.w	r3, r0, r8
 8009fae:	fa09 f303 	lsl.w	r3, r9, r3
 8009fb2:	4313      	orrs	r3, r2
 8009fb4:	9304      	str	r3, [sp, #16]
 8009fb6:	46a2      	mov	sl, r4
 8009fb8:	e7d2      	b.n	8009f60 <_svfiprintf_r+0x9c>
 8009fba:	9b03      	ldr	r3, [sp, #12]
 8009fbc:	1d19      	adds	r1, r3, #4
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	9103      	str	r1, [sp, #12]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	bfbb      	ittet	lt
 8009fc6:	425b      	neglt	r3, r3
 8009fc8:	f042 0202 	orrlt.w	r2, r2, #2
 8009fcc:	9307      	strge	r3, [sp, #28]
 8009fce:	9307      	strlt	r3, [sp, #28]
 8009fd0:	bfb8      	it	lt
 8009fd2:	9204      	strlt	r2, [sp, #16]
 8009fd4:	7823      	ldrb	r3, [r4, #0]
 8009fd6:	2b2e      	cmp	r3, #46	; 0x2e
 8009fd8:	d10c      	bne.n	8009ff4 <_svfiprintf_r+0x130>
 8009fda:	7863      	ldrb	r3, [r4, #1]
 8009fdc:	2b2a      	cmp	r3, #42	; 0x2a
 8009fde:	d135      	bne.n	800a04c <_svfiprintf_r+0x188>
 8009fe0:	9b03      	ldr	r3, [sp, #12]
 8009fe2:	1d1a      	adds	r2, r3, #4
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	9203      	str	r2, [sp, #12]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	bfb8      	it	lt
 8009fec:	f04f 33ff 	movlt.w	r3, #4294967295
 8009ff0:	3402      	adds	r4, #2
 8009ff2:	9305      	str	r3, [sp, #20]
 8009ff4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a0c0 <_svfiprintf_r+0x1fc>
 8009ff8:	7821      	ldrb	r1, [r4, #0]
 8009ffa:	2203      	movs	r2, #3
 8009ffc:	4650      	mov	r0, sl
 8009ffe:	f7f6 f8ef 	bl	80001e0 <memchr>
 800a002:	b140      	cbz	r0, 800a016 <_svfiprintf_r+0x152>
 800a004:	2340      	movs	r3, #64	; 0x40
 800a006:	eba0 000a 	sub.w	r0, r0, sl
 800a00a:	fa03 f000 	lsl.w	r0, r3, r0
 800a00e:	9b04      	ldr	r3, [sp, #16]
 800a010:	4303      	orrs	r3, r0
 800a012:	3401      	adds	r4, #1
 800a014:	9304      	str	r3, [sp, #16]
 800a016:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a01a:	4826      	ldr	r0, [pc, #152]	; (800a0b4 <_svfiprintf_r+0x1f0>)
 800a01c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a020:	2206      	movs	r2, #6
 800a022:	f7f6 f8dd 	bl	80001e0 <memchr>
 800a026:	2800      	cmp	r0, #0
 800a028:	d038      	beq.n	800a09c <_svfiprintf_r+0x1d8>
 800a02a:	4b23      	ldr	r3, [pc, #140]	; (800a0b8 <_svfiprintf_r+0x1f4>)
 800a02c:	bb1b      	cbnz	r3, 800a076 <_svfiprintf_r+0x1b2>
 800a02e:	9b03      	ldr	r3, [sp, #12]
 800a030:	3307      	adds	r3, #7
 800a032:	f023 0307 	bic.w	r3, r3, #7
 800a036:	3308      	adds	r3, #8
 800a038:	9303      	str	r3, [sp, #12]
 800a03a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a03c:	4433      	add	r3, r6
 800a03e:	9309      	str	r3, [sp, #36]	; 0x24
 800a040:	e767      	b.n	8009f12 <_svfiprintf_r+0x4e>
 800a042:	fb0c 3202 	mla	r2, ip, r2, r3
 800a046:	460c      	mov	r4, r1
 800a048:	2001      	movs	r0, #1
 800a04a:	e7a5      	b.n	8009f98 <_svfiprintf_r+0xd4>
 800a04c:	2300      	movs	r3, #0
 800a04e:	3401      	adds	r4, #1
 800a050:	9305      	str	r3, [sp, #20]
 800a052:	4619      	mov	r1, r3
 800a054:	f04f 0c0a 	mov.w	ip, #10
 800a058:	4620      	mov	r0, r4
 800a05a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a05e:	3a30      	subs	r2, #48	; 0x30
 800a060:	2a09      	cmp	r2, #9
 800a062:	d903      	bls.n	800a06c <_svfiprintf_r+0x1a8>
 800a064:	2b00      	cmp	r3, #0
 800a066:	d0c5      	beq.n	8009ff4 <_svfiprintf_r+0x130>
 800a068:	9105      	str	r1, [sp, #20]
 800a06a:	e7c3      	b.n	8009ff4 <_svfiprintf_r+0x130>
 800a06c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a070:	4604      	mov	r4, r0
 800a072:	2301      	movs	r3, #1
 800a074:	e7f0      	b.n	800a058 <_svfiprintf_r+0x194>
 800a076:	ab03      	add	r3, sp, #12
 800a078:	9300      	str	r3, [sp, #0]
 800a07a:	462a      	mov	r2, r5
 800a07c:	4b0f      	ldr	r3, [pc, #60]	; (800a0bc <_svfiprintf_r+0x1f8>)
 800a07e:	a904      	add	r1, sp, #16
 800a080:	4638      	mov	r0, r7
 800a082:	f7fc fa49 	bl	8006518 <_printf_float>
 800a086:	1c42      	adds	r2, r0, #1
 800a088:	4606      	mov	r6, r0
 800a08a:	d1d6      	bne.n	800a03a <_svfiprintf_r+0x176>
 800a08c:	89ab      	ldrh	r3, [r5, #12]
 800a08e:	065b      	lsls	r3, r3, #25
 800a090:	f53f af2c 	bmi.w	8009eec <_svfiprintf_r+0x28>
 800a094:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a096:	b01d      	add	sp, #116	; 0x74
 800a098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a09c:	ab03      	add	r3, sp, #12
 800a09e:	9300      	str	r3, [sp, #0]
 800a0a0:	462a      	mov	r2, r5
 800a0a2:	4b06      	ldr	r3, [pc, #24]	; (800a0bc <_svfiprintf_r+0x1f8>)
 800a0a4:	a904      	add	r1, sp, #16
 800a0a6:	4638      	mov	r0, r7
 800a0a8:	f7fc fcda 	bl	8006a60 <_printf_i>
 800a0ac:	e7eb      	b.n	800a086 <_svfiprintf_r+0x1c2>
 800a0ae:	bf00      	nop
 800a0b0:	0800b8a4 	.word	0x0800b8a4
 800a0b4:	0800b8ae 	.word	0x0800b8ae
 800a0b8:	08006519 	.word	0x08006519
 800a0bc:	08009e0d 	.word	0x08009e0d
 800a0c0:	0800b8aa 	.word	0x0800b8aa
 800a0c4:	00000000 	.word	0x00000000

0800a0c8 <nan>:
 800a0c8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a0d0 <nan+0x8>
 800a0cc:	4770      	bx	lr
 800a0ce:	bf00      	nop
 800a0d0:	00000000 	.word	0x00000000
 800a0d4:	7ff80000 	.word	0x7ff80000

0800a0d8 <_sbrk_r>:
 800a0d8:	b538      	push	{r3, r4, r5, lr}
 800a0da:	4d06      	ldr	r5, [pc, #24]	; (800a0f4 <_sbrk_r+0x1c>)
 800a0dc:	2300      	movs	r3, #0
 800a0de:	4604      	mov	r4, r0
 800a0e0:	4608      	mov	r0, r1
 800a0e2:	602b      	str	r3, [r5, #0]
 800a0e4:	f7f7 fee4 	bl	8001eb0 <_sbrk>
 800a0e8:	1c43      	adds	r3, r0, #1
 800a0ea:	d102      	bne.n	800a0f2 <_sbrk_r+0x1a>
 800a0ec:	682b      	ldr	r3, [r5, #0]
 800a0ee:	b103      	cbz	r3, 800a0f2 <_sbrk_r+0x1a>
 800a0f0:	6023      	str	r3, [r4, #0]
 800a0f2:	bd38      	pop	{r3, r4, r5, pc}
 800a0f4:	20000388 	.word	0x20000388

0800a0f8 <strncmp>:
 800a0f8:	b510      	push	{r4, lr}
 800a0fa:	b17a      	cbz	r2, 800a11c <strncmp+0x24>
 800a0fc:	4603      	mov	r3, r0
 800a0fe:	3901      	subs	r1, #1
 800a100:	1884      	adds	r4, r0, r2
 800a102:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a106:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a10a:	4290      	cmp	r0, r2
 800a10c:	d101      	bne.n	800a112 <strncmp+0x1a>
 800a10e:	42a3      	cmp	r3, r4
 800a110:	d101      	bne.n	800a116 <strncmp+0x1e>
 800a112:	1a80      	subs	r0, r0, r2
 800a114:	bd10      	pop	{r4, pc}
 800a116:	2800      	cmp	r0, #0
 800a118:	d1f3      	bne.n	800a102 <strncmp+0xa>
 800a11a:	e7fa      	b.n	800a112 <strncmp+0x1a>
 800a11c:	4610      	mov	r0, r2
 800a11e:	e7f9      	b.n	800a114 <strncmp+0x1c>

0800a120 <__ascii_wctomb>:
 800a120:	b149      	cbz	r1, 800a136 <__ascii_wctomb+0x16>
 800a122:	2aff      	cmp	r2, #255	; 0xff
 800a124:	bf85      	ittet	hi
 800a126:	238a      	movhi	r3, #138	; 0x8a
 800a128:	6003      	strhi	r3, [r0, #0]
 800a12a:	700a      	strbls	r2, [r1, #0]
 800a12c:	f04f 30ff 	movhi.w	r0, #4294967295
 800a130:	bf98      	it	ls
 800a132:	2001      	movls	r0, #1
 800a134:	4770      	bx	lr
 800a136:	4608      	mov	r0, r1
 800a138:	4770      	bx	lr
	...

0800a13c <__assert_func>:
 800a13c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a13e:	4614      	mov	r4, r2
 800a140:	461a      	mov	r2, r3
 800a142:	4b09      	ldr	r3, [pc, #36]	; (800a168 <__assert_func+0x2c>)
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	4605      	mov	r5, r0
 800a148:	68d8      	ldr	r0, [r3, #12]
 800a14a:	b14c      	cbz	r4, 800a160 <__assert_func+0x24>
 800a14c:	4b07      	ldr	r3, [pc, #28]	; (800a16c <__assert_func+0x30>)
 800a14e:	9100      	str	r1, [sp, #0]
 800a150:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a154:	4906      	ldr	r1, [pc, #24]	; (800a170 <__assert_func+0x34>)
 800a156:	462b      	mov	r3, r5
 800a158:	f000 f80e 	bl	800a178 <fiprintf>
 800a15c:	f000 fa8c 	bl	800a678 <abort>
 800a160:	4b04      	ldr	r3, [pc, #16]	; (800a174 <__assert_func+0x38>)
 800a162:	461c      	mov	r4, r3
 800a164:	e7f3      	b.n	800a14e <__assert_func+0x12>
 800a166:	bf00      	nop
 800a168:	2000000c 	.word	0x2000000c
 800a16c:	0800b8b5 	.word	0x0800b8b5
 800a170:	0800b8c2 	.word	0x0800b8c2
 800a174:	0800b8f0 	.word	0x0800b8f0

0800a178 <fiprintf>:
 800a178:	b40e      	push	{r1, r2, r3}
 800a17a:	b503      	push	{r0, r1, lr}
 800a17c:	4601      	mov	r1, r0
 800a17e:	ab03      	add	r3, sp, #12
 800a180:	4805      	ldr	r0, [pc, #20]	; (800a198 <fiprintf+0x20>)
 800a182:	f853 2b04 	ldr.w	r2, [r3], #4
 800a186:	6800      	ldr	r0, [r0, #0]
 800a188:	9301      	str	r3, [sp, #4]
 800a18a:	f000 f885 	bl	800a298 <_vfiprintf_r>
 800a18e:	b002      	add	sp, #8
 800a190:	f85d eb04 	ldr.w	lr, [sp], #4
 800a194:	b003      	add	sp, #12
 800a196:	4770      	bx	lr
 800a198:	2000000c 	.word	0x2000000c

0800a19c <memmove>:
 800a19c:	4288      	cmp	r0, r1
 800a19e:	b510      	push	{r4, lr}
 800a1a0:	eb01 0402 	add.w	r4, r1, r2
 800a1a4:	d902      	bls.n	800a1ac <memmove+0x10>
 800a1a6:	4284      	cmp	r4, r0
 800a1a8:	4623      	mov	r3, r4
 800a1aa:	d807      	bhi.n	800a1bc <memmove+0x20>
 800a1ac:	1e43      	subs	r3, r0, #1
 800a1ae:	42a1      	cmp	r1, r4
 800a1b0:	d008      	beq.n	800a1c4 <memmove+0x28>
 800a1b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a1b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a1ba:	e7f8      	b.n	800a1ae <memmove+0x12>
 800a1bc:	4402      	add	r2, r0
 800a1be:	4601      	mov	r1, r0
 800a1c0:	428a      	cmp	r2, r1
 800a1c2:	d100      	bne.n	800a1c6 <memmove+0x2a>
 800a1c4:	bd10      	pop	{r4, pc}
 800a1c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a1ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a1ce:	e7f7      	b.n	800a1c0 <memmove+0x24>

0800a1d0 <__malloc_lock>:
 800a1d0:	4801      	ldr	r0, [pc, #4]	; (800a1d8 <__malloc_lock+0x8>)
 800a1d2:	f000 bc11 	b.w	800a9f8 <__retarget_lock_acquire_recursive>
 800a1d6:	bf00      	nop
 800a1d8:	2000038c 	.word	0x2000038c

0800a1dc <__malloc_unlock>:
 800a1dc:	4801      	ldr	r0, [pc, #4]	; (800a1e4 <__malloc_unlock+0x8>)
 800a1de:	f000 bc0c 	b.w	800a9fa <__retarget_lock_release_recursive>
 800a1e2:	bf00      	nop
 800a1e4:	2000038c 	.word	0x2000038c

0800a1e8 <_realloc_r>:
 800a1e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1ec:	4680      	mov	r8, r0
 800a1ee:	4614      	mov	r4, r2
 800a1f0:	460e      	mov	r6, r1
 800a1f2:	b921      	cbnz	r1, 800a1fe <_realloc_r+0x16>
 800a1f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a1f8:	4611      	mov	r1, r2
 800a1fa:	f7ff bd93 	b.w	8009d24 <_malloc_r>
 800a1fe:	b92a      	cbnz	r2, 800a20c <_realloc_r+0x24>
 800a200:	f7ff fd24 	bl	8009c4c <_free_r>
 800a204:	4625      	mov	r5, r4
 800a206:	4628      	mov	r0, r5
 800a208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a20c:	f000 fc5c 	bl	800aac8 <_malloc_usable_size_r>
 800a210:	4284      	cmp	r4, r0
 800a212:	4607      	mov	r7, r0
 800a214:	d802      	bhi.n	800a21c <_realloc_r+0x34>
 800a216:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a21a:	d812      	bhi.n	800a242 <_realloc_r+0x5a>
 800a21c:	4621      	mov	r1, r4
 800a21e:	4640      	mov	r0, r8
 800a220:	f7ff fd80 	bl	8009d24 <_malloc_r>
 800a224:	4605      	mov	r5, r0
 800a226:	2800      	cmp	r0, #0
 800a228:	d0ed      	beq.n	800a206 <_realloc_r+0x1e>
 800a22a:	42bc      	cmp	r4, r7
 800a22c:	4622      	mov	r2, r4
 800a22e:	4631      	mov	r1, r6
 800a230:	bf28      	it	cs
 800a232:	463a      	movcs	r2, r7
 800a234:	f7ff f824 	bl	8009280 <memcpy>
 800a238:	4631      	mov	r1, r6
 800a23a:	4640      	mov	r0, r8
 800a23c:	f7ff fd06 	bl	8009c4c <_free_r>
 800a240:	e7e1      	b.n	800a206 <_realloc_r+0x1e>
 800a242:	4635      	mov	r5, r6
 800a244:	e7df      	b.n	800a206 <_realloc_r+0x1e>

0800a246 <__sfputc_r>:
 800a246:	6893      	ldr	r3, [r2, #8]
 800a248:	3b01      	subs	r3, #1
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	b410      	push	{r4}
 800a24e:	6093      	str	r3, [r2, #8]
 800a250:	da08      	bge.n	800a264 <__sfputc_r+0x1e>
 800a252:	6994      	ldr	r4, [r2, #24]
 800a254:	42a3      	cmp	r3, r4
 800a256:	db01      	blt.n	800a25c <__sfputc_r+0x16>
 800a258:	290a      	cmp	r1, #10
 800a25a:	d103      	bne.n	800a264 <__sfputc_r+0x1e>
 800a25c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a260:	f000 b94a 	b.w	800a4f8 <__swbuf_r>
 800a264:	6813      	ldr	r3, [r2, #0]
 800a266:	1c58      	adds	r0, r3, #1
 800a268:	6010      	str	r0, [r2, #0]
 800a26a:	7019      	strb	r1, [r3, #0]
 800a26c:	4608      	mov	r0, r1
 800a26e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a272:	4770      	bx	lr

0800a274 <__sfputs_r>:
 800a274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a276:	4606      	mov	r6, r0
 800a278:	460f      	mov	r7, r1
 800a27a:	4614      	mov	r4, r2
 800a27c:	18d5      	adds	r5, r2, r3
 800a27e:	42ac      	cmp	r4, r5
 800a280:	d101      	bne.n	800a286 <__sfputs_r+0x12>
 800a282:	2000      	movs	r0, #0
 800a284:	e007      	b.n	800a296 <__sfputs_r+0x22>
 800a286:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a28a:	463a      	mov	r2, r7
 800a28c:	4630      	mov	r0, r6
 800a28e:	f7ff ffda 	bl	800a246 <__sfputc_r>
 800a292:	1c43      	adds	r3, r0, #1
 800a294:	d1f3      	bne.n	800a27e <__sfputs_r+0xa>
 800a296:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a298 <_vfiprintf_r>:
 800a298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a29c:	460d      	mov	r5, r1
 800a29e:	b09d      	sub	sp, #116	; 0x74
 800a2a0:	4614      	mov	r4, r2
 800a2a2:	4698      	mov	r8, r3
 800a2a4:	4606      	mov	r6, r0
 800a2a6:	b118      	cbz	r0, 800a2b0 <_vfiprintf_r+0x18>
 800a2a8:	6983      	ldr	r3, [r0, #24]
 800a2aa:	b90b      	cbnz	r3, 800a2b0 <_vfiprintf_r+0x18>
 800a2ac:	f000 fb06 	bl	800a8bc <__sinit>
 800a2b0:	4b89      	ldr	r3, [pc, #548]	; (800a4d8 <_vfiprintf_r+0x240>)
 800a2b2:	429d      	cmp	r5, r3
 800a2b4:	d11b      	bne.n	800a2ee <_vfiprintf_r+0x56>
 800a2b6:	6875      	ldr	r5, [r6, #4]
 800a2b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a2ba:	07d9      	lsls	r1, r3, #31
 800a2bc:	d405      	bmi.n	800a2ca <_vfiprintf_r+0x32>
 800a2be:	89ab      	ldrh	r3, [r5, #12]
 800a2c0:	059a      	lsls	r2, r3, #22
 800a2c2:	d402      	bmi.n	800a2ca <_vfiprintf_r+0x32>
 800a2c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a2c6:	f000 fb97 	bl	800a9f8 <__retarget_lock_acquire_recursive>
 800a2ca:	89ab      	ldrh	r3, [r5, #12]
 800a2cc:	071b      	lsls	r3, r3, #28
 800a2ce:	d501      	bpl.n	800a2d4 <_vfiprintf_r+0x3c>
 800a2d0:	692b      	ldr	r3, [r5, #16]
 800a2d2:	b9eb      	cbnz	r3, 800a310 <_vfiprintf_r+0x78>
 800a2d4:	4629      	mov	r1, r5
 800a2d6:	4630      	mov	r0, r6
 800a2d8:	f000 f960 	bl	800a59c <__swsetup_r>
 800a2dc:	b1c0      	cbz	r0, 800a310 <_vfiprintf_r+0x78>
 800a2de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a2e0:	07dc      	lsls	r4, r3, #31
 800a2e2:	d50e      	bpl.n	800a302 <_vfiprintf_r+0x6a>
 800a2e4:	f04f 30ff 	mov.w	r0, #4294967295
 800a2e8:	b01d      	add	sp, #116	; 0x74
 800a2ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2ee:	4b7b      	ldr	r3, [pc, #492]	; (800a4dc <_vfiprintf_r+0x244>)
 800a2f0:	429d      	cmp	r5, r3
 800a2f2:	d101      	bne.n	800a2f8 <_vfiprintf_r+0x60>
 800a2f4:	68b5      	ldr	r5, [r6, #8]
 800a2f6:	e7df      	b.n	800a2b8 <_vfiprintf_r+0x20>
 800a2f8:	4b79      	ldr	r3, [pc, #484]	; (800a4e0 <_vfiprintf_r+0x248>)
 800a2fa:	429d      	cmp	r5, r3
 800a2fc:	bf08      	it	eq
 800a2fe:	68f5      	ldreq	r5, [r6, #12]
 800a300:	e7da      	b.n	800a2b8 <_vfiprintf_r+0x20>
 800a302:	89ab      	ldrh	r3, [r5, #12]
 800a304:	0598      	lsls	r0, r3, #22
 800a306:	d4ed      	bmi.n	800a2e4 <_vfiprintf_r+0x4c>
 800a308:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a30a:	f000 fb76 	bl	800a9fa <__retarget_lock_release_recursive>
 800a30e:	e7e9      	b.n	800a2e4 <_vfiprintf_r+0x4c>
 800a310:	2300      	movs	r3, #0
 800a312:	9309      	str	r3, [sp, #36]	; 0x24
 800a314:	2320      	movs	r3, #32
 800a316:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a31a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a31e:	2330      	movs	r3, #48	; 0x30
 800a320:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a4e4 <_vfiprintf_r+0x24c>
 800a324:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a328:	f04f 0901 	mov.w	r9, #1
 800a32c:	4623      	mov	r3, r4
 800a32e:	469a      	mov	sl, r3
 800a330:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a334:	b10a      	cbz	r2, 800a33a <_vfiprintf_r+0xa2>
 800a336:	2a25      	cmp	r2, #37	; 0x25
 800a338:	d1f9      	bne.n	800a32e <_vfiprintf_r+0x96>
 800a33a:	ebba 0b04 	subs.w	fp, sl, r4
 800a33e:	d00b      	beq.n	800a358 <_vfiprintf_r+0xc0>
 800a340:	465b      	mov	r3, fp
 800a342:	4622      	mov	r2, r4
 800a344:	4629      	mov	r1, r5
 800a346:	4630      	mov	r0, r6
 800a348:	f7ff ff94 	bl	800a274 <__sfputs_r>
 800a34c:	3001      	adds	r0, #1
 800a34e:	f000 80aa 	beq.w	800a4a6 <_vfiprintf_r+0x20e>
 800a352:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a354:	445a      	add	r2, fp
 800a356:	9209      	str	r2, [sp, #36]	; 0x24
 800a358:	f89a 3000 	ldrb.w	r3, [sl]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	f000 80a2 	beq.w	800a4a6 <_vfiprintf_r+0x20e>
 800a362:	2300      	movs	r3, #0
 800a364:	f04f 32ff 	mov.w	r2, #4294967295
 800a368:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a36c:	f10a 0a01 	add.w	sl, sl, #1
 800a370:	9304      	str	r3, [sp, #16]
 800a372:	9307      	str	r3, [sp, #28]
 800a374:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a378:	931a      	str	r3, [sp, #104]	; 0x68
 800a37a:	4654      	mov	r4, sl
 800a37c:	2205      	movs	r2, #5
 800a37e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a382:	4858      	ldr	r0, [pc, #352]	; (800a4e4 <_vfiprintf_r+0x24c>)
 800a384:	f7f5 ff2c 	bl	80001e0 <memchr>
 800a388:	9a04      	ldr	r2, [sp, #16]
 800a38a:	b9d8      	cbnz	r0, 800a3c4 <_vfiprintf_r+0x12c>
 800a38c:	06d1      	lsls	r1, r2, #27
 800a38e:	bf44      	itt	mi
 800a390:	2320      	movmi	r3, #32
 800a392:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a396:	0713      	lsls	r3, r2, #28
 800a398:	bf44      	itt	mi
 800a39a:	232b      	movmi	r3, #43	; 0x2b
 800a39c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a3a0:	f89a 3000 	ldrb.w	r3, [sl]
 800a3a4:	2b2a      	cmp	r3, #42	; 0x2a
 800a3a6:	d015      	beq.n	800a3d4 <_vfiprintf_r+0x13c>
 800a3a8:	9a07      	ldr	r2, [sp, #28]
 800a3aa:	4654      	mov	r4, sl
 800a3ac:	2000      	movs	r0, #0
 800a3ae:	f04f 0c0a 	mov.w	ip, #10
 800a3b2:	4621      	mov	r1, r4
 800a3b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a3b8:	3b30      	subs	r3, #48	; 0x30
 800a3ba:	2b09      	cmp	r3, #9
 800a3bc:	d94e      	bls.n	800a45c <_vfiprintf_r+0x1c4>
 800a3be:	b1b0      	cbz	r0, 800a3ee <_vfiprintf_r+0x156>
 800a3c0:	9207      	str	r2, [sp, #28]
 800a3c2:	e014      	b.n	800a3ee <_vfiprintf_r+0x156>
 800a3c4:	eba0 0308 	sub.w	r3, r0, r8
 800a3c8:	fa09 f303 	lsl.w	r3, r9, r3
 800a3cc:	4313      	orrs	r3, r2
 800a3ce:	9304      	str	r3, [sp, #16]
 800a3d0:	46a2      	mov	sl, r4
 800a3d2:	e7d2      	b.n	800a37a <_vfiprintf_r+0xe2>
 800a3d4:	9b03      	ldr	r3, [sp, #12]
 800a3d6:	1d19      	adds	r1, r3, #4
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	9103      	str	r1, [sp, #12]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	bfbb      	ittet	lt
 800a3e0:	425b      	neglt	r3, r3
 800a3e2:	f042 0202 	orrlt.w	r2, r2, #2
 800a3e6:	9307      	strge	r3, [sp, #28]
 800a3e8:	9307      	strlt	r3, [sp, #28]
 800a3ea:	bfb8      	it	lt
 800a3ec:	9204      	strlt	r2, [sp, #16]
 800a3ee:	7823      	ldrb	r3, [r4, #0]
 800a3f0:	2b2e      	cmp	r3, #46	; 0x2e
 800a3f2:	d10c      	bne.n	800a40e <_vfiprintf_r+0x176>
 800a3f4:	7863      	ldrb	r3, [r4, #1]
 800a3f6:	2b2a      	cmp	r3, #42	; 0x2a
 800a3f8:	d135      	bne.n	800a466 <_vfiprintf_r+0x1ce>
 800a3fa:	9b03      	ldr	r3, [sp, #12]
 800a3fc:	1d1a      	adds	r2, r3, #4
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	9203      	str	r2, [sp, #12]
 800a402:	2b00      	cmp	r3, #0
 800a404:	bfb8      	it	lt
 800a406:	f04f 33ff 	movlt.w	r3, #4294967295
 800a40a:	3402      	adds	r4, #2
 800a40c:	9305      	str	r3, [sp, #20]
 800a40e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a4f4 <_vfiprintf_r+0x25c>
 800a412:	7821      	ldrb	r1, [r4, #0]
 800a414:	2203      	movs	r2, #3
 800a416:	4650      	mov	r0, sl
 800a418:	f7f5 fee2 	bl	80001e0 <memchr>
 800a41c:	b140      	cbz	r0, 800a430 <_vfiprintf_r+0x198>
 800a41e:	2340      	movs	r3, #64	; 0x40
 800a420:	eba0 000a 	sub.w	r0, r0, sl
 800a424:	fa03 f000 	lsl.w	r0, r3, r0
 800a428:	9b04      	ldr	r3, [sp, #16]
 800a42a:	4303      	orrs	r3, r0
 800a42c:	3401      	adds	r4, #1
 800a42e:	9304      	str	r3, [sp, #16]
 800a430:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a434:	482c      	ldr	r0, [pc, #176]	; (800a4e8 <_vfiprintf_r+0x250>)
 800a436:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a43a:	2206      	movs	r2, #6
 800a43c:	f7f5 fed0 	bl	80001e0 <memchr>
 800a440:	2800      	cmp	r0, #0
 800a442:	d03f      	beq.n	800a4c4 <_vfiprintf_r+0x22c>
 800a444:	4b29      	ldr	r3, [pc, #164]	; (800a4ec <_vfiprintf_r+0x254>)
 800a446:	bb1b      	cbnz	r3, 800a490 <_vfiprintf_r+0x1f8>
 800a448:	9b03      	ldr	r3, [sp, #12]
 800a44a:	3307      	adds	r3, #7
 800a44c:	f023 0307 	bic.w	r3, r3, #7
 800a450:	3308      	adds	r3, #8
 800a452:	9303      	str	r3, [sp, #12]
 800a454:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a456:	443b      	add	r3, r7
 800a458:	9309      	str	r3, [sp, #36]	; 0x24
 800a45a:	e767      	b.n	800a32c <_vfiprintf_r+0x94>
 800a45c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a460:	460c      	mov	r4, r1
 800a462:	2001      	movs	r0, #1
 800a464:	e7a5      	b.n	800a3b2 <_vfiprintf_r+0x11a>
 800a466:	2300      	movs	r3, #0
 800a468:	3401      	adds	r4, #1
 800a46a:	9305      	str	r3, [sp, #20]
 800a46c:	4619      	mov	r1, r3
 800a46e:	f04f 0c0a 	mov.w	ip, #10
 800a472:	4620      	mov	r0, r4
 800a474:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a478:	3a30      	subs	r2, #48	; 0x30
 800a47a:	2a09      	cmp	r2, #9
 800a47c:	d903      	bls.n	800a486 <_vfiprintf_r+0x1ee>
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d0c5      	beq.n	800a40e <_vfiprintf_r+0x176>
 800a482:	9105      	str	r1, [sp, #20]
 800a484:	e7c3      	b.n	800a40e <_vfiprintf_r+0x176>
 800a486:	fb0c 2101 	mla	r1, ip, r1, r2
 800a48a:	4604      	mov	r4, r0
 800a48c:	2301      	movs	r3, #1
 800a48e:	e7f0      	b.n	800a472 <_vfiprintf_r+0x1da>
 800a490:	ab03      	add	r3, sp, #12
 800a492:	9300      	str	r3, [sp, #0]
 800a494:	462a      	mov	r2, r5
 800a496:	4b16      	ldr	r3, [pc, #88]	; (800a4f0 <_vfiprintf_r+0x258>)
 800a498:	a904      	add	r1, sp, #16
 800a49a:	4630      	mov	r0, r6
 800a49c:	f7fc f83c 	bl	8006518 <_printf_float>
 800a4a0:	4607      	mov	r7, r0
 800a4a2:	1c78      	adds	r0, r7, #1
 800a4a4:	d1d6      	bne.n	800a454 <_vfiprintf_r+0x1bc>
 800a4a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a4a8:	07d9      	lsls	r1, r3, #31
 800a4aa:	d405      	bmi.n	800a4b8 <_vfiprintf_r+0x220>
 800a4ac:	89ab      	ldrh	r3, [r5, #12]
 800a4ae:	059a      	lsls	r2, r3, #22
 800a4b0:	d402      	bmi.n	800a4b8 <_vfiprintf_r+0x220>
 800a4b2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a4b4:	f000 faa1 	bl	800a9fa <__retarget_lock_release_recursive>
 800a4b8:	89ab      	ldrh	r3, [r5, #12]
 800a4ba:	065b      	lsls	r3, r3, #25
 800a4bc:	f53f af12 	bmi.w	800a2e4 <_vfiprintf_r+0x4c>
 800a4c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a4c2:	e711      	b.n	800a2e8 <_vfiprintf_r+0x50>
 800a4c4:	ab03      	add	r3, sp, #12
 800a4c6:	9300      	str	r3, [sp, #0]
 800a4c8:	462a      	mov	r2, r5
 800a4ca:	4b09      	ldr	r3, [pc, #36]	; (800a4f0 <_vfiprintf_r+0x258>)
 800a4cc:	a904      	add	r1, sp, #16
 800a4ce:	4630      	mov	r0, r6
 800a4d0:	f7fc fac6 	bl	8006a60 <_printf_i>
 800a4d4:	e7e4      	b.n	800a4a0 <_vfiprintf_r+0x208>
 800a4d6:	bf00      	nop
 800a4d8:	0800b914 	.word	0x0800b914
 800a4dc:	0800b934 	.word	0x0800b934
 800a4e0:	0800b8f4 	.word	0x0800b8f4
 800a4e4:	0800b8a4 	.word	0x0800b8a4
 800a4e8:	0800b8ae 	.word	0x0800b8ae
 800a4ec:	08006519 	.word	0x08006519
 800a4f0:	0800a275 	.word	0x0800a275
 800a4f4:	0800b8aa 	.word	0x0800b8aa

0800a4f8 <__swbuf_r>:
 800a4f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4fa:	460e      	mov	r6, r1
 800a4fc:	4614      	mov	r4, r2
 800a4fe:	4605      	mov	r5, r0
 800a500:	b118      	cbz	r0, 800a50a <__swbuf_r+0x12>
 800a502:	6983      	ldr	r3, [r0, #24]
 800a504:	b90b      	cbnz	r3, 800a50a <__swbuf_r+0x12>
 800a506:	f000 f9d9 	bl	800a8bc <__sinit>
 800a50a:	4b21      	ldr	r3, [pc, #132]	; (800a590 <__swbuf_r+0x98>)
 800a50c:	429c      	cmp	r4, r3
 800a50e:	d12b      	bne.n	800a568 <__swbuf_r+0x70>
 800a510:	686c      	ldr	r4, [r5, #4]
 800a512:	69a3      	ldr	r3, [r4, #24]
 800a514:	60a3      	str	r3, [r4, #8]
 800a516:	89a3      	ldrh	r3, [r4, #12]
 800a518:	071a      	lsls	r2, r3, #28
 800a51a:	d52f      	bpl.n	800a57c <__swbuf_r+0x84>
 800a51c:	6923      	ldr	r3, [r4, #16]
 800a51e:	b36b      	cbz	r3, 800a57c <__swbuf_r+0x84>
 800a520:	6923      	ldr	r3, [r4, #16]
 800a522:	6820      	ldr	r0, [r4, #0]
 800a524:	1ac0      	subs	r0, r0, r3
 800a526:	6963      	ldr	r3, [r4, #20]
 800a528:	b2f6      	uxtb	r6, r6
 800a52a:	4283      	cmp	r3, r0
 800a52c:	4637      	mov	r7, r6
 800a52e:	dc04      	bgt.n	800a53a <__swbuf_r+0x42>
 800a530:	4621      	mov	r1, r4
 800a532:	4628      	mov	r0, r5
 800a534:	f000 f92e 	bl	800a794 <_fflush_r>
 800a538:	bb30      	cbnz	r0, 800a588 <__swbuf_r+0x90>
 800a53a:	68a3      	ldr	r3, [r4, #8]
 800a53c:	3b01      	subs	r3, #1
 800a53e:	60a3      	str	r3, [r4, #8]
 800a540:	6823      	ldr	r3, [r4, #0]
 800a542:	1c5a      	adds	r2, r3, #1
 800a544:	6022      	str	r2, [r4, #0]
 800a546:	701e      	strb	r6, [r3, #0]
 800a548:	6963      	ldr	r3, [r4, #20]
 800a54a:	3001      	adds	r0, #1
 800a54c:	4283      	cmp	r3, r0
 800a54e:	d004      	beq.n	800a55a <__swbuf_r+0x62>
 800a550:	89a3      	ldrh	r3, [r4, #12]
 800a552:	07db      	lsls	r3, r3, #31
 800a554:	d506      	bpl.n	800a564 <__swbuf_r+0x6c>
 800a556:	2e0a      	cmp	r6, #10
 800a558:	d104      	bne.n	800a564 <__swbuf_r+0x6c>
 800a55a:	4621      	mov	r1, r4
 800a55c:	4628      	mov	r0, r5
 800a55e:	f000 f919 	bl	800a794 <_fflush_r>
 800a562:	b988      	cbnz	r0, 800a588 <__swbuf_r+0x90>
 800a564:	4638      	mov	r0, r7
 800a566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a568:	4b0a      	ldr	r3, [pc, #40]	; (800a594 <__swbuf_r+0x9c>)
 800a56a:	429c      	cmp	r4, r3
 800a56c:	d101      	bne.n	800a572 <__swbuf_r+0x7a>
 800a56e:	68ac      	ldr	r4, [r5, #8]
 800a570:	e7cf      	b.n	800a512 <__swbuf_r+0x1a>
 800a572:	4b09      	ldr	r3, [pc, #36]	; (800a598 <__swbuf_r+0xa0>)
 800a574:	429c      	cmp	r4, r3
 800a576:	bf08      	it	eq
 800a578:	68ec      	ldreq	r4, [r5, #12]
 800a57a:	e7ca      	b.n	800a512 <__swbuf_r+0x1a>
 800a57c:	4621      	mov	r1, r4
 800a57e:	4628      	mov	r0, r5
 800a580:	f000 f80c 	bl	800a59c <__swsetup_r>
 800a584:	2800      	cmp	r0, #0
 800a586:	d0cb      	beq.n	800a520 <__swbuf_r+0x28>
 800a588:	f04f 37ff 	mov.w	r7, #4294967295
 800a58c:	e7ea      	b.n	800a564 <__swbuf_r+0x6c>
 800a58e:	bf00      	nop
 800a590:	0800b914 	.word	0x0800b914
 800a594:	0800b934 	.word	0x0800b934
 800a598:	0800b8f4 	.word	0x0800b8f4

0800a59c <__swsetup_r>:
 800a59c:	4b32      	ldr	r3, [pc, #200]	; (800a668 <__swsetup_r+0xcc>)
 800a59e:	b570      	push	{r4, r5, r6, lr}
 800a5a0:	681d      	ldr	r5, [r3, #0]
 800a5a2:	4606      	mov	r6, r0
 800a5a4:	460c      	mov	r4, r1
 800a5a6:	b125      	cbz	r5, 800a5b2 <__swsetup_r+0x16>
 800a5a8:	69ab      	ldr	r3, [r5, #24]
 800a5aa:	b913      	cbnz	r3, 800a5b2 <__swsetup_r+0x16>
 800a5ac:	4628      	mov	r0, r5
 800a5ae:	f000 f985 	bl	800a8bc <__sinit>
 800a5b2:	4b2e      	ldr	r3, [pc, #184]	; (800a66c <__swsetup_r+0xd0>)
 800a5b4:	429c      	cmp	r4, r3
 800a5b6:	d10f      	bne.n	800a5d8 <__swsetup_r+0x3c>
 800a5b8:	686c      	ldr	r4, [r5, #4]
 800a5ba:	89a3      	ldrh	r3, [r4, #12]
 800a5bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a5c0:	0719      	lsls	r1, r3, #28
 800a5c2:	d42c      	bmi.n	800a61e <__swsetup_r+0x82>
 800a5c4:	06dd      	lsls	r5, r3, #27
 800a5c6:	d411      	bmi.n	800a5ec <__swsetup_r+0x50>
 800a5c8:	2309      	movs	r3, #9
 800a5ca:	6033      	str	r3, [r6, #0]
 800a5cc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a5d0:	81a3      	strh	r3, [r4, #12]
 800a5d2:	f04f 30ff 	mov.w	r0, #4294967295
 800a5d6:	e03e      	b.n	800a656 <__swsetup_r+0xba>
 800a5d8:	4b25      	ldr	r3, [pc, #148]	; (800a670 <__swsetup_r+0xd4>)
 800a5da:	429c      	cmp	r4, r3
 800a5dc:	d101      	bne.n	800a5e2 <__swsetup_r+0x46>
 800a5de:	68ac      	ldr	r4, [r5, #8]
 800a5e0:	e7eb      	b.n	800a5ba <__swsetup_r+0x1e>
 800a5e2:	4b24      	ldr	r3, [pc, #144]	; (800a674 <__swsetup_r+0xd8>)
 800a5e4:	429c      	cmp	r4, r3
 800a5e6:	bf08      	it	eq
 800a5e8:	68ec      	ldreq	r4, [r5, #12]
 800a5ea:	e7e6      	b.n	800a5ba <__swsetup_r+0x1e>
 800a5ec:	0758      	lsls	r0, r3, #29
 800a5ee:	d512      	bpl.n	800a616 <__swsetup_r+0x7a>
 800a5f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a5f2:	b141      	cbz	r1, 800a606 <__swsetup_r+0x6a>
 800a5f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a5f8:	4299      	cmp	r1, r3
 800a5fa:	d002      	beq.n	800a602 <__swsetup_r+0x66>
 800a5fc:	4630      	mov	r0, r6
 800a5fe:	f7ff fb25 	bl	8009c4c <_free_r>
 800a602:	2300      	movs	r3, #0
 800a604:	6363      	str	r3, [r4, #52]	; 0x34
 800a606:	89a3      	ldrh	r3, [r4, #12]
 800a608:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a60c:	81a3      	strh	r3, [r4, #12]
 800a60e:	2300      	movs	r3, #0
 800a610:	6063      	str	r3, [r4, #4]
 800a612:	6923      	ldr	r3, [r4, #16]
 800a614:	6023      	str	r3, [r4, #0]
 800a616:	89a3      	ldrh	r3, [r4, #12]
 800a618:	f043 0308 	orr.w	r3, r3, #8
 800a61c:	81a3      	strh	r3, [r4, #12]
 800a61e:	6923      	ldr	r3, [r4, #16]
 800a620:	b94b      	cbnz	r3, 800a636 <__swsetup_r+0x9a>
 800a622:	89a3      	ldrh	r3, [r4, #12]
 800a624:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a628:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a62c:	d003      	beq.n	800a636 <__swsetup_r+0x9a>
 800a62e:	4621      	mov	r1, r4
 800a630:	4630      	mov	r0, r6
 800a632:	f000 fa09 	bl	800aa48 <__smakebuf_r>
 800a636:	89a0      	ldrh	r0, [r4, #12]
 800a638:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a63c:	f010 0301 	ands.w	r3, r0, #1
 800a640:	d00a      	beq.n	800a658 <__swsetup_r+0xbc>
 800a642:	2300      	movs	r3, #0
 800a644:	60a3      	str	r3, [r4, #8]
 800a646:	6963      	ldr	r3, [r4, #20]
 800a648:	425b      	negs	r3, r3
 800a64a:	61a3      	str	r3, [r4, #24]
 800a64c:	6923      	ldr	r3, [r4, #16]
 800a64e:	b943      	cbnz	r3, 800a662 <__swsetup_r+0xc6>
 800a650:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a654:	d1ba      	bne.n	800a5cc <__swsetup_r+0x30>
 800a656:	bd70      	pop	{r4, r5, r6, pc}
 800a658:	0781      	lsls	r1, r0, #30
 800a65a:	bf58      	it	pl
 800a65c:	6963      	ldrpl	r3, [r4, #20]
 800a65e:	60a3      	str	r3, [r4, #8]
 800a660:	e7f4      	b.n	800a64c <__swsetup_r+0xb0>
 800a662:	2000      	movs	r0, #0
 800a664:	e7f7      	b.n	800a656 <__swsetup_r+0xba>
 800a666:	bf00      	nop
 800a668:	2000000c 	.word	0x2000000c
 800a66c:	0800b914 	.word	0x0800b914
 800a670:	0800b934 	.word	0x0800b934
 800a674:	0800b8f4 	.word	0x0800b8f4

0800a678 <abort>:
 800a678:	b508      	push	{r3, lr}
 800a67a:	2006      	movs	r0, #6
 800a67c:	f000 fa54 	bl	800ab28 <raise>
 800a680:	2001      	movs	r0, #1
 800a682:	f7f7 fb9d 	bl	8001dc0 <_exit>
	...

0800a688 <__sflush_r>:
 800a688:	898a      	ldrh	r2, [r1, #12]
 800a68a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a68e:	4605      	mov	r5, r0
 800a690:	0710      	lsls	r0, r2, #28
 800a692:	460c      	mov	r4, r1
 800a694:	d458      	bmi.n	800a748 <__sflush_r+0xc0>
 800a696:	684b      	ldr	r3, [r1, #4]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	dc05      	bgt.n	800a6a8 <__sflush_r+0x20>
 800a69c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	dc02      	bgt.n	800a6a8 <__sflush_r+0x20>
 800a6a2:	2000      	movs	r0, #0
 800a6a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a6aa:	2e00      	cmp	r6, #0
 800a6ac:	d0f9      	beq.n	800a6a2 <__sflush_r+0x1a>
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a6b4:	682f      	ldr	r7, [r5, #0]
 800a6b6:	602b      	str	r3, [r5, #0]
 800a6b8:	d032      	beq.n	800a720 <__sflush_r+0x98>
 800a6ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a6bc:	89a3      	ldrh	r3, [r4, #12]
 800a6be:	075a      	lsls	r2, r3, #29
 800a6c0:	d505      	bpl.n	800a6ce <__sflush_r+0x46>
 800a6c2:	6863      	ldr	r3, [r4, #4]
 800a6c4:	1ac0      	subs	r0, r0, r3
 800a6c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a6c8:	b10b      	cbz	r3, 800a6ce <__sflush_r+0x46>
 800a6ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a6cc:	1ac0      	subs	r0, r0, r3
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	4602      	mov	r2, r0
 800a6d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a6d4:	6a21      	ldr	r1, [r4, #32]
 800a6d6:	4628      	mov	r0, r5
 800a6d8:	47b0      	blx	r6
 800a6da:	1c43      	adds	r3, r0, #1
 800a6dc:	89a3      	ldrh	r3, [r4, #12]
 800a6de:	d106      	bne.n	800a6ee <__sflush_r+0x66>
 800a6e0:	6829      	ldr	r1, [r5, #0]
 800a6e2:	291d      	cmp	r1, #29
 800a6e4:	d82c      	bhi.n	800a740 <__sflush_r+0xb8>
 800a6e6:	4a2a      	ldr	r2, [pc, #168]	; (800a790 <__sflush_r+0x108>)
 800a6e8:	40ca      	lsrs	r2, r1
 800a6ea:	07d6      	lsls	r6, r2, #31
 800a6ec:	d528      	bpl.n	800a740 <__sflush_r+0xb8>
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	6062      	str	r2, [r4, #4]
 800a6f2:	04d9      	lsls	r1, r3, #19
 800a6f4:	6922      	ldr	r2, [r4, #16]
 800a6f6:	6022      	str	r2, [r4, #0]
 800a6f8:	d504      	bpl.n	800a704 <__sflush_r+0x7c>
 800a6fa:	1c42      	adds	r2, r0, #1
 800a6fc:	d101      	bne.n	800a702 <__sflush_r+0x7a>
 800a6fe:	682b      	ldr	r3, [r5, #0]
 800a700:	b903      	cbnz	r3, 800a704 <__sflush_r+0x7c>
 800a702:	6560      	str	r0, [r4, #84]	; 0x54
 800a704:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a706:	602f      	str	r7, [r5, #0]
 800a708:	2900      	cmp	r1, #0
 800a70a:	d0ca      	beq.n	800a6a2 <__sflush_r+0x1a>
 800a70c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a710:	4299      	cmp	r1, r3
 800a712:	d002      	beq.n	800a71a <__sflush_r+0x92>
 800a714:	4628      	mov	r0, r5
 800a716:	f7ff fa99 	bl	8009c4c <_free_r>
 800a71a:	2000      	movs	r0, #0
 800a71c:	6360      	str	r0, [r4, #52]	; 0x34
 800a71e:	e7c1      	b.n	800a6a4 <__sflush_r+0x1c>
 800a720:	6a21      	ldr	r1, [r4, #32]
 800a722:	2301      	movs	r3, #1
 800a724:	4628      	mov	r0, r5
 800a726:	47b0      	blx	r6
 800a728:	1c41      	adds	r1, r0, #1
 800a72a:	d1c7      	bne.n	800a6bc <__sflush_r+0x34>
 800a72c:	682b      	ldr	r3, [r5, #0]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d0c4      	beq.n	800a6bc <__sflush_r+0x34>
 800a732:	2b1d      	cmp	r3, #29
 800a734:	d001      	beq.n	800a73a <__sflush_r+0xb2>
 800a736:	2b16      	cmp	r3, #22
 800a738:	d101      	bne.n	800a73e <__sflush_r+0xb6>
 800a73a:	602f      	str	r7, [r5, #0]
 800a73c:	e7b1      	b.n	800a6a2 <__sflush_r+0x1a>
 800a73e:	89a3      	ldrh	r3, [r4, #12]
 800a740:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a744:	81a3      	strh	r3, [r4, #12]
 800a746:	e7ad      	b.n	800a6a4 <__sflush_r+0x1c>
 800a748:	690f      	ldr	r7, [r1, #16]
 800a74a:	2f00      	cmp	r7, #0
 800a74c:	d0a9      	beq.n	800a6a2 <__sflush_r+0x1a>
 800a74e:	0793      	lsls	r3, r2, #30
 800a750:	680e      	ldr	r6, [r1, #0]
 800a752:	bf08      	it	eq
 800a754:	694b      	ldreq	r3, [r1, #20]
 800a756:	600f      	str	r7, [r1, #0]
 800a758:	bf18      	it	ne
 800a75a:	2300      	movne	r3, #0
 800a75c:	eba6 0807 	sub.w	r8, r6, r7
 800a760:	608b      	str	r3, [r1, #8]
 800a762:	f1b8 0f00 	cmp.w	r8, #0
 800a766:	dd9c      	ble.n	800a6a2 <__sflush_r+0x1a>
 800a768:	6a21      	ldr	r1, [r4, #32]
 800a76a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a76c:	4643      	mov	r3, r8
 800a76e:	463a      	mov	r2, r7
 800a770:	4628      	mov	r0, r5
 800a772:	47b0      	blx	r6
 800a774:	2800      	cmp	r0, #0
 800a776:	dc06      	bgt.n	800a786 <__sflush_r+0xfe>
 800a778:	89a3      	ldrh	r3, [r4, #12]
 800a77a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a77e:	81a3      	strh	r3, [r4, #12]
 800a780:	f04f 30ff 	mov.w	r0, #4294967295
 800a784:	e78e      	b.n	800a6a4 <__sflush_r+0x1c>
 800a786:	4407      	add	r7, r0
 800a788:	eba8 0800 	sub.w	r8, r8, r0
 800a78c:	e7e9      	b.n	800a762 <__sflush_r+0xda>
 800a78e:	bf00      	nop
 800a790:	20400001 	.word	0x20400001

0800a794 <_fflush_r>:
 800a794:	b538      	push	{r3, r4, r5, lr}
 800a796:	690b      	ldr	r3, [r1, #16]
 800a798:	4605      	mov	r5, r0
 800a79a:	460c      	mov	r4, r1
 800a79c:	b913      	cbnz	r3, 800a7a4 <_fflush_r+0x10>
 800a79e:	2500      	movs	r5, #0
 800a7a0:	4628      	mov	r0, r5
 800a7a2:	bd38      	pop	{r3, r4, r5, pc}
 800a7a4:	b118      	cbz	r0, 800a7ae <_fflush_r+0x1a>
 800a7a6:	6983      	ldr	r3, [r0, #24]
 800a7a8:	b90b      	cbnz	r3, 800a7ae <_fflush_r+0x1a>
 800a7aa:	f000 f887 	bl	800a8bc <__sinit>
 800a7ae:	4b14      	ldr	r3, [pc, #80]	; (800a800 <_fflush_r+0x6c>)
 800a7b0:	429c      	cmp	r4, r3
 800a7b2:	d11b      	bne.n	800a7ec <_fflush_r+0x58>
 800a7b4:	686c      	ldr	r4, [r5, #4]
 800a7b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d0ef      	beq.n	800a79e <_fflush_r+0xa>
 800a7be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a7c0:	07d0      	lsls	r0, r2, #31
 800a7c2:	d404      	bmi.n	800a7ce <_fflush_r+0x3a>
 800a7c4:	0599      	lsls	r1, r3, #22
 800a7c6:	d402      	bmi.n	800a7ce <_fflush_r+0x3a>
 800a7c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a7ca:	f000 f915 	bl	800a9f8 <__retarget_lock_acquire_recursive>
 800a7ce:	4628      	mov	r0, r5
 800a7d0:	4621      	mov	r1, r4
 800a7d2:	f7ff ff59 	bl	800a688 <__sflush_r>
 800a7d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a7d8:	07da      	lsls	r2, r3, #31
 800a7da:	4605      	mov	r5, r0
 800a7dc:	d4e0      	bmi.n	800a7a0 <_fflush_r+0xc>
 800a7de:	89a3      	ldrh	r3, [r4, #12]
 800a7e0:	059b      	lsls	r3, r3, #22
 800a7e2:	d4dd      	bmi.n	800a7a0 <_fflush_r+0xc>
 800a7e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a7e6:	f000 f908 	bl	800a9fa <__retarget_lock_release_recursive>
 800a7ea:	e7d9      	b.n	800a7a0 <_fflush_r+0xc>
 800a7ec:	4b05      	ldr	r3, [pc, #20]	; (800a804 <_fflush_r+0x70>)
 800a7ee:	429c      	cmp	r4, r3
 800a7f0:	d101      	bne.n	800a7f6 <_fflush_r+0x62>
 800a7f2:	68ac      	ldr	r4, [r5, #8]
 800a7f4:	e7df      	b.n	800a7b6 <_fflush_r+0x22>
 800a7f6:	4b04      	ldr	r3, [pc, #16]	; (800a808 <_fflush_r+0x74>)
 800a7f8:	429c      	cmp	r4, r3
 800a7fa:	bf08      	it	eq
 800a7fc:	68ec      	ldreq	r4, [r5, #12]
 800a7fe:	e7da      	b.n	800a7b6 <_fflush_r+0x22>
 800a800:	0800b914 	.word	0x0800b914
 800a804:	0800b934 	.word	0x0800b934
 800a808:	0800b8f4 	.word	0x0800b8f4

0800a80c <std>:
 800a80c:	2300      	movs	r3, #0
 800a80e:	b510      	push	{r4, lr}
 800a810:	4604      	mov	r4, r0
 800a812:	e9c0 3300 	strd	r3, r3, [r0]
 800a816:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a81a:	6083      	str	r3, [r0, #8]
 800a81c:	8181      	strh	r1, [r0, #12]
 800a81e:	6643      	str	r3, [r0, #100]	; 0x64
 800a820:	81c2      	strh	r2, [r0, #14]
 800a822:	6183      	str	r3, [r0, #24]
 800a824:	4619      	mov	r1, r3
 800a826:	2208      	movs	r2, #8
 800a828:	305c      	adds	r0, #92	; 0x5c
 800a82a:	f7fb fdcd 	bl	80063c8 <memset>
 800a82e:	4b05      	ldr	r3, [pc, #20]	; (800a844 <std+0x38>)
 800a830:	6263      	str	r3, [r4, #36]	; 0x24
 800a832:	4b05      	ldr	r3, [pc, #20]	; (800a848 <std+0x3c>)
 800a834:	62a3      	str	r3, [r4, #40]	; 0x28
 800a836:	4b05      	ldr	r3, [pc, #20]	; (800a84c <std+0x40>)
 800a838:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a83a:	4b05      	ldr	r3, [pc, #20]	; (800a850 <std+0x44>)
 800a83c:	6224      	str	r4, [r4, #32]
 800a83e:	6323      	str	r3, [r4, #48]	; 0x30
 800a840:	bd10      	pop	{r4, pc}
 800a842:	bf00      	nop
 800a844:	0800ab61 	.word	0x0800ab61
 800a848:	0800ab83 	.word	0x0800ab83
 800a84c:	0800abbb 	.word	0x0800abbb
 800a850:	0800abdf 	.word	0x0800abdf

0800a854 <_cleanup_r>:
 800a854:	4901      	ldr	r1, [pc, #4]	; (800a85c <_cleanup_r+0x8>)
 800a856:	f000 b8af 	b.w	800a9b8 <_fwalk_reent>
 800a85a:	bf00      	nop
 800a85c:	0800a795 	.word	0x0800a795

0800a860 <__sfmoreglue>:
 800a860:	b570      	push	{r4, r5, r6, lr}
 800a862:	2268      	movs	r2, #104	; 0x68
 800a864:	1e4d      	subs	r5, r1, #1
 800a866:	4355      	muls	r5, r2
 800a868:	460e      	mov	r6, r1
 800a86a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a86e:	f7ff fa59 	bl	8009d24 <_malloc_r>
 800a872:	4604      	mov	r4, r0
 800a874:	b140      	cbz	r0, 800a888 <__sfmoreglue+0x28>
 800a876:	2100      	movs	r1, #0
 800a878:	e9c0 1600 	strd	r1, r6, [r0]
 800a87c:	300c      	adds	r0, #12
 800a87e:	60a0      	str	r0, [r4, #8]
 800a880:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a884:	f7fb fda0 	bl	80063c8 <memset>
 800a888:	4620      	mov	r0, r4
 800a88a:	bd70      	pop	{r4, r5, r6, pc}

0800a88c <__sfp_lock_acquire>:
 800a88c:	4801      	ldr	r0, [pc, #4]	; (800a894 <__sfp_lock_acquire+0x8>)
 800a88e:	f000 b8b3 	b.w	800a9f8 <__retarget_lock_acquire_recursive>
 800a892:	bf00      	nop
 800a894:	2000038d 	.word	0x2000038d

0800a898 <__sfp_lock_release>:
 800a898:	4801      	ldr	r0, [pc, #4]	; (800a8a0 <__sfp_lock_release+0x8>)
 800a89a:	f000 b8ae 	b.w	800a9fa <__retarget_lock_release_recursive>
 800a89e:	bf00      	nop
 800a8a0:	2000038d 	.word	0x2000038d

0800a8a4 <__sinit_lock_acquire>:
 800a8a4:	4801      	ldr	r0, [pc, #4]	; (800a8ac <__sinit_lock_acquire+0x8>)
 800a8a6:	f000 b8a7 	b.w	800a9f8 <__retarget_lock_acquire_recursive>
 800a8aa:	bf00      	nop
 800a8ac:	2000038e 	.word	0x2000038e

0800a8b0 <__sinit_lock_release>:
 800a8b0:	4801      	ldr	r0, [pc, #4]	; (800a8b8 <__sinit_lock_release+0x8>)
 800a8b2:	f000 b8a2 	b.w	800a9fa <__retarget_lock_release_recursive>
 800a8b6:	bf00      	nop
 800a8b8:	2000038e 	.word	0x2000038e

0800a8bc <__sinit>:
 800a8bc:	b510      	push	{r4, lr}
 800a8be:	4604      	mov	r4, r0
 800a8c0:	f7ff fff0 	bl	800a8a4 <__sinit_lock_acquire>
 800a8c4:	69a3      	ldr	r3, [r4, #24]
 800a8c6:	b11b      	cbz	r3, 800a8d0 <__sinit+0x14>
 800a8c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a8cc:	f7ff bff0 	b.w	800a8b0 <__sinit_lock_release>
 800a8d0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a8d4:	6523      	str	r3, [r4, #80]	; 0x50
 800a8d6:	4b13      	ldr	r3, [pc, #76]	; (800a924 <__sinit+0x68>)
 800a8d8:	4a13      	ldr	r2, [pc, #76]	; (800a928 <__sinit+0x6c>)
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	62a2      	str	r2, [r4, #40]	; 0x28
 800a8de:	42a3      	cmp	r3, r4
 800a8e0:	bf04      	itt	eq
 800a8e2:	2301      	moveq	r3, #1
 800a8e4:	61a3      	streq	r3, [r4, #24]
 800a8e6:	4620      	mov	r0, r4
 800a8e8:	f000 f820 	bl	800a92c <__sfp>
 800a8ec:	6060      	str	r0, [r4, #4]
 800a8ee:	4620      	mov	r0, r4
 800a8f0:	f000 f81c 	bl	800a92c <__sfp>
 800a8f4:	60a0      	str	r0, [r4, #8]
 800a8f6:	4620      	mov	r0, r4
 800a8f8:	f000 f818 	bl	800a92c <__sfp>
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	60e0      	str	r0, [r4, #12]
 800a900:	2104      	movs	r1, #4
 800a902:	6860      	ldr	r0, [r4, #4]
 800a904:	f7ff ff82 	bl	800a80c <std>
 800a908:	68a0      	ldr	r0, [r4, #8]
 800a90a:	2201      	movs	r2, #1
 800a90c:	2109      	movs	r1, #9
 800a90e:	f7ff ff7d 	bl	800a80c <std>
 800a912:	68e0      	ldr	r0, [r4, #12]
 800a914:	2202      	movs	r2, #2
 800a916:	2112      	movs	r1, #18
 800a918:	f7ff ff78 	bl	800a80c <std>
 800a91c:	2301      	movs	r3, #1
 800a91e:	61a3      	str	r3, [r4, #24]
 800a920:	e7d2      	b.n	800a8c8 <__sinit+0xc>
 800a922:	bf00      	nop
 800a924:	0800b4b0 	.word	0x0800b4b0
 800a928:	0800a855 	.word	0x0800a855

0800a92c <__sfp>:
 800a92c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a92e:	4607      	mov	r7, r0
 800a930:	f7ff ffac 	bl	800a88c <__sfp_lock_acquire>
 800a934:	4b1e      	ldr	r3, [pc, #120]	; (800a9b0 <__sfp+0x84>)
 800a936:	681e      	ldr	r6, [r3, #0]
 800a938:	69b3      	ldr	r3, [r6, #24]
 800a93a:	b913      	cbnz	r3, 800a942 <__sfp+0x16>
 800a93c:	4630      	mov	r0, r6
 800a93e:	f7ff ffbd 	bl	800a8bc <__sinit>
 800a942:	3648      	adds	r6, #72	; 0x48
 800a944:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a948:	3b01      	subs	r3, #1
 800a94a:	d503      	bpl.n	800a954 <__sfp+0x28>
 800a94c:	6833      	ldr	r3, [r6, #0]
 800a94e:	b30b      	cbz	r3, 800a994 <__sfp+0x68>
 800a950:	6836      	ldr	r6, [r6, #0]
 800a952:	e7f7      	b.n	800a944 <__sfp+0x18>
 800a954:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a958:	b9d5      	cbnz	r5, 800a990 <__sfp+0x64>
 800a95a:	4b16      	ldr	r3, [pc, #88]	; (800a9b4 <__sfp+0x88>)
 800a95c:	60e3      	str	r3, [r4, #12]
 800a95e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a962:	6665      	str	r5, [r4, #100]	; 0x64
 800a964:	f000 f847 	bl	800a9f6 <__retarget_lock_init_recursive>
 800a968:	f7ff ff96 	bl	800a898 <__sfp_lock_release>
 800a96c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a970:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a974:	6025      	str	r5, [r4, #0]
 800a976:	61a5      	str	r5, [r4, #24]
 800a978:	2208      	movs	r2, #8
 800a97a:	4629      	mov	r1, r5
 800a97c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a980:	f7fb fd22 	bl	80063c8 <memset>
 800a984:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a988:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a98c:	4620      	mov	r0, r4
 800a98e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a990:	3468      	adds	r4, #104	; 0x68
 800a992:	e7d9      	b.n	800a948 <__sfp+0x1c>
 800a994:	2104      	movs	r1, #4
 800a996:	4638      	mov	r0, r7
 800a998:	f7ff ff62 	bl	800a860 <__sfmoreglue>
 800a99c:	4604      	mov	r4, r0
 800a99e:	6030      	str	r0, [r6, #0]
 800a9a0:	2800      	cmp	r0, #0
 800a9a2:	d1d5      	bne.n	800a950 <__sfp+0x24>
 800a9a4:	f7ff ff78 	bl	800a898 <__sfp_lock_release>
 800a9a8:	230c      	movs	r3, #12
 800a9aa:	603b      	str	r3, [r7, #0]
 800a9ac:	e7ee      	b.n	800a98c <__sfp+0x60>
 800a9ae:	bf00      	nop
 800a9b0:	0800b4b0 	.word	0x0800b4b0
 800a9b4:	ffff0001 	.word	0xffff0001

0800a9b8 <_fwalk_reent>:
 800a9b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a9bc:	4606      	mov	r6, r0
 800a9be:	4688      	mov	r8, r1
 800a9c0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a9c4:	2700      	movs	r7, #0
 800a9c6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a9ca:	f1b9 0901 	subs.w	r9, r9, #1
 800a9ce:	d505      	bpl.n	800a9dc <_fwalk_reent+0x24>
 800a9d0:	6824      	ldr	r4, [r4, #0]
 800a9d2:	2c00      	cmp	r4, #0
 800a9d4:	d1f7      	bne.n	800a9c6 <_fwalk_reent+0xe>
 800a9d6:	4638      	mov	r0, r7
 800a9d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9dc:	89ab      	ldrh	r3, [r5, #12]
 800a9de:	2b01      	cmp	r3, #1
 800a9e0:	d907      	bls.n	800a9f2 <_fwalk_reent+0x3a>
 800a9e2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a9e6:	3301      	adds	r3, #1
 800a9e8:	d003      	beq.n	800a9f2 <_fwalk_reent+0x3a>
 800a9ea:	4629      	mov	r1, r5
 800a9ec:	4630      	mov	r0, r6
 800a9ee:	47c0      	blx	r8
 800a9f0:	4307      	orrs	r7, r0
 800a9f2:	3568      	adds	r5, #104	; 0x68
 800a9f4:	e7e9      	b.n	800a9ca <_fwalk_reent+0x12>

0800a9f6 <__retarget_lock_init_recursive>:
 800a9f6:	4770      	bx	lr

0800a9f8 <__retarget_lock_acquire_recursive>:
 800a9f8:	4770      	bx	lr

0800a9fa <__retarget_lock_release_recursive>:
 800a9fa:	4770      	bx	lr

0800a9fc <__swhatbuf_r>:
 800a9fc:	b570      	push	{r4, r5, r6, lr}
 800a9fe:	460e      	mov	r6, r1
 800aa00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa04:	2900      	cmp	r1, #0
 800aa06:	b096      	sub	sp, #88	; 0x58
 800aa08:	4614      	mov	r4, r2
 800aa0a:	461d      	mov	r5, r3
 800aa0c:	da08      	bge.n	800aa20 <__swhatbuf_r+0x24>
 800aa0e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800aa12:	2200      	movs	r2, #0
 800aa14:	602a      	str	r2, [r5, #0]
 800aa16:	061a      	lsls	r2, r3, #24
 800aa18:	d410      	bmi.n	800aa3c <__swhatbuf_r+0x40>
 800aa1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa1e:	e00e      	b.n	800aa3e <__swhatbuf_r+0x42>
 800aa20:	466a      	mov	r2, sp
 800aa22:	f000 f903 	bl	800ac2c <_fstat_r>
 800aa26:	2800      	cmp	r0, #0
 800aa28:	dbf1      	blt.n	800aa0e <__swhatbuf_r+0x12>
 800aa2a:	9a01      	ldr	r2, [sp, #4]
 800aa2c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800aa30:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800aa34:	425a      	negs	r2, r3
 800aa36:	415a      	adcs	r2, r3
 800aa38:	602a      	str	r2, [r5, #0]
 800aa3a:	e7ee      	b.n	800aa1a <__swhatbuf_r+0x1e>
 800aa3c:	2340      	movs	r3, #64	; 0x40
 800aa3e:	2000      	movs	r0, #0
 800aa40:	6023      	str	r3, [r4, #0]
 800aa42:	b016      	add	sp, #88	; 0x58
 800aa44:	bd70      	pop	{r4, r5, r6, pc}
	...

0800aa48 <__smakebuf_r>:
 800aa48:	898b      	ldrh	r3, [r1, #12]
 800aa4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aa4c:	079d      	lsls	r5, r3, #30
 800aa4e:	4606      	mov	r6, r0
 800aa50:	460c      	mov	r4, r1
 800aa52:	d507      	bpl.n	800aa64 <__smakebuf_r+0x1c>
 800aa54:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800aa58:	6023      	str	r3, [r4, #0]
 800aa5a:	6123      	str	r3, [r4, #16]
 800aa5c:	2301      	movs	r3, #1
 800aa5e:	6163      	str	r3, [r4, #20]
 800aa60:	b002      	add	sp, #8
 800aa62:	bd70      	pop	{r4, r5, r6, pc}
 800aa64:	ab01      	add	r3, sp, #4
 800aa66:	466a      	mov	r2, sp
 800aa68:	f7ff ffc8 	bl	800a9fc <__swhatbuf_r>
 800aa6c:	9900      	ldr	r1, [sp, #0]
 800aa6e:	4605      	mov	r5, r0
 800aa70:	4630      	mov	r0, r6
 800aa72:	f7ff f957 	bl	8009d24 <_malloc_r>
 800aa76:	b948      	cbnz	r0, 800aa8c <__smakebuf_r+0x44>
 800aa78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa7c:	059a      	lsls	r2, r3, #22
 800aa7e:	d4ef      	bmi.n	800aa60 <__smakebuf_r+0x18>
 800aa80:	f023 0303 	bic.w	r3, r3, #3
 800aa84:	f043 0302 	orr.w	r3, r3, #2
 800aa88:	81a3      	strh	r3, [r4, #12]
 800aa8a:	e7e3      	b.n	800aa54 <__smakebuf_r+0xc>
 800aa8c:	4b0d      	ldr	r3, [pc, #52]	; (800aac4 <__smakebuf_r+0x7c>)
 800aa8e:	62b3      	str	r3, [r6, #40]	; 0x28
 800aa90:	89a3      	ldrh	r3, [r4, #12]
 800aa92:	6020      	str	r0, [r4, #0]
 800aa94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa98:	81a3      	strh	r3, [r4, #12]
 800aa9a:	9b00      	ldr	r3, [sp, #0]
 800aa9c:	6163      	str	r3, [r4, #20]
 800aa9e:	9b01      	ldr	r3, [sp, #4]
 800aaa0:	6120      	str	r0, [r4, #16]
 800aaa2:	b15b      	cbz	r3, 800aabc <__smakebuf_r+0x74>
 800aaa4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aaa8:	4630      	mov	r0, r6
 800aaaa:	f000 f8d1 	bl	800ac50 <_isatty_r>
 800aaae:	b128      	cbz	r0, 800aabc <__smakebuf_r+0x74>
 800aab0:	89a3      	ldrh	r3, [r4, #12]
 800aab2:	f023 0303 	bic.w	r3, r3, #3
 800aab6:	f043 0301 	orr.w	r3, r3, #1
 800aaba:	81a3      	strh	r3, [r4, #12]
 800aabc:	89a0      	ldrh	r0, [r4, #12]
 800aabe:	4305      	orrs	r5, r0
 800aac0:	81a5      	strh	r5, [r4, #12]
 800aac2:	e7cd      	b.n	800aa60 <__smakebuf_r+0x18>
 800aac4:	0800a855 	.word	0x0800a855

0800aac8 <_malloc_usable_size_r>:
 800aac8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aacc:	1f18      	subs	r0, r3, #4
 800aace:	2b00      	cmp	r3, #0
 800aad0:	bfbc      	itt	lt
 800aad2:	580b      	ldrlt	r3, [r1, r0]
 800aad4:	18c0      	addlt	r0, r0, r3
 800aad6:	4770      	bx	lr

0800aad8 <_raise_r>:
 800aad8:	291f      	cmp	r1, #31
 800aada:	b538      	push	{r3, r4, r5, lr}
 800aadc:	4604      	mov	r4, r0
 800aade:	460d      	mov	r5, r1
 800aae0:	d904      	bls.n	800aaec <_raise_r+0x14>
 800aae2:	2316      	movs	r3, #22
 800aae4:	6003      	str	r3, [r0, #0]
 800aae6:	f04f 30ff 	mov.w	r0, #4294967295
 800aaea:	bd38      	pop	{r3, r4, r5, pc}
 800aaec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800aaee:	b112      	cbz	r2, 800aaf6 <_raise_r+0x1e>
 800aaf0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800aaf4:	b94b      	cbnz	r3, 800ab0a <_raise_r+0x32>
 800aaf6:	4620      	mov	r0, r4
 800aaf8:	f000 f830 	bl	800ab5c <_getpid_r>
 800aafc:	462a      	mov	r2, r5
 800aafe:	4601      	mov	r1, r0
 800ab00:	4620      	mov	r0, r4
 800ab02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab06:	f000 b817 	b.w	800ab38 <_kill_r>
 800ab0a:	2b01      	cmp	r3, #1
 800ab0c:	d00a      	beq.n	800ab24 <_raise_r+0x4c>
 800ab0e:	1c59      	adds	r1, r3, #1
 800ab10:	d103      	bne.n	800ab1a <_raise_r+0x42>
 800ab12:	2316      	movs	r3, #22
 800ab14:	6003      	str	r3, [r0, #0]
 800ab16:	2001      	movs	r0, #1
 800ab18:	e7e7      	b.n	800aaea <_raise_r+0x12>
 800ab1a:	2400      	movs	r4, #0
 800ab1c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ab20:	4628      	mov	r0, r5
 800ab22:	4798      	blx	r3
 800ab24:	2000      	movs	r0, #0
 800ab26:	e7e0      	b.n	800aaea <_raise_r+0x12>

0800ab28 <raise>:
 800ab28:	4b02      	ldr	r3, [pc, #8]	; (800ab34 <raise+0xc>)
 800ab2a:	4601      	mov	r1, r0
 800ab2c:	6818      	ldr	r0, [r3, #0]
 800ab2e:	f7ff bfd3 	b.w	800aad8 <_raise_r>
 800ab32:	bf00      	nop
 800ab34:	2000000c 	.word	0x2000000c

0800ab38 <_kill_r>:
 800ab38:	b538      	push	{r3, r4, r5, lr}
 800ab3a:	4d07      	ldr	r5, [pc, #28]	; (800ab58 <_kill_r+0x20>)
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	4604      	mov	r4, r0
 800ab40:	4608      	mov	r0, r1
 800ab42:	4611      	mov	r1, r2
 800ab44:	602b      	str	r3, [r5, #0]
 800ab46:	f7f7 f92b 	bl	8001da0 <_kill>
 800ab4a:	1c43      	adds	r3, r0, #1
 800ab4c:	d102      	bne.n	800ab54 <_kill_r+0x1c>
 800ab4e:	682b      	ldr	r3, [r5, #0]
 800ab50:	b103      	cbz	r3, 800ab54 <_kill_r+0x1c>
 800ab52:	6023      	str	r3, [r4, #0]
 800ab54:	bd38      	pop	{r3, r4, r5, pc}
 800ab56:	bf00      	nop
 800ab58:	20000388 	.word	0x20000388

0800ab5c <_getpid_r>:
 800ab5c:	f7f7 b918 	b.w	8001d90 <_getpid>

0800ab60 <__sread>:
 800ab60:	b510      	push	{r4, lr}
 800ab62:	460c      	mov	r4, r1
 800ab64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab68:	f000 f894 	bl	800ac94 <_read_r>
 800ab6c:	2800      	cmp	r0, #0
 800ab6e:	bfab      	itete	ge
 800ab70:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ab72:	89a3      	ldrhlt	r3, [r4, #12]
 800ab74:	181b      	addge	r3, r3, r0
 800ab76:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ab7a:	bfac      	ite	ge
 800ab7c:	6563      	strge	r3, [r4, #84]	; 0x54
 800ab7e:	81a3      	strhlt	r3, [r4, #12]
 800ab80:	bd10      	pop	{r4, pc}

0800ab82 <__swrite>:
 800ab82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab86:	461f      	mov	r7, r3
 800ab88:	898b      	ldrh	r3, [r1, #12]
 800ab8a:	05db      	lsls	r3, r3, #23
 800ab8c:	4605      	mov	r5, r0
 800ab8e:	460c      	mov	r4, r1
 800ab90:	4616      	mov	r6, r2
 800ab92:	d505      	bpl.n	800aba0 <__swrite+0x1e>
 800ab94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab98:	2302      	movs	r3, #2
 800ab9a:	2200      	movs	r2, #0
 800ab9c:	f000 f868 	bl	800ac70 <_lseek_r>
 800aba0:	89a3      	ldrh	r3, [r4, #12]
 800aba2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aba6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800abaa:	81a3      	strh	r3, [r4, #12]
 800abac:	4632      	mov	r2, r6
 800abae:	463b      	mov	r3, r7
 800abb0:	4628      	mov	r0, r5
 800abb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800abb6:	f000 b817 	b.w	800abe8 <_write_r>

0800abba <__sseek>:
 800abba:	b510      	push	{r4, lr}
 800abbc:	460c      	mov	r4, r1
 800abbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abc2:	f000 f855 	bl	800ac70 <_lseek_r>
 800abc6:	1c43      	adds	r3, r0, #1
 800abc8:	89a3      	ldrh	r3, [r4, #12]
 800abca:	bf15      	itete	ne
 800abcc:	6560      	strne	r0, [r4, #84]	; 0x54
 800abce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800abd2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800abd6:	81a3      	strheq	r3, [r4, #12]
 800abd8:	bf18      	it	ne
 800abda:	81a3      	strhne	r3, [r4, #12]
 800abdc:	bd10      	pop	{r4, pc}

0800abde <__sclose>:
 800abde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abe2:	f000 b813 	b.w	800ac0c <_close_r>
	...

0800abe8 <_write_r>:
 800abe8:	b538      	push	{r3, r4, r5, lr}
 800abea:	4d07      	ldr	r5, [pc, #28]	; (800ac08 <_write_r+0x20>)
 800abec:	4604      	mov	r4, r0
 800abee:	4608      	mov	r0, r1
 800abf0:	4611      	mov	r1, r2
 800abf2:	2200      	movs	r2, #0
 800abf4:	602a      	str	r2, [r5, #0]
 800abf6:	461a      	mov	r2, r3
 800abf8:	f7f7 f909 	bl	8001e0e <_write>
 800abfc:	1c43      	adds	r3, r0, #1
 800abfe:	d102      	bne.n	800ac06 <_write_r+0x1e>
 800ac00:	682b      	ldr	r3, [r5, #0]
 800ac02:	b103      	cbz	r3, 800ac06 <_write_r+0x1e>
 800ac04:	6023      	str	r3, [r4, #0]
 800ac06:	bd38      	pop	{r3, r4, r5, pc}
 800ac08:	20000388 	.word	0x20000388

0800ac0c <_close_r>:
 800ac0c:	b538      	push	{r3, r4, r5, lr}
 800ac0e:	4d06      	ldr	r5, [pc, #24]	; (800ac28 <_close_r+0x1c>)
 800ac10:	2300      	movs	r3, #0
 800ac12:	4604      	mov	r4, r0
 800ac14:	4608      	mov	r0, r1
 800ac16:	602b      	str	r3, [r5, #0]
 800ac18:	f7f7 f915 	bl	8001e46 <_close>
 800ac1c:	1c43      	adds	r3, r0, #1
 800ac1e:	d102      	bne.n	800ac26 <_close_r+0x1a>
 800ac20:	682b      	ldr	r3, [r5, #0]
 800ac22:	b103      	cbz	r3, 800ac26 <_close_r+0x1a>
 800ac24:	6023      	str	r3, [r4, #0]
 800ac26:	bd38      	pop	{r3, r4, r5, pc}
 800ac28:	20000388 	.word	0x20000388

0800ac2c <_fstat_r>:
 800ac2c:	b538      	push	{r3, r4, r5, lr}
 800ac2e:	4d07      	ldr	r5, [pc, #28]	; (800ac4c <_fstat_r+0x20>)
 800ac30:	2300      	movs	r3, #0
 800ac32:	4604      	mov	r4, r0
 800ac34:	4608      	mov	r0, r1
 800ac36:	4611      	mov	r1, r2
 800ac38:	602b      	str	r3, [r5, #0]
 800ac3a:	f7f7 f910 	bl	8001e5e <_fstat>
 800ac3e:	1c43      	adds	r3, r0, #1
 800ac40:	d102      	bne.n	800ac48 <_fstat_r+0x1c>
 800ac42:	682b      	ldr	r3, [r5, #0]
 800ac44:	b103      	cbz	r3, 800ac48 <_fstat_r+0x1c>
 800ac46:	6023      	str	r3, [r4, #0]
 800ac48:	bd38      	pop	{r3, r4, r5, pc}
 800ac4a:	bf00      	nop
 800ac4c:	20000388 	.word	0x20000388

0800ac50 <_isatty_r>:
 800ac50:	b538      	push	{r3, r4, r5, lr}
 800ac52:	4d06      	ldr	r5, [pc, #24]	; (800ac6c <_isatty_r+0x1c>)
 800ac54:	2300      	movs	r3, #0
 800ac56:	4604      	mov	r4, r0
 800ac58:	4608      	mov	r0, r1
 800ac5a:	602b      	str	r3, [r5, #0]
 800ac5c:	f7f7 f90f 	bl	8001e7e <_isatty>
 800ac60:	1c43      	adds	r3, r0, #1
 800ac62:	d102      	bne.n	800ac6a <_isatty_r+0x1a>
 800ac64:	682b      	ldr	r3, [r5, #0]
 800ac66:	b103      	cbz	r3, 800ac6a <_isatty_r+0x1a>
 800ac68:	6023      	str	r3, [r4, #0]
 800ac6a:	bd38      	pop	{r3, r4, r5, pc}
 800ac6c:	20000388 	.word	0x20000388

0800ac70 <_lseek_r>:
 800ac70:	b538      	push	{r3, r4, r5, lr}
 800ac72:	4d07      	ldr	r5, [pc, #28]	; (800ac90 <_lseek_r+0x20>)
 800ac74:	4604      	mov	r4, r0
 800ac76:	4608      	mov	r0, r1
 800ac78:	4611      	mov	r1, r2
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	602a      	str	r2, [r5, #0]
 800ac7e:	461a      	mov	r2, r3
 800ac80:	f7f7 f908 	bl	8001e94 <_lseek>
 800ac84:	1c43      	adds	r3, r0, #1
 800ac86:	d102      	bne.n	800ac8e <_lseek_r+0x1e>
 800ac88:	682b      	ldr	r3, [r5, #0]
 800ac8a:	b103      	cbz	r3, 800ac8e <_lseek_r+0x1e>
 800ac8c:	6023      	str	r3, [r4, #0]
 800ac8e:	bd38      	pop	{r3, r4, r5, pc}
 800ac90:	20000388 	.word	0x20000388

0800ac94 <_read_r>:
 800ac94:	b538      	push	{r3, r4, r5, lr}
 800ac96:	4d07      	ldr	r5, [pc, #28]	; (800acb4 <_read_r+0x20>)
 800ac98:	4604      	mov	r4, r0
 800ac9a:	4608      	mov	r0, r1
 800ac9c:	4611      	mov	r1, r2
 800ac9e:	2200      	movs	r2, #0
 800aca0:	602a      	str	r2, [r5, #0]
 800aca2:	461a      	mov	r2, r3
 800aca4:	f7f7 f896 	bl	8001dd4 <_read>
 800aca8:	1c43      	adds	r3, r0, #1
 800acaa:	d102      	bne.n	800acb2 <_read_r+0x1e>
 800acac:	682b      	ldr	r3, [r5, #0]
 800acae:	b103      	cbz	r3, 800acb2 <_read_r+0x1e>
 800acb0:	6023      	str	r3, [r4, #0]
 800acb2:	bd38      	pop	{r3, r4, r5, pc}
 800acb4:	20000388 	.word	0x20000388

0800acb8 <powf>:
 800acb8:	b508      	push	{r3, lr}
 800acba:	ed2d 8b04 	vpush	{d8-d9}
 800acbe:	eeb0 8a60 	vmov.f32	s16, s1
 800acc2:	eeb0 9a40 	vmov.f32	s18, s0
 800acc6:	f000 f84f 	bl	800ad68 <__ieee754_powf>
 800acca:	eeb4 8a48 	vcmp.f32	s16, s16
 800acce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acd2:	eef0 8a40 	vmov.f32	s17, s0
 800acd6:	d63e      	bvs.n	800ad56 <powf+0x9e>
 800acd8:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800acdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ace0:	d112      	bne.n	800ad08 <powf+0x50>
 800ace2:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800ace6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acea:	d039      	beq.n	800ad60 <powf+0xa8>
 800acec:	eeb0 0a48 	vmov.f32	s0, s16
 800acf0:	f000 fb35 	bl	800b35e <finitef>
 800acf4:	b378      	cbz	r0, 800ad56 <powf+0x9e>
 800acf6:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800acfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acfe:	d52a      	bpl.n	800ad56 <powf+0x9e>
 800ad00:	f7fb fb38 	bl	8006374 <__errno>
 800ad04:	2322      	movs	r3, #34	; 0x22
 800ad06:	e014      	b.n	800ad32 <powf+0x7a>
 800ad08:	f000 fb29 	bl	800b35e <finitef>
 800ad0c:	b998      	cbnz	r0, 800ad36 <powf+0x7e>
 800ad0e:	eeb0 0a49 	vmov.f32	s0, s18
 800ad12:	f000 fb24 	bl	800b35e <finitef>
 800ad16:	b170      	cbz	r0, 800ad36 <powf+0x7e>
 800ad18:	eeb0 0a48 	vmov.f32	s0, s16
 800ad1c:	f000 fb1f 	bl	800b35e <finitef>
 800ad20:	b148      	cbz	r0, 800ad36 <powf+0x7e>
 800ad22:	eef4 8a68 	vcmp.f32	s17, s17
 800ad26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad2a:	d7e9      	bvc.n	800ad00 <powf+0x48>
 800ad2c:	f7fb fb22 	bl	8006374 <__errno>
 800ad30:	2321      	movs	r3, #33	; 0x21
 800ad32:	6003      	str	r3, [r0, #0]
 800ad34:	e00f      	b.n	800ad56 <powf+0x9e>
 800ad36:	eef5 8a40 	vcmp.f32	s17, #0.0
 800ad3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad3e:	d10a      	bne.n	800ad56 <powf+0x9e>
 800ad40:	eeb0 0a49 	vmov.f32	s0, s18
 800ad44:	f000 fb0b 	bl	800b35e <finitef>
 800ad48:	b128      	cbz	r0, 800ad56 <powf+0x9e>
 800ad4a:	eeb0 0a48 	vmov.f32	s0, s16
 800ad4e:	f000 fb06 	bl	800b35e <finitef>
 800ad52:	2800      	cmp	r0, #0
 800ad54:	d1d4      	bne.n	800ad00 <powf+0x48>
 800ad56:	eeb0 0a68 	vmov.f32	s0, s17
 800ad5a:	ecbd 8b04 	vpop	{d8-d9}
 800ad5e:	bd08      	pop	{r3, pc}
 800ad60:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800ad64:	e7f7      	b.n	800ad56 <powf+0x9e>
	...

0800ad68 <__ieee754_powf>:
 800ad68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad6c:	ee10 4a90 	vmov	r4, s1
 800ad70:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 800ad74:	ed2d 8b02 	vpush	{d8}
 800ad78:	ee10 6a10 	vmov	r6, s0
 800ad7c:	eeb0 8a40 	vmov.f32	s16, s0
 800ad80:	eef0 8a60 	vmov.f32	s17, s1
 800ad84:	d10c      	bne.n	800ada0 <__ieee754_powf+0x38>
 800ad86:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 800ad8a:	0076      	lsls	r6, r6, #1
 800ad8c:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 800ad90:	f240 8296 	bls.w	800b2c0 <__ieee754_powf+0x558>
 800ad94:	ee38 0a28 	vadd.f32	s0, s16, s17
 800ad98:	ecbd 8b02 	vpop	{d8}
 800ad9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ada0:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800ada4:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800ada8:	dcf4      	bgt.n	800ad94 <__ieee754_powf+0x2c>
 800adaa:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800adae:	dd08      	ble.n	800adc2 <__ieee754_powf+0x5a>
 800adb0:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 800adb4:	d1ee      	bne.n	800ad94 <__ieee754_powf+0x2c>
 800adb6:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 800adba:	0064      	lsls	r4, r4, #1
 800adbc:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 800adc0:	e7e6      	b.n	800ad90 <__ieee754_powf+0x28>
 800adc2:	2e00      	cmp	r6, #0
 800adc4:	da20      	bge.n	800ae08 <__ieee754_powf+0xa0>
 800adc6:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 800adca:	da2d      	bge.n	800ae28 <__ieee754_powf+0xc0>
 800adcc:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800add0:	f2c0 827f 	blt.w	800b2d2 <__ieee754_powf+0x56a>
 800add4:	ea4f 53e8 	mov.w	r3, r8, asr #23
 800add8:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800addc:	fa48 f703 	asr.w	r7, r8, r3
 800ade0:	fa07 f303 	lsl.w	r3, r7, r3
 800ade4:	4543      	cmp	r3, r8
 800ade6:	f040 8274 	bne.w	800b2d2 <__ieee754_powf+0x56a>
 800adea:	f007 0701 	and.w	r7, r7, #1
 800adee:	f1c7 0702 	rsb	r7, r7, #2
 800adf2:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800adf6:	d11f      	bne.n	800ae38 <__ieee754_powf+0xd0>
 800adf8:	2c00      	cmp	r4, #0
 800adfa:	f280 8267 	bge.w	800b2cc <__ieee754_powf+0x564>
 800adfe:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ae02:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800ae06:	e7c7      	b.n	800ad98 <__ieee754_powf+0x30>
 800ae08:	2700      	movs	r7, #0
 800ae0a:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800ae0e:	d1f0      	bne.n	800adf2 <__ieee754_powf+0x8a>
 800ae10:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 800ae14:	f000 8254 	beq.w	800b2c0 <__ieee754_powf+0x558>
 800ae18:	dd08      	ble.n	800ae2c <__ieee754_powf+0xc4>
 800ae1a:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 800b124 <__ieee754_powf+0x3bc>
 800ae1e:	2c00      	cmp	r4, #0
 800ae20:	bfa8      	it	ge
 800ae22:	eeb0 0a68 	vmovge.f32	s0, s17
 800ae26:	e7b7      	b.n	800ad98 <__ieee754_powf+0x30>
 800ae28:	2702      	movs	r7, #2
 800ae2a:	e7ee      	b.n	800ae0a <__ieee754_powf+0xa2>
 800ae2c:	2c00      	cmp	r4, #0
 800ae2e:	f280 824a 	bge.w	800b2c6 <__ieee754_powf+0x55e>
 800ae32:	eeb1 0a68 	vneg.f32	s0, s17
 800ae36:	e7af      	b.n	800ad98 <__ieee754_powf+0x30>
 800ae38:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800ae3c:	d102      	bne.n	800ae44 <__ieee754_powf+0xdc>
 800ae3e:	ee28 0a08 	vmul.f32	s0, s16, s16
 800ae42:	e7a9      	b.n	800ad98 <__ieee754_powf+0x30>
 800ae44:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800ae48:	eeb0 0a48 	vmov.f32	s0, s16
 800ae4c:	d107      	bne.n	800ae5e <__ieee754_powf+0xf6>
 800ae4e:	2e00      	cmp	r6, #0
 800ae50:	db05      	blt.n	800ae5e <__ieee754_powf+0xf6>
 800ae52:	ecbd 8b02 	vpop	{d8}
 800ae56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae5a:	f000 ba53 	b.w	800b304 <__ieee754_sqrtf>
 800ae5e:	f000 fa77 	bl	800b350 <fabsf>
 800ae62:	b125      	cbz	r5, 800ae6e <__ieee754_powf+0x106>
 800ae64:	f026 4340 	bic.w	r3, r6, #3221225472	; 0xc0000000
 800ae68:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800ae6c:	d116      	bne.n	800ae9c <__ieee754_powf+0x134>
 800ae6e:	2c00      	cmp	r4, #0
 800ae70:	bfbc      	itt	lt
 800ae72:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800ae76:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800ae7a:	2e00      	cmp	r6, #0
 800ae7c:	da8c      	bge.n	800ad98 <__ieee754_powf+0x30>
 800ae7e:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 800ae82:	ea55 0307 	orrs.w	r3, r5, r7
 800ae86:	d104      	bne.n	800ae92 <__ieee754_powf+0x12a>
 800ae88:	ee70 7a40 	vsub.f32	s15, s0, s0
 800ae8c:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800ae90:	e782      	b.n	800ad98 <__ieee754_powf+0x30>
 800ae92:	2f01      	cmp	r7, #1
 800ae94:	d180      	bne.n	800ad98 <__ieee754_powf+0x30>
 800ae96:	eeb1 0a40 	vneg.f32	s0, s0
 800ae9a:	e77d      	b.n	800ad98 <__ieee754_powf+0x30>
 800ae9c:	0ff0      	lsrs	r0, r6, #31
 800ae9e:	3801      	subs	r0, #1
 800aea0:	ea57 0300 	orrs.w	r3, r7, r0
 800aea4:	d104      	bne.n	800aeb0 <__ieee754_powf+0x148>
 800aea6:	ee38 8a48 	vsub.f32	s16, s16, s16
 800aeaa:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800aeae:	e773      	b.n	800ad98 <__ieee754_powf+0x30>
 800aeb0:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 800aeb4:	dd74      	ble.n	800afa0 <__ieee754_powf+0x238>
 800aeb6:	4b9c      	ldr	r3, [pc, #624]	; (800b128 <__ieee754_powf+0x3c0>)
 800aeb8:	429d      	cmp	r5, r3
 800aeba:	dc08      	bgt.n	800aece <__ieee754_powf+0x166>
 800aebc:	2c00      	cmp	r4, #0
 800aebe:	da0b      	bge.n	800aed8 <__ieee754_powf+0x170>
 800aec0:	2000      	movs	r0, #0
 800aec2:	ecbd 8b02 	vpop	{d8}
 800aec6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aeca:	f000 ba3b 	b.w	800b344 <__math_oflowf>
 800aece:	4b97      	ldr	r3, [pc, #604]	; (800b12c <__ieee754_powf+0x3c4>)
 800aed0:	429d      	cmp	r5, r3
 800aed2:	dd08      	ble.n	800aee6 <__ieee754_powf+0x17e>
 800aed4:	2c00      	cmp	r4, #0
 800aed6:	dcf3      	bgt.n	800aec0 <__ieee754_powf+0x158>
 800aed8:	2000      	movs	r0, #0
 800aeda:	ecbd 8b02 	vpop	{d8}
 800aede:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aee2:	f000 ba29 	b.w	800b338 <__math_uflowf>
 800aee6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800aeea:	ee30 0a67 	vsub.f32	s0, s0, s15
 800aeee:	eddf 6a90 	vldr	s13, [pc, #576]	; 800b130 <__ieee754_powf+0x3c8>
 800aef2:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800aef6:	eee0 6a67 	vfms.f32	s13, s0, s15
 800aefa:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800aefe:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800af02:	ee20 7a00 	vmul.f32	s14, s0, s0
 800af06:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af0a:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800b134 <__ieee754_powf+0x3cc>
 800af0e:	ee67 7a67 	vnmul.f32	s15, s14, s15
 800af12:	ed9f 7a89 	vldr	s14, [pc, #548]	; 800b138 <__ieee754_powf+0x3d0>
 800af16:	eee0 7a07 	vfma.f32	s15, s0, s14
 800af1a:	ed9f 7a88 	vldr	s14, [pc, #544]	; 800b13c <__ieee754_powf+0x3d4>
 800af1e:	eef0 6a67 	vmov.f32	s13, s15
 800af22:	eee0 6a07 	vfma.f32	s13, s0, s14
 800af26:	ee16 3a90 	vmov	r3, s13
 800af2a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800af2e:	f023 030f 	bic.w	r3, r3, #15
 800af32:	ee00 3a90 	vmov	s1, r3
 800af36:	eee0 0a47 	vfms.f32	s1, s0, s14
 800af3a:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800af3e:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 800af42:	f024 040f 	bic.w	r4, r4, #15
 800af46:	ee07 4a10 	vmov	s14, r4
 800af4a:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800af4e:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800af52:	ee07 3a90 	vmov	s15, r3
 800af56:	eee7 0a27 	vfma.f32	s1, s14, s15
 800af5a:	3f01      	subs	r7, #1
 800af5c:	ea57 0200 	orrs.w	r2, r7, r0
 800af60:	ee07 4a10 	vmov	s14, r4
 800af64:	ee67 7a87 	vmul.f32	s15, s15, s14
 800af68:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800af6c:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800af70:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800af74:	ee17 4a10 	vmov	r4, s14
 800af78:	bf08      	it	eq
 800af7a:	eeb0 8a40 	vmoveq.f32	s16, s0
 800af7e:	2c00      	cmp	r4, #0
 800af80:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800af84:	f340 817e 	ble.w	800b284 <__ieee754_powf+0x51c>
 800af88:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800af8c:	f340 80f8 	ble.w	800b180 <__ieee754_powf+0x418>
 800af90:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800af94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af98:	bf4c      	ite	mi
 800af9a:	2001      	movmi	r0, #1
 800af9c:	2000      	movpl	r0, #0
 800af9e:	e790      	b.n	800aec2 <__ieee754_powf+0x15a>
 800afa0:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 800afa4:	bf01      	itttt	eq
 800afa6:	eddf 7a66 	vldreq	s15, [pc, #408]	; 800b140 <__ieee754_powf+0x3d8>
 800afaa:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800afae:	f06f 0217 	mvneq.w	r2, #23
 800afb2:	ee17 5a90 	vmoveq	r5, s15
 800afb6:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800afba:	bf18      	it	ne
 800afbc:	2200      	movne	r2, #0
 800afbe:	3b7f      	subs	r3, #127	; 0x7f
 800afc0:	4413      	add	r3, r2
 800afc2:	4a60      	ldr	r2, [pc, #384]	; (800b144 <__ieee754_powf+0x3dc>)
 800afc4:	f3c5 0516 	ubfx	r5, r5, #0, #23
 800afc8:	4295      	cmp	r5, r2
 800afca:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 800afce:	dd06      	ble.n	800afde <__ieee754_powf+0x276>
 800afd0:	4a5d      	ldr	r2, [pc, #372]	; (800b148 <__ieee754_powf+0x3e0>)
 800afd2:	4295      	cmp	r5, r2
 800afd4:	f340 80a4 	ble.w	800b120 <__ieee754_powf+0x3b8>
 800afd8:	3301      	adds	r3, #1
 800afda:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800afde:	2500      	movs	r5, #0
 800afe0:	4a5a      	ldr	r2, [pc, #360]	; (800b14c <__ieee754_powf+0x3e4>)
 800afe2:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 800afe6:	ee07 1a90 	vmov	s15, r1
 800afea:	ed92 7a00 	vldr	s14, [r2]
 800afee:	4a58      	ldr	r2, [pc, #352]	; (800b150 <__ieee754_powf+0x3e8>)
 800aff0:	ee37 6a27 	vadd.f32	s12, s14, s15
 800aff4:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800aff8:	eec5 6a86 	vdiv.f32	s13, s11, s12
 800affc:	1049      	asrs	r1, r1, #1
 800affe:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800b002:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800b006:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 800b00a:	ee37 5ac7 	vsub.f32	s10, s15, s14
 800b00e:	ee06 1a10 	vmov	s12, r1
 800b012:	ee65 4a26 	vmul.f32	s9, s10, s13
 800b016:	ee36 7a47 	vsub.f32	s14, s12, s14
 800b01a:	ee14 6a90 	vmov	r6, s9
 800b01e:	4016      	ands	r6, r2
 800b020:	ee05 6a90 	vmov	s11, r6
 800b024:	eea5 5ac6 	vfms.f32	s10, s11, s12
 800b028:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b02c:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800b154 <__ieee754_powf+0x3ec>
 800b030:	eea5 5ae7 	vfms.f32	s10, s11, s15
 800b034:	ee64 7aa4 	vmul.f32	s15, s9, s9
 800b038:	ee25 6a26 	vmul.f32	s12, s10, s13
 800b03c:	eddf 6a46 	vldr	s13, [pc, #280]	; 800b158 <__ieee754_powf+0x3f0>
 800b040:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800b044:	eddf 6a45 	vldr	s13, [pc, #276]	; 800b15c <__ieee754_powf+0x3f4>
 800b048:	eee7 6a27 	vfma.f32	s13, s14, s15
 800b04c:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800b130 <__ieee754_powf+0x3c8>
 800b050:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b054:	eddf 6a42 	vldr	s13, [pc, #264]	; 800b160 <__ieee754_powf+0x3f8>
 800b058:	eee7 6a27 	vfma.f32	s13, s14, s15
 800b05c:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800b164 <__ieee754_powf+0x3fc>
 800b060:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b064:	ee74 6aa5 	vadd.f32	s13, s9, s11
 800b068:	ee27 5aa7 	vmul.f32	s10, s15, s15
 800b06c:	ee66 6a86 	vmul.f32	s13, s13, s12
 800b070:	eee5 6a07 	vfma.f32	s13, s10, s14
 800b074:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 800b078:	eef0 7a45 	vmov.f32	s15, s10
 800b07c:	eee5 7aa5 	vfma.f32	s15, s11, s11
 800b080:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b084:	ee17 1a90 	vmov	r1, s15
 800b088:	4011      	ands	r1, r2
 800b08a:	ee07 1a90 	vmov	s15, r1
 800b08e:	ee37 7ac5 	vsub.f32	s14, s15, s10
 800b092:	eea5 7ae5 	vfms.f32	s14, s11, s11
 800b096:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800b09a:	ee27 7a24 	vmul.f32	s14, s14, s9
 800b09e:	eea6 7a27 	vfma.f32	s14, s12, s15
 800b0a2:	eeb0 6a47 	vmov.f32	s12, s14
 800b0a6:	eea5 6aa7 	vfma.f32	s12, s11, s15
 800b0aa:	ee16 1a10 	vmov	r1, s12
 800b0ae:	4011      	ands	r1, r2
 800b0b0:	ee06 1a90 	vmov	s13, r1
 800b0b4:	eee5 6ae7 	vfms.f32	s13, s11, s15
 800b0b8:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800b168 <__ieee754_powf+0x400>
 800b0bc:	eddf 5a2b 	vldr	s11, [pc, #172]	; 800b16c <__ieee754_powf+0x404>
 800b0c0:	ee37 7a66 	vsub.f32	s14, s14, s13
 800b0c4:	ee06 1a10 	vmov	s12, r1
 800b0c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b0cc:	eddf 7a28 	vldr	s15, [pc, #160]	; 800b170 <__ieee754_powf+0x408>
 800b0d0:	4928      	ldr	r1, [pc, #160]	; (800b174 <__ieee754_powf+0x40c>)
 800b0d2:	eea6 7a27 	vfma.f32	s14, s12, s15
 800b0d6:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 800b0da:	edd1 7a00 	vldr	s15, [r1]
 800b0de:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b0e2:	ee07 3a90 	vmov	s15, r3
 800b0e6:	4b24      	ldr	r3, [pc, #144]	; (800b178 <__ieee754_powf+0x410>)
 800b0e8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800b0ec:	eef0 7a47 	vmov.f32	s15, s14
 800b0f0:	eee6 7a25 	vfma.f32	s15, s12, s11
 800b0f4:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800b0f8:	edd5 0a00 	vldr	s1, [r5]
 800b0fc:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800b100:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b104:	ee17 3a90 	vmov	r3, s15
 800b108:	4013      	ands	r3, r2
 800b10a:	ee07 3a90 	vmov	s15, r3
 800b10e:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800b112:	ee76 6ae0 	vsub.f32	s13, s13, s1
 800b116:	eee6 6a65 	vfms.f32	s13, s12, s11
 800b11a:	ee77 7a66 	vsub.f32	s15, s14, s13
 800b11e:	e70e      	b.n	800af3e <__ieee754_powf+0x1d6>
 800b120:	2501      	movs	r5, #1
 800b122:	e75d      	b.n	800afe0 <__ieee754_powf+0x278>
 800b124:	00000000 	.word	0x00000000
 800b128:	3f7ffff3 	.word	0x3f7ffff3
 800b12c:	3f800007 	.word	0x3f800007
 800b130:	3eaaaaab 	.word	0x3eaaaaab
 800b134:	3fb8aa3b 	.word	0x3fb8aa3b
 800b138:	36eca570 	.word	0x36eca570
 800b13c:	3fb8aa00 	.word	0x3fb8aa00
 800b140:	4b800000 	.word	0x4b800000
 800b144:	001cc471 	.word	0x001cc471
 800b148:	005db3d6 	.word	0x005db3d6
 800b14c:	0800b954 	.word	0x0800b954
 800b150:	fffff000 	.word	0xfffff000
 800b154:	3e6c3255 	.word	0x3e6c3255
 800b158:	3e53f142 	.word	0x3e53f142
 800b15c:	3e8ba305 	.word	0x3e8ba305
 800b160:	3edb6db7 	.word	0x3edb6db7
 800b164:	3f19999a 	.word	0x3f19999a
 800b168:	3f76384f 	.word	0x3f76384f
 800b16c:	3f763800 	.word	0x3f763800
 800b170:	369dc3a0 	.word	0x369dc3a0
 800b174:	0800b964 	.word	0x0800b964
 800b178:	0800b95c 	.word	0x0800b95c
 800b17c:	3338aa3c 	.word	0x3338aa3c
 800b180:	f040 8095 	bne.w	800b2ae <__ieee754_powf+0x546>
 800b184:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800b17c <__ieee754_powf+0x414>
 800b188:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b18c:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800b190:	eef4 6ac7 	vcmpe.f32	s13, s14
 800b194:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b198:	f73f aefa 	bgt.w	800af90 <__ieee754_powf+0x228>
 800b19c:	15db      	asrs	r3, r3, #23
 800b19e:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 800b1a2:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b1a6:	4103      	asrs	r3, r0
 800b1a8:	4423      	add	r3, r4
 800b1aa:	494b      	ldr	r1, [pc, #300]	; (800b2d8 <__ieee754_powf+0x570>)
 800b1ac:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800b1b0:	3a7f      	subs	r2, #127	; 0x7f
 800b1b2:	4111      	asrs	r1, r2
 800b1b4:	ea23 0101 	bic.w	r1, r3, r1
 800b1b8:	ee07 1a10 	vmov	s14, r1
 800b1bc:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800b1c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800b1c4:	f1c2 0217 	rsb	r2, r2, #23
 800b1c8:	4110      	asrs	r0, r2
 800b1ca:	2c00      	cmp	r4, #0
 800b1cc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b1d0:	bfb8      	it	lt
 800b1d2:	4240      	neglt	r0, r0
 800b1d4:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800b1d8:	ed9f 0a40 	vldr	s0, [pc, #256]	; 800b2dc <__ieee754_powf+0x574>
 800b1dc:	eddf 6a40 	vldr	s13, [pc, #256]	; 800b2e0 <__ieee754_powf+0x578>
 800b1e0:	ee17 3a10 	vmov	r3, s14
 800b1e4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800b1e8:	f023 030f 	bic.w	r3, r3, #15
 800b1ec:	ee07 3a10 	vmov	s14, r3
 800b1f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b1f4:	ee27 0a00 	vmul.f32	s0, s14, s0
 800b1f8:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800b1fc:	eddf 7a39 	vldr	s15, [pc, #228]	; 800b2e4 <__ieee754_powf+0x57c>
 800b200:	eea0 0aa7 	vfma.f32	s0, s1, s15
 800b204:	eef0 7a40 	vmov.f32	s15, s0
 800b208:	eee7 7a26 	vfma.f32	s15, s14, s13
 800b20c:	eeb0 6a67 	vmov.f32	s12, s15
 800b210:	eea7 6a66 	vfms.f32	s12, s14, s13
 800b214:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800b218:	ee30 0a46 	vsub.f32	s0, s0, s12
 800b21c:	eddf 6a32 	vldr	s13, [pc, #200]	; 800b2e8 <__ieee754_powf+0x580>
 800b220:	ed9f 6a32 	vldr	s12, [pc, #200]	; 800b2ec <__ieee754_powf+0x584>
 800b224:	eee7 6a06 	vfma.f32	s13, s14, s12
 800b228:	ed9f 6a31 	vldr	s12, [pc, #196]	; 800b2f0 <__ieee754_powf+0x588>
 800b22c:	eea6 6a87 	vfma.f32	s12, s13, s14
 800b230:	eddf 6a30 	vldr	s13, [pc, #192]	; 800b2f4 <__ieee754_powf+0x58c>
 800b234:	eee6 6a07 	vfma.f32	s13, s12, s14
 800b238:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 800b2f8 <__ieee754_powf+0x590>
 800b23c:	eea6 6a87 	vfma.f32	s12, s13, s14
 800b240:	eef0 6a67 	vmov.f32	s13, s15
 800b244:	eee6 6a47 	vfms.f32	s13, s12, s14
 800b248:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800b24c:	ee27 6aa6 	vmul.f32	s12, s15, s13
 800b250:	ee76 6ac7 	vsub.f32	s13, s13, s14
 800b254:	eea7 0a80 	vfma.f32	s0, s15, s0
 800b258:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800b25c:	ee37 0a40 	vsub.f32	s0, s14, s0
 800b260:	ee70 7a67 	vsub.f32	s15, s0, s15
 800b264:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800b268:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b26c:	ee10 3a10 	vmov	r3, s0
 800b270:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800b274:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b278:	da1f      	bge.n	800b2ba <__ieee754_powf+0x552>
 800b27a:	f000 f87d 	bl	800b378 <scalbnf>
 800b27e:	ee20 0a08 	vmul.f32	s0, s0, s16
 800b282:	e589      	b.n	800ad98 <__ieee754_powf+0x30>
 800b284:	4a1d      	ldr	r2, [pc, #116]	; (800b2fc <__ieee754_powf+0x594>)
 800b286:	4293      	cmp	r3, r2
 800b288:	dd07      	ble.n	800b29a <__ieee754_powf+0x532>
 800b28a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800b28e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b292:	bf4c      	ite	mi
 800b294:	2001      	movmi	r0, #1
 800b296:	2000      	movpl	r0, #0
 800b298:	e61f      	b.n	800aeda <__ieee754_powf+0x172>
 800b29a:	d108      	bne.n	800b2ae <__ieee754_powf+0x546>
 800b29c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b2a0:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800b2a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2a8:	f6ff af78 	blt.w	800b19c <__ieee754_powf+0x434>
 800b2ac:	e7ed      	b.n	800b28a <__ieee754_powf+0x522>
 800b2ae:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800b2b2:	f73f af73 	bgt.w	800b19c <__ieee754_powf+0x434>
 800b2b6:	2000      	movs	r0, #0
 800b2b8:	e78c      	b.n	800b1d4 <__ieee754_powf+0x46c>
 800b2ba:	ee00 3a10 	vmov	s0, r3
 800b2be:	e7de      	b.n	800b27e <__ieee754_powf+0x516>
 800b2c0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800b2c4:	e568      	b.n	800ad98 <__ieee754_powf+0x30>
 800b2c6:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800b300 <__ieee754_powf+0x598>
 800b2ca:	e565      	b.n	800ad98 <__ieee754_powf+0x30>
 800b2cc:	eeb0 0a48 	vmov.f32	s0, s16
 800b2d0:	e562      	b.n	800ad98 <__ieee754_powf+0x30>
 800b2d2:	2700      	movs	r7, #0
 800b2d4:	e58d      	b.n	800adf2 <__ieee754_powf+0x8a>
 800b2d6:	bf00      	nop
 800b2d8:	007fffff 	.word	0x007fffff
 800b2dc:	35bfbe8c 	.word	0x35bfbe8c
 800b2e0:	3f317200 	.word	0x3f317200
 800b2e4:	3f317218 	.word	0x3f317218
 800b2e8:	b5ddea0e 	.word	0xb5ddea0e
 800b2ec:	3331bb4c 	.word	0x3331bb4c
 800b2f0:	388ab355 	.word	0x388ab355
 800b2f4:	bb360b61 	.word	0xbb360b61
 800b2f8:	3e2aaaab 	.word	0x3e2aaaab
 800b2fc:	43160000 	.word	0x43160000
 800b300:	00000000 	.word	0x00000000

0800b304 <__ieee754_sqrtf>:
 800b304:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800b308:	4770      	bx	lr

0800b30a <with_errnof>:
 800b30a:	b513      	push	{r0, r1, r4, lr}
 800b30c:	4604      	mov	r4, r0
 800b30e:	ed8d 0a01 	vstr	s0, [sp, #4]
 800b312:	f7fb f82f 	bl	8006374 <__errno>
 800b316:	ed9d 0a01 	vldr	s0, [sp, #4]
 800b31a:	6004      	str	r4, [r0, #0]
 800b31c:	b002      	add	sp, #8
 800b31e:	bd10      	pop	{r4, pc}

0800b320 <xflowf>:
 800b320:	b130      	cbz	r0, 800b330 <xflowf+0x10>
 800b322:	eef1 7a40 	vneg.f32	s15, s0
 800b326:	ee27 0a80 	vmul.f32	s0, s15, s0
 800b32a:	2022      	movs	r0, #34	; 0x22
 800b32c:	f7ff bfed 	b.w	800b30a <with_errnof>
 800b330:	eef0 7a40 	vmov.f32	s15, s0
 800b334:	e7f7      	b.n	800b326 <xflowf+0x6>
	...

0800b338 <__math_uflowf>:
 800b338:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b340 <__math_uflowf+0x8>
 800b33c:	f7ff bff0 	b.w	800b320 <xflowf>
 800b340:	10000000 	.word	0x10000000

0800b344 <__math_oflowf>:
 800b344:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b34c <__math_oflowf+0x8>
 800b348:	f7ff bfea 	b.w	800b320 <xflowf>
 800b34c:	70000000 	.word	0x70000000

0800b350 <fabsf>:
 800b350:	ee10 3a10 	vmov	r3, s0
 800b354:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b358:	ee00 3a10 	vmov	s0, r3
 800b35c:	4770      	bx	lr

0800b35e <finitef>:
 800b35e:	b082      	sub	sp, #8
 800b360:	ed8d 0a01 	vstr	s0, [sp, #4]
 800b364:	9801      	ldr	r0, [sp, #4]
 800b366:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800b36a:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800b36e:	bfac      	ite	ge
 800b370:	2000      	movge	r0, #0
 800b372:	2001      	movlt	r0, #1
 800b374:	b002      	add	sp, #8
 800b376:	4770      	bx	lr

0800b378 <scalbnf>:
 800b378:	ee10 3a10 	vmov	r3, s0
 800b37c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800b380:	d025      	beq.n	800b3ce <scalbnf+0x56>
 800b382:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800b386:	d302      	bcc.n	800b38e <scalbnf+0x16>
 800b388:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b38c:	4770      	bx	lr
 800b38e:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800b392:	d122      	bne.n	800b3da <scalbnf+0x62>
 800b394:	4b2a      	ldr	r3, [pc, #168]	; (800b440 <scalbnf+0xc8>)
 800b396:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800b444 <scalbnf+0xcc>
 800b39a:	4298      	cmp	r0, r3
 800b39c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800b3a0:	db16      	blt.n	800b3d0 <scalbnf+0x58>
 800b3a2:	ee10 3a10 	vmov	r3, s0
 800b3a6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800b3aa:	3a19      	subs	r2, #25
 800b3ac:	4402      	add	r2, r0
 800b3ae:	2afe      	cmp	r2, #254	; 0xfe
 800b3b0:	dd15      	ble.n	800b3de <scalbnf+0x66>
 800b3b2:	ee10 3a10 	vmov	r3, s0
 800b3b6:	eddf 7a24 	vldr	s15, [pc, #144]	; 800b448 <scalbnf+0xd0>
 800b3ba:	eddf 6a24 	vldr	s13, [pc, #144]	; 800b44c <scalbnf+0xd4>
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	eeb0 7a67 	vmov.f32	s14, s15
 800b3c4:	bfb8      	it	lt
 800b3c6:	eef0 7a66 	vmovlt.f32	s15, s13
 800b3ca:	ee27 0a27 	vmul.f32	s0, s14, s15
 800b3ce:	4770      	bx	lr
 800b3d0:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800b450 <scalbnf+0xd8>
 800b3d4:	ee20 0a27 	vmul.f32	s0, s0, s15
 800b3d8:	4770      	bx	lr
 800b3da:	0dd2      	lsrs	r2, r2, #23
 800b3dc:	e7e6      	b.n	800b3ac <scalbnf+0x34>
 800b3de:	2a00      	cmp	r2, #0
 800b3e0:	dd06      	ble.n	800b3f0 <scalbnf+0x78>
 800b3e2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b3e6:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800b3ea:	ee00 3a10 	vmov	s0, r3
 800b3ee:	4770      	bx	lr
 800b3f0:	f112 0f16 	cmn.w	r2, #22
 800b3f4:	da1a      	bge.n	800b42c <scalbnf+0xb4>
 800b3f6:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b3fa:	4298      	cmp	r0, r3
 800b3fc:	ee10 3a10 	vmov	r3, s0
 800b400:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b404:	dd0a      	ble.n	800b41c <scalbnf+0xa4>
 800b406:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800b448 <scalbnf+0xd0>
 800b40a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800b44c <scalbnf+0xd4>
 800b40e:	eef0 7a40 	vmov.f32	s15, s0
 800b412:	2b00      	cmp	r3, #0
 800b414:	bf18      	it	ne
 800b416:	eeb0 0a47 	vmovne.f32	s0, s14
 800b41a:	e7db      	b.n	800b3d4 <scalbnf+0x5c>
 800b41c:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800b450 <scalbnf+0xd8>
 800b420:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800b454 <scalbnf+0xdc>
 800b424:	eef0 7a40 	vmov.f32	s15, s0
 800b428:	2b00      	cmp	r3, #0
 800b42a:	e7f3      	b.n	800b414 <scalbnf+0x9c>
 800b42c:	3219      	adds	r2, #25
 800b42e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b432:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800b436:	eddf 7a08 	vldr	s15, [pc, #32]	; 800b458 <scalbnf+0xe0>
 800b43a:	ee07 3a10 	vmov	s14, r3
 800b43e:	e7c4      	b.n	800b3ca <scalbnf+0x52>
 800b440:	ffff3cb0 	.word	0xffff3cb0
 800b444:	4c000000 	.word	0x4c000000
 800b448:	7149f2ca 	.word	0x7149f2ca
 800b44c:	f149f2ca 	.word	0xf149f2ca
 800b450:	0da24260 	.word	0x0da24260
 800b454:	8da24260 	.word	0x8da24260
 800b458:	33000000 	.word	0x33000000

0800b45c <_init>:
 800b45c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b45e:	bf00      	nop
 800b460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b462:	bc08      	pop	{r3}
 800b464:	469e      	mov	lr, r3
 800b466:	4770      	bx	lr

0800b468 <_fini>:
 800b468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b46a:	bf00      	nop
 800b46c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b46e:	bc08      	pop	{r3}
 800b470:	469e      	mov	lr, r3
 800b472:	4770      	bx	lr
