
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af10  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f4  0800b0a0  0800b0a0  0001b0a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b594  0800b594  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800b594  0800b594  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b594  0800b594  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b594  0800b594  0001b594  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b598  0800b598  0001b598  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800b59c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
 10 .bss          000001ac  200001e0  200001e0  000201e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000038c  2000038c  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010469  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f37  00000000  00000000  00030679  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e50  00000000  00000000  000325b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d88  00000000  00000000  00033400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ce37  00000000  00000000  00034188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011738  00000000  00000000  00050fbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000adcd5  00000000  00000000  000626f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001103cc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005414  00000000  00000000  0011041c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b088 	.word	0x0800b088

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800b088 	.word	0x0800b088

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff23 	bl	8000adc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc99 	bl	80005f8 <__aeabi_dmul>
 8000cc6:	f7ff ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fad2 	bl	8000288 <__aeabi_dsub>
 8000ce4:	f7ff ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <togglePowerBtn>:


/*
 * Toggle Robot Start Button
 */
int togglePowerBtn(int powerBtnState) {
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
	if (powerBtnState) {
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d027      	beq.n	8000d52 <togglePowerBtn+0x5e>
		block = 0;
 8000d02:	4b19      	ldr	r3, [pc, #100]	; (8000d68 <togglePowerBtn+0x74>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
		if (!byteStream && buttonState) {
 8000d08:	4b18      	ldr	r3, [pc, #96]	; (8000d6c <togglePowerBtn+0x78>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d10c      	bne.n	8000d2a <togglePowerBtn+0x36>
 8000d10:	4b17      	ldr	r3, [pc, #92]	; (8000d70 <togglePowerBtn+0x7c>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d008      	beq.n	8000d2a <togglePowerBtn+0x36>
		  byteStream = 1;
 8000d18:	4b14      	ldr	r3, [pc, #80]	; (8000d6c <togglePowerBtn+0x78>)
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	601a      	str	r2, [r3, #0]
		  buttonState = 0;
 8000d1e:	4b14      	ldr	r3, [pc, #80]	; (8000d70 <togglePowerBtn+0x7c>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
		  return buttonState;
 8000d24:	4b12      	ldr	r3, [pc, #72]	; (8000d70 <togglePowerBtn+0x7c>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	e018      	b.n	8000d5c <togglePowerBtn+0x68>
		} else if (!byteStream && !buttonState) {
 8000d2a:	4b10      	ldr	r3, [pc, #64]	; (8000d6c <togglePowerBtn+0x78>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d10c      	bne.n	8000d4c <togglePowerBtn+0x58>
 8000d32:	4b0f      	ldr	r3, [pc, #60]	; (8000d70 <togglePowerBtn+0x7c>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d108      	bne.n	8000d4c <togglePowerBtn+0x58>
		  byteStream = 1;
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <togglePowerBtn+0x78>)
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	601a      	str	r2, [r3, #0]
		  buttonState = 1;
 8000d40:	4b0b      	ldr	r3, [pc, #44]	; (8000d70 <togglePowerBtn+0x7c>)
 8000d42:	2201      	movs	r2, #1
 8000d44:	601a      	str	r2, [r3, #0]
		  return buttonState;
 8000d46:	4b0a      	ldr	r3, [pc, #40]	; (8000d70 <togglePowerBtn+0x7c>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	e007      	b.n	8000d5c <togglePowerBtn+0x68>
		} else {
		  return buttonState;
 8000d4c:	4b08      	ldr	r3, [pc, #32]	; (8000d70 <togglePowerBtn+0x7c>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	e004      	b.n	8000d5c <togglePowerBtn+0x68>
		}
	} else {
		byteStream = 0;
 8000d52:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <togglePowerBtn+0x78>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
		return buttonState;
 8000d58:	4b05      	ldr	r3, [pc, #20]	; (8000d70 <togglePowerBtn+0x7c>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
	}
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	370c      	adds	r7, #12
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr
 8000d68:	20000368 	.word	0x20000368
 8000d6c:	2000036c 	.word	0x2000036c
 8000d70:	20000370 	.word	0x20000370

08000d74 <ADC_Read>:
 * Read IR sensor value:
 * Update ADC channel config
 * Start, convert and read sensor value
 */
uint16_t ADC_Read(ADC_HandleTypeDef* hadc, uint8_t channel)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b088      	sub	sp, #32
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	460b      	mov	r3, r1
 8000d7e:	70fb      	strb	r3, [r7, #3]
  ADC_ChannelConfTypeDef sConfig;

  sConfig.Channel = channel;
 8000d80:	78fb      	ldrb	r3, [r7, #3]
 8000d82:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = 1;
 8000d84:	2301      	movs	r3, #1
 8000d86:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	613b      	str	r3, [r7, #16]

  HAL_ADC_ConfigChannel(hadc, &sConfig);
 8000d8c:	f107 0308 	add.w	r3, r7, #8
 8000d90:	4619      	mov	r1, r3
 8000d92:	6878      	ldr	r0, [r7, #4]
 8000d94:	f001 fa7a 	bl	800228c <HAL_ADC_ConfigChannel>

  HAL_ADC_Start(hadc);
 8000d98:	6878      	ldr	r0, [r7, #4]
 8000d9a:	f001 f8e5 	bl	8001f68 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(hadc, 10);
 8000d9e:	210a      	movs	r1, #10
 8000da0:	6878      	ldr	r0, [r7, #4]
 8000da2:	f001 f997 	bl	80020d4 <HAL_ADC_PollForConversion>

  return HAL_ADC_GetValue(hadc);
 8000da6:	6878      	ldr	r0, [r7, #4]
 8000da8:	f001 fa62 	bl	8002270 <HAL_ADC_GetValue>
 8000dac:	4603      	mov	r3, r0
 8000dae:	b29b      	uxth	r3, r3
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	3720      	adds	r7, #32
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <setInitialState>:
/*
 * Set Initial State:
 * Set speed to highest settings
 */
void setInitialState(uint8_t powerBtnState)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	71fb      	strb	r3, [r7, #7]
	if (togglePowerBtn(powerBtnState) == 1) {
 8000dc2:	79fb      	ldrb	r3, [r7, #7]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff ff95 	bl	8000cf4 <togglePowerBtn>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b01      	cmp	r3, #1
 8000dce:	d103      	bne.n	8000dd8 <setInitialState+0x20>
	  setMotorSpeed(255, 255);
 8000dd0:	21ff      	movs	r1, #255	; 0xff
 8000dd2:	20ff      	movs	r0, #255	; 0xff
 8000dd4:	f000 f804 	bl	8000de0 <setMotorSpeed>
	}
}
 8000dd8:	bf00      	nop
 8000dda:	3708      	adds	r7, #8
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <setMotorSpeed>:
/*
 * Set Motor Speed:
 * motor_speed => 0 -> 255
 */
void setMotorSpeed(uint8_t ms_right, uint8_t ms_left)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	460a      	mov	r2, r1
 8000dea:	71fb      	strb	r3, [r7, #7]
 8000dec:	4613      	mov	r3, r2
 8000dee:	71bb      	strb	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, ms_right);
 8000df0:	4b06      	ldr	r3, [pc, #24]	; (8000e0c <setMotorSpeed+0x2c>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	79fa      	ldrb	r2, [r7, #7]
 8000df6:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, ms_left);
 8000df8:	4b04      	ldr	r3, [pc, #16]	; (8000e0c <setMotorSpeed+0x2c>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	79ba      	ldrb	r2, [r7, #6]
 8000dfe:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000e00:	bf00      	nop
 8000e02:	370c      	adds	r7, #12
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr
 8000e0c:	2000024c 	.word	0x2000024c

08000e10 <calcMotorSpeed>:
 *
 * Formular:
 * https://stackoverflow.com/questions/5731863/mapping-a-numeric-range-onto-another
 * (output_end - output_start) / (input_end - input_start)
 */
float calcMotorSpeed(float turn_amount) {
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b084      	sub	sp, #16
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	ed87 0a01 	vstr	s0, [r7, #4]
	float speed = round(0.68 * (turn_amount - 25));
 8000e1a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e1e:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8000e22:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000e26:	ee17 0a90 	vmov	r0, s15
 8000e2a:	f7ff fb8d 	bl	8000548 <__aeabi_f2d>
 8000e2e:	a31d      	add	r3, pc, #116	; (adr r3, 8000ea4 <calcMotorSpeed+0x94>)
 8000e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e34:	f7ff fbe0 	bl	80005f8 <__aeabi_dmul>
 8000e38:	4602      	mov	r2, r0
 8000e3a:	460b      	mov	r3, r1
 8000e3c:	ec43 2b17 	vmov	d7, r2, r3
 8000e40:	eeb0 0a47 	vmov.f32	s0, s14
 8000e44:	eef0 0a67 	vmov.f32	s1, s15
 8000e48:	f009 fd06 	bl	800a858 <round>
 8000e4c:	ec53 2b10 	vmov	r2, r3, d0
 8000e50:	4610      	mov	r0, r2
 8000e52:	4619      	mov	r1, r3
 8000e54:	f7ff fec8 	bl	8000be8 <__aeabi_d2f>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	60fb      	str	r3, [r7, #12]

	if(speed <= 20) {
 8000e5c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e60:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8000e64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e6c:	d801      	bhi.n	8000e72 <calcMotorSpeed+0x62>
		return 20;
 8000e6e:	4b0a      	ldr	r3, [pc, #40]	; (8000e98 <calcMotorSpeed+0x88>)
 8000e70:	e00b      	b.n	8000e8a <calcMotorSpeed+0x7a>
	} else if (speed >= 255) {
 8000e72:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e76:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8000e9c <calcMotorSpeed+0x8c>
 8000e7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e82:	db01      	blt.n	8000e88 <calcMotorSpeed+0x78>
		return 255;
 8000e84:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <calcMotorSpeed+0x90>)
 8000e86:	e000      	b.n	8000e8a <calcMotorSpeed+0x7a>
	} else {
		return speed;
 8000e88:	68fb      	ldr	r3, [r7, #12]
	}
}
 8000e8a:	ee07 3a90 	vmov	s15, r3
 8000e8e:	eeb0 0a67 	vmov.f32	s0, s15
 8000e92:	3710      	adds	r7, #16
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	41a00000 	.word	0x41a00000
 8000e9c:	437f0000 	.word	0x437f0000
 8000ea0:	437f0000 	.word	0x437f0000
 8000ea4:	5c28f5c3 	.word	0x5c28f5c3
 8000ea8:	3fe5c28f 	.word	0x3fe5c28f
 8000eac:	00000000 	.word	0x00000000

08000eb0 <getDistance>:
 * Then based on the IR sensor datasheet graph, we determine
 * an equation to get accurate distance levels in centimeters.
 */

float getDistance(float adcVal)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b086      	sub	sp, #24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	ed87 0a01 	vstr	s0, [r7, #4]
  float voltageVal = (3.3 * adcVal) / 4096;
 8000eba:	6878      	ldr	r0, [r7, #4]
 8000ebc:	f7ff fb44 	bl	8000548 <__aeabi_f2d>
 8000ec0:	a330      	add	r3, pc, #192	; (adr r3, 8000f84 <getDistance+0xd4>)
 8000ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ec6:	f7ff fb97 	bl	80005f8 <__aeabi_dmul>
 8000eca:	4602      	mov	r2, r0
 8000ecc:	460b      	mov	r3, r1
 8000ece:	4610      	mov	r0, r2
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	f04f 0200 	mov.w	r2, #0
 8000ed6:	4b26      	ldr	r3, [pc, #152]	; (8000f70 <getDistance+0xc0>)
 8000ed8:	f7ff fcb8 	bl	800084c <__aeabi_ddiv>
 8000edc:	4602      	mov	r2, r0
 8000ede:	460b      	mov	r3, r1
 8000ee0:	4610      	mov	r0, r2
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	f7ff fe80 	bl	8000be8 <__aeabi_d2f>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	617b      	str	r3, [r7, #20]

  float max_distance = DISTANCE_MAX;
 8000eec:	4b21      	ldr	r3, [pc, #132]	; (8000f74 <getDistance+0xc4>)
 8000eee:	613b      	str	r3, [r7, #16]
  float min_distance = DISTANCE_MIN;
 8000ef0:	4b21      	ldr	r3, [pc, #132]	; (8000f78 <getDistance+0xc8>)
 8000ef2:	60fb      	str	r3, [r7, #12]

  float distance = 23.4993 / powf(voltageVal, 1.7);
 8000ef4:	eddf 0a21 	vldr	s1, [pc, #132]	; 8000f7c <getDistance+0xcc>
 8000ef8:	ed97 0a05 	vldr	s0, [r7, #20]
 8000efc:	f009 fcf2 	bl	800a8e4 <powf>
 8000f00:	ee10 3a10 	vmov	r3, s0
 8000f04:	4618      	mov	r0, r3
 8000f06:	f7ff fb1f 	bl	8000548 <__aeabi_f2d>
 8000f0a:	4602      	mov	r2, r0
 8000f0c:	460b      	mov	r3, r1
 8000f0e:	a116      	add	r1, pc, #88	; (adr r1, 8000f68 <getDistance+0xb8>)
 8000f10:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000f14:	f7ff fc9a 	bl	800084c <__aeabi_ddiv>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	460b      	mov	r3, r1
 8000f1c:	4610      	mov	r0, r2
 8000f1e:	4619      	mov	r1, r3
 8000f20:	f7ff fe62 	bl	8000be8 <__aeabi_d2f>
 8000f24:	4603      	mov	r3, r0
 8000f26:	60bb      	str	r3, [r7, #8]

  distance -= DISTANCE_THRESHOLD;

  if(distance >= DISTANCE_MAX) {
 8000f28:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f2c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8000f80 <getDistance+0xd0>
 8000f30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f38:	db01      	blt.n	8000f3e <getDistance+0x8e>
	  return max_distance;
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	e00b      	b.n	8000f56 <getDistance+0xa6>
  } else if(distance <= DISTANCE_MIN) {
 8000f3e:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f42:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000f46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f4e:	d801      	bhi.n	8000f54 <getDistance+0xa4>
	  return min_distance;
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	e000      	b.n	8000f56 <getDistance+0xa6>
  } else {
	  return distance;
 8000f54:	68bb      	ldr	r3, [r7, #8]
  }
}
 8000f56:	ee07 3a90 	vmov	s15, r3
 8000f5a:	eeb0 0a67 	vmov.f32	s0, s15
 8000f5e:	3718      	adds	r7, #24
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	f3af 8000 	nop.w
 8000f68:	1ff2e48f 	.word	0x1ff2e48f
 8000f6c:	40377fd2 	.word	0x40377fd2
 8000f70:	40b00000 	.word	0x40b00000
 8000f74:	43160000 	.word	0x43160000
 8000f78:	41200000 	.word	0x41200000
 8000f7c:	3fd9999a 	.word	0x3fd9999a
 8000f80:	43160000 	.word	0x43160000
 8000f84:	66666666 	.word	0x66666666
 8000f88:	400a6666 	.word	0x400a6666

08000f8c <steerBoat>:
 * if turn amount is negative, the boat needs to turn right
 * Constraint: 0 < turn_amount < 140
 */

void steerBoat(float left_dist, float front_dist, float right_dist)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b086      	sub	sp, #24
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	ed87 0a03 	vstr	s0, [r7, #12]
 8000f96:	edc7 0a02 	vstr	s1, [r7, #8]
 8000f9a:	ed87 1a01 	vstr	s2, [r7, #4]
	float turn_amount = left_dist - right_dist;
 8000f9e:	ed97 7a03 	vldr	s14, [r7, #12]
 8000fa2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fa6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000faa:	edc7 7a05 	vstr	s15, [r7, #20]
	float speed = calcMotorSpeed(fabs(turn_amount));
 8000fae:	edd7 7a05 	vldr	s15, [r7, #20]
 8000fb2:	eef0 7ae7 	vabs.f32	s15, s15
 8000fb6:	eeb0 0a67 	vmov.f32	s0, s15
 8000fba:	f7ff ff29 	bl	8000e10 <calcMotorSpeed>
 8000fbe:	ed87 0a04 	vstr	s0, [r7, #16]

	if(turn_amount < 0) {
 8000fc2:	edd7 7a05 	vldr	s15, [r7, #20]
 8000fc6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000fca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fce:	d40a      	bmi.n	8000fe6 <steerBoat+0x5a>
//		Turn Right
//		setMotorSpeed(ms_right, ms_left);
	} else if(turn_amount > 0) {
 8000fd0:	edd7 7a05 	vldr	s15, [r7, #20]
 8000fd4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000fd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fdc:	dc03      	bgt.n	8000fe6 <steerBoat+0x5a>
//		Turn Left
//		setMotorSpeed(ms_right, ms_left);
	} else {
		setMotorSpeed(255, 255);
 8000fde:	21ff      	movs	r1, #255	; 0xff
 8000fe0:	20ff      	movs	r0, #255	; 0xff
 8000fe2:	f7ff fefd 	bl	8000de0 <setMotorSpeed>
	}
}
 8000fe6:	bf00      	nop
 8000fe8:	3718      	adds	r7, #24
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
	...

08000ff0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b08a      	sub	sp, #40	; 0x28
 8000ff4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ff6:	f000 fdbf 	bl	8001b78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ffa:	f000 f8e1 	bl	80011c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ffe:	f000 fb05 	bl	800160c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001002:	f000 fad3 	bl	80015ac <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001006:	f000 f99f 	bl	8001348 <MX_TIM1_Init>
  MX_ADC1_Init();
 800100a:	f000 f92d 	bl	8001268 <MX_ADC1_Init>
  MX_TIM17_Init();
 800100e:	f000 fa53 	bl	80014b8 <MX_TIM17_Init>

  uint8_t powerBtnState;

  float left_dist, front_dist, right_dist;

  uint16_t ir_left = 0;
 8001012:	2300      	movs	r3, #0
 8001014:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t ir_front = 0;
 8001016:	2300      	movs	r3, #0
 8001018:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint16_t ir_right = 0;
 800101a:	2300      	movs	r3, #0
 800101c:	847b      	strh	r3, [r7, #34]	; 0x22

  float left_stored_dist = 0;
 800101e:	f04f 0300 	mov.w	r3, #0
 8001022:	61fb      	str	r3, [r7, #28]
  float right_stored_dist = 0;
 8001024:	f04f 0300 	mov.w	r3, #0
 8001028:	61bb      	str	r3, [r7, #24]

  HAL_TIM_Base_Start(&htim1);
 800102a:	4861      	ldr	r0, [pc, #388]	; (80011b0 <main+0x1c0>)
 800102c:	f003 fbf8 	bl	8004820 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim17);
 8001030:	4860      	ldr	r0, [pc, #384]	; (80011b4 <main+0x1c4>)
 8001032:	f003 fbf5 	bl	8004820 <HAL_TIM_Base_Start>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001036:	2100      	movs	r1, #0
 8001038:	485d      	ldr	r0, [pc, #372]	; (80011b0 <main+0x1c0>)
 800103a:	f003 fca7 	bl	800498c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800103e:	2104      	movs	r1, #4
 8001040:	485b      	ldr	r0, [pc, #364]	; (80011b0 <main+0x1c0>)
 8001042:	f003 fca3 	bl	800498c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 8001046:	2100      	movs	r1, #0
 8001048:	485a      	ldr	r0, [pc, #360]	; (80011b4 <main+0x1c4>)
 800104a:	f003 fc9f 	bl	800498c <HAL_TIM_PWM_Start>

  powerBtnState = HAL_GPIO_ReadPin(POWER_BTN_GPIO_Port, POWER_BTN_Pin);
 800104e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001052:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001056:	f001 ffc1 	bl	8002fdc <HAL_GPIO_ReadPin>
 800105a:	4603      	mov	r3, r0
 800105c:	74fb      	strb	r3, [r7, #19]
  setInitialState(powerBtnState);
 800105e:	7cfb      	ldrb	r3, [r7, #19]
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff fea9 	bl	8000db8 <setInitialState>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		powerBtnState = HAL_GPIO_ReadPin(POWER_BTN_GPIO_Port, POWER_BTN_Pin);
 8001066:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800106a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800106e:	f001 ffb5 	bl	8002fdc <HAL_GPIO_ReadPin>
 8001072:	4603      	mov	r3, r0
 8001074:	74fb      	strb	r3, [r7, #19]

		if (togglePowerBtn(powerBtnState) == 1) {
 8001076:	7cfb      	ldrb	r3, [r7, #19]
 8001078:	4618      	mov	r0, r3
 800107a:	f7ff fe3b 	bl	8000cf4 <togglePowerBtn>
 800107e:	4603      	mov	r3, r0
 8001080:	2b01      	cmp	r3, #1
 8001082:	f040 8090 	bne.w	80011a6 <main+0x1b6>
			// Average out readings from sensor to get more accurate data
			for(int i = 0; i < 3; i++) {
 8001086:	2300      	movs	r3, #0
 8001088:	617b      	str	r3, [r7, #20]
 800108a:	e01d      	b.n	80010c8 <main+0xd8>
				ir_left += ADC_Read(&hadc1, ADC_CHANNEL_1);
 800108c:	2101      	movs	r1, #1
 800108e:	484a      	ldr	r0, [pc, #296]	; (80011b8 <main+0x1c8>)
 8001090:	f7ff fe70 	bl	8000d74 <ADC_Read>
 8001094:	4603      	mov	r3, r0
 8001096:	461a      	mov	r2, r3
 8001098:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800109a:	4413      	add	r3, r2
 800109c:	84fb      	strh	r3, [r7, #38]	; 0x26
				ir_front += ADC_Read(&hadc1, ADC_CHANNEL_2);
 800109e:	2102      	movs	r1, #2
 80010a0:	4845      	ldr	r0, [pc, #276]	; (80011b8 <main+0x1c8>)
 80010a2:	f7ff fe67 	bl	8000d74 <ADC_Read>
 80010a6:	4603      	mov	r3, r0
 80010a8:	461a      	mov	r2, r3
 80010aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80010ac:	4413      	add	r3, r2
 80010ae:	84bb      	strh	r3, [r7, #36]	; 0x24
				ir_right += ADC_Read(&hadc1, ADC_CHANNEL_4);
 80010b0:	2104      	movs	r1, #4
 80010b2:	4841      	ldr	r0, [pc, #260]	; (80011b8 <main+0x1c8>)
 80010b4:	f7ff fe5e 	bl	8000d74 <ADC_Read>
 80010b8:	4603      	mov	r3, r0
 80010ba:	461a      	mov	r2, r3
 80010bc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80010be:	4413      	add	r3, r2
 80010c0:	847b      	strh	r3, [r7, #34]	; 0x22
			for(int i = 0; i < 3; i++) {
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	3301      	adds	r3, #1
 80010c6:	617b      	str	r3, [r7, #20]
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	2b02      	cmp	r3, #2
 80010cc:	ddde      	ble.n	800108c <main+0x9c>
			}

			// Get distance in cm for all three sensors
			left_dist = getDistance(ir_left / 3);
 80010ce:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80010d0:	4a3a      	ldr	r2, [pc, #232]	; (80011bc <main+0x1cc>)
 80010d2:	fba2 2303 	umull	r2, r3, r2, r3
 80010d6:	085b      	lsrs	r3, r3, #1
 80010d8:	b29b      	uxth	r3, r3
 80010da:	ee07 3a90 	vmov	s15, r3
 80010de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010e2:	eeb0 0a67 	vmov.f32	s0, s15
 80010e6:	f7ff fee3 	bl	8000eb0 <getDistance>
 80010ea:	ed87 0a03 	vstr	s0, [r7, #12]
			front_dist = getDistance(ir_front / 3);
 80010ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80010f0:	4a32      	ldr	r2, [pc, #200]	; (80011bc <main+0x1cc>)
 80010f2:	fba2 2303 	umull	r2, r3, r2, r3
 80010f6:	085b      	lsrs	r3, r3, #1
 80010f8:	b29b      	uxth	r3, r3
 80010fa:	ee07 3a90 	vmov	s15, r3
 80010fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001102:	eeb0 0a67 	vmov.f32	s0, s15
 8001106:	f7ff fed3 	bl	8000eb0 <getDistance>
 800110a:	ed87 0a02 	vstr	s0, [r7, #8]
			right_dist = getDistance(ir_right / 3);
 800110e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001110:	4a2a      	ldr	r2, [pc, #168]	; (80011bc <main+0x1cc>)
 8001112:	fba2 2303 	umull	r2, r3, r2, r3
 8001116:	085b      	lsrs	r3, r3, #1
 8001118:	b29b      	uxth	r3, r3
 800111a:	ee07 3a90 	vmov	s15, r3
 800111e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001122:	eeb0 0a67 	vmov.f32	s0, s15
 8001126:	f7ff fec3 	bl	8000eb0 <getDistance>
 800112a:	ed87 0a01 	vstr	s0, [r7, #4]

			// Store distance values to know which turn position to favor
			if(left_stored_dist > 0 && right_stored_dist > 0) {
 800112e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001132:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800113a:	dd27      	ble.n	800118c <main+0x19c>
 800113c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001140:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001148:	dd20      	ble.n	800118c <main+0x19c>
				left_stored_dist += left_dist;
 800114a:	ed97 7a07 	vldr	s14, [r7, #28]
 800114e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001152:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001156:	edc7 7a07 	vstr	s15, [r7, #28]
				right_stored_dist += right_dist;
 800115a:	ed97 7a06 	vldr	s14, [r7, #24]
 800115e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001162:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001166:	edc7 7a06 	vstr	s15, [r7, #24]

				left_stored_dist /= 2;
 800116a:	ed97 7a07 	vldr	s14, [r7, #28]
 800116e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001172:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001176:	edc7 7a07 	vstr	s15, [r7, #28]
				right_stored_dist /= 2;
 800117a:	ed97 7a06 	vldr	s14, [r7, #24]
 800117e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001182:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001186:	edc7 7a06 	vstr	s15, [r7, #24]
 800118a:	e003      	b.n	8001194 <main+0x1a4>
			} else {
				left_stored_dist = left_dist;
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	61fb      	str	r3, [r7, #28]
				right_stored_dist = right_dist;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	61bb      	str	r3, [r7, #24]
			}

			// Base Steering
			steerBoat(left_dist, front_dist, right_dist);
 8001194:	ed97 1a01 	vldr	s2, [r7, #4]
 8001198:	edd7 0a02 	vldr	s1, [r7, #8]
 800119c:	ed97 0a03 	vldr	s0, [r7, #12]
 80011a0:	f7ff fef4 	bl	8000f8c <steerBoat>
 80011a4:	e75f      	b.n	8001066 <main+0x76>

		} else {
			setMotorSpeed(0, 0);
 80011a6:	2100      	movs	r1, #0
 80011a8:	2000      	movs	r0, #0
 80011aa:	f7ff fe19 	bl	8000de0 <setMotorSpeed>
		powerBtnState = HAL_GPIO_ReadPin(POWER_BTN_GPIO_Port, POWER_BTN_Pin);
 80011ae:	e75a      	b.n	8001066 <main+0x76>
 80011b0:	2000024c 	.word	0x2000024c
 80011b4:	20000298 	.word	0x20000298
 80011b8:	200001fc 	.word	0x200001fc
 80011bc:	aaaaaaab 	.word	0xaaaaaaab

080011c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b096      	sub	sp, #88	; 0x58
 80011c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011c6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011ca:	2228      	movs	r2, #40	; 0x28
 80011cc:	2100      	movs	r1, #0
 80011ce:	4618      	mov	r0, r3
 80011d0:	f004 fec8 	bl	8005f64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011d4:	f107 031c 	add.w	r3, r7, #28
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	605a      	str	r2, [r3, #4]
 80011de:	609a      	str	r2, [r3, #8]
 80011e0:	60da      	str	r2, [r3, #12]
 80011e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011e4:	1d3b      	adds	r3, r7, #4
 80011e6:	2200      	movs	r2, #0
 80011e8:	601a      	str	r2, [r3, #0]
 80011ea:	605a      	str	r2, [r3, #4]
 80011ec:	609a      	str	r2, [r3, #8]
 80011ee:	60da      	str	r2, [r3, #12]
 80011f0:	611a      	str	r2, [r3, #16]
 80011f2:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011f4:	2302      	movs	r3, #2
 80011f6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011f8:	2301      	movs	r3, #1
 80011fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011fc:	2310      	movs	r3, #16
 80011fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001200:	2300      	movs	r3, #0
 8001202:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001204:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001208:	4618      	mov	r0, r3
 800120a:	f001 ff17 	bl	800303c <HAL_RCC_OscConfig>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001214:	f000 fa48 	bl	80016a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001218:	230f      	movs	r3, #15
 800121a:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800121c:	2300      	movs	r3, #0
 800121e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001220:	2300      	movs	r3, #0
 8001222:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001224:	2300      	movs	r3, #0
 8001226:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001228:	2300      	movs	r3, #0
 800122a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800122c:	f107 031c 	add.w	r3, r7, #28
 8001230:	2100      	movs	r1, #0
 8001232:	4618      	mov	r0, r3
 8001234:	f002 ff40 	bl	80040b8 <HAL_RCC_ClockConfig>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800123e:	f000 fa33 	bl	80016a8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8001242:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001246:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8001248:	2300      	movs	r3, #0
 800124a:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800124c:	1d3b      	adds	r3, r7, #4
 800124e:	4618      	mov	r0, r3
 8001250:	f003 f968 	bl	8004524 <HAL_RCCEx_PeriphCLKConfig>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800125a:	f000 fa25 	bl	80016a8 <Error_Handler>
  }
}
 800125e:	bf00      	nop
 8001260:	3758      	adds	r7, #88	; 0x58
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
	...

08001268 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b08a      	sub	sp, #40	; 0x28
 800126c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800126e:	f107 031c 	add.w	r3, r7, #28
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	605a      	str	r2, [r3, #4]
 8001278:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800127a:	1d3b      	adds	r3, r7, #4
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	605a      	str	r2, [r3, #4]
 8001282:	609a      	str	r2, [r3, #8]
 8001284:	60da      	str	r2, [r3, #12]
 8001286:	611a      	str	r2, [r3, #16]
 8001288:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800128a:	4b2e      	ldr	r3, [pc, #184]	; (8001344 <MX_ADC1_Init+0xdc>)
 800128c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001290:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8001292:	4b2c      	ldr	r3, [pc, #176]	; (8001344 <MX_ADC1_Init+0xdc>)
 8001294:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001298:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800129a:	4b2a      	ldr	r3, [pc, #168]	; (8001344 <MX_ADC1_Init+0xdc>)
 800129c:	2200      	movs	r2, #0
 800129e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80012a0:	4b28      	ldr	r3, [pc, #160]	; (8001344 <MX_ADC1_Init+0xdc>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80012a6:	4b27      	ldr	r3, [pc, #156]	; (8001344 <MX_ADC1_Init+0xdc>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012ac:	4b25      	ldr	r3, [pc, #148]	; (8001344 <MX_ADC1_Init+0xdc>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012b4:	4b23      	ldr	r3, [pc, #140]	; (8001344 <MX_ADC1_Init+0xdc>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012ba:	4b22      	ldr	r3, [pc, #136]	; (8001344 <MX_ADC1_Init+0xdc>)
 80012bc:	2201      	movs	r2, #1
 80012be:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012c0:	4b20      	ldr	r3, [pc, #128]	; (8001344 <MX_ADC1_Init+0xdc>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80012c6:	4b1f      	ldr	r3, [pc, #124]	; (8001344 <MX_ADC1_Init+0xdc>)
 80012c8:	2201      	movs	r2, #1
 80012ca:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80012cc:	4b1d      	ldr	r3, [pc, #116]	; (8001344 <MX_ADC1_Init+0xdc>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012d4:	4b1b      	ldr	r3, [pc, #108]	; (8001344 <MX_ADC1_Init+0xdc>)
 80012d6:	2204      	movs	r2, #4
 80012d8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80012da:	4b1a      	ldr	r3, [pc, #104]	; (8001344 <MX_ADC1_Init+0xdc>)
 80012dc:	2200      	movs	r2, #0
 80012de:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80012e0:	4b18      	ldr	r3, [pc, #96]	; (8001344 <MX_ADC1_Init+0xdc>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012e6:	4817      	ldr	r0, [pc, #92]	; (8001344 <MX_ADC1_Init+0xdc>)
 80012e8:	f000 fcac 	bl	8001c44 <HAL_ADC_Init>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80012f2:	f000 f9d9 	bl	80016a8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80012f6:	2300      	movs	r3, #0
 80012f8:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80012fa:	f107 031c 	add.w	r3, r7, #28
 80012fe:	4619      	mov	r1, r3
 8001300:	4810      	ldr	r0, [pc, #64]	; (8001344 <MX_ADC1_Init+0xdc>)
 8001302:	f001 fa83 	bl	800280c <HAL_ADCEx_MultiModeConfigChannel>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 800130c:	f000 f9cc 	bl	80016a8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001310:	2301      	movs	r3, #1
 8001312:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001314:	2301      	movs	r3, #1
 8001316:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001318:	2300      	movs	r3, #0
 800131a:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800131c:	2300      	movs	r3, #0
 800131e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001320:	2300      	movs	r3, #0
 8001322:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001324:	2300      	movs	r3, #0
 8001326:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001328:	1d3b      	adds	r3, r7, #4
 800132a:	4619      	mov	r1, r3
 800132c:	4805      	ldr	r0, [pc, #20]	; (8001344 <MX_ADC1_Init+0xdc>)
 800132e:	f000 ffad 	bl	800228c <HAL_ADC_ConfigChannel>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 8001338:	f000 f9b6 	bl	80016a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800133c:	bf00      	nop
 800133e:	3728      	adds	r7, #40	; 0x28
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	200001fc 	.word	0x200001fc

08001348 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b09a      	sub	sp, #104	; 0x68
 800134c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800134e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]
 8001356:	605a      	str	r2, [r3, #4]
 8001358:	609a      	str	r2, [r3, #8]
 800135a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800135c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	605a      	str	r2, [r3, #4]
 8001366:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001368:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	605a      	str	r2, [r3, #4]
 8001372:	609a      	str	r2, [r3, #8]
 8001374:	60da      	str	r2, [r3, #12]
 8001376:	611a      	str	r2, [r3, #16]
 8001378:	615a      	str	r2, [r3, #20]
 800137a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800137c:	1d3b      	adds	r3, r7, #4
 800137e:	222c      	movs	r2, #44	; 0x2c
 8001380:	2100      	movs	r1, #0
 8001382:	4618      	mov	r0, r3
 8001384:	f004 fdee 	bl	8005f64 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001388:	4b49      	ldr	r3, [pc, #292]	; (80014b0 <MX_TIM1_Init+0x168>)
 800138a:	4a4a      	ldr	r2, [pc, #296]	; (80014b4 <MX_TIM1_Init+0x16c>)
 800138c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 625-1;
 800138e:	4b48      	ldr	r3, [pc, #288]	; (80014b0 <MX_TIM1_Init+0x168>)
 8001390:	f44f 721c 	mov.w	r2, #624	; 0x270
 8001394:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001396:	4b46      	ldr	r3, [pc, #280]	; (80014b0 <MX_TIM1_Init+0x168>)
 8001398:	2200      	movs	r2, #0
 800139a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 256-1;
 800139c:	4b44      	ldr	r3, [pc, #272]	; (80014b0 <MX_TIM1_Init+0x168>)
 800139e:	22ff      	movs	r2, #255	; 0xff
 80013a0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013a2:	4b43      	ldr	r3, [pc, #268]	; (80014b0 <MX_TIM1_Init+0x168>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013a8:	4b41      	ldr	r3, [pc, #260]	; (80014b0 <MX_TIM1_Init+0x168>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80013ae:	4b40      	ldr	r3, [pc, #256]	; (80014b0 <MX_TIM1_Init+0x168>)
 80013b0:	2280      	movs	r2, #128	; 0x80
 80013b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80013b4:	483e      	ldr	r0, [pc, #248]	; (80014b0 <MX_TIM1_Init+0x168>)
 80013b6:	f003 f9db 	bl	8004770 <HAL_TIM_Base_Init>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80013c0:	f000 f972 	bl	80016a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013c8:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80013ca:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80013ce:	4619      	mov	r1, r3
 80013d0:	4837      	ldr	r0, [pc, #220]	; (80014b0 <MX_TIM1_Init+0x168>)
 80013d2:	f003 fcdb 	bl	8004d8c <HAL_TIM_ConfigClockSource>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80013dc:	f000 f964 	bl	80016a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80013e0:	4833      	ldr	r0, [pc, #204]	; (80014b0 <MX_TIM1_Init+0x168>)
 80013e2:	f003 fa71 	bl	80048c8 <HAL_TIM_PWM_Init>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80013ec:	f000 f95c 	bl	80016a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013f0:	2300      	movs	r3, #0
 80013f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80013f4:	2300      	movs	r3, #0
 80013f6:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013f8:	2300      	movs	r3, #0
 80013fa:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013fc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001400:	4619      	mov	r1, r3
 8001402:	482b      	ldr	r0, [pc, #172]	; (80014b0 <MX_TIM1_Init+0x168>)
 8001404:	f004 f96a 	bl	80056dc <HAL_TIMEx_MasterConfigSynchronization>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800140e:	f000 f94b 	bl	80016a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001412:	2360      	movs	r3, #96	; 0x60
 8001414:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001416:	2300      	movs	r3, #0
 8001418:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800141a:	2300      	movs	r3, #0
 800141c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800141e:	2300      	movs	r3, #0
 8001420:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001422:	2300      	movs	r3, #0
 8001424:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001426:	2300      	movs	r3, #0
 8001428:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800142a:	2300      	movs	r3, #0
 800142c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800142e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001432:	2200      	movs	r2, #0
 8001434:	4619      	mov	r1, r3
 8001436:	481e      	ldr	r0, [pc, #120]	; (80014b0 <MX_TIM1_Init+0x168>)
 8001438:	f003 fb94 	bl	8004b64 <HAL_TIM_PWM_ConfigChannel>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001442:	f000 f931 	bl	80016a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001446:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800144a:	2204      	movs	r2, #4
 800144c:	4619      	mov	r1, r3
 800144e:	4818      	ldr	r0, [pc, #96]	; (80014b0 <MX_TIM1_Init+0x168>)
 8001450:	f003 fb88 	bl	8004b64 <HAL_TIM_PWM_ConfigChannel>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800145a:	f000 f925 	bl	80016a8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800145e:	2300      	movs	r3, #0
 8001460:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001462:	2300      	movs	r3, #0
 8001464:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001466:	2300      	movs	r3, #0
 8001468:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800146a:	2300      	movs	r3, #0
 800146c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800146e:	2300      	movs	r3, #0
 8001470:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001472:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001476:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001478:	2300      	movs	r3, #0
 800147a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800147c:	2300      	movs	r3, #0
 800147e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001480:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001484:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001486:	2300      	movs	r3, #0
 8001488:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800148a:	2300      	movs	r3, #0
 800148c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800148e:	1d3b      	adds	r3, r7, #4
 8001490:	4619      	mov	r1, r3
 8001492:	4807      	ldr	r0, [pc, #28]	; (80014b0 <MX_TIM1_Init+0x168>)
 8001494:	f004 f990 	bl	80057b8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 800149e:	f000 f903 	bl	80016a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80014a2:	4803      	ldr	r0, [pc, #12]	; (80014b0 <MX_TIM1_Init+0x168>)
 80014a4:	f000 f99a 	bl	80017dc <HAL_TIM_MspPostInit>

}
 80014a8:	bf00      	nop
 80014aa:	3768      	adds	r7, #104	; 0x68
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	2000024c 	.word	0x2000024c
 80014b4:	40012c00 	.word	0x40012c00

080014b8 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b092      	sub	sp, #72	; 0x48
 80014bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80014be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014c2:	2200      	movs	r2, #0
 80014c4:	601a      	str	r2, [r3, #0]
 80014c6:	605a      	str	r2, [r3, #4]
 80014c8:	609a      	str	r2, [r3, #8]
 80014ca:	60da      	str	r2, [r3, #12]
 80014cc:	611a      	str	r2, [r3, #16]
 80014ce:	615a      	str	r2, [r3, #20]
 80014d0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014d2:	463b      	mov	r3, r7
 80014d4:	222c      	movs	r2, #44	; 0x2c
 80014d6:	2100      	movs	r1, #0
 80014d8:	4618      	mov	r0, r3
 80014da:	f004 fd43 	bl	8005f64 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80014de:	4b31      	ldr	r3, [pc, #196]	; (80015a4 <MX_TIM17_Init+0xec>)
 80014e0:	4a31      	ldr	r2, [pc, #196]	; (80015a8 <MX_TIM17_Init+0xf0>)
 80014e2:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 8-1;
 80014e4:	4b2f      	ldr	r3, [pc, #188]	; (80015a4 <MX_TIM17_Init+0xec>)
 80014e6:	2207      	movs	r2, #7
 80014e8:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ea:	4b2e      	ldr	r3, [pc, #184]	; (80015a4 <MX_TIM17_Init+0xec>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 20000-1;
 80014f0:	4b2c      	ldr	r3, [pc, #176]	; (80015a4 <MX_TIM17_Init+0xec>)
 80014f2:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80014f6:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014f8:	4b2a      	ldr	r3, [pc, #168]	; (80015a4 <MX_TIM17_Init+0xec>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80014fe:	4b29      	ldr	r3, [pc, #164]	; (80015a4 <MX_TIM17_Init+0xec>)
 8001500:	2200      	movs	r2, #0
 8001502:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001504:	4b27      	ldr	r3, [pc, #156]	; (80015a4 <MX_TIM17_Init+0xec>)
 8001506:	2280      	movs	r2, #128	; 0x80
 8001508:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800150a:	4826      	ldr	r0, [pc, #152]	; (80015a4 <MX_TIM17_Init+0xec>)
 800150c:	f003 f930 	bl	8004770 <HAL_TIM_Base_Init>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8001516:	f000 f8c7 	bl	80016a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 800151a:	4822      	ldr	r0, [pc, #136]	; (80015a4 <MX_TIM17_Init+0xec>)
 800151c:	f003 f9d4 	bl	80048c8 <HAL_TIM_PWM_Init>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8001526:	f000 f8bf 	bl	80016a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800152a:	2360      	movs	r3, #96	; 0x60
 800152c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 800152e:	2300      	movs	r3, #0
 8001530:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001532:	2300      	movs	r3, #0
 8001534:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001536:	2300      	movs	r3, #0
 8001538:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800153a:	2300      	movs	r3, #0
 800153c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800153e:	2300      	movs	r3, #0
 8001540:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001542:	2300      	movs	r3, #0
 8001544:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001546:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800154a:	2200      	movs	r2, #0
 800154c:	4619      	mov	r1, r3
 800154e:	4815      	ldr	r0, [pc, #84]	; (80015a4 <MX_TIM17_Init+0xec>)
 8001550:	f003 fb08 	bl	8004b64 <HAL_TIM_PWM_ConfigChannel>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 800155a:	f000 f8a5 	bl	80016a8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800155e:	2300      	movs	r3, #0
 8001560:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001562:	2300      	movs	r3, #0
 8001564:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001566:	2300      	movs	r3, #0
 8001568:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800156a:	2300      	movs	r3, #0
 800156c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800156e:	2300      	movs	r3, #0
 8001570:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001572:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001576:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001578:	2300      	movs	r3, #0
 800157a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800157c:	2300      	movs	r3, #0
 800157e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8001580:	463b      	mov	r3, r7
 8001582:	4619      	mov	r1, r3
 8001584:	4807      	ldr	r0, [pc, #28]	; (80015a4 <MX_TIM17_Init+0xec>)
 8001586:	f004 f917 	bl	80057b8 <HAL_TIMEx_ConfigBreakDeadTime>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 8001590:	f000 f88a 	bl	80016a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8001594:	4803      	ldr	r0, [pc, #12]	; (80015a4 <MX_TIM17_Init+0xec>)
 8001596:	f000 f921 	bl	80017dc <HAL_TIM_MspPostInit>

}
 800159a:	bf00      	nop
 800159c:	3748      	adds	r7, #72	; 0x48
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	20000298 	.word	0x20000298
 80015a8:	40014800 	.word	0x40014800

080015ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015b0:	4b14      	ldr	r3, [pc, #80]	; (8001604 <MX_USART2_UART_Init+0x58>)
 80015b2:	4a15      	ldr	r2, [pc, #84]	; (8001608 <MX_USART2_UART_Init+0x5c>)
 80015b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80015b6:	4b13      	ldr	r3, [pc, #76]	; (8001604 <MX_USART2_UART_Init+0x58>)
 80015b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015be:	4b11      	ldr	r3, [pc, #68]	; (8001604 <MX_USART2_UART_Init+0x58>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015c4:	4b0f      	ldr	r3, [pc, #60]	; (8001604 <MX_USART2_UART_Init+0x58>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015ca:	4b0e      	ldr	r3, [pc, #56]	; (8001604 <MX_USART2_UART_Init+0x58>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015d0:	4b0c      	ldr	r3, [pc, #48]	; (8001604 <MX_USART2_UART_Init+0x58>)
 80015d2:	220c      	movs	r2, #12
 80015d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015d6:	4b0b      	ldr	r3, [pc, #44]	; (8001604 <MX_USART2_UART_Init+0x58>)
 80015d8:	2200      	movs	r2, #0
 80015da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015dc:	4b09      	ldr	r3, [pc, #36]	; (8001604 <MX_USART2_UART_Init+0x58>)
 80015de:	2200      	movs	r2, #0
 80015e0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015e2:	4b08      	ldr	r3, [pc, #32]	; (8001604 <MX_USART2_UART_Init+0x58>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015e8:	4b06      	ldr	r3, [pc, #24]	; (8001604 <MX_USART2_UART_Init+0x58>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015ee:	4805      	ldr	r0, [pc, #20]	; (8001604 <MX_USART2_UART_Init+0x58>)
 80015f0:	f004 f95a 	bl	80058a8 <HAL_UART_Init>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80015fa:	f000 f855 	bl	80016a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015fe:	bf00      	nop
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	200002e4 	.word	0x200002e4
 8001608:	40004400 	.word	0x40004400

0800160c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b088      	sub	sp, #32
 8001610:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001612:	f107 030c 	add.w	r3, r7, #12
 8001616:	2200      	movs	r2, #0
 8001618:	601a      	str	r2, [r3, #0]
 800161a:	605a      	str	r2, [r3, #4]
 800161c:	609a      	str	r2, [r3, #8]
 800161e:	60da      	str	r2, [r3, #12]
 8001620:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001622:	4b20      	ldr	r3, [pc, #128]	; (80016a4 <MX_GPIO_Init+0x98>)
 8001624:	695b      	ldr	r3, [r3, #20]
 8001626:	4a1f      	ldr	r2, [pc, #124]	; (80016a4 <MX_GPIO_Init+0x98>)
 8001628:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800162c:	6153      	str	r3, [r2, #20]
 800162e:	4b1d      	ldr	r3, [pc, #116]	; (80016a4 <MX_GPIO_Init+0x98>)
 8001630:	695b      	ldr	r3, [r3, #20]
 8001632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001636:	60bb      	str	r3, [r7, #8]
 8001638:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800163a:	4b1a      	ldr	r3, [pc, #104]	; (80016a4 <MX_GPIO_Init+0x98>)
 800163c:	695b      	ldr	r3, [r3, #20]
 800163e:	4a19      	ldr	r2, [pc, #100]	; (80016a4 <MX_GPIO_Init+0x98>)
 8001640:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001644:	6153      	str	r3, [r2, #20]
 8001646:	4b17      	ldr	r3, [pc, #92]	; (80016a4 <MX_GPIO_Init+0x98>)
 8001648:	695b      	ldr	r3, [r3, #20]
 800164a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800164e:	607b      	str	r3, [r7, #4]
 8001650:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RIGHT_DM_PHASE_Pin|LEFT_DM_PHASE_Pin, GPIO_PIN_RESET);
 8001652:	2200      	movs	r2, #0
 8001654:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8001658:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800165c:	f001 fcd6 	bl	800300c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RIGHT_DM_PHASE_Pin LEFT_DM_PHASE_Pin */
  GPIO_InitStruct.Pin = RIGHT_DM_PHASE_Pin|LEFT_DM_PHASE_Pin;
 8001660:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001664:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001666:	2301      	movs	r3, #1
 8001668:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166a:	2300      	movs	r3, #0
 800166c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800166e:	2300      	movs	r3, #0
 8001670:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001672:	f107 030c 	add.w	r3, r7, #12
 8001676:	4619      	mov	r1, r3
 8001678:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800167c:	f001 fb3c 	bl	8002cf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : POWER_BTN_Pin */
  GPIO_InitStruct.Pin = POWER_BTN_Pin;
 8001680:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001684:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001686:	2300      	movs	r3, #0
 8001688:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800168a:	2302      	movs	r3, #2
 800168c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(POWER_BTN_GPIO_Port, &GPIO_InitStruct);
 800168e:	f107 030c 	add.w	r3, r7, #12
 8001692:	4619      	mov	r1, r3
 8001694:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001698:	f001 fb2e 	bl	8002cf8 <HAL_GPIO_Init>

}
 800169c:	bf00      	nop
 800169e:	3720      	adds	r7, #32
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	40021000 	.word	0x40021000

080016a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016ac:	b672      	cpsid	i
}
 80016ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016b0:	e7fe      	b.n	80016b0 <Error_Handler+0x8>
	...

080016b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ba:	4b0f      	ldr	r3, [pc, #60]	; (80016f8 <HAL_MspInit+0x44>)
 80016bc:	699b      	ldr	r3, [r3, #24]
 80016be:	4a0e      	ldr	r2, [pc, #56]	; (80016f8 <HAL_MspInit+0x44>)
 80016c0:	f043 0301 	orr.w	r3, r3, #1
 80016c4:	6193      	str	r3, [r2, #24]
 80016c6:	4b0c      	ldr	r3, [pc, #48]	; (80016f8 <HAL_MspInit+0x44>)
 80016c8:	699b      	ldr	r3, [r3, #24]
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	607b      	str	r3, [r7, #4]
 80016d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016d2:	4b09      	ldr	r3, [pc, #36]	; (80016f8 <HAL_MspInit+0x44>)
 80016d4:	69db      	ldr	r3, [r3, #28]
 80016d6:	4a08      	ldr	r2, [pc, #32]	; (80016f8 <HAL_MspInit+0x44>)
 80016d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016dc:	61d3      	str	r3, [r2, #28]
 80016de:	4b06      	ldr	r3, [pc, #24]	; (80016f8 <HAL_MspInit+0x44>)
 80016e0:	69db      	ldr	r3, [r3, #28]
 80016e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016e6:	603b      	str	r3, [r7, #0]
 80016e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016ea:	bf00      	nop
 80016ec:	370c      	adds	r7, #12
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	40021000 	.word	0x40021000

080016fc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b08a      	sub	sp, #40	; 0x28
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001704:	f107 0314 	add.w	r3, r7, #20
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]
 800170c:	605a      	str	r2, [r3, #4]
 800170e:	609a      	str	r2, [r3, #8]
 8001710:	60da      	str	r2, [r3, #12]
 8001712:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800171c:	d124      	bne.n	8001768 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800171e:	4b14      	ldr	r3, [pc, #80]	; (8001770 <HAL_ADC_MspInit+0x74>)
 8001720:	695b      	ldr	r3, [r3, #20]
 8001722:	4a13      	ldr	r2, [pc, #76]	; (8001770 <HAL_ADC_MspInit+0x74>)
 8001724:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001728:	6153      	str	r3, [r2, #20]
 800172a:	4b11      	ldr	r3, [pc, #68]	; (8001770 <HAL_ADC_MspInit+0x74>)
 800172c:	695b      	ldr	r3, [r3, #20]
 800172e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001732:	613b      	str	r3, [r7, #16]
 8001734:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001736:	4b0e      	ldr	r3, [pc, #56]	; (8001770 <HAL_ADC_MspInit+0x74>)
 8001738:	695b      	ldr	r3, [r3, #20]
 800173a:	4a0d      	ldr	r2, [pc, #52]	; (8001770 <HAL_ADC_MspInit+0x74>)
 800173c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001740:	6153      	str	r3, [r2, #20]
 8001742:	4b0b      	ldr	r3, [pc, #44]	; (8001770 <HAL_ADC_MspInit+0x74>)
 8001744:	695b      	ldr	r3, [r3, #20]
 8001746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800174a:	60fb      	str	r3, [r7, #12]
 800174c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = IR_LEFT_Pin|IR_CENTER_Pin|IR_RIGHT_Pin;
 800174e:	230b      	movs	r3, #11
 8001750:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001752:	2303      	movs	r3, #3
 8001754:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001756:	2300      	movs	r3, #0
 8001758:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800175a:	f107 0314 	add.w	r3, r7, #20
 800175e:	4619      	mov	r1, r3
 8001760:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001764:	f001 fac8 	bl	8002cf8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001768:	bf00      	nop
 800176a:	3728      	adds	r7, #40	; 0x28
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	40021000 	.word	0x40021000

08001774 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001774:	b480      	push	{r7}
 8001776:	b085      	sub	sp, #20
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a13      	ldr	r2, [pc, #76]	; (80017d0 <HAL_TIM_Base_MspInit+0x5c>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d10c      	bne.n	80017a0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001786:	4b13      	ldr	r3, [pc, #76]	; (80017d4 <HAL_TIM_Base_MspInit+0x60>)
 8001788:	699b      	ldr	r3, [r3, #24]
 800178a:	4a12      	ldr	r2, [pc, #72]	; (80017d4 <HAL_TIM_Base_MspInit+0x60>)
 800178c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001790:	6193      	str	r3, [r2, #24]
 8001792:	4b10      	ldr	r3, [pc, #64]	; (80017d4 <HAL_TIM_Base_MspInit+0x60>)
 8001794:	699b      	ldr	r3, [r3, #24]
 8001796:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800179a:	60fb      	str	r3, [r7, #12]
 800179c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 800179e:	e010      	b.n	80017c2 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM17)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a0c      	ldr	r2, [pc, #48]	; (80017d8 <HAL_TIM_Base_MspInit+0x64>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d10b      	bne.n	80017c2 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80017aa:	4b0a      	ldr	r3, [pc, #40]	; (80017d4 <HAL_TIM_Base_MspInit+0x60>)
 80017ac:	699b      	ldr	r3, [r3, #24]
 80017ae:	4a09      	ldr	r2, [pc, #36]	; (80017d4 <HAL_TIM_Base_MspInit+0x60>)
 80017b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017b4:	6193      	str	r3, [r2, #24]
 80017b6:	4b07      	ldr	r3, [pc, #28]	; (80017d4 <HAL_TIM_Base_MspInit+0x60>)
 80017b8:	699b      	ldr	r3, [r3, #24]
 80017ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017be:	60bb      	str	r3, [r7, #8]
 80017c0:	68bb      	ldr	r3, [r7, #8]
}
 80017c2:	bf00      	nop
 80017c4:	3714      	adds	r7, #20
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	40012c00 	.word	0x40012c00
 80017d4:	40021000 	.word	0x40021000
 80017d8:	40014800 	.word	0x40014800

080017dc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b08a      	sub	sp, #40	; 0x28
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e4:	f107 0314 	add.w	r3, r7, #20
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	605a      	str	r2, [r3, #4]
 80017ee:	609a      	str	r2, [r3, #8]
 80017f0:	60da      	str	r2, [r3, #12]
 80017f2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a23      	ldr	r2, [pc, #140]	; (8001888 <HAL_TIM_MspPostInit+0xac>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d11e      	bne.n	800183c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017fe:	4b23      	ldr	r3, [pc, #140]	; (800188c <HAL_TIM_MspPostInit+0xb0>)
 8001800:	695b      	ldr	r3, [r3, #20]
 8001802:	4a22      	ldr	r2, [pc, #136]	; (800188c <HAL_TIM_MspPostInit+0xb0>)
 8001804:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001808:	6153      	str	r3, [r2, #20]
 800180a:	4b20      	ldr	r3, [pc, #128]	; (800188c <HAL_TIM_MspPostInit+0xb0>)
 800180c:	695b      	ldr	r3, [r3, #20]
 800180e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001812:	613b      	str	r3, [r7, #16]
 8001814:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = RIGHT_DM_ENBL_Pin|LEFT_DM_ENBL_Pin;
 8001816:	f44f 7340 	mov.w	r3, #768	; 0x300
 800181a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181c:	2302      	movs	r3, #2
 800181e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001820:	2300      	movs	r3, #0
 8001822:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001824:	2300      	movs	r3, #0
 8001826:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001828:	2306      	movs	r3, #6
 800182a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800182c:	f107 0314 	add.w	r3, r7, #20
 8001830:	4619      	mov	r1, r3
 8001832:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001836:	f001 fa5f 	bl	8002cf8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 800183a:	e020      	b.n	800187e <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM17)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a13      	ldr	r2, [pc, #76]	; (8001890 <HAL_TIM_MspPostInit+0xb4>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d11b      	bne.n	800187e <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001846:	4b11      	ldr	r3, [pc, #68]	; (800188c <HAL_TIM_MspPostInit+0xb0>)
 8001848:	695b      	ldr	r3, [r3, #20]
 800184a:	4a10      	ldr	r2, [pc, #64]	; (800188c <HAL_TIM_MspPostInit+0xb0>)
 800184c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001850:	6153      	str	r3, [r2, #20]
 8001852:	4b0e      	ldr	r3, [pc, #56]	; (800188c <HAL_TIM_MspPostInit+0xb0>)
 8001854:	695b      	ldr	r3, [r3, #20]
 8001856:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800185a:	60fb      	str	r3, [r7, #12]
 800185c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SERVO_MOTOR_Pin;
 800185e:	2320      	movs	r3, #32
 8001860:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001862:	2302      	movs	r3, #2
 8001864:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001866:	2300      	movs	r3, #0
 8001868:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800186a:	2300      	movs	r3, #0
 800186c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM17;
 800186e:	230a      	movs	r3, #10
 8001870:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SERVO_MOTOR_GPIO_Port, &GPIO_InitStruct);
 8001872:	f107 0314 	add.w	r3, r7, #20
 8001876:	4619      	mov	r1, r3
 8001878:	4806      	ldr	r0, [pc, #24]	; (8001894 <HAL_TIM_MspPostInit+0xb8>)
 800187a:	f001 fa3d 	bl	8002cf8 <HAL_GPIO_Init>
}
 800187e:	bf00      	nop
 8001880:	3728      	adds	r7, #40	; 0x28
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	40012c00 	.word	0x40012c00
 800188c:	40021000 	.word	0x40021000
 8001890:	40014800 	.word	0x40014800
 8001894:	48000400 	.word	0x48000400

08001898 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b08a      	sub	sp, #40	; 0x28
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a0:	f107 0314 	add.w	r3, r7, #20
 80018a4:	2200      	movs	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]
 80018a8:	605a      	str	r2, [r3, #4]
 80018aa:	609a      	str	r2, [r3, #8]
 80018ac:	60da      	str	r2, [r3, #12]
 80018ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a18      	ldr	r2, [pc, #96]	; (8001918 <HAL_UART_MspInit+0x80>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d129      	bne.n	800190e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80018ba:	4b18      	ldr	r3, [pc, #96]	; (800191c <HAL_UART_MspInit+0x84>)
 80018bc:	69db      	ldr	r3, [r3, #28]
 80018be:	4a17      	ldr	r2, [pc, #92]	; (800191c <HAL_UART_MspInit+0x84>)
 80018c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018c4:	61d3      	str	r3, [r2, #28]
 80018c6:	4b15      	ldr	r3, [pc, #84]	; (800191c <HAL_UART_MspInit+0x84>)
 80018c8:	69db      	ldr	r3, [r3, #28]
 80018ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ce:	613b      	str	r3, [r7, #16]
 80018d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d2:	4b12      	ldr	r3, [pc, #72]	; (800191c <HAL_UART_MspInit+0x84>)
 80018d4:	695b      	ldr	r3, [r3, #20]
 80018d6:	4a11      	ldr	r2, [pc, #68]	; (800191c <HAL_UART_MspInit+0x84>)
 80018d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018dc:	6153      	str	r3, [r2, #20]
 80018de:	4b0f      	ldr	r3, [pc, #60]	; (800191c <HAL_UART_MspInit+0x84>)
 80018e0:	695b      	ldr	r3, [r3, #20]
 80018e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e6:	60fb      	str	r3, [r7, #12]
 80018e8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80018ea:	f248 0304 	movw	r3, #32772	; 0x8004
 80018ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f0:	2302      	movs	r3, #2
 80018f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f4:	2300      	movs	r3, #0
 80018f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018f8:	2303      	movs	r3, #3
 80018fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018fc:	2307      	movs	r3, #7
 80018fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001900:	f107 0314 	add.w	r3, r7, #20
 8001904:	4619      	mov	r1, r3
 8001906:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800190a:	f001 f9f5 	bl	8002cf8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800190e:	bf00      	nop
 8001910:	3728      	adds	r7, #40	; 0x28
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	40004400 	.word	0x40004400
 800191c:	40021000 	.word	0x40021000

08001920 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001924:	e7fe      	b.n	8001924 <NMI_Handler+0x4>

08001926 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001926:	b480      	push	{r7}
 8001928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800192a:	e7fe      	b.n	800192a <HardFault_Handler+0x4>

0800192c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001930:	e7fe      	b.n	8001930 <MemManage_Handler+0x4>

08001932 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001932:	b480      	push	{r7}
 8001934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001936:	e7fe      	b.n	8001936 <BusFault_Handler+0x4>

08001938 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800193c:	e7fe      	b.n	800193c <UsageFault_Handler+0x4>

0800193e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800193e:	b480      	push	{r7}
 8001940:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001942:	bf00      	nop
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001950:	bf00      	nop
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr

0800195a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800195a:	b480      	push	{r7}
 800195c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800195e:	bf00      	nop
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800196c:	f000 f94a 	bl	8001c04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001970:	bf00      	nop
 8001972:	bd80      	pop	{r7, pc}

08001974 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
	return 1;
 8001978:	2301      	movs	r3, #1
}
 800197a:	4618      	mov	r0, r3
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr

08001984 <_kill>:

int _kill(int pid, int sig)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800198e:	f004 fabf 	bl	8005f10 <__errno>
 8001992:	4603      	mov	r3, r0
 8001994:	2216      	movs	r2, #22
 8001996:	601a      	str	r2, [r3, #0]
	return -1;
 8001998:	f04f 33ff 	mov.w	r3, #4294967295
}
 800199c:	4618      	mov	r0, r3
 800199e:	3708      	adds	r7, #8
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}

080019a4 <_exit>:

void _exit (int status)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80019ac:	f04f 31ff 	mov.w	r1, #4294967295
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f7ff ffe7 	bl	8001984 <_kill>
	while (1) {}		/* Make sure we hang here */
 80019b6:	e7fe      	b.n	80019b6 <_exit+0x12>

080019b8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b086      	sub	sp, #24
 80019bc:	af00      	add	r7, sp, #0
 80019be:	60f8      	str	r0, [r7, #12]
 80019c0:	60b9      	str	r1, [r7, #8]
 80019c2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019c4:	2300      	movs	r3, #0
 80019c6:	617b      	str	r3, [r7, #20]
 80019c8:	e00a      	b.n	80019e0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80019ca:	f3af 8000 	nop.w
 80019ce:	4601      	mov	r1, r0
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	1c5a      	adds	r2, r3, #1
 80019d4:	60ba      	str	r2, [r7, #8]
 80019d6:	b2ca      	uxtb	r2, r1
 80019d8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	3301      	adds	r3, #1
 80019de:	617b      	str	r3, [r7, #20]
 80019e0:	697a      	ldr	r2, [r7, #20]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	dbf0      	blt.n	80019ca <_read+0x12>
	}

return len;
 80019e8:	687b      	ldr	r3, [r7, #4]
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3718      	adds	r7, #24
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}

080019f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019f2:	b580      	push	{r7, lr}
 80019f4:	b086      	sub	sp, #24
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	60f8      	str	r0, [r7, #12]
 80019fa:	60b9      	str	r1, [r7, #8]
 80019fc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019fe:	2300      	movs	r3, #0
 8001a00:	617b      	str	r3, [r7, #20]
 8001a02:	e009      	b.n	8001a18 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	1c5a      	adds	r2, r3, #1
 8001a08:	60ba      	str	r2, [r7, #8]
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	3301      	adds	r3, #1
 8001a16:	617b      	str	r3, [r7, #20]
 8001a18:	697a      	ldr	r2, [r7, #20]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	dbf1      	blt.n	8001a04 <_write+0x12>
	}
	return len;
 8001a20:	687b      	ldr	r3, [r7, #4]
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3718      	adds	r7, #24
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}

08001a2a <_close>:

int _close(int file)
{
 8001a2a:	b480      	push	{r7}
 8001a2c:	b083      	sub	sp, #12
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	6078      	str	r0, [r7, #4]
	return -1;
 8001a32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	370c      	adds	r7, #12
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr

08001a42 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a42:	b480      	push	{r7}
 8001a44:	b083      	sub	sp, #12
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]
 8001a4a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a52:	605a      	str	r2, [r3, #4]
	return 0;
 8001a54:	2300      	movs	r3, #0
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr

08001a62 <_isatty>:

int _isatty(int file)
{
 8001a62:	b480      	push	{r7}
 8001a64:	b083      	sub	sp, #12
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
	return 1;
 8001a6a:	2301      	movs	r3, #1
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b085      	sub	sp, #20
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	60f8      	str	r0, [r7, #12]
 8001a80:	60b9      	str	r1, [r7, #8]
 8001a82:	607a      	str	r2, [r7, #4]
	return 0;
 8001a84:	2300      	movs	r3, #0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3714      	adds	r7, #20
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
	...

08001a94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b086      	sub	sp, #24
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a9c:	4a14      	ldr	r2, [pc, #80]	; (8001af0 <_sbrk+0x5c>)
 8001a9e:	4b15      	ldr	r3, [pc, #84]	; (8001af4 <_sbrk+0x60>)
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001aa8:	4b13      	ldr	r3, [pc, #76]	; (8001af8 <_sbrk+0x64>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d102      	bne.n	8001ab6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ab0:	4b11      	ldr	r3, [pc, #68]	; (8001af8 <_sbrk+0x64>)
 8001ab2:	4a12      	ldr	r2, [pc, #72]	; (8001afc <_sbrk+0x68>)
 8001ab4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ab6:	4b10      	ldr	r3, [pc, #64]	; (8001af8 <_sbrk+0x64>)
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4413      	add	r3, r2
 8001abe:	693a      	ldr	r2, [r7, #16]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d207      	bcs.n	8001ad4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ac4:	f004 fa24 	bl	8005f10 <__errno>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	220c      	movs	r2, #12
 8001acc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ace:	f04f 33ff 	mov.w	r3, #4294967295
 8001ad2:	e009      	b.n	8001ae8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ad4:	4b08      	ldr	r3, [pc, #32]	; (8001af8 <_sbrk+0x64>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ada:	4b07      	ldr	r3, [pc, #28]	; (8001af8 <_sbrk+0x64>)
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4413      	add	r3, r2
 8001ae2:	4a05      	ldr	r2, [pc, #20]	; (8001af8 <_sbrk+0x64>)
 8001ae4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3718      	adds	r7, #24
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	20003000 	.word	0x20003000
 8001af4:	00000400 	.word	0x00000400
 8001af8:	20000374 	.word	0x20000374
 8001afc:	20000390 	.word	0x20000390

08001b00 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b04:	4b06      	ldr	r3, [pc, #24]	; (8001b20 <SystemInit+0x20>)
 8001b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b0a:	4a05      	ldr	r2, [pc, #20]	; (8001b20 <SystemInit+0x20>)
 8001b0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b14:	bf00      	nop
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	e000ed00 	.word	0xe000ed00

08001b24 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001b24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b5c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b28:	480d      	ldr	r0, [pc, #52]	; (8001b60 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b2a:	490e      	ldr	r1, [pc, #56]	; (8001b64 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b2c:	4a0e      	ldr	r2, [pc, #56]	; (8001b68 <LoopForever+0xe>)
  movs r3, #0
 8001b2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b30:	e002      	b.n	8001b38 <LoopCopyDataInit>

08001b32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b36:	3304      	adds	r3, #4

08001b38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b3c:	d3f9      	bcc.n	8001b32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b3e:	4a0b      	ldr	r2, [pc, #44]	; (8001b6c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b40:	4c0b      	ldr	r4, [pc, #44]	; (8001b70 <LoopForever+0x16>)
  movs r3, #0
 8001b42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b44:	e001      	b.n	8001b4a <LoopFillZerobss>

08001b46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b48:	3204      	adds	r2, #4

08001b4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b4c:	d3fb      	bcc.n	8001b46 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001b4e:	f7ff ffd7 	bl	8001b00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b52:	f004 f9e3 	bl	8005f1c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b56:	f7ff fa4b 	bl	8000ff0 <main>

08001b5a <LoopForever>:

LoopForever:
    b LoopForever
 8001b5a:	e7fe      	b.n	8001b5a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001b5c:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001b60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b64:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001b68:	0800b59c 	.word	0x0800b59c
  ldr r2, =_sbss
 8001b6c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001b70:	2000038c 	.word	0x2000038c

08001b74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b74:	e7fe      	b.n	8001b74 <ADC1_2_IRQHandler>
	...

08001b78 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b7c:	4b08      	ldr	r3, [pc, #32]	; (8001ba0 <HAL_Init+0x28>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a07      	ldr	r2, [pc, #28]	; (8001ba0 <HAL_Init+0x28>)
 8001b82:	f043 0310 	orr.w	r3, r3, #16
 8001b86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b88:	2003      	movs	r0, #3
 8001b8a:	f001 f881 	bl	8002c90 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b8e:	2000      	movs	r0, #0
 8001b90:	f000 f808 	bl	8001ba4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b94:	f7ff fd8e 	bl	80016b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b98:	2300      	movs	r3, #0
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	40022000 	.word	0x40022000

08001ba4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bac:	4b12      	ldr	r3, [pc, #72]	; (8001bf8 <HAL_InitTick+0x54>)
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	4b12      	ldr	r3, [pc, #72]	; (8001bfc <HAL_InitTick+0x58>)
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bba:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f001 f88b 	bl	8002cde <HAL_SYSTICK_Config>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e00e      	b.n	8001bf0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2b0f      	cmp	r3, #15
 8001bd6:	d80a      	bhi.n	8001bee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bd8:	2200      	movs	r2, #0
 8001bda:	6879      	ldr	r1, [r7, #4]
 8001bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8001be0:	f001 f861 	bl	8002ca6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001be4:	4a06      	ldr	r2, [pc, #24]	; (8001c00 <HAL_InitTick+0x5c>)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001bea:	2300      	movs	r3, #0
 8001bec:	e000      	b.n	8001bf0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3708      	adds	r7, #8
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	20000000 	.word	0x20000000
 8001bfc:	20000008 	.word	0x20000008
 8001c00:	20000004 	.word	0x20000004

08001c04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c08:	4b06      	ldr	r3, [pc, #24]	; (8001c24 <HAL_IncTick+0x20>)
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	4b06      	ldr	r3, [pc, #24]	; (8001c28 <HAL_IncTick+0x24>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4413      	add	r3, r2
 8001c14:	4a04      	ldr	r2, [pc, #16]	; (8001c28 <HAL_IncTick+0x24>)
 8001c16:	6013      	str	r3, [r2, #0]
}
 8001c18:	bf00      	nop
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop
 8001c24:	20000008 	.word	0x20000008
 8001c28:	20000378 	.word	0x20000378

08001c2c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001c30:	4b03      	ldr	r3, [pc, #12]	; (8001c40 <HAL_GetTick+0x14>)
 8001c32:	681b      	ldr	r3, [r3, #0]
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	20000378 	.word	0x20000378

08001c44 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b09a      	sub	sp, #104	; 0x68
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001c52:	2300      	movs	r3, #0
 8001c54:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001c56:	2300      	movs	r3, #0
 8001c58:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d101      	bne.n	8001c64 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e172      	b.n	8001f4a <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	691b      	ldr	r3, [r3, #16]
 8001c68:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6e:	f003 0310 	and.w	r3, r3, #16
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d176      	bne.n	8001d64 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d152      	bne.n	8001d24 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2200      	movs	r2, #0
 8001c82:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2200      	movs	r2, #0
 8001c88:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f7ff fd2f 	bl	80016fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d13b      	bne.n	8001d24 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f000 fed7 	bl	8002a60 <ADC_Disable>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cbc:	f003 0310 	and.w	r3, r3, #16
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d12f      	bne.n	8001d24 <HAL_ADC_Init+0xe0>
 8001cc4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d12b      	bne.n	8001d24 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001cd4:	f023 0302 	bic.w	r3, r3, #2
 8001cd8:	f043 0202 	orr.w	r2, r3, #2
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	689a      	ldr	r2, [r3, #8]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001cee:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	689a      	ldr	r2, [r3, #8]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001cfe:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001d00:	4b94      	ldr	r3, [pc, #592]	; (8001f54 <HAL_ADC_Init+0x310>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a94      	ldr	r2, [pc, #592]	; (8001f58 <HAL_ADC_Init+0x314>)
 8001d06:	fba2 2303 	umull	r2, r3, r2, r3
 8001d0a:	0c9a      	lsrs	r2, r3, #18
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	4413      	add	r3, r2
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d16:	e002      	b.n	8001d1e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	3b01      	subs	r3, #1
 8001d1c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d1f9      	bne.n	8001d18 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d007      	beq.n	8001d42 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001d3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d40:	d110      	bne.n	8001d64 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d46:	f023 0312 	bic.w	r3, r3, #18
 8001d4a:	f043 0210 	orr.w	r2, r3, #16
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d56:	f043 0201 	orr.w	r2, r3, #1
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d68:	f003 0310 	and.w	r3, r3, #16
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	f040 80df 	bne.w	8001f30 <HAL_ADC_Init+0x2ec>
 8001d72:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	f040 80da 	bne.w	8001f30 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	f040 80d2 	bne.w	8001f30 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d90:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001d94:	f043 0202 	orr.w	r2, r3, #2
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d9c:	4b6f      	ldr	r3, [pc, #444]	; (8001f5c <HAL_ADC_Init+0x318>)
 8001d9e:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001da8:	d102      	bne.n	8001db0 <HAL_ADC_Init+0x16c>
 8001daa:	4b6d      	ldr	r3, [pc, #436]	; (8001f60 <HAL_ADC_Init+0x31c>)
 8001dac:	60fb      	str	r3, [r7, #12]
 8001dae:	e002      	b.n	8001db6 <HAL_ADC_Init+0x172>
 8001db0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001db4:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	f003 0303 	and.w	r3, r3, #3
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d108      	bne.n	8001dd6 <HAL_ADC_Init+0x192>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0301 	and.w	r3, r3, #1
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d101      	bne.n	8001dd6 <HAL_ADC_Init+0x192>
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e000      	b.n	8001dd8 <HAL_ADC_Init+0x194>
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d11c      	bne.n	8001e16 <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001ddc:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d010      	beq.n	8001e04 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	f003 0303 	and.w	r3, r3, #3
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d107      	bne.n	8001dfe <HAL_ADC_Init+0x1ba>
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0301 	and.w	r3, r3, #1
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d101      	bne.n	8001dfe <HAL_ADC_Init+0x1ba>
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e000      	b.n	8001e00 <HAL_ADC_Init+0x1bc>
 8001dfe:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d108      	bne.n	8001e16 <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001e04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	431a      	orrs	r2, r3
 8001e12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e14:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	7e5b      	ldrb	r3, [r3, #25]
 8001e1a:	035b      	lsls	r3, r3, #13
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e20:	2a01      	cmp	r2, #1
 8001e22:	d002      	beq.n	8001e2a <HAL_ADC_Init+0x1e6>
 8001e24:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e28:	e000      	b.n	8001e2c <HAL_ADC_Init+0x1e8>
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	431a      	orrs	r2, r3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	68db      	ldr	r3, [r3, #12]
 8001e32:	431a      	orrs	r2, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d11b      	bne.n	8001e82 <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	7e5b      	ldrb	r3, [r3, #25]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d109      	bne.n	8001e66 <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e56:	3b01      	subs	r3, #1
 8001e58:	045a      	lsls	r2, r3, #17
 8001e5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e62:	663b      	str	r3, [r7, #96]	; 0x60
 8001e64:	e00d      	b.n	8001e82 <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001e6e:	f043 0220 	orr.w	r2, r3, #32
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e7a:	f043 0201 	orr.w	r2, r3, #1
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d007      	beq.n	8001e9a <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e92:	4313      	orrs	r3, r2
 8001e94:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001e96:	4313      	orrs	r3, r2
 8001e98:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	f003 030c 	and.w	r3, r3, #12
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d114      	bne.n	8001ed2 <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	6812      	ldr	r2, [r2, #0]
 8001eb2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001eb6:	f023 0302 	bic.w	r3, r3, #2
 8001eba:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	7e1b      	ldrb	r3, [r3, #24]
 8001ec0:	039a      	lsls	r2, r3, #14
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	68da      	ldr	r2, [r3, #12]
 8001ed8:	4b22      	ldr	r3, [pc, #136]	; (8001f64 <HAL_ADC_Init+0x320>)
 8001eda:	4013      	ands	r3, r2
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	6812      	ldr	r2, [r2, #0]
 8001ee0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001ee2:	430b      	orrs	r3, r1
 8001ee4:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	691b      	ldr	r3, [r3, #16]
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d10c      	bne.n	8001f08 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef4:	f023 010f 	bic.w	r1, r3, #15
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	69db      	ldr	r3, [r3, #28]
 8001efc:	1e5a      	subs	r2, r3, #1
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	430a      	orrs	r2, r1
 8001f04:	631a      	str	r2, [r3, #48]	; 0x30
 8001f06:	e007      	b.n	8001f18 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f022 020f 	bic.w	r2, r2, #15
 8001f16:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f22:	f023 0303 	bic.w	r3, r3, #3
 8001f26:	f043 0201 	orr.w	r2, r3, #1
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	641a      	str	r2, [r3, #64]	; 0x40
 8001f2e:	e00a      	b.n	8001f46 <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f34:	f023 0312 	bic.w	r3, r3, #18
 8001f38:	f043 0210 	orr.w	r2, r3, #16
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001f40:	2301      	movs	r3, #1
 8001f42:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001f46:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3768      	adds	r7, #104	; 0x68
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	20000000 	.word	0x20000000
 8001f58:	431bde83 	.word	0x431bde83
 8001f5c:	50000300 	.word	0x50000300
 8001f60:	50000100 	.word	0x50000100
 8001f64:	fff0c007 	.word	0xfff0c007

08001f68 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f70:	2300      	movs	r3, #0
 8001f72:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	f003 0304 	and.w	r3, r3, #4
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	f040 809c 	bne.w	80020bc <HAL_ADC_Start+0x154>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d101      	bne.n	8001f92 <HAL_ADC_Start+0x2a>
 8001f8e:	2302      	movs	r3, #2
 8001f90:	e097      	b.n	80020c2 <HAL_ADC_Start+0x15a>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2201      	movs	r2, #1
 8001f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f000 fcfc 	bl	8002998 <ADC_Enable>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001fa4:	7bfb      	ldrb	r3, [r7, #15]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	f040 8083 	bne.w	80020b2 <HAL_ADC_Start+0x14a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001fb4:	f023 0301 	bic.w	r3, r3, #1
 8001fb8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001fc0:	4b42      	ldr	r3, [pc, #264]	; (80020cc <HAL_ADC_Start+0x164>)
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	f003 031f 	and.w	r3, r3, #31
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d004      	beq.n	8001fd6 <HAL_ADC_Start+0x6e>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001fd4:	d115      	bne.n	8002002 <HAL_ADC_Start+0x9a>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fda:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d027      	beq.n	8002040 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ff8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002000:	e01e      	b.n	8002040 <HAL_ADC_Start+0xd8>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002006:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002016:	d004      	beq.n	8002022 <HAL_ADC_Start+0xba>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a2c      	ldr	r2, [pc, #176]	; (80020d0 <HAL_ADC_Start+0x168>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d10e      	bne.n	8002040 <HAL_ADC_Start+0xd8>
 8002022:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800202c:	2b00      	cmp	r3, #0
 800202e:	d007      	beq.n	8002040 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002034:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002038:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002044:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002048:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800204c:	d106      	bne.n	800205c <HAL_ADC_Start+0xf4>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002052:	f023 0206 	bic.w	r2, r3, #6
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	645a      	str	r2, [r3, #68]	; 0x44
 800205a:	e002      	b.n	8002062 <HAL_ADC_Start+0xfa>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2200      	movs	r2, #0
 8002060:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	221c      	movs	r2, #28
 8002070:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002072:	4b16      	ldr	r3, [pc, #88]	; (80020cc <HAL_ADC_Start+0x164>)
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	f003 031f 	and.w	r3, r3, #31
 800207a:	2b00      	cmp	r3, #0
 800207c:	d010      	beq.n	80020a0 <HAL_ADC_Start+0x138>
 800207e:	4b13      	ldr	r3, [pc, #76]	; (80020cc <HAL_ADC_Start+0x164>)
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	f003 031f 	and.w	r3, r3, #31
 8002086:	2b05      	cmp	r3, #5
 8002088:	d00a      	beq.n	80020a0 <HAL_ADC_Start+0x138>
 800208a:	4b10      	ldr	r3, [pc, #64]	; (80020cc <HAL_ADC_Start+0x164>)
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	f003 031f 	and.w	r3, r3, #31
 8002092:	2b09      	cmp	r3, #9
 8002094:	d004      	beq.n	80020a0 <HAL_ADC_Start+0x138>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800209e:	d10f      	bne.n	80020c0 <HAL_ADC_Start+0x158>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	689a      	ldr	r2, [r3, #8]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f042 0204 	orr.w	r2, r2, #4
 80020ae:	609a      	str	r2, [r3, #8]
 80020b0:	e006      	b.n	80020c0 <HAL_ADC_Start+0x158>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80020ba:	e001      	b.n	80020c0 <HAL_ADC_Start+0x158>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80020bc:	2302      	movs	r3, #2
 80020be:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80020c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3710      	adds	r7, #16
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	50000300 	.word	0x50000300
 80020d0:	50000100 	.word	0x50000100

080020d4 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b086      	sub	sp, #24
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 80020de:	2300      	movs	r3, #0
 80020e0:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	695b      	ldr	r3, [r3, #20]
 80020e6:	2b08      	cmp	r3, #8
 80020e8:	d102      	bne.n	80020f0 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80020ea:	2308      	movs	r3, #8
 80020ec:	617b      	str	r3, [r7, #20]
 80020ee:	e02e      	b.n	800214e <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020f0:	4b5e      	ldr	r3, [pc, #376]	; (800226c <HAL_ADC_PollForConversion+0x198>)
 80020f2:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	f003 031f 	and.w	r3, r3, #31
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d112      	bne.n	8002126 <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	f003 0301 	and.w	r3, r3, #1
 800210a:	2b01      	cmp	r3, #1
 800210c:	d11d      	bne.n	800214a <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002112:	f043 0220 	orr.w	r2, r3, #32
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2200      	movs	r2, #0
 800211e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e09d      	b.n	8002262 <HAL_ADC_PollForConversion+0x18e>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d00b      	beq.n	800214a <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002136:	f043 0220 	orr.w	r2, r3, #32
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2200      	movs	r2, #0
 8002142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e08b      	b.n	8002262 <HAL_ADC_PollForConversion+0x18e>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800214a:	230c      	movs	r3, #12
 800214c:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800214e:	4b47      	ldr	r3, [pc, #284]	; (800226c <HAL_ADC_PollForConversion+0x198>)
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	f003 031f 	and.w	r3, r3, #31
 8002156:	2b00      	cmp	r3, #0
 8002158:	d004      	beq.n	8002164 <HAL_ADC_PollForConversion+0x90>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002162:	d104      	bne.n	800216e <HAL_ADC_PollForConversion+0x9a>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	68db      	ldr	r3, [r3, #12]
 800216a:	613b      	str	r3, [r7, #16]
 800216c:	e003      	b.n	8002176 <HAL_ADC_PollForConversion+0xa2>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800216e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8002176:	f7ff fd59 	bl	8001c2c <HAL_GetTick>
 800217a:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800217c:	e021      	b.n	80021c2 <HAL_ADC_PollForConversion+0xee>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002184:	d01d      	beq.n	80021c2 <HAL_ADC_PollForConversion+0xee>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d007      	beq.n	800219c <HAL_ADC_PollForConversion+0xc8>
 800218c:	f7ff fd4e 	bl	8001c2c <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	683a      	ldr	r2, [r7, #0]
 8002198:	429a      	cmp	r2, r3
 800219a:	d212      	bcs.n	80021c2 <HAL_ADC_PollForConversion+0xee>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	4013      	ands	r3, r2
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d10b      	bne.n	80021c2 <HAL_ADC_PollForConversion+0xee>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ae:	f043 0204 	orr.w	r2, r3, #4
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2200      	movs	r2, #0
 80021ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e04f      	b.n	8002262 <HAL_ADC_PollForConversion+0x18e>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	4013      	ands	r3, r2
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d0d6      	beq.n	800217e <HAL_ADC_PollForConversion+0xaa>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d131      	bne.n	800224e <HAL_ADC_PollForConversion+0x17a>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d12c      	bne.n	800224e <HAL_ADC_PollForConversion+0x17a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0308 	and.w	r3, r3, #8
 80021fe:	2b08      	cmp	r3, #8
 8002200:	d125      	bne.n	800224e <HAL_ADC_PollForConversion+0x17a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	f003 0304 	and.w	r3, r3, #4
 800220c:	2b00      	cmp	r3, #0
 800220e:	d112      	bne.n	8002236 <HAL_ADC_PollForConversion+0x162>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002214:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002220:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d112      	bne.n	800224e <HAL_ADC_PollForConversion+0x17a>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222c:	f043 0201 	orr.w	r2, r3, #1
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	641a      	str	r2, [r3, #64]	; 0x40
 8002234:	e00b      	b.n	800224e <HAL_ADC_PollForConversion+0x17a>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223a:	f043 0220 	orr.w	r2, r3, #32
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002246:	f043 0201 	orr.w	r2, r3, #1
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002254:	2b00      	cmp	r3, #0
 8002256:	d103      	bne.n	8002260 <HAL_ADC_PollForConversion+0x18c>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	697a      	ldr	r2, [r7, #20]
 800225e:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002260:	2300      	movs	r3, #0
}
 8002262:	4618      	mov	r0, r3
 8002264:	3718      	adds	r7, #24
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	50000300 	.word	0x50000300

08002270 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800227e:	4618      	mov	r0, r3
 8002280:	370c      	adds	r7, #12
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
	...

0800228c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800228c:	b480      	push	{r7}
 800228e:	b09b      	sub	sp, #108	; 0x6c
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002296:	2300      	movs	r3, #0
 8002298:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 800229c:	2300      	movs	r3, #0
 800229e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d101      	bne.n	80022ae <HAL_ADC_ConfigChannel+0x22>
 80022aa:	2302      	movs	r3, #2
 80022ac:	e2a4      	b.n	80027f8 <HAL_ADC_ConfigChannel+0x56c>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2201      	movs	r2, #1
 80022b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	f003 0304 	and.w	r3, r3, #4
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	f040 8288 	bne.w	80027d6 <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	2b04      	cmp	r3, #4
 80022cc:	d81c      	bhi.n	8002308 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685a      	ldr	r2, [r3, #4]
 80022d8:	4613      	mov	r3, r2
 80022da:	005b      	lsls	r3, r3, #1
 80022dc:	4413      	add	r3, r2
 80022de:	005b      	lsls	r3, r3, #1
 80022e0:	461a      	mov	r2, r3
 80022e2:	231f      	movs	r3, #31
 80022e4:	4093      	lsls	r3, r2
 80022e6:	43db      	mvns	r3, r3
 80022e8:	4019      	ands	r1, r3
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	6818      	ldr	r0, [r3, #0]
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	685a      	ldr	r2, [r3, #4]
 80022f2:	4613      	mov	r3, r2
 80022f4:	005b      	lsls	r3, r3, #1
 80022f6:	4413      	add	r3, r2
 80022f8:	005b      	lsls	r3, r3, #1
 80022fa:	fa00 f203 	lsl.w	r2, r0, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	430a      	orrs	r2, r1
 8002304:	631a      	str	r2, [r3, #48]	; 0x30
 8002306:	e063      	b.n	80023d0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	2b09      	cmp	r3, #9
 800230e:	d81e      	bhi.n	800234e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	685a      	ldr	r2, [r3, #4]
 800231a:	4613      	mov	r3, r2
 800231c:	005b      	lsls	r3, r3, #1
 800231e:	4413      	add	r3, r2
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	3b1e      	subs	r3, #30
 8002324:	221f      	movs	r2, #31
 8002326:	fa02 f303 	lsl.w	r3, r2, r3
 800232a:	43db      	mvns	r3, r3
 800232c:	4019      	ands	r1, r3
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	6818      	ldr	r0, [r3, #0]
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	685a      	ldr	r2, [r3, #4]
 8002336:	4613      	mov	r3, r2
 8002338:	005b      	lsls	r3, r3, #1
 800233a:	4413      	add	r3, r2
 800233c:	005b      	lsls	r3, r3, #1
 800233e:	3b1e      	subs	r3, #30
 8002340:	fa00 f203 	lsl.w	r2, r0, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	430a      	orrs	r2, r1
 800234a:	635a      	str	r2, [r3, #52]	; 0x34
 800234c:	e040      	b.n	80023d0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	2b0e      	cmp	r3, #14
 8002354:	d81e      	bhi.n	8002394 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	685a      	ldr	r2, [r3, #4]
 8002360:	4613      	mov	r3, r2
 8002362:	005b      	lsls	r3, r3, #1
 8002364:	4413      	add	r3, r2
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	3b3c      	subs	r3, #60	; 0x3c
 800236a:	221f      	movs	r2, #31
 800236c:	fa02 f303 	lsl.w	r3, r2, r3
 8002370:	43db      	mvns	r3, r3
 8002372:	4019      	ands	r1, r3
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	6818      	ldr	r0, [r3, #0]
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	685a      	ldr	r2, [r3, #4]
 800237c:	4613      	mov	r3, r2
 800237e:	005b      	lsls	r3, r3, #1
 8002380:	4413      	add	r3, r2
 8002382:	005b      	lsls	r3, r3, #1
 8002384:	3b3c      	subs	r3, #60	; 0x3c
 8002386:	fa00 f203 	lsl.w	r2, r0, r3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	430a      	orrs	r2, r1
 8002390:	639a      	str	r2, [r3, #56]	; 0x38
 8002392:	e01d      	b.n	80023d0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	685a      	ldr	r2, [r3, #4]
 800239e:	4613      	mov	r3, r2
 80023a0:	005b      	lsls	r3, r3, #1
 80023a2:	4413      	add	r3, r2
 80023a4:	005b      	lsls	r3, r3, #1
 80023a6:	3b5a      	subs	r3, #90	; 0x5a
 80023a8:	221f      	movs	r2, #31
 80023aa:	fa02 f303 	lsl.w	r3, r2, r3
 80023ae:	43db      	mvns	r3, r3
 80023b0:	4019      	ands	r1, r3
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	6818      	ldr	r0, [r3, #0]
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	685a      	ldr	r2, [r3, #4]
 80023ba:	4613      	mov	r3, r2
 80023bc:	005b      	lsls	r3, r3, #1
 80023be:	4413      	add	r3, r2
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	3b5a      	subs	r3, #90	; 0x5a
 80023c4:	fa00 f203 	lsl.w	r2, r0, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	430a      	orrs	r2, r1
 80023ce:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	f003 030c 	and.w	r3, r3, #12
 80023da:	2b00      	cmp	r3, #0
 80023dc:	f040 80e5 	bne.w	80025aa <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2b09      	cmp	r3, #9
 80023e6:	d91c      	bls.n	8002422 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	6999      	ldr	r1, [r3, #24]
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	4613      	mov	r3, r2
 80023f4:	005b      	lsls	r3, r3, #1
 80023f6:	4413      	add	r3, r2
 80023f8:	3b1e      	subs	r3, #30
 80023fa:	2207      	movs	r2, #7
 80023fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002400:	43db      	mvns	r3, r3
 8002402:	4019      	ands	r1, r3
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	6898      	ldr	r0, [r3, #8]
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	4613      	mov	r3, r2
 800240e:	005b      	lsls	r3, r3, #1
 8002410:	4413      	add	r3, r2
 8002412:	3b1e      	subs	r3, #30
 8002414:	fa00 f203 	lsl.w	r2, r0, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	430a      	orrs	r2, r1
 800241e:	619a      	str	r2, [r3, #24]
 8002420:	e019      	b.n	8002456 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	6959      	ldr	r1, [r3, #20]
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	4613      	mov	r3, r2
 800242e:	005b      	lsls	r3, r3, #1
 8002430:	4413      	add	r3, r2
 8002432:	2207      	movs	r2, #7
 8002434:	fa02 f303 	lsl.w	r3, r2, r3
 8002438:	43db      	mvns	r3, r3
 800243a:	4019      	ands	r1, r3
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	6898      	ldr	r0, [r3, #8]
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	4613      	mov	r3, r2
 8002446:	005b      	lsls	r3, r3, #1
 8002448:	4413      	add	r3, r2
 800244a:	fa00 f203 	lsl.w	r2, r0, r3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	430a      	orrs	r2, r1
 8002454:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	695a      	ldr	r2, [r3, #20]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	08db      	lsrs	r3, r3, #3
 8002462:	f003 0303 	and.w	r3, r3, #3
 8002466:	005b      	lsls	r3, r3, #1
 8002468:	fa02 f303 	lsl.w	r3, r2, r3
 800246c:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	691b      	ldr	r3, [r3, #16]
 8002472:	3b01      	subs	r3, #1
 8002474:	2b03      	cmp	r3, #3
 8002476:	d84f      	bhi.n	8002518 <HAL_ADC_ConfigChannel+0x28c>
 8002478:	a201      	add	r2, pc, #4	; (adr r2, 8002480 <HAL_ADC_ConfigChannel+0x1f4>)
 800247a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800247e:	bf00      	nop
 8002480:	08002491 	.word	0x08002491
 8002484:	080024b3 	.word	0x080024b3
 8002488:	080024d5 	.word	0x080024d5
 800248c:	080024f7 	.word	0x080024f7
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002496:	4b94      	ldr	r3, [pc, #592]	; (80026e8 <HAL_ADC_ConfigChannel+0x45c>)
 8002498:	4013      	ands	r3, r2
 800249a:	683a      	ldr	r2, [r7, #0]
 800249c:	6812      	ldr	r2, [r2, #0]
 800249e:	0691      	lsls	r1, r2, #26
 80024a0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80024a2:	430a      	orrs	r2, r1
 80024a4:	431a      	orrs	r2, r3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80024ae:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80024b0:	e07e      	b.n	80025b0 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80024b8:	4b8b      	ldr	r3, [pc, #556]	; (80026e8 <HAL_ADC_ConfigChannel+0x45c>)
 80024ba:	4013      	ands	r3, r2
 80024bc:	683a      	ldr	r2, [r7, #0]
 80024be:	6812      	ldr	r2, [r2, #0]
 80024c0:	0691      	lsls	r1, r2, #26
 80024c2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80024c4:	430a      	orrs	r2, r1
 80024c6:	431a      	orrs	r2, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80024d0:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80024d2:	e06d      	b.n	80025b0 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80024da:	4b83      	ldr	r3, [pc, #524]	; (80026e8 <HAL_ADC_ConfigChannel+0x45c>)
 80024dc:	4013      	ands	r3, r2
 80024de:	683a      	ldr	r2, [r7, #0]
 80024e0:	6812      	ldr	r2, [r2, #0]
 80024e2:	0691      	lsls	r1, r2, #26
 80024e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80024e6:	430a      	orrs	r2, r1
 80024e8:	431a      	orrs	r2, r3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80024f2:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80024f4:	e05c      	b.n	80025b0 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80024fc:	4b7a      	ldr	r3, [pc, #488]	; (80026e8 <HAL_ADC_ConfigChannel+0x45c>)
 80024fe:	4013      	ands	r3, r2
 8002500:	683a      	ldr	r2, [r7, #0]
 8002502:	6812      	ldr	r2, [r2, #0]
 8002504:	0691      	lsls	r1, r2, #26
 8002506:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002508:	430a      	orrs	r2, r1
 800250a:	431a      	orrs	r2, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002514:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002516:	e04b      	b.n	80025b0 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800251e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	069b      	lsls	r3, r3, #26
 8002528:	429a      	cmp	r2, r3
 800252a:	d107      	bne.n	800253c <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800253a:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002542:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	069b      	lsls	r3, r3, #26
 800254c:	429a      	cmp	r2, r3
 800254e:	d107      	bne.n	8002560 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800255e:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002566:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	069b      	lsls	r3, r3, #26
 8002570:	429a      	cmp	r2, r3
 8002572:	d107      	bne.n	8002584 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002582:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800258a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	069b      	lsls	r3, r3, #26
 8002594:	429a      	cmp	r2, r3
 8002596:	d10a      	bne.n	80025ae <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80025a6:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80025a8:	e001      	b.n	80025ae <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80025aa:	bf00      	nop
 80025ac:	e000      	b.n	80025b0 <HAL_ADC_ConfigChannel+0x324>
      break;
 80025ae:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	f003 0303 	and.w	r3, r3, #3
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d108      	bne.n	80025d0 <HAL_ADC_ConfigChannel+0x344>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0301 	and.w	r3, r3, #1
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d101      	bne.n	80025d0 <HAL_ADC_ConfigChannel+0x344>
 80025cc:	2301      	movs	r3, #1
 80025ce:	e000      	b.n	80025d2 <HAL_ADC_ConfigChannel+0x346>
 80025d0:	2300      	movs	r3, #0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	f040 810a 	bne.w	80027ec <HAL_ADC_ConfigChannel+0x560>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d00f      	beq.n	8002600 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	2201      	movs	r2, #1
 80025ee:	fa02 f303 	lsl.w	r3, r2, r3
 80025f2:	43da      	mvns	r2, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	400a      	ands	r2, r1
 80025fa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80025fe:	e049      	b.n	8002694 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	2201      	movs	r2, #1
 800260e:	409a      	lsls	r2, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	430a      	orrs	r2, r1
 8002616:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	2b09      	cmp	r3, #9
 8002620:	d91c      	bls.n	800265c <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	6999      	ldr	r1, [r3, #24]
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	4613      	mov	r3, r2
 800262e:	005b      	lsls	r3, r3, #1
 8002630:	4413      	add	r3, r2
 8002632:	3b1b      	subs	r3, #27
 8002634:	2207      	movs	r2, #7
 8002636:	fa02 f303 	lsl.w	r3, r2, r3
 800263a:	43db      	mvns	r3, r3
 800263c:	4019      	ands	r1, r3
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	6898      	ldr	r0, [r3, #8]
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	4613      	mov	r3, r2
 8002648:	005b      	lsls	r3, r3, #1
 800264a:	4413      	add	r3, r2
 800264c:	3b1b      	subs	r3, #27
 800264e:	fa00 f203 	lsl.w	r2, r0, r3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	430a      	orrs	r2, r1
 8002658:	619a      	str	r2, [r3, #24]
 800265a:	e01b      	b.n	8002694 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	6959      	ldr	r1, [r3, #20]
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	1c5a      	adds	r2, r3, #1
 8002668:	4613      	mov	r3, r2
 800266a:	005b      	lsls	r3, r3, #1
 800266c:	4413      	add	r3, r2
 800266e:	2207      	movs	r2, #7
 8002670:	fa02 f303 	lsl.w	r3, r2, r3
 8002674:	43db      	mvns	r3, r3
 8002676:	4019      	ands	r1, r3
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	6898      	ldr	r0, [r3, #8]
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	1c5a      	adds	r2, r3, #1
 8002682:	4613      	mov	r3, r2
 8002684:	005b      	lsls	r3, r3, #1
 8002686:	4413      	add	r3, r2
 8002688:	fa00 f203 	lsl.w	r2, r0, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	430a      	orrs	r2, r1
 8002692:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002694:	4b15      	ldr	r3, [pc, #84]	; (80026ec <HAL_ADC_ConfigChannel+0x460>)
 8002696:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2b10      	cmp	r3, #16
 800269e:	d105      	bne.n	80026ac <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80026a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d015      	beq.n	80026d8 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80026b0:	2b11      	cmp	r3, #17
 80026b2:	d105      	bne.n	80026c0 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80026b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d00b      	beq.n	80026d8 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80026c4:	2b12      	cmp	r3, #18
 80026c6:	f040 8091 	bne.w	80027ec <HAL_ADC_ConfigChannel+0x560>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80026ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	f040 808a 	bne.w	80027ec <HAL_ADC_ConfigChannel+0x560>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026e0:	d108      	bne.n	80026f4 <HAL_ADC_ConfigChannel+0x468>
 80026e2:	4b03      	ldr	r3, [pc, #12]	; (80026f0 <HAL_ADC_ConfigChannel+0x464>)
 80026e4:	60fb      	str	r3, [r7, #12]
 80026e6:	e008      	b.n	80026fa <HAL_ADC_ConfigChannel+0x46e>
 80026e8:	83fff000 	.word	0x83fff000
 80026ec:	50000300 	.word	0x50000300
 80026f0:	50000100 	.word	0x50000100
 80026f4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80026f8:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	f003 0303 	and.w	r3, r3, #3
 8002704:	2b01      	cmp	r3, #1
 8002706:	d108      	bne.n	800271a <HAL_ADC_ConfigChannel+0x48e>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0301 	and.w	r3, r3, #1
 8002712:	2b01      	cmp	r3, #1
 8002714:	d101      	bne.n	800271a <HAL_ADC_ConfigChannel+0x48e>
 8002716:	2301      	movs	r3, #1
 8002718:	e000      	b.n	800271c <HAL_ADC_ConfigChannel+0x490>
 800271a:	2300      	movs	r3, #0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d150      	bne.n	80027c2 <HAL_ADC_ConfigChannel+0x536>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002720:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002722:	2b00      	cmp	r3, #0
 8002724:	d010      	beq.n	8002748 <HAL_ADC_ConfigChannel+0x4bc>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	f003 0303 	and.w	r3, r3, #3
 800272e:	2b01      	cmp	r3, #1
 8002730:	d107      	bne.n	8002742 <HAL_ADC_ConfigChannel+0x4b6>
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0301 	and.w	r3, r3, #1
 800273a:	2b01      	cmp	r3, #1
 800273c:	d101      	bne.n	8002742 <HAL_ADC_ConfigChannel+0x4b6>
 800273e:	2301      	movs	r3, #1
 8002740:	e000      	b.n	8002744 <HAL_ADC_ConfigChannel+0x4b8>
 8002742:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002744:	2b00      	cmp	r3, #0
 8002746:	d13c      	bne.n	80027c2 <HAL_ADC_ConfigChannel+0x536>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2b10      	cmp	r3, #16
 800274e:	d11d      	bne.n	800278c <HAL_ADC_ConfigChannel+0x500>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002758:	d118      	bne.n	800278c <HAL_ADC_ConfigChannel+0x500>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800275a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002762:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002764:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002766:	4b27      	ldr	r3, [pc, #156]	; (8002804 <HAL_ADC_ConfigChannel+0x578>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a27      	ldr	r2, [pc, #156]	; (8002808 <HAL_ADC_ConfigChannel+0x57c>)
 800276c:	fba2 2303 	umull	r2, r3, r2, r3
 8002770:	0c9a      	lsrs	r2, r3, #18
 8002772:	4613      	mov	r3, r2
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	4413      	add	r3, r2
 8002778:	005b      	lsls	r3, r3, #1
 800277a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800277c:	e002      	b.n	8002784 <HAL_ADC_ConfigChannel+0x4f8>
          {
            wait_loop_index--;
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	3b01      	subs	r3, #1
 8002782:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d1f9      	bne.n	800277e <HAL_ADC_ConfigChannel+0x4f2>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800278a:	e02e      	b.n	80027ea <HAL_ADC_ConfigChannel+0x55e>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2b11      	cmp	r3, #17
 8002792:	d10b      	bne.n	80027ac <HAL_ADC_ConfigChannel+0x520>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800279c:	d106      	bne.n	80027ac <HAL_ADC_ConfigChannel+0x520>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800279e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80027a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027a8:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80027aa:	e01e      	b.n	80027ea <HAL_ADC_ConfigChannel+0x55e>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2b12      	cmp	r3, #18
 80027b2:	d11a      	bne.n	80027ea <HAL_ADC_ConfigChannel+0x55e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80027b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80027bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027be:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80027c0:	e013      	b.n	80027ea <HAL_ADC_ConfigChannel+0x55e>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c6:	f043 0220 	orr.w	r2, r3, #32
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80027d4:	e00a      	b.n	80027ec <HAL_ADC_ConfigChannel+0x560>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027da:	f043 0220 	orr.w	r2, r3, #32
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80027e8:	e000      	b.n	80027ec <HAL_ADC_ConfigChannel+0x560>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80027ea:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2200      	movs	r2, #0
 80027f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80027f4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	376c      	adds	r7, #108	; 0x6c
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr
 8002804:	20000000 	.word	0x20000000
 8002808:	431bde83 	.word	0x431bde83

0800280c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 800280c:	b480      	push	{r7}
 800280e:	b099      	sub	sp, #100	; 0x64
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002816:	2300      	movs	r3, #0
 8002818:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002824:	d102      	bne.n	800282c <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8002826:	4b5a      	ldr	r3, [pc, #360]	; (8002990 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8002828:	60bb      	str	r3, [r7, #8]
 800282a:	e002      	b.n	8002832 <HAL_ADCEx_MultiModeConfigChannel+0x26>
 800282c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002830:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d101      	bne.n	800283c <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e0a2      	b.n	8002982 <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002842:	2b01      	cmp	r3, #1
 8002844:	d101      	bne.n	800284a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002846:	2302      	movs	r3, #2
 8002848:	e09b      	b.n	8002982 <HAL_ADCEx_MultiModeConfigChannel+0x176>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2201      	movs	r2, #1
 800284e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	f003 0304 	and.w	r3, r3, #4
 800285c:	2b00      	cmp	r3, #0
 800285e:	d17f      	bne.n	8002960 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	f003 0304 	and.w	r3, r3, #4
 8002868:	2b00      	cmp	r3, #0
 800286a:	d179      	bne.n	8002960 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800286c:	4b49      	ldr	r3, [pc, #292]	; (8002994 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 800286e:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d040      	beq.n	80028fa <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002878:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	6859      	ldr	r1, [r3, #4]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800288a:	035b      	lsls	r3, r3, #13
 800288c:	430b      	orrs	r3, r1
 800288e:	431a      	orrs	r2, r3
 8002890:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002892:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	f003 0303 	and.w	r3, r3, #3
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d108      	bne.n	80028b4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0301 	and.w	r3, r3, #1
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d101      	bne.n	80028b4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80028b0:	2301      	movs	r3, #1
 80028b2:	e000      	b.n	80028b6 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 80028b4:	2300      	movs	r3, #0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d15c      	bne.n	8002974 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f003 0303 	and.w	r3, r3, #3
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d107      	bne.n	80028d6 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0301 	and.w	r3, r3, #1
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d101      	bne.n	80028d6 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80028d2:	2301      	movs	r3, #1
 80028d4:	e000      	b.n	80028d8 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 80028d6:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d14b      	bne.n	8002974 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80028dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80028e4:	f023 030f 	bic.w	r3, r3, #15
 80028e8:	683a      	ldr	r2, [r7, #0]
 80028ea:	6811      	ldr	r1, [r2, #0]
 80028ec:	683a      	ldr	r2, [r7, #0]
 80028ee:	6892      	ldr	r2, [r2, #8]
 80028f0:	430a      	orrs	r2, r1
 80028f2:	431a      	orrs	r2, r3
 80028f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028f6:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80028f8:	e03c      	b.n	8002974 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80028fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002902:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002904:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	f003 0303 	and.w	r3, r3, #3
 8002910:	2b01      	cmp	r3, #1
 8002912:	d108      	bne.n	8002926 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0301 	and.w	r3, r3, #1
 800291e:	2b01      	cmp	r3, #1
 8002920:	d101      	bne.n	8002926 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8002922:	2301      	movs	r3, #1
 8002924:	e000      	b.n	8002928 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8002926:	2300      	movs	r3, #0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d123      	bne.n	8002974 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	f003 0303 	and.w	r3, r3, #3
 8002934:	2b01      	cmp	r3, #1
 8002936:	d107      	bne.n	8002948 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0301 	and.w	r3, r3, #1
 8002940:	2b01      	cmp	r3, #1
 8002942:	d101      	bne.n	8002948 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8002944:	2301      	movs	r3, #1
 8002946:	e000      	b.n	800294a <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8002948:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800294a:	2b00      	cmp	r3, #0
 800294c:	d112      	bne.n	8002974 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800294e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002956:	f023 030f 	bic.w	r3, r3, #15
 800295a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800295c:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800295e:	e009      	b.n	8002974 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002964:	f043 0220 	orr.w	r2, r3, #32
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002972:	e000      	b.n	8002976 <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002974:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800297e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8002982:	4618      	mov	r0, r3
 8002984:	3764      	adds	r7, #100	; 0x64
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop
 8002990:	50000100 	.word	0x50000100
 8002994:	50000300 	.word	0x50000300

08002998 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b084      	sub	sp, #16
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80029a0:	2300      	movs	r3, #0
 80029a2:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	f003 0303 	and.w	r3, r3, #3
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d108      	bne.n	80029c4 <ADC_Enable+0x2c>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0301 	and.w	r3, r3, #1
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d101      	bne.n	80029c4 <ADC_Enable+0x2c>
 80029c0:	2301      	movs	r3, #1
 80029c2:	e000      	b.n	80029c6 <ADC_Enable+0x2e>
 80029c4:	2300      	movs	r3, #0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d143      	bne.n	8002a52 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	689a      	ldr	r2, [r3, #8]
 80029d0:	4b22      	ldr	r3, [pc, #136]	; (8002a5c <ADC_Enable+0xc4>)
 80029d2:	4013      	ands	r3, r2
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d00d      	beq.n	80029f4 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029dc:	f043 0210 	orr.w	r2, r3, #16
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e8:	f043 0201 	orr.w	r2, r3, #1
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e02f      	b.n	8002a54 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	689a      	ldr	r2, [r3, #8]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f042 0201 	orr.w	r2, r2, #1
 8002a02:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002a04:	f7ff f912 	bl	8001c2c <HAL_GetTick>
 8002a08:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002a0a:	e01b      	b.n	8002a44 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002a0c:	f7ff f90e 	bl	8001c2c <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d914      	bls.n	8002a44 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0301 	and.w	r3, r3, #1
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d00d      	beq.n	8002a44 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2c:	f043 0210 	orr.w	r2, r3, #16
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a38:	f043 0201 	orr.w	r2, r3, #1
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e007      	b.n	8002a54 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0301 	and.w	r3, r3, #1
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d1dc      	bne.n	8002a0c <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002a52:	2300      	movs	r3, #0
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3710      	adds	r7, #16
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	8000003f 	.word	0x8000003f

08002a60 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	f003 0303 	and.w	r3, r3, #3
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d108      	bne.n	8002a8c <ADC_Disable+0x2c>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 0301 	and.w	r3, r3, #1
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d101      	bne.n	8002a8c <ADC_Disable+0x2c>
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e000      	b.n	8002a8e <ADC_Disable+0x2e>
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d047      	beq.n	8002b22 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	f003 030d 	and.w	r3, r3, #13
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d10f      	bne.n	8002ac0 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	689a      	ldr	r2, [r3, #8]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f042 0202 	orr.w	r2, r2, #2
 8002aae:	609a      	str	r2, [r3, #8]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	2203      	movs	r2, #3
 8002ab6:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002ab8:	f7ff f8b8 	bl	8001c2c <HAL_GetTick>
 8002abc:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002abe:	e029      	b.n	8002b14 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac4:	f043 0210 	orr.w	r2, r3, #16
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad0:	f043 0201 	orr.w	r2, r3, #1
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e023      	b.n	8002b24 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002adc:	f7ff f8a6 	bl	8001c2c <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d914      	bls.n	8002b14 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	f003 0301 	and.w	r3, r3, #1
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d10d      	bne.n	8002b14 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afc:	f043 0210 	orr.w	r2, r3, #16
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b08:	f043 0201 	orr.w	r2, r3, #1
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e007      	b.n	8002b24 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	f003 0301 	and.w	r3, r3, #1
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d0dc      	beq.n	8002adc <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002b22:	2300      	movs	r3, #0
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3710      	adds	r7, #16
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}

08002b2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b085      	sub	sp, #20
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f003 0307 	and.w	r3, r3, #7
 8002b3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b3c:	4b0c      	ldr	r3, [pc, #48]	; (8002b70 <__NVIC_SetPriorityGrouping+0x44>)
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b42:	68ba      	ldr	r2, [r7, #8]
 8002b44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b48:	4013      	ands	r3, r2
 8002b4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b5e:	4a04      	ldr	r2, [pc, #16]	; (8002b70 <__NVIC_SetPriorityGrouping+0x44>)
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	60d3      	str	r3, [r2, #12]
}
 8002b64:	bf00      	nop
 8002b66:	3714      	adds	r7, #20
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr
 8002b70:	e000ed00 	.word	0xe000ed00

08002b74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b74:	b480      	push	{r7}
 8002b76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b78:	4b04      	ldr	r3, [pc, #16]	; (8002b8c <__NVIC_GetPriorityGrouping+0x18>)
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	0a1b      	lsrs	r3, r3, #8
 8002b7e:	f003 0307 	and.w	r3, r3, #7
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr
 8002b8c:	e000ed00 	.word	0xe000ed00

08002b90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	4603      	mov	r3, r0
 8002b98:	6039      	str	r1, [r7, #0]
 8002b9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	db0a      	blt.n	8002bba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	b2da      	uxtb	r2, r3
 8002ba8:	490c      	ldr	r1, [pc, #48]	; (8002bdc <__NVIC_SetPriority+0x4c>)
 8002baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bae:	0112      	lsls	r2, r2, #4
 8002bb0:	b2d2      	uxtb	r2, r2
 8002bb2:	440b      	add	r3, r1
 8002bb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bb8:	e00a      	b.n	8002bd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	b2da      	uxtb	r2, r3
 8002bbe:	4908      	ldr	r1, [pc, #32]	; (8002be0 <__NVIC_SetPriority+0x50>)
 8002bc0:	79fb      	ldrb	r3, [r7, #7]
 8002bc2:	f003 030f 	and.w	r3, r3, #15
 8002bc6:	3b04      	subs	r3, #4
 8002bc8:	0112      	lsls	r2, r2, #4
 8002bca:	b2d2      	uxtb	r2, r2
 8002bcc:	440b      	add	r3, r1
 8002bce:	761a      	strb	r2, [r3, #24]
}
 8002bd0:	bf00      	nop
 8002bd2:	370c      	adds	r7, #12
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr
 8002bdc:	e000e100 	.word	0xe000e100
 8002be0:	e000ed00 	.word	0xe000ed00

08002be4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b089      	sub	sp, #36	; 0x24
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	60b9      	str	r1, [r7, #8]
 8002bee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f003 0307 	and.w	r3, r3, #7
 8002bf6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	f1c3 0307 	rsb	r3, r3, #7
 8002bfe:	2b04      	cmp	r3, #4
 8002c00:	bf28      	it	cs
 8002c02:	2304      	movcs	r3, #4
 8002c04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	3304      	adds	r3, #4
 8002c0a:	2b06      	cmp	r3, #6
 8002c0c:	d902      	bls.n	8002c14 <NVIC_EncodePriority+0x30>
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	3b03      	subs	r3, #3
 8002c12:	e000      	b.n	8002c16 <NVIC_EncodePriority+0x32>
 8002c14:	2300      	movs	r3, #0
 8002c16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c18:	f04f 32ff 	mov.w	r2, #4294967295
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c22:	43da      	mvns	r2, r3
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	401a      	ands	r2, r3
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c2c:	f04f 31ff 	mov.w	r1, #4294967295
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	fa01 f303 	lsl.w	r3, r1, r3
 8002c36:	43d9      	mvns	r1, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c3c:	4313      	orrs	r3, r2
         );
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3724      	adds	r7, #36	; 0x24
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
	...

08002c4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	3b01      	subs	r3, #1
 8002c58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c5c:	d301      	bcc.n	8002c62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e00f      	b.n	8002c82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c62:	4a0a      	ldr	r2, [pc, #40]	; (8002c8c <SysTick_Config+0x40>)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	3b01      	subs	r3, #1
 8002c68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c6a:	210f      	movs	r1, #15
 8002c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c70:	f7ff ff8e 	bl	8002b90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c74:	4b05      	ldr	r3, [pc, #20]	; (8002c8c <SysTick_Config+0x40>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c7a:	4b04      	ldr	r3, [pc, #16]	; (8002c8c <SysTick_Config+0x40>)
 8002c7c:	2207      	movs	r2, #7
 8002c7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c80:	2300      	movs	r3, #0
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3708      	adds	r7, #8
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	e000e010 	.word	0xe000e010

08002c90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f7ff ff47 	bl	8002b2c <__NVIC_SetPriorityGrouping>
}
 8002c9e:	bf00      	nop
 8002ca0:	3708      	adds	r7, #8
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}

08002ca6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	b086      	sub	sp, #24
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	4603      	mov	r3, r0
 8002cae:	60b9      	str	r1, [r7, #8]
 8002cb0:	607a      	str	r2, [r7, #4]
 8002cb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002cb8:	f7ff ff5c 	bl	8002b74 <__NVIC_GetPriorityGrouping>
 8002cbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	68b9      	ldr	r1, [r7, #8]
 8002cc2:	6978      	ldr	r0, [r7, #20]
 8002cc4:	f7ff ff8e 	bl	8002be4 <NVIC_EncodePriority>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cce:	4611      	mov	r1, r2
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f7ff ff5d 	bl	8002b90 <__NVIC_SetPriority>
}
 8002cd6:	bf00      	nop
 8002cd8:	3718      	adds	r7, #24
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}

08002cde <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cde:	b580      	push	{r7, lr}
 8002ce0:	b082      	sub	sp, #8
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f7ff ffb0 	bl	8002c4c <SysTick_Config>
 8002cec:	4603      	mov	r3, r0
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3708      	adds	r7, #8
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
	...

08002cf8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b087      	sub	sp, #28
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d02:	2300      	movs	r3, #0
 8002d04:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d06:	e14e      	b.n	8002fa6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	2101      	movs	r1, #1
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	fa01 f303 	lsl.w	r3, r1, r3
 8002d14:	4013      	ands	r3, r2
 8002d16:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	f000 8140 	beq.w	8002fa0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f003 0303 	and.w	r3, r3, #3
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d005      	beq.n	8002d38 <HAL_GPIO_Init+0x40>
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	f003 0303 	and.w	r3, r3, #3
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d130      	bne.n	8002d9a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	005b      	lsls	r3, r3, #1
 8002d42:	2203      	movs	r2, #3
 8002d44:	fa02 f303 	lsl.w	r3, r2, r3
 8002d48:	43db      	mvns	r3, r3
 8002d4a:	693a      	ldr	r2, [r7, #16]
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	68da      	ldr	r2, [r3, #12]
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	005b      	lsls	r3, r3, #1
 8002d58:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5c:	693a      	ldr	r2, [r7, #16]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	693a      	ldr	r2, [r7, #16]
 8002d66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d6e:	2201      	movs	r2, #1
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	fa02 f303 	lsl.w	r3, r2, r3
 8002d76:	43db      	mvns	r3, r3
 8002d78:	693a      	ldr	r2, [r7, #16]
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	091b      	lsrs	r3, r3, #4
 8002d84:	f003 0201 	and.w	r2, r3, #1
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8e:	693a      	ldr	r2, [r7, #16]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	693a      	ldr	r2, [r7, #16]
 8002d98:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	f003 0303 	and.w	r3, r3, #3
 8002da2:	2b03      	cmp	r3, #3
 8002da4:	d017      	beq.n	8002dd6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	005b      	lsls	r3, r3, #1
 8002db0:	2203      	movs	r2, #3
 8002db2:	fa02 f303 	lsl.w	r3, r2, r3
 8002db6:	43db      	mvns	r3, r3
 8002db8:	693a      	ldr	r2, [r7, #16]
 8002dba:	4013      	ands	r3, r2
 8002dbc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	689a      	ldr	r2, [r3, #8]
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	005b      	lsls	r3, r3, #1
 8002dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dca:	693a      	ldr	r2, [r7, #16]
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	693a      	ldr	r2, [r7, #16]
 8002dd4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	f003 0303 	and.w	r3, r3, #3
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d123      	bne.n	8002e2a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	08da      	lsrs	r2, r3, #3
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	3208      	adds	r2, #8
 8002dea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	f003 0307 	and.w	r3, r3, #7
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	220f      	movs	r2, #15
 8002dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfe:	43db      	mvns	r3, r3
 8002e00:	693a      	ldr	r2, [r7, #16]
 8002e02:	4013      	ands	r3, r2
 8002e04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	691a      	ldr	r2, [r3, #16]
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	f003 0307 	and.w	r3, r3, #7
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	fa02 f303 	lsl.w	r3, r2, r3
 8002e16:	693a      	ldr	r2, [r7, #16]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	08da      	lsrs	r2, r3, #3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	3208      	adds	r2, #8
 8002e24:	6939      	ldr	r1, [r7, #16]
 8002e26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	005b      	lsls	r3, r3, #1
 8002e34:	2203      	movs	r2, #3
 8002e36:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3a:	43db      	mvns	r3, r3
 8002e3c:	693a      	ldr	r2, [r7, #16]
 8002e3e:	4013      	ands	r3, r2
 8002e40:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	f003 0203 	and.w	r2, r3, #3
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	005b      	lsls	r3, r3, #1
 8002e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e52:	693a      	ldr	r2, [r7, #16]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	693a      	ldr	r2, [r7, #16]
 8002e5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	f000 809a 	beq.w	8002fa0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e6c:	4b55      	ldr	r3, [pc, #340]	; (8002fc4 <HAL_GPIO_Init+0x2cc>)
 8002e6e:	699b      	ldr	r3, [r3, #24]
 8002e70:	4a54      	ldr	r2, [pc, #336]	; (8002fc4 <HAL_GPIO_Init+0x2cc>)
 8002e72:	f043 0301 	orr.w	r3, r3, #1
 8002e76:	6193      	str	r3, [r2, #24]
 8002e78:	4b52      	ldr	r3, [pc, #328]	; (8002fc4 <HAL_GPIO_Init+0x2cc>)
 8002e7a:	699b      	ldr	r3, [r3, #24]
 8002e7c:	f003 0301 	and.w	r3, r3, #1
 8002e80:	60bb      	str	r3, [r7, #8]
 8002e82:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002e84:	4a50      	ldr	r2, [pc, #320]	; (8002fc8 <HAL_GPIO_Init+0x2d0>)
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	089b      	lsrs	r3, r3, #2
 8002e8a:	3302      	adds	r3, #2
 8002e8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e90:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	f003 0303 	and.w	r3, r3, #3
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	220f      	movs	r2, #15
 8002e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea0:	43db      	mvns	r3, r3
 8002ea2:	693a      	ldr	r2, [r7, #16]
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002eae:	d013      	beq.n	8002ed8 <HAL_GPIO_Init+0x1e0>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	4a46      	ldr	r2, [pc, #280]	; (8002fcc <HAL_GPIO_Init+0x2d4>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d00d      	beq.n	8002ed4 <HAL_GPIO_Init+0x1dc>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	4a45      	ldr	r2, [pc, #276]	; (8002fd0 <HAL_GPIO_Init+0x2d8>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d007      	beq.n	8002ed0 <HAL_GPIO_Init+0x1d8>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	4a44      	ldr	r2, [pc, #272]	; (8002fd4 <HAL_GPIO_Init+0x2dc>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d101      	bne.n	8002ecc <HAL_GPIO_Init+0x1d4>
 8002ec8:	2303      	movs	r3, #3
 8002eca:	e006      	b.n	8002eda <HAL_GPIO_Init+0x1e2>
 8002ecc:	2305      	movs	r3, #5
 8002ece:	e004      	b.n	8002eda <HAL_GPIO_Init+0x1e2>
 8002ed0:	2302      	movs	r3, #2
 8002ed2:	e002      	b.n	8002eda <HAL_GPIO_Init+0x1e2>
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e000      	b.n	8002eda <HAL_GPIO_Init+0x1e2>
 8002ed8:	2300      	movs	r3, #0
 8002eda:	697a      	ldr	r2, [r7, #20]
 8002edc:	f002 0203 	and.w	r2, r2, #3
 8002ee0:	0092      	lsls	r2, r2, #2
 8002ee2:	4093      	lsls	r3, r2
 8002ee4:	693a      	ldr	r2, [r7, #16]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002eea:	4937      	ldr	r1, [pc, #220]	; (8002fc8 <HAL_GPIO_Init+0x2d0>)
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	089b      	lsrs	r3, r3, #2
 8002ef0:	3302      	adds	r3, #2
 8002ef2:	693a      	ldr	r2, [r7, #16]
 8002ef4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ef8:	4b37      	ldr	r3, [pc, #220]	; (8002fd8 <HAL_GPIO_Init+0x2e0>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	43db      	mvns	r3, r3
 8002f02:	693a      	ldr	r2, [r7, #16]
 8002f04:	4013      	ands	r3, r2
 8002f06:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d003      	beq.n	8002f1c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002f14:	693a      	ldr	r2, [r7, #16]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002f1c:	4a2e      	ldr	r2, [pc, #184]	; (8002fd8 <HAL_GPIO_Init+0x2e0>)
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002f22:	4b2d      	ldr	r3, [pc, #180]	; (8002fd8 <HAL_GPIO_Init+0x2e0>)
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	43db      	mvns	r3, r3
 8002f2c:	693a      	ldr	r2, [r7, #16]
 8002f2e:	4013      	ands	r3, r2
 8002f30:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d003      	beq.n	8002f46 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002f3e:	693a      	ldr	r2, [r7, #16]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002f46:	4a24      	ldr	r2, [pc, #144]	; (8002fd8 <HAL_GPIO_Init+0x2e0>)
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f4c:	4b22      	ldr	r3, [pc, #136]	; (8002fd8 <HAL_GPIO_Init+0x2e0>)
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	43db      	mvns	r3, r3
 8002f56:	693a      	ldr	r2, [r7, #16]
 8002f58:	4013      	ands	r3, r2
 8002f5a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d003      	beq.n	8002f70 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002f68:	693a      	ldr	r2, [r7, #16]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002f70:	4a19      	ldr	r2, [pc, #100]	; (8002fd8 <HAL_GPIO_Init+0x2e0>)
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f76:	4b18      	ldr	r3, [pc, #96]	; (8002fd8 <HAL_GPIO_Init+0x2e0>)
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	43db      	mvns	r3, r3
 8002f80:	693a      	ldr	r2, [r7, #16]
 8002f82:	4013      	ands	r3, r2
 8002f84:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d003      	beq.n	8002f9a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002f92:	693a      	ldr	r2, [r7, #16]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002f9a:	4a0f      	ldr	r2, [pc, #60]	; (8002fd8 <HAL_GPIO_Init+0x2e0>)
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	fa22 f303 	lsr.w	r3, r2, r3
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	f47f aea9 	bne.w	8002d08 <HAL_GPIO_Init+0x10>
  }
}
 8002fb6:	bf00      	nop
 8002fb8:	bf00      	nop
 8002fba:	371c      	adds	r7, #28
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr
 8002fc4:	40021000 	.word	0x40021000
 8002fc8:	40010000 	.word	0x40010000
 8002fcc:	48000400 	.word	0x48000400
 8002fd0:	48000800 	.word	0x48000800
 8002fd4:	48000c00 	.word	0x48000c00
 8002fd8:	40010400 	.word	0x40010400

08002fdc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b085      	sub	sp, #20
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	460b      	mov	r3, r1
 8002fe6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	691a      	ldr	r2, [r3, #16]
 8002fec:	887b      	ldrh	r3, [r7, #2]
 8002fee:	4013      	ands	r3, r2
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d002      	beq.n	8002ffa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	73fb      	strb	r3, [r7, #15]
 8002ff8:	e001      	b.n	8002ffe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003000:	4618      	mov	r0, r3
 8003002:	3714      	adds	r7, #20
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr

0800300c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	460b      	mov	r3, r1
 8003016:	807b      	strh	r3, [r7, #2]
 8003018:	4613      	mov	r3, r2
 800301a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800301c:	787b      	ldrb	r3, [r7, #1]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d003      	beq.n	800302a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003022:	887a      	ldrh	r2, [r7, #2]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003028:	e002      	b.n	8003030 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800302a:	887a      	ldrh	r2, [r7, #2]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003030:	bf00      	nop
 8003032:	370c      	adds	r7, #12
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr

0800303c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8003042:	af00      	add	r7, sp, #0
 8003044:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003048:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800304c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800304e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003052:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d102      	bne.n	8003062 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	f001 b823 	b.w	80040a8 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003062:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003066:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0301 	and.w	r3, r3, #1
 8003072:	2b00      	cmp	r3, #0
 8003074:	f000 817d 	beq.w	8003372 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003078:	4bbc      	ldr	r3, [pc, #752]	; (800336c <HAL_RCC_OscConfig+0x330>)
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f003 030c 	and.w	r3, r3, #12
 8003080:	2b04      	cmp	r3, #4
 8003082:	d00c      	beq.n	800309e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003084:	4bb9      	ldr	r3, [pc, #740]	; (800336c <HAL_RCC_OscConfig+0x330>)
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f003 030c 	and.w	r3, r3, #12
 800308c:	2b08      	cmp	r3, #8
 800308e:	d15c      	bne.n	800314a <HAL_RCC_OscConfig+0x10e>
 8003090:	4bb6      	ldr	r3, [pc, #728]	; (800336c <HAL_RCC_OscConfig+0x330>)
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003098:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800309c:	d155      	bne.n	800314a <HAL_RCC_OscConfig+0x10e>
 800309e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030a2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030a6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80030aa:	fa93 f3a3 	rbit	r3, r3
 80030ae:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80030b2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030b6:	fab3 f383 	clz	r3, r3
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	095b      	lsrs	r3, r3, #5
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	f043 0301 	orr.w	r3, r3, #1
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d102      	bne.n	80030d0 <HAL_RCC_OscConfig+0x94>
 80030ca:	4ba8      	ldr	r3, [pc, #672]	; (800336c <HAL_RCC_OscConfig+0x330>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	e015      	b.n	80030fc <HAL_RCC_OscConfig+0xc0>
 80030d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030d4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030d8:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80030dc:	fa93 f3a3 	rbit	r3, r3
 80030e0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80030e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030e8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80030ec:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80030f0:	fa93 f3a3 	rbit	r3, r3
 80030f4:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80030f8:	4b9c      	ldr	r3, [pc, #624]	; (800336c <HAL_RCC_OscConfig+0x330>)
 80030fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003100:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8003104:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003108:	fa92 f2a2 	rbit	r2, r2
 800310c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8003110:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8003114:	fab2 f282 	clz	r2, r2
 8003118:	b2d2      	uxtb	r2, r2
 800311a:	f042 0220 	orr.w	r2, r2, #32
 800311e:	b2d2      	uxtb	r2, r2
 8003120:	f002 021f 	and.w	r2, r2, #31
 8003124:	2101      	movs	r1, #1
 8003126:	fa01 f202 	lsl.w	r2, r1, r2
 800312a:	4013      	ands	r3, r2
 800312c:	2b00      	cmp	r3, #0
 800312e:	f000 811f 	beq.w	8003370 <HAL_RCC_OscConfig+0x334>
 8003132:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003136:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	2b00      	cmp	r3, #0
 8003140:	f040 8116 	bne.w	8003370 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	f000 bfaf 	b.w	80040a8 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800314a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800314e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800315a:	d106      	bne.n	800316a <HAL_RCC_OscConfig+0x12e>
 800315c:	4b83      	ldr	r3, [pc, #524]	; (800336c <HAL_RCC_OscConfig+0x330>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a82      	ldr	r2, [pc, #520]	; (800336c <HAL_RCC_OscConfig+0x330>)
 8003162:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003166:	6013      	str	r3, [r2, #0]
 8003168:	e036      	b.n	80031d8 <HAL_RCC_OscConfig+0x19c>
 800316a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800316e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d10c      	bne.n	8003194 <HAL_RCC_OscConfig+0x158>
 800317a:	4b7c      	ldr	r3, [pc, #496]	; (800336c <HAL_RCC_OscConfig+0x330>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a7b      	ldr	r2, [pc, #492]	; (800336c <HAL_RCC_OscConfig+0x330>)
 8003180:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003184:	6013      	str	r3, [r2, #0]
 8003186:	4b79      	ldr	r3, [pc, #484]	; (800336c <HAL_RCC_OscConfig+0x330>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a78      	ldr	r2, [pc, #480]	; (800336c <HAL_RCC_OscConfig+0x330>)
 800318c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003190:	6013      	str	r3, [r2, #0]
 8003192:	e021      	b.n	80031d8 <HAL_RCC_OscConfig+0x19c>
 8003194:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003198:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031a4:	d10c      	bne.n	80031c0 <HAL_RCC_OscConfig+0x184>
 80031a6:	4b71      	ldr	r3, [pc, #452]	; (800336c <HAL_RCC_OscConfig+0x330>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a70      	ldr	r2, [pc, #448]	; (800336c <HAL_RCC_OscConfig+0x330>)
 80031ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031b0:	6013      	str	r3, [r2, #0]
 80031b2:	4b6e      	ldr	r3, [pc, #440]	; (800336c <HAL_RCC_OscConfig+0x330>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a6d      	ldr	r2, [pc, #436]	; (800336c <HAL_RCC_OscConfig+0x330>)
 80031b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031bc:	6013      	str	r3, [r2, #0]
 80031be:	e00b      	b.n	80031d8 <HAL_RCC_OscConfig+0x19c>
 80031c0:	4b6a      	ldr	r3, [pc, #424]	; (800336c <HAL_RCC_OscConfig+0x330>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a69      	ldr	r2, [pc, #420]	; (800336c <HAL_RCC_OscConfig+0x330>)
 80031c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031ca:	6013      	str	r3, [r2, #0]
 80031cc:	4b67      	ldr	r3, [pc, #412]	; (800336c <HAL_RCC_OscConfig+0x330>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a66      	ldr	r2, [pc, #408]	; (800336c <HAL_RCC_OscConfig+0x330>)
 80031d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031d6:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80031d8:	4b64      	ldr	r3, [pc, #400]	; (800336c <HAL_RCC_OscConfig+0x330>)
 80031da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031dc:	f023 020f 	bic.w	r2, r3, #15
 80031e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031e4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	495f      	ldr	r1, [pc, #380]	; (800336c <HAL_RCC_OscConfig+0x330>)
 80031ee:	4313      	orrs	r3, r2
 80031f0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d059      	beq.n	80032b6 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003202:	f7fe fd13 	bl	8001c2c <HAL_GetTick>
 8003206:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800320a:	e00a      	b.n	8003222 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800320c:	f7fe fd0e 	bl	8001c2c <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003216:	1ad3      	subs	r3, r2, r3
 8003218:	2b64      	cmp	r3, #100	; 0x64
 800321a:	d902      	bls.n	8003222 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800321c:	2303      	movs	r3, #3
 800321e:	f000 bf43 	b.w	80040a8 <HAL_RCC_OscConfig+0x106c>
 8003222:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003226:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800322a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800322e:	fa93 f3a3 	rbit	r3, r3
 8003232:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8003236:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800323a:	fab3 f383 	clz	r3, r3
 800323e:	b2db      	uxtb	r3, r3
 8003240:	095b      	lsrs	r3, r3, #5
 8003242:	b2db      	uxtb	r3, r3
 8003244:	f043 0301 	orr.w	r3, r3, #1
 8003248:	b2db      	uxtb	r3, r3
 800324a:	2b01      	cmp	r3, #1
 800324c:	d102      	bne.n	8003254 <HAL_RCC_OscConfig+0x218>
 800324e:	4b47      	ldr	r3, [pc, #284]	; (800336c <HAL_RCC_OscConfig+0x330>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	e015      	b.n	8003280 <HAL_RCC_OscConfig+0x244>
 8003254:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003258:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800325c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003260:	fa93 f3a3 	rbit	r3, r3
 8003264:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003268:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800326c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003270:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003274:	fa93 f3a3 	rbit	r3, r3
 8003278:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800327c:	4b3b      	ldr	r3, [pc, #236]	; (800336c <HAL_RCC_OscConfig+0x330>)
 800327e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003280:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003284:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8003288:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800328c:	fa92 f2a2 	rbit	r2, r2
 8003290:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8003294:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8003298:	fab2 f282 	clz	r2, r2
 800329c:	b2d2      	uxtb	r2, r2
 800329e:	f042 0220 	orr.w	r2, r2, #32
 80032a2:	b2d2      	uxtb	r2, r2
 80032a4:	f002 021f 	and.w	r2, r2, #31
 80032a8:	2101      	movs	r1, #1
 80032aa:	fa01 f202 	lsl.w	r2, r1, r2
 80032ae:	4013      	ands	r3, r2
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d0ab      	beq.n	800320c <HAL_RCC_OscConfig+0x1d0>
 80032b4:	e05d      	b.n	8003372 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032b6:	f7fe fcb9 	bl	8001c2c <HAL_GetTick>
 80032ba:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032be:	e00a      	b.n	80032d6 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032c0:	f7fe fcb4 	bl	8001c2c <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	2b64      	cmp	r3, #100	; 0x64
 80032ce:	d902      	bls.n	80032d6 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	f000 bee9 	b.w	80040a8 <HAL_RCC_OscConfig+0x106c>
 80032d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032da:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032de:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80032e2:	fa93 f3a3 	rbit	r3, r3
 80032e6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80032ea:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032ee:	fab3 f383 	clz	r3, r3
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	095b      	lsrs	r3, r3, #5
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	f043 0301 	orr.w	r3, r3, #1
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d102      	bne.n	8003308 <HAL_RCC_OscConfig+0x2cc>
 8003302:	4b1a      	ldr	r3, [pc, #104]	; (800336c <HAL_RCC_OscConfig+0x330>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	e015      	b.n	8003334 <HAL_RCC_OscConfig+0x2f8>
 8003308:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800330c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003310:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003314:	fa93 f3a3 	rbit	r3, r3
 8003318:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800331c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003320:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003324:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003328:	fa93 f3a3 	rbit	r3, r3
 800332c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003330:	4b0e      	ldr	r3, [pc, #56]	; (800336c <HAL_RCC_OscConfig+0x330>)
 8003332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003334:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003338:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800333c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003340:	fa92 f2a2 	rbit	r2, r2
 8003344:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8003348:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800334c:	fab2 f282 	clz	r2, r2
 8003350:	b2d2      	uxtb	r2, r2
 8003352:	f042 0220 	orr.w	r2, r2, #32
 8003356:	b2d2      	uxtb	r2, r2
 8003358:	f002 021f 	and.w	r2, r2, #31
 800335c:	2101      	movs	r1, #1
 800335e:	fa01 f202 	lsl.w	r2, r1, r2
 8003362:	4013      	ands	r3, r2
 8003364:	2b00      	cmp	r3, #0
 8003366:	d1ab      	bne.n	80032c0 <HAL_RCC_OscConfig+0x284>
 8003368:	e003      	b.n	8003372 <HAL_RCC_OscConfig+0x336>
 800336a:	bf00      	nop
 800336c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003370:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003372:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003376:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0302 	and.w	r3, r3, #2
 8003382:	2b00      	cmp	r3, #0
 8003384:	f000 817d 	beq.w	8003682 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003388:	4ba6      	ldr	r3, [pc, #664]	; (8003624 <HAL_RCC_OscConfig+0x5e8>)
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f003 030c 	and.w	r3, r3, #12
 8003390:	2b00      	cmp	r3, #0
 8003392:	d00b      	beq.n	80033ac <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003394:	4ba3      	ldr	r3, [pc, #652]	; (8003624 <HAL_RCC_OscConfig+0x5e8>)
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f003 030c 	and.w	r3, r3, #12
 800339c:	2b08      	cmp	r3, #8
 800339e:	d172      	bne.n	8003486 <HAL_RCC_OscConfig+0x44a>
 80033a0:	4ba0      	ldr	r3, [pc, #640]	; (8003624 <HAL_RCC_OscConfig+0x5e8>)
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d16c      	bne.n	8003486 <HAL_RCC_OscConfig+0x44a>
 80033ac:	2302      	movs	r3, #2
 80033ae:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80033b6:	fa93 f3a3 	rbit	r3, r3
 80033ba:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80033be:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033c2:	fab3 f383 	clz	r3, r3
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	095b      	lsrs	r3, r3, #5
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	f043 0301 	orr.w	r3, r3, #1
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d102      	bne.n	80033dc <HAL_RCC_OscConfig+0x3a0>
 80033d6:	4b93      	ldr	r3, [pc, #588]	; (8003624 <HAL_RCC_OscConfig+0x5e8>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	e013      	b.n	8003404 <HAL_RCC_OscConfig+0x3c8>
 80033dc:	2302      	movs	r3, #2
 80033de:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e2:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80033e6:	fa93 f3a3 	rbit	r3, r3
 80033ea:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80033ee:	2302      	movs	r3, #2
 80033f0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80033f4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80033f8:	fa93 f3a3 	rbit	r3, r3
 80033fc:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003400:	4b88      	ldr	r3, [pc, #544]	; (8003624 <HAL_RCC_OscConfig+0x5e8>)
 8003402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003404:	2202      	movs	r2, #2
 8003406:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800340a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800340e:	fa92 f2a2 	rbit	r2, r2
 8003412:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003416:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800341a:	fab2 f282 	clz	r2, r2
 800341e:	b2d2      	uxtb	r2, r2
 8003420:	f042 0220 	orr.w	r2, r2, #32
 8003424:	b2d2      	uxtb	r2, r2
 8003426:	f002 021f 	and.w	r2, r2, #31
 800342a:	2101      	movs	r1, #1
 800342c:	fa01 f202 	lsl.w	r2, r1, r2
 8003430:	4013      	ands	r3, r2
 8003432:	2b00      	cmp	r3, #0
 8003434:	d00a      	beq.n	800344c <HAL_RCC_OscConfig+0x410>
 8003436:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800343a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	691b      	ldr	r3, [r3, #16]
 8003442:	2b01      	cmp	r3, #1
 8003444:	d002      	beq.n	800344c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	f000 be2e 	b.w	80040a8 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800344c:	4b75      	ldr	r3, [pc, #468]	; (8003624 <HAL_RCC_OscConfig+0x5e8>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003454:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003458:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	695b      	ldr	r3, [r3, #20]
 8003460:	21f8      	movs	r1, #248	; 0xf8
 8003462:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003466:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800346a:	fa91 f1a1 	rbit	r1, r1
 800346e:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003472:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8003476:	fab1 f181 	clz	r1, r1
 800347a:	b2c9      	uxtb	r1, r1
 800347c:	408b      	lsls	r3, r1
 800347e:	4969      	ldr	r1, [pc, #420]	; (8003624 <HAL_RCC_OscConfig+0x5e8>)
 8003480:	4313      	orrs	r3, r2
 8003482:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003484:	e0fd      	b.n	8003682 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003486:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800348a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	2b00      	cmp	r3, #0
 8003494:	f000 8088 	beq.w	80035a8 <HAL_RCC_OscConfig+0x56c>
 8003498:	2301      	movs	r3, #1
 800349a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800349e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80034a2:	fa93 f3a3 	rbit	r3, r3
 80034a6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80034aa:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034ae:	fab3 f383 	clz	r3, r3
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80034b8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	461a      	mov	r2, r3
 80034c0:	2301      	movs	r3, #1
 80034c2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034c4:	f7fe fbb2 	bl	8001c2c <HAL_GetTick>
 80034c8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034cc:	e00a      	b.n	80034e4 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034ce:	f7fe fbad 	bl	8001c2c <HAL_GetTick>
 80034d2:	4602      	mov	r2, r0
 80034d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d902      	bls.n	80034e4 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	f000 bde2 	b.w	80040a8 <HAL_RCC_OscConfig+0x106c>
 80034e4:	2302      	movs	r3, #2
 80034e6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ea:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80034ee:	fa93 f3a3 	rbit	r3, r3
 80034f2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80034f6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034fa:	fab3 f383 	clz	r3, r3
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	095b      	lsrs	r3, r3, #5
 8003502:	b2db      	uxtb	r3, r3
 8003504:	f043 0301 	orr.w	r3, r3, #1
 8003508:	b2db      	uxtb	r3, r3
 800350a:	2b01      	cmp	r3, #1
 800350c:	d102      	bne.n	8003514 <HAL_RCC_OscConfig+0x4d8>
 800350e:	4b45      	ldr	r3, [pc, #276]	; (8003624 <HAL_RCC_OscConfig+0x5e8>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	e013      	b.n	800353c <HAL_RCC_OscConfig+0x500>
 8003514:	2302      	movs	r3, #2
 8003516:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800351a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800351e:	fa93 f3a3 	rbit	r3, r3
 8003522:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003526:	2302      	movs	r3, #2
 8003528:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800352c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003530:	fa93 f3a3 	rbit	r3, r3
 8003534:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003538:	4b3a      	ldr	r3, [pc, #232]	; (8003624 <HAL_RCC_OscConfig+0x5e8>)
 800353a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353c:	2202      	movs	r2, #2
 800353e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003542:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003546:	fa92 f2a2 	rbit	r2, r2
 800354a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800354e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003552:	fab2 f282 	clz	r2, r2
 8003556:	b2d2      	uxtb	r2, r2
 8003558:	f042 0220 	orr.w	r2, r2, #32
 800355c:	b2d2      	uxtb	r2, r2
 800355e:	f002 021f 	and.w	r2, r2, #31
 8003562:	2101      	movs	r1, #1
 8003564:	fa01 f202 	lsl.w	r2, r1, r2
 8003568:	4013      	ands	r3, r2
 800356a:	2b00      	cmp	r3, #0
 800356c:	d0af      	beq.n	80034ce <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800356e:	4b2d      	ldr	r3, [pc, #180]	; (8003624 <HAL_RCC_OscConfig+0x5e8>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003576:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800357a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	695b      	ldr	r3, [r3, #20]
 8003582:	21f8      	movs	r1, #248	; 0xf8
 8003584:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003588:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800358c:	fa91 f1a1 	rbit	r1, r1
 8003590:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003594:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003598:	fab1 f181 	clz	r1, r1
 800359c:	b2c9      	uxtb	r1, r1
 800359e:	408b      	lsls	r3, r1
 80035a0:	4920      	ldr	r1, [pc, #128]	; (8003624 <HAL_RCC_OscConfig+0x5e8>)
 80035a2:	4313      	orrs	r3, r2
 80035a4:	600b      	str	r3, [r1, #0]
 80035a6:	e06c      	b.n	8003682 <HAL_RCC_OscConfig+0x646>
 80035a8:	2301      	movs	r3, #1
 80035aa:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ae:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80035b2:	fa93 f3a3 	rbit	r3, r3
 80035b6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80035ba:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035be:	fab3 f383 	clz	r3, r3
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80035c8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	461a      	mov	r2, r3
 80035d0:	2300      	movs	r3, #0
 80035d2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035d4:	f7fe fb2a 	bl	8001c2c <HAL_GetTick>
 80035d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035dc:	e00a      	b.n	80035f4 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035de:	f7fe fb25 	bl	8001c2c <HAL_GetTick>
 80035e2:	4602      	mov	r2, r0
 80035e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d902      	bls.n	80035f4 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	f000 bd5a 	b.w	80040a8 <HAL_RCC_OscConfig+0x106c>
 80035f4:	2302      	movs	r3, #2
 80035f6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035fa:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80035fe:	fa93 f3a3 	rbit	r3, r3
 8003602:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003606:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800360a:	fab3 f383 	clz	r3, r3
 800360e:	b2db      	uxtb	r3, r3
 8003610:	095b      	lsrs	r3, r3, #5
 8003612:	b2db      	uxtb	r3, r3
 8003614:	f043 0301 	orr.w	r3, r3, #1
 8003618:	b2db      	uxtb	r3, r3
 800361a:	2b01      	cmp	r3, #1
 800361c:	d104      	bne.n	8003628 <HAL_RCC_OscConfig+0x5ec>
 800361e:	4b01      	ldr	r3, [pc, #4]	; (8003624 <HAL_RCC_OscConfig+0x5e8>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	e015      	b.n	8003650 <HAL_RCC_OscConfig+0x614>
 8003624:	40021000 	.word	0x40021000
 8003628:	2302      	movs	r3, #2
 800362a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800362e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003632:	fa93 f3a3 	rbit	r3, r3
 8003636:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800363a:	2302      	movs	r3, #2
 800363c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003640:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003644:	fa93 f3a3 	rbit	r3, r3
 8003648:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800364c:	4bc8      	ldr	r3, [pc, #800]	; (8003970 <HAL_RCC_OscConfig+0x934>)
 800364e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003650:	2202      	movs	r2, #2
 8003652:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003656:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800365a:	fa92 f2a2 	rbit	r2, r2
 800365e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003662:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003666:	fab2 f282 	clz	r2, r2
 800366a:	b2d2      	uxtb	r2, r2
 800366c:	f042 0220 	orr.w	r2, r2, #32
 8003670:	b2d2      	uxtb	r2, r2
 8003672:	f002 021f 	and.w	r2, r2, #31
 8003676:	2101      	movs	r1, #1
 8003678:	fa01 f202 	lsl.w	r2, r1, r2
 800367c:	4013      	ands	r3, r2
 800367e:	2b00      	cmp	r3, #0
 8003680:	d1ad      	bne.n	80035de <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003682:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003686:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 0308 	and.w	r3, r3, #8
 8003692:	2b00      	cmp	r3, #0
 8003694:	f000 8110 	beq.w	80038b8 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003698:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800369c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	699b      	ldr	r3, [r3, #24]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d079      	beq.n	800379c <HAL_RCC_OscConfig+0x760>
 80036a8:	2301      	movs	r3, #1
 80036aa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ae:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80036b2:	fa93 f3a3 	rbit	r3, r3
 80036b6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80036ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036be:	fab3 f383 	clz	r3, r3
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	461a      	mov	r2, r3
 80036c6:	4bab      	ldr	r3, [pc, #684]	; (8003974 <HAL_RCC_OscConfig+0x938>)
 80036c8:	4413      	add	r3, r2
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	461a      	mov	r2, r3
 80036ce:	2301      	movs	r3, #1
 80036d0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036d2:	f7fe faab 	bl	8001c2c <HAL_GetTick>
 80036d6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036da:	e00a      	b.n	80036f2 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036dc:	f7fe faa6 	bl	8001c2c <HAL_GetTick>
 80036e0:	4602      	mov	r2, r0
 80036e2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	2b02      	cmp	r3, #2
 80036ea:	d902      	bls.n	80036f2 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80036ec:	2303      	movs	r3, #3
 80036ee:	f000 bcdb 	b.w	80040a8 <HAL_RCC_OscConfig+0x106c>
 80036f2:	2302      	movs	r3, #2
 80036f4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80036fc:	fa93 f3a3 	rbit	r3, r3
 8003700:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003704:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003708:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800370c:	2202      	movs	r2, #2
 800370e:	601a      	str	r2, [r3, #0]
 8003710:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003714:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	fa93 f2a3 	rbit	r2, r3
 800371e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003722:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003726:	601a      	str	r2, [r3, #0]
 8003728:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800372c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003730:	2202      	movs	r2, #2
 8003732:	601a      	str	r2, [r3, #0]
 8003734:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003738:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	fa93 f2a3 	rbit	r2, r3
 8003742:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003746:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800374a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800374c:	4b88      	ldr	r3, [pc, #544]	; (8003970 <HAL_RCC_OscConfig+0x934>)
 800374e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003750:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003754:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003758:	2102      	movs	r1, #2
 800375a:	6019      	str	r1, [r3, #0]
 800375c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003760:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	fa93 f1a3 	rbit	r1, r3
 800376a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800376e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003772:	6019      	str	r1, [r3, #0]
  return result;
 8003774:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003778:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	fab3 f383 	clz	r3, r3
 8003782:	b2db      	uxtb	r3, r3
 8003784:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003788:	b2db      	uxtb	r3, r3
 800378a:	f003 031f 	and.w	r3, r3, #31
 800378e:	2101      	movs	r1, #1
 8003790:	fa01 f303 	lsl.w	r3, r1, r3
 8003794:	4013      	ands	r3, r2
 8003796:	2b00      	cmp	r3, #0
 8003798:	d0a0      	beq.n	80036dc <HAL_RCC_OscConfig+0x6a0>
 800379a:	e08d      	b.n	80038b8 <HAL_RCC_OscConfig+0x87c>
 800379c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037a0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80037a4:	2201      	movs	r2, #1
 80037a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037ac:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	fa93 f2a3 	rbit	r2, r3
 80037b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037ba:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80037be:	601a      	str	r2, [r3, #0]
  return result;
 80037c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037c4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80037c8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037ca:	fab3 f383 	clz	r3, r3
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	461a      	mov	r2, r3
 80037d2:	4b68      	ldr	r3, [pc, #416]	; (8003974 <HAL_RCC_OscConfig+0x938>)
 80037d4:	4413      	add	r3, r2
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	461a      	mov	r2, r3
 80037da:	2300      	movs	r3, #0
 80037dc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037de:	f7fe fa25 	bl	8001c2c <HAL_GetTick>
 80037e2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037e6:	e00a      	b.n	80037fe <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037e8:	f7fe fa20 	bl	8001c2c <HAL_GetTick>
 80037ec:	4602      	mov	r2, r0
 80037ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80037f2:	1ad3      	subs	r3, r2, r3
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	d902      	bls.n	80037fe <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80037f8:	2303      	movs	r3, #3
 80037fa:	f000 bc55 	b.w	80040a8 <HAL_RCC_OscConfig+0x106c>
 80037fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003802:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003806:	2202      	movs	r2, #2
 8003808:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800380a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800380e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	fa93 f2a3 	rbit	r2, r3
 8003818:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800381c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003820:	601a      	str	r2, [r3, #0]
 8003822:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003826:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800382a:	2202      	movs	r2, #2
 800382c:	601a      	str	r2, [r3, #0]
 800382e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003832:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	fa93 f2a3 	rbit	r2, r3
 800383c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003840:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003844:	601a      	str	r2, [r3, #0]
 8003846:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800384a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800384e:	2202      	movs	r2, #2
 8003850:	601a      	str	r2, [r3, #0]
 8003852:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003856:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	fa93 f2a3 	rbit	r2, r3
 8003860:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003864:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003868:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800386a:	4b41      	ldr	r3, [pc, #260]	; (8003970 <HAL_RCC_OscConfig+0x934>)
 800386c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800386e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003872:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003876:	2102      	movs	r1, #2
 8003878:	6019      	str	r1, [r3, #0]
 800387a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800387e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	fa93 f1a3 	rbit	r1, r3
 8003888:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800388c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003890:	6019      	str	r1, [r3, #0]
  return result;
 8003892:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003896:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	fab3 f383 	clz	r3, r3
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	f003 031f 	and.w	r3, r3, #31
 80038ac:	2101      	movs	r1, #1
 80038ae:	fa01 f303 	lsl.w	r3, r1, r3
 80038b2:	4013      	ands	r3, r2
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d197      	bne.n	80037e8 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038bc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 0304 	and.w	r3, r3, #4
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	f000 81a1 	beq.w	8003c10 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038ce:	2300      	movs	r3, #0
 80038d0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038d4:	4b26      	ldr	r3, [pc, #152]	; (8003970 <HAL_RCC_OscConfig+0x934>)
 80038d6:	69db      	ldr	r3, [r3, #28]
 80038d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d116      	bne.n	800390e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038e0:	4b23      	ldr	r3, [pc, #140]	; (8003970 <HAL_RCC_OscConfig+0x934>)
 80038e2:	69db      	ldr	r3, [r3, #28]
 80038e4:	4a22      	ldr	r2, [pc, #136]	; (8003970 <HAL_RCC_OscConfig+0x934>)
 80038e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038ea:	61d3      	str	r3, [r2, #28]
 80038ec:	4b20      	ldr	r3, [pc, #128]	; (8003970 <HAL_RCC_OscConfig+0x934>)
 80038ee:	69db      	ldr	r3, [r3, #28]
 80038f0:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80038f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038f8:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80038fc:	601a      	str	r2, [r3, #0]
 80038fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003902:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003906:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003908:	2301      	movs	r3, #1
 800390a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800390e:	4b1a      	ldr	r3, [pc, #104]	; (8003978 <HAL_RCC_OscConfig+0x93c>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003916:	2b00      	cmp	r3, #0
 8003918:	d11a      	bne.n	8003950 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800391a:	4b17      	ldr	r3, [pc, #92]	; (8003978 <HAL_RCC_OscConfig+0x93c>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a16      	ldr	r2, [pc, #88]	; (8003978 <HAL_RCC_OscConfig+0x93c>)
 8003920:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003924:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003926:	f7fe f981 	bl	8001c2c <HAL_GetTick>
 800392a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800392e:	e009      	b.n	8003944 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003930:	f7fe f97c 	bl	8001c2c <HAL_GetTick>
 8003934:	4602      	mov	r2, r0
 8003936:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	2b64      	cmp	r3, #100	; 0x64
 800393e:	d901      	bls.n	8003944 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003940:	2303      	movs	r3, #3
 8003942:	e3b1      	b.n	80040a8 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003944:	4b0c      	ldr	r3, [pc, #48]	; (8003978 <HAL_RCC_OscConfig+0x93c>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800394c:	2b00      	cmp	r3, #0
 800394e:	d0ef      	beq.n	8003930 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003950:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003954:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	2b01      	cmp	r3, #1
 800395e:	d10d      	bne.n	800397c <HAL_RCC_OscConfig+0x940>
 8003960:	4b03      	ldr	r3, [pc, #12]	; (8003970 <HAL_RCC_OscConfig+0x934>)
 8003962:	6a1b      	ldr	r3, [r3, #32]
 8003964:	4a02      	ldr	r2, [pc, #8]	; (8003970 <HAL_RCC_OscConfig+0x934>)
 8003966:	f043 0301 	orr.w	r3, r3, #1
 800396a:	6213      	str	r3, [r2, #32]
 800396c:	e03c      	b.n	80039e8 <HAL_RCC_OscConfig+0x9ac>
 800396e:	bf00      	nop
 8003970:	40021000 	.word	0x40021000
 8003974:	10908120 	.word	0x10908120
 8003978:	40007000 	.word	0x40007000
 800397c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003980:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d10c      	bne.n	80039a6 <HAL_RCC_OscConfig+0x96a>
 800398c:	4bc1      	ldr	r3, [pc, #772]	; (8003c94 <HAL_RCC_OscConfig+0xc58>)
 800398e:	6a1b      	ldr	r3, [r3, #32]
 8003990:	4ac0      	ldr	r2, [pc, #768]	; (8003c94 <HAL_RCC_OscConfig+0xc58>)
 8003992:	f023 0301 	bic.w	r3, r3, #1
 8003996:	6213      	str	r3, [r2, #32]
 8003998:	4bbe      	ldr	r3, [pc, #760]	; (8003c94 <HAL_RCC_OscConfig+0xc58>)
 800399a:	6a1b      	ldr	r3, [r3, #32]
 800399c:	4abd      	ldr	r2, [pc, #756]	; (8003c94 <HAL_RCC_OscConfig+0xc58>)
 800399e:	f023 0304 	bic.w	r3, r3, #4
 80039a2:	6213      	str	r3, [r2, #32]
 80039a4:	e020      	b.n	80039e8 <HAL_RCC_OscConfig+0x9ac>
 80039a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	2b05      	cmp	r3, #5
 80039b4:	d10c      	bne.n	80039d0 <HAL_RCC_OscConfig+0x994>
 80039b6:	4bb7      	ldr	r3, [pc, #732]	; (8003c94 <HAL_RCC_OscConfig+0xc58>)
 80039b8:	6a1b      	ldr	r3, [r3, #32]
 80039ba:	4ab6      	ldr	r2, [pc, #728]	; (8003c94 <HAL_RCC_OscConfig+0xc58>)
 80039bc:	f043 0304 	orr.w	r3, r3, #4
 80039c0:	6213      	str	r3, [r2, #32]
 80039c2:	4bb4      	ldr	r3, [pc, #720]	; (8003c94 <HAL_RCC_OscConfig+0xc58>)
 80039c4:	6a1b      	ldr	r3, [r3, #32]
 80039c6:	4ab3      	ldr	r2, [pc, #716]	; (8003c94 <HAL_RCC_OscConfig+0xc58>)
 80039c8:	f043 0301 	orr.w	r3, r3, #1
 80039cc:	6213      	str	r3, [r2, #32]
 80039ce:	e00b      	b.n	80039e8 <HAL_RCC_OscConfig+0x9ac>
 80039d0:	4bb0      	ldr	r3, [pc, #704]	; (8003c94 <HAL_RCC_OscConfig+0xc58>)
 80039d2:	6a1b      	ldr	r3, [r3, #32]
 80039d4:	4aaf      	ldr	r2, [pc, #700]	; (8003c94 <HAL_RCC_OscConfig+0xc58>)
 80039d6:	f023 0301 	bic.w	r3, r3, #1
 80039da:	6213      	str	r3, [r2, #32]
 80039dc:	4bad      	ldr	r3, [pc, #692]	; (8003c94 <HAL_RCC_OscConfig+0xc58>)
 80039de:	6a1b      	ldr	r3, [r3, #32]
 80039e0:	4aac      	ldr	r2, [pc, #688]	; (8003c94 <HAL_RCC_OscConfig+0xc58>)
 80039e2:	f023 0304 	bic.w	r3, r3, #4
 80039e6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80039e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039ec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	f000 8081 	beq.w	8003afc <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039fa:	f7fe f917 	bl	8001c2c <HAL_GetTick>
 80039fe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a02:	e00b      	b.n	8003a1c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a04:	f7fe f912 	bl	8001c2c <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a0e:	1ad3      	subs	r3, r2, r3
 8003a10:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d901      	bls.n	8003a1c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003a18:	2303      	movs	r3, #3
 8003a1a:	e345      	b.n	80040a8 <HAL_RCC_OscConfig+0x106c>
 8003a1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a20:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003a24:	2202      	movs	r2, #2
 8003a26:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a2c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	fa93 f2a3 	rbit	r2, r3
 8003a36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a3a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003a3e:	601a      	str	r2, [r3, #0]
 8003a40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a44:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003a48:	2202      	movs	r2, #2
 8003a4a:	601a      	str	r2, [r3, #0]
 8003a4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a50:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	fa93 f2a3 	rbit	r2, r3
 8003a5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a5e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003a62:	601a      	str	r2, [r3, #0]
  return result;
 8003a64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a68:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003a6c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a6e:	fab3 f383 	clz	r3, r3
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	095b      	lsrs	r3, r3, #5
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	f043 0302 	orr.w	r3, r3, #2
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d102      	bne.n	8003a88 <HAL_RCC_OscConfig+0xa4c>
 8003a82:	4b84      	ldr	r3, [pc, #528]	; (8003c94 <HAL_RCC_OscConfig+0xc58>)
 8003a84:	6a1b      	ldr	r3, [r3, #32]
 8003a86:	e013      	b.n	8003ab0 <HAL_RCC_OscConfig+0xa74>
 8003a88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a8c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003a90:	2202      	movs	r2, #2
 8003a92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a98:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	fa93 f2a3 	rbit	r2, r3
 8003aa2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aa6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003aaa:	601a      	str	r2, [r3, #0]
 8003aac:	4b79      	ldr	r3, [pc, #484]	; (8003c94 <HAL_RCC_OscConfig+0xc58>)
 8003aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ab4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003ab8:	2102      	movs	r1, #2
 8003aba:	6011      	str	r1, [r2, #0]
 8003abc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ac0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003ac4:	6812      	ldr	r2, [r2, #0]
 8003ac6:	fa92 f1a2 	rbit	r1, r2
 8003aca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ace:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003ad2:	6011      	str	r1, [r2, #0]
  return result;
 8003ad4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ad8:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003adc:	6812      	ldr	r2, [r2, #0]
 8003ade:	fab2 f282 	clz	r2, r2
 8003ae2:	b2d2      	uxtb	r2, r2
 8003ae4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ae8:	b2d2      	uxtb	r2, r2
 8003aea:	f002 021f 	and.w	r2, r2, #31
 8003aee:	2101      	movs	r1, #1
 8003af0:	fa01 f202 	lsl.w	r2, r1, r2
 8003af4:	4013      	ands	r3, r2
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d084      	beq.n	8003a04 <HAL_RCC_OscConfig+0x9c8>
 8003afa:	e07f      	b.n	8003bfc <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003afc:	f7fe f896 	bl	8001c2c <HAL_GetTick>
 8003b00:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b04:	e00b      	b.n	8003b1e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b06:	f7fe f891 	bl	8001c2c <HAL_GetTick>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d901      	bls.n	8003b1e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e2c4      	b.n	80040a8 <HAL_RCC_OscConfig+0x106c>
 8003b1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b22:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003b26:	2202      	movs	r2, #2
 8003b28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b2e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	fa93 f2a3 	rbit	r2, r3
 8003b38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b3c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003b40:	601a      	str	r2, [r3, #0]
 8003b42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b46:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003b4a:	2202      	movs	r2, #2
 8003b4c:	601a      	str	r2, [r3, #0]
 8003b4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b52:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	fa93 f2a3 	rbit	r2, r3
 8003b5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b60:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003b64:	601a      	str	r2, [r3, #0]
  return result;
 8003b66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b6a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003b6e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b70:	fab3 f383 	clz	r3, r3
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	095b      	lsrs	r3, r3, #5
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	f043 0302 	orr.w	r3, r3, #2
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	2b02      	cmp	r3, #2
 8003b82:	d102      	bne.n	8003b8a <HAL_RCC_OscConfig+0xb4e>
 8003b84:	4b43      	ldr	r3, [pc, #268]	; (8003c94 <HAL_RCC_OscConfig+0xc58>)
 8003b86:	6a1b      	ldr	r3, [r3, #32]
 8003b88:	e013      	b.n	8003bb2 <HAL_RCC_OscConfig+0xb76>
 8003b8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b8e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003b92:	2202      	movs	r2, #2
 8003b94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b9a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	fa93 f2a3 	rbit	r2, r3
 8003ba4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ba8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003bac:	601a      	str	r2, [r3, #0]
 8003bae:	4b39      	ldr	r3, [pc, #228]	; (8003c94 <HAL_RCC_OscConfig+0xc58>)
 8003bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003bb6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003bba:	2102      	movs	r1, #2
 8003bbc:	6011      	str	r1, [r2, #0]
 8003bbe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003bc2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003bc6:	6812      	ldr	r2, [r2, #0]
 8003bc8:	fa92 f1a2 	rbit	r1, r2
 8003bcc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003bd0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003bd4:	6011      	str	r1, [r2, #0]
  return result;
 8003bd6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003bda:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003bde:	6812      	ldr	r2, [r2, #0]
 8003be0:	fab2 f282 	clz	r2, r2
 8003be4:	b2d2      	uxtb	r2, r2
 8003be6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003bea:	b2d2      	uxtb	r2, r2
 8003bec:	f002 021f 	and.w	r2, r2, #31
 8003bf0:	2101      	movs	r1, #1
 8003bf2:	fa01 f202 	lsl.w	r2, r1, r2
 8003bf6:	4013      	ands	r3, r2
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d184      	bne.n	8003b06 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003bfc:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d105      	bne.n	8003c10 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c04:	4b23      	ldr	r3, [pc, #140]	; (8003c94 <HAL_RCC_OscConfig+0xc58>)
 8003c06:	69db      	ldr	r3, [r3, #28]
 8003c08:	4a22      	ldr	r2, [pc, #136]	; (8003c94 <HAL_RCC_OscConfig+0xc58>)
 8003c0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c0e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c14:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	69db      	ldr	r3, [r3, #28]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	f000 8242 	beq.w	80040a6 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c22:	4b1c      	ldr	r3, [pc, #112]	; (8003c94 <HAL_RCC_OscConfig+0xc58>)
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	f003 030c 	and.w	r3, r3, #12
 8003c2a:	2b08      	cmp	r3, #8
 8003c2c:	f000 8213 	beq.w	8004056 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c34:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	69db      	ldr	r3, [r3, #28]
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	f040 8162 	bne.w	8003f06 <HAL_RCC_OscConfig+0xeca>
 8003c42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c46:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003c4a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003c4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c54:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	fa93 f2a3 	rbit	r2, r3
 8003c5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c62:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003c66:	601a      	str	r2, [r3, #0]
  return result;
 8003c68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c6c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003c70:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c72:	fab3 f383 	clz	r3, r3
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003c7c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	461a      	mov	r2, r3
 8003c84:	2300      	movs	r3, #0
 8003c86:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c88:	f7fd ffd0 	bl	8001c2c <HAL_GetTick>
 8003c8c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c90:	e00c      	b.n	8003cac <HAL_RCC_OscConfig+0xc70>
 8003c92:	bf00      	nop
 8003c94:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c98:	f7fd ffc8 	bl	8001c2c <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003ca2:	1ad3      	subs	r3, r2, r3
 8003ca4:	2b02      	cmp	r3, #2
 8003ca6:	d901      	bls.n	8003cac <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003ca8:	2303      	movs	r3, #3
 8003caa:	e1fd      	b.n	80040a8 <HAL_RCC_OscConfig+0x106c>
 8003cac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cb0:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003cb4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003cb8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cbe:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	fa93 f2a3 	rbit	r2, r3
 8003cc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ccc:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003cd0:	601a      	str	r2, [r3, #0]
  return result;
 8003cd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cd6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003cda:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cdc:	fab3 f383 	clz	r3, r3
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	095b      	lsrs	r3, r3, #5
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	f043 0301 	orr.w	r3, r3, #1
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d102      	bne.n	8003cf6 <HAL_RCC_OscConfig+0xcba>
 8003cf0:	4bb0      	ldr	r3, [pc, #704]	; (8003fb4 <HAL_RCC_OscConfig+0xf78>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	e027      	b.n	8003d46 <HAL_RCC_OscConfig+0xd0a>
 8003cf6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cfa:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003cfe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d02:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d08:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	fa93 f2a3 	rbit	r2, r3
 8003d12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d16:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003d1a:	601a      	str	r2, [r3, #0]
 8003d1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d20:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003d24:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d28:	601a      	str	r2, [r3, #0]
 8003d2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d2e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	fa93 f2a3 	rbit	r2, r3
 8003d38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d3c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003d40:	601a      	str	r2, [r3, #0]
 8003d42:	4b9c      	ldr	r3, [pc, #624]	; (8003fb4 <HAL_RCC_OscConfig+0xf78>)
 8003d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d46:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003d4a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003d4e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003d52:	6011      	str	r1, [r2, #0]
 8003d54:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003d58:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003d5c:	6812      	ldr	r2, [r2, #0]
 8003d5e:	fa92 f1a2 	rbit	r1, r2
 8003d62:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003d66:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003d6a:	6011      	str	r1, [r2, #0]
  return result;
 8003d6c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003d70:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003d74:	6812      	ldr	r2, [r2, #0]
 8003d76:	fab2 f282 	clz	r2, r2
 8003d7a:	b2d2      	uxtb	r2, r2
 8003d7c:	f042 0220 	orr.w	r2, r2, #32
 8003d80:	b2d2      	uxtb	r2, r2
 8003d82:	f002 021f 	and.w	r2, r2, #31
 8003d86:	2101      	movs	r1, #1
 8003d88:	fa01 f202 	lsl.w	r2, r1, r2
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d182      	bne.n	8003c98 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d92:	4b88      	ldr	r3, [pc, #544]	; (8003fb4 <HAL_RCC_OscConfig+0xf78>)
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003d9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d9e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003da6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003daa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	6a1b      	ldr	r3, [r3, #32]
 8003db2:	430b      	orrs	r3, r1
 8003db4:	497f      	ldr	r1, [pc, #508]	; (8003fb4 <HAL_RCC_OscConfig+0xf78>)
 8003db6:	4313      	orrs	r3, r2
 8003db8:	604b      	str	r3, [r1, #4]
 8003dba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dbe:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003dc2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003dc6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dcc:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	fa93 f2a3 	rbit	r2, r3
 8003dd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dda:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003dde:	601a      	str	r2, [r3, #0]
  return result;
 8003de0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003de4:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003de8:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003dea:	fab3 f383 	clz	r3, r3
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003df4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003df8:	009b      	lsls	r3, r3, #2
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e00:	f7fd ff14 	bl	8001c2c <HAL_GetTick>
 8003e04:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e08:	e009      	b.n	8003e1e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e0a:	f7fd ff0f 	bl	8001c2c <HAL_GetTick>
 8003e0e:	4602      	mov	r2, r0
 8003e10:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	2b02      	cmp	r3, #2
 8003e18:	d901      	bls.n	8003e1e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e144      	b.n	80040a8 <HAL_RCC_OscConfig+0x106c>
 8003e1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e22:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003e26:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e2a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e30:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	fa93 f2a3 	rbit	r2, r3
 8003e3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e3e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003e42:	601a      	str	r2, [r3, #0]
  return result;
 8003e44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e48:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003e4c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e4e:	fab3 f383 	clz	r3, r3
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	095b      	lsrs	r3, r3, #5
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	f043 0301 	orr.w	r3, r3, #1
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d102      	bne.n	8003e68 <HAL_RCC_OscConfig+0xe2c>
 8003e62:	4b54      	ldr	r3, [pc, #336]	; (8003fb4 <HAL_RCC_OscConfig+0xf78>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	e027      	b.n	8003eb8 <HAL_RCC_OscConfig+0xe7c>
 8003e68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e6c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003e70:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e7a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	fa93 f2a3 	rbit	r2, r3
 8003e84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e88:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003e8c:	601a      	str	r2, [r3, #0]
 8003e8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e92:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003e96:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e9a:	601a      	str	r2, [r3, #0]
 8003e9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ea0:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	fa93 f2a3 	rbit	r2, r3
 8003eaa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003eae:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003eb2:	601a      	str	r2, [r3, #0]
 8003eb4:	4b3f      	ldr	r3, [pc, #252]	; (8003fb4 <HAL_RCC_OscConfig+0xf78>)
 8003eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ebc:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003ec0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003ec4:	6011      	str	r1, [r2, #0]
 8003ec6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003eca:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003ece:	6812      	ldr	r2, [r2, #0]
 8003ed0:	fa92 f1a2 	rbit	r1, r2
 8003ed4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ed8:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003edc:	6011      	str	r1, [r2, #0]
  return result;
 8003ede:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ee2:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003ee6:	6812      	ldr	r2, [r2, #0]
 8003ee8:	fab2 f282 	clz	r2, r2
 8003eec:	b2d2      	uxtb	r2, r2
 8003eee:	f042 0220 	orr.w	r2, r2, #32
 8003ef2:	b2d2      	uxtb	r2, r2
 8003ef4:	f002 021f 	and.w	r2, r2, #31
 8003ef8:	2101      	movs	r1, #1
 8003efa:	fa01 f202 	lsl.w	r2, r1, r2
 8003efe:	4013      	ands	r3, r2
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d082      	beq.n	8003e0a <HAL_RCC_OscConfig+0xdce>
 8003f04:	e0cf      	b.n	80040a6 <HAL_RCC_OscConfig+0x106a>
 8003f06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f0a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003f0e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003f12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f18:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	fa93 f2a3 	rbit	r2, r3
 8003f22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f26:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003f2a:	601a      	str	r2, [r3, #0]
  return result;
 8003f2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f30:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003f34:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f36:	fab3 f383 	clz	r3, r3
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003f40:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	461a      	mov	r2, r3
 8003f48:	2300      	movs	r3, #0
 8003f4a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f4c:	f7fd fe6e 	bl	8001c2c <HAL_GetTick>
 8003f50:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f54:	e009      	b.n	8003f6a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f56:	f7fd fe69 	bl	8001c2c <HAL_GetTick>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	2b02      	cmp	r3, #2
 8003f64:	d901      	bls.n	8003f6a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003f66:	2303      	movs	r3, #3
 8003f68:	e09e      	b.n	80040a8 <HAL_RCC_OscConfig+0x106c>
 8003f6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f6e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003f72:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f7c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	fa93 f2a3 	rbit	r2, r3
 8003f86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f8a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003f8e:	601a      	str	r2, [r3, #0]
  return result;
 8003f90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f94:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003f98:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f9a:	fab3 f383 	clz	r3, r3
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	095b      	lsrs	r3, r3, #5
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	f043 0301 	orr.w	r3, r3, #1
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d104      	bne.n	8003fb8 <HAL_RCC_OscConfig+0xf7c>
 8003fae:	4b01      	ldr	r3, [pc, #4]	; (8003fb4 <HAL_RCC_OscConfig+0xf78>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	e029      	b.n	8004008 <HAL_RCC_OscConfig+0xfcc>
 8003fb4:	40021000 	.word	0x40021000
 8003fb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fbc:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003fc0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003fc4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fca:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	fa93 f2a3 	rbit	r2, r3
 8003fd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fd8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003fdc:	601a      	str	r2, [r3, #0]
 8003fde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fe2:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003fe6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003fea:	601a      	str	r2, [r3, #0]
 8003fec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ff0:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	fa93 f2a3 	rbit	r2, r3
 8003ffa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ffe:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004002:	601a      	str	r2, [r3, #0]
 8004004:	4b2b      	ldr	r3, [pc, #172]	; (80040b4 <HAL_RCC_OscConfig+0x1078>)
 8004006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004008:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800400c:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004010:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004014:	6011      	str	r1, [r2, #0]
 8004016:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800401a:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800401e:	6812      	ldr	r2, [r2, #0]
 8004020:	fa92 f1a2 	rbit	r1, r2
 8004024:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004028:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800402c:	6011      	str	r1, [r2, #0]
  return result;
 800402e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004032:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004036:	6812      	ldr	r2, [r2, #0]
 8004038:	fab2 f282 	clz	r2, r2
 800403c:	b2d2      	uxtb	r2, r2
 800403e:	f042 0220 	orr.w	r2, r2, #32
 8004042:	b2d2      	uxtb	r2, r2
 8004044:	f002 021f 	and.w	r2, r2, #31
 8004048:	2101      	movs	r1, #1
 800404a:	fa01 f202 	lsl.w	r2, r1, r2
 800404e:	4013      	ands	r3, r2
 8004050:	2b00      	cmp	r3, #0
 8004052:	d180      	bne.n	8003f56 <HAL_RCC_OscConfig+0xf1a>
 8004054:	e027      	b.n	80040a6 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004056:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800405a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	69db      	ldr	r3, [r3, #28]
 8004062:	2b01      	cmp	r3, #1
 8004064:	d101      	bne.n	800406a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	e01e      	b.n	80040a8 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800406a:	4b12      	ldr	r3, [pc, #72]	; (80040b4 <HAL_RCC_OscConfig+0x1078>)
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004072:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004076:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800407a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800407e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	6a1b      	ldr	r3, [r3, #32]
 8004086:	429a      	cmp	r2, r3
 8004088:	d10b      	bne.n	80040a2 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800408a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800408e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004092:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004096:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800409e:	429a      	cmp	r2, r3
 80040a0:	d001      	beq.n	80040a6 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e000      	b.n	80040a8 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80040a6:	2300      	movs	r3, #0
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	40021000 	.word	0x40021000

080040b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b09e      	sub	sp, #120	; 0x78
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80040c2:	2300      	movs	r3, #0
 80040c4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d101      	bne.n	80040d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e162      	b.n	8004396 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040d0:	4b90      	ldr	r3, [pc, #576]	; (8004314 <HAL_RCC_ClockConfig+0x25c>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 0307 	and.w	r3, r3, #7
 80040d8:	683a      	ldr	r2, [r7, #0]
 80040da:	429a      	cmp	r2, r3
 80040dc:	d910      	bls.n	8004100 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040de:	4b8d      	ldr	r3, [pc, #564]	; (8004314 <HAL_RCC_ClockConfig+0x25c>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f023 0207 	bic.w	r2, r3, #7
 80040e6:	498b      	ldr	r1, [pc, #556]	; (8004314 <HAL_RCC_ClockConfig+0x25c>)
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ee:	4b89      	ldr	r3, [pc, #548]	; (8004314 <HAL_RCC_ClockConfig+0x25c>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0307 	and.w	r3, r3, #7
 80040f6:	683a      	ldr	r2, [r7, #0]
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d001      	beq.n	8004100 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e14a      	b.n	8004396 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 0302 	and.w	r3, r3, #2
 8004108:	2b00      	cmp	r3, #0
 800410a:	d008      	beq.n	800411e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800410c:	4b82      	ldr	r3, [pc, #520]	; (8004318 <HAL_RCC_ClockConfig+0x260>)
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	497f      	ldr	r1, [pc, #508]	; (8004318 <HAL_RCC_ClockConfig+0x260>)
 800411a:	4313      	orrs	r3, r2
 800411c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0301 	and.w	r3, r3, #1
 8004126:	2b00      	cmp	r3, #0
 8004128:	f000 80dc 	beq.w	80042e4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	2b01      	cmp	r3, #1
 8004132:	d13c      	bne.n	80041ae <HAL_RCC_ClockConfig+0xf6>
 8004134:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004138:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800413a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800413c:	fa93 f3a3 	rbit	r3, r3
 8004140:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004142:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004144:	fab3 f383 	clz	r3, r3
 8004148:	b2db      	uxtb	r3, r3
 800414a:	095b      	lsrs	r3, r3, #5
 800414c:	b2db      	uxtb	r3, r3
 800414e:	f043 0301 	orr.w	r3, r3, #1
 8004152:	b2db      	uxtb	r3, r3
 8004154:	2b01      	cmp	r3, #1
 8004156:	d102      	bne.n	800415e <HAL_RCC_ClockConfig+0xa6>
 8004158:	4b6f      	ldr	r3, [pc, #444]	; (8004318 <HAL_RCC_ClockConfig+0x260>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	e00f      	b.n	800417e <HAL_RCC_ClockConfig+0xc6>
 800415e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004162:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004164:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004166:	fa93 f3a3 	rbit	r3, r3
 800416a:	667b      	str	r3, [r7, #100]	; 0x64
 800416c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004170:	663b      	str	r3, [r7, #96]	; 0x60
 8004172:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004174:	fa93 f3a3 	rbit	r3, r3
 8004178:	65fb      	str	r3, [r7, #92]	; 0x5c
 800417a:	4b67      	ldr	r3, [pc, #412]	; (8004318 <HAL_RCC_ClockConfig+0x260>)
 800417c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004182:	65ba      	str	r2, [r7, #88]	; 0x58
 8004184:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004186:	fa92 f2a2 	rbit	r2, r2
 800418a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800418c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800418e:	fab2 f282 	clz	r2, r2
 8004192:	b2d2      	uxtb	r2, r2
 8004194:	f042 0220 	orr.w	r2, r2, #32
 8004198:	b2d2      	uxtb	r2, r2
 800419a:	f002 021f 	and.w	r2, r2, #31
 800419e:	2101      	movs	r1, #1
 80041a0:	fa01 f202 	lsl.w	r2, r1, r2
 80041a4:	4013      	ands	r3, r2
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d17b      	bne.n	80042a2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e0f3      	b.n	8004396 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	2b02      	cmp	r3, #2
 80041b4:	d13c      	bne.n	8004230 <HAL_RCC_ClockConfig+0x178>
 80041b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80041ba:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041be:	fa93 f3a3 	rbit	r3, r3
 80041c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80041c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041c6:	fab3 f383 	clz	r3, r3
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	095b      	lsrs	r3, r3, #5
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	f043 0301 	orr.w	r3, r3, #1
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d102      	bne.n	80041e0 <HAL_RCC_ClockConfig+0x128>
 80041da:	4b4f      	ldr	r3, [pc, #316]	; (8004318 <HAL_RCC_ClockConfig+0x260>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	e00f      	b.n	8004200 <HAL_RCC_ClockConfig+0x148>
 80041e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80041e4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041e8:	fa93 f3a3 	rbit	r3, r3
 80041ec:	647b      	str	r3, [r7, #68]	; 0x44
 80041ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80041f2:	643b      	str	r3, [r7, #64]	; 0x40
 80041f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041f6:	fa93 f3a3 	rbit	r3, r3
 80041fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041fc:	4b46      	ldr	r3, [pc, #280]	; (8004318 <HAL_RCC_ClockConfig+0x260>)
 80041fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004200:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004204:	63ba      	str	r2, [r7, #56]	; 0x38
 8004206:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004208:	fa92 f2a2 	rbit	r2, r2
 800420c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800420e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004210:	fab2 f282 	clz	r2, r2
 8004214:	b2d2      	uxtb	r2, r2
 8004216:	f042 0220 	orr.w	r2, r2, #32
 800421a:	b2d2      	uxtb	r2, r2
 800421c:	f002 021f 	and.w	r2, r2, #31
 8004220:	2101      	movs	r1, #1
 8004222:	fa01 f202 	lsl.w	r2, r1, r2
 8004226:	4013      	ands	r3, r2
 8004228:	2b00      	cmp	r3, #0
 800422a:	d13a      	bne.n	80042a2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e0b2      	b.n	8004396 <HAL_RCC_ClockConfig+0x2de>
 8004230:	2302      	movs	r3, #2
 8004232:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004236:	fa93 f3a3 	rbit	r3, r3
 800423a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800423c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800423e:	fab3 f383 	clz	r3, r3
 8004242:	b2db      	uxtb	r3, r3
 8004244:	095b      	lsrs	r3, r3, #5
 8004246:	b2db      	uxtb	r3, r3
 8004248:	f043 0301 	orr.w	r3, r3, #1
 800424c:	b2db      	uxtb	r3, r3
 800424e:	2b01      	cmp	r3, #1
 8004250:	d102      	bne.n	8004258 <HAL_RCC_ClockConfig+0x1a0>
 8004252:	4b31      	ldr	r3, [pc, #196]	; (8004318 <HAL_RCC_ClockConfig+0x260>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	e00d      	b.n	8004274 <HAL_RCC_ClockConfig+0x1bc>
 8004258:	2302      	movs	r3, #2
 800425a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800425c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800425e:	fa93 f3a3 	rbit	r3, r3
 8004262:	627b      	str	r3, [r7, #36]	; 0x24
 8004264:	2302      	movs	r3, #2
 8004266:	623b      	str	r3, [r7, #32]
 8004268:	6a3b      	ldr	r3, [r7, #32]
 800426a:	fa93 f3a3 	rbit	r3, r3
 800426e:	61fb      	str	r3, [r7, #28]
 8004270:	4b29      	ldr	r3, [pc, #164]	; (8004318 <HAL_RCC_ClockConfig+0x260>)
 8004272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004274:	2202      	movs	r2, #2
 8004276:	61ba      	str	r2, [r7, #24]
 8004278:	69ba      	ldr	r2, [r7, #24]
 800427a:	fa92 f2a2 	rbit	r2, r2
 800427e:	617a      	str	r2, [r7, #20]
  return result;
 8004280:	697a      	ldr	r2, [r7, #20]
 8004282:	fab2 f282 	clz	r2, r2
 8004286:	b2d2      	uxtb	r2, r2
 8004288:	f042 0220 	orr.w	r2, r2, #32
 800428c:	b2d2      	uxtb	r2, r2
 800428e:	f002 021f 	and.w	r2, r2, #31
 8004292:	2101      	movs	r1, #1
 8004294:	fa01 f202 	lsl.w	r2, r1, r2
 8004298:	4013      	ands	r3, r2
 800429a:	2b00      	cmp	r3, #0
 800429c:	d101      	bne.n	80042a2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e079      	b.n	8004396 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042a2:	4b1d      	ldr	r3, [pc, #116]	; (8004318 <HAL_RCC_ClockConfig+0x260>)
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	f023 0203 	bic.w	r2, r3, #3
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	491a      	ldr	r1, [pc, #104]	; (8004318 <HAL_RCC_ClockConfig+0x260>)
 80042b0:	4313      	orrs	r3, r2
 80042b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042b4:	f7fd fcba 	bl	8001c2c <HAL_GetTick>
 80042b8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042ba:	e00a      	b.n	80042d2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042bc:	f7fd fcb6 	bl	8001c2c <HAL_GetTick>
 80042c0:	4602      	mov	r2, r0
 80042c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d901      	bls.n	80042d2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80042ce:	2303      	movs	r3, #3
 80042d0:	e061      	b.n	8004396 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042d2:	4b11      	ldr	r3, [pc, #68]	; (8004318 <HAL_RCC_ClockConfig+0x260>)
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	f003 020c 	and.w	r2, r3, #12
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d1eb      	bne.n	80042bc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042e4:	4b0b      	ldr	r3, [pc, #44]	; (8004314 <HAL_RCC_ClockConfig+0x25c>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 0307 	and.w	r3, r3, #7
 80042ec:	683a      	ldr	r2, [r7, #0]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d214      	bcs.n	800431c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042f2:	4b08      	ldr	r3, [pc, #32]	; (8004314 <HAL_RCC_ClockConfig+0x25c>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f023 0207 	bic.w	r2, r3, #7
 80042fa:	4906      	ldr	r1, [pc, #24]	; (8004314 <HAL_RCC_ClockConfig+0x25c>)
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	4313      	orrs	r3, r2
 8004300:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004302:	4b04      	ldr	r3, [pc, #16]	; (8004314 <HAL_RCC_ClockConfig+0x25c>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 0307 	and.w	r3, r3, #7
 800430a:	683a      	ldr	r2, [r7, #0]
 800430c:	429a      	cmp	r2, r3
 800430e:	d005      	beq.n	800431c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	e040      	b.n	8004396 <HAL_RCC_ClockConfig+0x2de>
 8004314:	40022000 	.word	0x40022000
 8004318:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 0304 	and.w	r3, r3, #4
 8004324:	2b00      	cmp	r3, #0
 8004326:	d008      	beq.n	800433a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004328:	4b1d      	ldr	r3, [pc, #116]	; (80043a0 <HAL_RCC_ClockConfig+0x2e8>)
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	491a      	ldr	r1, [pc, #104]	; (80043a0 <HAL_RCC_ClockConfig+0x2e8>)
 8004336:	4313      	orrs	r3, r2
 8004338:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 0308 	and.w	r3, r3, #8
 8004342:	2b00      	cmp	r3, #0
 8004344:	d009      	beq.n	800435a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004346:	4b16      	ldr	r3, [pc, #88]	; (80043a0 <HAL_RCC_ClockConfig+0x2e8>)
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	691b      	ldr	r3, [r3, #16]
 8004352:	00db      	lsls	r3, r3, #3
 8004354:	4912      	ldr	r1, [pc, #72]	; (80043a0 <HAL_RCC_ClockConfig+0x2e8>)
 8004356:	4313      	orrs	r3, r2
 8004358:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800435a:	f000 f829 	bl	80043b0 <HAL_RCC_GetSysClockFreq>
 800435e:	4601      	mov	r1, r0
 8004360:	4b0f      	ldr	r3, [pc, #60]	; (80043a0 <HAL_RCC_ClockConfig+0x2e8>)
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004368:	22f0      	movs	r2, #240	; 0xf0
 800436a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800436c:	693a      	ldr	r2, [r7, #16]
 800436e:	fa92 f2a2 	rbit	r2, r2
 8004372:	60fa      	str	r2, [r7, #12]
  return result;
 8004374:	68fa      	ldr	r2, [r7, #12]
 8004376:	fab2 f282 	clz	r2, r2
 800437a:	b2d2      	uxtb	r2, r2
 800437c:	40d3      	lsrs	r3, r2
 800437e:	4a09      	ldr	r2, [pc, #36]	; (80043a4 <HAL_RCC_ClockConfig+0x2ec>)
 8004380:	5cd3      	ldrb	r3, [r2, r3]
 8004382:	fa21 f303 	lsr.w	r3, r1, r3
 8004386:	4a08      	ldr	r2, [pc, #32]	; (80043a8 <HAL_RCC_ClockConfig+0x2f0>)
 8004388:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800438a:	4b08      	ldr	r3, [pc, #32]	; (80043ac <HAL_RCC_ClockConfig+0x2f4>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4618      	mov	r0, r3
 8004390:	f7fd fc08 	bl	8001ba4 <HAL_InitTick>
  
  return HAL_OK;
 8004394:	2300      	movs	r3, #0
}
 8004396:	4618      	mov	r0, r3
 8004398:	3778      	adds	r7, #120	; 0x78
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
 800439e:	bf00      	nop
 80043a0:	40021000 	.word	0x40021000
 80043a4:	0800b0a0 	.word	0x0800b0a0
 80043a8:	20000000 	.word	0x20000000
 80043ac:	20000004 	.word	0x20000004

080043b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b08b      	sub	sp, #44	; 0x2c
 80043b4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80043b6:	2300      	movs	r3, #0
 80043b8:	61fb      	str	r3, [r7, #28]
 80043ba:	2300      	movs	r3, #0
 80043bc:	61bb      	str	r3, [r7, #24]
 80043be:	2300      	movs	r3, #0
 80043c0:	627b      	str	r3, [r7, #36]	; 0x24
 80043c2:	2300      	movs	r3, #0
 80043c4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80043c6:	2300      	movs	r3, #0
 80043c8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80043ca:	4b29      	ldr	r3, [pc, #164]	; (8004470 <HAL_RCC_GetSysClockFreq+0xc0>)
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	f003 030c 	and.w	r3, r3, #12
 80043d6:	2b04      	cmp	r3, #4
 80043d8:	d002      	beq.n	80043e0 <HAL_RCC_GetSysClockFreq+0x30>
 80043da:	2b08      	cmp	r3, #8
 80043dc:	d003      	beq.n	80043e6 <HAL_RCC_GetSysClockFreq+0x36>
 80043de:	e03c      	b.n	800445a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80043e0:	4b24      	ldr	r3, [pc, #144]	; (8004474 <HAL_RCC_GetSysClockFreq+0xc4>)
 80043e2:	623b      	str	r3, [r7, #32]
      break;
 80043e4:	e03c      	b.n	8004460 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80043ec:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80043f0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043f2:	68ba      	ldr	r2, [r7, #8]
 80043f4:	fa92 f2a2 	rbit	r2, r2
 80043f8:	607a      	str	r2, [r7, #4]
  return result;
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	fab2 f282 	clz	r2, r2
 8004400:	b2d2      	uxtb	r2, r2
 8004402:	40d3      	lsrs	r3, r2
 8004404:	4a1c      	ldr	r2, [pc, #112]	; (8004478 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004406:	5cd3      	ldrb	r3, [r2, r3]
 8004408:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800440a:	4b19      	ldr	r3, [pc, #100]	; (8004470 <HAL_RCC_GetSysClockFreq+0xc0>)
 800440c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800440e:	f003 030f 	and.w	r3, r3, #15
 8004412:	220f      	movs	r2, #15
 8004414:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004416:	693a      	ldr	r2, [r7, #16]
 8004418:	fa92 f2a2 	rbit	r2, r2
 800441c:	60fa      	str	r2, [r7, #12]
  return result;
 800441e:	68fa      	ldr	r2, [r7, #12]
 8004420:	fab2 f282 	clz	r2, r2
 8004424:	b2d2      	uxtb	r2, r2
 8004426:	40d3      	lsrs	r3, r2
 8004428:	4a14      	ldr	r2, [pc, #80]	; (800447c <HAL_RCC_GetSysClockFreq+0xcc>)
 800442a:	5cd3      	ldrb	r3, [r2, r3]
 800442c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800442e:	69fb      	ldr	r3, [r7, #28]
 8004430:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004434:	2b00      	cmp	r3, #0
 8004436:	d008      	beq.n	800444a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004438:	4a0e      	ldr	r2, [pc, #56]	; (8004474 <HAL_RCC_GetSysClockFreq+0xc4>)
 800443a:	69bb      	ldr	r3, [r7, #24]
 800443c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	fb02 f303 	mul.w	r3, r2, r3
 8004446:	627b      	str	r3, [r7, #36]	; 0x24
 8004448:	e004      	b.n	8004454 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	4a0c      	ldr	r2, [pc, #48]	; (8004480 <HAL_RCC_GetSysClockFreq+0xd0>)
 800444e:	fb02 f303 	mul.w	r3, r2, r3
 8004452:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004456:	623b      	str	r3, [r7, #32]
      break;
 8004458:	e002      	b.n	8004460 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800445a:	4b06      	ldr	r3, [pc, #24]	; (8004474 <HAL_RCC_GetSysClockFreq+0xc4>)
 800445c:	623b      	str	r3, [r7, #32]
      break;
 800445e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004460:	6a3b      	ldr	r3, [r7, #32]
}
 8004462:	4618      	mov	r0, r3
 8004464:	372c      	adds	r7, #44	; 0x2c
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr
 800446e:	bf00      	nop
 8004470:	40021000 	.word	0x40021000
 8004474:	007a1200 	.word	0x007a1200
 8004478:	0800b0b8 	.word	0x0800b0b8
 800447c:	0800b0c8 	.word	0x0800b0c8
 8004480:	003d0900 	.word	0x003d0900

08004484 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004484:	b480      	push	{r7}
 8004486:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004488:	4b03      	ldr	r3, [pc, #12]	; (8004498 <HAL_RCC_GetHCLKFreq+0x14>)
 800448a:	681b      	ldr	r3, [r3, #0]
}
 800448c:	4618      	mov	r0, r3
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr
 8004496:	bf00      	nop
 8004498:	20000000 	.word	0x20000000

0800449c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b082      	sub	sp, #8
 80044a0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80044a2:	f7ff ffef 	bl	8004484 <HAL_RCC_GetHCLKFreq>
 80044a6:	4601      	mov	r1, r0
 80044a8:	4b0b      	ldr	r3, [pc, #44]	; (80044d8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80044b0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80044b4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	fa92 f2a2 	rbit	r2, r2
 80044bc:	603a      	str	r2, [r7, #0]
  return result;
 80044be:	683a      	ldr	r2, [r7, #0]
 80044c0:	fab2 f282 	clz	r2, r2
 80044c4:	b2d2      	uxtb	r2, r2
 80044c6:	40d3      	lsrs	r3, r2
 80044c8:	4a04      	ldr	r2, [pc, #16]	; (80044dc <HAL_RCC_GetPCLK1Freq+0x40>)
 80044ca:	5cd3      	ldrb	r3, [r2, r3]
 80044cc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80044d0:	4618      	mov	r0, r3
 80044d2:	3708      	adds	r7, #8
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}
 80044d8:	40021000 	.word	0x40021000
 80044dc:	0800b0b0 	.word	0x0800b0b0

080044e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b082      	sub	sp, #8
 80044e4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80044e6:	f7ff ffcd 	bl	8004484 <HAL_RCC_GetHCLKFreq>
 80044ea:	4601      	mov	r1, r0
 80044ec:	4b0b      	ldr	r3, [pc, #44]	; (800451c <HAL_RCC_GetPCLK2Freq+0x3c>)
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80044f4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80044f8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	fa92 f2a2 	rbit	r2, r2
 8004500:	603a      	str	r2, [r7, #0]
  return result;
 8004502:	683a      	ldr	r2, [r7, #0]
 8004504:	fab2 f282 	clz	r2, r2
 8004508:	b2d2      	uxtb	r2, r2
 800450a:	40d3      	lsrs	r3, r2
 800450c:	4a04      	ldr	r2, [pc, #16]	; (8004520 <HAL_RCC_GetPCLK2Freq+0x40>)
 800450e:	5cd3      	ldrb	r3, [r2, r3]
 8004510:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004514:	4618      	mov	r0, r3
 8004516:	3708      	adds	r7, #8
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}
 800451c:	40021000 	.word	0x40021000
 8004520:	0800b0b0 	.word	0x0800b0b0

08004524 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b092      	sub	sp, #72	; 0x48
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800452c:	2300      	movs	r3, #0
 800452e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004530:	2300      	movs	r3, #0
 8004532:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004534:	2300      	movs	r3, #0
 8004536:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004542:	2b00      	cmp	r3, #0
 8004544:	f000 80cd 	beq.w	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004548:	4b86      	ldr	r3, [pc, #536]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800454a:	69db      	ldr	r3, [r3, #28]
 800454c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004550:	2b00      	cmp	r3, #0
 8004552:	d10e      	bne.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004554:	4b83      	ldr	r3, [pc, #524]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004556:	69db      	ldr	r3, [r3, #28]
 8004558:	4a82      	ldr	r2, [pc, #520]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800455a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800455e:	61d3      	str	r3, [r2, #28]
 8004560:	4b80      	ldr	r3, [pc, #512]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004562:	69db      	ldr	r3, [r3, #28]
 8004564:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004568:	60bb      	str	r3, [r7, #8]
 800456a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800456c:	2301      	movs	r3, #1
 800456e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004572:	4b7d      	ldr	r3, [pc, #500]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800457a:	2b00      	cmp	r3, #0
 800457c:	d118      	bne.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800457e:	4b7a      	ldr	r3, [pc, #488]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a79      	ldr	r2, [pc, #484]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004584:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004588:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800458a:	f7fd fb4f 	bl	8001c2c <HAL_GetTick>
 800458e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004590:	e008      	b.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004592:	f7fd fb4b 	bl	8001c2c <HAL_GetTick>
 8004596:	4602      	mov	r2, r0
 8004598:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800459a:	1ad3      	subs	r3, r2, r3
 800459c:	2b64      	cmp	r3, #100	; 0x64
 800459e:	d901      	bls.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80045a0:	2303      	movs	r3, #3
 80045a2:	e0db      	b.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045a4:	4b70      	ldr	r3, [pc, #448]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d0f0      	beq.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80045b0:	4b6c      	ldr	r3, [pc, #432]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80045b2:	6a1b      	ldr	r3, [r3, #32]
 80045b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045b8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80045ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d07d      	beq.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x198>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d076      	beq.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80045ce:	4b65      	ldr	r3, [pc, #404]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80045d0:	6a1b      	ldr	r3, [r3, #32]
 80045d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80045dc:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e0:	fa93 f3a3 	rbit	r3, r3
 80045e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80045e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80045e8:	fab3 f383 	clz	r3, r3
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	461a      	mov	r2, r3
 80045f0:	4b5e      	ldr	r3, [pc, #376]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80045f2:	4413      	add	r3, r2
 80045f4:	009b      	lsls	r3, r3, #2
 80045f6:	461a      	mov	r2, r3
 80045f8:	2301      	movs	r3, #1
 80045fa:	6013      	str	r3, [r2, #0]
 80045fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004600:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004604:	fa93 f3a3 	rbit	r3, r3
 8004608:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800460a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800460c:	fab3 f383 	clz	r3, r3
 8004610:	b2db      	uxtb	r3, r3
 8004612:	461a      	mov	r2, r3
 8004614:	4b55      	ldr	r3, [pc, #340]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004616:	4413      	add	r3, r2
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	461a      	mov	r2, r3
 800461c:	2300      	movs	r3, #0
 800461e:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004620:	4a50      	ldr	r2, [pc, #320]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004622:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004624:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004626:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004628:	f003 0301 	and.w	r3, r3, #1
 800462c:	2b00      	cmp	r3, #0
 800462e:	d045      	beq.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004630:	f7fd fafc 	bl	8001c2c <HAL_GetTick>
 8004634:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004636:	e00a      	b.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004638:	f7fd faf8 	bl	8001c2c <HAL_GetTick>
 800463c:	4602      	mov	r2, r0
 800463e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	f241 3288 	movw	r2, #5000	; 0x1388
 8004646:	4293      	cmp	r3, r2
 8004648:	d901      	bls.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800464a:	2303      	movs	r3, #3
 800464c:	e086      	b.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x238>
 800464e:	2302      	movs	r3, #2
 8004650:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004654:	fa93 f3a3 	rbit	r3, r3
 8004658:	627b      	str	r3, [r7, #36]	; 0x24
 800465a:	2302      	movs	r3, #2
 800465c:	623b      	str	r3, [r7, #32]
 800465e:	6a3b      	ldr	r3, [r7, #32]
 8004660:	fa93 f3a3 	rbit	r3, r3
 8004664:	61fb      	str	r3, [r7, #28]
  return result;
 8004666:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004668:	fab3 f383 	clz	r3, r3
 800466c:	b2db      	uxtb	r3, r3
 800466e:	095b      	lsrs	r3, r3, #5
 8004670:	b2db      	uxtb	r3, r3
 8004672:	f043 0302 	orr.w	r3, r3, #2
 8004676:	b2db      	uxtb	r3, r3
 8004678:	2b02      	cmp	r3, #2
 800467a:	d102      	bne.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800467c:	4b39      	ldr	r3, [pc, #228]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800467e:	6a1b      	ldr	r3, [r3, #32]
 8004680:	e007      	b.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8004682:	2302      	movs	r3, #2
 8004684:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004686:	69bb      	ldr	r3, [r7, #24]
 8004688:	fa93 f3a3 	rbit	r3, r3
 800468c:	617b      	str	r3, [r7, #20]
 800468e:	4b35      	ldr	r3, [pc, #212]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004692:	2202      	movs	r2, #2
 8004694:	613a      	str	r2, [r7, #16]
 8004696:	693a      	ldr	r2, [r7, #16]
 8004698:	fa92 f2a2 	rbit	r2, r2
 800469c:	60fa      	str	r2, [r7, #12]
  return result;
 800469e:	68fa      	ldr	r2, [r7, #12]
 80046a0:	fab2 f282 	clz	r2, r2
 80046a4:	b2d2      	uxtb	r2, r2
 80046a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80046aa:	b2d2      	uxtb	r2, r2
 80046ac:	f002 021f 	and.w	r2, r2, #31
 80046b0:	2101      	movs	r1, #1
 80046b2:	fa01 f202 	lsl.w	r2, r1, r2
 80046b6:	4013      	ands	r3, r2
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d0bd      	beq.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80046bc:	4b29      	ldr	r3, [pc, #164]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80046be:	6a1b      	ldr	r3, [r3, #32]
 80046c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	4926      	ldr	r1, [pc, #152]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80046ca:	4313      	orrs	r3, r2
 80046cc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80046ce:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d105      	bne.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046d6:	4b23      	ldr	r3, [pc, #140]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80046d8:	69db      	ldr	r3, [r3, #28]
 80046da:	4a22      	ldr	r2, [pc, #136]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80046dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046e0:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 0301 	and.w	r3, r3, #1
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d008      	beq.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80046ee:	4b1d      	ldr	r3, [pc, #116]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80046f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f2:	f023 0203 	bic.w	r2, r3, #3
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	491a      	ldr	r1, [pc, #104]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80046fc:	4313      	orrs	r3, r2
 80046fe:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 0320 	and.w	r3, r3, #32
 8004708:	2b00      	cmp	r3, #0
 800470a:	d008      	beq.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800470c:	4b15      	ldr	r3, [pc, #84]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800470e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004710:	f023 0210 	bic.w	r2, r3, #16
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	4912      	ldr	r1, [pc, #72]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800471a:	4313      	orrs	r3, r2
 800471c:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004726:	2b00      	cmp	r3, #0
 8004728:	d008      	beq.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800472a:	4b0e      	ldr	r3, [pc, #56]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800472c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800472e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	691b      	ldr	r3, [r3, #16]
 8004736:	490b      	ldr	r1, [pc, #44]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004738:	4313      	orrs	r3, r2
 800473a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004744:	2b00      	cmp	r3, #0
 8004746:	d008      	beq.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004748:	4b06      	ldr	r3, [pc, #24]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800474a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800474c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	695b      	ldr	r3, [r3, #20]
 8004754:	4903      	ldr	r1, [pc, #12]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004756:	4313      	orrs	r3, r2
 8004758:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800475a:	2300      	movs	r3, #0
}
 800475c:	4618      	mov	r0, r3
 800475e:	3748      	adds	r7, #72	; 0x48
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}
 8004764:	40021000 	.word	0x40021000
 8004768:	40007000 	.word	0x40007000
 800476c:	10908100 	.word	0x10908100

08004770 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b082      	sub	sp, #8
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d101      	bne.n	8004782 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e049      	b.n	8004816 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004788:	b2db      	uxtb	r3, r3
 800478a:	2b00      	cmp	r3, #0
 800478c:	d106      	bne.n	800479c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2200      	movs	r2, #0
 8004792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f7fc ffec 	bl	8001774 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2202      	movs	r2, #2
 80047a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	3304      	adds	r3, #4
 80047ac:	4619      	mov	r1, r3
 80047ae:	4610      	mov	r0, r2
 80047b0:	f000 fbb6 	bl	8004f20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2201      	movs	r2, #1
 80047c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2201      	movs	r2, #1
 80047d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2201      	movs	r2, #1
 80047d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2201      	movs	r2, #1
 80047f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2201      	movs	r2, #1
 80047f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2201      	movs	r2, #1
 8004808:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2201      	movs	r2, #1
 8004810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004814:	2300      	movs	r3, #0
}
 8004816:	4618      	mov	r0, r3
 8004818:	3708      	adds	r7, #8
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}
	...

08004820 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004820:	b480      	push	{r7}
 8004822:	b085      	sub	sp, #20
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800482e:	b2db      	uxtb	r3, r3
 8004830:	2b01      	cmp	r3, #1
 8004832:	d001      	beq.n	8004838 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	e038      	b.n	80048aa <HAL_TIM_Base_Start+0x8a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2202      	movs	r2, #2
 800483c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a1c      	ldr	r2, [pc, #112]	; (80048b8 <HAL_TIM_Base_Start+0x98>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d00e      	beq.n	8004868 <HAL_TIM_Base_Start+0x48>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004852:	d009      	beq.n	8004868 <HAL_TIM_Base_Start+0x48>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a18      	ldr	r2, [pc, #96]	; (80048bc <HAL_TIM_Base_Start+0x9c>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d004      	beq.n	8004868 <HAL_TIM_Base_Start+0x48>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a17      	ldr	r2, [pc, #92]	; (80048c0 <HAL_TIM_Base_Start+0xa0>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d115      	bne.n	8004894 <HAL_TIM_Base_Start+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	689a      	ldr	r2, [r3, #8]
 800486e:	4b15      	ldr	r3, [pc, #84]	; (80048c4 <HAL_TIM_Base_Start+0xa4>)
 8004870:	4013      	ands	r3, r2
 8004872:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2b06      	cmp	r3, #6
 8004878:	d015      	beq.n	80048a6 <HAL_TIM_Base_Start+0x86>
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004880:	d011      	beq.n	80048a6 <HAL_TIM_Base_Start+0x86>
    {
      __HAL_TIM_ENABLE(htim);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f042 0201 	orr.w	r2, r2, #1
 8004890:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004892:	e008      	b.n	80048a6 <HAL_TIM_Base_Start+0x86>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f042 0201 	orr.w	r2, r2, #1
 80048a2:	601a      	str	r2, [r3, #0]
 80048a4:	e000      	b.n	80048a8 <HAL_TIM_Base_Start+0x88>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048a6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80048a8:	2300      	movs	r3, #0
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3714      	adds	r7, #20
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr
 80048b6:	bf00      	nop
 80048b8:	40012c00 	.word	0x40012c00
 80048bc:	40000400 	.word	0x40000400
 80048c0:	40014000 	.word	0x40014000
 80048c4:	00010007 	.word	0x00010007

080048c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b082      	sub	sp, #8
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d101      	bne.n	80048da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e049      	b.n	800496e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d106      	bne.n	80048f4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2200      	movs	r2, #0
 80048ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f000 f841 	bl	8004976 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2202      	movs	r2, #2
 80048f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	3304      	adds	r3, #4
 8004904:	4619      	mov	r1, r3
 8004906:	4610      	mov	r0, r2
 8004908:	f000 fb0a 	bl	8004f20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2201      	movs	r2, #1
 8004918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2201      	movs	r2, #1
 8004928:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2201      	movs	r2, #1
 8004940:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2201      	movs	r2, #1
 8004948:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800496c:	2300      	movs	r3, #0
}
 800496e:	4618      	mov	r0, r3
 8004970:	3708      	adds	r7, #8
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}

08004976 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004976:	b480      	push	{r7}
 8004978:	b083      	sub	sp, #12
 800497a:	af00      	add	r7, sp, #0
 800497c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800497e:	bf00      	nop
 8004980:	370c      	adds	r7, #12
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr
	...

0800498c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b084      	sub	sp, #16
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d109      	bne.n	80049b0 <HAL_TIM_PWM_Start+0x24>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	bf14      	ite	ne
 80049a8:	2301      	movne	r3, #1
 80049aa:	2300      	moveq	r3, #0
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	e03c      	b.n	8004a2a <HAL_TIM_PWM_Start+0x9e>
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	2b04      	cmp	r3, #4
 80049b4:	d109      	bne.n	80049ca <HAL_TIM_PWM_Start+0x3e>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80049bc:	b2db      	uxtb	r3, r3
 80049be:	2b01      	cmp	r3, #1
 80049c0:	bf14      	ite	ne
 80049c2:	2301      	movne	r3, #1
 80049c4:	2300      	moveq	r3, #0
 80049c6:	b2db      	uxtb	r3, r3
 80049c8:	e02f      	b.n	8004a2a <HAL_TIM_PWM_Start+0x9e>
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	2b08      	cmp	r3, #8
 80049ce:	d109      	bne.n	80049e4 <HAL_TIM_PWM_Start+0x58>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	2b01      	cmp	r3, #1
 80049da:	bf14      	ite	ne
 80049dc:	2301      	movne	r3, #1
 80049de:	2300      	moveq	r3, #0
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	e022      	b.n	8004a2a <HAL_TIM_PWM_Start+0x9e>
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	2b0c      	cmp	r3, #12
 80049e8:	d109      	bne.n	80049fe <HAL_TIM_PWM_Start+0x72>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	bf14      	ite	ne
 80049f6:	2301      	movne	r3, #1
 80049f8:	2300      	moveq	r3, #0
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	e015      	b.n	8004a2a <HAL_TIM_PWM_Start+0x9e>
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	2b10      	cmp	r3, #16
 8004a02:	d109      	bne.n	8004a18 <HAL_TIM_PWM_Start+0x8c>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	bf14      	ite	ne
 8004a10:	2301      	movne	r3, #1
 8004a12:	2300      	moveq	r3, #0
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	e008      	b.n	8004a2a <HAL_TIM_PWM_Start+0x9e>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	bf14      	ite	ne
 8004a24:	2301      	movne	r3, #1
 8004a26:	2300      	moveq	r3, #0
 8004a28:	b2db      	uxtb	r3, r3
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d001      	beq.n	8004a32 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e088      	b.n	8004b44 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d104      	bne.n	8004a42 <HAL_TIM_PWM_Start+0xb6>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2202      	movs	r2, #2
 8004a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a40:	e023      	b.n	8004a8a <HAL_TIM_PWM_Start+0xfe>
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	2b04      	cmp	r3, #4
 8004a46:	d104      	bne.n	8004a52 <HAL_TIM_PWM_Start+0xc6>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2202      	movs	r2, #2
 8004a4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a50:	e01b      	b.n	8004a8a <HAL_TIM_PWM_Start+0xfe>
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	2b08      	cmp	r3, #8
 8004a56:	d104      	bne.n	8004a62 <HAL_TIM_PWM_Start+0xd6>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2202      	movs	r2, #2
 8004a5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a60:	e013      	b.n	8004a8a <HAL_TIM_PWM_Start+0xfe>
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	2b0c      	cmp	r3, #12
 8004a66:	d104      	bne.n	8004a72 <HAL_TIM_PWM_Start+0xe6>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2202      	movs	r2, #2
 8004a6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a70:	e00b      	b.n	8004a8a <HAL_TIM_PWM_Start+0xfe>
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	2b10      	cmp	r3, #16
 8004a76:	d104      	bne.n	8004a82 <HAL_TIM_PWM_Start+0xf6>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2202      	movs	r2, #2
 8004a7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a80:	e003      	b.n	8004a8a <HAL_TIM_PWM_Start+0xfe>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2202      	movs	r2, #2
 8004a86:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	6839      	ldr	r1, [r7, #0]
 8004a92:	4618      	mov	r0, r3
 8004a94:	f000 fdfc 	bl	8005690 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a2b      	ldr	r2, [pc, #172]	; (8004b4c <HAL_TIM_PWM_Start+0x1c0>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d00e      	beq.n	8004ac0 <HAL_TIM_PWM_Start+0x134>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a2a      	ldr	r2, [pc, #168]	; (8004b50 <HAL_TIM_PWM_Start+0x1c4>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d009      	beq.n	8004ac0 <HAL_TIM_PWM_Start+0x134>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a28      	ldr	r2, [pc, #160]	; (8004b54 <HAL_TIM_PWM_Start+0x1c8>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d004      	beq.n	8004ac0 <HAL_TIM_PWM_Start+0x134>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a27      	ldr	r2, [pc, #156]	; (8004b58 <HAL_TIM_PWM_Start+0x1cc>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d101      	bne.n	8004ac4 <HAL_TIM_PWM_Start+0x138>
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e000      	b.n	8004ac6 <HAL_TIM_PWM_Start+0x13a>
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d007      	beq.n	8004ada <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ad8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a1b      	ldr	r2, [pc, #108]	; (8004b4c <HAL_TIM_PWM_Start+0x1c0>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d00e      	beq.n	8004b02 <HAL_TIM_PWM_Start+0x176>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004aec:	d009      	beq.n	8004b02 <HAL_TIM_PWM_Start+0x176>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a1a      	ldr	r2, [pc, #104]	; (8004b5c <HAL_TIM_PWM_Start+0x1d0>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d004      	beq.n	8004b02 <HAL_TIM_PWM_Start+0x176>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a14      	ldr	r2, [pc, #80]	; (8004b50 <HAL_TIM_PWM_Start+0x1c4>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d115      	bne.n	8004b2e <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	689a      	ldr	r2, [r3, #8]
 8004b08:	4b15      	ldr	r3, [pc, #84]	; (8004b60 <HAL_TIM_PWM_Start+0x1d4>)
 8004b0a:	4013      	ands	r3, r2
 8004b0c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2b06      	cmp	r3, #6
 8004b12:	d015      	beq.n	8004b40 <HAL_TIM_PWM_Start+0x1b4>
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b1a:	d011      	beq.n	8004b40 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f042 0201 	orr.w	r2, r2, #1
 8004b2a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b2c:	e008      	b.n	8004b40 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f042 0201 	orr.w	r2, r2, #1
 8004b3c:	601a      	str	r2, [r3, #0]
 8004b3e:	e000      	b.n	8004b42 <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b40:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004b42:	2300      	movs	r3, #0
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3710      	adds	r7, #16
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}
 8004b4c:	40012c00 	.word	0x40012c00
 8004b50:	40014000 	.word	0x40014000
 8004b54:	40014400 	.word	0x40014400
 8004b58:	40014800 	.word	0x40014800
 8004b5c:	40000400 	.word	0x40000400
 8004b60:	00010007 	.word	0x00010007

08004b64 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b086      	sub	sp, #24
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	60f8      	str	r0, [r7, #12]
 8004b6c:	60b9      	str	r1, [r7, #8]
 8004b6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b70:	2300      	movs	r3, #0
 8004b72:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d101      	bne.n	8004b82 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004b7e:	2302      	movs	r3, #2
 8004b80:	e0ff      	b.n	8004d82 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2201      	movs	r2, #1
 8004b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2b14      	cmp	r3, #20
 8004b8e:	f200 80f0 	bhi.w	8004d72 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004b92:	a201      	add	r2, pc, #4	; (adr r2, 8004b98 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b98:	08004bed 	.word	0x08004bed
 8004b9c:	08004d73 	.word	0x08004d73
 8004ba0:	08004d73 	.word	0x08004d73
 8004ba4:	08004d73 	.word	0x08004d73
 8004ba8:	08004c2d 	.word	0x08004c2d
 8004bac:	08004d73 	.word	0x08004d73
 8004bb0:	08004d73 	.word	0x08004d73
 8004bb4:	08004d73 	.word	0x08004d73
 8004bb8:	08004c6f 	.word	0x08004c6f
 8004bbc:	08004d73 	.word	0x08004d73
 8004bc0:	08004d73 	.word	0x08004d73
 8004bc4:	08004d73 	.word	0x08004d73
 8004bc8:	08004caf 	.word	0x08004caf
 8004bcc:	08004d73 	.word	0x08004d73
 8004bd0:	08004d73 	.word	0x08004d73
 8004bd4:	08004d73 	.word	0x08004d73
 8004bd8:	08004cf1 	.word	0x08004cf1
 8004bdc:	08004d73 	.word	0x08004d73
 8004be0:	08004d73 	.word	0x08004d73
 8004be4:	08004d73 	.word	0x08004d73
 8004be8:	08004d31 	.word	0x08004d31
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	68b9      	ldr	r1, [r7, #8]
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f000 fa0c 	bl	8005010 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	699a      	ldr	r2, [r3, #24]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f042 0208 	orr.w	r2, r2, #8
 8004c06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	699a      	ldr	r2, [r3, #24]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f022 0204 	bic.w	r2, r2, #4
 8004c16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	6999      	ldr	r1, [r3, #24]
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	691a      	ldr	r2, [r3, #16]
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	430a      	orrs	r2, r1
 8004c28:	619a      	str	r2, [r3, #24]
      break;
 8004c2a:	e0a5      	b.n	8004d78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	68b9      	ldr	r1, [r7, #8]
 8004c32:	4618      	mov	r0, r3
 8004c34:	f000 fa72 	bl	800511c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	699a      	ldr	r2, [r3, #24]
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	699a      	ldr	r2, [r3, #24]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	6999      	ldr	r1, [r3, #24]
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	691b      	ldr	r3, [r3, #16]
 8004c62:	021a      	lsls	r2, r3, #8
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	430a      	orrs	r2, r1
 8004c6a:	619a      	str	r2, [r3, #24]
      break;
 8004c6c:	e084      	b.n	8004d78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	68b9      	ldr	r1, [r7, #8]
 8004c74:	4618      	mov	r0, r3
 8004c76:	f000 fad1 	bl	800521c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	69da      	ldr	r2, [r3, #28]
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f042 0208 	orr.w	r2, r2, #8
 8004c88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	69da      	ldr	r2, [r3, #28]
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f022 0204 	bic.w	r2, r2, #4
 8004c98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	69d9      	ldr	r1, [r3, #28]
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	691a      	ldr	r2, [r3, #16]
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	430a      	orrs	r2, r1
 8004caa:	61da      	str	r2, [r3, #28]
      break;
 8004cac:	e064      	b.n	8004d78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	68b9      	ldr	r1, [r7, #8]
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f000 fb2f 	bl	8005318 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	69da      	ldr	r2, [r3, #28]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	69da      	ldr	r2, [r3, #28]
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	69d9      	ldr	r1, [r3, #28]
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	691b      	ldr	r3, [r3, #16]
 8004ce4:	021a      	lsls	r2, r3, #8
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	430a      	orrs	r2, r1
 8004cec:	61da      	str	r2, [r3, #28]
      break;
 8004cee:	e043      	b.n	8004d78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	68b9      	ldr	r1, [r7, #8]
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f000 fb72 	bl	80053e0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f042 0208 	orr.w	r2, r2, #8
 8004d0a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f022 0204 	bic.w	r2, r2, #4
 8004d1a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	691a      	ldr	r2, [r3, #16]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	430a      	orrs	r2, r1
 8004d2c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004d2e:	e023      	b.n	8004d78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	68b9      	ldr	r1, [r7, #8]
 8004d36:	4618      	mov	r0, r3
 8004d38:	f000 fbb0 	bl	800549c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d4a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d5a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	691b      	ldr	r3, [r3, #16]
 8004d66:	021a      	lsls	r2, r3, #8
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	430a      	orrs	r2, r1
 8004d6e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004d70:	e002      	b.n	8004d78 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	75fb      	strb	r3, [r7, #23]
      break;
 8004d76:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d80:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3718      	adds	r7, #24
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
 8004d8a:	bf00      	nop

08004d8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b084      	sub	sp, #16
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d96:	2300      	movs	r3, #0
 8004d98:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d101      	bne.n	8004da8 <HAL_TIM_ConfigClockSource+0x1c>
 8004da4:	2302      	movs	r3, #2
 8004da6:	e0b6      	b.n	8004f16 <HAL_TIM_ConfigClockSource+0x18a>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2201      	movs	r2, #1
 8004dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2202      	movs	r2, #2
 8004db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dc6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004dca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004dd2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	68ba      	ldr	r2, [r7, #8]
 8004dda:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004de4:	d03e      	beq.n	8004e64 <HAL_TIM_ConfigClockSource+0xd8>
 8004de6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dea:	f200 8087 	bhi.w	8004efc <HAL_TIM_ConfigClockSource+0x170>
 8004dee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004df2:	f000 8086 	beq.w	8004f02 <HAL_TIM_ConfigClockSource+0x176>
 8004df6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dfa:	d87f      	bhi.n	8004efc <HAL_TIM_ConfigClockSource+0x170>
 8004dfc:	2b70      	cmp	r3, #112	; 0x70
 8004dfe:	d01a      	beq.n	8004e36 <HAL_TIM_ConfigClockSource+0xaa>
 8004e00:	2b70      	cmp	r3, #112	; 0x70
 8004e02:	d87b      	bhi.n	8004efc <HAL_TIM_ConfigClockSource+0x170>
 8004e04:	2b60      	cmp	r3, #96	; 0x60
 8004e06:	d050      	beq.n	8004eaa <HAL_TIM_ConfigClockSource+0x11e>
 8004e08:	2b60      	cmp	r3, #96	; 0x60
 8004e0a:	d877      	bhi.n	8004efc <HAL_TIM_ConfigClockSource+0x170>
 8004e0c:	2b50      	cmp	r3, #80	; 0x50
 8004e0e:	d03c      	beq.n	8004e8a <HAL_TIM_ConfigClockSource+0xfe>
 8004e10:	2b50      	cmp	r3, #80	; 0x50
 8004e12:	d873      	bhi.n	8004efc <HAL_TIM_ConfigClockSource+0x170>
 8004e14:	2b40      	cmp	r3, #64	; 0x40
 8004e16:	d058      	beq.n	8004eca <HAL_TIM_ConfigClockSource+0x13e>
 8004e18:	2b40      	cmp	r3, #64	; 0x40
 8004e1a:	d86f      	bhi.n	8004efc <HAL_TIM_ConfigClockSource+0x170>
 8004e1c:	2b30      	cmp	r3, #48	; 0x30
 8004e1e:	d064      	beq.n	8004eea <HAL_TIM_ConfigClockSource+0x15e>
 8004e20:	2b30      	cmp	r3, #48	; 0x30
 8004e22:	d86b      	bhi.n	8004efc <HAL_TIM_ConfigClockSource+0x170>
 8004e24:	2b20      	cmp	r3, #32
 8004e26:	d060      	beq.n	8004eea <HAL_TIM_ConfigClockSource+0x15e>
 8004e28:	2b20      	cmp	r3, #32
 8004e2a:	d867      	bhi.n	8004efc <HAL_TIM_ConfigClockSource+0x170>
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d05c      	beq.n	8004eea <HAL_TIM_ConfigClockSource+0x15e>
 8004e30:	2b10      	cmp	r3, #16
 8004e32:	d05a      	beq.n	8004eea <HAL_TIM_ConfigClockSource+0x15e>
 8004e34:	e062      	b.n	8004efc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6818      	ldr	r0, [r3, #0]
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	6899      	ldr	r1, [r3, #8]
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	685a      	ldr	r2, [r3, #4]
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	68db      	ldr	r3, [r3, #12]
 8004e46:	f000 fc03 	bl	8005650 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004e58:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	68ba      	ldr	r2, [r7, #8]
 8004e60:	609a      	str	r2, [r3, #8]
      break;
 8004e62:	e04f      	b.n	8004f04 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6818      	ldr	r0, [r3, #0]
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	6899      	ldr	r1, [r3, #8]
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	685a      	ldr	r2, [r3, #4]
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	f000 fbec 	bl	8005650 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	689a      	ldr	r2, [r3, #8]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e86:	609a      	str	r2, [r3, #8]
      break;
 8004e88:	e03c      	b.n	8004f04 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6818      	ldr	r0, [r3, #0]
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	6859      	ldr	r1, [r3, #4]
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	68db      	ldr	r3, [r3, #12]
 8004e96:	461a      	mov	r2, r3
 8004e98:	f000 fb60 	bl	800555c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	2150      	movs	r1, #80	; 0x50
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f000 fbb9 	bl	800561a <TIM_ITRx_SetConfig>
      break;
 8004ea8:	e02c      	b.n	8004f04 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6818      	ldr	r0, [r3, #0]
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	6859      	ldr	r1, [r3, #4]
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	68db      	ldr	r3, [r3, #12]
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	f000 fb7f 	bl	80055ba <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	2160      	movs	r1, #96	; 0x60
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f000 fba9 	bl	800561a <TIM_ITRx_SetConfig>
      break;
 8004ec8:	e01c      	b.n	8004f04 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6818      	ldr	r0, [r3, #0]
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	6859      	ldr	r1, [r3, #4]
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	68db      	ldr	r3, [r3, #12]
 8004ed6:	461a      	mov	r2, r3
 8004ed8:	f000 fb40 	bl	800555c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	2140      	movs	r1, #64	; 0x40
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f000 fb99 	bl	800561a <TIM_ITRx_SetConfig>
      break;
 8004ee8:	e00c      	b.n	8004f04 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681a      	ldr	r2, [r3, #0]
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4619      	mov	r1, r3
 8004ef4:	4610      	mov	r0, r2
 8004ef6:	f000 fb90 	bl	800561a <TIM_ITRx_SetConfig>
      break;
 8004efa:	e003      	b.n	8004f04 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	73fb      	strb	r3, [r7, #15]
      break;
 8004f00:	e000      	b.n	8004f04 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004f02:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2201      	movs	r2, #1
 8004f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3710      	adds	r7, #16
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
	...

08004f20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b085      	sub	sp, #20
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
 8004f28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	4a32      	ldr	r2, [pc, #200]	; (8004ffc <TIM_Base_SetConfig+0xdc>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d007      	beq.n	8004f48 <TIM_Base_SetConfig+0x28>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f3e:	d003      	beq.n	8004f48 <TIM_Base_SetConfig+0x28>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	4a2f      	ldr	r2, [pc, #188]	; (8005000 <TIM_Base_SetConfig+0xe0>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d108      	bne.n	8004f5a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	68fa      	ldr	r2, [r7, #12]
 8004f56:	4313      	orrs	r3, r2
 8004f58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4a27      	ldr	r2, [pc, #156]	; (8004ffc <TIM_Base_SetConfig+0xdc>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d013      	beq.n	8004f8a <TIM_Base_SetConfig+0x6a>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f68:	d00f      	beq.n	8004f8a <TIM_Base_SetConfig+0x6a>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4a24      	ldr	r2, [pc, #144]	; (8005000 <TIM_Base_SetConfig+0xe0>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d00b      	beq.n	8004f8a <TIM_Base_SetConfig+0x6a>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4a23      	ldr	r2, [pc, #140]	; (8005004 <TIM_Base_SetConfig+0xe4>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d007      	beq.n	8004f8a <TIM_Base_SetConfig+0x6a>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4a22      	ldr	r2, [pc, #136]	; (8005008 <TIM_Base_SetConfig+0xe8>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d003      	beq.n	8004f8a <TIM_Base_SetConfig+0x6a>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4a21      	ldr	r2, [pc, #132]	; (800500c <TIM_Base_SetConfig+0xec>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d108      	bne.n	8004f9c <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	68db      	ldr	r3, [r3, #12]
 8004f96:	68fa      	ldr	r2, [r7, #12]
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	695b      	ldr	r3, [r3, #20]
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	68fa      	ldr	r2, [r7, #12]
 8004fae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	689a      	ldr	r2, [r3, #8]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	681a      	ldr	r2, [r3, #0]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	4a0e      	ldr	r2, [pc, #56]	; (8004ffc <TIM_Base_SetConfig+0xdc>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d00b      	beq.n	8004fe0 <TIM_Base_SetConfig+0xc0>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	4a0e      	ldr	r2, [pc, #56]	; (8005004 <TIM_Base_SetConfig+0xe4>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d007      	beq.n	8004fe0 <TIM_Base_SetConfig+0xc0>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	4a0d      	ldr	r2, [pc, #52]	; (8005008 <TIM_Base_SetConfig+0xe8>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d003      	beq.n	8004fe0 <TIM_Base_SetConfig+0xc0>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	4a0c      	ldr	r2, [pc, #48]	; (800500c <TIM_Base_SetConfig+0xec>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d103      	bne.n	8004fe8 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	691a      	ldr	r2, [r3, #16]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2201      	movs	r2, #1
 8004fec:	615a      	str	r2, [r3, #20]
}
 8004fee:	bf00      	nop
 8004ff0:	3714      	adds	r7, #20
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr
 8004ffa:	bf00      	nop
 8004ffc:	40012c00 	.word	0x40012c00
 8005000:	40000400 	.word	0x40000400
 8005004:	40014000 	.word	0x40014000
 8005008:	40014400 	.word	0x40014400
 800500c:	40014800 	.word	0x40014800

08005010 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005010:	b480      	push	{r7}
 8005012:	b087      	sub	sp, #28
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6a1b      	ldr	r3, [r3, #32]
 800501e:	f023 0201 	bic.w	r2, r3, #1
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6a1b      	ldr	r3, [r3, #32]
 800502a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	699b      	ldr	r3, [r3, #24]
 8005036:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800503e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005042:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f023 0303 	bic.w	r3, r3, #3
 800504a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	68fa      	ldr	r2, [r7, #12]
 8005052:	4313      	orrs	r3, r2
 8005054:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	f023 0302 	bic.w	r3, r3, #2
 800505c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	697a      	ldr	r2, [r7, #20]
 8005064:	4313      	orrs	r3, r2
 8005066:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	4a28      	ldr	r2, [pc, #160]	; (800510c <TIM_OC1_SetConfig+0xfc>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d00b      	beq.n	8005088 <TIM_OC1_SetConfig+0x78>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	4a27      	ldr	r2, [pc, #156]	; (8005110 <TIM_OC1_SetConfig+0x100>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d007      	beq.n	8005088 <TIM_OC1_SetConfig+0x78>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	4a26      	ldr	r2, [pc, #152]	; (8005114 <TIM_OC1_SetConfig+0x104>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d003      	beq.n	8005088 <TIM_OC1_SetConfig+0x78>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	4a25      	ldr	r2, [pc, #148]	; (8005118 <TIM_OC1_SetConfig+0x108>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d10c      	bne.n	80050a2 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	f023 0308 	bic.w	r3, r3, #8
 800508e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	68db      	ldr	r3, [r3, #12]
 8005094:	697a      	ldr	r2, [r7, #20]
 8005096:	4313      	orrs	r3, r2
 8005098:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	f023 0304 	bic.w	r3, r3, #4
 80050a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	4a19      	ldr	r2, [pc, #100]	; (800510c <TIM_OC1_SetConfig+0xfc>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d00b      	beq.n	80050c2 <TIM_OC1_SetConfig+0xb2>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	4a18      	ldr	r2, [pc, #96]	; (8005110 <TIM_OC1_SetConfig+0x100>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d007      	beq.n	80050c2 <TIM_OC1_SetConfig+0xb2>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	4a17      	ldr	r2, [pc, #92]	; (8005114 <TIM_OC1_SetConfig+0x104>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d003      	beq.n	80050c2 <TIM_OC1_SetConfig+0xb2>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	4a16      	ldr	r2, [pc, #88]	; (8005118 <TIM_OC1_SetConfig+0x108>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d111      	bne.n	80050e6 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80050d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	695b      	ldr	r3, [r3, #20]
 80050d6:	693a      	ldr	r2, [r7, #16]
 80050d8:	4313      	orrs	r3, r2
 80050da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	699b      	ldr	r3, [r3, #24]
 80050e0:	693a      	ldr	r2, [r7, #16]
 80050e2:	4313      	orrs	r3, r2
 80050e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	693a      	ldr	r2, [r7, #16]
 80050ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	68fa      	ldr	r2, [r7, #12]
 80050f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	685a      	ldr	r2, [r3, #4]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	697a      	ldr	r2, [r7, #20]
 80050fe:	621a      	str	r2, [r3, #32]
}
 8005100:	bf00      	nop
 8005102:	371c      	adds	r7, #28
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr
 800510c:	40012c00 	.word	0x40012c00
 8005110:	40014000 	.word	0x40014000
 8005114:	40014400 	.word	0x40014400
 8005118:	40014800 	.word	0x40014800

0800511c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800511c:	b480      	push	{r7}
 800511e:	b087      	sub	sp, #28
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
 8005124:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6a1b      	ldr	r3, [r3, #32]
 800512a:	f023 0210 	bic.w	r2, r3, #16
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6a1b      	ldr	r3, [r3, #32]
 8005136:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	699b      	ldr	r3, [r3, #24]
 8005142:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800514a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800514e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005156:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	021b      	lsls	r3, r3, #8
 800515e:	68fa      	ldr	r2, [r7, #12]
 8005160:	4313      	orrs	r3, r2
 8005162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	f023 0320 	bic.w	r3, r3, #32
 800516a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	011b      	lsls	r3, r3, #4
 8005172:	697a      	ldr	r2, [r7, #20]
 8005174:	4313      	orrs	r3, r2
 8005176:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	4a24      	ldr	r2, [pc, #144]	; (800520c <TIM_OC2_SetConfig+0xf0>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d10d      	bne.n	800519c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005186:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	68db      	ldr	r3, [r3, #12]
 800518c:	011b      	lsls	r3, r3, #4
 800518e:	697a      	ldr	r2, [r7, #20]
 8005190:	4313      	orrs	r3, r2
 8005192:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800519a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	4a1b      	ldr	r2, [pc, #108]	; (800520c <TIM_OC2_SetConfig+0xf0>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d00b      	beq.n	80051bc <TIM_OC2_SetConfig+0xa0>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	4a1a      	ldr	r2, [pc, #104]	; (8005210 <TIM_OC2_SetConfig+0xf4>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d007      	beq.n	80051bc <TIM_OC2_SetConfig+0xa0>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	4a19      	ldr	r2, [pc, #100]	; (8005214 <TIM_OC2_SetConfig+0xf8>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d003      	beq.n	80051bc <TIM_OC2_SetConfig+0xa0>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	4a18      	ldr	r2, [pc, #96]	; (8005218 <TIM_OC2_SetConfig+0xfc>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d113      	bne.n	80051e4 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80051c2:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80051ca:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	695b      	ldr	r3, [r3, #20]
 80051d0:	009b      	lsls	r3, r3, #2
 80051d2:	693a      	ldr	r2, [r7, #16]
 80051d4:	4313      	orrs	r3, r2
 80051d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	699b      	ldr	r3, [r3, #24]
 80051dc:	009b      	lsls	r3, r3, #2
 80051de:	693a      	ldr	r2, [r7, #16]
 80051e0:	4313      	orrs	r3, r2
 80051e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	693a      	ldr	r2, [r7, #16]
 80051e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	68fa      	ldr	r2, [r7, #12]
 80051ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	685a      	ldr	r2, [r3, #4]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	697a      	ldr	r2, [r7, #20]
 80051fc:	621a      	str	r2, [r3, #32]
}
 80051fe:	bf00      	nop
 8005200:	371c      	adds	r7, #28
 8005202:	46bd      	mov	sp, r7
 8005204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005208:	4770      	bx	lr
 800520a:	bf00      	nop
 800520c:	40012c00 	.word	0x40012c00
 8005210:	40014000 	.word	0x40014000
 8005214:	40014400 	.word	0x40014400
 8005218:	40014800 	.word	0x40014800

0800521c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800521c:	b480      	push	{r7}
 800521e:	b087      	sub	sp, #28
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
 8005224:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6a1b      	ldr	r3, [r3, #32]
 800522a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6a1b      	ldr	r3, [r3, #32]
 8005236:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	69db      	ldr	r3, [r3, #28]
 8005242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800524a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800524e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f023 0303 	bic.w	r3, r3, #3
 8005256:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	68fa      	ldr	r2, [r7, #12]
 800525e:	4313      	orrs	r3, r2
 8005260:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005268:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	021b      	lsls	r3, r3, #8
 8005270:	697a      	ldr	r2, [r7, #20]
 8005272:	4313      	orrs	r3, r2
 8005274:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	4a23      	ldr	r2, [pc, #140]	; (8005308 <TIM_OC3_SetConfig+0xec>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d10d      	bne.n	800529a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005284:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	68db      	ldr	r3, [r3, #12]
 800528a:	021b      	lsls	r3, r3, #8
 800528c:	697a      	ldr	r2, [r7, #20]
 800528e:	4313      	orrs	r3, r2
 8005290:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005298:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4a1a      	ldr	r2, [pc, #104]	; (8005308 <TIM_OC3_SetConfig+0xec>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d00b      	beq.n	80052ba <TIM_OC3_SetConfig+0x9e>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4a19      	ldr	r2, [pc, #100]	; (800530c <TIM_OC3_SetConfig+0xf0>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d007      	beq.n	80052ba <TIM_OC3_SetConfig+0x9e>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4a18      	ldr	r2, [pc, #96]	; (8005310 <TIM_OC3_SetConfig+0xf4>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d003      	beq.n	80052ba <TIM_OC3_SetConfig+0x9e>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	4a17      	ldr	r2, [pc, #92]	; (8005314 <TIM_OC3_SetConfig+0xf8>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d113      	bne.n	80052e2 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80052c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80052c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	695b      	ldr	r3, [r3, #20]
 80052ce:	011b      	lsls	r3, r3, #4
 80052d0:	693a      	ldr	r2, [r7, #16]
 80052d2:	4313      	orrs	r3, r2
 80052d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	699b      	ldr	r3, [r3, #24]
 80052da:	011b      	lsls	r3, r3, #4
 80052dc:	693a      	ldr	r2, [r7, #16]
 80052de:	4313      	orrs	r3, r2
 80052e0:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	693a      	ldr	r2, [r7, #16]
 80052e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	68fa      	ldr	r2, [r7, #12]
 80052ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	685a      	ldr	r2, [r3, #4]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	697a      	ldr	r2, [r7, #20]
 80052fa:	621a      	str	r2, [r3, #32]
}
 80052fc:	bf00      	nop
 80052fe:	371c      	adds	r7, #28
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr
 8005308:	40012c00 	.word	0x40012c00
 800530c:	40014000 	.word	0x40014000
 8005310:	40014400 	.word	0x40014400
 8005314:	40014800 	.word	0x40014800

08005318 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005318:	b480      	push	{r7}
 800531a:	b087      	sub	sp, #28
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6a1b      	ldr	r3, [r3, #32]
 8005326:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6a1b      	ldr	r3, [r3, #32]
 8005332:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	69db      	ldr	r3, [r3, #28]
 800533e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005346:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800534a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005352:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	021b      	lsls	r3, r3, #8
 800535a:	68fa      	ldr	r2, [r7, #12]
 800535c:	4313      	orrs	r3, r2
 800535e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005366:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	031b      	lsls	r3, r3, #12
 800536e:	693a      	ldr	r2, [r7, #16]
 8005370:	4313      	orrs	r3, r2
 8005372:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	4a16      	ldr	r2, [pc, #88]	; (80053d0 <TIM_OC4_SetConfig+0xb8>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d00b      	beq.n	8005394 <TIM_OC4_SetConfig+0x7c>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	4a15      	ldr	r2, [pc, #84]	; (80053d4 <TIM_OC4_SetConfig+0xbc>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d007      	beq.n	8005394 <TIM_OC4_SetConfig+0x7c>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	4a14      	ldr	r2, [pc, #80]	; (80053d8 <TIM_OC4_SetConfig+0xc0>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d003      	beq.n	8005394 <TIM_OC4_SetConfig+0x7c>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	4a13      	ldr	r2, [pc, #76]	; (80053dc <TIM_OC4_SetConfig+0xc4>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d109      	bne.n	80053a8 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800539a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	695b      	ldr	r3, [r3, #20]
 80053a0:	019b      	lsls	r3, r3, #6
 80053a2:	697a      	ldr	r2, [r7, #20]
 80053a4:	4313      	orrs	r3, r2
 80053a6:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	697a      	ldr	r2, [r7, #20]
 80053ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	68fa      	ldr	r2, [r7, #12]
 80053b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	685a      	ldr	r2, [r3, #4]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	693a      	ldr	r2, [r7, #16]
 80053c0:	621a      	str	r2, [r3, #32]
}
 80053c2:	bf00      	nop
 80053c4:	371c      	adds	r7, #28
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr
 80053ce:	bf00      	nop
 80053d0:	40012c00 	.word	0x40012c00
 80053d4:	40014000 	.word	0x40014000
 80053d8:	40014400 	.word	0x40014400
 80053dc:	40014800 	.word	0x40014800

080053e0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b087      	sub	sp, #28
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6a1b      	ldr	r3, [r3, #32]
 80053ee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6a1b      	ldr	r3, [r3, #32]
 80053fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800540e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005412:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	68fa      	ldr	r2, [r7, #12]
 800541a:	4313      	orrs	r3, r2
 800541c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005424:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	041b      	lsls	r3, r3, #16
 800542c:	693a      	ldr	r2, [r7, #16]
 800542e:	4313      	orrs	r3, r2
 8005430:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	4a15      	ldr	r2, [pc, #84]	; (800548c <TIM_OC5_SetConfig+0xac>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d00b      	beq.n	8005452 <TIM_OC5_SetConfig+0x72>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	4a14      	ldr	r2, [pc, #80]	; (8005490 <TIM_OC5_SetConfig+0xb0>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d007      	beq.n	8005452 <TIM_OC5_SetConfig+0x72>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	4a13      	ldr	r2, [pc, #76]	; (8005494 <TIM_OC5_SetConfig+0xb4>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d003      	beq.n	8005452 <TIM_OC5_SetConfig+0x72>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	4a12      	ldr	r2, [pc, #72]	; (8005498 <TIM_OC5_SetConfig+0xb8>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d109      	bne.n	8005466 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005458:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	695b      	ldr	r3, [r3, #20]
 800545e:	021b      	lsls	r3, r3, #8
 8005460:	697a      	ldr	r2, [r7, #20]
 8005462:	4313      	orrs	r3, r2
 8005464:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	697a      	ldr	r2, [r7, #20]
 800546a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	68fa      	ldr	r2, [r7, #12]
 8005470:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	685a      	ldr	r2, [r3, #4]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	693a      	ldr	r2, [r7, #16]
 800547e:	621a      	str	r2, [r3, #32]
}
 8005480:	bf00      	nop
 8005482:	371c      	adds	r7, #28
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr
 800548c:	40012c00 	.word	0x40012c00
 8005490:	40014000 	.word	0x40014000
 8005494:	40014400 	.word	0x40014400
 8005498:	40014800 	.word	0x40014800

0800549c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800549c:	b480      	push	{r7}
 800549e:	b087      	sub	sp, #28
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6a1b      	ldr	r3, [r3, #32]
 80054aa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6a1b      	ldr	r3, [r3, #32]
 80054b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80054ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	021b      	lsls	r3, r3, #8
 80054d6:	68fa      	ldr	r2, [r7, #12]
 80054d8:	4313      	orrs	r3, r2
 80054da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80054e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	051b      	lsls	r3, r3, #20
 80054ea:	693a      	ldr	r2, [r7, #16]
 80054ec:	4313      	orrs	r3, r2
 80054ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	4a16      	ldr	r2, [pc, #88]	; (800554c <TIM_OC6_SetConfig+0xb0>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d00b      	beq.n	8005510 <TIM_OC6_SetConfig+0x74>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	4a15      	ldr	r2, [pc, #84]	; (8005550 <TIM_OC6_SetConfig+0xb4>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d007      	beq.n	8005510 <TIM_OC6_SetConfig+0x74>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	4a14      	ldr	r2, [pc, #80]	; (8005554 <TIM_OC6_SetConfig+0xb8>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d003      	beq.n	8005510 <TIM_OC6_SetConfig+0x74>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	4a13      	ldr	r2, [pc, #76]	; (8005558 <TIM_OC6_SetConfig+0xbc>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d109      	bne.n	8005524 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005516:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	695b      	ldr	r3, [r3, #20]
 800551c:	029b      	lsls	r3, r3, #10
 800551e:	697a      	ldr	r2, [r7, #20]
 8005520:	4313      	orrs	r3, r2
 8005522:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	697a      	ldr	r2, [r7, #20]
 8005528:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	68fa      	ldr	r2, [r7, #12]
 800552e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	685a      	ldr	r2, [r3, #4]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	693a      	ldr	r2, [r7, #16]
 800553c:	621a      	str	r2, [r3, #32]
}
 800553e:	bf00      	nop
 8005540:	371c      	adds	r7, #28
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr
 800554a:	bf00      	nop
 800554c:	40012c00 	.word	0x40012c00
 8005550:	40014000 	.word	0x40014000
 8005554:	40014400 	.word	0x40014400
 8005558:	40014800 	.word	0x40014800

0800555c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800555c:	b480      	push	{r7}
 800555e:	b087      	sub	sp, #28
 8005560:	af00      	add	r7, sp, #0
 8005562:	60f8      	str	r0, [r7, #12]
 8005564:	60b9      	str	r1, [r7, #8]
 8005566:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	6a1b      	ldr	r3, [r3, #32]
 800556c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	6a1b      	ldr	r3, [r3, #32]
 8005572:	f023 0201 	bic.w	r2, r3, #1
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	699b      	ldr	r3, [r3, #24]
 800557e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005586:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	011b      	lsls	r3, r3, #4
 800558c:	693a      	ldr	r2, [r7, #16]
 800558e:	4313      	orrs	r3, r2
 8005590:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	f023 030a 	bic.w	r3, r3, #10
 8005598:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800559a:	697a      	ldr	r2, [r7, #20]
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	4313      	orrs	r3, r2
 80055a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	693a      	ldr	r2, [r7, #16]
 80055a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	697a      	ldr	r2, [r7, #20]
 80055ac:	621a      	str	r2, [r3, #32]
}
 80055ae:	bf00      	nop
 80055b0:	371c      	adds	r7, #28
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr

080055ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055ba:	b480      	push	{r7}
 80055bc:	b087      	sub	sp, #28
 80055be:	af00      	add	r7, sp, #0
 80055c0:	60f8      	str	r0, [r7, #12]
 80055c2:	60b9      	str	r1, [r7, #8]
 80055c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	6a1b      	ldr	r3, [r3, #32]
 80055ca:	f023 0210 	bic.w	r2, r3, #16
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	699b      	ldr	r3, [r3, #24]
 80055d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	6a1b      	ldr	r3, [r3, #32]
 80055dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80055e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	031b      	lsls	r3, r3, #12
 80055ea:	697a      	ldr	r2, [r7, #20]
 80055ec:	4313      	orrs	r3, r2
 80055ee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80055f6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	011b      	lsls	r3, r3, #4
 80055fc:	693a      	ldr	r2, [r7, #16]
 80055fe:	4313      	orrs	r3, r2
 8005600:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	697a      	ldr	r2, [r7, #20]
 8005606:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	693a      	ldr	r2, [r7, #16]
 800560c:	621a      	str	r2, [r3, #32]
}
 800560e:	bf00      	nop
 8005610:	371c      	adds	r7, #28
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr

0800561a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800561a:	b480      	push	{r7}
 800561c:	b085      	sub	sp, #20
 800561e:	af00      	add	r7, sp, #0
 8005620:	6078      	str	r0, [r7, #4]
 8005622:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005630:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005632:	683a      	ldr	r2, [r7, #0]
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	4313      	orrs	r3, r2
 8005638:	f043 0307 	orr.w	r3, r3, #7
 800563c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	68fa      	ldr	r2, [r7, #12]
 8005642:	609a      	str	r2, [r3, #8]
}
 8005644:	bf00      	nop
 8005646:	3714      	adds	r7, #20
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr

08005650 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005650:	b480      	push	{r7}
 8005652:	b087      	sub	sp, #28
 8005654:	af00      	add	r7, sp, #0
 8005656:	60f8      	str	r0, [r7, #12]
 8005658:	60b9      	str	r1, [r7, #8]
 800565a:	607a      	str	r2, [r7, #4]
 800565c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800566a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	021a      	lsls	r2, r3, #8
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	431a      	orrs	r2, r3
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	4313      	orrs	r3, r2
 8005678:	697a      	ldr	r2, [r7, #20]
 800567a:	4313      	orrs	r3, r2
 800567c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	697a      	ldr	r2, [r7, #20]
 8005682:	609a      	str	r2, [r3, #8]
}
 8005684:	bf00      	nop
 8005686:	371c      	adds	r7, #28
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr

08005690 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005690:	b480      	push	{r7}
 8005692:	b087      	sub	sp, #28
 8005694:	af00      	add	r7, sp, #0
 8005696:	60f8      	str	r0, [r7, #12]
 8005698:	60b9      	str	r1, [r7, #8]
 800569a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	f003 031f 	and.w	r3, r3, #31
 80056a2:	2201      	movs	r2, #1
 80056a4:	fa02 f303 	lsl.w	r3, r2, r3
 80056a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	6a1a      	ldr	r2, [r3, #32]
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	43db      	mvns	r3, r3
 80056b2:	401a      	ands	r2, r3
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	6a1a      	ldr	r2, [r3, #32]
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	f003 031f 	and.w	r3, r3, #31
 80056c2:	6879      	ldr	r1, [r7, #4]
 80056c4:	fa01 f303 	lsl.w	r3, r1, r3
 80056c8:	431a      	orrs	r2, r3
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	621a      	str	r2, [r3, #32]
}
 80056ce:	bf00      	nop
 80056d0:	371c      	adds	r7, #28
 80056d2:	46bd      	mov	sp, r7
 80056d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d8:	4770      	bx	lr
	...

080056dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80056dc:	b480      	push	{r7}
 80056de:	b085      	sub	sp, #20
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d101      	bne.n	80056f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80056f0:	2302      	movs	r3, #2
 80056f2:	e054      	b.n	800579e <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2201      	movs	r2, #1
 80056f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2202      	movs	r2, #2
 8005700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a24      	ldr	r2, [pc, #144]	; (80057ac <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d108      	bne.n	8005730 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005724:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	68fa      	ldr	r2, [r7, #12]
 800572c:	4313      	orrs	r3, r2
 800572e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005736:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	68fa      	ldr	r2, [r7, #12]
 800573e:	4313      	orrs	r3, r2
 8005740:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	68fa      	ldr	r2, [r7, #12]
 8005748:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a17      	ldr	r2, [pc, #92]	; (80057ac <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d00e      	beq.n	8005772 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800575c:	d009      	beq.n	8005772 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a13      	ldr	r2, [pc, #76]	; (80057b0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d004      	beq.n	8005772 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a11      	ldr	r2, [pc, #68]	; (80057b4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d10c      	bne.n	800578c <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005778:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	68ba      	ldr	r2, [r7, #8]
 8005780:	4313      	orrs	r3, r2
 8005782:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	68ba      	ldr	r2, [r7, #8]
 800578a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2201      	movs	r2, #1
 8005790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2200      	movs	r2, #0
 8005798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800579c:	2300      	movs	r3, #0
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3714      	adds	r7, #20
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr
 80057aa:	bf00      	nop
 80057ac:	40012c00 	.word	0x40012c00
 80057b0:	40000400 	.word	0x40000400
 80057b4:	40014000 	.word	0x40014000

080057b8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b085      	sub	sp, #20
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
 80057c0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80057c2:	2300      	movs	r3, #0
 80057c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d101      	bne.n	80057d4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80057d0:	2302      	movs	r3, #2
 80057d2:	e060      	b.n	8005896 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2201      	movs	r2, #1
 80057d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	68db      	ldr	r3, [r3, #12]
 80057e6:	4313      	orrs	r3, r2
 80057e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	4313      	orrs	r3, r2
 80057f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	4313      	orrs	r3, r2
 8005804:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4313      	orrs	r3, r2
 8005812:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	691b      	ldr	r3, [r3, #16]
 800581e:	4313      	orrs	r3, r2
 8005820:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	695b      	ldr	r3, [r3, #20]
 800582c:	4313      	orrs	r3, r2
 800582e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800583a:	4313      	orrs	r3, r2
 800583c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	699b      	ldr	r3, [r3, #24]
 8005848:	041b      	lsls	r3, r3, #16
 800584a:	4313      	orrs	r3, r2
 800584c:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a14      	ldr	r2, [pc, #80]	; (80058a4 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d115      	bne.n	8005884 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005862:	051b      	lsls	r3, r3, #20
 8005864:	4313      	orrs	r3, r2
 8005866:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	69db      	ldr	r3, [r3, #28]
 8005872:	4313      	orrs	r3, r2
 8005874:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	6a1b      	ldr	r3, [r3, #32]
 8005880:	4313      	orrs	r3, r2
 8005882:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	68fa      	ldr	r2, [r7, #12]
 800588a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2200      	movs	r2, #0
 8005890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005894:	2300      	movs	r3, #0
}
 8005896:	4618      	mov	r0, r3
 8005898:	3714      	adds	r7, #20
 800589a:	46bd      	mov	sp, r7
 800589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a0:	4770      	bx	lr
 80058a2:	bf00      	nop
 80058a4:	40012c00 	.word	0x40012c00

080058a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b082      	sub	sp, #8
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d101      	bne.n	80058ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80058b6:	2301      	movs	r3, #1
 80058b8:	e040      	b.n	800593c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d106      	bne.n	80058d0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2200      	movs	r2, #0
 80058c6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f7fb ffe4 	bl	8001898 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2224      	movs	r2, #36	; 0x24
 80058d4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	681a      	ldr	r2, [r3, #0]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f022 0201 	bic.w	r2, r2, #1
 80058e4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f000 f82c 	bl	8005944 <UART_SetConfig>
 80058ec:	4603      	mov	r3, r0
 80058ee:	2b01      	cmp	r3, #1
 80058f0:	d101      	bne.n	80058f6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80058f2:	2301      	movs	r3, #1
 80058f4:	e022      	b.n	800593c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d002      	beq.n	8005904 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f000 f956 	bl	8005bb0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	685a      	ldr	r2, [r3, #4]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005912:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	689a      	ldr	r2, [r3, #8]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005922:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f042 0201 	orr.w	r2, r2, #1
 8005932:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f000 f9dd 	bl	8005cf4 <UART_CheckIdleState>
 800593a:	4603      	mov	r3, r0
}
 800593c:	4618      	mov	r0, r3
 800593e:	3708      	adds	r7, #8
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}

08005944 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b088      	sub	sp, #32
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800594c:	2300      	movs	r3, #0
 800594e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	689a      	ldr	r2, [r3, #8]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	691b      	ldr	r3, [r3, #16]
 8005958:	431a      	orrs	r2, r3
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	695b      	ldr	r3, [r3, #20]
 800595e:	431a      	orrs	r2, r3
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	69db      	ldr	r3, [r3, #28]
 8005964:	4313      	orrs	r3, r2
 8005966:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	4b8a      	ldr	r3, [pc, #552]	; (8005b98 <UART_SetConfig+0x254>)
 8005970:	4013      	ands	r3, r2
 8005972:	687a      	ldr	r2, [r7, #4]
 8005974:	6812      	ldr	r2, [r2, #0]
 8005976:	6979      	ldr	r1, [r7, #20]
 8005978:	430b      	orrs	r3, r1
 800597a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	68da      	ldr	r2, [r3, #12]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	430a      	orrs	r2, r1
 8005990:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	699b      	ldr	r3, [r3, #24]
 8005996:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6a1b      	ldr	r3, [r3, #32]
 800599c:	697a      	ldr	r2, [r7, #20]
 800599e:	4313      	orrs	r3, r2
 80059a0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	697a      	ldr	r2, [r7, #20]
 80059b2:	430a      	orrs	r2, r1
 80059b4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a78      	ldr	r2, [pc, #480]	; (8005b9c <UART_SetConfig+0x258>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d120      	bne.n	8005a02 <UART_SetConfig+0xbe>
 80059c0:	4b77      	ldr	r3, [pc, #476]	; (8005ba0 <UART_SetConfig+0x25c>)
 80059c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059c4:	f003 0303 	and.w	r3, r3, #3
 80059c8:	2b03      	cmp	r3, #3
 80059ca:	d817      	bhi.n	80059fc <UART_SetConfig+0xb8>
 80059cc:	a201      	add	r2, pc, #4	; (adr r2, 80059d4 <UART_SetConfig+0x90>)
 80059ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059d2:	bf00      	nop
 80059d4:	080059e5 	.word	0x080059e5
 80059d8:	080059f1 	.word	0x080059f1
 80059dc:	080059f7 	.word	0x080059f7
 80059e0:	080059eb 	.word	0x080059eb
 80059e4:	2300      	movs	r3, #0
 80059e6:	77fb      	strb	r3, [r7, #31]
 80059e8:	e01d      	b.n	8005a26 <UART_SetConfig+0xe2>
 80059ea:	2302      	movs	r3, #2
 80059ec:	77fb      	strb	r3, [r7, #31]
 80059ee:	e01a      	b.n	8005a26 <UART_SetConfig+0xe2>
 80059f0:	2304      	movs	r3, #4
 80059f2:	77fb      	strb	r3, [r7, #31]
 80059f4:	e017      	b.n	8005a26 <UART_SetConfig+0xe2>
 80059f6:	2308      	movs	r3, #8
 80059f8:	77fb      	strb	r3, [r7, #31]
 80059fa:	e014      	b.n	8005a26 <UART_SetConfig+0xe2>
 80059fc:	2310      	movs	r3, #16
 80059fe:	77fb      	strb	r3, [r7, #31]
 8005a00:	e011      	b.n	8005a26 <UART_SetConfig+0xe2>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a67      	ldr	r2, [pc, #412]	; (8005ba4 <UART_SetConfig+0x260>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d102      	bne.n	8005a12 <UART_SetConfig+0xce>
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	77fb      	strb	r3, [r7, #31]
 8005a10:	e009      	b.n	8005a26 <UART_SetConfig+0xe2>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a64      	ldr	r2, [pc, #400]	; (8005ba8 <UART_SetConfig+0x264>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d102      	bne.n	8005a22 <UART_SetConfig+0xde>
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	77fb      	strb	r3, [r7, #31]
 8005a20:	e001      	b.n	8005a26 <UART_SetConfig+0xe2>
 8005a22:	2310      	movs	r3, #16
 8005a24:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	69db      	ldr	r3, [r3, #28]
 8005a2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a2e:	d15b      	bne.n	8005ae8 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8005a30:	7ffb      	ldrb	r3, [r7, #31]
 8005a32:	2b08      	cmp	r3, #8
 8005a34:	d827      	bhi.n	8005a86 <UART_SetConfig+0x142>
 8005a36:	a201      	add	r2, pc, #4	; (adr r2, 8005a3c <UART_SetConfig+0xf8>)
 8005a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a3c:	08005a61 	.word	0x08005a61
 8005a40:	08005a69 	.word	0x08005a69
 8005a44:	08005a71 	.word	0x08005a71
 8005a48:	08005a87 	.word	0x08005a87
 8005a4c:	08005a77 	.word	0x08005a77
 8005a50:	08005a87 	.word	0x08005a87
 8005a54:	08005a87 	.word	0x08005a87
 8005a58:	08005a87 	.word	0x08005a87
 8005a5c:	08005a7f 	.word	0x08005a7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a60:	f7fe fd1c 	bl	800449c <HAL_RCC_GetPCLK1Freq>
 8005a64:	61b8      	str	r0, [r7, #24]
        break;
 8005a66:	e013      	b.n	8005a90 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a68:	f7fe fd3a 	bl	80044e0 <HAL_RCC_GetPCLK2Freq>
 8005a6c:	61b8      	str	r0, [r7, #24]
        break;
 8005a6e:	e00f      	b.n	8005a90 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a70:	4b4e      	ldr	r3, [pc, #312]	; (8005bac <UART_SetConfig+0x268>)
 8005a72:	61bb      	str	r3, [r7, #24]
        break;
 8005a74:	e00c      	b.n	8005a90 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a76:	f7fe fc9b 	bl	80043b0 <HAL_RCC_GetSysClockFreq>
 8005a7a:	61b8      	str	r0, [r7, #24]
        break;
 8005a7c:	e008      	b.n	8005a90 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a82:	61bb      	str	r3, [r7, #24]
        break;
 8005a84:	e004      	b.n	8005a90 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8005a86:	2300      	movs	r3, #0
 8005a88:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	77bb      	strb	r3, [r7, #30]
        break;
 8005a8e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005a90:	69bb      	ldr	r3, [r7, #24]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d074      	beq.n	8005b80 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005a96:	69bb      	ldr	r3, [r7, #24]
 8005a98:	005a      	lsls	r2, r3, #1
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	085b      	lsrs	r3, r3, #1
 8005aa0:	441a      	add	r2, r3
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	2b0f      	cmp	r3, #15
 8005ab2:	d916      	bls.n	8005ae2 <UART_SetConfig+0x19e>
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005aba:	d212      	bcs.n	8005ae2 <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	f023 030f 	bic.w	r3, r3, #15
 8005ac4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	085b      	lsrs	r3, r3, #1
 8005aca:	b29b      	uxth	r3, r3
 8005acc:	f003 0307 	and.w	r3, r3, #7
 8005ad0:	b29a      	uxth	r2, r3
 8005ad2:	89fb      	ldrh	r3, [r7, #14]
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	89fa      	ldrh	r2, [r7, #14]
 8005ade:	60da      	str	r2, [r3, #12]
 8005ae0:	e04e      	b.n	8005b80 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	77bb      	strb	r3, [r7, #30]
 8005ae6:	e04b      	b.n	8005b80 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005ae8:	7ffb      	ldrb	r3, [r7, #31]
 8005aea:	2b08      	cmp	r3, #8
 8005aec:	d827      	bhi.n	8005b3e <UART_SetConfig+0x1fa>
 8005aee:	a201      	add	r2, pc, #4	; (adr r2, 8005af4 <UART_SetConfig+0x1b0>)
 8005af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005af4:	08005b19 	.word	0x08005b19
 8005af8:	08005b21 	.word	0x08005b21
 8005afc:	08005b29 	.word	0x08005b29
 8005b00:	08005b3f 	.word	0x08005b3f
 8005b04:	08005b2f 	.word	0x08005b2f
 8005b08:	08005b3f 	.word	0x08005b3f
 8005b0c:	08005b3f 	.word	0x08005b3f
 8005b10:	08005b3f 	.word	0x08005b3f
 8005b14:	08005b37 	.word	0x08005b37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b18:	f7fe fcc0 	bl	800449c <HAL_RCC_GetPCLK1Freq>
 8005b1c:	61b8      	str	r0, [r7, #24]
        break;
 8005b1e:	e013      	b.n	8005b48 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b20:	f7fe fcde 	bl	80044e0 <HAL_RCC_GetPCLK2Freq>
 8005b24:	61b8      	str	r0, [r7, #24]
        break;
 8005b26:	e00f      	b.n	8005b48 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b28:	4b20      	ldr	r3, [pc, #128]	; (8005bac <UART_SetConfig+0x268>)
 8005b2a:	61bb      	str	r3, [r7, #24]
        break;
 8005b2c:	e00c      	b.n	8005b48 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b2e:	f7fe fc3f 	bl	80043b0 <HAL_RCC_GetSysClockFreq>
 8005b32:	61b8      	str	r0, [r7, #24]
        break;
 8005b34:	e008      	b.n	8005b48 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b3a:	61bb      	str	r3, [r7, #24]
        break;
 8005b3c:	e004      	b.n	8005b48 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005b42:	2301      	movs	r3, #1
 8005b44:	77bb      	strb	r3, [r7, #30]
        break;
 8005b46:	bf00      	nop
    }

    if (pclk != 0U)
 8005b48:	69bb      	ldr	r3, [r7, #24]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d018      	beq.n	8005b80 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	085a      	lsrs	r2, r3, #1
 8005b54:	69bb      	ldr	r3, [r7, #24]
 8005b56:	441a      	add	r2, r3
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b60:	b29b      	uxth	r3, r3
 8005b62:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	2b0f      	cmp	r3, #15
 8005b68:	d908      	bls.n	8005b7c <UART_SetConfig+0x238>
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b70:	d204      	bcs.n	8005b7c <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	693a      	ldr	r2, [r7, #16]
 8005b78:	60da      	str	r2, [r3, #12]
 8005b7a:	e001      	b.n	8005b80 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2200      	movs	r2, #0
 8005b84:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005b8c:	7fbb      	ldrb	r3, [r7, #30]
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3720      	adds	r7, #32
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}
 8005b96:	bf00      	nop
 8005b98:	efff69f3 	.word	0xefff69f3
 8005b9c:	40013800 	.word	0x40013800
 8005ba0:	40021000 	.word	0x40021000
 8005ba4:	40004400 	.word	0x40004400
 8005ba8:	40004800 	.word	0x40004800
 8005bac:	007a1200 	.word	0x007a1200

08005bb0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b083      	sub	sp, #12
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bbc:	f003 0301 	and.w	r3, r3, #1
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d00a      	beq.n	8005bda <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	430a      	orrs	r2, r1
 8005bd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bde:	f003 0302 	and.w	r3, r3, #2
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d00a      	beq.n	8005bfc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	430a      	orrs	r2, r1
 8005bfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c00:	f003 0304 	and.w	r3, r3, #4
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d00a      	beq.n	8005c1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	430a      	orrs	r2, r1
 8005c1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c22:	f003 0308 	and.w	r3, r3, #8
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d00a      	beq.n	8005c40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	430a      	orrs	r2, r1
 8005c3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c44:	f003 0310 	and.w	r3, r3, #16
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d00a      	beq.n	8005c62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	430a      	orrs	r2, r1
 8005c60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c66:	f003 0320 	and.w	r3, r3, #32
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d00a      	beq.n	8005c84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	430a      	orrs	r2, r1
 8005c82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d01a      	beq.n	8005cc6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	430a      	orrs	r2, r1
 8005ca4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005caa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005cae:	d10a      	bne.n	8005cc6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	430a      	orrs	r2, r1
 8005cc4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d00a      	beq.n	8005ce8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	430a      	orrs	r2, r1
 8005ce6:	605a      	str	r2, [r3, #4]
  }
}
 8005ce8:	bf00      	nop
 8005cea:	370c      	adds	r7, #12
 8005cec:	46bd      	mov	sp, r7
 8005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf2:	4770      	bx	lr

08005cf4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b086      	sub	sp, #24
 8005cf8:	af02      	add	r7, sp, #8
 8005cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005d04:	f7fb ff92 	bl	8001c2c <HAL_GetTick>
 8005d08:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f003 0308 	and.w	r3, r3, #8
 8005d14:	2b08      	cmp	r3, #8
 8005d16:	d10e      	bne.n	8005d36 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005d1c:	9300      	str	r3, [sp, #0]
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2200      	movs	r2, #0
 8005d22:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f000 f82d 	bl	8005d86 <UART_WaitOnFlagUntilTimeout>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d001      	beq.n	8005d36 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d32:	2303      	movs	r3, #3
 8005d34:	e023      	b.n	8005d7e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f003 0304 	and.w	r3, r3, #4
 8005d40:	2b04      	cmp	r3, #4
 8005d42:	d10e      	bne.n	8005d62 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005d48:	9300      	str	r3, [sp, #0]
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f000 f817 	bl	8005d86 <UART_WaitOnFlagUntilTimeout>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d001      	beq.n	8005d62 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d5e:	2303      	movs	r3, #3
 8005d60:	e00d      	b.n	8005d7e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2220      	movs	r2, #32
 8005d66:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2220      	movs	r2, #32
 8005d6c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2200      	movs	r2, #0
 8005d72:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2200      	movs	r2, #0
 8005d78:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005d7c:	2300      	movs	r3, #0
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3710      	adds	r7, #16
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}

08005d86 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005d86:	b580      	push	{r7, lr}
 8005d88:	b09c      	sub	sp, #112	; 0x70
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	60f8      	str	r0, [r7, #12]
 8005d8e:	60b9      	str	r1, [r7, #8]
 8005d90:	603b      	str	r3, [r7, #0]
 8005d92:	4613      	mov	r3, r2
 8005d94:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d96:	e0a5      	b.n	8005ee4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d9e:	f000 80a1 	beq.w	8005ee4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005da2:	f7fb ff43 	bl	8001c2c <HAL_GetTick>
 8005da6:	4602      	mov	r2, r0
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	1ad3      	subs	r3, r2, r3
 8005dac:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005dae:	429a      	cmp	r2, r3
 8005db0:	d302      	bcc.n	8005db8 <UART_WaitOnFlagUntilTimeout+0x32>
 8005db2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d13e      	bne.n	8005e36 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005dc0:	e853 3f00 	ldrex	r3, [r3]
 8005dc4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005dc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dc8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005dcc:	667b      	str	r3, [r7, #100]	; 0x64
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	461a      	mov	r2, r3
 8005dd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005dd6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005dd8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dda:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005ddc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005dde:	e841 2300 	strex	r3, r2, [r1]
 8005de2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005de4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d1e6      	bne.n	8005db8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	3308      	adds	r3, #8
 8005df0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005df4:	e853 3f00 	ldrex	r3, [r3]
 8005df8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dfc:	f023 0301 	bic.w	r3, r3, #1
 8005e00:	663b      	str	r3, [r7, #96]	; 0x60
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	3308      	adds	r3, #8
 8005e08:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005e0a:	64ba      	str	r2, [r7, #72]	; 0x48
 8005e0c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e0e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005e10:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e12:	e841 2300 	strex	r3, r2, [r1]
 8005e16:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005e18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d1e5      	bne.n	8005dea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2220      	movs	r2, #32
 8005e22:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2220      	movs	r2, #32
 8005e28:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005e32:	2303      	movs	r3, #3
 8005e34:	e067      	b.n	8005f06 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f003 0304 	and.w	r3, r3, #4
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d04f      	beq.n	8005ee4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	69db      	ldr	r3, [r3, #28]
 8005e4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e52:	d147      	bne.n	8005ee4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e5c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e66:	e853 3f00 	ldrex	r3, [r3]
 8005e6a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e6e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005e72:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	461a      	mov	r2, r3
 8005e7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e7c:	637b      	str	r3, [r7, #52]	; 0x34
 8005e7e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e80:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005e82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e84:	e841 2300 	strex	r3, r2, [r1]
 8005e88:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d1e6      	bne.n	8005e5e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	3308      	adds	r3, #8
 8005e96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	e853 3f00 	ldrex	r3, [r3]
 8005e9e:	613b      	str	r3, [r7, #16]
   return(result);
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	f023 0301 	bic.w	r3, r3, #1
 8005ea6:	66bb      	str	r3, [r7, #104]	; 0x68
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	3308      	adds	r3, #8
 8005eae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005eb0:	623a      	str	r2, [r7, #32]
 8005eb2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eb4:	69f9      	ldr	r1, [r7, #28]
 8005eb6:	6a3a      	ldr	r2, [r7, #32]
 8005eb8:	e841 2300 	strex	r3, r2, [r1]
 8005ebc:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ebe:	69bb      	ldr	r3, [r7, #24]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d1e5      	bne.n	8005e90 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2220      	movs	r2, #32
 8005ec8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2220      	movs	r2, #32
 8005ece:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2220      	movs	r2, #32
 8005ed4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2200      	movs	r2, #0
 8005edc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005ee0:	2303      	movs	r3, #3
 8005ee2:	e010      	b.n	8005f06 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	69da      	ldr	r2, [r3, #28]
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	4013      	ands	r3, r2
 8005eee:	68ba      	ldr	r2, [r7, #8]
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	bf0c      	ite	eq
 8005ef4:	2301      	moveq	r3, #1
 8005ef6:	2300      	movne	r3, #0
 8005ef8:	b2db      	uxtb	r3, r3
 8005efa:	461a      	mov	r2, r3
 8005efc:	79fb      	ldrb	r3, [r7, #7]
 8005efe:	429a      	cmp	r2, r3
 8005f00:	f43f af4a 	beq.w	8005d98 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f04:	2300      	movs	r3, #0
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3770      	adds	r7, #112	; 0x70
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}
	...

08005f10 <__errno>:
 8005f10:	4b01      	ldr	r3, [pc, #4]	; (8005f18 <__errno+0x8>)
 8005f12:	6818      	ldr	r0, [r3, #0]
 8005f14:	4770      	bx	lr
 8005f16:	bf00      	nop
 8005f18:	2000000c 	.word	0x2000000c

08005f1c <__libc_init_array>:
 8005f1c:	b570      	push	{r4, r5, r6, lr}
 8005f1e:	4d0d      	ldr	r5, [pc, #52]	; (8005f54 <__libc_init_array+0x38>)
 8005f20:	4c0d      	ldr	r4, [pc, #52]	; (8005f58 <__libc_init_array+0x3c>)
 8005f22:	1b64      	subs	r4, r4, r5
 8005f24:	10a4      	asrs	r4, r4, #2
 8005f26:	2600      	movs	r6, #0
 8005f28:	42a6      	cmp	r6, r4
 8005f2a:	d109      	bne.n	8005f40 <__libc_init_array+0x24>
 8005f2c:	4d0b      	ldr	r5, [pc, #44]	; (8005f5c <__libc_init_array+0x40>)
 8005f2e:	4c0c      	ldr	r4, [pc, #48]	; (8005f60 <__libc_init_array+0x44>)
 8005f30:	f005 f8aa 	bl	800b088 <_init>
 8005f34:	1b64      	subs	r4, r4, r5
 8005f36:	10a4      	asrs	r4, r4, #2
 8005f38:	2600      	movs	r6, #0
 8005f3a:	42a6      	cmp	r6, r4
 8005f3c:	d105      	bne.n	8005f4a <__libc_init_array+0x2e>
 8005f3e:	bd70      	pop	{r4, r5, r6, pc}
 8005f40:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f44:	4798      	blx	r3
 8005f46:	3601      	adds	r6, #1
 8005f48:	e7ee      	b.n	8005f28 <__libc_init_array+0xc>
 8005f4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f4e:	4798      	blx	r3
 8005f50:	3601      	adds	r6, #1
 8005f52:	e7f2      	b.n	8005f3a <__libc_init_array+0x1e>
 8005f54:	0800b594 	.word	0x0800b594
 8005f58:	0800b594 	.word	0x0800b594
 8005f5c:	0800b594 	.word	0x0800b594
 8005f60:	0800b598 	.word	0x0800b598

08005f64 <memset>:
 8005f64:	4402      	add	r2, r0
 8005f66:	4603      	mov	r3, r0
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d100      	bne.n	8005f6e <memset+0xa>
 8005f6c:	4770      	bx	lr
 8005f6e:	f803 1b01 	strb.w	r1, [r3], #1
 8005f72:	e7f9      	b.n	8005f68 <memset+0x4>

08005f74 <__cvt>:
 8005f74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f78:	ec55 4b10 	vmov	r4, r5, d0
 8005f7c:	2d00      	cmp	r5, #0
 8005f7e:	460e      	mov	r6, r1
 8005f80:	4619      	mov	r1, r3
 8005f82:	462b      	mov	r3, r5
 8005f84:	bfbb      	ittet	lt
 8005f86:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005f8a:	461d      	movlt	r5, r3
 8005f8c:	2300      	movge	r3, #0
 8005f8e:	232d      	movlt	r3, #45	; 0x2d
 8005f90:	700b      	strb	r3, [r1, #0]
 8005f92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005f94:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005f98:	4691      	mov	r9, r2
 8005f9a:	f023 0820 	bic.w	r8, r3, #32
 8005f9e:	bfbc      	itt	lt
 8005fa0:	4622      	movlt	r2, r4
 8005fa2:	4614      	movlt	r4, r2
 8005fa4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005fa8:	d005      	beq.n	8005fb6 <__cvt+0x42>
 8005faa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005fae:	d100      	bne.n	8005fb2 <__cvt+0x3e>
 8005fb0:	3601      	adds	r6, #1
 8005fb2:	2102      	movs	r1, #2
 8005fb4:	e000      	b.n	8005fb8 <__cvt+0x44>
 8005fb6:	2103      	movs	r1, #3
 8005fb8:	ab03      	add	r3, sp, #12
 8005fba:	9301      	str	r3, [sp, #4]
 8005fbc:	ab02      	add	r3, sp, #8
 8005fbe:	9300      	str	r3, [sp, #0]
 8005fc0:	ec45 4b10 	vmov	d0, r4, r5
 8005fc4:	4653      	mov	r3, sl
 8005fc6:	4632      	mov	r2, r6
 8005fc8:	f001 fdae 	bl	8007b28 <_dtoa_r>
 8005fcc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005fd0:	4607      	mov	r7, r0
 8005fd2:	d102      	bne.n	8005fda <__cvt+0x66>
 8005fd4:	f019 0f01 	tst.w	r9, #1
 8005fd8:	d022      	beq.n	8006020 <__cvt+0xac>
 8005fda:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005fde:	eb07 0906 	add.w	r9, r7, r6
 8005fe2:	d110      	bne.n	8006006 <__cvt+0x92>
 8005fe4:	783b      	ldrb	r3, [r7, #0]
 8005fe6:	2b30      	cmp	r3, #48	; 0x30
 8005fe8:	d10a      	bne.n	8006000 <__cvt+0x8c>
 8005fea:	2200      	movs	r2, #0
 8005fec:	2300      	movs	r3, #0
 8005fee:	4620      	mov	r0, r4
 8005ff0:	4629      	mov	r1, r5
 8005ff2:	f7fa fd69 	bl	8000ac8 <__aeabi_dcmpeq>
 8005ff6:	b918      	cbnz	r0, 8006000 <__cvt+0x8c>
 8005ff8:	f1c6 0601 	rsb	r6, r6, #1
 8005ffc:	f8ca 6000 	str.w	r6, [sl]
 8006000:	f8da 3000 	ldr.w	r3, [sl]
 8006004:	4499      	add	r9, r3
 8006006:	2200      	movs	r2, #0
 8006008:	2300      	movs	r3, #0
 800600a:	4620      	mov	r0, r4
 800600c:	4629      	mov	r1, r5
 800600e:	f7fa fd5b 	bl	8000ac8 <__aeabi_dcmpeq>
 8006012:	b108      	cbz	r0, 8006018 <__cvt+0xa4>
 8006014:	f8cd 900c 	str.w	r9, [sp, #12]
 8006018:	2230      	movs	r2, #48	; 0x30
 800601a:	9b03      	ldr	r3, [sp, #12]
 800601c:	454b      	cmp	r3, r9
 800601e:	d307      	bcc.n	8006030 <__cvt+0xbc>
 8006020:	9b03      	ldr	r3, [sp, #12]
 8006022:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006024:	1bdb      	subs	r3, r3, r7
 8006026:	4638      	mov	r0, r7
 8006028:	6013      	str	r3, [r2, #0]
 800602a:	b004      	add	sp, #16
 800602c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006030:	1c59      	adds	r1, r3, #1
 8006032:	9103      	str	r1, [sp, #12]
 8006034:	701a      	strb	r2, [r3, #0]
 8006036:	e7f0      	b.n	800601a <__cvt+0xa6>

08006038 <__exponent>:
 8006038:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800603a:	4603      	mov	r3, r0
 800603c:	2900      	cmp	r1, #0
 800603e:	bfb8      	it	lt
 8006040:	4249      	neglt	r1, r1
 8006042:	f803 2b02 	strb.w	r2, [r3], #2
 8006046:	bfb4      	ite	lt
 8006048:	222d      	movlt	r2, #45	; 0x2d
 800604a:	222b      	movge	r2, #43	; 0x2b
 800604c:	2909      	cmp	r1, #9
 800604e:	7042      	strb	r2, [r0, #1]
 8006050:	dd2a      	ble.n	80060a8 <__exponent+0x70>
 8006052:	f10d 0407 	add.w	r4, sp, #7
 8006056:	46a4      	mov	ip, r4
 8006058:	270a      	movs	r7, #10
 800605a:	46a6      	mov	lr, r4
 800605c:	460a      	mov	r2, r1
 800605e:	fb91 f6f7 	sdiv	r6, r1, r7
 8006062:	fb07 1516 	mls	r5, r7, r6, r1
 8006066:	3530      	adds	r5, #48	; 0x30
 8006068:	2a63      	cmp	r2, #99	; 0x63
 800606a:	f104 34ff 	add.w	r4, r4, #4294967295
 800606e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006072:	4631      	mov	r1, r6
 8006074:	dcf1      	bgt.n	800605a <__exponent+0x22>
 8006076:	3130      	adds	r1, #48	; 0x30
 8006078:	f1ae 0502 	sub.w	r5, lr, #2
 800607c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006080:	1c44      	adds	r4, r0, #1
 8006082:	4629      	mov	r1, r5
 8006084:	4561      	cmp	r1, ip
 8006086:	d30a      	bcc.n	800609e <__exponent+0x66>
 8006088:	f10d 0209 	add.w	r2, sp, #9
 800608c:	eba2 020e 	sub.w	r2, r2, lr
 8006090:	4565      	cmp	r5, ip
 8006092:	bf88      	it	hi
 8006094:	2200      	movhi	r2, #0
 8006096:	4413      	add	r3, r2
 8006098:	1a18      	subs	r0, r3, r0
 800609a:	b003      	add	sp, #12
 800609c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800609e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80060a2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80060a6:	e7ed      	b.n	8006084 <__exponent+0x4c>
 80060a8:	2330      	movs	r3, #48	; 0x30
 80060aa:	3130      	adds	r1, #48	; 0x30
 80060ac:	7083      	strb	r3, [r0, #2]
 80060ae:	70c1      	strb	r1, [r0, #3]
 80060b0:	1d03      	adds	r3, r0, #4
 80060b2:	e7f1      	b.n	8006098 <__exponent+0x60>

080060b4 <_printf_float>:
 80060b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060b8:	ed2d 8b02 	vpush	{d8}
 80060bc:	b08d      	sub	sp, #52	; 0x34
 80060be:	460c      	mov	r4, r1
 80060c0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80060c4:	4616      	mov	r6, r2
 80060c6:	461f      	mov	r7, r3
 80060c8:	4605      	mov	r5, r0
 80060ca:	f002 fe8b 	bl	8008de4 <_localeconv_r>
 80060ce:	f8d0 a000 	ldr.w	sl, [r0]
 80060d2:	4650      	mov	r0, sl
 80060d4:	f7fa f87c 	bl	80001d0 <strlen>
 80060d8:	2300      	movs	r3, #0
 80060da:	930a      	str	r3, [sp, #40]	; 0x28
 80060dc:	6823      	ldr	r3, [r4, #0]
 80060de:	9305      	str	r3, [sp, #20]
 80060e0:	f8d8 3000 	ldr.w	r3, [r8]
 80060e4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80060e8:	3307      	adds	r3, #7
 80060ea:	f023 0307 	bic.w	r3, r3, #7
 80060ee:	f103 0208 	add.w	r2, r3, #8
 80060f2:	f8c8 2000 	str.w	r2, [r8]
 80060f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060fa:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80060fe:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006102:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006106:	9307      	str	r3, [sp, #28]
 8006108:	f8cd 8018 	str.w	r8, [sp, #24]
 800610c:	ee08 0a10 	vmov	s16, r0
 8006110:	4b9f      	ldr	r3, [pc, #636]	; (8006390 <_printf_float+0x2dc>)
 8006112:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006116:	f04f 32ff 	mov.w	r2, #4294967295
 800611a:	f7fa fd07 	bl	8000b2c <__aeabi_dcmpun>
 800611e:	bb88      	cbnz	r0, 8006184 <_printf_float+0xd0>
 8006120:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006124:	4b9a      	ldr	r3, [pc, #616]	; (8006390 <_printf_float+0x2dc>)
 8006126:	f04f 32ff 	mov.w	r2, #4294967295
 800612a:	f7fa fce1 	bl	8000af0 <__aeabi_dcmple>
 800612e:	bb48      	cbnz	r0, 8006184 <_printf_float+0xd0>
 8006130:	2200      	movs	r2, #0
 8006132:	2300      	movs	r3, #0
 8006134:	4640      	mov	r0, r8
 8006136:	4649      	mov	r1, r9
 8006138:	f7fa fcd0 	bl	8000adc <__aeabi_dcmplt>
 800613c:	b110      	cbz	r0, 8006144 <_printf_float+0x90>
 800613e:	232d      	movs	r3, #45	; 0x2d
 8006140:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006144:	4b93      	ldr	r3, [pc, #588]	; (8006394 <_printf_float+0x2e0>)
 8006146:	4894      	ldr	r0, [pc, #592]	; (8006398 <_printf_float+0x2e4>)
 8006148:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800614c:	bf94      	ite	ls
 800614e:	4698      	movls	r8, r3
 8006150:	4680      	movhi	r8, r0
 8006152:	2303      	movs	r3, #3
 8006154:	6123      	str	r3, [r4, #16]
 8006156:	9b05      	ldr	r3, [sp, #20]
 8006158:	f023 0204 	bic.w	r2, r3, #4
 800615c:	6022      	str	r2, [r4, #0]
 800615e:	f04f 0900 	mov.w	r9, #0
 8006162:	9700      	str	r7, [sp, #0]
 8006164:	4633      	mov	r3, r6
 8006166:	aa0b      	add	r2, sp, #44	; 0x2c
 8006168:	4621      	mov	r1, r4
 800616a:	4628      	mov	r0, r5
 800616c:	f000 f9d8 	bl	8006520 <_printf_common>
 8006170:	3001      	adds	r0, #1
 8006172:	f040 8090 	bne.w	8006296 <_printf_float+0x1e2>
 8006176:	f04f 30ff 	mov.w	r0, #4294967295
 800617a:	b00d      	add	sp, #52	; 0x34
 800617c:	ecbd 8b02 	vpop	{d8}
 8006180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006184:	4642      	mov	r2, r8
 8006186:	464b      	mov	r3, r9
 8006188:	4640      	mov	r0, r8
 800618a:	4649      	mov	r1, r9
 800618c:	f7fa fcce 	bl	8000b2c <__aeabi_dcmpun>
 8006190:	b140      	cbz	r0, 80061a4 <_printf_float+0xf0>
 8006192:	464b      	mov	r3, r9
 8006194:	2b00      	cmp	r3, #0
 8006196:	bfbc      	itt	lt
 8006198:	232d      	movlt	r3, #45	; 0x2d
 800619a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800619e:	487f      	ldr	r0, [pc, #508]	; (800639c <_printf_float+0x2e8>)
 80061a0:	4b7f      	ldr	r3, [pc, #508]	; (80063a0 <_printf_float+0x2ec>)
 80061a2:	e7d1      	b.n	8006148 <_printf_float+0x94>
 80061a4:	6863      	ldr	r3, [r4, #4]
 80061a6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80061aa:	9206      	str	r2, [sp, #24]
 80061ac:	1c5a      	adds	r2, r3, #1
 80061ae:	d13f      	bne.n	8006230 <_printf_float+0x17c>
 80061b0:	2306      	movs	r3, #6
 80061b2:	6063      	str	r3, [r4, #4]
 80061b4:	9b05      	ldr	r3, [sp, #20]
 80061b6:	6861      	ldr	r1, [r4, #4]
 80061b8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80061bc:	2300      	movs	r3, #0
 80061be:	9303      	str	r3, [sp, #12]
 80061c0:	ab0a      	add	r3, sp, #40	; 0x28
 80061c2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80061c6:	ab09      	add	r3, sp, #36	; 0x24
 80061c8:	ec49 8b10 	vmov	d0, r8, r9
 80061cc:	9300      	str	r3, [sp, #0]
 80061ce:	6022      	str	r2, [r4, #0]
 80061d0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80061d4:	4628      	mov	r0, r5
 80061d6:	f7ff fecd 	bl	8005f74 <__cvt>
 80061da:	9b06      	ldr	r3, [sp, #24]
 80061dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80061de:	2b47      	cmp	r3, #71	; 0x47
 80061e0:	4680      	mov	r8, r0
 80061e2:	d108      	bne.n	80061f6 <_printf_float+0x142>
 80061e4:	1cc8      	adds	r0, r1, #3
 80061e6:	db02      	blt.n	80061ee <_printf_float+0x13a>
 80061e8:	6863      	ldr	r3, [r4, #4]
 80061ea:	4299      	cmp	r1, r3
 80061ec:	dd41      	ble.n	8006272 <_printf_float+0x1be>
 80061ee:	f1ab 0b02 	sub.w	fp, fp, #2
 80061f2:	fa5f fb8b 	uxtb.w	fp, fp
 80061f6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80061fa:	d820      	bhi.n	800623e <_printf_float+0x18a>
 80061fc:	3901      	subs	r1, #1
 80061fe:	465a      	mov	r2, fp
 8006200:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006204:	9109      	str	r1, [sp, #36]	; 0x24
 8006206:	f7ff ff17 	bl	8006038 <__exponent>
 800620a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800620c:	1813      	adds	r3, r2, r0
 800620e:	2a01      	cmp	r2, #1
 8006210:	4681      	mov	r9, r0
 8006212:	6123      	str	r3, [r4, #16]
 8006214:	dc02      	bgt.n	800621c <_printf_float+0x168>
 8006216:	6822      	ldr	r2, [r4, #0]
 8006218:	07d2      	lsls	r2, r2, #31
 800621a:	d501      	bpl.n	8006220 <_printf_float+0x16c>
 800621c:	3301      	adds	r3, #1
 800621e:	6123      	str	r3, [r4, #16]
 8006220:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006224:	2b00      	cmp	r3, #0
 8006226:	d09c      	beq.n	8006162 <_printf_float+0xae>
 8006228:	232d      	movs	r3, #45	; 0x2d
 800622a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800622e:	e798      	b.n	8006162 <_printf_float+0xae>
 8006230:	9a06      	ldr	r2, [sp, #24]
 8006232:	2a47      	cmp	r2, #71	; 0x47
 8006234:	d1be      	bne.n	80061b4 <_printf_float+0x100>
 8006236:	2b00      	cmp	r3, #0
 8006238:	d1bc      	bne.n	80061b4 <_printf_float+0x100>
 800623a:	2301      	movs	r3, #1
 800623c:	e7b9      	b.n	80061b2 <_printf_float+0xfe>
 800623e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006242:	d118      	bne.n	8006276 <_printf_float+0x1c2>
 8006244:	2900      	cmp	r1, #0
 8006246:	6863      	ldr	r3, [r4, #4]
 8006248:	dd0b      	ble.n	8006262 <_printf_float+0x1ae>
 800624a:	6121      	str	r1, [r4, #16]
 800624c:	b913      	cbnz	r3, 8006254 <_printf_float+0x1a0>
 800624e:	6822      	ldr	r2, [r4, #0]
 8006250:	07d0      	lsls	r0, r2, #31
 8006252:	d502      	bpl.n	800625a <_printf_float+0x1a6>
 8006254:	3301      	adds	r3, #1
 8006256:	440b      	add	r3, r1
 8006258:	6123      	str	r3, [r4, #16]
 800625a:	65a1      	str	r1, [r4, #88]	; 0x58
 800625c:	f04f 0900 	mov.w	r9, #0
 8006260:	e7de      	b.n	8006220 <_printf_float+0x16c>
 8006262:	b913      	cbnz	r3, 800626a <_printf_float+0x1b6>
 8006264:	6822      	ldr	r2, [r4, #0]
 8006266:	07d2      	lsls	r2, r2, #31
 8006268:	d501      	bpl.n	800626e <_printf_float+0x1ba>
 800626a:	3302      	adds	r3, #2
 800626c:	e7f4      	b.n	8006258 <_printf_float+0x1a4>
 800626e:	2301      	movs	r3, #1
 8006270:	e7f2      	b.n	8006258 <_printf_float+0x1a4>
 8006272:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006276:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006278:	4299      	cmp	r1, r3
 800627a:	db05      	blt.n	8006288 <_printf_float+0x1d4>
 800627c:	6823      	ldr	r3, [r4, #0]
 800627e:	6121      	str	r1, [r4, #16]
 8006280:	07d8      	lsls	r0, r3, #31
 8006282:	d5ea      	bpl.n	800625a <_printf_float+0x1a6>
 8006284:	1c4b      	adds	r3, r1, #1
 8006286:	e7e7      	b.n	8006258 <_printf_float+0x1a4>
 8006288:	2900      	cmp	r1, #0
 800628a:	bfd4      	ite	le
 800628c:	f1c1 0202 	rsble	r2, r1, #2
 8006290:	2201      	movgt	r2, #1
 8006292:	4413      	add	r3, r2
 8006294:	e7e0      	b.n	8006258 <_printf_float+0x1a4>
 8006296:	6823      	ldr	r3, [r4, #0]
 8006298:	055a      	lsls	r2, r3, #21
 800629a:	d407      	bmi.n	80062ac <_printf_float+0x1f8>
 800629c:	6923      	ldr	r3, [r4, #16]
 800629e:	4642      	mov	r2, r8
 80062a0:	4631      	mov	r1, r6
 80062a2:	4628      	mov	r0, r5
 80062a4:	47b8      	blx	r7
 80062a6:	3001      	adds	r0, #1
 80062a8:	d12c      	bne.n	8006304 <_printf_float+0x250>
 80062aa:	e764      	b.n	8006176 <_printf_float+0xc2>
 80062ac:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80062b0:	f240 80e0 	bls.w	8006474 <_printf_float+0x3c0>
 80062b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80062b8:	2200      	movs	r2, #0
 80062ba:	2300      	movs	r3, #0
 80062bc:	f7fa fc04 	bl	8000ac8 <__aeabi_dcmpeq>
 80062c0:	2800      	cmp	r0, #0
 80062c2:	d034      	beq.n	800632e <_printf_float+0x27a>
 80062c4:	4a37      	ldr	r2, [pc, #220]	; (80063a4 <_printf_float+0x2f0>)
 80062c6:	2301      	movs	r3, #1
 80062c8:	4631      	mov	r1, r6
 80062ca:	4628      	mov	r0, r5
 80062cc:	47b8      	blx	r7
 80062ce:	3001      	adds	r0, #1
 80062d0:	f43f af51 	beq.w	8006176 <_printf_float+0xc2>
 80062d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80062d8:	429a      	cmp	r2, r3
 80062da:	db02      	blt.n	80062e2 <_printf_float+0x22e>
 80062dc:	6823      	ldr	r3, [r4, #0]
 80062de:	07d8      	lsls	r0, r3, #31
 80062e0:	d510      	bpl.n	8006304 <_printf_float+0x250>
 80062e2:	ee18 3a10 	vmov	r3, s16
 80062e6:	4652      	mov	r2, sl
 80062e8:	4631      	mov	r1, r6
 80062ea:	4628      	mov	r0, r5
 80062ec:	47b8      	blx	r7
 80062ee:	3001      	adds	r0, #1
 80062f0:	f43f af41 	beq.w	8006176 <_printf_float+0xc2>
 80062f4:	f04f 0800 	mov.w	r8, #0
 80062f8:	f104 091a 	add.w	r9, r4, #26
 80062fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062fe:	3b01      	subs	r3, #1
 8006300:	4543      	cmp	r3, r8
 8006302:	dc09      	bgt.n	8006318 <_printf_float+0x264>
 8006304:	6823      	ldr	r3, [r4, #0]
 8006306:	079b      	lsls	r3, r3, #30
 8006308:	f100 8105 	bmi.w	8006516 <_printf_float+0x462>
 800630c:	68e0      	ldr	r0, [r4, #12]
 800630e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006310:	4298      	cmp	r0, r3
 8006312:	bfb8      	it	lt
 8006314:	4618      	movlt	r0, r3
 8006316:	e730      	b.n	800617a <_printf_float+0xc6>
 8006318:	2301      	movs	r3, #1
 800631a:	464a      	mov	r2, r9
 800631c:	4631      	mov	r1, r6
 800631e:	4628      	mov	r0, r5
 8006320:	47b8      	blx	r7
 8006322:	3001      	adds	r0, #1
 8006324:	f43f af27 	beq.w	8006176 <_printf_float+0xc2>
 8006328:	f108 0801 	add.w	r8, r8, #1
 800632c:	e7e6      	b.n	80062fc <_printf_float+0x248>
 800632e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006330:	2b00      	cmp	r3, #0
 8006332:	dc39      	bgt.n	80063a8 <_printf_float+0x2f4>
 8006334:	4a1b      	ldr	r2, [pc, #108]	; (80063a4 <_printf_float+0x2f0>)
 8006336:	2301      	movs	r3, #1
 8006338:	4631      	mov	r1, r6
 800633a:	4628      	mov	r0, r5
 800633c:	47b8      	blx	r7
 800633e:	3001      	adds	r0, #1
 8006340:	f43f af19 	beq.w	8006176 <_printf_float+0xc2>
 8006344:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006348:	4313      	orrs	r3, r2
 800634a:	d102      	bne.n	8006352 <_printf_float+0x29e>
 800634c:	6823      	ldr	r3, [r4, #0]
 800634e:	07d9      	lsls	r1, r3, #31
 8006350:	d5d8      	bpl.n	8006304 <_printf_float+0x250>
 8006352:	ee18 3a10 	vmov	r3, s16
 8006356:	4652      	mov	r2, sl
 8006358:	4631      	mov	r1, r6
 800635a:	4628      	mov	r0, r5
 800635c:	47b8      	blx	r7
 800635e:	3001      	adds	r0, #1
 8006360:	f43f af09 	beq.w	8006176 <_printf_float+0xc2>
 8006364:	f04f 0900 	mov.w	r9, #0
 8006368:	f104 0a1a 	add.w	sl, r4, #26
 800636c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800636e:	425b      	negs	r3, r3
 8006370:	454b      	cmp	r3, r9
 8006372:	dc01      	bgt.n	8006378 <_printf_float+0x2c4>
 8006374:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006376:	e792      	b.n	800629e <_printf_float+0x1ea>
 8006378:	2301      	movs	r3, #1
 800637a:	4652      	mov	r2, sl
 800637c:	4631      	mov	r1, r6
 800637e:	4628      	mov	r0, r5
 8006380:	47b8      	blx	r7
 8006382:	3001      	adds	r0, #1
 8006384:	f43f aef7 	beq.w	8006176 <_printf_float+0xc2>
 8006388:	f109 0901 	add.w	r9, r9, #1
 800638c:	e7ee      	b.n	800636c <_printf_float+0x2b8>
 800638e:	bf00      	nop
 8006390:	7fefffff 	.word	0x7fefffff
 8006394:	0800b0dc 	.word	0x0800b0dc
 8006398:	0800b0e0 	.word	0x0800b0e0
 800639c:	0800b0e8 	.word	0x0800b0e8
 80063a0:	0800b0e4 	.word	0x0800b0e4
 80063a4:	0800b0ec 	.word	0x0800b0ec
 80063a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80063aa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80063ac:	429a      	cmp	r2, r3
 80063ae:	bfa8      	it	ge
 80063b0:	461a      	movge	r2, r3
 80063b2:	2a00      	cmp	r2, #0
 80063b4:	4691      	mov	r9, r2
 80063b6:	dc37      	bgt.n	8006428 <_printf_float+0x374>
 80063b8:	f04f 0b00 	mov.w	fp, #0
 80063bc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80063c0:	f104 021a 	add.w	r2, r4, #26
 80063c4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80063c6:	9305      	str	r3, [sp, #20]
 80063c8:	eba3 0309 	sub.w	r3, r3, r9
 80063cc:	455b      	cmp	r3, fp
 80063ce:	dc33      	bgt.n	8006438 <_printf_float+0x384>
 80063d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80063d4:	429a      	cmp	r2, r3
 80063d6:	db3b      	blt.n	8006450 <_printf_float+0x39c>
 80063d8:	6823      	ldr	r3, [r4, #0]
 80063da:	07da      	lsls	r2, r3, #31
 80063dc:	d438      	bmi.n	8006450 <_printf_float+0x39c>
 80063de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063e0:	9a05      	ldr	r2, [sp, #20]
 80063e2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80063e4:	1a9a      	subs	r2, r3, r2
 80063e6:	eba3 0901 	sub.w	r9, r3, r1
 80063ea:	4591      	cmp	r9, r2
 80063ec:	bfa8      	it	ge
 80063ee:	4691      	movge	r9, r2
 80063f0:	f1b9 0f00 	cmp.w	r9, #0
 80063f4:	dc35      	bgt.n	8006462 <_printf_float+0x3ae>
 80063f6:	f04f 0800 	mov.w	r8, #0
 80063fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80063fe:	f104 0a1a 	add.w	sl, r4, #26
 8006402:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006406:	1a9b      	subs	r3, r3, r2
 8006408:	eba3 0309 	sub.w	r3, r3, r9
 800640c:	4543      	cmp	r3, r8
 800640e:	f77f af79 	ble.w	8006304 <_printf_float+0x250>
 8006412:	2301      	movs	r3, #1
 8006414:	4652      	mov	r2, sl
 8006416:	4631      	mov	r1, r6
 8006418:	4628      	mov	r0, r5
 800641a:	47b8      	blx	r7
 800641c:	3001      	adds	r0, #1
 800641e:	f43f aeaa 	beq.w	8006176 <_printf_float+0xc2>
 8006422:	f108 0801 	add.w	r8, r8, #1
 8006426:	e7ec      	b.n	8006402 <_printf_float+0x34e>
 8006428:	4613      	mov	r3, r2
 800642a:	4631      	mov	r1, r6
 800642c:	4642      	mov	r2, r8
 800642e:	4628      	mov	r0, r5
 8006430:	47b8      	blx	r7
 8006432:	3001      	adds	r0, #1
 8006434:	d1c0      	bne.n	80063b8 <_printf_float+0x304>
 8006436:	e69e      	b.n	8006176 <_printf_float+0xc2>
 8006438:	2301      	movs	r3, #1
 800643a:	4631      	mov	r1, r6
 800643c:	4628      	mov	r0, r5
 800643e:	9205      	str	r2, [sp, #20]
 8006440:	47b8      	blx	r7
 8006442:	3001      	adds	r0, #1
 8006444:	f43f ae97 	beq.w	8006176 <_printf_float+0xc2>
 8006448:	9a05      	ldr	r2, [sp, #20]
 800644a:	f10b 0b01 	add.w	fp, fp, #1
 800644e:	e7b9      	b.n	80063c4 <_printf_float+0x310>
 8006450:	ee18 3a10 	vmov	r3, s16
 8006454:	4652      	mov	r2, sl
 8006456:	4631      	mov	r1, r6
 8006458:	4628      	mov	r0, r5
 800645a:	47b8      	blx	r7
 800645c:	3001      	adds	r0, #1
 800645e:	d1be      	bne.n	80063de <_printf_float+0x32a>
 8006460:	e689      	b.n	8006176 <_printf_float+0xc2>
 8006462:	9a05      	ldr	r2, [sp, #20]
 8006464:	464b      	mov	r3, r9
 8006466:	4442      	add	r2, r8
 8006468:	4631      	mov	r1, r6
 800646a:	4628      	mov	r0, r5
 800646c:	47b8      	blx	r7
 800646e:	3001      	adds	r0, #1
 8006470:	d1c1      	bne.n	80063f6 <_printf_float+0x342>
 8006472:	e680      	b.n	8006176 <_printf_float+0xc2>
 8006474:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006476:	2a01      	cmp	r2, #1
 8006478:	dc01      	bgt.n	800647e <_printf_float+0x3ca>
 800647a:	07db      	lsls	r3, r3, #31
 800647c:	d538      	bpl.n	80064f0 <_printf_float+0x43c>
 800647e:	2301      	movs	r3, #1
 8006480:	4642      	mov	r2, r8
 8006482:	4631      	mov	r1, r6
 8006484:	4628      	mov	r0, r5
 8006486:	47b8      	blx	r7
 8006488:	3001      	adds	r0, #1
 800648a:	f43f ae74 	beq.w	8006176 <_printf_float+0xc2>
 800648e:	ee18 3a10 	vmov	r3, s16
 8006492:	4652      	mov	r2, sl
 8006494:	4631      	mov	r1, r6
 8006496:	4628      	mov	r0, r5
 8006498:	47b8      	blx	r7
 800649a:	3001      	adds	r0, #1
 800649c:	f43f ae6b 	beq.w	8006176 <_printf_float+0xc2>
 80064a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80064a4:	2200      	movs	r2, #0
 80064a6:	2300      	movs	r3, #0
 80064a8:	f7fa fb0e 	bl	8000ac8 <__aeabi_dcmpeq>
 80064ac:	b9d8      	cbnz	r0, 80064e6 <_printf_float+0x432>
 80064ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064b0:	f108 0201 	add.w	r2, r8, #1
 80064b4:	3b01      	subs	r3, #1
 80064b6:	4631      	mov	r1, r6
 80064b8:	4628      	mov	r0, r5
 80064ba:	47b8      	blx	r7
 80064bc:	3001      	adds	r0, #1
 80064be:	d10e      	bne.n	80064de <_printf_float+0x42a>
 80064c0:	e659      	b.n	8006176 <_printf_float+0xc2>
 80064c2:	2301      	movs	r3, #1
 80064c4:	4652      	mov	r2, sl
 80064c6:	4631      	mov	r1, r6
 80064c8:	4628      	mov	r0, r5
 80064ca:	47b8      	blx	r7
 80064cc:	3001      	adds	r0, #1
 80064ce:	f43f ae52 	beq.w	8006176 <_printf_float+0xc2>
 80064d2:	f108 0801 	add.w	r8, r8, #1
 80064d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064d8:	3b01      	subs	r3, #1
 80064da:	4543      	cmp	r3, r8
 80064dc:	dcf1      	bgt.n	80064c2 <_printf_float+0x40e>
 80064de:	464b      	mov	r3, r9
 80064e0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80064e4:	e6dc      	b.n	80062a0 <_printf_float+0x1ec>
 80064e6:	f04f 0800 	mov.w	r8, #0
 80064ea:	f104 0a1a 	add.w	sl, r4, #26
 80064ee:	e7f2      	b.n	80064d6 <_printf_float+0x422>
 80064f0:	2301      	movs	r3, #1
 80064f2:	4642      	mov	r2, r8
 80064f4:	e7df      	b.n	80064b6 <_printf_float+0x402>
 80064f6:	2301      	movs	r3, #1
 80064f8:	464a      	mov	r2, r9
 80064fa:	4631      	mov	r1, r6
 80064fc:	4628      	mov	r0, r5
 80064fe:	47b8      	blx	r7
 8006500:	3001      	adds	r0, #1
 8006502:	f43f ae38 	beq.w	8006176 <_printf_float+0xc2>
 8006506:	f108 0801 	add.w	r8, r8, #1
 800650a:	68e3      	ldr	r3, [r4, #12]
 800650c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800650e:	1a5b      	subs	r3, r3, r1
 8006510:	4543      	cmp	r3, r8
 8006512:	dcf0      	bgt.n	80064f6 <_printf_float+0x442>
 8006514:	e6fa      	b.n	800630c <_printf_float+0x258>
 8006516:	f04f 0800 	mov.w	r8, #0
 800651a:	f104 0919 	add.w	r9, r4, #25
 800651e:	e7f4      	b.n	800650a <_printf_float+0x456>

08006520 <_printf_common>:
 8006520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006524:	4616      	mov	r6, r2
 8006526:	4699      	mov	r9, r3
 8006528:	688a      	ldr	r2, [r1, #8]
 800652a:	690b      	ldr	r3, [r1, #16]
 800652c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006530:	4293      	cmp	r3, r2
 8006532:	bfb8      	it	lt
 8006534:	4613      	movlt	r3, r2
 8006536:	6033      	str	r3, [r6, #0]
 8006538:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800653c:	4607      	mov	r7, r0
 800653e:	460c      	mov	r4, r1
 8006540:	b10a      	cbz	r2, 8006546 <_printf_common+0x26>
 8006542:	3301      	adds	r3, #1
 8006544:	6033      	str	r3, [r6, #0]
 8006546:	6823      	ldr	r3, [r4, #0]
 8006548:	0699      	lsls	r1, r3, #26
 800654a:	bf42      	ittt	mi
 800654c:	6833      	ldrmi	r3, [r6, #0]
 800654e:	3302      	addmi	r3, #2
 8006550:	6033      	strmi	r3, [r6, #0]
 8006552:	6825      	ldr	r5, [r4, #0]
 8006554:	f015 0506 	ands.w	r5, r5, #6
 8006558:	d106      	bne.n	8006568 <_printf_common+0x48>
 800655a:	f104 0a19 	add.w	sl, r4, #25
 800655e:	68e3      	ldr	r3, [r4, #12]
 8006560:	6832      	ldr	r2, [r6, #0]
 8006562:	1a9b      	subs	r3, r3, r2
 8006564:	42ab      	cmp	r3, r5
 8006566:	dc26      	bgt.n	80065b6 <_printf_common+0x96>
 8006568:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800656c:	1e13      	subs	r3, r2, #0
 800656e:	6822      	ldr	r2, [r4, #0]
 8006570:	bf18      	it	ne
 8006572:	2301      	movne	r3, #1
 8006574:	0692      	lsls	r2, r2, #26
 8006576:	d42b      	bmi.n	80065d0 <_printf_common+0xb0>
 8006578:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800657c:	4649      	mov	r1, r9
 800657e:	4638      	mov	r0, r7
 8006580:	47c0      	blx	r8
 8006582:	3001      	adds	r0, #1
 8006584:	d01e      	beq.n	80065c4 <_printf_common+0xa4>
 8006586:	6823      	ldr	r3, [r4, #0]
 8006588:	68e5      	ldr	r5, [r4, #12]
 800658a:	6832      	ldr	r2, [r6, #0]
 800658c:	f003 0306 	and.w	r3, r3, #6
 8006590:	2b04      	cmp	r3, #4
 8006592:	bf08      	it	eq
 8006594:	1aad      	subeq	r5, r5, r2
 8006596:	68a3      	ldr	r3, [r4, #8]
 8006598:	6922      	ldr	r2, [r4, #16]
 800659a:	bf0c      	ite	eq
 800659c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80065a0:	2500      	movne	r5, #0
 80065a2:	4293      	cmp	r3, r2
 80065a4:	bfc4      	itt	gt
 80065a6:	1a9b      	subgt	r3, r3, r2
 80065a8:	18ed      	addgt	r5, r5, r3
 80065aa:	2600      	movs	r6, #0
 80065ac:	341a      	adds	r4, #26
 80065ae:	42b5      	cmp	r5, r6
 80065b0:	d11a      	bne.n	80065e8 <_printf_common+0xc8>
 80065b2:	2000      	movs	r0, #0
 80065b4:	e008      	b.n	80065c8 <_printf_common+0xa8>
 80065b6:	2301      	movs	r3, #1
 80065b8:	4652      	mov	r2, sl
 80065ba:	4649      	mov	r1, r9
 80065bc:	4638      	mov	r0, r7
 80065be:	47c0      	blx	r8
 80065c0:	3001      	adds	r0, #1
 80065c2:	d103      	bne.n	80065cc <_printf_common+0xac>
 80065c4:	f04f 30ff 	mov.w	r0, #4294967295
 80065c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065cc:	3501      	adds	r5, #1
 80065ce:	e7c6      	b.n	800655e <_printf_common+0x3e>
 80065d0:	18e1      	adds	r1, r4, r3
 80065d2:	1c5a      	adds	r2, r3, #1
 80065d4:	2030      	movs	r0, #48	; 0x30
 80065d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80065da:	4422      	add	r2, r4
 80065dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80065e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80065e4:	3302      	adds	r3, #2
 80065e6:	e7c7      	b.n	8006578 <_printf_common+0x58>
 80065e8:	2301      	movs	r3, #1
 80065ea:	4622      	mov	r2, r4
 80065ec:	4649      	mov	r1, r9
 80065ee:	4638      	mov	r0, r7
 80065f0:	47c0      	blx	r8
 80065f2:	3001      	adds	r0, #1
 80065f4:	d0e6      	beq.n	80065c4 <_printf_common+0xa4>
 80065f6:	3601      	adds	r6, #1
 80065f8:	e7d9      	b.n	80065ae <_printf_common+0x8e>
	...

080065fc <_printf_i>:
 80065fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006600:	7e0f      	ldrb	r7, [r1, #24]
 8006602:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006604:	2f78      	cmp	r7, #120	; 0x78
 8006606:	4691      	mov	r9, r2
 8006608:	4680      	mov	r8, r0
 800660a:	460c      	mov	r4, r1
 800660c:	469a      	mov	sl, r3
 800660e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006612:	d807      	bhi.n	8006624 <_printf_i+0x28>
 8006614:	2f62      	cmp	r7, #98	; 0x62
 8006616:	d80a      	bhi.n	800662e <_printf_i+0x32>
 8006618:	2f00      	cmp	r7, #0
 800661a:	f000 80d8 	beq.w	80067ce <_printf_i+0x1d2>
 800661e:	2f58      	cmp	r7, #88	; 0x58
 8006620:	f000 80a3 	beq.w	800676a <_printf_i+0x16e>
 8006624:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006628:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800662c:	e03a      	b.n	80066a4 <_printf_i+0xa8>
 800662e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006632:	2b15      	cmp	r3, #21
 8006634:	d8f6      	bhi.n	8006624 <_printf_i+0x28>
 8006636:	a101      	add	r1, pc, #4	; (adr r1, 800663c <_printf_i+0x40>)
 8006638:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800663c:	08006695 	.word	0x08006695
 8006640:	080066a9 	.word	0x080066a9
 8006644:	08006625 	.word	0x08006625
 8006648:	08006625 	.word	0x08006625
 800664c:	08006625 	.word	0x08006625
 8006650:	08006625 	.word	0x08006625
 8006654:	080066a9 	.word	0x080066a9
 8006658:	08006625 	.word	0x08006625
 800665c:	08006625 	.word	0x08006625
 8006660:	08006625 	.word	0x08006625
 8006664:	08006625 	.word	0x08006625
 8006668:	080067b5 	.word	0x080067b5
 800666c:	080066d9 	.word	0x080066d9
 8006670:	08006797 	.word	0x08006797
 8006674:	08006625 	.word	0x08006625
 8006678:	08006625 	.word	0x08006625
 800667c:	080067d7 	.word	0x080067d7
 8006680:	08006625 	.word	0x08006625
 8006684:	080066d9 	.word	0x080066d9
 8006688:	08006625 	.word	0x08006625
 800668c:	08006625 	.word	0x08006625
 8006690:	0800679f 	.word	0x0800679f
 8006694:	682b      	ldr	r3, [r5, #0]
 8006696:	1d1a      	adds	r2, r3, #4
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	602a      	str	r2, [r5, #0]
 800669c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80066a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80066a4:	2301      	movs	r3, #1
 80066a6:	e0a3      	b.n	80067f0 <_printf_i+0x1f4>
 80066a8:	6820      	ldr	r0, [r4, #0]
 80066aa:	6829      	ldr	r1, [r5, #0]
 80066ac:	0606      	lsls	r6, r0, #24
 80066ae:	f101 0304 	add.w	r3, r1, #4
 80066b2:	d50a      	bpl.n	80066ca <_printf_i+0xce>
 80066b4:	680e      	ldr	r6, [r1, #0]
 80066b6:	602b      	str	r3, [r5, #0]
 80066b8:	2e00      	cmp	r6, #0
 80066ba:	da03      	bge.n	80066c4 <_printf_i+0xc8>
 80066bc:	232d      	movs	r3, #45	; 0x2d
 80066be:	4276      	negs	r6, r6
 80066c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066c4:	485e      	ldr	r0, [pc, #376]	; (8006840 <_printf_i+0x244>)
 80066c6:	230a      	movs	r3, #10
 80066c8:	e019      	b.n	80066fe <_printf_i+0x102>
 80066ca:	680e      	ldr	r6, [r1, #0]
 80066cc:	602b      	str	r3, [r5, #0]
 80066ce:	f010 0f40 	tst.w	r0, #64	; 0x40
 80066d2:	bf18      	it	ne
 80066d4:	b236      	sxthne	r6, r6
 80066d6:	e7ef      	b.n	80066b8 <_printf_i+0xbc>
 80066d8:	682b      	ldr	r3, [r5, #0]
 80066da:	6820      	ldr	r0, [r4, #0]
 80066dc:	1d19      	adds	r1, r3, #4
 80066de:	6029      	str	r1, [r5, #0]
 80066e0:	0601      	lsls	r1, r0, #24
 80066e2:	d501      	bpl.n	80066e8 <_printf_i+0xec>
 80066e4:	681e      	ldr	r6, [r3, #0]
 80066e6:	e002      	b.n	80066ee <_printf_i+0xf2>
 80066e8:	0646      	lsls	r6, r0, #25
 80066ea:	d5fb      	bpl.n	80066e4 <_printf_i+0xe8>
 80066ec:	881e      	ldrh	r6, [r3, #0]
 80066ee:	4854      	ldr	r0, [pc, #336]	; (8006840 <_printf_i+0x244>)
 80066f0:	2f6f      	cmp	r7, #111	; 0x6f
 80066f2:	bf0c      	ite	eq
 80066f4:	2308      	moveq	r3, #8
 80066f6:	230a      	movne	r3, #10
 80066f8:	2100      	movs	r1, #0
 80066fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80066fe:	6865      	ldr	r5, [r4, #4]
 8006700:	60a5      	str	r5, [r4, #8]
 8006702:	2d00      	cmp	r5, #0
 8006704:	bfa2      	ittt	ge
 8006706:	6821      	ldrge	r1, [r4, #0]
 8006708:	f021 0104 	bicge.w	r1, r1, #4
 800670c:	6021      	strge	r1, [r4, #0]
 800670e:	b90e      	cbnz	r6, 8006714 <_printf_i+0x118>
 8006710:	2d00      	cmp	r5, #0
 8006712:	d04d      	beq.n	80067b0 <_printf_i+0x1b4>
 8006714:	4615      	mov	r5, r2
 8006716:	fbb6 f1f3 	udiv	r1, r6, r3
 800671a:	fb03 6711 	mls	r7, r3, r1, r6
 800671e:	5dc7      	ldrb	r7, [r0, r7]
 8006720:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006724:	4637      	mov	r7, r6
 8006726:	42bb      	cmp	r3, r7
 8006728:	460e      	mov	r6, r1
 800672a:	d9f4      	bls.n	8006716 <_printf_i+0x11a>
 800672c:	2b08      	cmp	r3, #8
 800672e:	d10b      	bne.n	8006748 <_printf_i+0x14c>
 8006730:	6823      	ldr	r3, [r4, #0]
 8006732:	07de      	lsls	r6, r3, #31
 8006734:	d508      	bpl.n	8006748 <_printf_i+0x14c>
 8006736:	6923      	ldr	r3, [r4, #16]
 8006738:	6861      	ldr	r1, [r4, #4]
 800673a:	4299      	cmp	r1, r3
 800673c:	bfde      	ittt	le
 800673e:	2330      	movle	r3, #48	; 0x30
 8006740:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006744:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006748:	1b52      	subs	r2, r2, r5
 800674a:	6122      	str	r2, [r4, #16]
 800674c:	f8cd a000 	str.w	sl, [sp]
 8006750:	464b      	mov	r3, r9
 8006752:	aa03      	add	r2, sp, #12
 8006754:	4621      	mov	r1, r4
 8006756:	4640      	mov	r0, r8
 8006758:	f7ff fee2 	bl	8006520 <_printf_common>
 800675c:	3001      	adds	r0, #1
 800675e:	d14c      	bne.n	80067fa <_printf_i+0x1fe>
 8006760:	f04f 30ff 	mov.w	r0, #4294967295
 8006764:	b004      	add	sp, #16
 8006766:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800676a:	4835      	ldr	r0, [pc, #212]	; (8006840 <_printf_i+0x244>)
 800676c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006770:	6829      	ldr	r1, [r5, #0]
 8006772:	6823      	ldr	r3, [r4, #0]
 8006774:	f851 6b04 	ldr.w	r6, [r1], #4
 8006778:	6029      	str	r1, [r5, #0]
 800677a:	061d      	lsls	r5, r3, #24
 800677c:	d514      	bpl.n	80067a8 <_printf_i+0x1ac>
 800677e:	07df      	lsls	r7, r3, #31
 8006780:	bf44      	itt	mi
 8006782:	f043 0320 	orrmi.w	r3, r3, #32
 8006786:	6023      	strmi	r3, [r4, #0]
 8006788:	b91e      	cbnz	r6, 8006792 <_printf_i+0x196>
 800678a:	6823      	ldr	r3, [r4, #0]
 800678c:	f023 0320 	bic.w	r3, r3, #32
 8006790:	6023      	str	r3, [r4, #0]
 8006792:	2310      	movs	r3, #16
 8006794:	e7b0      	b.n	80066f8 <_printf_i+0xfc>
 8006796:	6823      	ldr	r3, [r4, #0]
 8006798:	f043 0320 	orr.w	r3, r3, #32
 800679c:	6023      	str	r3, [r4, #0]
 800679e:	2378      	movs	r3, #120	; 0x78
 80067a0:	4828      	ldr	r0, [pc, #160]	; (8006844 <_printf_i+0x248>)
 80067a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80067a6:	e7e3      	b.n	8006770 <_printf_i+0x174>
 80067a8:	0659      	lsls	r1, r3, #25
 80067aa:	bf48      	it	mi
 80067ac:	b2b6      	uxthmi	r6, r6
 80067ae:	e7e6      	b.n	800677e <_printf_i+0x182>
 80067b0:	4615      	mov	r5, r2
 80067b2:	e7bb      	b.n	800672c <_printf_i+0x130>
 80067b4:	682b      	ldr	r3, [r5, #0]
 80067b6:	6826      	ldr	r6, [r4, #0]
 80067b8:	6961      	ldr	r1, [r4, #20]
 80067ba:	1d18      	adds	r0, r3, #4
 80067bc:	6028      	str	r0, [r5, #0]
 80067be:	0635      	lsls	r5, r6, #24
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	d501      	bpl.n	80067c8 <_printf_i+0x1cc>
 80067c4:	6019      	str	r1, [r3, #0]
 80067c6:	e002      	b.n	80067ce <_printf_i+0x1d2>
 80067c8:	0670      	lsls	r0, r6, #25
 80067ca:	d5fb      	bpl.n	80067c4 <_printf_i+0x1c8>
 80067cc:	8019      	strh	r1, [r3, #0]
 80067ce:	2300      	movs	r3, #0
 80067d0:	6123      	str	r3, [r4, #16]
 80067d2:	4615      	mov	r5, r2
 80067d4:	e7ba      	b.n	800674c <_printf_i+0x150>
 80067d6:	682b      	ldr	r3, [r5, #0]
 80067d8:	1d1a      	adds	r2, r3, #4
 80067da:	602a      	str	r2, [r5, #0]
 80067dc:	681d      	ldr	r5, [r3, #0]
 80067de:	6862      	ldr	r2, [r4, #4]
 80067e0:	2100      	movs	r1, #0
 80067e2:	4628      	mov	r0, r5
 80067e4:	f7f9 fcfc 	bl	80001e0 <memchr>
 80067e8:	b108      	cbz	r0, 80067ee <_printf_i+0x1f2>
 80067ea:	1b40      	subs	r0, r0, r5
 80067ec:	6060      	str	r0, [r4, #4]
 80067ee:	6863      	ldr	r3, [r4, #4]
 80067f0:	6123      	str	r3, [r4, #16]
 80067f2:	2300      	movs	r3, #0
 80067f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067f8:	e7a8      	b.n	800674c <_printf_i+0x150>
 80067fa:	6923      	ldr	r3, [r4, #16]
 80067fc:	462a      	mov	r2, r5
 80067fe:	4649      	mov	r1, r9
 8006800:	4640      	mov	r0, r8
 8006802:	47d0      	blx	sl
 8006804:	3001      	adds	r0, #1
 8006806:	d0ab      	beq.n	8006760 <_printf_i+0x164>
 8006808:	6823      	ldr	r3, [r4, #0]
 800680a:	079b      	lsls	r3, r3, #30
 800680c:	d413      	bmi.n	8006836 <_printf_i+0x23a>
 800680e:	68e0      	ldr	r0, [r4, #12]
 8006810:	9b03      	ldr	r3, [sp, #12]
 8006812:	4298      	cmp	r0, r3
 8006814:	bfb8      	it	lt
 8006816:	4618      	movlt	r0, r3
 8006818:	e7a4      	b.n	8006764 <_printf_i+0x168>
 800681a:	2301      	movs	r3, #1
 800681c:	4632      	mov	r2, r6
 800681e:	4649      	mov	r1, r9
 8006820:	4640      	mov	r0, r8
 8006822:	47d0      	blx	sl
 8006824:	3001      	adds	r0, #1
 8006826:	d09b      	beq.n	8006760 <_printf_i+0x164>
 8006828:	3501      	adds	r5, #1
 800682a:	68e3      	ldr	r3, [r4, #12]
 800682c:	9903      	ldr	r1, [sp, #12]
 800682e:	1a5b      	subs	r3, r3, r1
 8006830:	42ab      	cmp	r3, r5
 8006832:	dcf2      	bgt.n	800681a <_printf_i+0x21e>
 8006834:	e7eb      	b.n	800680e <_printf_i+0x212>
 8006836:	2500      	movs	r5, #0
 8006838:	f104 0619 	add.w	r6, r4, #25
 800683c:	e7f5      	b.n	800682a <_printf_i+0x22e>
 800683e:	bf00      	nop
 8006840:	0800b0ee 	.word	0x0800b0ee
 8006844:	0800b0ff 	.word	0x0800b0ff

08006848 <_scanf_float>:
 8006848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800684c:	b087      	sub	sp, #28
 800684e:	4617      	mov	r7, r2
 8006850:	9303      	str	r3, [sp, #12]
 8006852:	688b      	ldr	r3, [r1, #8]
 8006854:	1e5a      	subs	r2, r3, #1
 8006856:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800685a:	bf83      	ittte	hi
 800685c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006860:	195b      	addhi	r3, r3, r5
 8006862:	9302      	strhi	r3, [sp, #8]
 8006864:	2300      	movls	r3, #0
 8006866:	bf86      	itte	hi
 8006868:	f240 135d 	movwhi	r3, #349	; 0x15d
 800686c:	608b      	strhi	r3, [r1, #8]
 800686e:	9302      	strls	r3, [sp, #8]
 8006870:	680b      	ldr	r3, [r1, #0]
 8006872:	468b      	mov	fp, r1
 8006874:	2500      	movs	r5, #0
 8006876:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800687a:	f84b 3b1c 	str.w	r3, [fp], #28
 800687e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006882:	4680      	mov	r8, r0
 8006884:	460c      	mov	r4, r1
 8006886:	465e      	mov	r6, fp
 8006888:	46aa      	mov	sl, r5
 800688a:	46a9      	mov	r9, r5
 800688c:	9501      	str	r5, [sp, #4]
 800688e:	68a2      	ldr	r2, [r4, #8]
 8006890:	b152      	cbz	r2, 80068a8 <_scanf_float+0x60>
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	781b      	ldrb	r3, [r3, #0]
 8006896:	2b4e      	cmp	r3, #78	; 0x4e
 8006898:	d864      	bhi.n	8006964 <_scanf_float+0x11c>
 800689a:	2b40      	cmp	r3, #64	; 0x40
 800689c:	d83c      	bhi.n	8006918 <_scanf_float+0xd0>
 800689e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80068a2:	b2c8      	uxtb	r0, r1
 80068a4:	280e      	cmp	r0, #14
 80068a6:	d93a      	bls.n	800691e <_scanf_float+0xd6>
 80068a8:	f1b9 0f00 	cmp.w	r9, #0
 80068ac:	d003      	beq.n	80068b6 <_scanf_float+0x6e>
 80068ae:	6823      	ldr	r3, [r4, #0]
 80068b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068b4:	6023      	str	r3, [r4, #0]
 80068b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80068ba:	f1ba 0f01 	cmp.w	sl, #1
 80068be:	f200 8113 	bhi.w	8006ae8 <_scanf_float+0x2a0>
 80068c2:	455e      	cmp	r6, fp
 80068c4:	f200 8105 	bhi.w	8006ad2 <_scanf_float+0x28a>
 80068c8:	2501      	movs	r5, #1
 80068ca:	4628      	mov	r0, r5
 80068cc:	b007      	add	sp, #28
 80068ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068d2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80068d6:	2a0d      	cmp	r2, #13
 80068d8:	d8e6      	bhi.n	80068a8 <_scanf_float+0x60>
 80068da:	a101      	add	r1, pc, #4	; (adr r1, 80068e0 <_scanf_float+0x98>)
 80068dc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80068e0:	08006a1f 	.word	0x08006a1f
 80068e4:	080068a9 	.word	0x080068a9
 80068e8:	080068a9 	.word	0x080068a9
 80068ec:	080068a9 	.word	0x080068a9
 80068f0:	08006a7f 	.word	0x08006a7f
 80068f4:	08006a57 	.word	0x08006a57
 80068f8:	080068a9 	.word	0x080068a9
 80068fc:	080068a9 	.word	0x080068a9
 8006900:	08006a2d 	.word	0x08006a2d
 8006904:	080068a9 	.word	0x080068a9
 8006908:	080068a9 	.word	0x080068a9
 800690c:	080068a9 	.word	0x080068a9
 8006910:	080068a9 	.word	0x080068a9
 8006914:	080069e5 	.word	0x080069e5
 8006918:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800691c:	e7db      	b.n	80068d6 <_scanf_float+0x8e>
 800691e:	290e      	cmp	r1, #14
 8006920:	d8c2      	bhi.n	80068a8 <_scanf_float+0x60>
 8006922:	a001      	add	r0, pc, #4	; (adr r0, 8006928 <_scanf_float+0xe0>)
 8006924:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006928:	080069d7 	.word	0x080069d7
 800692c:	080068a9 	.word	0x080068a9
 8006930:	080069d7 	.word	0x080069d7
 8006934:	08006a6b 	.word	0x08006a6b
 8006938:	080068a9 	.word	0x080068a9
 800693c:	08006985 	.word	0x08006985
 8006940:	080069c1 	.word	0x080069c1
 8006944:	080069c1 	.word	0x080069c1
 8006948:	080069c1 	.word	0x080069c1
 800694c:	080069c1 	.word	0x080069c1
 8006950:	080069c1 	.word	0x080069c1
 8006954:	080069c1 	.word	0x080069c1
 8006958:	080069c1 	.word	0x080069c1
 800695c:	080069c1 	.word	0x080069c1
 8006960:	080069c1 	.word	0x080069c1
 8006964:	2b6e      	cmp	r3, #110	; 0x6e
 8006966:	d809      	bhi.n	800697c <_scanf_float+0x134>
 8006968:	2b60      	cmp	r3, #96	; 0x60
 800696a:	d8b2      	bhi.n	80068d2 <_scanf_float+0x8a>
 800696c:	2b54      	cmp	r3, #84	; 0x54
 800696e:	d077      	beq.n	8006a60 <_scanf_float+0x218>
 8006970:	2b59      	cmp	r3, #89	; 0x59
 8006972:	d199      	bne.n	80068a8 <_scanf_float+0x60>
 8006974:	2d07      	cmp	r5, #7
 8006976:	d197      	bne.n	80068a8 <_scanf_float+0x60>
 8006978:	2508      	movs	r5, #8
 800697a:	e029      	b.n	80069d0 <_scanf_float+0x188>
 800697c:	2b74      	cmp	r3, #116	; 0x74
 800697e:	d06f      	beq.n	8006a60 <_scanf_float+0x218>
 8006980:	2b79      	cmp	r3, #121	; 0x79
 8006982:	e7f6      	b.n	8006972 <_scanf_float+0x12a>
 8006984:	6821      	ldr	r1, [r4, #0]
 8006986:	05c8      	lsls	r0, r1, #23
 8006988:	d51a      	bpl.n	80069c0 <_scanf_float+0x178>
 800698a:	9b02      	ldr	r3, [sp, #8]
 800698c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006990:	6021      	str	r1, [r4, #0]
 8006992:	f109 0901 	add.w	r9, r9, #1
 8006996:	b11b      	cbz	r3, 80069a0 <_scanf_float+0x158>
 8006998:	3b01      	subs	r3, #1
 800699a:	3201      	adds	r2, #1
 800699c:	9302      	str	r3, [sp, #8]
 800699e:	60a2      	str	r2, [r4, #8]
 80069a0:	68a3      	ldr	r3, [r4, #8]
 80069a2:	3b01      	subs	r3, #1
 80069a4:	60a3      	str	r3, [r4, #8]
 80069a6:	6923      	ldr	r3, [r4, #16]
 80069a8:	3301      	adds	r3, #1
 80069aa:	6123      	str	r3, [r4, #16]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	3b01      	subs	r3, #1
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	607b      	str	r3, [r7, #4]
 80069b4:	f340 8084 	ble.w	8006ac0 <_scanf_float+0x278>
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	3301      	adds	r3, #1
 80069bc:	603b      	str	r3, [r7, #0]
 80069be:	e766      	b.n	800688e <_scanf_float+0x46>
 80069c0:	eb1a 0f05 	cmn.w	sl, r5
 80069c4:	f47f af70 	bne.w	80068a8 <_scanf_float+0x60>
 80069c8:	6822      	ldr	r2, [r4, #0]
 80069ca:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80069ce:	6022      	str	r2, [r4, #0]
 80069d0:	f806 3b01 	strb.w	r3, [r6], #1
 80069d4:	e7e4      	b.n	80069a0 <_scanf_float+0x158>
 80069d6:	6822      	ldr	r2, [r4, #0]
 80069d8:	0610      	lsls	r0, r2, #24
 80069da:	f57f af65 	bpl.w	80068a8 <_scanf_float+0x60>
 80069de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80069e2:	e7f4      	b.n	80069ce <_scanf_float+0x186>
 80069e4:	f1ba 0f00 	cmp.w	sl, #0
 80069e8:	d10e      	bne.n	8006a08 <_scanf_float+0x1c0>
 80069ea:	f1b9 0f00 	cmp.w	r9, #0
 80069ee:	d10e      	bne.n	8006a0e <_scanf_float+0x1c6>
 80069f0:	6822      	ldr	r2, [r4, #0]
 80069f2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80069f6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80069fa:	d108      	bne.n	8006a0e <_scanf_float+0x1c6>
 80069fc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006a00:	6022      	str	r2, [r4, #0]
 8006a02:	f04f 0a01 	mov.w	sl, #1
 8006a06:	e7e3      	b.n	80069d0 <_scanf_float+0x188>
 8006a08:	f1ba 0f02 	cmp.w	sl, #2
 8006a0c:	d055      	beq.n	8006aba <_scanf_float+0x272>
 8006a0e:	2d01      	cmp	r5, #1
 8006a10:	d002      	beq.n	8006a18 <_scanf_float+0x1d0>
 8006a12:	2d04      	cmp	r5, #4
 8006a14:	f47f af48 	bne.w	80068a8 <_scanf_float+0x60>
 8006a18:	3501      	adds	r5, #1
 8006a1a:	b2ed      	uxtb	r5, r5
 8006a1c:	e7d8      	b.n	80069d0 <_scanf_float+0x188>
 8006a1e:	f1ba 0f01 	cmp.w	sl, #1
 8006a22:	f47f af41 	bne.w	80068a8 <_scanf_float+0x60>
 8006a26:	f04f 0a02 	mov.w	sl, #2
 8006a2a:	e7d1      	b.n	80069d0 <_scanf_float+0x188>
 8006a2c:	b97d      	cbnz	r5, 8006a4e <_scanf_float+0x206>
 8006a2e:	f1b9 0f00 	cmp.w	r9, #0
 8006a32:	f47f af3c 	bne.w	80068ae <_scanf_float+0x66>
 8006a36:	6822      	ldr	r2, [r4, #0]
 8006a38:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006a3c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006a40:	f47f af39 	bne.w	80068b6 <_scanf_float+0x6e>
 8006a44:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006a48:	6022      	str	r2, [r4, #0]
 8006a4a:	2501      	movs	r5, #1
 8006a4c:	e7c0      	b.n	80069d0 <_scanf_float+0x188>
 8006a4e:	2d03      	cmp	r5, #3
 8006a50:	d0e2      	beq.n	8006a18 <_scanf_float+0x1d0>
 8006a52:	2d05      	cmp	r5, #5
 8006a54:	e7de      	b.n	8006a14 <_scanf_float+0x1cc>
 8006a56:	2d02      	cmp	r5, #2
 8006a58:	f47f af26 	bne.w	80068a8 <_scanf_float+0x60>
 8006a5c:	2503      	movs	r5, #3
 8006a5e:	e7b7      	b.n	80069d0 <_scanf_float+0x188>
 8006a60:	2d06      	cmp	r5, #6
 8006a62:	f47f af21 	bne.w	80068a8 <_scanf_float+0x60>
 8006a66:	2507      	movs	r5, #7
 8006a68:	e7b2      	b.n	80069d0 <_scanf_float+0x188>
 8006a6a:	6822      	ldr	r2, [r4, #0]
 8006a6c:	0591      	lsls	r1, r2, #22
 8006a6e:	f57f af1b 	bpl.w	80068a8 <_scanf_float+0x60>
 8006a72:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006a76:	6022      	str	r2, [r4, #0]
 8006a78:	f8cd 9004 	str.w	r9, [sp, #4]
 8006a7c:	e7a8      	b.n	80069d0 <_scanf_float+0x188>
 8006a7e:	6822      	ldr	r2, [r4, #0]
 8006a80:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006a84:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006a88:	d006      	beq.n	8006a98 <_scanf_float+0x250>
 8006a8a:	0550      	lsls	r0, r2, #21
 8006a8c:	f57f af0c 	bpl.w	80068a8 <_scanf_float+0x60>
 8006a90:	f1b9 0f00 	cmp.w	r9, #0
 8006a94:	f43f af0f 	beq.w	80068b6 <_scanf_float+0x6e>
 8006a98:	0591      	lsls	r1, r2, #22
 8006a9a:	bf58      	it	pl
 8006a9c:	9901      	ldrpl	r1, [sp, #4]
 8006a9e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006aa2:	bf58      	it	pl
 8006aa4:	eba9 0101 	subpl.w	r1, r9, r1
 8006aa8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006aac:	bf58      	it	pl
 8006aae:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006ab2:	6022      	str	r2, [r4, #0]
 8006ab4:	f04f 0900 	mov.w	r9, #0
 8006ab8:	e78a      	b.n	80069d0 <_scanf_float+0x188>
 8006aba:	f04f 0a03 	mov.w	sl, #3
 8006abe:	e787      	b.n	80069d0 <_scanf_float+0x188>
 8006ac0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006ac4:	4639      	mov	r1, r7
 8006ac6:	4640      	mov	r0, r8
 8006ac8:	4798      	blx	r3
 8006aca:	2800      	cmp	r0, #0
 8006acc:	f43f aedf 	beq.w	800688e <_scanf_float+0x46>
 8006ad0:	e6ea      	b.n	80068a8 <_scanf_float+0x60>
 8006ad2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006ad6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006ada:	463a      	mov	r2, r7
 8006adc:	4640      	mov	r0, r8
 8006ade:	4798      	blx	r3
 8006ae0:	6923      	ldr	r3, [r4, #16]
 8006ae2:	3b01      	subs	r3, #1
 8006ae4:	6123      	str	r3, [r4, #16]
 8006ae6:	e6ec      	b.n	80068c2 <_scanf_float+0x7a>
 8006ae8:	1e6b      	subs	r3, r5, #1
 8006aea:	2b06      	cmp	r3, #6
 8006aec:	d825      	bhi.n	8006b3a <_scanf_float+0x2f2>
 8006aee:	2d02      	cmp	r5, #2
 8006af0:	d836      	bhi.n	8006b60 <_scanf_float+0x318>
 8006af2:	455e      	cmp	r6, fp
 8006af4:	f67f aee8 	bls.w	80068c8 <_scanf_float+0x80>
 8006af8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006afc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006b00:	463a      	mov	r2, r7
 8006b02:	4640      	mov	r0, r8
 8006b04:	4798      	blx	r3
 8006b06:	6923      	ldr	r3, [r4, #16]
 8006b08:	3b01      	subs	r3, #1
 8006b0a:	6123      	str	r3, [r4, #16]
 8006b0c:	e7f1      	b.n	8006af2 <_scanf_float+0x2aa>
 8006b0e:	9802      	ldr	r0, [sp, #8]
 8006b10:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006b14:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006b18:	9002      	str	r0, [sp, #8]
 8006b1a:	463a      	mov	r2, r7
 8006b1c:	4640      	mov	r0, r8
 8006b1e:	4798      	blx	r3
 8006b20:	6923      	ldr	r3, [r4, #16]
 8006b22:	3b01      	subs	r3, #1
 8006b24:	6123      	str	r3, [r4, #16]
 8006b26:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006b2a:	fa5f fa8a 	uxtb.w	sl, sl
 8006b2e:	f1ba 0f02 	cmp.w	sl, #2
 8006b32:	d1ec      	bne.n	8006b0e <_scanf_float+0x2c6>
 8006b34:	3d03      	subs	r5, #3
 8006b36:	b2ed      	uxtb	r5, r5
 8006b38:	1b76      	subs	r6, r6, r5
 8006b3a:	6823      	ldr	r3, [r4, #0]
 8006b3c:	05da      	lsls	r2, r3, #23
 8006b3e:	d52f      	bpl.n	8006ba0 <_scanf_float+0x358>
 8006b40:	055b      	lsls	r3, r3, #21
 8006b42:	d510      	bpl.n	8006b66 <_scanf_float+0x31e>
 8006b44:	455e      	cmp	r6, fp
 8006b46:	f67f aebf 	bls.w	80068c8 <_scanf_float+0x80>
 8006b4a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006b4e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006b52:	463a      	mov	r2, r7
 8006b54:	4640      	mov	r0, r8
 8006b56:	4798      	blx	r3
 8006b58:	6923      	ldr	r3, [r4, #16]
 8006b5a:	3b01      	subs	r3, #1
 8006b5c:	6123      	str	r3, [r4, #16]
 8006b5e:	e7f1      	b.n	8006b44 <_scanf_float+0x2fc>
 8006b60:	46aa      	mov	sl, r5
 8006b62:	9602      	str	r6, [sp, #8]
 8006b64:	e7df      	b.n	8006b26 <_scanf_float+0x2de>
 8006b66:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006b6a:	6923      	ldr	r3, [r4, #16]
 8006b6c:	2965      	cmp	r1, #101	; 0x65
 8006b6e:	f103 33ff 	add.w	r3, r3, #4294967295
 8006b72:	f106 35ff 	add.w	r5, r6, #4294967295
 8006b76:	6123      	str	r3, [r4, #16]
 8006b78:	d00c      	beq.n	8006b94 <_scanf_float+0x34c>
 8006b7a:	2945      	cmp	r1, #69	; 0x45
 8006b7c:	d00a      	beq.n	8006b94 <_scanf_float+0x34c>
 8006b7e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006b82:	463a      	mov	r2, r7
 8006b84:	4640      	mov	r0, r8
 8006b86:	4798      	blx	r3
 8006b88:	6923      	ldr	r3, [r4, #16]
 8006b8a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006b8e:	3b01      	subs	r3, #1
 8006b90:	1eb5      	subs	r5, r6, #2
 8006b92:	6123      	str	r3, [r4, #16]
 8006b94:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006b98:	463a      	mov	r2, r7
 8006b9a:	4640      	mov	r0, r8
 8006b9c:	4798      	blx	r3
 8006b9e:	462e      	mov	r6, r5
 8006ba0:	6825      	ldr	r5, [r4, #0]
 8006ba2:	f015 0510 	ands.w	r5, r5, #16
 8006ba6:	d159      	bne.n	8006c5c <_scanf_float+0x414>
 8006ba8:	7035      	strb	r5, [r6, #0]
 8006baa:	6823      	ldr	r3, [r4, #0]
 8006bac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006bb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bb4:	d11b      	bne.n	8006bee <_scanf_float+0x3a6>
 8006bb6:	9b01      	ldr	r3, [sp, #4]
 8006bb8:	454b      	cmp	r3, r9
 8006bba:	eba3 0209 	sub.w	r2, r3, r9
 8006bbe:	d123      	bne.n	8006c08 <_scanf_float+0x3c0>
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	4659      	mov	r1, fp
 8006bc4:	4640      	mov	r0, r8
 8006bc6:	f000 fe99 	bl	80078fc <_strtod_r>
 8006bca:	6822      	ldr	r2, [r4, #0]
 8006bcc:	9b03      	ldr	r3, [sp, #12]
 8006bce:	f012 0f02 	tst.w	r2, #2
 8006bd2:	ec57 6b10 	vmov	r6, r7, d0
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	d021      	beq.n	8006c1e <_scanf_float+0x3d6>
 8006bda:	9903      	ldr	r1, [sp, #12]
 8006bdc:	1d1a      	adds	r2, r3, #4
 8006bde:	600a      	str	r2, [r1, #0]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	e9c3 6700 	strd	r6, r7, [r3]
 8006be6:	68e3      	ldr	r3, [r4, #12]
 8006be8:	3301      	adds	r3, #1
 8006bea:	60e3      	str	r3, [r4, #12]
 8006bec:	e66d      	b.n	80068ca <_scanf_float+0x82>
 8006bee:	9b04      	ldr	r3, [sp, #16]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d0e5      	beq.n	8006bc0 <_scanf_float+0x378>
 8006bf4:	9905      	ldr	r1, [sp, #20]
 8006bf6:	230a      	movs	r3, #10
 8006bf8:	462a      	mov	r2, r5
 8006bfa:	3101      	adds	r1, #1
 8006bfc:	4640      	mov	r0, r8
 8006bfe:	f000 ff05 	bl	8007a0c <_strtol_r>
 8006c02:	9b04      	ldr	r3, [sp, #16]
 8006c04:	9e05      	ldr	r6, [sp, #20]
 8006c06:	1ac2      	subs	r2, r0, r3
 8006c08:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006c0c:	429e      	cmp	r6, r3
 8006c0e:	bf28      	it	cs
 8006c10:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006c14:	4912      	ldr	r1, [pc, #72]	; (8006c60 <_scanf_float+0x418>)
 8006c16:	4630      	mov	r0, r6
 8006c18:	f000 f82c 	bl	8006c74 <siprintf>
 8006c1c:	e7d0      	b.n	8006bc0 <_scanf_float+0x378>
 8006c1e:	9903      	ldr	r1, [sp, #12]
 8006c20:	f012 0f04 	tst.w	r2, #4
 8006c24:	f103 0204 	add.w	r2, r3, #4
 8006c28:	600a      	str	r2, [r1, #0]
 8006c2a:	d1d9      	bne.n	8006be0 <_scanf_float+0x398>
 8006c2c:	f8d3 8000 	ldr.w	r8, [r3]
 8006c30:	ee10 2a10 	vmov	r2, s0
 8006c34:	ee10 0a10 	vmov	r0, s0
 8006c38:	463b      	mov	r3, r7
 8006c3a:	4639      	mov	r1, r7
 8006c3c:	f7f9 ff76 	bl	8000b2c <__aeabi_dcmpun>
 8006c40:	b128      	cbz	r0, 8006c4e <_scanf_float+0x406>
 8006c42:	4808      	ldr	r0, [pc, #32]	; (8006c64 <_scanf_float+0x41c>)
 8006c44:	f000 f810 	bl	8006c68 <nanf>
 8006c48:	ed88 0a00 	vstr	s0, [r8]
 8006c4c:	e7cb      	b.n	8006be6 <_scanf_float+0x39e>
 8006c4e:	4630      	mov	r0, r6
 8006c50:	4639      	mov	r1, r7
 8006c52:	f7f9 ffc9 	bl	8000be8 <__aeabi_d2f>
 8006c56:	f8c8 0000 	str.w	r0, [r8]
 8006c5a:	e7c4      	b.n	8006be6 <_scanf_float+0x39e>
 8006c5c:	2500      	movs	r5, #0
 8006c5e:	e634      	b.n	80068ca <_scanf_float+0x82>
 8006c60:	0800b110 	.word	0x0800b110
 8006c64:	0800b518 	.word	0x0800b518

08006c68 <nanf>:
 8006c68:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006c70 <nanf+0x8>
 8006c6c:	4770      	bx	lr
 8006c6e:	bf00      	nop
 8006c70:	7fc00000 	.word	0x7fc00000

08006c74 <siprintf>:
 8006c74:	b40e      	push	{r1, r2, r3}
 8006c76:	b500      	push	{lr}
 8006c78:	b09c      	sub	sp, #112	; 0x70
 8006c7a:	ab1d      	add	r3, sp, #116	; 0x74
 8006c7c:	9002      	str	r0, [sp, #8]
 8006c7e:	9006      	str	r0, [sp, #24]
 8006c80:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006c84:	4809      	ldr	r0, [pc, #36]	; (8006cac <siprintf+0x38>)
 8006c86:	9107      	str	r1, [sp, #28]
 8006c88:	9104      	str	r1, [sp, #16]
 8006c8a:	4909      	ldr	r1, [pc, #36]	; (8006cb0 <siprintf+0x3c>)
 8006c8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c90:	9105      	str	r1, [sp, #20]
 8006c92:	6800      	ldr	r0, [r0, #0]
 8006c94:	9301      	str	r3, [sp, #4]
 8006c96:	a902      	add	r1, sp, #8
 8006c98:	f002 fee4 	bl	8009a64 <_svfiprintf_r>
 8006c9c:	9b02      	ldr	r3, [sp, #8]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	701a      	strb	r2, [r3, #0]
 8006ca2:	b01c      	add	sp, #112	; 0x70
 8006ca4:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ca8:	b003      	add	sp, #12
 8006caa:	4770      	bx	lr
 8006cac:	2000000c 	.word	0x2000000c
 8006cb0:	ffff0208 	.word	0xffff0208

08006cb4 <sulp>:
 8006cb4:	b570      	push	{r4, r5, r6, lr}
 8006cb6:	4604      	mov	r4, r0
 8006cb8:	460d      	mov	r5, r1
 8006cba:	ec45 4b10 	vmov	d0, r4, r5
 8006cbe:	4616      	mov	r6, r2
 8006cc0:	f002 fc2e 	bl	8009520 <__ulp>
 8006cc4:	ec51 0b10 	vmov	r0, r1, d0
 8006cc8:	b17e      	cbz	r6, 8006cea <sulp+0x36>
 8006cca:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006cce:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	dd09      	ble.n	8006cea <sulp+0x36>
 8006cd6:	051b      	lsls	r3, r3, #20
 8006cd8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006cdc:	2400      	movs	r4, #0
 8006cde:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006ce2:	4622      	mov	r2, r4
 8006ce4:	462b      	mov	r3, r5
 8006ce6:	f7f9 fc87 	bl	80005f8 <__aeabi_dmul>
 8006cea:	bd70      	pop	{r4, r5, r6, pc}
 8006cec:	0000      	movs	r0, r0
	...

08006cf0 <_strtod_l>:
 8006cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cf4:	ed2d 8b02 	vpush	{d8}
 8006cf8:	b09d      	sub	sp, #116	; 0x74
 8006cfa:	461f      	mov	r7, r3
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	9318      	str	r3, [sp, #96]	; 0x60
 8006d00:	4ba2      	ldr	r3, [pc, #648]	; (8006f8c <_strtod_l+0x29c>)
 8006d02:	9213      	str	r2, [sp, #76]	; 0x4c
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	9305      	str	r3, [sp, #20]
 8006d08:	4604      	mov	r4, r0
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	4688      	mov	r8, r1
 8006d0e:	f7f9 fa5f 	bl	80001d0 <strlen>
 8006d12:	f04f 0a00 	mov.w	sl, #0
 8006d16:	4605      	mov	r5, r0
 8006d18:	f04f 0b00 	mov.w	fp, #0
 8006d1c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006d20:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006d22:	781a      	ldrb	r2, [r3, #0]
 8006d24:	2a2b      	cmp	r2, #43	; 0x2b
 8006d26:	d04e      	beq.n	8006dc6 <_strtod_l+0xd6>
 8006d28:	d83b      	bhi.n	8006da2 <_strtod_l+0xb2>
 8006d2a:	2a0d      	cmp	r2, #13
 8006d2c:	d834      	bhi.n	8006d98 <_strtod_l+0xa8>
 8006d2e:	2a08      	cmp	r2, #8
 8006d30:	d834      	bhi.n	8006d9c <_strtod_l+0xac>
 8006d32:	2a00      	cmp	r2, #0
 8006d34:	d03e      	beq.n	8006db4 <_strtod_l+0xc4>
 8006d36:	2300      	movs	r3, #0
 8006d38:	930a      	str	r3, [sp, #40]	; 0x28
 8006d3a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8006d3c:	7833      	ldrb	r3, [r6, #0]
 8006d3e:	2b30      	cmp	r3, #48	; 0x30
 8006d40:	f040 80b0 	bne.w	8006ea4 <_strtod_l+0x1b4>
 8006d44:	7873      	ldrb	r3, [r6, #1]
 8006d46:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006d4a:	2b58      	cmp	r3, #88	; 0x58
 8006d4c:	d168      	bne.n	8006e20 <_strtod_l+0x130>
 8006d4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d50:	9301      	str	r3, [sp, #4]
 8006d52:	ab18      	add	r3, sp, #96	; 0x60
 8006d54:	9702      	str	r7, [sp, #8]
 8006d56:	9300      	str	r3, [sp, #0]
 8006d58:	4a8d      	ldr	r2, [pc, #564]	; (8006f90 <_strtod_l+0x2a0>)
 8006d5a:	ab19      	add	r3, sp, #100	; 0x64
 8006d5c:	a917      	add	r1, sp, #92	; 0x5c
 8006d5e:	4620      	mov	r0, r4
 8006d60:	f001 fd38 	bl	80087d4 <__gethex>
 8006d64:	f010 0707 	ands.w	r7, r0, #7
 8006d68:	4605      	mov	r5, r0
 8006d6a:	d005      	beq.n	8006d78 <_strtod_l+0x88>
 8006d6c:	2f06      	cmp	r7, #6
 8006d6e:	d12c      	bne.n	8006dca <_strtod_l+0xda>
 8006d70:	3601      	adds	r6, #1
 8006d72:	2300      	movs	r3, #0
 8006d74:	9617      	str	r6, [sp, #92]	; 0x5c
 8006d76:	930a      	str	r3, [sp, #40]	; 0x28
 8006d78:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	f040 8590 	bne.w	80078a0 <_strtod_l+0xbb0>
 8006d80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d82:	b1eb      	cbz	r3, 8006dc0 <_strtod_l+0xd0>
 8006d84:	4652      	mov	r2, sl
 8006d86:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006d8a:	ec43 2b10 	vmov	d0, r2, r3
 8006d8e:	b01d      	add	sp, #116	; 0x74
 8006d90:	ecbd 8b02 	vpop	{d8}
 8006d94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d98:	2a20      	cmp	r2, #32
 8006d9a:	d1cc      	bne.n	8006d36 <_strtod_l+0x46>
 8006d9c:	3301      	adds	r3, #1
 8006d9e:	9317      	str	r3, [sp, #92]	; 0x5c
 8006da0:	e7be      	b.n	8006d20 <_strtod_l+0x30>
 8006da2:	2a2d      	cmp	r2, #45	; 0x2d
 8006da4:	d1c7      	bne.n	8006d36 <_strtod_l+0x46>
 8006da6:	2201      	movs	r2, #1
 8006da8:	920a      	str	r2, [sp, #40]	; 0x28
 8006daa:	1c5a      	adds	r2, r3, #1
 8006dac:	9217      	str	r2, [sp, #92]	; 0x5c
 8006dae:	785b      	ldrb	r3, [r3, #1]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d1c2      	bne.n	8006d3a <_strtod_l+0x4a>
 8006db4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006db6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	f040 856e 	bne.w	800789c <_strtod_l+0xbac>
 8006dc0:	4652      	mov	r2, sl
 8006dc2:	465b      	mov	r3, fp
 8006dc4:	e7e1      	b.n	8006d8a <_strtod_l+0x9a>
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	e7ee      	b.n	8006da8 <_strtod_l+0xb8>
 8006dca:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006dcc:	b13a      	cbz	r2, 8006dde <_strtod_l+0xee>
 8006dce:	2135      	movs	r1, #53	; 0x35
 8006dd0:	a81a      	add	r0, sp, #104	; 0x68
 8006dd2:	f002 fcb0 	bl	8009736 <__copybits>
 8006dd6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006dd8:	4620      	mov	r0, r4
 8006dda:	f002 f86f 	bl	8008ebc <_Bfree>
 8006dde:	3f01      	subs	r7, #1
 8006de0:	2f04      	cmp	r7, #4
 8006de2:	d806      	bhi.n	8006df2 <_strtod_l+0x102>
 8006de4:	e8df f007 	tbb	[pc, r7]
 8006de8:	1714030a 	.word	0x1714030a
 8006dec:	0a          	.byte	0x0a
 8006ded:	00          	.byte	0x00
 8006dee:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8006df2:	0728      	lsls	r0, r5, #28
 8006df4:	d5c0      	bpl.n	8006d78 <_strtod_l+0x88>
 8006df6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8006dfa:	e7bd      	b.n	8006d78 <_strtod_l+0x88>
 8006dfc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8006e00:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006e02:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006e06:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006e0a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006e0e:	e7f0      	b.n	8006df2 <_strtod_l+0x102>
 8006e10:	f8df b180 	ldr.w	fp, [pc, #384]	; 8006f94 <_strtod_l+0x2a4>
 8006e14:	e7ed      	b.n	8006df2 <_strtod_l+0x102>
 8006e16:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8006e1a:	f04f 3aff 	mov.w	sl, #4294967295
 8006e1e:	e7e8      	b.n	8006df2 <_strtod_l+0x102>
 8006e20:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006e22:	1c5a      	adds	r2, r3, #1
 8006e24:	9217      	str	r2, [sp, #92]	; 0x5c
 8006e26:	785b      	ldrb	r3, [r3, #1]
 8006e28:	2b30      	cmp	r3, #48	; 0x30
 8006e2a:	d0f9      	beq.n	8006e20 <_strtod_l+0x130>
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d0a3      	beq.n	8006d78 <_strtod_l+0x88>
 8006e30:	2301      	movs	r3, #1
 8006e32:	f04f 0900 	mov.w	r9, #0
 8006e36:	9304      	str	r3, [sp, #16]
 8006e38:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006e3a:	9308      	str	r3, [sp, #32]
 8006e3c:	f8cd 901c 	str.w	r9, [sp, #28]
 8006e40:	464f      	mov	r7, r9
 8006e42:	220a      	movs	r2, #10
 8006e44:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8006e46:	7806      	ldrb	r6, [r0, #0]
 8006e48:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8006e4c:	b2d9      	uxtb	r1, r3
 8006e4e:	2909      	cmp	r1, #9
 8006e50:	d92a      	bls.n	8006ea8 <_strtod_l+0x1b8>
 8006e52:	9905      	ldr	r1, [sp, #20]
 8006e54:	462a      	mov	r2, r5
 8006e56:	f002 ff1f 	bl	8009c98 <strncmp>
 8006e5a:	b398      	cbz	r0, 8006ec4 <_strtod_l+0x1d4>
 8006e5c:	2000      	movs	r0, #0
 8006e5e:	4632      	mov	r2, r6
 8006e60:	463d      	mov	r5, r7
 8006e62:	9005      	str	r0, [sp, #20]
 8006e64:	4603      	mov	r3, r0
 8006e66:	2a65      	cmp	r2, #101	; 0x65
 8006e68:	d001      	beq.n	8006e6e <_strtod_l+0x17e>
 8006e6a:	2a45      	cmp	r2, #69	; 0x45
 8006e6c:	d118      	bne.n	8006ea0 <_strtod_l+0x1b0>
 8006e6e:	b91d      	cbnz	r5, 8006e78 <_strtod_l+0x188>
 8006e70:	9a04      	ldr	r2, [sp, #16]
 8006e72:	4302      	orrs	r2, r0
 8006e74:	d09e      	beq.n	8006db4 <_strtod_l+0xc4>
 8006e76:	2500      	movs	r5, #0
 8006e78:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8006e7c:	f108 0201 	add.w	r2, r8, #1
 8006e80:	9217      	str	r2, [sp, #92]	; 0x5c
 8006e82:	f898 2001 	ldrb.w	r2, [r8, #1]
 8006e86:	2a2b      	cmp	r2, #43	; 0x2b
 8006e88:	d075      	beq.n	8006f76 <_strtod_l+0x286>
 8006e8a:	2a2d      	cmp	r2, #45	; 0x2d
 8006e8c:	d07b      	beq.n	8006f86 <_strtod_l+0x296>
 8006e8e:	f04f 0c00 	mov.w	ip, #0
 8006e92:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006e96:	2909      	cmp	r1, #9
 8006e98:	f240 8082 	bls.w	8006fa0 <_strtod_l+0x2b0>
 8006e9c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006ea0:	2600      	movs	r6, #0
 8006ea2:	e09d      	b.n	8006fe0 <_strtod_l+0x2f0>
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	e7c4      	b.n	8006e32 <_strtod_l+0x142>
 8006ea8:	2f08      	cmp	r7, #8
 8006eaa:	bfd8      	it	le
 8006eac:	9907      	ldrle	r1, [sp, #28]
 8006eae:	f100 0001 	add.w	r0, r0, #1
 8006eb2:	bfda      	itte	le
 8006eb4:	fb02 3301 	mlale	r3, r2, r1, r3
 8006eb8:	9307      	strle	r3, [sp, #28]
 8006eba:	fb02 3909 	mlagt	r9, r2, r9, r3
 8006ebe:	3701      	adds	r7, #1
 8006ec0:	9017      	str	r0, [sp, #92]	; 0x5c
 8006ec2:	e7bf      	b.n	8006e44 <_strtod_l+0x154>
 8006ec4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006ec6:	195a      	adds	r2, r3, r5
 8006ec8:	9217      	str	r2, [sp, #92]	; 0x5c
 8006eca:	5d5a      	ldrb	r2, [r3, r5]
 8006ecc:	2f00      	cmp	r7, #0
 8006ece:	d037      	beq.n	8006f40 <_strtod_l+0x250>
 8006ed0:	9005      	str	r0, [sp, #20]
 8006ed2:	463d      	mov	r5, r7
 8006ed4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006ed8:	2b09      	cmp	r3, #9
 8006eda:	d912      	bls.n	8006f02 <_strtod_l+0x212>
 8006edc:	2301      	movs	r3, #1
 8006ede:	e7c2      	b.n	8006e66 <_strtod_l+0x176>
 8006ee0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006ee2:	1c5a      	adds	r2, r3, #1
 8006ee4:	9217      	str	r2, [sp, #92]	; 0x5c
 8006ee6:	785a      	ldrb	r2, [r3, #1]
 8006ee8:	3001      	adds	r0, #1
 8006eea:	2a30      	cmp	r2, #48	; 0x30
 8006eec:	d0f8      	beq.n	8006ee0 <_strtod_l+0x1f0>
 8006eee:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006ef2:	2b08      	cmp	r3, #8
 8006ef4:	f200 84d9 	bhi.w	80078aa <_strtod_l+0xbba>
 8006ef8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006efa:	9005      	str	r0, [sp, #20]
 8006efc:	2000      	movs	r0, #0
 8006efe:	9308      	str	r3, [sp, #32]
 8006f00:	4605      	mov	r5, r0
 8006f02:	3a30      	subs	r2, #48	; 0x30
 8006f04:	f100 0301 	add.w	r3, r0, #1
 8006f08:	d014      	beq.n	8006f34 <_strtod_l+0x244>
 8006f0a:	9905      	ldr	r1, [sp, #20]
 8006f0c:	4419      	add	r1, r3
 8006f0e:	9105      	str	r1, [sp, #20]
 8006f10:	462b      	mov	r3, r5
 8006f12:	eb00 0e05 	add.w	lr, r0, r5
 8006f16:	210a      	movs	r1, #10
 8006f18:	4573      	cmp	r3, lr
 8006f1a:	d113      	bne.n	8006f44 <_strtod_l+0x254>
 8006f1c:	182b      	adds	r3, r5, r0
 8006f1e:	2b08      	cmp	r3, #8
 8006f20:	f105 0501 	add.w	r5, r5, #1
 8006f24:	4405      	add	r5, r0
 8006f26:	dc1c      	bgt.n	8006f62 <_strtod_l+0x272>
 8006f28:	9907      	ldr	r1, [sp, #28]
 8006f2a:	230a      	movs	r3, #10
 8006f2c:	fb03 2301 	mla	r3, r3, r1, r2
 8006f30:	9307      	str	r3, [sp, #28]
 8006f32:	2300      	movs	r3, #0
 8006f34:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006f36:	1c51      	adds	r1, r2, #1
 8006f38:	9117      	str	r1, [sp, #92]	; 0x5c
 8006f3a:	7852      	ldrb	r2, [r2, #1]
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	e7c9      	b.n	8006ed4 <_strtod_l+0x1e4>
 8006f40:	4638      	mov	r0, r7
 8006f42:	e7d2      	b.n	8006eea <_strtod_l+0x1fa>
 8006f44:	2b08      	cmp	r3, #8
 8006f46:	dc04      	bgt.n	8006f52 <_strtod_l+0x262>
 8006f48:	9e07      	ldr	r6, [sp, #28]
 8006f4a:	434e      	muls	r6, r1
 8006f4c:	9607      	str	r6, [sp, #28]
 8006f4e:	3301      	adds	r3, #1
 8006f50:	e7e2      	b.n	8006f18 <_strtod_l+0x228>
 8006f52:	f103 0c01 	add.w	ip, r3, #1
 8006f56:	f1bc 0f10 	cmp.w	ip, #16
 8006f5a:	bfd8      	it	le
 8006f5c:	fb01 f909 	mulle.w	r9, r1, r9
 8006f60:	e7f5      	b.n	8006f4e <_strtod_l+0x25e>
 8006f62:	2d10      	cmp	r5, #16
 8006f64:	bfdc      	itt	le
 8006f66:	230a      	movle	r3, #10
 8006f68:	fb03 2909 	mlale	r9, r3, r9, r2
 8006f6c:	e7e1      	b.n	8006f32 <_strtod_l+0x242>
 8006f6e:	2300      	movs	r3, #0
 8006f70:	9305      	str	r3, [sp, #20]
 8006f72:	2301      	movs	r3, #1
 8006f74:	e77c      	b.n	8006e70 <_strtod_l+0x180>
 8006f76:	f04f 0c00 	mov.w	ip, #0
 8006f7a:	f108 0202 	add.w	r2, r8, #2
 8006f7e:	9217      	str	r2, [sp, #92]	; 0x5c
 8006f80:	f898 2002 	ldrb.w	r2, [r8, #2]
 8006f84:	e785      	b.n	8006e92 <_strtod_l+0x1a2>
 8006f86:	f04f 0c01 	mov.w	ip, #1
 8006f8a:	e7f6      	b.n	8006f7a <_strtod_l+0x28a>
 8006f8c:	0800b360 	.word	0x0800b360
 8006f90:	0800b118 	.word	0x0800b118
 8006f94:	7ff00000 	.word	0x7ff00000
 8006f98:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006f9a:	1c51      	adds	r1, r2, #1
 8006f9c:	9117      	str	r1, [sp, #92]	; 0x5c
 8006f9e:	7852      	ldrb	r2, [r2, #1]
 8006fa0:	2a30      	cmp	r2, #48	; 0x30
 8006fa2:	d0f9      	beq.n	8006f98 <_strtod_l+0x2a8>
 8006fa4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8006fa8:	2908      	cmp	r1, #8
 8006faa:	f63f af79 	bhi.w	8006ea0 <_strtod_l+0x1b0>
 8006fae:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8006fb2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006fb4:	9206      	str	r2, [sp, #24]
 8006fb6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006fb8:	1c51      	adds	r1, r2, #1
 8006fba:	9117      	str	r1, [sp, #92]	; 0x5c
 8006fbc:	7852      	ldrb	r2, [r2, #1]
 8006fbe:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8006fc2:	2e09      	cmp	r6, #9
 8006fc4:	d937      	bls.n	8007036 <_strtod_l+0x346>
 8006fc6:	9e06      	ldr	r6, [sp, #24]
 8006fc8:	1b89      	subs	r1, r1, r6
 8006fca:	2908      	cmp	r1, #8
 8006fcc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8006fd0:	dc02      	bgt.n	8006fd8 <_strtod_l+0x2e8>
 8006fd2:	4576      	cmp	r6, lr
 8006fd4:	bfa8      	it	ge
 8006fd6:	4676      	movge	r6, lr
 8006fd8:	f1bc 0f00 	cmp.w	ip, #0
 8006fdc:	d000      	beq.n	8006fe0 <_strtod_l+0x2f0>
 8006fde:	4276      	negs	r6, r6
 8006fe0:	2d00      	cmp	r5, #0
 8006fe2:	d14d      	bne.n	8007080 <_strtod_l+0x390>
 8006fe4:	9904      	ldr	r1, [sp, #16]
 8006fe6:	4301      	orrs	r1, r0
 8006fe8:	f47f aec6 	bne.w	8006d78 <_strtod_l+0x88>
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	f47f aee1 	bne.w	8006db4 <_strtod_l+0xc4>
 8006ff2:	2a69      	cmp	r2, #105	; 0x69
 8006ff4:	d027      	beq.n	8007046 <_strtod_l+0x356>
 8006ff6:	dc24      	bgt.n	8007042 <_strtod_l+0x352>
 8006ff8:	2a49      	cmp	r2, #73	; 0x49
 8006ffa:	d024      	beq.n	8007046 <_strtod_l+0x356>
 8006ffc:	2a4e      	cmp	r2, #78	; 0x4e
 8006ffe:	f47f aed9 	bne.w	8006db4 <_strtod_l+0xc4>
 8007002:	499f      	ldr	r1, [pc, #636]	; (8007280 <_strtod_l+0x590>)
 8007004:	a817      	add	r0, sp, #92	; 0x5c
 8007006:	f001 fe3d 	bl	8008c84 <__match>
 800700a:	2800      	cmp	r0, #0
 800700c:	f43f aed2 	beq.w	8006db4 <_strtod_l+0xc4>
 8007010:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007012:	781b      	ldrb	r3, [r3, #0]
 8007014:	2b28      	cmp	r3, #40	; 0x28
 8007016:	d12d      	bne.n	8007074 <_strtod_l+0x384>
 8007018:	499a      	ldr	r1, [pc, #616]	; (8007284 <_strtod_l+0x594>)
 800701a:	aa1a      	add	r2, sp, #104	; 0x68
 800701c:	a817      	add	r0, sp, #92	; 0x5c
 800701e:	f001 fe45 	bl	8008cac <__hexnan>
 8007022:	2805      	cmp	r0, #5
 8007024:	d126      	bne.n	8007074 <_strtod_l+0x384>
 8007026:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007028:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800702c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007030:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007034:	e6a0      	b.n	8006d78 <_strtod_l+0x88>
 8007036:	210a      	movs	r1, #10
 8007038:	fb01 2e0e 	mla	lr, r1, lr, r2
 800703c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007040:	e7b9      	b.n	8006fb6 <_strtod_l+0x2c6>
 8007042:	2a6e      	cmp	r2, #110	; 0x6e
 8007044:	e7db      	b.n	8006ffe <_strtod_l+0x30e>
 8007046:	4990      	ldr	r1, [pc, #576]	; (8007288 <_strtod_l+0x598>)
 8007048:	a817      	add	r0, sp, #92	; 0x5c
 800704a:	f001 fe1b 	bl	8008c84 <__match>
 800704e:	2800      	cmp	r0, #0
 8007050:	f43f aeb0 	beq.w	8006db4 <_strtod_l+0xc4>
 8007054:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007056:	498d      	ldr	r1, [pc, #564]	; (800728c <_strtod_l+0x59c>)
 8007058:	3b01      	subs	r3, #1
 800705a:	a817      	add	r0, sp, #92	; 0x5c
 800705c:	9317      	str	r3, [sp, #92]	; 0x5c
 800705e:	f001 fe11 	bl	8008c84 <__match>
 8007062:	b910      	cbnz	r0, 800706a <_strtod_l+0x37a>
 8007064:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007066:	3301      	adds	r3, #1
 8007068:	9317      	str	r3, [sp, #92]	; 0x5c
 800706a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800729c <_strtod_l+0x5ac>
 800706e:	f04f 0a00 	mov.w	sl, #0
 8007072:	e681      	b.n	8006d78 <_strtod_l+0x88>
 8007074:	4886      	ldr	r0, [pc, #536]	; (8007290 <_strtod_l+0x5a0>)
 8007076:	f002 fdf7 	bl	8009c68 <nan>
 800707a:	ec5b ab10 	vmov	sl, fp, d0
 800707e:	e67b      	b.n	8006d78 <_strtod_l+0x88>
 8007080:	9b05      	ldr	r3, [sp, #20]
 8007082:	9807      	ldr	r0, [sp, #28]
 8007084:	1af3      	subs	r3, r6, r3
 8007086:	2f00      	cmp	r7, #0
 8007088:	bf08      	it	eq
 800708a:	462f      	moveq	r7, r5
 800708c:	2d10      	cmp	r5, #16
 800708e:	9306      	str	r3, [sp, #24]
 8007090:	46a8      	mov	r8, r5
 8007092:	bfa8      	it	ge
 8007094:	f04f 0810 	movge.w	r8, #16
 8007098:	f7f9 fa34 	bl	8000504 <__aeabi_ui2d>
 800709c:	2d09      	cmp	r5, #9
 800709e:	4682      	mov	sl, r0
 80070a0:	468b      	mov	fp, r1
 80070a2:	dd13      	ble.n	80070cc <_strtod_l+0x3dc>
 80070a4:	4b7b      	ldr	r3, [pc, #492]	; (8007294 <_strtod_l+0x5a4>)
 80070a6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80070aa:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80070ae:	f7f9 faa3 	bl	80005f8 <__aeabi_dmul>
 80070b2:	4682      	mov	sl, r0
 80070b4:	4648      	mov	r0, r9
 80070b6:	468b      	mov	fp, r1
 80070b8:	f7f9 fa24 	bl	8000504 <__aeabi_ui2d>
 80070bc:	4602      	mov	r2, r0
 80070be:	460b      	mov	r3, r1
 80070c0:	4650      	mov	r0, sl
 80070c2:	4659      	mov	r1, fp
 80070c4:	f7f9 f8e2 	bl	800028c <__adddf3>
 80070c8:	4682      	mov	sl, r0
 80070ca:	468b      	mov	fp, r1
 80070cc:	2d0f      	cmp	r5, #15
 80070ce:	dc38      	bgt.n	8007142 <_strtod_l+0x452>
 80070d0:	9b06      	ldr	r3, [sp, #24]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	f43f ae50 	beq.w	8006d78 <_strtod_l+0x88>
 80070d8:	dd24      	ble.n	8007124 <_strtod_l+0x434>
 80070da:	2b16      	cmp	r3, #22
 80070dc:	dc0b      	bgt.n	80070f6 <_strtod_l+0x406>
 80070de:	496d      	ldr	r1, [pc, #436]	; (8007294 <_strtod_l+0x5a4>)
 80070e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80070e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80070e8:	4652      	mov	r2, sl
 80070ea:	465b      	mov	r3, fp
 80070ec:	f7f9 fa84 	bl	80005f8 <__aeabi_dmul>
 80070f0:	4682      	mov	sl, r0
 80070f2:	468b      	mov	fp, r1
 80070f4:	e640      	b.n	8006d78 <_strtod_l+0x88>
 80070f6:	9a06      	ldr	r2, [sp, #24]
 80070f8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80070fc:	4293      	cmp	r3, r2
 80070fe:	db20      	blt.n	8007142 <_strtod_l+0x452>
 8007100:	4c64      	ldr	r4, [pc, #400]	; (8007294 <_strtod_l+0x5a4>)
 8007102:	f1c5 050f 	rsb	r5, r5, #15
 8007106:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800710a:	4652      	mov	r2, sl
 800710c:	465b      	mov	r3, fp
 800710e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007112:	f7f9 fa71 	bl	80005f8 <__aeabi_dmul>
 8007116:	9b06      	ldr	r3, [sp, #24]
 8007118:	1b5d      	subs	r5, r3, r5
 800711a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800711e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007122:	e7e3      	b.n	80070ec <_strtod_l+0x3fc>
 8007124:	9b06      	ldr	r3, [sp, #24]
 8007126:	3316      	adds	r3, #22
 8007128:	db0b      	blt.n	8007142 <_strtod_l+0x452>
 800712a:	9b05      	ldr	r3, [sp, #20]
 800712c:	1b9e      	subs	r6, r3, r6
 800712e:	4b59      	ldr	r3, [pc, #356]	; (8007294 <_strtod_l+0x5a4>)
 8007130:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8007134:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007138:	4650      	mov	r0, sl
 800713a:	4659      	mov	r1, fp
 800713c:	f7f9 fb86 	bl	800084c <__aeabi_ddiv>
 8007140:	e7d6      	b.n	80070f0 <_strtod_l+0x400>
 8007142:	9b06      	ldr	r3, [sp, #24]
 8007144:	eba5 0808 	sub.w	r8, r5, r8
 8007148:	4498      	add	r8, r3
 800714a:	f1b8 0f00 	cmp.w	r8, #0
 800714e:	dd74      	ble.n	800723a <_strtod_l+0x54a>
 8007150:	f018 030f 	ands.w	r3, r8, #15
 8007154:	d00a      	beq.n	800716c <_strtod_l+0x47c>
 8007156:	494f      	ldr	r1, [pc, #316]	; (8007294 <_strtod_l+0x5a4>)
 8007158:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800715c:	4652      	mov	r2, sl
 800715e:	465b      	mov	r3, fp
 8007160:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007164:	f7f9 fa48 	bl	80005f8 <__aeabi_dmul>
 8007168:	4682      	mov	sl, r0
 800716a:	468b      	mov	fp, r1
 800716c:	f038 080f 	bics.w	r8, r8, #15
 8007170:	d04f      	beq.n	8007212 <_strtod_l+0x522>
 8007172:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8007176:	dd22      	ble.n	80071be <_strtod_l+0x4ce>
 8007178:	2500      	movs	r5, #0
 800717a:	462e      	mov	r6, r5
 800717c:	9507      	str	r5, [sp, #28]
 800717e:	9505      	str	r5, [sp, #20]
 8007180:	2322      	movs	r3, #34	; 0x22
 8007182:	f8df b118 	ldr.w	fp, [pc, #280]	; 800729c <_strtod_l+0x5ac>
 8007186:	6023      	str	r3, [r4, #0]
 8007188:	f04f 0a00 	mov.w	sl, #0
 800718c:	9b07      	ldr	r3, [sp, #28]
 800718e:	2b00      	cmp	r3, #0
 8007190:	f43f adf2 	beq.w	8006d78 <_strtod_l+0x88>
 8007194:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007196:	4620      	mov	r0, r4
 8007198:	f001 fe90 	bl	8008ebc <_Bfree>
 800719c:	9905      	ldr	r1, [sp, #20]
 800719e:	4620      	mov	r0, r4
 80071a0:	f001 fe8c 	bl	8008ebc <_Bfree>
 80071a4:	4631      	mov	r1, r6
 80071a6:	4620      	mov	r0, r4
 80071a8:	f001 fe88 	bl	8008ebc <_Bfree>
 80071ac:	9907      	ldr	r1, [sp, #28]
 80071ae:	4620      	mov	r0, r4
 80071b0:	f001 fe84 	bl	8008ebc <_Bfree>
 80071b4:	4629      	mov	r1, r5
 80071b6:	4620      	mov	r0, r4
 80071b8:	f001 fe80 	bl	8008ebc <_Bfree>
 80071bc:	e5dc      	b.n	8006d78 <_strtod_l+0x88>
 80071be:	4b36      	ldr	r3, [pc, #216]	; (8007298 <_strtod_l+0x5a8>)
 80071c0:	9304      	str	r3, [sp, #16]
 80071c2:	2300      	movs	r3, #0
 80071c4:	ea4f 1828 	mov.w	r8, r8, asr #4
 80071c8:	4650      	mov	r0, sl
 80071ca:	4659      	mov	r1, fp
 80071cc:	4699      	mov	r9, r3
 80071ce:	f1b8 0f01 	cmp.w	r8, #1
 80071d2:	dc21      	bgt.n	8007218 <_strtod_l+0x528>
 80071d4:	b10b      	cbz	r3, 80071da <_strtod_l+0x4ea>
 80071d6:	4682      	mov	sl, r0
 80071d8:	468b      	mov	fp, r1
 80071da:	4b2f      	ldr	r3, [pc, #188]	; (8007298 <_strtod_l+0x5a8>)
 80071dc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80071e0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80071e4:	4652      	mov	r2, sl
 80071e6:	465b      	mov	r3, fp
 80071e8:	e9d9 0100 	ldrd	r0, r1, [r9]
 80071ec:	f7f9 fa04 	bl	80005f8 <__aeabi_dmul>
 80071f0:	4b2a      	ldr	r3, [pc, #168]	; (800729c <_strtod_l+0x5ac>)
 80071f2:	460a      	mov	r2, r1
 80071f4:	400b      	ands	r3, r1
 80071f6:	492a      	ldr	r1, [pc, #168]	; (80072a0 <_strtod_l+0x5b0>)
 80071f8:	428b      	cmp	r3, r1
 80071fa:	4682      	mov	sl, r0
 80071fc:	d8bc      	bhi.n	8007178 <_strtod_l+0x488>
 80071fe:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007202:	428b      	cmp	r3, r1
 8007204:	bf86      	itte	hi
 8007206:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80072a4 <_strtod_l+0x5b4>
 800720a:	f04f 3aff 	movhi.w	sl, #4294967295
 800720e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8007212:	2300      	movs	r3, #0
 8007214:	9304      	str	r3, [sp, #16]
 8007216:	e084      	b.n	8007322 <_strtod_l+0x632>
 8007218:	f018 0f01 	tst.w	r8, #1
 800721c:	d005      	beq.n	800722a <_strtod_l+0x53a>
 800721e:	9b04      	ldr	r3, [sp, #16]
 8007220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007224:	f7f9 f9e8 	bl	80005f8 <__aeabi_dmul>
 8007228:	2301      	movs	r3, #1
 800722a:	9a04      	ldr	r2, [sp, #16]
 800722c:	3208      	adds	r2, #8
 800722e:	f109 0901 	add.w	r9, r9, #1
 8007232:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007236:	9204      	str	r2, [sp, #16]
 8007238:	e7c9      	b.n	80071ce <_strtod_l+0x4de>
 800723a:	d0ea      	beq.n	8007212 <_strtod_l+0x522>
 800723c:	f1c8 0800 	rsb	r8, r8, #0
 8007240:	f018 020f 	ands.w	r2, r8, #15
 8007244:	d00a      	beq.n	800725c <_strtod_l+0x56c>
 8007246:	4b13      	ldr	r3, [pc, #76]	; (8007294 <_strtod_l+0x5a4>)
 8007248:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800724c:	4650      	mov	r0, sl
 800724e:	4659      	mov	r1, fp
 8007250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007254:	f7f9 fafa 	bl	800084c <__aeabi_ddiv>
 8007258:	4682      	mov	sl, r0
 800725a:	468b      	mov	fp, r1
 800725c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007260:	d0d7      	beq.n	8007212 <_strtod_l+0x522>
 8007262:	f1b8 0f1f 	cmp.w	r8, #31
 8007266:	dd1f      	ble.n	80072a8 <_strtod_l+0x5b8>
 8007268:	2500      	movs	r5, #0
 800726a:	462e      	mov	r6, r5
 800726c:	9507      	str	r5, [sp, #28]
 800726e:	9505      	str	r5, [sp, #20]
 8007270:	2322      	movs	r3, #34	; 0x22
 8007272:	f04f 0a00 	mov.w	sl, #0
 8007276:	f04f 0b00 	mov.w	fp, #0
 800727a:	6023      	str	r3, [r4, #0]
 800727c:	e786      	b.n	800718c <_strtod_l+0x49c>
 800727e:	bf00      	nop
 8007280:	0800b0e9 	.word	0x0800b0e9
 8007284:	0800b12c 	.word	0x0800b12c
 8007288:	0800b0e1 	.word	0x0800b0e1
 800728c:	0800b26c 	.word	0x0800b26c
 8007290:	0800b518 	.word	0x0800b518
 8007294:	0800b3f8 	.word	0x0800b3f8
 8007298:	0800b3d0 	.word	0x0800b3d0
 800729c:	7ff00000 	.word	0x7ff00000
 80072a0:	7ca00000 	.word	0x7ca00000
 80072a4:	7fefffff 	.word	0x7fefffff
 80072a8:	f018 0310 	ands.w	r3, r8, #16
 80072ac:	bf18      	it	ne
 80072ae:	236a      	movne	r3, #106	; 0x6a
 80072b0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8007660 <_strtod_l+0x970>
 80072b4:	9304      	str	r3, [sp, #16]
 80072b6:	4650      	mov	r0, sl
 80072b8:	4659      	mov	r1, fp
 80072ba:	2300      	movs	r3, #0
 80072bc:	f018 0f01 	tst.w	r8, #1
 80072c0:	d004      	beq.n	80072cc <_strtod_l+0x5dc>
 80072c2:	e9d9 2300 	ldrd	r2, r3, [r9]
 80072c6:	f7f9 f997 	bl	80005f8 <__aeabi_dmul>
 80072ca:	2301      	movs	r3, #1
 80072cc:	ea5f 0868 	movs.w	r8, r8, asr #1
 80072d0:	f109 0908 	add.w	r9, r9, #8
 80072d4:	d1f2      	bne.n	80072bc <_strtod_l+0x5cc>
 80072d6:	b10b      	cbz	r3, 80072dc <_strtod_l+0x5ec>
 80072d8:	4682      	mov	sl, r0
 80072da:	468b      	mov	fp, r1
 80072dc:	9b04      	ldr	r3, [sp, #16]
 80072de:	b1c3      	cbz	r3, 8007312 <_strtod_l+0x622>
 80072e0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80072e4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	4659      	mov	r1, fp
 80072ec:	dd11      	ble.n	8007312 <_strtod_l+0x622>
 80072ee:	2b1f      	cmp	r3, #31
 80072f0:	f340 8124 	ble.w	800753c <_strtod_l+0x84c>
 80072f4:	2b34      	cmp	r3, #52	; 0x34
 80072f6:	bfde      	ittt	le
 80072f8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80072fc:	f04f 33ff 	movle.w	r3, #4294967295
 8007300:	fa03 f202 	lslle.w	r2, r3, r2
 8007304:	f04f 0a00 	mov.w	sl, #0
 8007308:	bfcc      	ite	gt
 800730a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800730e:	ea02 0b01 	andle.w	fp, r2, r1
 8007312:	2200      	movs	r2, #0
 8007314:	2300      	movs	r3, #0
 8007316:	4650      	mov	r0, sl
 8007318:	4659      	mov	r1, fp
 800731a:	f7f9 fbd5 	bl	8000ac8 <__aeabi_dcmpeq>
 800731e:	2800      	cmp	r0, #0
 8007320:	d1a2      	bne.n	8007268 <_strtod_l+0x578>
 8007322:	9b07      	ldr	r3, [sp, #28]
 8007324:	9300      	str	r3, [sp, #0]
 8007326:	9908      	ldr	r1, [sp, #32]
 8007328:	462b      	mov	r3, r5
 800732a:	463a      	mov	r2, r7
 800732c:	4620      	mov	r0, r4
 800732e:	f001 fe2d 	bl	8008f8c <__s2b>
 8007332:	9007      	str	r0, [sp, #28]
 8007334:	2800      	cmp	r0, #0
 8007336:	f43f af1f 	beq.w	8007178 <_strtod_l+0x488>
 800733a:	9b05      	ldr	r3, [sp, #20]
 800733c:	1b9e      	subs	r6, r3, r6
 800733e:	9b06      	ldr	r3, [sp, #24]
 8007340:	2b00      	cmp	r3, #0
 8007342:	bfb4      	ite	lt
 8007344:	4633      	movlt	r3, r6
 8007346:	2300      	movge	r3, #0
 8007348:	930c      	str	r3, [sp, #48]	; 0x30
 800734a:	9b06      	ldr	r3, [sp, #24]
 800734c:	2500      	movs	r5, #0
 800734e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007352:	9312      	str	r3, [sp, #72]	; 0x48
 8007354:	462e      	mov	r6, r5
 8007356:	9b07      	ldr	r3, [sp, #28]
 8007358:	4620      	mov	r0, r4
 800735a:	6859      	ldr	r1, [r3, #4]
 800735c:	f001 fd6e 	bl	8008e3c <_Balloc>
 8007360:	9005      	str	r0, [sp, #20]
 8007362:	2800      	cmp	r0, #0
 8007364:	f43f af0c 	beq.w	8007180 <_strtod_l+0x490>
 8007368:	9b07      	ldr	r3, [sp, #28]
 800736a:	691a      	ldr	r2, [r3, #16]
 800736c:	3202      	adds	r2, #2
 800736e:	f103 010c 	add.w	r1, r3, #12
 8007372:	0092      	lsls	r2, r2, #2
 8007374:	300c      	adds	r0, #12
 8007376:	f001 fd53 	bl	8008e20 <memcpy>
 800737a:	ec4b ab10 	vmov	d0, sl, fp
 800737e:	aa1a      	add	r2, sp, #104	; 0x68
 8007380:	a919      	add	r1, sp, #100	; 0x64
 8007382:	4620      	mov	r0, r4
 8007384:	f002 f948 	bl	8009618 <__d2b>
 8007388:	ec4b ab18 	vmov	d8, sl, fp
 800738c:	9018      	str	r0, [sp, #96]	; 0x60
 800738e:	2800      	cmp	r0, #0
 8007390:	f43f aef6 	beq.w	8007180 <_strtod_l+0x490>
 8007394:	2101      	movs	r1, #1
 8007396:	4620      	mov	r0, r4
 8007398:	f001 fe92 	bl	80090c0 <__i2b>
 800739c:	4606      	mov	r6, r0
 800739e:	2800      	cmp	r0, #0
 80073a0:	f43f aeee 	beq.w	8007180 <_strtod_l+0x490>
 80073a4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80073a6:	9904      	ldr	r1, [sp, #16]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	bfab      	itete	ge
 80073ac:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80073ae:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80073b0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80073b2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80073b6:	bfac      	ite	ge
 80073b8:	eb03 0902 	addge.w	r9, r3, r2
 80073bc:	1ad7      	sublt	r7, r2, r3
 80073be:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80073c0:	eba3 0801 	sub.w	r8, r3, r1
 80073c4:	4490      	add	r8, r2
 80073c6:	4ba1      	ldr	r3, [pc, #644]	; (800764c <_strtod_l+0x95c>)
 80073c8:	f108 38ff 	add.w	r8, r8, #4294967295
 80073cc:	4598      	cmp	r8, r3
 80073ce:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80073d2:	f280 80c7 	bge.w	8007564 <_strtod_l+0x874>
 80073d6:	eba3 0308 	sub.w	r3, r3, r8
 80073da:	2b1f      	cmp	r3, #31
 80073dc:	eba2 0203 	sub.w	r2, r2, r3
 80073e0:	f04f 0101 	mov.w	r1, #1
 80073e4:	f300 80b1 	bgt.w	800754a <_strtod_l+0x85a>
 80073e8:	fa01 f303 	lsl.w	r3, r1, r3
 80073ec:	930d      	str	r3, [sp, #52]	; 0x34
 80073ee:	2300      	movs	r3, #0
 80073f0:	9308      	str	r3, [sp, #32]
 80073f2:	eb09 0802 	add.w	r8, r9, r2
 80073f6:	9b04      	ldr	r3, [sp, #16]
 80073f8:	45c1      	cmp	r9, r8
 80073fa:	4417      	add	r7, r2
 80073fc:	441f      	add	r7, r3
 80073fe:	464b      	mov	r3, r9
 8007400:	bfa8      	it	ge
 8007402:	4643      	movge	r3, r8
 8007404:	42bb      	cmp	r3, r7
 8007406:	bfa8      	it	ge
 8007408:	463b      	movge	r3, r7
 800740a:	2b00      	cmp	r3, #0
 800740c:	bfc2      	ittt	gt
 800740e:	eba8 0803 	subgt.w	r8, r8, r3
 8007412:	1aff      	subgt	r7, r7, r3
 8007414:	eba9 0903 	subgt.w	r9, r9, r3
 8007418:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800741a:	2b00      	cmp	r3, #0
 800741c:	dd17      	ble.n	800744e <_strtod_l+0x75e>
 800741e:	4631      	mov	r1, r6
 8007420:	461a      	mov	r2, r3
 8007422:	4620      	mov	r0, r4
 8007424:	f001 ff0c 	bl	8009240 <__pow5mult>
 8007428:	4606      	mov	r6, r0
 800742a:	2800      	cmp	r0, #0
 800742c:	f43f aea8 	beq.w	8007180 <_strtod_l+0x490>
 8007430:	4601      	mov	r1, r0
 8007432:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007434:	4620      	mov	r0, r4
 8007436:	f001 fe59 	bl	80090ec <__multiply>
 800743a:	900b      	str	r0, [sp, #44]	; 0x2c
 800743c:	2800      	cmp	r0, #0
 800743e:	f43f ae9f 	beq.w	8007180 <_strtod_l+0x490>
 8007442:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007444:	4620      	mov	r0, r4
 8007446:	f001 fd39 	bl	8008ebc <_Bfree>
 800744a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800744c:	9318      	str	r3, [sp, #96]	; 0x60
 800744e:	f1b8 0f00 	cmp.w	r8, #0
 8007452:	f300 808c 	bgt.w	800756e <_strtod_l+0x87e>
 8007456:	9b06      	ldr	r3, [sp, #24]
 8007458:	2b00      	cmp	r3, #0
 800745a:	dd08      	ble.n	800746e <_strtod_l+0x77e>
 800745c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800745e:	9905      	ldr	r1, [sp, #20]
 8007460:	4620      	mov	r0, r4
 8007462:	f001 feed 	bl	8009240 <__pow5mult>
 8007466:	9005      	str	r0, [sp, #20]
 8007468:	2800      	cmp	r0, #0
 800746a:	f43f ae89 	beq.w	8007180 <_strtod_l+0x490>
 800746e:	2f00      	cmp	r7, #0
 8007470:	dd08      	ble.n	8007484 <_strtod_l+0x794>
 8007472:	9905      	ldr	r1, [sp, #20]
 8007474:	463a      	mov	r2, r7
 8007476:	4620      	mov	r0, r4
 8007478:	f001 ff3c 	bl	80092f4 <__lshift>
 800747c:	9005      	str	r0, [sp, #20]
 800747e:	2800      	cmp	r0, #0
 8007480:	f43f ae7e 	beq.w	8007180 <_strtod_l+0x490>
 8007484:	f1b9 0f00 	cmp.w	r9, #0
 8007488:	dd08      	ble.n	800749c <_strtod_l+0x7ac>
 800748a:	4631      	mov	r1, r6
 800748c:	464a      	mov	r2, r9
 800748e:	4620      	mov	r0, r4
 8007490:	f001 ff30 	bl	80092f4 <__lshift>
 8007494:	4606      	mov	r6, r0
 8007496:	2800      	cmp	r0, #0
 8007498:	f43f ae72 	beq.w	8007180 <_strtod_l+0x490>
 800749c:	9a05      	ldr	r2, [sp, #20]
 800749e:	9918      	ldr	r1, [sp, #96]	; 0x60
 80074a0:	4620      	mov	r0, r4
 80074a2:	f001 ffb3 	bl	800940c <__mdiff>
 80074a6:	4605      	mov	r5, r0
 80074a8:	2800      	cmp	r0, #0
 80074aa:	f43f ae69 	beq.w	8007180 <_strtod_l+0x490>
 80074ae:	68c3      	ldr	r3, [r0, #12]
 80074b0:	930b      	str	r3, [sp, #44]	; 0x2c
 80074b2:	2300      	movs	r3, #0
 80074b4:	60c3      	str	r3, [r0, #12]
 80074b6:	4631      	mov	r1, r6
 80074b8:	f001 ff8c 	bl	80093d4 <__mcmp>
 80074bc:	2800      	cmp	r0, #0
 80074be:	da60      	bge.n	8007582 <_strtod_l+0x892>
 80074c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80074c2:	ea53 030a 	orrs.w	r3, r3, sl
 80074c6:	f040 8082 	bne.w	80075ce <_strtod_l+0x8de>
 80074ca:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d17d      	bne.n	80075ce <_strtod_l+0x8de>
 80074d2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80074d6:	0d1b      	lsrs	r3, r3, #20
 80074d8:	051b      	lsls	r3, r3, #20
 80074da:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80074de:	d976      	bls.n	80075ce <_strtod_l+0x8de>
 80074e0:	696b      	ldr	r3, [r5, #20]
 80074e2:	b913      	cbnz	r3, 80074ea <_strtod_l+0x7fa>
 80074e4:	692b      	ldr	r3, [r5, #16]
 80074e6:	2b01      	cmp	r3, #1
 80074e8:	dd71      	ble.n	80075ce <_strtod_l+0x8de>
 80074ea:	4629      	mov	r1, r5
 80074ec:	2201      	movs	r2, #1
 80074ee:	4620      	mov	r0, r4
 80074f0:	f001 ff00 	bl	80092f4 <__lshift>
 80074f4:	4631      	mov	r1, r6
 80074f6:	4605      	mov	r5, r0
 80074f8:	f001 ff6c 	bl	80093d4 <__mcmp>
 80074fc:	2800      	cmp	r0, #0
 80074fe:	dd66      	ble.n	80075ce <_strtod_l+0x8de>
 8007500:	9904      	ldr	r1, [sp, #16]
 8007502:	4a53      	ldr	r2, [pc, #332]	; (8007650 <_strtod_l+0x960>)
 8007504:	465b      	mov	r3, fp
 8007506:	2900      	cmp	r1, #0
 8007508:	f000 8081 	beq.w	800760e <_strtod_l+0x91e>
 800750c:	ea02 010b 	and.w	r1, r2, fp
 8007510:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007514:	dc7b      	bgt.n	800760e <_strtod_l+0x91e>
 8007516:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800751a:	f77f aea9 	ble.w	8007270 <_strtod_l+0x580>
 800751e:	4b4d      	ldr	r3, [pc, #308]	; (8007654 <_strtod_l+0x964>)
 8007520:	4650      	mov	r0, sl
 8007522:	4659      	mov	r1, fp
 8007524:	2200      	movs	r2, #0
 8007526:	f7f9 f867 	bl	80005f8 <__aeabi_dmul>
 800752a:	460b      	mov	r3, r1
 800752c:	4303      	orrs	r3, r0
 800752e:	bf08      	it	eq
 8007530:	2322      	moveq	r3, #34	; 0x22
 8007532:	4682      	mov	sl, r0
 8007534:	468b      	mov	fp, r1
 8007536:	bf08      	it	eq
 8007538:	6023      	streq	r3, [r4, #0]
 800753a:	e62b      	b.n	8007194 <_strtod_l+0x4a4>
 800753c:	f04f 32ff 	mov.w	r2, #4294967295
 8007540:	fa02 f303 	lsl.w	r3, r2, r3
 8007544:	ea03 0a0a 	and.w	sl, r3, sl
 8007548:	e6e3      	b.n	8007312 <_strtod_l+0x622>
 800754a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800754e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8007552:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8007556:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800755a:	fa01 f308 	lsl.w	r3, r1, r8
 800755e:	9308      	str	r3, [sp, #32]
 8007560:	910d      	str	r1, [sp, #52]	; 0x34
 8007562:	e746      	b.n	80073f2 <_strtod_l+0x702>
 8007564:	2300      	movs	r3, #0
 8007566:	9308      	str	r3, [sp, #32]
 8007568:	2301      	movs	r3, #1
 800756a:	930d      	str	r3, [sp, #52]	; 0x34
 800756c:	e741      	b.n	80073f2 <_strtod_l+0x702>
 800756e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007570:	4642      	mov	r2, r8
 8007572:	4620      	mov	r0, r4
 8007574:	f001 febe 	bl	80092f4 <__lshift>
 8007578:	9018      	str	r0, [sp, #96]	; 0x60
 800757a:	2800      	cmp	r0, #0
 800757c:	f47f af6b 	bne.w	8007456 <_strtod_l+0x766>
 8007580:	e5fe      	b.n	8007180 <_strtod_l+0x490>
 8007582:	465f      	mov	r7, fp
 8007584:	d16e      	bne.n	8007664 <_strtod_l+0x974>
 8007586:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007588:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800758c:	b342      	cbz	r2, 80075e0 <_strtod_l+0x8f0>
 800758e:	4a32      	ldr	r2, [pc, #200]	; (8007658 <_strtod_l+0x968>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d128      	bne.n	80075e6 <_strtod_l+0x8f6>
 8007594:	9b04      	ldr	r3, [sp, #16]
 8007596:	4651      	mov	r1, sl
 8007598:	b1eb      	cbz	r3, 80075d6 <_strtod_l+0x8e6>
 800759a:	4b2d      	ldr	r3, [pc, #180]	; (8007650 <_strtod_l+0x960>)
 800759c:	403b      	ands	r3, r7
 800759e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80075a2:	f04f 32ff 	mov.w	r2, #4294967295
 80075a6:	d819      	bhi.n	80075dc <_strtod_l+0x8ec>
 80075a8:	0d1b      	lsrs	r3, r3, #20
 80075aa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80075ae:	fa02 f303 	lsl.w	r3, r2, r3
 80075b2:	4299      	cmp	r1, r3
 80075b4:	d117      	bne.n	80075e6 <_strtod_l+0x8f6>
 80075b6:	4b29      	ldr	r3, [pc, #164]	; (800765c <_strtod_l+0x96c>)
 80075b8:	429f      	cmp	r7, r3
 80075ba:	d102      	bne.n	80075c2 <_strtod_l+0x8d2>
 80075bc:	3101      	adds	r1, #1
 80075be:	f43f addf 	beq.w	8007180 <_strtod_l+0x490>
 80075c2:	4b23      	ldr	r3, [pc, #140]	; (8007650 <_strtod_l+0x960>)
 80075c4:	403b      	ands	r3, r7
 80075c6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80075ca:	f04f 0a00 	mov.w	sl, #0
 80075ce:	9b04      	ldr	r3, [sp, #16]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d1a4      	bne.n	800751e <_strtod_l+0x82e>
 80075d4:	e5de      	b.n	8007194 <_strtod_l+0x4a4>
 80075d6:	f04f 33ff 	mov.w	r3, #4294967295
 80075da:	e7ea      	b.n	80075b2 <_strtod_l+0x8c2>
 80075dc:	4613      	mov	r3, r2
 80075de:	e7e8      	b.n	80075b2 <_strtod_l+0x8c2>
 80075e0:	ea53 030a 	orrs.w	r3, r3, sl
 80075e4:	d08c      	beq.n	8007500 <_strtod_l+0x810>
 80075e6:	9b08      	ldr	r3, [sp, #32]
 80075e8:	b1db      	cbz	r3, 8007622 <_strtod_l+0x932>
 80075ea:	423b      	tst	r3, r7
 80075ec:	d0ef      	beq.n	80075ce <_strtod_l+0x8de>
 80075ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80075f0:	9a04      	ldr	r2, [sp, #16]
 80075f2:	4650      	mov	r0, sl
 80075f4:	4659      	mov	r1, fp
 80075f6:	b1c3      	cbz	r3, 800762a <_strtod_l+0x93a>
 80075f8:	f7ff fb5c 	bl	8006cb4 <sulp>
 80075fc:	4602      	mov	r2, r0
 80075fe:	460b      	mov	r3, r1
 8007600:	ec51 0b18 	vmov	r0, r1, d8
 8007604:	f7f8 fe42 	bl	800028c <__adddf3>
 8007608:	4682      	mov	sl, r0
 800760a:	468b      	mov	fp, r1
 800760c:	e7df      	b.n	80075ce <_strtod_l+0x8de>
 800760e:	4013      	ands	r3, r2
 8007610:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007614:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007618:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800761c:	f04f 3aff 	mov.w	sl, #4294967295
 8007620:	e7d5      	b.n	80075ce <_strtod_l+0x8de>
 8007622:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007624:	ea13 0f0a 	tst.w	r3, sl
 8007628:	e7e0      	b.n	80075ec <_strtod_l+0x8fc>
 800762a:	f7ff fb43 	bl	8006cb4 <sulp>
 800762e:	4602      	mov	r2, r0
 8007630:	460b      	mov	r3, r1
 8007632:	ec51 0b18 	vmov	r0, r1, d8
 8007636:	f7f8 fe27 	bl	8000288 <__aeabi_dsub>
 800763a:	2200      	movs	r2, #0
 800763c:	2300      	movs	r3, #0
 800763e:	4682      	mov	sl, r0
 8007640:	468b      	mov	fp, r1
 8007642:	f7f9 fa41 	bl	8000ac8 <__aeabi_dcmpeq>
 8007646:	2800      	cmp	r0, #0
 8007648:	d0c1      	beq.n	80075ce <_strtod_l+0x8de>
 800764a:	e611      	b.n	8007270 <_strtod_l+0x580>
 800764c:	fffffc02 	.word	0xfffffc02
 8007650:	7ff00000 	.word	0x7ff00000
 8007654:	39500000 	.word	0x39500000
 8007658:	000fffff 	.word	0x000fffff
 800765c:	7fefffff 	.word	0x7fefffff
 8007660:	0800b140 	.word	0x0800b140
 8007664:	4631      	mov	r1, r6
 8007666:	4628      	mov	r0, r5
 8007668:	f002 f832 	bl	80096d0 <__ratio>
 800766c:	ec59 8b10 	vmov	r8, r9, d0
 8007670:	ee10 0a10 	vmov	r0, s0
 8007674:	2200      	movs	r2, #0
 8007676:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800767a:	4649      	mov	r1, r9
 800767c:	f7f9 fa38 	bl	8000af0 <__aeabi_dcmple>
 8007680:	2800      	cmp	r0, #0
 8007682:	d07a      	beq.n	800777a <_strtod_l+0xa8a>
 8007684:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007686:	2b00      	cmp	r3, #0
 8007688:	d04a      	beq.n	8007720 <_strtod_l+0xa30>
 800768a:	4b95      	ldr	r3, [pc, #596]	; (80078e0 <_strtod_l+0xbf0>)
 800768c:	2200      	movs	r2, #0
 800768e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007692:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80078e0 <_strtod_l+0xbf0>
 8007696:	f04f 0800 	mov.w	r8, #0
 800769a:	4b92      	ldr	r3, [pc, #584]	; (80078e4 <_strtod_l+0xbf4>)
 800769c:	403b      	ands	r3, r7
 800769e:	930d      	str	r3, [sp, #52]	; 0x34
 80076a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80076a2:	4b91      	ldr	r3, [pc, #580]	; (80078e8 <_strtod_l+0xbf8>)
 80076a4:	429a      	cmp	r2, r3
 80076a6:	f040 80b0 	bne.w	800780a <_strtod_l+0xb1a>
 80076aa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80076ae:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80076b2:	ec4b ab10 	vmov	d0, sl, fp
 80076b6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80076ba:	f001 ff31 	bl	8009520 <__ulp>
 80076be:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80076c2:	ec53 2b10 	vmov	r2, r3, d0
 80076c6:	f7f8 ff97 	bl	80005f8 <__aeabi_dmul>
 80076ca:	4652      	mov	r2, sl
 80076cc:	465b      	mov	r3, fp
 80076ce:	f7f8 fddd 	bl	800028c <__adddf3>
 80076d2:	460b      	mov	r3, r1
 80076d4:	4983      	ldr	r1, [pc, #524]	; (80078e4 <_strtod_l+0xbf4>)
 80076d6:	4a85      	ldr	r2, [pc, #532]	; (80078ec <_strtod_l+0xbfc>)
 80076d8:	4019      	ands	r1, r3
 80076da:	4291      	cmp	r1, r2
 80076dc:	4682      	mov	sl, r0
 80076de:	d960      	bls.n	80077a2 <_strtod_l+0xab2>
 80076e0:	ee18 3a90 	vmov	r3, s17
 80076e4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d104      	bne.n	80076f6 <_strtod_l+0xa06>
 80076ec:	ee18 3a10 	vmov	r3, s16
 80076f0:	3301      	adds	r3, #1
 80076f2:	f43f ad45 	beq.w	8007180 <_strtod_l+0x490>
 80076f6:	f8df b200 	ldr.w	fp, [pc, #512]	; 80078f8 <_strtod_l+0xc08>
 80076fa:	f04f 3aff 	mov.w	sl, #4294967295
 80076fe:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007700:	4620      	mov	r0, r4
 8007702:	f001 fbdb 	bl	8008ebc <_Bfree>
 8007706:	9905      	ldr	r1, [sp, #20]
 8007708:	4620      	mov	r0, r4
 800770a:	f001 fbd7 	bl	8008ebc <_Bfree>
 800770e:	4631      	mov	r1, r6
 8007710:	4620      	mov	r0, r4
 8007712:	f001 fbd3 	bl	8008ebc <_Bfree>
 8007716:	4629      	mov	r1, r5
 8007718:	4620      	mov	r0, r4
 800771a:	f001 fbcf 	bl	8008ebc <_Bfree>
 800771e:	e61a      	b.n	8007356 <_strtod_l+0x666>
 8007720:	f1ba 0f00 	cmp.w	sl, #0
 8007724:	d11b      	bne.n	800775e <_strtod_l+0xa6e>
 8007726:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800772a:	b9f3      	cbnz	r3, 800776a <_strtod_l+0xa7a>
 800772c:	4b6c      	ldr	r3, [pc, #432]	; (80078e0 <_strtod_l+0xbf0>)
 800772e:	2200      	movs	r2, #0
 8007730:	4640      	mov	r0, r8
 8007732:	4649      	mov	r1, r9
 8007734:	f7f9 f9d2 	bl	8000adc <__aeabi_dcmplt>
 8007738:	b9d0      	cbnz	r0, 8007770 <_strtod_l+0xa80>
 800773a:	4640      	mov	r0, r8
 800773c:	4649      	mov	r1, r9
 800773e:	4b6c      	ldr	r3, [pc, #432]	; (80078f0 <_strtod_l+0xc00>)
 8007740:	2200      	movs	r2, #0
 8007742:	f7f8 ff59 	bl	80005f8 <__aeabi_dmul>
 8007746:	4680      	mov	r8, r0
 8007748:	4689      	mov	r9, r1
 800774a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800774e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8007752:	9315      	str	r3, [sp, #84]	; 0x54
 8007754:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007758:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800775c:	e79d      	b.n	800769a <_strtod_l+0x9aa>
 800775e:	f1ba 0f01 	cmp.w	sl, #1
 8007762:	d102      	bne.n	800776a <_strtod_l+0xa7a>
 8007764:	2f00      	cmp	r7, #0
 8007766:	f43f ad83 	beq.w	8007270 <_strtod_l+0x580>
 800776a:	4b62      	ldr	r3, [pc, #392]	; (80078f4 <_strtod_l+0xc04>)
 800776c:	2200      	movs	r2, #0
 800776e:	e78e      	b.n	800768e <_strtod_l+0x99e>
 8007770:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80078f0 <_strtod_l+0xc00>
 8007774:	f04f 0800 	mov.w	r8, #0
 8007778:	e7e7      	b.n	800774a <_strtod_l+0xa5a>
 800777a:	4b5d      	ldr	r3, [pc, #372]	; (80078f0 <_strtod_l+0xc00>)
 800777c:	4640      	mov	r0, r8
 800777e:	4649      	mov	r1, r9
 8007780:	2200      	movs	r2, #0
 8007782:	f7f8 ff39 	bl	80005f8 <__aeabi_dmul>
 8007786:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007788:	4680      	mov	r8, r0
 800778a:	4689      	mov	r9, r1
 800778c:	b933      	cbnz	r3, 800779c <_strtod_l+0xaac>
 800778e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007792:	900e      	str	r0, [sp, #56]	; 0x38
 8007794:	930f      	str	r3, [sp, #60]	; 0x3c
 8007796:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800779a:	e7dd      	b.n	8007758 <_strtod_l+0xa68>
 800779c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80077a0:	e7f9      	b.n	8007796 <_strtod_l+0xaa6>
 80077a2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80077a6:	9b04      	ldr	r3, [sp, #16]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d1a8      	bne.n	80076fe <_strtod_l+0xa0e>
 80077ac:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80077b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80077b2:	0d1b      	lsrs	r3, r3, #20
 80077b4:	051b      	lsls	r3, r3, #20
 80077b6:	429a      	cmp	r2, r3
 80077b8:	d1a1      	bne.n	80076fe <_strtod_l+0xa0e>
 80077ba:	4640      	mov	r0, r8
 80077bc:	4649      	mov	r1, r9
 80077be:	f7f9 fa63 	bl	8000c88 <__aeabi_d2lz>
 80077c2:	f7f8 feeb 	bl	800059c <__aeabi_l2d>
 80077c6:	4602      	mov	r2, r0
 80077c8:	460b      	mov	r3, r1
 80077ca:	4640      	mov	r0, r8
 80077cc:	4649      	mov	r1, r9
 80077ce:	f7f8 fd5b 	bl	8000288 <__aeabi_dsub>
 80077d2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80077d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80077d8:	ea43 030a 	orr.w	r3, r3, sl
 80077dc:	4313      	orrs	r3, r2
 80077de:	4680      	mov	r8, r0
 80077e0:	4689      	mov	r9, r1
 80077e2:	d055      	beq.n	8007890 <_strtod_l+0xba0>
 80077e4:	a336      	add	r3, pc, #216	; (adr r3, 80078c0 <_strtod_l+0xbd0>)
 80077e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ea:	f7f9 f977 	bl	8000adc <__aeabi_dcmplt>
 80077ee:	2800      	cmp	r0, #0
 80077f0:	f47f acd0 	bne.w	8007194 <_strtod_l+0x4a4>
 80077f4:	a334      	add	r3, pc, #208	; (adr r3, 80078c8 <_strtod_l+0xbd8>)
 80077f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077fa:	4640      	mov	r0, r8
 80077fc:	4649      	mov	r1, r9
 80077fe:	f7f9 f98b 	bl	8000b18 <__aeabi_dcmpgt>
 8007802:	2800      	cmp	r0, #0
 8007804:	f43f af7b 	beq.w	80076fe <_strtod_l+0xa0e>
 8007808:	e4c4      	b.n	8007194 <_strtod_l+0x4a4>
 800780a:	9b04      	ldr	r3, [sp, #16]
 800780c:	b333      	cbz	r3, 800785c <_strtod_l+0xb6c>
 800780e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007810:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007814:	d822      	bhi.n	800785c <_strtod_l+0xb6c>
 8007816:	a32e      	add	r3, pc, #184	; (adr r3, 80078d0 <_strtod_l+0xbe0>)
 8007818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800781c:	4640      	mov	r0, r8
 800781e:	4649      	mov	r1, r9
 8007820:	f7f9 f966 	bl	8000af0 <__aeabi_dcmple>
 8007824:	b1a0      	cbz	r0, 8007850 <_strtod_l+0xb60>
 8007826:	4649      	mov	r1, r9
 8007828:	4640      	mov	r0, r8
 800782a:	f7f9 f9bd 	bl	8000ba8 <__aeabi_d2uiz>
 800782e:	2801      	cmp	r0, #1
 8007830:	bf38      	it	cc
 8007832:	2001      	movcc	r0, #1
 8007834:	f7f8 fe66 	bl	8000504 <__aeabi_ui2d>
 8007838:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800783a:	4680      	mov	r8, r0
 800783c:	4689      	mov	r9, r1
 800783e:	bb23      	cbnz	r3, 800788a <_strtod_l+0xb9a>
 8007840:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007844:	9010      	str	r0, [sp, #64]	; 0x40
 8007846:	9311      	str	r3, [sp, #68]	; 0x44
 8007848:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800784c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007850:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007852:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007854:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007858:	1a9b      	subs	r3, r3, r2
 800785a:	9309      	str	r3, [sp, #36]	; 0x24
 800785c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007860:	eeb0 0a48 	vmov.f32	s0, s16
 8007864:	eef0 0a68 	vmov.f32	s1, s17
 8007868:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800786c:	f001 fe58 	bl	8009520 <__ulp>
 8007870:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007874:	ec53 2b10 	vmov	r2, r3, d0
 8007878:	f7f8 febe 	bl	80005f8 <__aeabi_dmul>
 800787c:	ec53 2b18 	vmov	r2, r3, d8
 8007880:	f7f8 fd04 	bl	800028c <__adddf3>
 8007884:	4682      	mov	sl, r0
 8007886:	468b      	mov	fp, r1
 8007888:	e78d      	b.n	80077a6 <_strtod_l+0xab6>
 800788a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800788e:	e7db      	b.n	8007848 <_strtod_l+0xb58>
 8007890:	a311      	add	r3, pc, #68	; (adr r3, 80078d8 <_strtod_l+0xbe8>)
 8007892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007896:	f7f9 f921 	bl	8000adc <__aeabi_dcmplt>
 800789a:	e7b2      	b.n	8007802 <_strtod_l+0xb12>
 800789c:	2300      	movs	r3, #0
 800789e:	930a      	str	r3, [sp, #40]	; 0x28
 80078a0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80078a2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80078a4:	6013      	str	r3, [r2, #0]
 80078a6:	f7ff ba6b 	b.w	8006d80 <_strtod_l+0x90>
 80078aa:	2a65      	cmp	r2, #101	; 0x65
 80078ac:	f43f ab5f 	beq.w	8006f6e <_strtod_l+0x27e>
 80078b0:	2a45      	cmp	r2, #69	; 0x45
 80078b2:	f43f ab5c 	beq.w	8006f6e <_strtod_l+0x27e>
 80078b6:	2301      	movs	r3, #1
 80078b8:	f7ff bb94 	b.w	8006fe4 <_strtod_l+0x2f4>
 80078bc:	f3af 8000 	nop.w
 80078c0:	94a03595 	.word	0x94a03595
 80078c4:	3fdfffff 	.word	0x3fdfffff
 80078c8:	35afe535 	.word	0x35afe535
 80078cc:	3fe00000 	.word	0x3fe00000
 80078d0:	ffc00000 	.word	0xffc00000
 80078d4:	41dfffff 	.word	0x41dfffff
 80078d8:	94a03595 	.word	0x94a03595
 80078dc:	3fcfffff 	.word	0x3fcfffff
 80078e0:	3ff00000 	.word	0x3ff00000
 80078e4:	7ff00000 	.word	0x7ff00000
 80078e8:	7fe00000 	.word	0x7fe00000
 80078ec:	7c9fffff 	.word	0x7c9fffff
 80078f0:	3fe00000 	.word	0x3fe00000
 80078f4:	bff00000 	.word	0xbff00000
 80078f8:	7fefffff 	.word	0x7fefffff

080078fc <_strtod_r>:
 80078fc:	4b01      	ldr	r3, [pc, #4]	; (8007904 <_strtod_r+0x8>)
 80078fe:	f7ff b9f7 	b.w	8006cf0 <_strtod_l>
 8007902:	bf00      	nop
 8007904:	20000074 	.word	0x20000074

08007908 <_strtol_l.constprop.0>:
 8007908:	2b01      	cmp	r3, #1
 800790a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800790e:	d001      	beq.n	8007914 <_strtol_l.constprop.0+0xc>
 8007910:	2b24      	cmp	r3, #36	; 0x24
 8007912:	d906      	bls.n	8007922 <_strtol_l.constprop.0+0x1a>
 8007914:	f7fe fafc 	bl	8005f10 <__errno>
 8007918:	2316      	movs	r3, #22
 800791a:	6003      	str	r3, [r0, #0]
 800791c:	2000      	movs	r0, #0
 800791e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007922:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007a08 <_strtol_l.constprop.0+0x100>
 8007926:	460d      	mov	r5, r1
 8007928:	462e      	mov	r6, r5
 800792a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800792e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8007932:	f017 0708 	ands.w	r7, r7, #8
 8007936:	d1f7      	bne.n	8007928 <_strtol_l.constprop.0+0x20>
 8007938:	2c2d      	cmp	r4, #45	; 0x2d
 800793a:	d132      	bne.n	80079a2 <_strtol_l.constprop.0+0x9a>
 800793c:	782c      	ldrb	r4, [r5, #0]
 800793e:	2701      	movs	r7, #1
 8007940:	1cb5      	adds	r5, r6, #2
 8007942:	2b00      	cmp	r3, #0
 8007944:	d05b      	beq.n	80079fe <_strtol_l.constprop.0+0xf6>
 8007946:	2b10      	cmp	r3, #16
 8007948:	d109      	bne.n	800795e <_strtol_l.constprop.0+0x56>
 800794a:	2c30      	cmp	r4, #48	; 0x30
 800794c:	d107      	bne.n	800795e <_strtol_l.constprop.0+0x56>
 800794e:	782c      	ldrb	r4, [r5, #0]
 8007950:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007954:	2c58      	cmp	r4, #88	; 0x58
 8007956:	d14d      	bne.n	80079f4 <_strtol_l.constprop.0+0xec>
 8007958:	786c      	ldrb	r4, [r5, #1]
 800795a:	2310      	movs	r3, #16
 800795c:	3502      	adds	r5, #2
 800795e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007962:	f108 38ff 	add.w	r8, r8, #4294967295
 8007966:	f04f 0c00 	mov.w	ip, #0
 800796a:	fbb8 f9f3 	udiv	r9, r8, r3
 800796e:	4666      	mov	r6, ip
 8007970:	fb03 8a19 	mls	sl, r3, r9, r8
 8007974:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8007978:	f1be 0f09 	cmp.w	lr, #9
 800797c:	d816      	bhi.n	80079ac <_strtol_l.constprop.0+0xa4>
 800797e:	4674      	mov	r4, lr
 8007980:	42a3      	cmp	r3, r4
 8007982:	dd24      	ble.n	80079ce <_strtol_l.constprop.0+0xc6>
 8007984:	f1bc 0f00 	cmp.w	ip, #0
 8007988:	db1e      	blt.n	80079c8 <_strtol_l.constprop.0+0xc0>
 800798a:	45b1      	cmp	r9, r6
 800798c:	d31c      	bcc.n	80079c8 <_strtol_l.constprop.0+0xc0>
 800798e:	d101      	bne.n	8007994 <_strtol_l.constprop.0+0x8c>
 8007990:	45a2      	cmp	sl, r4
 8007992:	db19      	blt.n	80079c8 <_strtol_l.constprop.0+0xc0>
 8007994:	fb06 4603 	mla	r6, r6, r3, r4
 8007998:	f04f 0c01 	mov.w	ip, #1
 800799c:	f815 4b01 	ldrb.w	r4, [r5], #1
 80079a0:	e7e8      	b.n	8007974 <_strtol_l.constprop.0+0x6c>
 80079a2:	2c2b      	cmp	r4, #43	; 0x2b
 80079a4:	bf04      	itt	eq
 80079a6:	782c      	ldrbeq	r4, [r5, #0]
 80079a8:	1cb5      	addeq	r5, r6, #2
 80079aa:	e7ca      	b.n	8007942 <_strtol_l.constprop.0+0x3a>
 80079ac:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80079b0:	f1be 0f19 	cmp.w	lr, #25
 80079b4:	d801      	bhi.n	80079ba <_strtol_l.constprop.0+0xb2>
 80079b6:	3c37      	subs	r4, #55	; 0x37
 80079b8:	e7e2      	b.n	8007980 <_strtol_l.constprop.0+0x78>
 80079ba:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80079be:	f1be 0f19 	cmp.w	lr, #25
 80079c2:	d804      	bhi.n	80079ce <_strtol_l.constprop.0+0xc6>
 80079c4:	3c57      	subs	r4, #87	; 0x57
 80079c6:	e7db      	b.n	8007980 <_strtol_l.constprop.0+0x78>
 80079c8:	f04f 3cff 	mov.w	ip, #4294967295
 80079cc:	e7e6      	b.n	800799c <_strtol_l.constprop.0+0x94>
 80079ce:	f1bc 0f00 	cmp.w	ip, #0
 80079d2:	da05      	bge.n	80079e0 <_strtol_l.constprop.0+0xd8>
 80079d4:	2322      	movs	r3, #34	; 0x22
 80079d6:	6003      	str	r3, [r0, #0]
 80079d8:	4646      	mov	r6, r8
 80079da:	b942      	cbnz	r2, 80079ee <_strtol_l.constprop.0+0xe6>
 80079dc:	4630      	mov	r0, r6
 80079de:	e79e      	b.n	800791e <_strtol_l.constprop.0+0x16>
 80079e0:	b107      	cbz	r7, 80079e4 <_strtol_l.constprop.0+0xdc>
 80079e2:	4276      	negs	r6, r6
 80079e4:	2a00      	cmp	r2, #0
 80079e6:	d0f9      	beq.n	80079dc <_strtol_l.constprop.0+0xd4>
 80079e8:	f1bc 0f00 	cmp.w	ip, #0
 80079ec:	d000      	beq.n	80079f0 <_strtol_l.constprop.0+0xe8>
 80079ee:	1e69      	subs	r1, r5, #1
 80079f0:	6011      	str	r1, [r2, #0]
 80079f2:	e7f3      	b.n	80079dc <_strtol_l.constprop.0+0xd4>
 80079f4:	2430      	movs	r4, #48	; 0x30
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d1b1      	bne.n	800795e <_strtol_l.constprop.0+0x56>
 80079fa:	2308      	movs	r3, #8
 80079fc:	e7af      	b.n	800795e <_strtol_l.constprop.0+0x56>
 80079fe:	2c30      	cmp	r4, #48	; 0x30
 8007a00:	d0a5      	beq.n	800794e <_strtol_l.constprop.0+0x46>
 8007a02:	230a      	movs	r3, #10
 8007a04:	e7ab      	b.n	800795e <_strtol_l.constprop.0+0x56>
 8007a06:	bf00      	nop
 8007a08:	0800b169 	.word	0x0800b169

08007a0c <_strtol_r>:
 8007a0c:	f7ff bf7c 	b.w	8007908 <_strtol_l.constprop.0>

08007a10 <quorem>:
 8007a10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a14:	6903      	ldr	r3, [r0, #16]
 8007a16:	690c      	ldr	r4, [r1, #16]
 8007a18:	42a3      	cmp	r3, r4
 8007a1a:	4607      	mov	r7, r0
 8007a1c:	f2c0 8081 	blt.w	8007b22 <quorem+0x112>
 8007a20:	3c01      	subs	r4, #1
 8007a22:	f101 0814 	add.w	r8, r1, #20
 8007a26:	f100 0514 	add.w	r5, r0, #20
 8007a2a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007a2e:	9301      	str	r3, [sp, #4]
 8007a30:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007a34:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007a38:	3301      	adds	r3, #1
 8007a3a:	429a      	cmp	r2, r3
 8007a3c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007a40:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007a44:	fbb2 f6f3 	udiv	r6, r2, r3
 8007a48:	d331      	bcc.n	8007aae <quorem+0x9e>
 8007a4a:	f04f 0e00 	mov.w	lr, #0
 8007a4e:	4640      	mov	r0, r8
 8007a50:	46ac      	mov	ip, r5
 8007a52:	46f2      	mov	sl, lr
 8007a54:	f850 2b04 	ldr.w	r2, [r0], #4
 8007a58:	b293      	uxth	r3, r2
 8007a5a:	fb06 e303 	mla	r3, r6, r3, lr
 8007a5e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007a62:	b29b      	uxth	r3, r3
 8007a64:	ebaa 0303 	sub.w	r3, sl, r3
 8007a68:	f8dc a000 	ldr.w	sl, [ip]
 8007a6c:	0c12      	lsrs	r2, r2, #16
 8007a6e:	fa13 f38a 	uxtah	r3, r3, sl
 8007a72:	fb06 e202 	mla	r2, r6, r2, lr
 8007a76:	9300      	str	r3, [sp, #0]
 8007a78:	9b00      	ldr	r3, [sp, #0]
 8007a7a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007a7e:	b292      	uxth	r2, r2
 8007a80:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007a84:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007a88:	f8bd 3000 	ldrh.w	r3, [sp]
 8007a8c:	4581      	cmp	r9, r0
 8007a8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a92:	f84c 3b04 	str.w	r3, [ip], #4
 8007a96:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007a9a:	d2db      	bcs.n	8007a54 <quorem+0x44>
 8007a9c:	f855 300b 	ldr.w	r3, [r5, fp]
 8007aa0:	b92b      	cbnz	r3, 8007aae <quorem+0x9e>
 8007aa2:	9b01      	ldr	r3, [sp, #4]
 8007aa4:	3b04      	subs	r3, #4
 8007aa6:	429d      	cmp	r5, r3
 8007aa8:	461a      	mov	r2, r3
 8007aaa:	d32e      	bcc.n	8007b0a <quorem+0xfa>
 8007aac:	613c      	str	r4, [r7, #16]
 8007aae:	4638      	mov	r0, r7
 8007ab0:	f001 fc90 	bl	80093d4 <__mcmp>
 8007ab4:	2800      	cmp	r0, #0
 8007ab6:	db24      	blt.n	8007b02 <quorem+0xf2>
 8007ab8:	3601      	adds	r6, #1
 8007aba:	4628      	mov	r0, r5
 8007abc:	f04f 0c00 	mov.w	ip, #0
 8007ac0:	f858 2b04 	ldr.w	r2, [r8], #4
 8007ac4:	f8d0 e000 	ldr.w	lr, [r0]
 8007ac8:	b293      	uxth	r3, r2
 8007aca:	ebac 0303 	sub.w	r3, ip, r3
 8007ace:	0c12      	lsrs	r2, r2, #16
 8007ad0:	fa13 f38e 	uxtah	r3, r3, lr
 8007ad4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007ad8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007adc:	b29b      	uxth	r3, r3
 8007ade:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007ae2:	45c1      	cmp	r9, r8
 8007ae4:	f840 3b04 	str.w	r3, [r0], #4
 8007ae8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007aec:	d2e8      	bcs.n	8007ac0 <quorem+0xb0>
 8007aee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007af2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007af6:	b922      	cbnz	r2, 8007b02 <quorem+0xf2>
 8007af8:	3b04      	subs	r3, #4
 8007afa:	429d      	cmp	r5, r3
 8007afc:	461a      	mov	r2, r3
 8007afe:	d30a      	bcc.n	8007b16 <quorem+0x106>
 8007b00:	613c      	str	r4, [r7, #16]
 8007b02:	4630      	mov	r0, r6
 8007b04:	b003      	add	sp, #12
 8007b06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b0a:	6812      	ldr	r2, [r2, #0]
 8007b0c:	3b04      	subs	r3, #4
 8007b0e:	2a00      	cmp	r2, #0
 8007b10:	d1cc      	bne.n	8007aac <quorem+0x9c>
 8007b12:	3c01      	subs	r4, #1
 8007b14:	e7c7      	b.n	8007aa6 <quorem+0x96>
 8007b16:	6812      	ldr	r2, [r2, #0]
 8007b18:	3b04      	subs	r3, #4
 8007b1a:	2a00      	cmp	r2, #0
 8007b1c:	d1f0      	bne.n	8007b00 <quorem+0xf0>
 8007b1e:	3c01      	subs	r4, #1
 8007b20:	e7eb      	b.n	8007afa <quorem+0xea>
 8007b22:	2000      	movs	r0, #0
 8007b24:	e7ee      	b.n	8007b04 <quorem+0xf4>
	...

08007b28 <_dtoa_r>:
 8007b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b2c:	ed2d 8b04 	vpush	{d8-d9}
 8007b30:	ec57 6b10 	vmov	r6, r7, d0
 8007b34:	b093      	sub	sp, #76	; 0x4c
 8007b36:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007b38:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007b3c:	9106      	str	r1, [sp, #24]
 8007b3e:	ee10 aa10 	vmov	sl, s0
 8007b42:	4604      	mov	r4, r0
 8007b44:	9209      	str	r2, [sp, #36]	; 0x24
 8007b46:	930c      	str	r3, [sp, #48]	; 0x30
 8007b48:	46bb      	mov	fp, r7
 8007b4a:	b975      	cbnz	r5, 8007b6a <_dtoa_r+0x42>
 8007b4c:	2010      	movs	r0, #16
 8007b4e:	f001 f94d 	bl	8008dec <malloc>
 8007b52:	4602      	mov	r2, r0
 8007b54:	6260      	str	r0, [r4, #36]	; 0x24
 8007b56:	b920      	cbnz	r0, 8007b62 <_dtoa_r+0x3a>
 8007b58:	4ba7      	ldr	r3, [pc, #668]	; (8007df8 <_dtoa_r+0x2d0>)
 8007b5a:	21ea      	movs	r1, #234	; 0xea
 8007b5c:	48a7      	ldr	r0, [pc, #668]	; (8007dfc <_dtoa_r+0x2d4>)
 8007b5e:	f002 f8bd 	bl	8009cdc <__assert_func>
 8007b62:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007b66:	6005      	str	r5, [r0, #0]
 8007b68:	60c5      	str	r5, [r0, #12]
 8007b6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b6c:	6819      	ldr	r1, [r3, #0]
 8007b6e:	b151      	cbz	r1, 8007b86 <_dtoa_r+0x5e>
 8007b70:	685a      	ldr	r2, [r3, #4]
 8007b72:	604a      	str	r2, [r1, #4]
 8007b74:	2301      	movs	r3, #1
 8007b76:	4093      	lsls	r3, r2
 8007b78:	608b      	str	r3, [r1, #8]
 8007b7a:	4620      	mov	r0, r4
 8007b7c:	f001 f99e 	bl	8008ebc <_Bfree>
 8007b80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b82:	2200      	movs	r2, #0
 8007b84:	601a      	str	r2, [r3, #0]
 8007b86:	1e3b      	subs	r3, r7, #0
 8007b88:	bfaa      	itet	ge
 8007b8a:	2300      	movge	r3, #0
 8007b8c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007b90:	f8c8 3000 	strge.w	r3, [r8]
 8007b94:	4b9a      	ldr	r3, [pc, #616]	; (8007e00 <_dtoa_r+0x2d8>)
 8007b96:	bfbc      	itt	lt
 8007b98:	2201      	movlt	r2, #1
 8007b9a:	f8c8 2000 	strlt.w	r2, [r8]
 8007b9e:	ea33 030b 	bics.w	r3, r3, fp
 8007ba2:	d11b      	bne.n	8007bdc <_dtoa_r+0xb4>
 8007ba4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007ba6:	f242 730f 	movw	r3, #9999	; 0x270f
 8007baa:	6013      	str	r3, [r2, #0]
 8007bac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007bb0:	4333      	orrs	r3, r6
 8007bb2:	f000 8592 	beq.w	80086da <_dtoa_r+0xbb2>
 8007bb6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007bb8:	b963      	cbnz	r3, 8007bd4 <_dtoa_r+0xac>
 8007bba:	4b92      	ldr	r3, [pc, #584]	; (8007e04 <_dtoa_r+0x2dc>)
 8007bbc:	e022      	b.n	8007c04 <_dtoa_r+0xdc>
 8007bbe:	4b92      	ldr	r3, [pc, #584]	; (8007e08 <_dtoa_r+0x2e0>)
 8007bc0:	9301      	str	r3, [sp, #4]
 8007bc2:	3308      	adds	r3, #8
 8007bc4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007bc6:	6013      	str	r3, [r2, #0]
 8007bc8:	9801      	ldr	r0, [sp, #4]
 8007bca:	b013      	add	sp, #76	; 0x4c
 8007bcc:	ecbd 8b04 	vpop	{d8-d9}
 8007bd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bd4:	4b8b      	ldr	r3, [pc, #556]	; (8007e04 <_dtoa_r+0x2dc>)
 8007bd6:	9301      	str	r3, [sp, #4]
 8007bd8:	3303      	adds	r3, #3
 8007bda:	e7f3      	b.n	8007bc4 <_dtoa_r+0x9c>
 8007bdc:	2200      	movs	r2, #0
 8007bde:	2300      	movs	r3, #0
 8007be0:	4650      	mov	r0, sl
 8007be2:	4659      	mov	r1, fp
 8007be4:	f7f8 ff70 	bl	8000ac8 <__aeabi_dcmpeq>
 8007be8:	ec4b ab19 	vmov	d9, sl, fp
 8007bec:	4680      	mov	r8, r0
 8007bee:	b158      	cbz	r0, 8007c08 <_dtoa_r+0xe0>
 8007bf0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	6013      	str	r3, [r2, #0]
 8007bf6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	f000 856b 	beq.w	80086d4 <_dtoa_r+0xbac>
 8007bfe:	4883      	ldr	r0, [pc, #524]	; (8007e0c <_dtoa_r+0x2e4>)
 8007c00:	6018      	str	r0, [r3, #0]
 8007c02:	1e43      	subs	r3, r0, #1
 8007c04:	9301      	str	r3, [sp, #4]
 8007c06:	e7df      	b.n	8007bc8 <_dtoa_r+0xa0>
 8007c08:	ec4b ab10 	vmov	d0, sl, fp
 8007c0c:	aa10      	add	r2, sp, #64	; 0x40
 8007c0e:	a911      	add	r1, sp, #68	; 0x44
 8007c10:	4620      	mov	r0, r4
 8007c12:	f001 fd01 	bl	8009618 <__d2b>
 8007c16:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007c1a:	ee08 0a10 	vmov	s16, r0
 8007c1e:	2d00      	cmp	r5, #0
 8007c20:	f000 8084 	beq.w	8007d2c <_dtoa_r+0x204>
 8007c24:	ee19 3a90 	vmov	r3, s19
 8007c28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007c2c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007c30:	4656      	mov	r6, sl
 8007c32:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007c36:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007c3a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007c3e:	4b74      	ldr	r3, [pc, #464]	; (8007e10 <_dtoa_r+0x2e8>)
 8007c40:	2200      	movs	r2, #0
 8007c42:	4630      	mov	r0, r6
 8007c44:	4639      	mov	r1, r7
 8007c46:	f7f8 fb1f 	bl	8000288 <__aeabi_dsub>
 8007c4a:	a365      	add	r3, pc, #404	; (adr r3, 8007de0 <_dtoa_r+0x2b8>)
 8007c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c50:	f7f8 fcd2 	bl	80005f8 <__aeabi_dmul>
 8007c54:	a364      	add	r3, pc, #400	; (adr r3, 8007de8 <_dtoa_r+0x2c0>)
 8007c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c5a:	f7f8 fb17 	bl	800028c <__adddf3>
 8007c5e:	4606      	mov	r6, r0
 8007c60:	4628      	mov	r0, r5
 8007c62:	460f      	mov	r7, r1
 8007c64:	f7f8 fc5e 	bl	8000524 <__aeabi_i2d>
 8007c68:	a361      	add	r3, pc, #388	; (adr r3, 8007df0 <_dtoa_r+0x2c8>)
 8007c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c6e:	f7f8 fcc3 	bl	80005f8 <__aeabi_dmul>
 8007c72:	4602      	mov	r2, r0
 8007c74:	460b      	mov	r3, r1
 8007c76:	4630      	mov	r0, r6
 8007c78:	4639      	mov	r1, r7
 8007c7a:	f7f8 fb07 	bl	800028c <__adddf3>
 8007c7e:	4606      	mov	r6, r0
 8007c80:	460f      	mov	r7, r1
 8007c82:	f7f8 ff69 	bl	8000b58 <__aeabi_d2iz>
 8007c86:	2200      	movs	r2, #0
 8007c88:	9000      	str	r0, [sp, #0]
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	4630      	mov	r0, r6
 8007c8e:	4639      	mov	r1, r7
 8007c90:	f7f8 ff24 	bl	8000adc <__aeabi_dcmplt>
 8007c94:	b150      	cbz	r0, 8007cac <_dtoa_r+0x184>
 8007c96:	9800      	ldr	r0, [sp, #0]
 8007c98:	f7f8 fc44 	bl	8000524 <__aeabi_i2d>
 8007c9c:	4632      	mov	r2, r6
 8007c9e:	463b      	mov	r3, r7
 8007ca0:	f7f8 ff12 	bl	8000ac8 <__aeabi_dcmpeq>
 8007ca4:	b910      	cbnz	r0, 8007cac <_dtoa_r+0x184>
 8007ca6:	9b00      	ldr	r3, [sp, #0]
 8007ca8:	3b01      	subs	r3, #1
 8007caa:	9300      	str	r3, [sp, #0]
 8007cac:	9b00      	ldr	r3, [sp, #0]
 8007cae:	2b16      	cmp	r3, #22
 8007cb0:	d85a      	bhi.n	8007d68 <_dtoa_r+0x240>
 8007cb2:	9a00      	ldr	r2, [sp, #0]
 8007cb4:	4b57      	ldr	r3, [pc, #348]	; (8007e14 <_dtoa_r+0x2ec>)
 8007cb6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cbe:	ec51 0b19 	vmov	r0, r1, d9
 8007cc2:	f7f8 ff0b 	bl	8000adc <__aeabi_dcmplt>
 8007cc6:	2800      	cmp	r0, #0
 8007cc8:	d050      	beq.n	8007d6c <_dtoa_r+0x244>
 8007cca:	9b00      	ldr	r3, [sp, #0]
 8007ccc:	3b01      	subs	r3, #1
 8007cce:	9300      	str	r3, [sp, #0]
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	930b      	str	r3, [sp, #44]	; 0x2c
 8007cd4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007cd6:	1b5d      	subs	r5, r3, r5
 8007cd8:	1e6b      	subs	r3, r5, #1
 8007cda:	9305      	str	r3, [sp, #20]
 8007cdc:	bf45      	ittet	mi
 8007cde:	f1c5 0301 	rsbmi	r3, r5, #1
 8007ce2:	9304      	strmi	r3, [sp, #16]
 8007ce4:	2300      	movpl	r3, #0
 8007ce6:	2300      	movmi	r3, #0
 8007ce8:	bf4c      	ite	mi
 8007cea:	9305      	strmi	r3, [sp, #20]
 8007cec:	9304      	strpl	r3, [sp, #16]
 8007cee:	9b00      	ldr	r3, [sp, #0]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	db3d      	blt.n	8007d70 <_dtoa_r+0x248>
 8007cf4:	9b05      	ldr	r3, [sp, #20]
 8007cf6:	9a00      	ldr	r2, [sp, #0]
 8007cf8:	920a      	str	r2, [sp, #40]	; 0x28
 8007cfa:	4413      	add	r3, r2
 8007cfc:	9305      	str	r3, [sp, #20]
 8007cfe:	2300      	movs	r3, #0
 8007d00:	9307      	str	r3, [sp, #28]
 8007d02:	9b06      	ldr	r3, [sp, #24]
 8007d04:	2b09      	cmp	r3, #9
 8007d06:	f200 8089 	bhi.w	8007e1c <_dtoa_r+0x2f4>
 8007d0a:	2b05      	cmp	r3, #5
 8007d0c:	bfc4      	itt	gt
 8007d0e:	3b04      	subgt	r3, #4
 8007d10:	9306      	strgt	r3, [sp, #24]
 8007d12:	9b06      	ldr	r3, [sp, #24]
 8007d14:	f1a3 0302 	sub.w	r3, r3, #2
 8007d18:	bfcc      	ite	gt
 8007d1a:	2500      	movgt	r5, #0
 8007d1c:	2501      	movle	r5, #1
 8007d1e:	2b03      	cmp	r3, #3
 8007d20:	f200 8087 	bhi.w	8007e32 <_dtoa_r+0x30a>
 8007d24:	e8df f003 	tbb	[pc, r3]
 8007d28:	59383a2d 	.word	0x59383a2d
 8007d2c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007d30:	441d      	add	r5, r3
 8007d32:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007d36:	2b20      	cmp	r3, #32
 8007d38:	bfc1      	itttt	gt
 8007d3a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007d3e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007d42:	fa0b f303 	lslgt.w	r3, fp, r3
 8007d46:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007d4a:	bfda      	itte	le
 8007d4c:	f1c3 0320 	rsble	r3, r3, #32
 8007d50:	fa06 f003 	lslle.w	r0, r6, r3
 8007d54:	4318      	orrgt	r0, r3
 8007d56:	f7f8 fbd5 	bl	8000504 <__aeabi_ui2d>
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	4606      	mov	r6, r0
 8007d5e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007d62:	3d01      	subs	r5, #1
 8007d64:	930e      	str	r3, [sp, #56]	; 0x38
 8007d66:	e76a      	b.n	8007c3e <_dtoa_r+0x116>
 8007d68:	2301      	movs	r3, #1
 8007d6a:	e7b2      	b.n	8007cd2 <_dtoa_r+0x1aa>
 8007d6c:	900b      	str	r0, [sp, #44]	; 0x2c
 8007d6e:	e7b1      	b.n	8007cd4 <_dtoa_r+0x1ac>
 8007d70:	9b04      	ldr	r3, [sp, #16]
 8007d72:	9a00      	ldr	r2, [sp, #0]
 8007d74:	1a9b      	subs	r3, r3, r2
 8007d76:	9304      	str	r3, [sp, #16]
 8007d78:	4253      	negs	r3, r2
 8007d7a:	9307      	str	r3, [sp, #28]
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	930a      	str	r3, [sp, #40]	; 0x28
 8007d80:	e7bf      	b.n	8007d02 <_dtoa_r+0x1da>
 8007d82:	2300      	movs	r3, #0
 8007d84:	9308      	str	r3, [sp, #32]
 8007d86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	dc55      	bgt.n	8007e38 <_dtoa_r+0x310>
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007d92:	461a      	mov	r2, r3
 8007d94:	9209      	str	r2, [sp, #36]	; 0x24
 8007d96:	e00c      	b.n	8007db2 <_dtoa_r+0x28a>
 8007d98:	2301      	movs	r3, #1
 8007d9a:	e7f3      	b.n	8007d84 <_dtoa_r+0x25c>
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007da0:	9308      	str	r3, [sp, #32]
 8007da2:	9b00      	ldr	r3, [sp, #0]
 8007da4:	4413      	add	r3, r2
 8007da6:	9302      	str	r3, [sp, #8]
 8007da8:	3301      	adds	r3, #1
 8007daa:	2b01      	cmp	r3, #1
 8007dac:	9303      	str	r3, [sp, #12]
 8007dae:	bfb8      	it	lt
 8007db0:	2301      	movlt	r3, #1
 8007db2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007db4:	2200      	movs	r2, #0
 8007db6:	6042      	str	r2, [r0, #4]
 8007db8:	2204      	movs	r2, #4
 8007dba:	f102 0614 	add.w	r6, r2, #20
 8007dbe:	429e      	cmp	r6, r3
 8007dc0:	6841      	ldr	r1, [r0, #4]
 8007dc2:	d93d      	bls.n	8007e40 <_dtoa_r+0x318>
 8007dc4:	4620      	mov	r0, r4
 8007dc6:	f001 f839 	bl	8008e3c <_Balloc>
 8007dca:	9001      	str	r0, [sp, #4]
 8007dcc:	2800      	cmp	r0, #0
 8007dce:	d13b      	bne.n	8007e48 <_dtoa_r+0x320>
 8007dd0:	4b11      	ldr	r3, [pc, #68]	; (8007e18 <_dtoa_r+0x2f0>)
 8007dd2:	4602      	mov	r2, r0
 8007dd4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007dd8:	e6c0      	b.n	8007b5c <_dtoa_r+0x34>
 8007dda:	2301      	movs	r3, #1
 8007ddc:	e7df      	b.n	8007d9e <_dtoa_r+0x276>
 8007dde:	bf00      	nop
 8007de0:	636f4361 	.word	0x636f4361
 8007de4:	3fd287a7 	.word	0x3fd287a7
 8007de8:	8b60c8b3 	.word	0x8b60c8b3
 8007dec:	3fc68a28 	.word	0x3fc68a28
 8007df0:	509f79fb 	.word	0x509f79fb
 8007df4:	3fd34413 	.word	0x3fd34413
 8007df8:	0800b276 	.word	0x0800b276
 8007dfc:	0800b28d 	.word	0x0800b28d
 8007e00:	7ff00000 	.word	0x7ff00000
 8007e04:	0800b272 	.word	0x0800b272
 8007e08:	0800b269 	.word	0x0800b269
 8007e0c:	0800b0ed 	.word	0x0800b0ed
 8007e10:	3ff80000 	.word	0x3ff80000
 8007e14:	0800b3f8 	.word	0x0800b3f8
 8007e18:	0800b2e8 	.word	0x0800b2e8
 8007e1c:	2501      	movs	r5, #1
 8007e1e:	2300      	movs	r3, #0
 8007e20:	9306      	str	r3, [sp, #24]
 8007e22:	9508      	str	r5, [sp, #32]
 8007e24:	f04f 33ff 	mov.w	r3, #4294967295
 8007e28:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	2312      	movs	r3, #18
 8007e30:	e7b0      	b.n	8007d94 <_dtoa_r+0x26c>
 8007e32:	2301      	movs	r3, #1
 8007e34:	9308      	str	r3, [sp, #32]
 8007e36:	e7f5      	b.n	8007e24 <_dtoa_r+0x2fc>
 8007e38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e3a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007e3e:	e7b8      	b.n	8007db2 <_dtoa_r+0x28a>
 8007e40:	3101      	adds	r1, #1
 8007e42:	6041      	str	r1, [r0, #4]
 8007e44:	0052      	lsls	r2, r2, #1
 8007e46:	e7b8      	b.n	8007dba <_dtoa_r+0x292>
 8007e48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e4a:	9a01      	ldr	r2, [sp, #4]
 8007e4c:	601a      	str	r2, [r3, #0]
 8007e4e:	9b03      	ldr	r3, [sp, #12]
 8007e50:	2b0e      	cmp	r3, #14
 8007e52:	f200 809d 	bhi.w	8007f90 <_dtoa_r+0x468>
 8007e56:	2d00      	cmp	r5, #0
 8007e58:	f000 809a 	beq.w	8007f90 <_dtoa_r+0x468>
 8007e5c:	9b00      	ldr	r3, [sp, #0]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	dd32      	ble.n	8007ec8 <_dtoa_r+0x3a0>
 8007e62:	4ab7      	ldr	r2, [pc, #732]	; (8008140 <_dtoa_r+0x618>)
 8007e64:	f003 030f 	and.w	r3, r3, #15
 8007e68:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007e6c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007e70:	9b00      	ldr	r3, [sp, #0]
 8007e72:	05d8      	lsls	r0, r3, #23
 8007e74:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007e78:	d516      	bpl.n	8007ea8 <_dtoa_r+0x380>
 8007e7a:	4bb2      	ldr	r3, [pc, #712]	; (8008144 <_dtoa_r+0x61c>)
 8007e7c:	ec51 0b19 	vmov	r0, r1, d9
 8007e80:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007e84:	f7f8 fce2 	bl	800084c <__aeabi_ddiv>
 8007e88:	f007 070f 	and.w	r7, r7, #15
 8007e8c:	4682      	mov	sl, r0
 8007e8e:	468b      	mov	fp, r1
 8007e90:	2503      	movs	r5, #3
 8007e92:	4eac      	ldr	r6, [pc, #688]	; (8008144 <_dtoa_r+0x61c>)
 8007e94:	b957      	cbnz	r7, 8007eac <_dtoa_r+0x384>
 8007e96:	4642      	mov	r2, r8
 8007e98:	464b      	mov	r3, r9
 8007e9a:	4650      	mov	r0, sl
 8007e9c:	4659      	mov	r1, fp
 8007e9e:	f7f8 fcd5 	bl	800084c <__aeabi_ddiv>
 8007ea2:	4682      	mov	sl, r0
 8007ea4:	468b      	mov	fp, r1
 8007ea6:	e028      	b.n	8007efa <_dtoa_r+0x3d2>
 8007ea8:	2502      	movs	r5, #2
 8007eaa:	e7f2      	b.n	8007e92 <_dtoa_r+0x36a>
 8007eac:	07f9      	lsls	r1, r7, #31
 8007eae:	d508      	bpl.n	8007ec2 <_dtoa_r+0x39a>
 8007eb0:	4640      	mov	r0, r8
 8007eb2:	4649      	mov	r1, r9
 8007eb4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007eb8:	f7f8 fb9e 	bl	80005f8 <__aeabi_dmul>
 8007ebc:	3501      	adds	r5, #1
 8007ebe:	4680      	mov	r8, r0
 8007ec0:	4689      	mov	r9, r1
 8007ec2:	107f      	asrs	r7, r7, #1
 8007ec4:	3608      	adds	r6, #8
 8007ec6:	e7e5      	b.n	8007e94 <_dtoa_r+0x36c>
 8007ec8:	f000 809b 	beq.w	8008002 <_dtoa_r+0x4da>
 8007ecc:	9b00      	ldr	r3, [sp, #0]
 8007ece:	4f9d      	ldr	r7, [pc, #628]	; (8008144 <_dtoa_r+0x61c>)
 8007ed0:	425e      	negs	r6, r3
 8007ed2:	4b9b      	ldr	r3, [pc, #620]	; (8008140 <_dtoa_r+0x618>)
 8007ed4:	f006 020f 	and.w	r2, r6, #15
 8007ed8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ee0:	ec51 0b19 	vmov	r0, r1, d9
 8007ee4:	f7f8 fb88 	bl	80005f8 <__aeabi_dmul>
 8007ee8:	1136      	asrs	r6, r6, #4
 8007eea:	4682      	mov	sl, r0
 8007eec:	468b      	mov	fp, r1
 8007eee:	2300      	movs	r3, #0
 8007ef0:	2502      	movs	r5, #2
 8007ef2:	2e00      	cmp	r6, #0
 8007ef4:	d17a      	bne.n	8007fec <_dtoa_r+0x4c4>
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d1d3      	bne.n	8007ea2 <_dtoa_r+0x37a>
 8007efa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	f000 8082 	beq.w	8008006 <_dtoa_r+0x4de>
 8007f02:	4b91      	ldr	r3, [pc, #580]	; (8008148 <_dtoa_r+0x620>)
 8007f04:	2200      	movs	r2, #0
 8007f06:	4650      	mov	r0, sl
 8007f08:	4659      	mov	r1, fp
 8007f0a:	f7f8 fde7 	bl	8000adc <__aeabi_dcmplt>
 8007f0e:	2800      	cmp	r0, #0
 8007f10:	d079      	beq.n	8008006 <_dtoa_r+0x4de>
 8007f12:	9b03      	ldr	r3, [sp, #12]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d076      	beq.n	8008006 <_dtoa_r+0x4de>
 8007f18:	9b02      	ldr	r3, [sp, #8]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	dd36      	ble.n	8007f8c <_dtoa_r+0x464>
 8007f1e:	9b00      	ldr	r3, [sp, #0]
 8007f20:	4650      	mov	r0, sl
 8007f22:	4659      	mov	r1, fp
 8007f24:	1e5f      	subs	r7, r3, #1
 8007f26:	2200      	movs	r2, #0
 8007f28:	4b88      	ldr	r3, [pc, #544]	; (800814c <_dtoa_r+0x624>)
 8007f2a:	f7f8 fb65 	bl	80005f8 <__aeabi_dmul>
 8007f2e:	9e02      	ldr	r6, [sp, #8]
 8007f30:	4682      	mov	sl, r0
 8007f32:	468b      	mov	fp, r1
 8007f34:	3501      	adds	r5, #1
 8007f36:	4628      	mov	r0, r5
 8007f38:	f7f8 faf4 	bl	8000524 <__aeabi_i2d>
 8007f3c:	4652      	mov	r2, sl
 8007f3e:	465b      	mov	r3, fp
 8007f40:	f7f8 fb5a 	bl	80005f8 <__aeabi_dmul>
 8007f44:	4b82      	ldr	r3, [pc, #520]	; (8008150 <_dtoa_r+0x628>)
 8007f46:	2200      	movs	r2, #0
 8007f48:	f7f8 f9a0 	bl	800028c <__adddf3>
 8007f4c:	46d0      	mov	r8, sl
 8007f4e:	46d9      	mov	r9, fp
 8007f50:	4682      	mov	sl, r0
 8007f52:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007f56:	2e00      	cmp	r6, #0
 8007f58:	d158      	bne.n	800800c <_dtoa_r+0x4e4>
 8007f5a:	4b7e      	ldr	r3, [pc, #504]	; (8008154 <_dtoa_r+0x62c>)
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	4640      	mov	r0, r8
 8007f60:	4649      	mov	r1, r9
 8007f62:	f7f8 f991 	bl	8000288 <__aeabi_dsub>
 8007f66:	4652      	mov	r2, sl
 8007f68:	465b      	mov	r3, fp
 8007f6a:	4680      	mov	r8, r0
 8007f6c:	4689      	mov	r9, r1
 8007f6e:	f7f8 fdd3 	bl	8000b18 <__aeabi_dcmpgt>
 8007f72:	2800      	cmp	r0, #0
 8007f74:	f040 8295 	bne.w	80084a2 <_dtoa_r+0x97a>
 8007f78:	4652      	mov	r2, sl
 8007f7a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007f7e:	4640      	mov	r0, r8
 8007f80:	4649      	mov	r1, r9
 8007f82:	f7f8 fdab 	bl	8000adc <__aeabi_dcmplt>
 8007f86:	2800      	cmp	r0, #0
 8007f88:	f040 8289 	bne.w	800849e <_dtoa_r+0x976>
 8007f8c:	ec5b ab19 	vmov	sl, fp, d9
 8007f90:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	f2c0 8148 	blt.w	8008228 <_dtoa_r+0x700>
 8007f98:	9a00      	ldr	r2, [sp, #0]
 8007f9a:	2a0e      	cmp	r2, #14
 8007f9c:	f300 8144 	bgt.w	8008228 <_dtoa_r+0x700>
 8007fa0:	4b67      	ldr	r3, [pc, #412]	; (8008140 <_dtoa_r+0x618>)
 8007fa2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007fa6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007faa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	f280 80d5 	bge.w	800815c <_dtoa_r+0x634>
 8007fb2:	9b03      	ldr	r3, [sp, #12]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	f300 80d1 	bgt.w	800815c <_dtoa_r+0x634>
 8007fba:	f040 826f 	bne.w	800849c <_dtoa_r+0x974>
 8007fbe:	4b65      	ldr	r3, [pc, #404]	; (8008154 <_dtoa_r+0x62c>)
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	4640      	mov	r0, r8
 8007fc4:	4649      	mov	r1, r9
 8007fc6:	f7f8 fb17 	bl	80005f8 <__aeabi_dmul>
 8007fca:	4652      	mov	r2, sl
 8007fcc:	465b      	mov	r3, fp
 8007fce:	f7f8 fd99 	bl	8000b04 <__aeabi_dcmpge>
 8007fd2:	9e03      	ldr	r6, [sp, #12]
 8007fd4:	4637      	mov	r7, r6
 8007fd6:	2800      	cmp	r0, #0
 8007fd8:	f040 8245 	bne.w	8008466 <_dtoa_r+0x93e>
 8007fdc:	9d01      	ldr	r5, [sp, #4]
 8007fde:	2331      	movs	r3, #49	; 0x31
 8007fe0:	f805 3b01 	strb.w	r3, [r5], #1
 8007fe4:	9b00      	ldr	r3, [sp, #0]
 8007fe6:	3301      	adds	r3, #1
 8007fe8:	9300      	str	r3, [sp, #0]
 8007fea:	e240      	b.n	800846e <_dtoa_r+0x946>
 8007fec:	07f2      	lsls	r2, r6, #31
 8007fee:	d505      	bpl.n	8007ffc <_dtoa_r+0x4d4>
 8007ff0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ff4:	f7f8 fb00 	bl	80005f8 <__aeabi_dmul>
 8007ff8:	3501      	adds	r5, #1
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	1076      	asrs	r6, r6, #1
 8007ffe:	3708      	adds	r7, #8
 8008000:	e777      	b.n	8007ef2 <_dtoa_r+0x3ca>
 8008002:	2502      	movs	r5, #2
 8008004:	e779      	b.n	8007efa <_dtoa_r+0x3d2>
 8008006:	9f00      	ldr	r7, [sp, #0]
 8008008:	9e03      	ldr	r6, [sp, #12]
 800800a:	e794      	b.n	8007f36 <_dtoa_r+0x40e>
 800800c:	9901      	ldr	r1, [sp, #4]
 800800e:	4b4c      	ldr	r3, [pc, #304]	; (8008140 <_dtoa_r+0x618>)
 8008010:	4431      	add	r1, r6
 8008012:	910d      	str	r1, [sp, #52]	; 0x34
 8008014:	9908      	ldr	r1, [sp, #32]
 8008016:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800801a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800801e:	2900      	cmp	r1, #0
 8008020:	d043      	beq.n	80080aa <_dtoa_r+0x582>
 8008022:	494d      	ldr	r1, [pc, #308]	; (8008158 <_dtoa_r+0x630>)
 8008024:	2000      	movs	r0, #0
 8008026:	f7f8 fc11 	bl	800084c <__aeabi_ddiv>
 800802a:	4652      	mov	r2, sl
 800802c:	465b      	mov	r3, fp
 800802e:	f7f8 f92b 	bl	8000288 <__aeabi_dsub>
 8008032:	9d01      	ldr	r5, [sp, #4]
 8008034:	4682      	mov	sl, r0
 8008036:	468b      	mov	fp, r1
 8008038:	4649      	mov	r1, r9
 800803a:	4640      	mov	r0, r8
 800803c:	f7f8 fd8c 	bl	8000b58 <__aeabi_d2iz>
 8008040:	4606      	mov	r6, r0
 8008042:	f7f8 fa6f 	bl	8000524 <__aeabi_i2d>
 8008046:	4602      	mov	r2, r0
 8008048:	460b      	mov	r3, r1
 800804a:	4640      	mov	r0, r8
 800804c:	4649      	mov	r1, r9
 800804e:	f7f8 f91b 	bl	8000288 <__aeabi_dsub>
 8008052:	3630      	adds	r6, #48	; 0x30
 8008054:	f805 6b01 	strb.w	r6, [r5], #1
 8008058:	4652      	mov	r2, sl
 800805a:	465b      	mov	r3, fp
 800805c:	4680      	mov	r8, r0
 800805e:	4689      	mov	r9, r1
 8008060:	f7f8 fd3c 	bl	8000adc <__aeabi_dcmplt>
 8008064:	2800      	cmp	r0, #0
 8008066:	d163      	bne.n	8008130 <_dtoa_r+0x608>
 8008068:	4642      	mov	r2, r8
 800806a:	464b      	mov	r3, r9
 800806c:	4936      	ldr	r1, [pc, #216]	; (8008148 <_dtoa_r+0x620>)
 800806e:	2000      	movs	r0, #0
 8008070:	f7f8 f90a 	bl	8000288 <__aeabi_dsub>
 8008074:	4652      	mov	r2, sl
 8008076:	465b      	mov	r3, fp
 8008078:	f7f8 fd30 	bl	8000adc <__aeabi_dcmplt>
 800807c:	2800      	cmp	r0, #0
 800807e:	f040 80b5 	bne.w	80081ec <_dtoa_r+0x6c4>
 8008082:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008084:	429d      	cmp	r5, r3
 8008086:	d081      	beq.n	8007f8c <_dtoa_r+0x464>
 8008088:	4b30      	ldr	r3, [pc, #192]	; (800814c <_dtoa_r+0x624>)
 800808a:	2200      	movs	r2, #0
 800808c:	4650      	mov	r0, sl
 800808e:	4659      	mov	r1, fp
 8008090:	f7f8 fab2 	bl	80005f8 <__aeabi_dmul>
 8008094:	4b2d      	ldr	r3, [pc, #180]	; (800814c <_dtoa_r+0x624>)
 8008096:	4682      	mov	sl, r0
 8008098:	468b      	mov	fp, r1
 800809a:	4640      	mov	r0, r8
 800809c:	4649      	mov	r1, r9
 800809e:	2200      	movs	r2, #0
 80080a0:	f7f8 faaa 	bl	80005f8 <__aeabi_dmul>
 80080a4:	4680      	mov	r8, r0
 80080a6:	4689      	mov	r9, r1
 80080a8:	e7c6      	b.n	8008038 <_dtoa_r+0x510>
 80080aa:	4650      	mov	r0, sl
 80080ac:	4659      	mov	r1, fp
 80080ae:	f7f8 faa3 	bl	80005f8 <__aeabi_dmul>
 80080b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80080b4:	9d01      	ldr	r5, [sp, #4]
 80080b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80080b8:	4682      	mov	sl, r0
 80080ba:	468b      	mov	fp, r1
 80080bc:	4649      	mov	r1, r9
 80080be:	4640      	mov	r0, r8
 80080c0:	f7f8 fd4a 	bl	8000b58 <__aeabi_d2iz>
 80080c4:	4606      	mov	r6, r0
 80080c6:	f7f8 fa2d 	bl	8000524 <__aeabi_i2d>
 80080ca:	3630      	adds	r6, #48	; 0x30
 80080cc:	4602      	mov	r2, r0
 80080ce:	460b      	mov	r3, r1
 80080d0:	4640      	mov	r0, r8
 80080d2:	4649      	mov	r1, r9
 80080d4:	f7f8 f8d8 	bl	8000288 <__aeabi_dsub>
 80080d8:	f805 6b01 	strb.w	r6, [r5], #1
 80080dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80080de:	429d      	cmp	r5, r3
 80080e0:	4680      	mov	r8, r0
 80080e2:	4689      	mov	r9, r1
 80080e4:	f04f 0200 	mov.w	r2, #0
 80080e8:	d124      	bne.n	8008134 <_dtoa_r+0x60c>
 80080ea:	4b1b      	ldr	r3, [pc, #108]	; (8008158 <_dtoa_r+0x630>)
 80080ec:	4650      	mov	r0, sl
 80080ee:	4659      	mov	r1, fp
 80080f0:	f7f8 f8cc 	bl	800028c <__adddf3>
 80080f4:	4602      	mov	r2, r0
 80080f6:	460b      	mov	r3, r1
 80080f8:	4640      	mov	r0, r8
 80080fa:	4649      	mov	r1, r9
 80080fc:	f7f8 fd0c 	bl	8000b18 <__aeabi_dcmpgt>
 8008100:	2800      	cmp	r0, #0
 8008102:	d173      	bne.n	80081ec <_dtoa_r+0x6c4>
 8008104:	4652      	mov	r2, sl
 8008106:	465b      	mov	r3, fp
 8008108:	4913      	ldr	r1, [pc, #76]	; (8008158 <_dtoa_r+0x630>)
 800810a:	2000      	movs	r0, #0
 800810c:	f7f8 f8bc 	bl	8000288 <__aeabi_dsub>
 8008110:	4602      	mov	r2, r0
 8008112:	460b      	mov	r3, r1
 8008114:	4640      	mov	r0, r8
 8008116:	4649      	mov	r1, r9
 8008118:	f7f8 fce0 	bl	8000adc <__aeabi_dcmplt>
 800811c:	2800      	cmp	r0, #0
 800811e:	f43f af35 	beq.w	8007f8c <_dtoa_r+0x464>
 8008122:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008124:	1e6b      	subs	r3, r5, #1
 8008126:	930f      	str	r3, [sp, #60]	; 0x3c
 8008128:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800812c:	2b30      	cmp	r3, #48	; 0x30
 800812e:	d0f8      	beq.n	8008122 <_dtoa_r+0x5fa>
 8008130:	9700      	str	r7, [sp, #0]
 8008132:	e049      	b.n	80081c8 <_dtoa_r+0x6a0>
 8008134:	4b05      	ldr	r3, [pc, #20]	; (800814c <_dtoa_r+0x624>)
 8008136:	f7f8 fa5f 	bl	80005f8 <__aeabi_dmul>
 800813a:	4680      	mov	r8, r0
 800813c:	4689      	mov	r9, r1
 800813e:	e7bd      	b.n	80080bc <_dtoa_r+0x594>
 8008140:	0800b3f8 	.word	0x0800b3f8
 8008144:	0800b3d0 	.word	0x0800b3d0
 8008148:	3ff00000 	.word	0x3ff00000
 800814c:	40240000 	.word	0x40240000
 8008150:	401c0000 	.word	0x401c0000
 8008154:	40140000 	.word	0x40140000
 8008158:	3fe00000 	.word	0x3fe00000
 800815c:	9d01      	ldr	r5, [sp, #4]
 800815e:	4656      	mov	r6, sl
 8008160:	465f      	mov	r7, fp
 8008162:	4642      	mov	r2, r8
 8008164:	464b      	mov	r3, r9
 8008166:	4630      	mov	r0, r6
 8008168:	4639      	mov	r1, r7
 800816a:	f7f8 fb6f 	bl	800084c <__aeabi_ddiv>
 800816e:	f7f8 fcf3 	bl	8000b58 <__aeabi_d2iz>
 8008172:	4682      	mov	sl, r0
 8008174:	f7f8 f9d6 	bl	8000524 <__aeabi_i2d>
 8008178:	4642      	mov	r2, r8
 800817a:	464b      	mov	r3, r9
 800817c:	f7f8 fa3c 	bl	80005f8 <__aeabi_dmul>
 8008180:	4602      	mov	r2, r0
 8008182:	460b      	mov	r3, r1
 8008184:	4630      	mov	r0, r6
 8008186:	4639      	mov	r1, r7
 8008188:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800818c:	f7f8 f87c 	bl	8000288 <__aeabi_dsub>
 8008190:	f805 6b01 	strb.w	r6, [r5], #1
 8008194:	9e01      	ldr	r6, [sp, #4]
 8008196:	9f03      	ldr	r7, [sp, #12]
 8008198:	1bae      	subs	r6, r5, r6
 800819a:	42b7      	cmp	r7, r6
 800819c:	4602      	mov	r2, r0
 800819e:	460b      	mov	r3, r1
 80081a0:	d135      	bne.n	800820e <_dtoa_r+0x6e6>
 80081a2:	f7f8 f873 	bl	800028c <__adddf3>
 80081a6:	4642      	mov	r2, r8
 80081a8:	464b      	mov	r3, r9
 80081aa:	4606      	mov	r6, r0
 80081ac:	460f      	mov	r7, r1
 80081ae:	f7f8 fcb3 	bl	8000b18 <__aeabi_dcmpgt>
 80081b2:	b9d0      	cbnz	r0, 80081ea <_dtoa_r+0x6c2>
 80081b4:	4642      	mov	r2, r8
 80081b6:	464b      	mov	r3, r9
 80081b8:	4630      	mov	r0, r6
 80081ba:	4639      	mov	r1, r7
 80081bc:	f7f8 fc84 	bl	8000ac8 <__aeabi_dcmpeq>
 80081c0:	b110      	cbz	r0, 80081c8 <_dtoa_r+0x6a0>
 80081c2:	f01a 0f01 	tst.w	sl, #1
 80081c6:	d110      	bne.n	80081ea <_dtoa_r+0x6c2>
 80081c8:	4620      	mov	r0, r4
 80081ca:	ee18 1a10 	vmov	r1, s16
 80081ce:	f000 fe75 	bl	8008ebc <_Bfree>
 80081d2:	2300      	movs	r3, #0
 80081d4:	9800      	ldr	r0, [sp, #0]
 80081d6:	702b      	strb	r3, [r5, #0]
 80081d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80081da:	3001      	adds	r0, #1
 80081dc:	6018      	str	r0, [r3, #0]
 80081de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	f43f acf1 	beq.w	8007bc8 <_dtoa_r+0xa0>
 80081e6:	601d      	str	r5, [r3, #0]
 80081e8:	e4ee      	b.n	8007bc8 <_dtoa_r+0xa0>
 80081ea:	9f00      	ldr	r7, [sp, #0]
 80081ec:	462b      	mov	r3, r5
 80081ee:	461d      	mov	r5, r3
 80081f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80081f4:	2a39      	cmp	r2, #57	; 0x39
 80081f6:	d106      	bne.n	8008206 <_dtoa_r+0x6de>
 80081f8:	9a01      	ldr	r2, [sp, #4]
 80081fa:	429a      	cmp	r2, r3
 80081fc:	d1f7      	bne.n	80081ee <_dtoa_r+0x6c6>
 80081fe:	9901      	ldr	r1, [sp, #4]
 8008200:	2230      	movs	r2, #48	; 0x30
 8008202:	3701      	adds	r7, #1
 8008204:	700a      	strb	r2, [r1, #0]
 8008206:	781a      	ldrb	r2, [r3, #0]
 8008208:	3201      	adds	r2, #1
 800820a:	701a      	strb	r2, [r3, #0]
 800820c:	e790      	b.n	8008130 <_dtoa_r+0x608>
 800820e:	4ba6      	ldr	r3, [pc, #664]	; (80084a8 <_dtoa_r+0x980>)
 8008210:	2200      	movs	r2, #0
 8008212:	f7f8 f9f1 	bl	80005f8 <__aeabi_dmul>
 8008216:	2200      	movs	r2, #0
 8008218:	2300      	movs	r3, #0
 800821a:	4606      	mov	r6, r0
 800821c:	460f      	mov	r7, r1
 800821e:	f7f8 fc53 	bl	8000ac8 <__aeabi_dcmpeq>
 8008222:	2800      	cmp	r0, #0
 8008224:	d09d      	beq.n	8008162 <_dtoa_r+0x63a>
 8008226:	e7cf      	b.n	80081c8 <_dtoa_r+0x6a0>
 8008228:	9a08      	ldr	r2, [sp, #32]
 800822a:	2a00      	cmp	r2, #0
 800822c:	f000 80d7 	beq.w	80083de <_dtoa_r+0x8b6>
 8008230:	9a06      	ldr	r2, [sp, #24]
 8008232:	2a01      	cmp	r2, #1
 8008234:	f300 80ba 	bgt.w	80083ac <_dtoa_r+0x884>
 8008238:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800823a:	2a00      	cmp	r2, #0
 800823c:	f000 80b2 	beq.w	80083a4 <_dtoa_r+0x87c>
 8008240:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008244:	9e07      	ldr	r6, [sp, #28]
 8008246:	9d04      	ldr	r5, [sp, #16]
 8008248:	9a04      	ldr	r2, [sp, #16]
 800824a:	441a      	add	r2, r3
 800824c:	9204      	str	r2, [sp, #16]
 800824e:	9a05      	ldr	r2, [sp, #20]
 8008250:	2101      	movs	r1, #1
 8008252:	441a      	add	r2, r3
 8008254:	4620      	mov	r0, r4
 8008256:	9205      	str	r2, [sp, #20]
 8008258:	f000 ff32 	bl	80090c0 <__i2b>
 800825c:	4607      	mov	r7, r0
 800825e:	2d00      	cmp	r5, #0
 8008260:	dd0c      	ble.n	800827c <_dtoa_r+0x754>
 8008262:	9b05      	ldr	r3, [sp, #20]
 8008264:	2b00      	cmp	r3, #0
 8008266:	dd09      	ble.n	800827c <_dtoa_r+0x754>
 8008268:	42ab      	cmp	r3, r5
 800826a:	9a04      	ldr	r2, [sp, #16]
 800826c:	bfa8      	it	ge
 800826e:	462b      	movge	r3, r5
 8008270:	1ad2      	subs	r2, r2, r3
 8008272:	9204      	str	r2, [sp, #16]
 8008274:	9a05      	ldr	r2, [sp, #20]
 8008276:	1aed      	subs	r5, r5, r3
 8008278:	1ad3      	subs	r3, r2, r3
 800827a:	9305      	str	r3, [sp, #20]
 800827c:	9b07      	ldr	r3, [sp, #28]
 800827e:	b31b      	cbz	r3, 80082c8 <_dtoa_r+0x7a0>
 8008280:	9b08      	ldr	r3, [sp, #32]
 8008282:	2b00      	cmp	r3, #0
 8008284:	f000 80af 	beq.w	80083e6 <_dtoa_r+0x8be>
 8008288:	2e00      	cmp	r6, #0
 800828a:	dd13      	ble.n	80082b4 <_dtoa_r+0x78c>
 800828c:	4639      	mov	r1, r7
 800828e:	4632      	mov	r2, r6
 8008290:	4620      	mov	r0, r4
 8008292:	f000 ffd5 	bl	8009240 <__pow5mult>
 8008296:	ee18 2a10 	vmov	r2, s16
 800829a:	4601      	mov	r1, r0
 800829c:	4607      	mov	r7, r0
 800829e:	4620      	mov	r0, r4
 80082a0:	f000 ff24 	bl	80090ec <__multiply>
 80082a4:	ee18 1a10 	vmov	r1, s16
 80082a8:	4680      	mov	r8, r0
 80082aa:	4620      	mov	r0, r4
 80082ac:	f000 fe06 	bl	8008ebc <_Bfree>
 80082b0:	ee08 8a10 	vmov	s16, r8
 80082b4:	9b07      	ldr	r3, [sp, #28]
 80082b6:	1b9a      	subs	r2, r3, r6
 80082b8:	d006      	beq.n	80082c8 <_dtoa_r+0x7a0>
 80082ba:	ee18 1a10 	vmov	r1, s16
 80082be:	4620      	mov	r0, r4
 80082c0:	f000 ffbe 	bl	8009240 <__pow5mult>
 80082c4:	ee08 0a10 	vmov	s16, r0
 80082c8:	2101      	movs	r1, #1
 80082ca:	4620      	mov	r0, r4
 80082cc:	f000 fef8 	bl	80090c0 <__i2b>
 80082d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	4606      	mov	r6, r0
 80082d6:	f340 8088 	ble.w	80083ea <_dtoa_r+0x8c2>
 80082da:	461a      	mov	r2, r3
 80082dc:	4601      	mov	r1, r0
 80082de:	4620      	mov	r0, r4
 80082e0:	f000 ffae 	bl	8009240 <__pow5mult>
 80082e4:	9b06      	ldr	r3, [sp, #24]
 80082e6:	2b01      	cmp	r3, #1
 80082e8:	4606      	mov	r6, r0
 80082ea:	f340 8081 	ble.w	80083f0 <_dtoa_r+0x8c8>
 80082ee:	f04f 0800 	mov.w	r8, #0
 80082f2:	6933      	ldr	r3, [r6, #16]
 80082f4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80082f8:	6918      	ldr	r0, [r3, #16]
 80082fa:	f000 fe91 	bl	8009020 <__hi0bits>
 80082fe:	f1c0 0020 	rsb	r0, r0, #32
 8008302:	9b05      	ldr	r3, [sp, #20]
 8008304:	4418      	add	r0, r3
 8008306:	f010 001f 	ands.w	r0, r0, #31
 800830a:	f000 8092 	beq.w	8008432 <_dtoa_r+0x90a>
 800830e:	f1c0 0320 	rsb	r3, r0, #32
 8008312:	2b04      	cmp	r3, #4
 8008314:	f340 808a 	ble.w	800842c <_dtoa_r+0x904>
 8008318:	f1c0 001c 	rsb	r0, r0, #28
 800831c:	9b04      	ldr	r3, [sp, #16]
 800831e:	4403      	add	r3, r0
 8008320:	9304      	str	r3, [sp, #16]
 8008322:	9b05      	ldr	r3, [sp, #20]
 8008324:	4403      	add	r3, r0
 8008326:	4405      	add	r5, r0
 8008328:	9305      	str	r3, [sp, #20]
 800832a:	9b04      	ldr	r3, [sp, #16]
 800832c:	2b00      	cmp	r3, #0
 800832e:	dd07      	ble.n	8008340 <_dtoa_r+0x818>
 8008330:	ee18 1a10 	vmov	r1, s16
 8008334:	461a      	mov	r2, r3
 8008336:	4620      	mov	r0, r4
 8008338:	f000 ffdc 	bl	80092f4 <__lshift>
 800833c:	ee08 0a10 	vmov	s16, r0
 8008340:	9b05      	ldr	r3, [sp, #20]
 8008342:	2b00      	cmp	r3, #0
 8008344:	dd05      	ble.n	8008352 <_dtoa_r+0x82a>
 8008346:	4631      	mov	r1, r6
 8008348:	461a      	mov	r2, r3
 800834a:	4620      	mov	r0, r4
 800834c:	f000 ffd2 	bl	80092f4 <__lshift>
 8008350:	4606      	mov	r6, r0
 8008352:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008354:	2b00      	cmp	r3, #0
 8008356:	d06e      	beq.n	8008436 <_dtoa_r+0x90e>
 8008358:	ee18 0a10 	vmov	r0, s16
 800835c:	4631      	mov	r1, r6
 800835e:	f001 f839 	bl	80093d4 <__mcmp>
 8008362:	2800      	cmp	r0, #0
 8008364:	da67      	bge.n	8008436 <_dtoa_r+0x90e>
 8008366:	9b00      	ldr	r3, [sp, #0]
 8008368:	3b01      	subs	r3, #1
 800836a:	ee18 1a10 	vmov	r1, s16
 800836e:	9300      	str	r3, [sp, #0]
 8008370:	220a      	movs	r2, #10
 8008372:	2300      	movs	r3, #0
 8008374:	4620      	mov	r0, r4
 8008376:	f000 fdc3 	bl	8008f00 <__multadd>
 800837a:	9b08      	ldr	r3, [sp, #32]
 800837c:	ee08 0a10 	vmov	s16, r0
 8008380:	2b00      	cmp	r3, #0
 8008382:	f000 81b1 	beq.w	80086e8 <_dtoa_r+0xbc0>
 8008386:	2300      	movs	r3, #0
 8008388:	4639      	mov	r1, r7
 800838a:	220a      	movs	r2, #10
 800838c:	4620      	mov	r0, r4
 800838e:	f000 fdb7 	bl	8008f00 <__multadd>
 8008392:	9b02      	ldr	r3, [sp, #8]
 8008394:	2b00      	cmp	r3, #0
 8008396:	4607      	mov	r7, r0
 8008398:	f300 808e 	bgt.w	80084b8 <_dtoa_r+0x990>
 800839c:	9b06      	ldr	r3, [sp, #24]
 800839e:	2b02      	cmp	r3, #2
 80083a0:	dc51      	bgt.n	8008446 <_dtoa_r+0x91e>
 80083a2:	e089      	b.n	80084b8 <_dtoa_r+0x990>
 80083a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80083a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80083aa:	e74b      	b.n	8008244 <_dtoa_r+0x71c>
 80083ac:	9b03      	ldr	r3, [sp, #12]
 80083ae:	1e5e      	subs	r6, r3, #1
 80083b0:	9b07      	ldr	r3, [sp, #28]
 80083b2:	42b3      	cmp	r3, r6
 80083b4:	bfbf      	itttt	lt
 80083b6:	9b07      	ldrlt	r3, [sp, #28]
 80083b8:	9607      	strlt	r6, [sp, #28]
 80083ba:	1af2      	sublt	r2, r6, r3
 80083bc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80083be:	bfb6      	itet	lt
 80083c0:	189b      	addlt	r3, r3, r2
 80083c2:	1b9e      	subge	r6, r3, r6
 80083c4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80083c6:	9b03      	ldr	r3, [sp, #12]
 80083c8:	bfb8      	it	lt
 80083ca:	2600      	movlt	r6, #0
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	bfb7      	itett	lt
 80083d0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80083d4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80083d8:	1a9d      	sublt	r5, r3, r2
 80083da:	2300      	movlt	r3, #0
 80083dc:	e734      	b.n	8008248 <_dtoa_r+0x720>
 80083de:	9e07      	ldr	r6, [sp, #28]
 80083e0:	9d04      	ldr	r5, [sp, #16]
 80083e2:	9f08      	ldr	r7, [sp, #32]
 80083e4:	e73b      	b.n	800825e <_dtoa_r+0x736>
 80083e6:	9a07      	ldr	r2, [sp, #28]
 80083e8:	e767      	b.n	80082ba <_dtoa_r+0x792>
 80083ea:	9b06      	ldr	r3, [sp, #24]
 80083ec:	2b01      	cmp	r3, #1
 80083ee:	dc18      	bgt.n	8008422 <_dtoa_r+0x8fa>
 80083f0:	f1ba 0f00 	cmp.w	sl, #0
 80083f4:	d115      	bne.n	8008422 <_dtoa_r+0x8fa>
 80083f6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80083fa:	b993      	cbnz	r3, 8008422 <_dtoa_r+0x8fa>
 80083fc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008400:	0d1b      	lsrs	r3, r3, #20
 8008402:	051b      	lsls	r3, r3, #20
 8008404:	b183      	cbz	r3, 8008428 <_dtoa_r+0x900>
 8008406:	9b04      	ldr	r3, [sp, #16]
 8008408:	3301      	adds	r3, #1
 800840a:	9304      	str	r3, [sp, #16]
 800840c:	9b05      	ldr	r3, [sp, #20]
 800840e:	3301      	adds	r3, #1
 8008410:	9305      	str	r3, [sp, #20]
 8008412:	f04f 0801 	mov.w	r8, #1
 8008416:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008418:	2b00      	cmp	r3, #0
 800841a:	f47f af6a 	bne.w	80082f2 <_dtoa_r+0x7ca>
 800841e:	2001      	movs	r0, #1
 8008420:	e76f      	b.n	8008302 <_dtoa_r+0x7da>
 8008422:	f04f 0800 	mov.w	r8, #0
 8008426:	e7f6      	b.n	8008416 <_dtoa_r+0x8ee>
 8008428:	4698      	mov	r8, r3
 800842a:	e7f4      	b.n	8008416 <_dtoa_r+0x8ee>
 800842c:	f43f af7d 	beq.w	800832a <_dtoa_r+0x802>
 8008430:	4618      	mov	r0, r3
 8008432:	301c      	adds	r0, #28
 8008434:	e772      	b.n	800831c <_dtoa_r+0x7f4>
 8008436:	9b03      	ldr	r3, [sp, #12]
 8008438:	2b00      	cmp	r3, #0
 800843a:	dc37      	bgt.n	80084ac <_dtoa_r+0x984>
 800843c:	9b06      	ldr	r3, [sp, #24]
 800843e:	2b02      	cmp	r3, #2
 8008440:	dd34      	ble.n	80084ac <_dtoa_r+0x984>
 8008442:	9b03      	ldr	r3, [sp, #12]
 8008444:	9302      	str	r3, [sp, #8]
 8008446:	9b02      	ldr	r3, [sp, #8]
 8008448:	b96b      	cbnz	r3, 8008466 <_dtoa_r+0x93e>
 800844a:	4631      	mov	r1, r6
 800844c:	2205      	movs	r2, #5
 800844e:	4620      	mov	r0, r4
 8008450:	f000 fd56 	bl	8008f00 <__multadd>
 8008454:	4601      	mov	r1, r0
 8008456:	4606      	mov	r6, r0
 8008458:	ee18 0a10 	vmov	r0, s16
 800845c:	f000 ffba 	bl	80093d4 <__mcmp>
 8008460:	2800      	cmp	r0, #0
 8008462:	f73f adbb 	bgt.w	8007fdc <_dtoa_r+0x4b4>
 8008466:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008468:	9d01      	ldr	r5, [sp, #4]
 800846a:	43db      	mvns	r3, r3
 800846c:	9300      	str	r3, [sp, #0]
 800846e:	f04f 0800 	mov.w	r8, #0
 8008472:	4631      	mov	r1, r6
 8008474:	4620      	mov	r0, r4
 8008476:	f000 fd21 	bl	8008ebc <_Bfree>
 800847a:	2f00      	cmp	r7, #0
 800847c:	f43f aea4 	beq.w	80081c8 <_dtoa_r+0x6a0>
 8008480:	f1b8 0f00 	cmp.w	r8, #0
 8008484:	d005      	beq.n	8008492 <_dtoa_r+0x96a>
 8008486:	45b8      	cmp	r8, r7
 8008488:	d003      	beq.n	8008492 <_dtoa_r+0x96a>
 800848a:	4641      	mov	r1, r8
 800848c:	4620      	mov	r0, r4
 800848e:	f000 fd15 	bl	8008ebc <_Bfree>
 8008492:	4639      	mov	r1, r7
 8008494:	4620      	mov	r0, r4
 8008496:	f000 fd11 	bl	8008ebc <_Bfree>
 800849a:	e695      	b.n	80081c8 <_dtoa_r+0x6a0>
 800849c:	2600      	movs	r6, #0
 800849e:	4637      	mov	r7, r6
 80084a0:	e7e1      	b.n	8008466 <_dtoa_r+0x93e>
 80084a2:	9700      	str	r7, [sp, #0]
 80084a4:	4637      	mov	r7, r6
 80084a6:	e599      	b.n	8007fdc <_dtoa_r+0x4b4>
 80084a8:	40240000 	.word	0x40240000
 80084ac:	9b08      	ldr	r3, [sp, #32]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	f000 80ca 	beq.w	8008648 <_dtoa_r+0xb20>
 80084b4:	9b03      	ldr	r3, [sp, #12]
 80084b6:	9302      	str	r3, [sp, #8]
 80084b8:	2d00      	cmp	r5, #0
 80084ba:	dd05      	ble.n	80084c8 <_dtoa_r+0x9a0>
 80084bc:	4639      	mov	r1, r7
 80084be:	462a      	mov	r2, r5
 80084c0:	4620      	mov	r0, r4
 80084c2:	f000 ff17 	bl	80092f4 <__lshift>
 80084c6:	4607      	mov	r7, r0
 80084c8:	f1b8 0f00 	cmp.w	r8, #0
 80084cc:	d05b      	beq.n	8008586 <_dtoa_r+0xa5e>
 80084ce:	6879      	ldr	r1, [r7, #4]
 80084d0:	4620      	mov	r0, r4
 80084d2:	f000 fcb3 	bl	8008e3c <_Balloc>
 80084d6:	4605      	mov	r5, r0
 80084d8:	b928      	cbnz	r0, 80084e6 <_dtoa_r+0x9be>
 80084da:	4b87      	ldr	r3, [pc, #540]	; (80086f8 <_dtoa_r+0xbd0>)
 80084dc:	4602      	mov	r2, r0
 80084de:	f240 21ea 	movw	r1, #746	; 0x2ea
 80084e2:	f7ff bb3b 	b.w	8007b5c <_dtoa_r+0x34>
 80084e6:	693a      	ldr	r2, [r7, #16]
 80084e8:	3202      	adds	r2, #2
 80084ea:	0092      	lsls	r2, r2, #2
 80084ec:	f107 010c 	add.w	r1, r7, #12
 80084f0:	300c      	adds	r0, #12
 80084f2:	f000 fc95 	bl	8008e20 <memcpy>
 80084f6:	2201      	movs	r2, #1
 80084f8:	4629      	mov	r1, r5
 80084fa:	4620      	mov	r0, r4
 80084fc:	f000 fefa 	bl	80092f4 <__lshift>
 8008500:	9b01      	ldr	r3, [sp, #4]
 8008502:	f103 0901 	add.w	r9, r3, #1
 8008506:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800850a:	4413      	add	r3, r2
 800850c:	9305      	str	r3, [sp, #20]
 800850e:	f00a 0301 	and.w	r3, sl, #1
 8008512:	46b8      	mov	r8, r7
 8008514:	9304      	str	r3, [sp, #16]
 8008516:	4607      	mov	r7, r0
 8008518:	4631      	mov	r1, r6
 800851a:	ee18 0a10 	vmov	r0, s16
 800851e:	f7ff fa77 	bl	8007a10 <quorem>
 8008522:	4641      	mov	r1, r8
 8008524:	9002      	str	r0, [sp, #8]
 8008526:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800852a:	ee18 0a10 	vmov	r0, s16
 800852e:	f000 ff51 	bl	80093d4 <__mcmp>
 8008532:	463a      	mov	r2, r7
 8008534:	9003      	str	r0, [sp, #12]
 8008536:	4631      	mov	r1, r6
 8008538:	4620      	mov	r0, r4
 800853a:	f000 ff67 	bl	800940c <__mdiff>
 800853e:	68c2      	ldr	r2, [r0, #12]
 8008540:	f109 3bff 	add.w	fp, r9, #4294967295
 8008544:	4605      	mov	r5, r0
 8008546:	bb02      	cbnz	r2, 800858a <_dtoa_r+0xa62>
 8008548:	4601      	mov	r1, r0
 800854a:	ee18 0a10 	vmov	r0, s16
 800854e:	f000 ff41 	bl	80093d4 <__mcmp>
 8008552:	4602      	mov	r2, r0
 8008554:	4629      	mov	r1, r5
 8008556:	4620      	mov	r0, r4
 8008558:	9207      	str	r2, [sp, #28]
 800855a:	f000 fcaf 	bl	8008ebc <_Bfree>
 800855e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008562:	ea43 0102 	orr.w	r1, r3, r2
 8008566:	9b04      	ldr	r3, [sp, #16]
 8008568:	430b      	orrs	r3, r1
 800856a:	464d      	mov	r5, r9
 800856c:	d10f      	bne.n	800858e <_dtoa_r+0xa66>
 800856e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008572:	d02a      	beq.n	80085ca <_dtoa_r+0xaa2>
 8008574:	9b03      	ldr	r3, [sp, #12]
 8008576:	2b00      	cmp	r3, #0
 8008578:	dd02      	ble.n	8008580 <_dtoa_r+0xa58>
 800857a:	9b02      	ldr	r3, [sp, #8]
 800857c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008580:	f88b a000 	strb.w	sl, [fp]
 8008584:	e775      	b.n	8008472 <_dtoa_r+0x94a>
 8008586:	4638      	mov	r0, r7
 8008588:	e7ba      	b.n	8008500 <_dtoa_r+0x9d8>
 800858a:	2201      	movs	r2, #1
 800858c:	e7e2      	b.n	8008554 <_dtoa_r+0xa2c>
 800858e:	9b03      	ldr	r3, [sp, #12]
 8008590:	2b00      	cmp	r3, #0
 8008592:	db04      	blt.n	800859e <_dtoa_r+0xa76>
 8008594:	9906      	ldr	r1, [sp, #24]
 8008596:	430b      	orrs	r3, r1
 8008598:	9904      	ldr	r1, [sp, #16]
 800859a:	430b      	orrs	r3, r1
 800859c:	d122      	bne.n	80085e4 <_dtoa_r+0xabc>
 800859e:	2a00      	cmp	r2, #0
 80085a0:	ddee      	ble.n	8008580 <_dtoa_r+0xa58>
 80085a2:	ee18 1a10 	vmov	r1, s16
 80085a6:	2201      	movs	r2, #1
 80085a8:	4620      	mov	r0, r4
 80085aa:	f000 fea3 	bl	80092f4 <__lshift>
 80085ae:	4631      	mov	r1, r6
 80085b0:	ee08 0a10 	vmov	s16, r0
 80085b4:	f000 ff0e 	bl	80093d4 <__mcmp>
 80085b8:	2800      	cmp	r0, #0
 80085ba:	dc03      	bgt.n	80085c4 <_dtoa_r+0xa9c>
 80085bc:	d1e0      	bne.n	8008580 <_dtoa_r+0xa58>
 80085be:	f01a 0f01 	tst.w	sl, #1
 80085c2:	d0dd      	beq.n	8008580 <_dtoa_r+0xa58>
 80085c4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80085c8:	d1d7      	bne.n	800857a <_dtoa_r+0xa52>
 80085ca:	2339      	movs	r3, #57	; 0x39
 80085cc:	f88b 3000 	strb.w	r3, [fp]
 80085d0:	462b      	mov	r3, r5
 80085d2:	461d      	mov	r5, r3
 80085d4:	3b01      	subs	r3, #1
 80085d6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80085da:	2a39      	cmp	r2, #57	; 0x39
 80085dc:	d071      	beq.n	80086c2 <_dtoa_r+0xb9a>
 80085de:	3201      	adds	r2, #1
 80085e0:	701a      	strb	r2, [r3, #0]
 80085e2:	e746      	b.n	8008472 <_dtoa_r+0x94a>
 80085e4:	2a00      	cmp	r2, #0
 80085e6:	dd07      	ble.n	80085f8 <_dtoa_r+0xad0>
 80085e8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80085ec:	d0ed      	beq.n	80085ca <_dtoa_r+0xaa2>
 80085ee:	f10a 0301 	add.w	r3, sl, #1
 80085f2:	f88b 3000 	strb.w	r3, [fp]
 80085f6:	e73c      	b.n	8008472 <_dtoa_r+0x94a>
 80085f8:	9b05      	ldr	r3, [sp, #20]
 80085fa:	f809 ac01 	strb.w	sl, [r9, #-1]
 80085fe:	4599      	cmp	r9, r3
 8008600:	d047      	beq.n	8008692 <_dtoa_r+0xb6a>
 8008602:	ee18 1a10 	vmov	r1, s16
 8008606:	2300      	movs	r3, #0
 8008608:	220a      	movs	r2, #10
 800860a:	4620      	mov	r0, r4
 800860c:	f000 fc78 	bl	8008f00 <__multadd>
 8008610:	45b8      	cmp	r8, r7
 8008612:	ee08 0a10 	vmov	s16, r0
 8008616:	f04f 0300 	mov.w	r3, #0
 800861a:	f04f 020a 	mov.w	r2, #10
 800861e:	4641      	mov	r1, r8
 8008620:	4620      	mov	r0, r4
 8008622:	d106      	bne.n	8008632 <_dtoa_r+0xb0a>
 8008624:	f000 fc6c 	bl	8008f00 <__multadd>
 8008628:	4680      	mov	r8, r0
 800862a:	4607      	mov	r7, r0
 800862c:	f109 0901 	add.w	r9, r9, #1
 8008630:	e772      	b.n	8008518 <_dtoa_r+0x9f0>
 8008632:	f000 fc65 	bl	8008f00 <__multadd>
 8008636:	4639      	mov	r1, r7
 8008638:	4680      	mov	r8, r0
 800863a:	2300      	movs	r3, #0
 800863c:	220a      	movs	r2, #10
 800863e:	4620      	mov	r0, r4
 8008640:	f000 fc5e 	bl	8008f00 <__multadd>
 8008644:	4607      	mov	r7, r0
 8008646:	e7f1      	b.n	800862c <_dtoa_r+0xb04>
 8008648:	9b03      	ldr	r3, [sp, #12]
 800864a:	9302      	str	r3, [sp, #8]
 800864c:	9d01      	ldr	r5, [sp, #4]
 800864e:	ee18 0a10 	vmov	r0, s16
 8008652:	4631      	mov	r1, r6
 8008654:	f7ff f9dc 	bl	8007a10 <quorem>
 8008658:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800865c:	9b01      	ldr	r3, [sp, #4]
 800865e:	f805 ab01 	strb.w	sl, [r5], #1
 8008662:	1aea      	subs	r2, r5, r3
 8008664:	9b02      	ldr	r3, [sp, #8]
 8008666:	4293      	cmp	r3, r2
 8008668:	dd09      	ble.n	800867e <_dtoa_r+0xb56>
 800866a:	ee18 1a10 	vmov	r1, s16
 800866e:	2300      	movs	r3, #0
 8008670:	220a      	movs	r2, #10
 8008672:	4620      	mov	r0, r4
 8008674:	f000 fc44 	bl	8008f00 <__multadd>
 8008678:	ee08 0a10 	vmov	s16, r0
 800867c:	e7e7      	b.n	800864e <_dtoa_r+0xb26>
 800867e:	9b02      	ldr	r3, [sp, #8]
 8008680:	2b00      	cmp	r3, #0
 8008682:	bfc8      	it	gt
 8008684:	461d      	movgt	r5, r3
 8008686:	9b01      	ldr	r3, [sp, #4]
 8008688:	bfd8      	it	le
 800868a:	2501      	movle	r5, #1
 800868c:	441d      	add	r5, r3
 800868e:	f04f 0800 	mov.w	r8, #0
 8008692:	ee18 1a10 	vmov	r1, s16
 8008696:	2201      	movs	r2, #1
 8008698:	4620      	mov	r0, r4
 800869a:	f000 fe2b 	bl	80092f4 <__lshift>
 800869e:	4631      	mov	r1, r6
 80086a0:	ee08 0a10 	vmov	s16, r0
 80086a4:	f000 fe96 	bl	80093d4 <__mcmp>
 80086a8:	2800      	cmp	r0, #0
 80086aa:	dc91      	bgt.n	80085d0 <_dtoa_r+0xaa8>
 80086ac:	d102      	bne.n	80086b4 <_dtoa_r+0xb8c>
 80086ae:	f01a 0f01 	tst.w	sl, #1
 80086b2:	d18d      	bne.n	80085d0 <_dtoa_r+0xaa8>
 80086b4:	462b      	mov	r3, r5
 80086b6:	461d      	mov	r5, r3
 80086b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80086bc:	2a30      	cmp	r2, #48	; 0x30
 80086be:	d0fa      	beq.n	80086b6 <_dtoa_r+0xb8e>
 80086c0:	e6d7      	b.n	8008472 <_dtoa_r+0x94a>
 80086c2:	9a01      	ldr	r2, [sp, #4]
 80086c4:	429a      	cmp	r2, r3
 80086c6:	d184      	bne.n	80085d2 <_dtoa_r+0xaaa>
 80086c8:	9b00      	ldr	r3, [sp, #0]
 80086ca:	3301      	adds	r3, #1
 80086cc:	9300      	str	r3, [sp, #0]
 80086ce:	2331      	movs	r3, #49	; 0x31
 80086d0:	7013      	strb	r3, [r2, #0]
 80086d2:	e6ce      	b.n	8008472 <_dtoa_r+0x94a>
 80086d4:	4b09      	ldr	r3, [pc, #36]	; (80086fc <_dtoa_r+0xbd4>)
 80086d6:	f7ff ba95 	b.w	8007c04 <_dtoa_r+0xdc>
 80086da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80086dc:	2b00      	cmp	r3, #0
 80086de:	f47f aa6e 	bne.w	8007bbe <_dtoa_r+0x96>
 80086e2:	4b07      	ldr	r3, [pc, #28]	; (8008700 <_dtoa_r+0xbd8>)
 80086e4:	f7ff ba8e 	b.w	8007c04 <_dtoa_r+0xdc>
 80086e8:	9b02      	ldr	r3, [sp, #8]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	dcae      	bgt.n	800864c <_dtoa_r+0xb24>
 80086ee:	9b06      	ldr	r3, [sp, #24]
 80086f0:	2b02      	cmp	r3, #2
 80086f2:	f73f aea8 	bgt.w	8008446 <_dtoa_r+0x91e>
 80086f6:	e7a9      	b.n	800864c <_dtoa_r+0xb24>
 80086f8:	0800b2e8 	.word	0x0800b2e8
 80086fc:	0800b0ec 	.word	0x0800b0ec
 8008700:	0800b269 	.word	0x0800b269

08008704 <rshift>:
 8008704:	6903      	ldr	r3, [r0, #16]
 8008706:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800870a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800870e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008712:	f100 0414 	add.w	r4, r0, #20
 8008716:	dd45      	ble.n	80087a4 <rshift+0xa0>
 8008718:	f011 011f 	ands.w	r1, r1, #31
 800871c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008720:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008724:	d10c      	bne.n	8008740 <rshift+0x3c>
 8008726:	f100 0710 	add.w	r7, r0, #16
 800872a:	4629      	mov	r1, r5
 800872c:	42b1      	cmp	r1, r6
 800872e:	d334      	bcc.n	800879a <rshift+0x96>
 8008730:	1a9b      	subs	r3, r3, r2
 8008732:	009b      	lsls	r3, r3, #2
 8008734:	1eea      	subs	r2, r5, #3
 8008736:	4296      	cmp	r6, r2
 8008738:	bf38      	it	cc
 800873a:	2300      	movcc	r3, #0
 800873c:	4423      	add	r3, r4
 800873e:	e015      	b.n	800876c <rshift+0x68>
 8008740:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008744:	f1c1 0820 	rsb	r8, r1, #32
 8008748:	40cf      	lsrs	r7, r1
 800874a:	f105 0e04 	add.w	lr, r5, #4
 800874e:	46a1      	mov	r9, r4
 8008750:	4576      	cmp	r6, lr
 8008752:	46f4      	mov	ip, lr
 8008754:	d815      	bhi.n	8008782 <rshift+0x7e>
 8008756:	1a9a      	subs	r2, r3, r2
 8008758:	0092      	lsls	r2, r2, #2
 800875a:	3a04      	subs	r2, #4
 800875c:	3501      	adds	r5, #1
 800875e:	42ae      	cmp	r6, r5
 8008760:	bf38      	it	cc
 8008762:	2200      	movcc	r2, #0
 8008764:	18a3      	adds	r3, r4, r2
 8008766:	50a7      	str	r7, [r4, r2]
 8008768:	b107      	cbz	r7, 800876c <rshift+0x68>
 800876a:	3304      	adds	r3, #4
 800876c:	1b1a      	subs	r2, r3, r4
 800876e:	42a3      	cmp	r3, r4
 8008770:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008774:	bf08      	it	eq
 8008776:	2300      	moveq	r3, #0
 8008778:	6102      	str	r2, [r0, #16]
 800877a:	bf08      	it	eq
 800877c:	6143      	streq	r3, [r0, #20]
 800877e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008782:	f8dc c000 	ldr.w	ip, [ip]
 8008786:	fa0c fc08 	lsl.w	ip, ip, r8
 800878a:	ea4c 0707 	orr.w	r7, ip, r7
 800878e:	f849 7b04 	str.w	r7, [r9], #4
 8008792:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008796:	40cf      	lsrs	r7, r1
 8008798:	e7da      	b.n	8008750 <rshift+0x4c>
 800879a:	f851 cb04 	ldr.w	ip, [r1], #4
 800879e:	f847 cf04 	str.w	ip, [r7, #4]!
 80087a2:	e7c3      	b.n	800872c <rshift+0x28>
 80087a4:	4623      	mov	r3, r4
 80087a6:	e7e1      	b.n	800876c <rshift+0x68>

080087a8 <__hexdig_fun>:
 80087a8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80087ac:	2b09      	cmp	r3, #9
 80087ae:	d802      	bhi.n	80087b6 <__hexdig_fun+0xe>
 80087b0:	3820      	subs	r0, #32
 80087b2:	b2c0      	uxtb	r0, r0
 80087b4:	4770      	bx	lr
 80087b6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80087ba:	2b05      	cmp	r3, #5
 80087bc:	d801      	bhi.n	80087c2 <__hexdig_fun+0x1a>
 80087be:	3847      	subs	r0, #71	; 0x47
 80087c0:	e7f7      	b.n	80087b2 <__hexdig_fun+0xa>
 80087c2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80087c6:	2b05      	cmp	r3, #5
 80087c8:	d801      	bhi.n	80087ce <__hexdig_fun+0x26>
 80087ca:	3827      	subs	r0, #39	; 0x27
 80087cc:	e7f1      	b.n	80087b2 <__hexdig_fun+0xa>
 80087ce:	2000      	movs	r0, #0
 80087d0:	4770      	bx	lr
	...

080087d4 <__gethex>:
 80087d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087d8:	ed2d 8b02 	vpush	{d8}
 80087dc:	b089      	sub	sp, #36	; 0x24
 80087de:	ee08 0a10 	vmov	s16, r0
 80087e2:	9304      	str	r3, [sp, #16]
 80087e4:	4bb4      	ldr	r3, [pc, #720]	; (8008ab8 <__gethex+0x2e4>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	9301      	str	r3, [sp, #4]
 80087ea:	4618      	mov	r0, r3
 80087ec:	468b      	mov	fp, r1
 80087ee:	4690      	mov	r8, r2
 80087f0:	f7f7 fcee 	bl	80001d0 <strlen>
 80087f4:	9b01      	ldr	r3, [sp, #4]
 80087f6:	f8db 2000 	ldr.w	r2, [fp]
 80087fa:	4403      	add	r3, r0
 80087fc:	4682      	mov	sl, r0
 80087fe:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008802:	9305      	str	r3, [sp, #20]
 8008804:	1c93      	adds	r3, r2, #2
 8008806:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800880a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800880e:	32fe      	adds	r2, #254	; 0xfe
 8008810:	18d1      	adds	r1, r2, r3
 8008812:	461f      	mov	r7, r3
 8008814:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008818:	9100      	str	r1, [sp, #0]
 800881a:	2830      	cmp	r0, #48	; 0x30
 800881c:	d0f8      	beq.n	8008810 <__gethex+0x3c>
 800881e:	f7ff ffc3 	bl	80087a8 <__hexdig_fun>
 8008822:	4604      	mov	r4, r0
 8008824:	2800      	cmp	r0, #0
 8008826:	d13a      	bne.n	800889e <__gethex+0xca>
 8008828:	9901      	ldr	r1, [sp, #4]
 800882a:	4652      	mov	r2, sl
 800882c:	4638      	mov	r0, r7
 800882e:	f001 fa33 	bl	8009c98 <strncmp>
 8008832:	4605      	mov	r5, r0
 8008834:	2800      	cmp	r0, #0
 8008836:	d168      	bne.n	800890a <__gethex+0x136>
 8008838:	f817 000a 	ldrb.w	r0, [r7, sl]
 800883c:	eb07 060a 	add.w	r6, r7, sl
 8008840:	f7ff ffb2 	bl	80087a8 <__hexdig_fun>
 8008844:	2800      	cmp	r0, #0
 8008846:	d062      	beq.n	800890e <__gethex+0x13a>
 8008848:	4633      	mov	r3, r6
 800884a:	7818      	ldrb	r0, [r3, #0]
 800884c:	2830      	cmp	r0, #48	; 0x30
 800884e:	461f      	mov	r7, r3
 8008850:	f103 0301 	add.w	r3, r3, #1
 8008854:	d0f9      	beq.n	800884a <__gethex+0x76>
 8008856:	f7ff ffa7 	bl	80087a8 <__hexdig_fun>
 800885a:	2301      	movs	r3, #1
 800885c:	fab0 f480 	clz	r4, r0
 8008860:	0964      	lsrs	r4, r4, #5
 8008862:	4635      	mov	r5, r6
 8008864:	9300      	str	r3, [sp, #0]
 8008866:	463a      	mov	r2, r7
 8008868:	4616      	mov	r6, r2
 800886a:	3201      	adds	r2, #1
 800886c:	7830      	ldrb	r0, [r6, #0]
 800886e:	f7ff ff9b 	bl	80087a8 <__hexdig_fun>
 8008872:	2800      	cmp	r0, #0
 8008874:	d1f8      	bne.n	8008868 <__gethex+0x94>
 8008876:	9901      	ldr	r1, [sp, #4]
 8008878:	4652      	mov	r2, sl
 800887a:	4630      	mov	r0, r6
 800887c:	f001 fa0c 	bl	8009c98 <strncmp>
 8008880:	b980      	cbnz	r0, 80088a4 <__gethex+0xd0>
 8008882:	b94d      	cbnz	r5, 8008898 <__gethex+0xc4>
 8008884:	eb06 050a 	add.w	r5, r6, sl
 8008888:	462a      	mov	r2, r5
 800888a:	4616      	mov	r6, r2
 800888c:	3201      	adds	r2, #1
 800888e:	7830      	ldrb	r0, [r6, #0]
 8008890:	f7ff ff8a 	bl	80087a8 <__hexdig_fun>
 8008894:	2800      	cmp	r0, #0
 8008896:	d1f8      	bne.n	800888a <__gethex+0xb6>
 8008898:	1bad      	subs	r5, r5, r6
 800889a:	00ad      	lsls	r5, r5, #2
 800889c:	e004      	b.n	80088a8 <__gethex+0xd4>
 800889e:	2400      	movs	r4, #0
 80088a0:	4625      	mov	r5, r4
 80088a2:	e7e0      	b.n	8008866 <__gethex+0x92>
 80088a4:	2d00      	cmp	r5, #0
 80088a6:	d1f7      	bne.n	8008898 <__gethex+0xc4>
 80088a8:	7833      	ldrb	r3, [r6, #0]
 80088aa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80088ae:	2b50      	cmp	r3, #80	; 0x50
 80088b0:	d13b      	bne.n	800892a <__gethex+0x156>
 80088b2:	7873      	ldrb	r3, [r6, #1]
 80088b4:	2b2b      	cmp	r3, #43	; 0x2b
 80088b6:	d02c      	beq.n	8008912 <__gethex+0x13e>
 80088b8:	2b2d      	cmp	r3, #45	; 0x2d
 80088ba:	d02e      	beq.n	800891a <__gethex+0x146>
 80088bc:	1c71      	adds	r1, r6, #1
 80088be:	f04f 0900 	mov.w	r9, #0
 80088c2:	7808      	ldrb	r0, [r1, #0]
 80088c4:	f7ff ff70 	bl	80087a8 <__hexdig_fun>
 80088c8:	1e43      	subs	r3, r0, #1
 80088ca:	b2db      	uxtb	r3, r3
 80088cc:	2b18      	cmp	r3, #24
 80088ce:	d82c      	bhi.n	800892a <__gethex+0x156>
 80088d0:	f1a0 0210 	sub.w	r2, r0, #16
 80088d4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80088d8:	f7ff ff66 	bl	80087a8 <__hexdig_fun>
 80088dc:	1e43      	subs	r3, r0, #1
 80088de:	b2db      	uxtb	r3, r3
 80088e0:	2b18      	cmp	r3, #24
 80088e2:	d91d      	bls.n	8008920 <__gethex+0x14c>
 80088e4:	f1b9 0f00 	cmp.w	r9, #0
 80088e8:	d000      	beq.n	80088ec <__gethex+0x118>
 80088ea:	4252      	negs	r2, r2
 80088ec:	4415      	add	r5, r2
 80088ee:	f8cb 1000 	str.w	r1, [fp]
 80088f2:	b1e4      	cbz	r4, 800892e <__gethex+0x15a>
 80088f4:	9b00      	ldr	r3, [sp, #0]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	bf14      	ite	ne
 80088fa:	2700      	movne	r7, #0
 80088fc:	2706      	moveq	r7, #6
 80088fe:	4638      	mov	r0, r7
 8008900:	b009      	add	sp, #36	; 0x24
 8008902:	ecbd 8b02 	vpop	{d8}
 8008906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800890a:	463e      	mov	r6, r7
 800890c:	4625      	mov	r5, r4
 800890e:	2401      	movs	r4, #1
 8008910:	e7ca      	b.n	80088a8 <__gethex+0xd4>
 8008912:	f04f 0900 	mov.w	r9, #0
 8008916:	1cb1      	adds	r1, r6, #2
 8008918:	e7d3      	b.n	80088c2 <__gethex+0xee>
 800891a:	f04f 0901 	mov.w	r9, #1
 800891e:	e7fa      	b.n	8008916 <__gethex+0x142>
 8008920:	230a      	movs	r3, #10
 8008922:	fb03 0202 	mla	r2, r3, r2, r0
 8008926:	3a10      	subs	r2, #16
 8008928:	e7d4      	b.n	80088d4 <__gethex+0x100>
 800892a:	4631      	mov	r1, r6
 800892c:	e7df      	b.n	80088ee <__gethex+0x11a>
 800892e:	1bf3      	subs	r3, r6, r7
 8008930:	3b01      	subs	r3, #1
 8008932:	4621      	mov	r1, r4
 8008934:	2b07      	cmp	r3, #7
 8008936:	dc0b      	bgt.n	8008950 <__gethex+0x17c>
 8008938:	ee18 0a10 	vmov	r0, s16
 800893c:	f000 fa7e 	bl	8008e3c <_Balloc>
 8008940:	4604      	mov	r4, r0
 8008942:	b940      	cbnz	r0, 8008956 <__gethex+0x182>
 8008944:	4b5d      	ldr	r3, [pc, #372]	; (8008abc <__gethex+0x2e8>)
 8008946:	4602      	mov	r2, r0
 8008948:	21de      	movs	r1, #222	; 0xde
 800894a:	485d      	ldr	r0, [pc, #372]	; (8008ac0 <__gethex+0x2ec>)
 800894c:	f001 f9c6 	bl	8009cdc <__assert_func>
 8008950:	3101      	adds	r1, #1
 8008952:	105b      	asrs	r3, r3, #1
 8008954:	e7ee      	b.n	8008934 <__gethex+0x160>
 8008956:	f100 0914 	add.w	r9, r0, #20
 800895a:	f04f 0b00 	mov.w	fp, #0
 800895e:	f1ca 0301 	rsb	r3, sl, #1
 8008962:	f8cd 9008 	str.w	r9, [sp, #8]
 8008966:	f8cd b000 	str.w	fp, [sp]
 800896a:	9306      	str	r3, [sp, #24]
 800896c:	42b7      	cmp	r7, r6
 800896e:	d340      	bcc.n	80089f2 <__gethex+0x21e>
 8008970:	9802      	ldr	r0, [sp, #8]
 8008972:	9b00      	ldr	r3, [sp, #0]
 8008974:	f840 3b04 	str.w	r3, [r0], #4
 8008978:	eba0 0009 	sub.w	r0, r0, r9
 800897c:	1080      	asrs	r0, r0, #2
 800897e:	0146      	lsls	r6, r0, #5
 8008980:	6120      	str	r0, [r4, #16]
 8008982:	4618      	mov	r0, r3
 8008984:	f000 fb4c 	bl	8009020 <__hi0bits>
 8008988:	1a30      	subs	r0, r6, r0
 800898a:	f8d8 6000 	ldr.w	r6, [r8]
 800898e:	42b0      	cmp	r0, r6
 8008990:	dd63      	ble.n	8008a5a <__gethex+0x286>
 8008992:	1b87      	subs	r7, r0, r6
 8008994:	4639      	mov	r1, r7
 8008996:	4620      	mov	r0, r4
 8008998:	f000 fef0 	bl	800977c <__any_on>
 800899c:	4682      	mov	sl, r0
 800899e:	b1a8      	cbz	r0, 80089cc <__gethex+0x1f8>
 80089a0:	1e7b      	subs	r3, r7, #1
 80089a2:	1159      	asrs	r1, r3, #5
 80089a4:	f003 021f 	and.w	r2, r3, #31
 80089a8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80089ac:	f04f 0a01 	mov.w	sl, #1
 80089b0:	fa0a f202 	lsl.w	r2, sl, r2
 80089b4:	420a      	tst	r2, r1
 80089b6:	d009      	beq.n	80089cc <__gethex+0x1f8>
 80089b8:	4553      	cmp	r3, sl
 80089ba:	dd05      	ble.n	80089c8 <__gethex+0x1f4>
 80089bc:	1eb9      	subs	r1, r7, #2
 80089be:	4620      	mov	r0, r4
 80089c0:	f000 fedc 	bl	800977c <__any_on>
 80089c4:	2800      	cmp	r0, #0
 80089c6:	d145      	bne.n	8008a54 <__gethex+0x280>
 80089c8:	f04f 0a02 	mov.w	sl, #2
 80089cc:	4639      	mov	r1, r7
 80089ce:	4620      	mov	r0, r4
 80089d0:	f7ff fe98 	bl	8008704 <rshift>
 80089d4:	443d      	add	r5, r7
 80089d6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80089da:	42ab      	cmp	r3, r5
 80089dc:	da4c      	bge.n	8008a78 <__gethex+0x2a4>
 80089de:	ee18 0a10 	vmov	r0, s16
 80089e2:	4621      	mov	r1, r4
 80089e4:	f000 fa6a 	bl	8008ebc <_Bfree>
 80089e8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80089ea:	2300      	movs	r3, #0
 80089ec:	6013      	str	r3, [r2, #0]
 80089ee:	27a3      	movs	r7, #163	; 0xa3
 80089f0:	e785      	b.n	80088fe <__gethex+0x12a>
 80089f2:	1e73      	subs	r3, r6, #1
 80089f4:	9a05      	ldr	r2, [sp, #20]
 80089f6:	9303      	str	r3, [sp, #12]
 80089f8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80089fc:	4293      	cmp	r3, r2
 80089fe:	d019      	beq.n	8008a34 <__gethex+0x260>
 8008a00:	f1bb 0f20 	cmp.w	fp, #32
 8008a04:	d107      	bne.n	8008a16 <__gethex+0x242>
 8008a06:	9b02      	ldr	r3, [sp, #8]
 8008a08:	9a00      	ldr	r2, [sp, #0]
 8008a0a:	f843 2b04 	str.w	r2, [r3], #4
 8008a0e:	9302      	str	r3, [sp, #8]
 8008a10:	2300      	movs	r3, #0
 8008a12:	9300      	str	r3, [sp, #0]
 8008a14:	469b      	mov	fp, r3
 8008a16:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008a1a:	f7ff fec5 	bl	80087a8 <__hexdig_fun>
 8008a1e:	9b00      	ldr	r3, [sp, #0]
 8008a20:	f000 000f 	and.w	r0, r0, #15
 8008a24:	fa00 f00b 	lsl.w	r0, r0, fp
 8008a28:	4303      	orrs	r3, r0
 8008a2a:	9300      	str	r3, [sp, #0]
 8008a2c:	f10b 0b04 	add.w	fp, fp, #4
 8008a30:	9b03      	ldr	r3, [sp, #12]
 8008a32:	e00d      	b.n	8008a50 <__gethex+0x27c>
 8008a34:	9b03      	ldr	r3, [sp, #12]
 8008a36:	9a06      	ldr	r2, [sp, #24]
 8008a38:	4413      	add	r3, r2
 8008a3a:	42bb      	cmp	r3, r7
 8008a3c:	d3e0      	bcc.n	8008a00 <__gethex+0x22c>
 8008a3e:	4618      	mov	r0, r3
 8008a40:	9901      	ldr	r1, [sp, #4]
 8008a42:	9307      	str	r3, [sp, #28]
 8008a44:	4652      	mov	r2, sl
 8008a46:	f001 f927 	bl	8009c98 <strncmp>
 8008a4a:	9b07      	ldr	r3, [sp, #28]
 8008a4c:	2800      	cmp	r0, #0
 8008a4e:	d1d7      	bne.n	8008a00 <__gethex+0x22c>
 8008a50:	461e      	mov	r6, r3
 8008a52:	e78b      	b.n	800896c <__gethex+0x198>
 8008a54:	f04f 0a03 	mov.w	sl, #3
 8008a58:	e7b8      	b.n	80089cc <__gethex+0x1f8>
 8008a5a:	da0a      	bge.n	8008a72 <__gethex+0x29e>
 8008a5c:	1a37      	subs	r7, r6, r0
 8008a5e:	4621      	mov	r1, r4
 8008a60:	ee18 0a10 	vmov	r0, s16
 8008a64:	463a      	mov	r2, r7
 8008a66:	f000 fc45 	bl	80092f4 <__lshift>
 8008a6a:	1bed      	subs	r5, r5, r7
 8008a6c:	4604      	mov	r4, r0
 8008a6e:	f100 0914 	add.w	r9, r0, #20
 8008a72:	f04f 0a00 	mov.w	sl, #0
 8008a76:	e7ae      	b.n	80089d6 <__gethex+0x202>
 8008a78:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008a7c:	42a8      	cmp	r0, r5
 8008a7e:	dd72      	ble.n	8008b66 <__gethex+0x392>
 8008a80:	1b45      	subs	r5, r0, r5
 8008a82:	42ae      	cmp	r6, r5
 8008a84:	dc36      	bgt.n	8008af4 <__gethex+0x320>
 8008a86:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008a8a:	2b02      	cmp	r3, #2
 8008a8c:	d02a      	beq.n	8008ae4 <__gethex+0x310>
 8008a8e:	2b03      	cmp	r3, #3
 8008a90:	d02c      	beq.n	8008aec <__gethex+0x318>
 8008a92:	2b01      	cmp	r3, #1
 8008a94:	d11c      	bne.n	8008ad0 <__gethex+0x2fc>
 8008a96:	42ae      	cmp	r6, r5
 8008a98:	d11a      	bne.n	8008ad0 <__gethex+0x2fc>
 8008a9a:	2e01      	cmp	r6, #1
 8008a9c:	d112      	bne.n	8008ac4 <__gethex+0x2f0>
 8008a9e:	9a04      	ldr	r2, [sp, #16]
 8008aa0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008aa4:	6013      	str	r3, [r2, #0]
 8008aa6:	2301      	movs	r3, #1
 8008aa8:	6123      	str	r3, [r4, #16]
 8008aaa:	f8c9 3000 	str.w	r3, [r9]
 8008aae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008ab0:	2762      	movs	r7, #98	; 0x62
 8008ab2:	601c      	str	r4, [r3, #0]
 8008ab4:	e723      	b.n	80088fe <__gethex+0x12a>
 8008ab6:	bf00      	nop
 8008ab8:	0800b360 	.word	0x0800b360
 8008abc:	0800b2e8 	.word	0x0800b2e8
 8008ac0:	0800b2f9 	.word	0x0800b2f9
 8008ac4:	1e71      	subs	r1, r6, #1
 8008ac6:	4620      	mov	r0, r4
 8008ac8:	f000 fe58 	bl	800977c <__any_on>
 8008acc:	2800      	cmp	r0, #0
 8008ace:	d1e6      	bne.n	8008a9e <__gethex+0x2ca>
 8008ad0:	ee18 0a10 	vmov	r0, s16
 8008ad4:	4621      	mov	r1, r4
 8008ad6:	f000 f9f1 	bl	8008ebc <_Bfree>
 8008ada:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008adc:	2300      	movs	r3, #0
 8008ade:	6013      	str	r3, [r2, #0]
 8008ae0:	2750      	movs	r7, #80	; 0x50
 8008ae2:	e70c      	b.n	80088fe <__gethex+0x12a>
 8008ae4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d1f2      	bne.n	8008ad0 <__gethex+0x2fc>
 8008aea:	e7d8      	b.n	8008a9e <__gethex+0x2ca>
 8008aec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d1d5      	bne.n	8008a9e <__gethex+0x2ca>
 8008af2:	e7ed      	b.n	8008ad0 <__gethex+0x2fc>
 8008af4:	1e6f      	subs	r7, r5, #1
 8008af6:	f1ba 0f00 	cmp.w	sl, #0
 8008afa:	d131      	bne.n	8008b60 <__gethex+0x38c>
 8008afc:	b127      	cbz	r7, 8008b08 <__gethex+0x334>
 8008afe:	4639      	mov	r1, r7
 8008b00:	4620      	mov	r0, r4
 8008b02:	f000 fe3b 	bl	800977c <__any_on>
 8008b06:	4682      	mov	sl, r0
 8008b08:	117b      	asrs	r3, r7, #5
 8008b0a:	2101      	movs	r1, #1
 8008b0c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008b10:	f007 071f 	and.w	r7, r7, #31
 8008b14:	fa01 f707 	lsl.w	r7, r1, r7
 8008b18:	421f      	tst	r7, r3
 8008b1a:	4629      	mov	r1, r5
 8008b1c:	4620      	mov	r0, r4
 8008b1e:	bf18      	it	ne
 8008b20:	f04a 0a02 	orrne.w	sl, sl, #2
 8008b24:	1b76      	subs	r6, r6, r5
 8008b26:	f7ff fded 	bl	8008704 <rshift>
 8008b2a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008b2e:	2702      	movs	r7, #2
 8008b30:	f1ba 0f00 	cmp.w	sl, #0
 8008b34:	d048      	beq.n	8008bc8 <__gethex+0x3f4>
 8008b36:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008b3a:	2b02      	cmp	r3, #2
 8008b3c:	d015      	beq.n	8008b6a <__gethex+0x396>
 8008b3e:	2b03      	cmp	r3, #3
 8008b40:	d017      	beq.n	8008b72 <__gethex+0x39e>
 8008b42:	2b01      	cmp	r3, #1
 8008b44:	d109      	bne.n	8008b5a <__gethex+0x386>
 8008b46:	f01a 0f02 	tst.w	sl, #2
 8008b4a:	d006      	beq.n	8008b5a <__gethex+0x386>
 8008b4c:	f8d9 0000 	ldr.w	r0, [r9]
 8008b50:	ea4a 0a00 	orr.w	sl, sl, r0
 8008b54:	f01a 0f01 	tst.w	sl, #1
 8008b58:	d10e      	bne.n	8008b78 <__gethex+0x3a4>
 8008b5a:	f047 0710 	orr.w	r7, r7, #16
 8008b5e:	e033      	b.n	8008bc8 <__gethex+0x3f4>
 8008b60:	f04f 0a01 	mov.w	sl, #1
 8008b64:	e7d0      	b.n	8008b08 <__gethex+0x334>
 8008b66:	2701      	movs	r7, #1
 8008b68:	e7e2      	b.n	8008b30 <__gethex+0x35c>
 8008b6a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008b6c:	f1c3 0301 	rsb	r3, r3, #1
 8008b70:	9315      	str	r3, [sp, #84]	; 0x54
 8008b72:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d0f0      	beq.n	8008b5a <__gethex+0x386>
 8008b78:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008b7c:	f104 0314 	add.w	r3, r4, #20
 8008b80:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008b84:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008b88:	f04f 0c00 	mov.w	ip, #0
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b92:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008b96:	d01c      	beq.n	8008bd2 <__gethex+0x3fe>
 8008b98:	3201      	adds	r2, #1
 8008b9a:	6002      	str	r2, [r0, #0]
 8008b9c:	2f02      	cmp	r7, #2
 8008b9e:	f104 0314 	add.w	r3, r4, #20
 8008ba2:	d13f      	bne.n	8008c24 <__gethex+0x450>
 8008ba4:	f8d8 2000 	ldr.w	r2, [r8]
 8008ba8:	3a01      	subs	r2, #1
 8008baa:	42b2      	cmp	r2, r6
 8008bac:	d10a      	bne.n	8008bc4 <__gethex+0x3f0>
 8008bae:	1171      	asrs	r1, r6, #5
 8008bb0:	2201      	movs	r2, #1
 8008bb2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008bb6:	f006 061f 	and.w	r6, r6, #31
 8008bba:	fa02 f606 	lsl.w	r6, r2, r6
 8008bbe:	421e      	tst	r6, r3
 8008bc0:	bf18      	it	ne
 8008bc2:	4617      	movne	r7, r2
 8008bc4:	f047 0720 	orr.w	r7, r7, #32
 8008bc8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008bca:	601c      	str	r4, [r3, #0]
 8008bcc:	9b04      	ldr	r3, [sp, #16]
 8008bce:	601d      	str	r5, [r3, #0]
 8008bd0:	e695      	b.n	80088fe <__gethex+0x12a>
 8008bd2:	4299      	cmp	r1, r3
 8008bd4:	f843 cc04 	str.w	ip, [r3, #-4]
 8008bd8:	d8d8      	bhi.n	8008b8c <__gethex+0x3b8>
 8008bda:	68a3      	ldr	r3, [r4, #8]
 8008bdc:	459b      	cmp	fp, r3
 8008bde:	db19      	blt.n	8008c14 <__gethex+0x440>
 8008be0:	6861      	ldr	r1, [r4, #4]
 8008be2:	ee18 0a10 	vmov	r0, s16
 8008be6:	3101      	adds	r1, #1
 8008be8:	f000 f928 	bl	8008e3c <_Balloc>
 8008bec:	4681      	mov	r9, r0
 8008bee:	b918      	cbnz	r0, 8008bf8 <__gethex+0x424>
 8008bf0:	4b1a      	ldr	r3, [pc, #104]	; (8008c5c <__gethex+0x488>)
 8008bf2:	4602      	mov	r2, r0
 8008bf4:	2184      	movs	r1, #132	; 0x84
 8008bf6:	e6a8      	b.n	800894a <__gethex+0x176>
 8008bf8:	6922      	ldr	r2, [r4, #16]
 8008bfa:	3202      	adds	r2, #2
 8008bfc:	f104 010c 	add.w	r1, r4, #12
 8008c00:	0092      	lsls	r2, r2, #2
 8008c02:	300c      	adds	r0, #12
 8008c04:	f000 f90c 	bl	8008e20 <memcpy>
 8008c08:	4621      	mov	r1, r4
 8008c0a:	ee18 0a10 	vmov	r0, s16
 8008c0e:	f000 f955 	bl	8008ebc <_Bfree>
 8008c12:	464c      	mov	r4, r9
 8008c14:	6923      	ldr	r3, [r4, #16]
 8008c16:	1c5a      	adds	r2, r3, #1
 8008c18:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008c1c:	6122      	str	r2, [r4, #16]
 8008c1e:	2201      	movs	r2, #1
 8008c20:	615a      	str	r2, [r3, #20]
 8008c22:	e7bb      	b.n	8008b9c <__gethex+0x3c8>
 8008c24:	6922      	ldr	r2, [r4, #16]
 8008c26:	455a      	cmp	r2, fp
 8008c28:	dd0b      	ble.n	8008c42 <__gethex+0x46e>
 8008c2a:	2101      	movs	r1, #1
 8008c2c:	4620      	mov	r0, r4
 8008c2e:	f7ff fd69 	bl	8008704 <rshift>
 8008c32:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008c36:	3501      	adds	r5, #1
 8008c38:	42ab      	cmp	r3, r5
 8008c3a:	f6ff aed0 	blt.w	80089de <__gethex+0x20a>
 8008c3e:	2701      	movs	r7, #1
 8008c40:	e7c0      	b.n	8008bc4 <__gethex+0x3f0>
 8008c42:	f016 061f 	ands.w	r6, r6, #31
 8008c46:	d0fa      	beq.n	8008c3e <__gethex+0x46a>
 8008c48:	4453      	add	r3, sl
 8008c4a:	f1c6 0620 	rsb	r6, r6, #32
 8008c4e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008c52:	f000 f9e5 	bl	8009020 <__hi0bits>
 8008c56:	42b0      	cmp	r0, r6
 8008c58:	dbe7      	blt.n	8008c2a <__gethex+0x456>
 8008c5a:	e7f0      	b.n	8008c3e <__gethex+0x46a>
 8008c5c:	0800b2e8 	.word	0x0800b2e8

08008c60 <L_shift>:
 8008c60:	f1c2 0208 	rsb	r2, r2, #8
 8008c64:	0092      	lsls	r2, r2, #2
 8008c66:	b570      	push	{r4, r5, r6, lr}
 8008c68:	f1c2 0620 	rsb	r6, r2, #32
 8008c6c:	6843      	ldr	r3, [r0, #4]
 8008c6e:	6804      	ldr	r4, [r0, #0]
 8008c70:	fa03 f506 	lsl.w	r5, r3, r6
 8008c74:	432c      	orrs	r4, r5
 8008c76:	40d3      	lsrs	r3, r2
 8008c78:	6004      	str	r4, [r0, #0]
 8008c7a:	f840 3f04 	str.w	r3, [r0, #4]!
 8008c7e:	4288      	cmp	r0, r1
 8008c80:	d3f4      	bcc.n	8008c6c <L_shift+0xc>
 8008c82:	bd70      	pop	{r4, r5, r6, pc}

08008c84 <__match>:
 8008c84:	b530      	push	{r4, r5, lr}
 8008c86:	6803      	ldr	r3, [r0, #0]
 8008c88:	3301      	adds	r3, #1
 8008c8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c8e:	b914      	cbnz	r4, 8008c96 <__match+0x12>
 8008c90:	6003      	str	r3, [r0, #0]
 8008c92:	2001      	movs	r0, #1
 8008c94:	bd30      	pop	{r4, r5, pc}
 8008c96:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c9a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008c9e:	2d19      	cmp	r5, #25
 8008ca0:	bf98      	it	ls
 8008ca2:	3220      	addls	r2, #32
 8008ca4:	42a2      	cmp	r2, r4
 8008ca6:	d0f0      	beq.n	8008c8a <__match+0x6>
 8008ca8:	2000      	movs	r0, #0
 8008caa:	e7f3      	b.n	8008c94 <__match+0x10>

08008cac <__hexnan>:
 8008cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cb0:	680b      	ldr	r3, [r1, #0]
 8008cb2:	115e      	asrs	r6, r3, #5
 8008cb4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008cb8:	f013 031f 	ands.w	r3, r3, #31
 8008cbc:	b087      	sub	sp, #28
 8008cbe:	bf18      	it	ne
 8008cc0:	3604      	addne	r6, #4
 8008cc2:	2500      	movs	r5, #0
 8008cc4:	1f37      	subs	r7, r6, #4
 8008cc6:	4690      	mov	r8, r2
 8008cc8:	6802      	ldr	r2, [r0, #0]
 8008cca:	9301      	str	r3, [sp, #4]
 8008ccc:	4682      	mov	sl, r0
 8008cce:	f846 5c04 	str.w	r5, [r6, #-4]
 8008cd2:	46b9      	mov	r9, r7
 8008cd4:	463c      	mov	r4, r7
 8008cd6:	9502      	str	r5, [sp, #8]
 8008cd8:	46ab      	mov	fp, r5
 8008cda:	7851      	ldrb	r1, [r2, #1]
 8008cdc:	1c53      	adds	r3, r2, #1
 8008cde:	9303      	str	r3, [sp, #12]
 8008ce0:	b341      	cbz	r1, 8008d34 <__hexnan+0x88>
 8008ce2:	4608      	mov	r0, r1
 8008ce4:	9205      	str	r2, [sp, #20]
 8008ce6:	9104      	str	r1, [sp, #16]
 8008ce8:	f7ff fd5e 	bl	80087a8 <__hexdig_fun>
 8008cec:	2800      	cmp	r0, #0
 8008cee:	d14f      	bne.n	8008d90 <__hexnan+0xe4>
 8008cf0:	9904      	ldr	r1, [sp, #16]
 8008cf2:	9a05      	ldr	r2, [sp, #20]
 8008cf4:	2920      	cmp	r1, #32
 8008cf6:	d818      	bhi.n	8008d2a <__hexnan+0x7e>
 8008cf8:	9b02      	ldr	r3, [sp, #8]
 8008cfa:	459b      	cmp	fp, r3
 8008cfc:	dd13      	ble.n	8008d26 <__hexnan+0x7a>
 8008cfe:	454c      	cmp	r4, r9
 8008d00:	d206      	bcs.n	8008d10 <__hexnan+0x64>
 8008d02:	2d07      	cmp	r5, #7
 8008d04:	dc04      	bgt.n	8008d10 <__hexnan+0x64>
 8008d06:	462a      	mov	r2, r5
 8008d08:	4649      	mov	r1, r9
 8008d0a:	4620      	mov	r0, r4
 8008d0c:	f7ff ffa8 	bl	8008c60 <L_shift>
 8008d10:	4544      	cmp	r4, r8
 8008d12:	d950      	bls.n	8008db6 <__hexnan+0x10a>
 8008d14:	2300      	movs	r3, #0
 8008d16:	f1a4 0904 	sub.w	r9, r4, #4
 8008d1a:	f844 3c04 	str.w	r3, [r4, #-4]
 8008d1e:	f8cd b008 	str.w	fp, [sp, #8]
 8008d22:	464c      	mov	r4, r9
 8008d24:	461d      	mov	r5, r3
 8008d26:	9a03      	ldr	r2, [sp, #12]
 8008d28:	e7d7      	b.n	8008cda <__hexnan+0x2e>
 8008d2a:	2929      	cmp	r1, #41	; 0x29
 8008d2c:	d156      	bne.n	8008ddc <__hexnan+0x130>
 8008d2e:	3202      	adds	r2, #2
 8008d30:	f8ca 2000 	str.w	r2, [sl]
 8008d34:	f1bb 0f00 	cmp.w	fp, #0
 8008d38:	d050      	beq.n	8008ddc <__hexnan+0x130>
 8008d3a:	454c      	cmp	r4, r9
 8008d3c:	d206      	bcs.n	8008d4c <__hexnan+0xa0>
 8008d3e:	2d07      	cmp	r5, #7
 8008d40:	dc04      	bgt.n	8008d4c <__hexnan+0xa0>
 8008d42:	462a      	mov	r2, r5
 8008d44:	4649      	mov	r1, r9
 8008d46:	4620      	mov	r0, r4
 8008d48:	f7ff ff8a 	bl	8008c60 <L_shift>
 8008d4c:	4544      	cmp	r4, r8
 8008d4e:	d934      	bls.n	8008dba <__hexnan+0x10e>
 8008d50:	f1a8 0204 	sub.w	r2, r8, #4
 8008d54:	4623      	mov	r3, r4
 8008d56:	f853 1b04 	ldr.w	r1, [r3], #4
 8008d5a:	f842 1f04 	str.w	r1, [r2, #4]!
 8008d5e:	429f      	cmp	r7, r3
 8008d60:	d2f9      	bcs.n	8008d56 <__hexnan+0xaa>
 8008d62:	1b3b      	subs	r3, r7, r4
 8008d64:	f023 0303 	bic.w	r3, r3, #3
 8008d68:	3304      	adds	r3, #4
 8008d6a:	3401      	adds	r4, #1
 8008d6c:	3e03      	subs	r6, #3
 8008d6e:	42b4      	cmp	r4, r6
 8008d70:	bf88      	it	hi
 8008d72:	2304      	movhi	r3, #4
 8008d74:	4443      	add	r3, r8
 8008d76:	2200      	movs	r2, #0
 8008d78:	f843 2b04 	str.w	r2, [r3], #4
 8008d7c:	429f      	cmp	r7, r3
 8008d7e:	d2fb      	bcs.n	8008d78 <__hexnan+0xcc>
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	b91b      	cbnz	r3, 8008d8c <__hexnan+0xe0>
 8008d84:	4547      	cmp	r7, r8
 8008d86:	d127      	bne.n	8008dd8 <__hexnan+0x12c>
 8008d88:	2301      	movs	r3, #1
 8008d8a:	603b      	str	r3, [r7, #0]
 8008d8c:	2005      	movs	r0, #5
 8008d8e:	e026      	b.n	8008dde <__hexnan+0x132>
 8008d90:	3501      	adds	r5, #1
 8008d92:	2d08      	cmp	r5, #8
 8008d94:	f10b 0b01 	add.w	fp, fp, #1
 8008d98:	dd06      	ble.n	8008da8 <__hexnan+0xfc>
 8008d9a:	4544      	cmp	r4, r8
 8008d9c:	d9c3      	bls.n	8008d26 <__hexnan+0x7a>
 8008d9e:	2300      	movs	r3, #0
 8008da0:	f844 3c04 	str.w	r3, [r4, #-4]
 8008da4:	2501      	movs	r5, #1
 8008da6:	3c04      	subs	r4, #4
 8008da8:	6822      	ldr	r2, [r4, #0]
 8008daa:	f000 000f 	and.w	r0, r0, #15
 8008dae:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8008db2:	6022      	str	r2, [r4, #0]
 8008db4:	e7b7      	b.n	8008d26 <__hexnan+0x7a>
 8008db6:	2508      	movs	r5, #8
 8008db8:	e7b5      	b.n	8008d26 <__hexnan+0x7a>
 8008dba:	9b01      	ldr	r3, [sp, #4]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d0df      	beq.n	8008d80 <__hexnan+0xd4>
 8008dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8008dc4:	f1c3 0320 	rsb	r3, r3, #32
 8008dc8:	fa22 f303 	lsr.w	r3, r2, r3
 8008dcc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008dd0:	401a      	ands	r2, r3
 8008dd2:	f846 2c04 	str.w	r2, [r6, #-4]
 8008dd6:	e7d3      	b.n	8008d80 <__hexnan+0xd4>
 8008dd8:	3f04      	subs	r7, #4
 8008dda:	e7d1      	b.n	8008d80 <__hexnan+0xd4>
 8008ddc:	2004      	movs	r0, #4
 8008dde:	b007      	add	sp, #28
 8008de0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008de4 <_localeconv_r>:
 8008de4:	4800      	ldr	r0, [pc, #0]	; (8008de8 <_localeconv_r+0x4>)
 8008de6:	4770      	bx	lr
 8008de8:	20000164 	.word	0x20000164

08008dec <malloc>:
 8008dec:	4b02      	ldr	r3, [pc, #8]	; (8008df8 <malloc+0xc>)
 8008dee:	4601      	mov	r1, r0
 8008df0:	6818      	ldr	r0, [r3, #0]
 8008df2:	f000 bd67 	b.w	80098c4 <_malloc_r>
 8008df6:	bf00      	nop
 8008df8:	2000000c 	.word	0x2000000c

08008dfc <__ascii_mbtowc>:
 8008dfc:	b082      	sub	sp, #8
 8008dfe:	b901      	cbnz	r1, 8008e02 <__ascii_mbtowc+0x6>
 8008e00:	a901      	add	r1, sp, #4
 8008e02:	b142      	cbz	r2, 8008e16 <__ascii_mbtowc+0x1a>
 8008e04:	b14b      	cbz	r3, 8008e1a <__ascii_mbtowc+0x1e>
 8008e06:	7813      	ldrb	r3, [r2, #0]
 8008e08:	600b      	str	r3, [r1, #0]
 8008e0a:	7812      	ldrb	r2, [r2, #0]
 8008e0c:	1e10      	subs	r0, r2, #0
 8008e0e:	bf18      	it	ne
 8008e10:	2001      	movne	r0, #1
 8008e12:	b002      	add	sp, #8
 8008e14:	4770      	bx	lr
 8008e16:	4610      	mov	r0, r2
 8008e18:	e7fb      	b.n	8008e12 <__ascii_mbtowc+0x16>
 8008e1a:	f06f 0001 	mvn.w	r0, #1
 8008e1e:	e7f8      	b.n	8008e12 <__ascii_mbtowc+0x16>

08008e20 <memcpy>:
 8008e20:	440a      	add	r2, r1
 8008e22:	4291      	cmp	r1, r2
 8008e24:	f100 33ff 	add.w	r3, r0, #4294967295
 8008e28:	d100      	bne.n	8008e2c <memcpy+0xc>
 8008e2a:	4770      	bx	lr
 8008e2c:	b510      	push	{r4, lr}
 8008e2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e36:	4291      	cmp	r1, r2
 8008e38:	d1f9      	bne.n	8008e2e <memcpy+0xe>
 8008e3a:	bd10      	pop	{r4, pc}

08008e3c <_Balloc>:
 8008e3c:	b570      	push	{r4, r5, r6, lr}
 8008e3e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008e40:	4604      	mov	r4, r0
 8008e42:	460d      	mov	r5, r1
 8008e44:	b976      	cbnz	r6, 8008e64 <_Balloc+0x28>
 8008e46:	2010      	movs	r0, #16
 8008e48:	f7ff ffd0 	bl	8008dec <malloc>
 8008e4c:	4602      	mov	r2, r0
 8008e4e:	6260      	str	r0, [r4, #36]	; 0x24
 8008e50:	b920      	cbnz	r0, 8008e5c <_Balloc+0x20>
 8008e52:	4b18      	ldr	r3, [pc, #96]	; (8008eb4 <_Balloc+0x78>)
 8008e54:	4818      	ldr	r0, [pc, #96]	; (8008eb8 <_Balloc+0x7c>)
 8008e56:	2166      	movs	r1, #102	; 0x66
 8008e58:	f000 ff40 	bl	8009cdc <__assert_func>
 8008e5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008e60:	6006      	str	r6, [r0, #0]
 8008e62:	60c6      	str	r6, [r0, #12]
 8008e64:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008e66:	68f3      	ldr	r3, [r6, #12]
 8008e68:	b183      	cbz	r3, 8008e8c <_Balloc+0x50>
 8008e6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e6c:	68db      	ldr	r3, [r3, #12]
 8008e6e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008e72:	b9b8      	cbnz	r0, 8008ea4 <_Balloc+0x68>
 8008e74:	2101      	movs	r1, #1
 8008e76:	fa01 f605 	lsl.w	r6, r1, r5
 8008e7a:	1d72      	adds	r2, r6, #5
 8008e7c:	0092      	lsls	r2, r2, #2
 8008e7e:	4620      	mov	r0, r4
 8008e80:	f000 fc9d 	bl	80097be <_calloc_r>
 8008e84:	b160      	cbz	r0, 8008ea0 <_Balloc+0x64>
 8008e86:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008e8a:	e00e      	b.n	8008eaa <_Balloc+0x6e>
 8008e8c:	2221      	movs	r2, #33	; 0x21
 8008e8e:	2104      	movs	r1, #4
 8008e90:	4620      	mov	r0, r4
 8008e92:	f000 fc94 	bl	80097be <_calloc_r>
 8008e96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e98:	60f0      	str	r0, [r6, #12]
 8008e9a:	68db      	ldr	r3, [r3, #12]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d1e4      	bne.n	8008e6a <_Balloc+0x2e>
 8008ea0:	2000      	movs	r0, #0
 8008ea2:	bd70      	pop	{r4, r5, r6, pc}
 8008ea4:	6802      	ldr	r2, [r0, #0]
 8008ea6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008eaa:	2300      	movs	r3, #0
 8008eac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008eb0:	e7f7      	b.n	8008ea2 <_Balloc+0x66>
 8008eb2:	bf00      	nop
 8008eb4:	0800b276 	.word	0x0800b276
 8008eb8:	0800b374 	.word	0x0800b374

08008ebc <_Bfree>:
 8008ebc:	b570      	push	{r4, r5, r6, lr}
 8008ebe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008ec0:	4605      	mov	r5, r0
 8008ec2:	460c      	mov	r4, r1
 8008ec4:	b976      	cbnz	r6, 8008ee4 <_Bfree+0x28>
 8008ec6:	2010      	movs	r0, #16
 8008ec8:	f7ff ff90 	bl	8008dec <malloc>
 8008ecc:	4602      	mov	r2, r0
 8008ece:	6268      	str	r0, [r5, #36]	; 0x24
 8008ed0:	b920      	cbnz	r0, 8008edc <_Bfree+0x20>
 8008ed2:	4b09      	ldr	r3, [pc, #36]	; (8008ef8 <_Bfree+0x3c>)
 8008ed4:	4809      	ldr	r0, [pc, #36]	; (8008efc <_Bfree+0x40>)
 8008ed6:	218a      	movs	r1, #138	; 0x8a
 8008ed8:	f000 ff00 	bl	8009cdc <__assert_func>
 8008edc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008ee0:	6006      	str	r6, [r0, #0]
 8008ee2:	60c6      	str	r6, [r0, #12]
 8008ee4:	b13c      	cbz	r4, 8008ef6 <_Bfree+0x3a>
 8008ee6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008ee8:	6862      	ldr	r2, [r4, #4]
 8008eea:	68db      	ldr	r3, [r3, #12]
 8008eec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008ef0:	6021      	str	r1, [r4, #0]
 8008ef2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008ef6:	bd70      	pop	{r4, r5, r6, pc}
 8008ef8:	0800b276 	.word	0x0800b276
 8008efc:	0800b374 	.word	0x0800b374

08008f00 <__multadd>:
 8008f00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f04:	690d      	ldr	r5, [r1, #16]
 8008f06:	4607      	mov	r7, r0
 8008f08:	460c      	mov	r4, r1
 8008f0a:	461e      	mov	r6, r3
 8008f0c:	f101 0c14 	add.w	ip, r1, #20
 8008f10:	2000      	movs	r0, #0
 8008f12:	f8dc 3000 	ldr.w	r3, [ip]
 8008f16:	b299      	uxth	r1, r3
 8008f18:	fb02 6101 	mla	r1, r2, r1, r6
 8008f1c:	0c1e      	lsrs	r6, r3, #16
 8008f1e:	0c0b      	lsrs	r3, r1, #16
 8008f20:	fb02 3306 	mla	r3, r2, r6, r3
 8008f24:	b289      	uxth	r1, r1
 8008f26:	3001      	adds	r0, #1
 8008f28:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008f2c:	4285      	cmp	r5, r0
 8008f2e:	f84c 1b04 	str.w	r1, [ip], #4
 8008f32:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008f36:	dcec      	bgt.n	8008f12 <__multadd+0x12>
 8008f38:	b30e      	cbz	r6, 8008f7e <__multadd+0x7e>
 8008f3a:	68a3      	ldr	r3, [r4, #8]
 8008f3c:	42ab      	cmp	r3, r5
 8008f3e:	dc19      	bgt.n	8008f74 <__multadd+0x74>
 8008f40:	6861      	ldr	r1, [r4, #4]
 8008f42:	4638      	mov	r0, r7
 8008f44:	3101      	adds	r1, #1
 8008f46:	f7ff ff79 	bl	8008e3c <_Balloc>
 8008f4a:	4680      	mov	r8, r0
 8008f4c:	b928      	cbnz	r0, 8008f5a <__multadd+0x5a>
 8008f4e:	4602      	mov	r2, r0
 8008f50:	4b0c      	ldr	r3, [pc, #48]	; (8008f84 <__multadd+0x84>)
 8008f52:	480d      	ldr	r0, [pc, #52]	; (8008f88 <__multadd+0x88>)
 8008f54:	21b5      	movs	r1, #181	; 0xb5
 8008f56:	f000 fec1 	bl	8009cdc <__assert_func>
 8008f5a:	6922      	ldr	r2, [r4, #16]
 8008f5c:	3202      	adds	r2, #2
 8008f5e:	f104 010c 	add.w	r1, r4, #12
 8008f62:	0092      	lsls	r2, r2, #2
 8008f64:	300c      	adds	r0, #12
 8008f66:	f7ff ff5b 	bl	8008e20 <memcpy>
 8008f6a:	4621      	mov	r1, r4
 8008f6c:	4638      	mov	r0, r7
 8008f6e:	f7ff ffa5 	bl	8008ebc <_Bfree>
 8008f72:	4644      	mov	r4, r8
 8008f74:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008f78:	3501      	adds	r5, #1
 8008f7a:	615e      	str	r6, [r3, #20]
 8008f7c:	6125      	str	r5, [r4, #16]
 8008f7e:	4620      	mov	r0, r4
 8008f80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f84:	0800b2e8 	.word	0x0800b2e8
 8008f88:	0800b374 	.word	0x0800b374

08008f8c <__s2b>:
 8008f8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f90:	460c      	mov	r4, r1
 8008f92:	4615      	mov	r5, r2
 8008f94:	461f      	mov	r7, r3
 8008f96:	2209      	movs	r2, #9
 8008f98:	3308      	adds	r3, #8
 8008f9a:	4606      	mov	r6, r0
 8008f9c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008fa0:	2100      	movs	r1, #0
 8008fa2:	2201      	movs	r2, #1
 8008fa4:	429a      	cmp	r2, r3
 8008fa6:	db09      	blt.n	8008fbc <__s2b+0x30>
 8008fa8:	4630      	mov	r0, r6
 8008faa:	f7ff ff47 	bl	8008e3c <_Balloc>
 8008fae:	b940      	cbnz	r0, 8008fc2 <__s2b+0x36>
 8008fb0:	4602      	mov	r2, r0
 8008fb2:	4b19      	ldr	r3, [pc, #100]	; (8009018 <__s2b+0x8c>)
 8008fb4:	4819      	ldr	r0, [pc, #100]	; (800901c <__s2b+0x90>)
 8008fb6:	21ce      	movs	r1, #206	; 0xce
 8008fb8:	f000 fe90 	bl	8009cdc <__assert_func>
 8008fbc:	0052      	lsls	r2, r2, #1
 8008fbe:	3101      	adds	r1, #1
 8008fc0:	e7f0      	b.n	8008fa4 <__s2b+0x18>
 8008fc2:	9b08      	ldr	r3, [sp, #32]
 8008fc4:	6143      	str	r3, [r0, #20]
 8008fc6:	2d09      	cmp	r5, #9
 8008fc8:	f04f 0301 	mov.w	r3, #1
 8008fcc:	6103      	str	r3, [r0, #16]
 8008fce:	dd16      	ble.n	8008ffe <__s2b+0x72>
 8008fd0:	f104 0909 	add.w	r9, r4, #9
 8008fd4:	46c8      	mov	r8, r9
 8008fd6:	442c      	add	r4, r5
 8008fd8:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008fdc:	4601      	mov	r1, r0
 8008fde:	3b30      	subs	r3, #48	; 0x30
 8008fe0:	220a      	movs	r2, #10
 8008fe2:	4630      	mov	r0, r6
 8008fe4:	f7ff ff8c 	bl	8008f00 <__multadd>
 8008fe8:	45a0      	cmp	r8, r4
 8008fea:	d1f5      	bne.n	8008fd8 <__s2b+0x4c>
 8008fec:	f1a5 0408 	sub.w	r4, r5, #8
 8008ff0:	444c      	add	r4, r9
 8008ff2:	1b2d      	subs	r5, r5, r4
 8008ff4:	1963      	adds	r3, r4, r5
 8008ff6:	42bb      	cmp	r3, r7
 8008ff8:	db04      	blt.n	8009004 <__s2b+0x78>
 8008ffa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ffe:	340a      	adds	r4, #10
 8009000:	2509      	movs	r5, #9
 8009002:	e7f6      	b.n	8008ff2 <__s2b+0x66>
 8009004:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009008:	4601      	mov	r1, r0
 800900a:	3b30      	subs	r3, #48	; 0x30
 800900c:	220a      	movs	r2, #10
 800900e:	4630      	mov	r0, r6
 8009010:	f7ff ff76 	bl	8008f00 <__multadd>
 8009014:	e7ee      	b.n	8008ff4 <__s2b+0x68>
 8009016:	bf00      	nop
 8009018:	0800b2e8 	.word	0x0800b2e8
 800901c:	0800b374 	.word	0x0800b374

08009020 <__hi0bits>:
 8009020:	0c03      	lsrs	r3, r0, #16
 8009022:	041b      	lsls	r3, r3, #16
 8009024:	b9d3      	cbnz	r3, 800905c <__hi0bits+0x3c>
 8009026:	0400      	lsls	r0, r0, #16
 8009028:	2310      	movs	r3, #16
 800902a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800902e:	bf04      	itt	eq
 8009030:	0200      	lsleq	r0, r0, #8
 8009032:	3308      	addeq	r3, #8
 8009034:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009038:	bf04      	itt	eq
 800903a:	0100      	lsleq	r0, r0, #4
 800903c:	3304      	addeq	r3, #4
 800903e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009042:	bf04      	itt	eq
 8009044:	0080      	lsleq	r0, r0, #2
 8009046:	3302      	addeq	r3, #2
 8009048:	2800      	cmp	r0, #0
 800904a:	db05      	blt.n	8009058 <__hi0bits+0x38>
 800904c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009050:	f103 0301 	add.w	r3, r3, #1
 8009054:	bf08      	it	eq
 8009056:	2320      	moveq	r3, #32
 8009058:	4618      	mov	r0, r3
 800905a:	4770      	bx	lr
 800905c:	2300      	movs	r3, #0
 800905e:	e7e4      	b.n	800902a <__hi0bits+0xa>

08009060 <__lo0bits>:
 8009060:	6803      	ldr	r3, [r0, #0]
 8009062:	f013 0207 	ands.w	r2, r3, #7
 8009066:	4601      	mov	r1, r0
 8009068:	d00b      	beq.n	8009082 <__lo0bits+0x22>
 800906a:	07da      	lsls	r2, r3, #31
 800906c:	d423      	bmi.n	80090b6 <__lo0bits+0x56>
 800906e:	0798      	lsls	r0, r3, #30
 8009070:	bf49      	itett	mi
 8009072:	085b      	lsrmi	r3, r3, #1
 8009074:	089b      	lsrpl	r3, r3, #2
 8009076:	2001      	movmi	r0, #1
 8009078:	600b      	strmi	r3, [r1, #0]
 800907a:	bf5c      	itt	pl
 800907c:	600b      	strpl	r3, [r1, #0]
 800907e:	2002      	movpl	r0, #2
 8009080:	4770      	bx	lr
 8009082:	b298      	uxth	r0, r3
 8009084:	b9a8      	cbnz	r0, 80090b2 <__lo0bits+0x52>
 8009086:	0c1b      	lsrs	r3, r3, #16
 8009088:	2010      	movs	r0, #16
 800908a:	b2da      	uxtb	r2, r3
 800908c:	b90a      	cbnz	r2, 8009092 <__lo0bits+0x32>
 800908e:	3008      	adds	r0, #8
 8009090:	0a1b      	lsrs	r3, r3, #8
 8009092:	071a      	lsls	r2, r3, #28
 8009094:	bf04      	itt	eq
 8009096:	091b      	lsreq	r3, r3, #4
 8009098:	3004      	addeq	r0, #4
 800909a:	079a      	lsls	r2, r3, #30
 800909c:	bf04      	itt	eq
 800909e:	089b      	lsreq	r3, r3, #2
 80090a0:	3002      	addeq	r0, #2
 80090a2:	07da      	lsls	r2, r3, #31
 80090a4:	d403      	bmi.n	80090ae <__lo0bits+0x4e>
 80090a6:	085b      	lsrs	r3, r3, #1
 80090a8:	f100 0001 	add.w	r0, r0, #1
 80090ac:	d005      	beq.n	80090ba <__lo0bits+0x5a>
 80090ae:	600b      	str	r3, [r1, #0]
 80090b0:	4770      	bx	lr
 80090b2:	4610      	mov	r0, r2
 80090b4:	e7e9      	b.n	800908a <__lo0bits+0x2a>
 80090b6:	2000      	movs	r0, #0
 80090b8:	4770      	bx	lr
 80090ba:	2020      	movs	r0, #32
 80090bc:	4770      	bx	lr
	...

080090c0 <__i2b>:
 80090c0:	b510      	push	{r4, lr}
 80090c2:	460c      	mov	r4, r1
 80090c4:	2101      	movs	r1, #1
 80090c6:	f7ff feb9 	bl	8008e3c <_Balloc>
 80090ca:	4602      	mov	r2, r0
 80090cc:	b928      	cbnz	r0, 80090da <__i2b+0x1a>
 80090ce:	4b05      	ldr	r3, [pc, #20]	; (80090e4 <__i2b+0x24>)
 80090d0:	4805      	ldr	r0, [pc, #20]	; (80090e8 <__i2b+0x28>)
 80090d2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80090d6:	f000 fe01 	bl	8009cdc <__assert_func>
 80090da:	2301      	movs	r3, #1
 80090dc:	6144      	str	r4, [r0, #20]
 80090de:	6103      	str	r3, [r0, #16]
 80090e0:	bd10      	pop	{r4, pc}
 80090e2:	bf00      	nop
 80090e4:	0800b2e8 	.word	0x0800b2e8
 80090e8:	0800b374 	.word	0x0800b374

080090ec <__multiply>:
 80090ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090f0:	4691      	mov	r9, r2
 80090f2:	690a      	ldr	r2, [r1, #16]
 80090f4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80090f8:	429a      	cmp	r2, r3
 80090fa:	bfb8      	it	lt
 80090fc:	460b      	movlt	r3, r1
 80090fe:	460c      	mov	r4, r1
 8009100:	bfbc      	itt	lt
 8009102:	464c      	movlt	r4, r9
 8009104:	4699      	movlt	r9, r3
 8009106:	6927      	ldr	r7, [r4, #16]
 8009108:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800910c:	68a3      	ldr	r3, [r4, #8]
 800910e:	6861      	ldr	r1, [r4, #4]
 8009110:	eb07 060a 	add.w	r6, r7, sl
 8009114:	42b3      	cmp	r3, r6
 8009116:	b085      	sub	sp, #20
 8009118:	bfb8      	it	lt
 800911a:	3101      	addlt	r1, #1
 800911c:	f7ff fe8e 	bl	8008e3c <_Balloc>
 8009120:	b930      	cbnz	r0, 8009130 <__multiply+0x44>
 8009122:	4602      	mov	r2, r0
 8009124:	4b44      	ldr	r3, [pc, #272]	; (8009238 <__multiply+0x14c>)
 8009126:	4845      	ldr	r0, [pc, #276]	; (800923c <__multiply+0x150>)
 8009128:	f240 115d 	movw	r1, #349	; 0x15d
 800912c:	f000 fdd6 	bl	8009cdc <__assert_func>
 8009130:	f100 0514 	add.w	r5, r0, #20
 8009134:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009138:	462b      	mov	r3, r5
 800913a:	2200      	movs	r2, #0
 800913c:	4543      	cmp	r3, r8
 800913e:	d321      	bcc.n	8009184 <__multiply+0x98>
 8009140:	f104 0314 	add.w	r3, r4, #20
 8009144:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009148:	f109 0314 	add.w	r3, r9, #20
 800914c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009150:	9202      	str	r2, [sp, #8]
 8009152:	1b3a      	subs	r2, r7, r4
 8009154:	3a15      	subs	r2, #21
 8009156:	f022 0203 	bic.w	r2, r2, #3
 800915a:	3204      	adds	r2, #4
 800915c:	f104 0115 	add.w	r1, r4, #21
 8009160:	428f      	cmp	r7, r1
 8009162:	bf38      	it	cc
 8009164:	2204      	movcc	r2, #4
 8009166:	9201      	str	r2, [sp, #4]
 8009168:	9a02      	ldr	r2, [sp, #8]
 800916a:	9303      	str	r3, [sp, #12]
 800916c:	429a      	cmp	r2, r3
 800916e:	d80c      	bhi.n	800918a <__multiply+0x9e>
 8009170:	2e00      	cmp	r6, #0
 8009172:	dd03      	ble.n	800917c <__multiply+0x90>
 8009174:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009178:	2b00      	cmp	r3, #0
 800917a:	d05a      	beq.n	8009232 <__multiply+0x146>
 800917c:	6106      	str	r6, [r0, #16]
 800917e:	b005      	add	sp, #20
 8009180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009184:	f843 2b04 	str.w	r2, [r3], #4
 8009188:	e7d8      	b.n	800913c <__multiply+0x50>
 800918a:	f8b3 a000 	ldrh.w	sl, [r3]
 800918e:	f1ba 0f00 	cmp.w	sl, #0
 8009192:	d024      	beq.n	80091de <__multiply+0xf2>
 8009194:	f104 0e14 	add.w	lr, r4, #20
 8009198:	46a9      	mov	r9, r5
 800919a:	f04f 0c00 	mov.w	ip, #0
 800919e:	f85e 2b04 	ldr.w	r2, [lr], #4
 80091a2:	f8d9 1000 	ldr.w	r1, [r9]
 80091a6:	fa1f fb82 	uxth.w	fp, r2
 80091aa:	b289      	uxth	r1, r1
 80091ac:	fb0a 110b 	mla	r1, sl, fp, r1
 80091b0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80091b4:	f8d9 2000 	ldr.w	r2, [r9]
 80091b8:	4461      	add	r1, ip
 80091ba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80091be:	fb0a c20b 	mla	r2, sl, fp, ip
 80091c2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80091c6:	b289      	uxth	r1, r1
 80091c8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80091cc:	4577      	cmp	r7, lr
 80091ce:	f849 1b04 	str.w	r1, [r9], #4
 80091d2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80091d6:	d8e2      	bhi.n	800919e <__multiply+0xb2>
 80091d8:	9a01      	ldr	r2, [sp, #4]
 80091da:	f845 c002 	str.w	ip, [r5, r2]
 80091de:	9a03      	ldr	r2, [sp, #12]
 80091e0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80091e4:	3304      	adds	r3, #4
 80091e6:	f1b9 0f00 	cmp.w	r9, #0
 80091ea:	d020      	beq.n	800922e <__multiply+0x142>
 80091ec:	6829      	ldr	r1, [r5, #0]
 80091ee:	f104 0c14 	add.w	ip, r4, #20
 80091f2:	46ae      	mov	lr, r5
 80091f4:	f04f 0a00 	mov.w	sl, #0
 80091f8:	f8bc b000 	ldrh.w	fp, [ip]
 80091fc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009200:	fb09 220b 	mla	r2, r9, fp, r2
 8009204:	4492      	add	sl, r2
 8009206:	b289      	uxth	r1, r1
 8009208:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800920c:	f84e 1b04 	str.w	r1, [lr], #4
 8009210:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009214:	f8be 1000 	ldrh.w	r1, [lr]
 8009218:	0c12      	lsrs	r2, r2, #16
 800921a:	fb09 1102 	mla	r1, r9, r2, r1
 800921e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009222:	4567      	cmp	r7, ip
 8009224:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009228:	d8e6      	bhi.n	80091f8 <__multiply+0x10c>
 800922a:	9a01      	ldr	r2, [sp, #4]
 800922c:	50a9      	str	r1, [r5, r2]
 800922e:	3504      	adds	r5, #4
 8009230:	e79a      	b.n	8009168 <__multiply+0x7c>
 8009232:	3e01      	subs	r6, #1
 8009234:	e79c      	b.n	8009170 <__multiply+0x84>
 8009236:	bf00      	nop
 8009238:	0800b2e8 	.word	0x0800b2e8
 800923c:	0800b374 	.word	0x0800b374

08009240 <__pow5mult>:
 8009240:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009244:	4615      	mov	r5, r2
 8009246:	f012 0203 	ands.w	r2, r2, #3
 800924a:	4606      	mov	r6, r0
 800924c:	460f      	mov	r7, r1
 800924e:	d007      	beq.n	8009260 <__pow5mult+0x20>
 8009250:	4c25      	ldr	r4, [pc, #148]	; (80092e8 <__pow5mult+0xa8>)
 8009252:	3a01      	subs	r2, #1
 8009254:	2300      	movs	r3, #0
 8009256:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800925a:	f7ff fe51 	bl	8008f00 <__multadd>
 800925e:	4607      	mov	r7, r0
 8009260:	10ad      	asrs	r5, r5, #2
 8009262:	d03d      	beq.n	80092e0 <__pow5mult+0xa0>
 8009264:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009266:	b97c      	cbnz	r4, 8009288 <__pow5mult+0x48>
 8009268:	2010      	movs	r0, #16
 800926a:	f7ff fdbf 	bl	8008dec <malloc>
 800926e:	4602      	mov	r2, r0
 8009270:	6270      	str	r0, [r6, #36]	; 0x24
 8009272:	b928      	cbnz	r0, 8009280 <__pow5mult+0x40>
 8009274:	4b1d      	ldr	r3, [pc, #116]	; (80092ec <__pow5mult+0xac>)
 8009276:	481e      	ldr	r0, [pc, #120]	; (80092f0 <__pow5mult+0xb0>)
 8009278:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800927c:	f000 fd2e 	bl	8009cdc <__assert_func>
 8009280:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009284:	6004      	str	r4, [r0, #0]
 8009286:	60c4      	str	r4, [r0, #12]
 8009288:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800928c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009290:	b94c      	cbnz	r4, 80092a6 <__pow5mult+0x66>
 8009292:	f240 2171 	movw	r1, #625	; 0x271
 8009296:	4630      	mov	r0, r6
 8009298:	f7ff ff12 	bl	80090c0 <__i2b>
 800929c:	2300      	movs	r3, #0
 800929e:	f8c8 0008 	str.w	r0, [r8, #8]
 80092a2:	4604      	mov	r4, r0
 80092a4:	6003      	str	r3, [r0, #0]
 80092a6:	f04f 0900 	mov.w	r9, #0
 80092aa:	07eb      	lsls	r3, r5, #31
 80092ac:	d50a      	bpl.n	80092c4 <__pow5mult+0x84>
 80092ae:	4639      	mov	r1, r7
 80092b0:	4622      	mov	r2, r4
 80092b2:	4630      	mov	r0, r6
 80092b4:	f7ff ff1a 	bl	80090ec <__multiply>
 80092b8:	4639      	mov	r1, r7
 80092ba:	4680      	mov	r8, r0
 80092bc:	4630      	mov	r0, r6
 80092be:	f7ff fdfd 	bl	8008ebc <_Bfree>
 80092c2:	4647      	mov	r7, r8
 80092c4:	106d      	asrs	r5, r5, #1
 80092c6:	d00b      	beq.n	80092e0 <__pow5mult+0xa0>
 80092c8:	6820      	ldr	r0, [r4, #0]
 80092ca:	b938      	cbnz	r0, 80092dc <__pow5mult+0x9c>
 80092cc:	4622      	mov	r2, r4
 80092ce:	4621      	mov	r1, r4
 80092d0:	4630      	mov	r0, r6
 80092d2:	f7ff ff0b 	bl	80090ec <__multiply>
 80092d6:	6020      	str	r0, [r4, #0]
 80092d8:	f8c0 9000 	str.w	r9, [r0]
 80092dc:	4604      	mov	r4, r0
 80092de:	e7e4      	b.n	80092aa <__pow5mult+0x6a>
 80092e0:	4638      	mov	r0, r7
 80092e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092e6:	bf00      	nop
 80092e8:	0800b4c0 	.word	0x0800b4c0
 80092ec:	0800b276 	.word	0x0800b276
 80092f0:	0800b374 	.word	0x0800b374

080092f4 <__lshift>:
 80092f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092f8:	460c      	mov	r4, r1
 80092fa:	6849      	ldr	r1, [r1, #4]
 80092fc:	6923      	ldr	r3, [r4, #16]
 80092fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009302:	68a3      	ldr	r3, [r4, #8]
 8009304:	4607      	mov	r7, r0
 8009306:	4691      	mov	r9, r2
 8009308:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800930c:	f108 0601 	add.w	r6, r8, #1
 8009310:	42b3      	cmp	r3, r6
 8009312:	db0b      	blt.n	800932c <__lshift+0x38>
 8009314:	4638      	mov	r0, r7
 8009316:	f7ff fd91 	bl	8008e3c <_Balloc>
 800931a:	4605      	mov	r5, r0
 800931c:	b948      	cbnz	r0, 8009332 <__lshift+0x3e>
 800931e:	4602      	mov	r2, r0
 8009320:	4b2a      	ldr	r3, [pc, #168]	; (80093cc <__lshift+0xd8>)
 8009322:	482b      	ldr	r0, [pc, #172]	; (80093d0 <__lshift+0xdc>)
 8009324:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009328:	f000 fcd8 	bl	8009cdc <__assert_func>
 800932c:	3101      	adds	r1, #1
 800932e:	005b      	lsls	r3, r3, #1
 8009330:	e7ee      	b.n	8009310 <__lshift+0x1c>
 8009332:	2300      	movs	r3, #0
 8009334:	f100 0114 	add.w	r1, r0, #20
 8009338:	f100 0210 	add.w	r2, r0, #16
 800933c:	4618      	mov	r0, r3
 800933e:	4553      	cmp	r3, sl
 8009340:	db37      	blt.n	80093b2 <__lshift+0xbe>
 8009342:	6920      	ldr	r0, [r4, #16]
 8009344:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009348:	f104 0314 	add.w	r3, r4, #20
 800934c:	f019 091f 	ands.w	r9, r9, #31
 8009350:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009354:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009358:	d02f      	beq.n	80093ba <__lshift+0xc6>
 800935a:	f1c9 0e20 	rsb	lr, r9, #32
 800935e:	468a      	mov	sl, r1
 8009360:	f04f 0c00 	mov.w	ip, #0
 8009364:	681a      	ldr	r2, [r3, #0]
 8009366:	fa02 f209 	lsl.w	r2, r2, r9
 800936a:	ea42 020c 	orr.w	r2, r2, ip
 800936e:	f84a 2b04 	str.w	r2, [sl], #4
 8009372:	f853 2b04 	ldr.w	r2, [r3], #4
 8009376:	4298      	cmp	r0, r3
 8009378:	fa22 fc0e 	lsr.w	ip, r2, lr
 800937c:	d8f2      	bhi.n	8009364 <__lshift+0x70>
 800937e:	1b03      	subs	r3, r0, r4
 8009380:	3b15      	subs	r3, #21
 8009382:	f023 0303 	bic.w	r3, r3, #3
 8009386:	3304      	adds	r3, #4
 8009388:	f104 0215 	add.w	r2, r4, #21
 800938c:	4290      	cmp	r0, r2
 800938e:	bf38      	it	cc
 8009390:	2304      	movcc	r3, #4
 8009392:	f841 c003 	str.w	ip, [r1, r3]
 8009396:	f1bc 0f00 	cmp.w	ip, #0
 800939a:	d001      	beq.n	80093a0 <__lshift+0xac>
 800939c:	f108 0602 	add.w	r6, r8, #2
 80093a0:	3e01      	subs	r6, #1
 80093a2:	4638      	mov	r0, r7
 80093a4:	612e      	str	r6, [r5, #16]
 80093a6:	4621      	mov	r1, r4
 80093a8:	f7ff fd88 	bl	8008ebc <_Bfree>
 80093ac:	4628      	mov	r0, r5
 80093ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093b2:	f842 0f04 	str.w	r0, [r2, #4]!
 80093b6:	3301      	adds	r3, #1
 80093b8:	e7c1      	b.n	800933e <__lshift+0x4a>
 80093ba:	3904      	subs	r1, #4
 80093bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80093c0:	f841 2f04 	str.w	r2, [r1, #4]!
 80093c4:	4298      	cmp	r0, r3
 80093c6:	d8f9      	bhi.n	80093bc <__lshift+0xc8>
 80093c8:	e7ea      	b.n	80093a0 <__lshift+0xac>
 80093ca:	bf00      	nop
 80093cc:	0800b2e8 	.word	0x0800b2e8
 80093d0:	0800b374 	.word	0x0800b374

080093d4 <__mcmp>:
 80093d4:	b530      	push	{r4, r5, lr}
 80093d6:	6902      	ldr	r2, [r0, #16]
 80093d8:	690c      	ldr	r4, [r1, #16]
 80093da:	1b12      	subs	r2, r2, r4
 80093dc:	d10e      	bne.n	80093fc <__mcmp+0x28>
 80093de:	f100 0314 	add.w	r3, r0, #20
 80093e2:	3114      	adds	r1, #20
 80093e4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80093e8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80093ec:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80093f0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80093f4:	42a5      	cmp	r5, r4
 80093f6:	d003      	beq.n	8009400 <__mcmp+0x2c>
 80093f8:	d305      	bcc.n	8009406 <__mcmp+0x32>
 80093fa:	2201      	movs	r2, #1
 80093fc:	4610      	mov	r0, r2
 80093fe:	bd30      	pop	{r4, r5, pc}
 8009400:	4283      	cmp	r3, r0
 8009402:	d3f3      	bcc.n	80093ec <__mcmp+0x18>
 8009404:	e7fa      	b.n	80093fc <__mcmp+0x28>
 8009406:	f04f 32ff 	mov.w	r2, #4294967295
 800940a:	e7f7      	b.n	80093fc <__mcmp+0x28>

0800940c <__mdiff>:
 800940c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009410:	460c      	mov	r4, r1
 8009412:	4606      	mov	r6, r0
 8009414:	4611      	mov	r1, r2
 8009416:	4620      	mov	r0, r4
 8009418:	4690      	mov	r8, r2
 800941a:	f7ff ffdb 	bl	80093d4 <__mcmp>
 800941e:	1e05      	subs	r5, r0, #0
 8009420:	d110      	bne.n	8009444 <__mdiff+0x38>
 8009422:	4629      	mov	r1, r5
 8009424:	4630      	mov	r0, r6
 8009426:	f7ff fd09 	bl	8008e3c <_Balloc>
 800942a:	b930      	cbnz	r0, 800943a <__mdiff+0x2e>
 800942c:	4b3a      	ldr	r3, [pc, #232]	; (8009518 <__mdiff+0x10c>)
 800942e:	4602      	mov	r2, r0
 8009430:	f240 2132 	movw	r1, #562	; 0x232
 8009434:	4839      	ldr	r0, [pc, #228]	; (800951c <__mdiff+0x110>)
 8009436:	f000 fc51 	bl	8009cdc <__assert_func>
 800943a:	2301      	movs	r3, #1
 800943c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009440:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009444:	bfa4      	itt	ge
 8009446:	4643      	movge	r3, r8
 8009448:	46a0      	movge	r8, r4
 800944a:	4630      	mov	r0, r6
 800944c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009450:	bfa6      	itte	ge
 8009452:	461c      	movge	r4, r3
 8009454:	2500      	movge	r5, #0
 8009456:	2501      	movlt	r5, #1
 8009458:	f7ff fcf0 	bl	8008e3c <_Balloc>
 800945c:	b920      	cbnz	r0, 8009468 <__mdiff+0x5c>
 800945e:	4b2e      	ldr	r3, [pc, #184]	; (8009518 <__mdiff+0x10c>)
 8009460:	4602      	mov	r2, r0
 8009462:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009466:	e7e5      	b.n	8009434 <__mdiff+0x28>
 8009468:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800946c:	6926      	ldr	r6, [r4, #16]
 800946e:	60c5      	str	r5, [r0, #12]
 8009470:	f104 0914 	add.w	r9, r4, #20
 8009474:	f108 0514 	add.w	r5, r8, #20
 8009478:	f100 0e14 	add.w	lr, r0, #20
 800947c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009480:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009484:	f108 0210 	add.w	r2, r8, #16
 8009488:	46f2      	mov	sl, lr
 800948a:	2100      	movs	r1, #0
 800948c:	f859 3b04 	ldr.w	r3, [r9], #4
 8009490:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009494:	fa1f f883 	uxth.w	r8, r3
 8009498:	fa11 f18b 	uxtah	r1, r1, fp
 800949c:	0c1b      	lsrs	r3, r3, #16
 800949e:	eba1 0808 	sub.w	r8, r1, r8
 80094a2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80094a6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80094aa:	fa1f f888 	uxth.w	r8, r8
 80094ae:	1419      	asrs	r1, r3, #16
 80094b0:	454e      	cmp	r6, r9
 80094b2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80094b6:	f84a 3b04 	str.w	r3, [sl], #4
 80094ba:	d8e7      	bhi.n	800948c <__mdiff+0x80>
 80094bc:	1b33      	subs	r3, r6, r4
 80094be:	3b15      	subs	r3, #21
 80094c0:	f023 0303 	bic.w	r3, r3, #3
 80094c4:	3304      	adds	r3, #4
 80094c6:	3415      	adds	r4, #21
 80094c8:	42a6      	cmp	r6, r4
 80094ca:	bf38      	it	cc
 80094cc:	2304      	movcc	r3, #4
 80094ce:	441d      	add	r5, r3
 80094d0:	4473      	add	r3, lr
 80094d2:	469e      	mov	lr, r3
 80094d4:	462e      	mov	r6, r5
 80094d6:	4566      	cmp	r6, ip
 80094d8:	d30e      	bcc.n	80094f8 <__mdiff+0xec>
 80094da:	f10c 0203 	add.w	r2, ip, #3
 80094de:	1b52      	subs	r2, r2, r5
 80094e0:	f022 0203 	bic.w	r2, r2, #3
 80094e4:	3d03      	subs	r5, #3
 80094e6:	45ac      	cmp	ip, r5
 80094e8:	bf38      	it	cc
 80094ea:	2200      	movcc	r2, #0
 80094ec:	441a      	add	r2, r3
 80094ee:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80094f2:	b17b      	cbz	r3, 8009514 <__mdiff+0x108>
 80094f4:	6107      	str	r7, [r0, #16]
 80094f6:	e7a3      	b.n	8009440 <__mdiff+0x34>
 80094f8:	f856 8b04 	ldr.w	r8, [r6], #4
 80094fc:	fa11 f288 	uxtah	r2, r1, r8
 8009500:	1414      	asrs	r4, r2, #16
 8009502:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009506:	b292      	uxth	r2, r2
 8009508:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800950c:	f84e 2b04 	str.w	r2, [lr], #4
 8009510:	1421      	asrs	r1, r4, #16
 8009512:	e7e0      	b.n	80094d6 <__mdiff+0xca>
 8009514:	3f01      	subs	r7, #1
 8009516:	e7ea      	b.n	80094ee <__mdiff+0xe2>
 8009518:	0800b2e8 	.word	0x0800b2e8
 800951c:	0800b374 	.word	0x0800b374

08009520 <__ulp>:
 8009520:	b082      	sub	sp, #8
 8009522:	ed8d 0b00 	vstr	d0, [sp]
 8009526:	9b01      	ldr	r3, [sp, #4]
 8009528:	4912      	ldr	r1, [pc, #72]	; (8009574 <__ulp+0x54>)
 800952a:	4019      	ands	r1, r3
 800952c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8009530:	2900      	cmp	r1, #0
 8009532:	dd05      	ble.n	8009540 <__ulp+0x20>
 8009534:	2200      	movs	r2, #0
 8009536:	460b      	mov	r3, r1
 8009538:	ec43 2b10 	vmov	d0, r2, r3
 800953c:	b002      	add	sp, #8
 800953e:	4770      	bx	lr
 8009540:	4249      	negs	r1, r1
 8009542:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8009546:	ea4f 5021 	mov.w	r0, r1, asr #20
 800954a:	f04f 0200 	mov.w	r2, #0
 800954e:	f04f 0300 	mov.w	r3, #0
 8009552:	da04      	bge.n	800955e <__ulp+0x3e>
 8009554:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8009558:	fa41 f300 	asr.w	r3, r1, r0
 800955c:	e7ec      	b.n	8009538 <__ulp+0x18>
 800955e:	f1a0 0114 	sub.w	r1, r0, #20
 8009562:	291e      	cmp	r1, #30
 8009564:	bfda      	itte	le
 8009566:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800956a:	fa20 f101 	lsrle.w	r1, r0, r1
 800956e:	2101      	movgt	r1, #1
 8009570:	460a      	mov	r2, r1
 8009572:	e7e1      	b.n	8009538 <__ulp+0x18>
 8009574:	7ff00000 	.word	0x7ff00000

08009578 <__b2d>:
 8009578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800957a:	6905      	ldr	r5, [r0, #16]
 800957c:	f100 0714 	add.w	r7, r0, #20
 8009580:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009584:	1f2e      	subs	r6, r5, #4
 8009586:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800958a:	4620      	mov	r0, r4
 800958c:	f7ff fd48 	bl	8009020 <__hi0bits>
 8009590:	f1c0 0320 	rsb	r3, r0, #32
 8009594:	280a      	cmp	r0, #10
 8009596:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8009614 <__b2d+0x9c>
 800959a:	600b      	str	r3, [r1, #0]
 800959c:	dc14      	bgt.n	80095c8 <__b2d+0x50>
 800959e:	f1c0 0e0b 	rsb	lr, r0, #11
 80095a2:	fa24 f10e 	lsr.w	r1, r4, lr
 80095a6:	42b7      	cmp	r7, r6
 80095a8:	ea41 030c 	orr.w	r3, r1, ip
 80095ac:	bf34      	ite	cc
 80095ae:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80095b2:	2100      	movcs	r1, #0
 80095b4:	3015      	adds	r0, #21
 80095b6:	fa04 f000 	lsl.w	r0, r4, r0
 80095ba:	fa21 f10e 	lsr.w	r1, r1, lr
 80095be:	ea40 0201 	orr.w	r2, r0, r1
 80095c2:	ec43 2b10 	vmov	d0, r2, r3
 80095c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095c8:	42b7      	cmp	r7, r6
 80095ca:	bf3a      	itte	cc
 80095cc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80095d0:	f1a5 0608 	subcc.w	r6, r5, #8
 80095d4:	2100      	movcs	r1, #0
 80095d6:	380b      	subs	r0, #11
 80095d8:	d017      	beq.n	800960a <__b2d+0x92>
 80095da:	f1c0 0c20 	rsb	ip, r0, #32
 80095de:	fa04 f500 	lsl.w	r5, r4, r0
 80095e2:	42be      	cmp	r6, r7
 80095e4:	fa21 f40c 	lsr.w	r4, r1, ip
 80095e8:	ea45 0504 	orr.w	r5, r5, r4
 80095ec:	bf8c      	ite	hi
 80095ee:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80095f2:	2400      	movls	r4, #0
 80095f4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80095f8:	fa01 f000 	lsl.w	r0, r1, r0
 80095fc:	fa24 f40c 	lsr.w	r4, r4, ip
 8009600:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009604:	ea40 0204 	orr.w	r2, r0, r4
 8009608:	e7db      	b.n	80095c2 <__b2d+0x4a>
 800960a:	ea44 030c 	orr.w	r3, r4, ip
 800960e:	460a      	mov	r2, r1
 8009610:	e7d7      	b.n	80095c2 <__b2d+0x4a>
 8009612:	bf00      	nop
 8009614:	3ff00000 	.word	0x3ff00000

08009618 <__d2b>:
 8009618:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800961c:	4689      	mov	r9, r1
 800961e:	2101      	movs	r1, #1
 8009620:	ec57 6b10 	vmov	r6, r7, d0
 8009624:	4690      	mov	r8, r2
 8009626:	f7ff fc09 	bl	8008e3c <_Balloc>
 800962a:	4604      	mov	r4, r0
 800962c:	b930      	cbnz	r0, 800963c <__d2b+0x24>
 800962e:	4602      	mov	r2, r0
 8009630:	4b25      	ldr	r3, [pc, #148]	; (80096c8 <__d2b+0xb0>)
 8009632:	4826      	ldr	r0, [pc, #152]	; (80096cc <__d2b+0xb4>)
 8009634:	f240 310a 	movw	r1, #778	; 0x30a
 8009638:	f000 fb50 	bl	8009cdc <__assert_func>
 800963c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009640:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009644:	bb35      	cbnz	r5, 8009694 <__d2b+0x7c>
 8009646:	2e00      	cmp	r6, #0
 8009648:	9301      	str	r3, [sp, #4]
 800964a:	d028      	beq.n	800969e <__d2b+0x86>
 800964c:	4668      	mov	r0, sp
 800964e:	9600      	str	r6, [sp, #0]
 8009650:	f7ff fd06 	bl	8009060 <__lo0bits>
 8009654:	9900      	ldr	r1, [sp, #0]
 8009656:	b300      	cbz	r0, 800969a <__d2b+0x82>
 8009658:	9a01      	ldr	r2, [sp, #4]
 800965a:	f1c0 0320 	rsb	r3, r0, #32
 800965e:	fa02 f303 	lsl.w	r3, r2, r3
 8009662:	430b      	orrs	r3, r1
 8009664:	40c2      	lsrs	r2, r0
 8009666:	6163      	str	r3, [r4, #20]
 8009668:	9201      	str	r2, [sp, #4]
 800966a:	9b01      	ldr	r3, [sp, #4]
 800966c:	61a3      	str	r3, [r4, #24]
 800966e:	2b00      	cmp	r3, #0
 8009670:	bf14      	ite	ne
 8009672:	2202      	movne	r2, #2
 8009674:	2201      	moveq	r2, #1
 8009676:	6122      	str	r2, [r4, #16]
 8009678:	b1d5      	cbz	r5, 80096b0 <__d2b+0x98>
 800967a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800967e:	4405      	add	r5, r0
 8009680:	f8c9 5000 	str.w	r5, [r9]
 8009684:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009688:	f8c8 0000 	str.w	r0, [r8]
 800968c:	4620      	mov	r0, r4
 800968e:	b003      	add	sp, #12
 8009690:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009698:	e7d5      	b.n	8009646 <__d2b+0x2e>
 800969a:	6161      	str	r1, [r4, #20]
 800969c:	e7e5      	b.n	800966a <__d2b+0x52>
 800969e:	a801      	add	r0, sp, #4
 80096a0:	f7ff fcde 	bl	8009060 <__lo0bits>
 80096a4:	9b01      	ldr	r3, [sp, #4]
 80096a6:	6163      	str	r3, [r4, #20]
 80096a8:	2201      	movs	r2, #1
 80096aa:	6122      	str	r2, [r4, #16]
 80096ac:	3020      	adds	r0, #32
 80096ae:	e7e3      	b.n	8009678 <__d2b+0x60>
 80096b0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80096b4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80096b8:	f8c9 0000 	str.w	r0, [r9]
 80096bc:	6918      	ldr	r0, [r3, #16]
 80096be:	f7ff fcaf 	bl	8009020 <__hi0bits>
 80096c2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80096c6:	e7df      	b.n	8009688 <__d2b+0x70>
 80096c8:	0800b2e8 	.word	0x0800b2e8
 80096cc:	0800b374 	.word	0x0800b374

080096d0 <__ratio>:
 80096d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096d4:	4688      	mov	r8, r1
 80096d6:	4669      	mov	r1, sp
 80096d8:	4681      	mov	r9, r0
 80096da:	f7ff ff4d 	bl	8009578 <__b2d>
 80096de:	a901      	add	r1, sp, #4
 80096e0:	4640      	mov	r0, r8
 80096e2:	ec55 4b10 	vmov	r4, r5, d0
 80096e6:	f7ff ff47 	bl	8009578 <__b2d>
 80096ea:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80096ee:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80096f2:	eba3 0c02 	sub.w	ip, r3, r2
 80096f6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80096fa:	1a9b      	subs	r3, r3, r2
 80096fc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009700:	ec51 0b10 	vmov	r0, r1, d0
 8009704:	2b00      	cmp	r3, #0
 8009706:	bfd6      	itet	le
 8009708:	460a      	movle	r2, r1
 800970a:	462a      	movgt	r2, r5
 800970c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009710:	468b      	mov	fp, r1
 8009712:	462f      	mov	r7, r5
 8009714:	bfd4      	ite	le
 8009716:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800971a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800971e:	4620      	mov	r0, r4
 8009720:	ee10 2a10 	vmov	r2, s0
 8009724:	465b      	mov	r3, fp
 8009726:	4639      	mov	r1, r7
 8009728:	f7f7 f890 	bl	800084c <__aeabi_ddiv>
 800972c:	ec41 0b10 	vmov	d0, r0, r1
 8009730:	b003      	add	sp, #12
 8009732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009736 <__copybits>:
 8009736:	3901      	subs	r1, #1
 8009738:	b570      	push	{r4, r5, r6, lr}
 800973a:	1149      	asrs	r1, r1, #5
 800973c:	6914      	ldr	r4, [r2, #16]
 800973e:	3101      	adds	r1, #1
 8009740:	f102 0314 	add.w	r3, r2, #20
 8009744:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009748:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800974c:	1f05      	subs	r5, r0, #4
 800974e:	42a3      	cmp	r3, r4
 8009750:	d30c      	bcc.n	800976c <__copybits+0x36>
 8009752:	1aa3      	subs	r3, r4, r2
 8009754:	3b11      	subs	r3, #17
 8009756:	f023 0303 	bic.w	r3, r3, #3
 800975a:	3211      	adds	r2, #17
 800975c:	42a2      	cmp	r2, r4
 800975e:	bf88      	it	hi
 8009760:	2300      	movhi	r3, #0
 8009762:	4418      	add	r0, r3
 8009764:	2300      	movs	r3, #0
 8009766:	4288      	cmp	r0, r1
 8009768:	d305      	bcc.n	8009776 <__copybits+0x40>
 800976a:	bd70      	pop	{r4, r5, r6, pc}
 800976c:	f853 6b04 	ldr.w	r6, [r3], #4
 8009770:	f845 6f04 	str.w	r6, [r5, #4]!
 8009774:	e7eb      	b.n	800974e <__copybits+0x18>
 8009776:	f840 3b04 	str.w	r3, [r0], #4
 800977a:	e7f4      	b.n	8009766 <__copybits+0x30>

0800977c <__any_on>:
 800977c:	f100 0214 	add.w	r2, r0, #20
 8009780:	6900      	ldr	r0, [r0, #16]
 8009782:	114b      	asrs	r3, r1, #5
 8009784:	4298      	cmp	r0, r3
 8009786:	b510      	push	{r4, lr}
 8009788:	db11      	blt.n	80097ae <__any_on+0x32>
 800978a:	dd0a      	ble.n	80097a2 <__any_on+0x26>
 800978c:	f011 011f 	ands.w	r1, r1, #31
 8009790:	d007      	beq.n	80097a2 <__any_on+0x26>
 8009792:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009796:	fa24 f001 	lsr.w	r0, r4, r1
 800979a:	fa00 f101 	lsl.w	r1, r0, r1
 800979e:	428c      	cmp	r4, r1
 80097a0:	d10b      	bne.n	80097ba <__any_on+0x3e>
 80097a2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80097a6:	4293      	cmp	r3, r2
 80097a8:	d803      	bhi.n	80097b2 <__any_on+0x36>
 80097aa:	2000      	movs	r0, #0
 80097ac:	bd10      	pop	{r4, pc}
 80097ae:	4603      	mov	r3, r0
 80097b0:	e7f7      	b.n	80097a2 <__any_on+0x26>
 80097b2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80097b6:	2900      	cmp	r1, #0
 80097b8:	d0f5      	beq.n	80097a6 <__any_on+0x2a>
 80097ba:	2001      	movs	r0, #1
 80097bc:	e7f6      	b.n	80097ac <__any_on+0x30>

080097be <_calloc_r>:
 80097be:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80097c0:	fba1 2402 	umull	r2, r4, r1, r2
 80097c4:	b94c      	cbnz	r4, 80097da <_calloc_r+0x1c>
 80097c6:	4611      	mov	r1, r2
 80097c8:	9201      	str	r2, [sp, #4]
 80097ca:	f000 f87b 	bl	80098c4 <_malloc_r>
 80097ce:	9a01      	ldr	r2, [sp, #4]
 80097d0:	4605      	mov	r5, r0
 80097d2:	b930      	cbnz	r0, 80097e2 <_calloc_r+0x24>
 80097d4:	4628      	mov	r0, r5
 80097d6:	b003      	add	sp, #12
 80097d8:	bd30      	pop	{r4, r5, pc}
 80097da:	220c      	movs	r2, #12
 80097dc:	6002      	str	r2, [r0, #0]
 80097de:	2500      	movs	r5, #0
 80097e0:	e7f8      	b.n	80097d4 <_calloc_r+0x16>
 80097e2:	4621      	mov	r1, r4
 80097e4:	f7fc fbbe 	bl	8005f64 <memset>
 80097e8:	e7f4      	b.n	80097d4 <_calloc_r+0x16>
	...

080097ec <_free_r>:
 80097ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80097ee:	2900      	cmp	r1, #0
 80097f0:	d044      	beq.n	800987c <_free_r+0x90>
 80097f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80097f6:	9001      	str	r0, [sp, #4]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	f1a1 0404 	sub.w	r4, r1, #4
 80097fe:	bfb8      	it	lt
 8009800:	18e4      	addlt	r4, r4, r3
 8009802:	f000 fab5 	bl	8009d70 <__malloc_lock>
 8009806:	4a1e      	ldr	r2, [pc, #120]	; (8009880 <_free_r+0x94>)
 8009808:	9801      	ldr	r0, [sp, #4]
 800980a:	6813      	ldr	r3, [r2, #0]
 800980c:	b933      	cbnz	r3, 800981c <_free_r+0x30>
 800980e:	6063      	str	r3, [r4, #4]
 8009810:	6014      	str	r4, [r2, #0]
 8009812:	b003      	add	sp, #12
 8009814:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009818:	f000 bab0 	b.w	8009d7c <__malloc_unlock>
 800981c:	42a3      	cmp	r3, r4
 800981e:	d908      	bls.n	8009832 <_free_r+0x46>
 8009820:	6825      	ldr	r5, [r4, #0]
 8009822:	1961      	adds	r1, r4, r5
 8009824:	428b      	cmp	r3, r1
 8009826:	bf01      	itttt	eq
 8009828:	6819      	ldreq	r1, [r3, #0]
 800982a:	685b      	ldreq	r3, [r3, #4]
 800982c:	1949      	addeq	r1, r1, r5
 800982e:	6021      	streq	r1, [r4, #0]
 8009830:	e7ed      	b.n	800980e <_free_r+0x22>
 8009832:	461a      	mov	r2, r3
 8009834:	685b      	ldr	r3, [r3, #4]
 8009836:	b10b      	cbz	r3, 800983c <_free_r+0x50>
 8009838:	42a3      	cmp	r3, r4
 800983a:	d9fa      	bls.n	8009832 <_free_r+0x46>
 800983c:	6811      	ldr	r1, [r2, #0]
 800983e:	1855      	adds	r5, r2, r1
 8009840:	42a5      	cmp	r5, r4
 8009842:	d10b      	bne.n	800985c <_free_r+0x70>
 8009844:	6824      	ldr	r4, [r4, #0]
 8009846:	4421      	add	r1, r4
 8009848:	1854      	adds	r4, r2, r1
 800984a:	42a3      	cmp	r3, r4
 800984c:	6011      	str	r1, [r2, #0]
 800984e:	d1e0      	bne.n	8009812 <_free_r+0x26>
 8009850:	681c      	ldr	r4, [r3, #0]
 8009852:	685b      	ldr	r3, [r3, #4]
 8009854:	6053      	str	r3, [r2, #4]
 8009856:	4421      	add	r1, r4
 8009858:	6011      	str	r1, [r2, #0]
 800985a:	e7da      	b.n	8009812 <_free_r+0x26>
 800985c:	d902      	bls.n	8009864 <_free_r+0x78>
 800985e:	230c      	movs	r3, #12
 8009860:	6003      	str	r3, [r0, #0]
 8009862:	e7d6      	b.n	8009812 <_free_r+0x26>
 8009864:	6825      	ldr	r5, [r4, #0]
 8009866:	1961      	adds	r1, r4, r5
 8009868:	428b      	cmp	r3, r1
 800986a:	bf04      	itt	eq
 800986c:	6819      	ldreq	r1, [r3, #0]
 800986e:	685b      	ldreq	r3, [r3, #4]
 8009870:	6063      	str	r3, [r4, #4]
 8009872:	bf04      	itt	eq
 8009874:	1949      	addeq	r1, r1, r5
 8009876:	6021      	streq	r1, [r4, #0]
 8009878:	6054      	str	r4, [r2, #4]
 800987a:	e7ca      	b.n	8009812 <_free_r+0x26>
 800987c:	b003      	add	sp, #12
 800987e:	bd30      	pop	{r4, r5, pc}
 8009880:	2000037c 	.word	0x2000037c

08009884 <sbrk_aligned>:
 8009884:	b570      	push	{r4, r5, r6, lr}
 8009886:	4e0e      	ldr	r6, [pc, #56]	; (80098c0 <sbrk_aligned+0x3c>)
 8009888:	460c      	mov	r4, r1
 800988a:	6831      	ldr	r1, [r6, #0]
 800988c:	4605      	mov	r5, r0
 800988e:	b911      	cbnz	r1, 8009896 <sbrk_aligned+0x12>
 8009890:	f000 f9f2 	bl	8009c78 <_sbrk_r>
 8009894:	6030      	str	r0, [r6, #0]
 8009896:	4621      	mov	r1, r4
 8009898:	4628      	mov	r0, r5
 800989a:	f000 f9ed 	bl	8009c78 <_sbrk_r>
 800989e:	1c43      	adds	r3, r0, #1
 80098a0:	d00a      	beq.n	80098b8 <sbrk_aligned+0x34>
 80098a2:	1cc4      	adds	r4, r0, #3
 80098a4:	f024 0403 	bic.w	r4, r4, #3
 80098a8:	42a0      	cmp	r0, r4
 80098aa:	d007      	beq.n	80098bc <sbrk_aligned+0x38>
 80098ac:	1a21      	subs	r1, r4, r0
 80098ae:	4628      	mov	r0, r5
 80098b0:	f000 f9e2 	bl	8009c78 <_sbrk_r>
 80098b4:	3001      	adds	r0, #1
 80098b6:	d101      	bne.n	80098bc <sbrk_aligned+0x38>
 80098b8:	f04f 34ff 	mov.w	r4, #4294967295
 80098bc:	4620      	mov	r0, r4
 80098be:	bd70      	pop	{r4, r5, r6, pc}
 80098c0:	20000380 	.word	0x20000380

080098c4 <_malloc_r>:
 80098c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098c8:	1ccd      	adds	r5, r1, #3
 80098ca:	f025 0503 	bic.w	r5, r5, #3
 80098ce:	3508      	adds	r5, #8
 80098d0:	2d0c      	cmp	r5, #12
 80098d2:	bf38      	it	cc
 80098d4:	250c      	movcc	r5, #12
 80098d6:	2d00      	cmp	r5, #0
 80098d8:	4607      	mov	r7, r0
 80098da:	db01      	blt.n	80098e0 <_malloc_r+0x1c>
 80098dc:	42a9      	cmp	r1, r5
 80098de:	d905      	bls.n	80098ec <_malloc_r+0x28>
 80098e0:	230c      	movs	r3, #12
 80098e2:	603b      	str	r3, [r7, #0]
 80098e4:	2600      	movs	r6, #0
 80098e6:	4630      	mov	r0, r6
 80098e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098ec:	4e2e      	ldr	r6, [pc, #184]	; (80099a8 <_malloc_r+0xe4>)
 80098ee:	f000 fa3f 	bl	8009d70 <__malloc_lock>
 80098f2:	6833      	ldr	r3, [r6, #0]
 80098f4:	461c      	mov	r4, r3
 80098f6:	bb34      	cbnz	r4, 8009946 <_malloc_r+0x82>
 80098f8:	4629      	mov	r1, r5
 80098fa:	4638      	mov	r0, r7
 80098fc:	f7ff ffc2 	bl	8009884 <sbrk_aligned>
 8009900:	1c43      	adds	r3, r0, #1
 8009902:	4604      	mov	r4, r0
 8009904:	d14d      	bne.n	80099a2 <_malloc_r+0xde>
 8009906:	6834      	ldr	r4, [r6, #0]
 8009908:	4626      	mov	r6, r4
 800990a:	2e00      	cmp	r6, #0
 800990c:	d140      	bne.n	8009990 <_malloc_r+0xcc>
 800990e:	6823      	ldr	r3, [r4, #0]
 8009910:	4631      	mov	r1, r6
 8009912:	4638      	mov	r0, r7
 8009914:	eb04 0803 	add.w	r8, r4, r3
 8009918:	f000 f9ae 	bl	8009c78 <_sbrk_r>
 800991c:	4580      	cmp	r8, r0
 800991e:	d13a      	bne.n	8009996 <_malloc_r+0xd2>
 8009920:	6821      	ldr	r1, [r4, #0]
 8009922:	3503      	adds	r5, #3
 8009924:	1a6d      	subs	r5, r5, r1
 8009926:	f025 0503 	bic.w	r5, r5, #3
 800992a:	3508      	adds	r5, #8
 800992c:	2d0c      	cmp	r5, #12
 800992e:	bf38      	it	cc
 8009930:	250c      	movcc	r5, #12
 8009932:	4629      	mov	r1, r5
 8009934:	4638      	mov	r0, r7
 8009936:	f7ff ffa5 	bl	8009884 <sbrk_aligned>
 800993a:	3001      	adds	r0, #1
 800993c:	d02b      	beq.n	8009996 <_malloc_r+0xd2>
 800993e:	6823      	ldr	r3, [r4, #0]
 8009940:	442b      	add	r3, r5
 8009942:	6023      	str	r3, [r4, #0]
 8009944:	e00e      	b.n	8009964 <_malloc_r+0xa0>
 8009946:	6822      	ldr	r2, [r4, #0]
 8009948:	1b52      	subs	r2, r2, r5
 800994a:	d41e      	bmi.n	800998a <_malloc_r+0xc6>
 800994c:	2a0b      	cmp	r2, #11
 800994e:	d916      	bls.n	800997e <_malloc_r+0xba>
 8009950:	1961      	adds	r1, r4, r5
 8009952:	42a3      	cmp	r3, r4
 8009954:	6025      	str	r5, [r4, #0]
 8009956:	bf18      	it	ne
 8009958:	6059      	strne	r1, [r3, #4]
 800995a:	6863      	ldr	r3, [r4, #4]
 800995c:	bf08      	it	eq
 800995e:	6031      	streq	r1, [r6, #0]
 8009960:	5162      	str	r2, [r4, r5]
 8009962:	604b      	str	r3, [r1, #4]
 8009964:	4638      	mov	r0, r7
 8009966:	f104 060b 	add.w	r6, r4, #11
 800996a:	f000 fa07 	bl	8009d7c <__malloc_unlock>
 800996e:	f026 0607 	bic.w	r6, r6, #7
 8009972:	1d23      	adds	r3, r4, #4
 8009974:	1af2      	subs	r2, r6, r3
 8009976:	d0b6      	beq.n	80098e6 <_malloc_r+0x22>
 8009978:	1b9b      	subs	r3, r3, r6
 800997a:	50a3      	str	r3, [r4, r2]
 800997c:	e7b3      	b.n	80098e6 <_malloc_r+0x22>
 800997e:	6862      	ldr	r2, [r4, #4]
 8009980:	42a3      	cmp	r3, r4
 8009982:	bf0c      	ite	eq
 8009984:	6032      	streq	r2, [r6, #0]
 8009986:	605a      	strne	r2, [r3, #4]
 8009988:	e7ec      	b.n	8009964 <_malloc_r+0xa0>
 800998a:	4623      	mov	r3, r4
 800998c:	6864      	ldr	r4, [r4, #4]
 800998e:	e7b2      	b.n	80098f6 <_malloc_r+0x32>
 8009990:	4634      	mov	r4, r6
 8009992:	6876      	ldr	r6, [r6, #4]
 8009994:	e7b9      	b.n	800990a <_malloc_r+0x46>
 8009996:	230c      	movs	r3, #12
 8009998:	603b      	str	r3, [r7, #0]
 800999a:	4638      	mov	r0, r7
 800999c:	f000 f9ee 	bl	8009d7c <__malloc_unlock>
 80099a0:	e7a1      	b.n	80098e6 <_malloc_r+0x22>
 80099a2:	6025      	str	r5, [r4, #0]
 80099a4:	e7de      	b.n	8009964 <_malloc_r+0xa0>
 80099a6:	bf00      	nop
 80099a8:	2000037c 	.word	0x2000037c

080099ac <__ssputs_r>:
 80099ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099b0:	688e      	ldr	r6, [r1, #8]
 80099b2:	429e      	cmp	r6, r3
 80099b4:	4682      	mov	sl, r0
 80099b6:	460c      	mov	r4, r1
 80099b8:	4690      	mov	r8, r2
 80099ba:	461f      	mov	r7, r3
 80099bc:	d838      	bhi.n	8009a30 <__ssputs_r+0x84>
 80099be:	898a      	ldrh	r2, [r1, #12]
 80099c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80099c4:	d032      	beq.n	8009a2c <__ssputs_r+0x80>
 80099c6:	6825      	ldr	r5, [r4, #0]
 80099c8:	6909      	ldr	r1, [r1, #16]
 80099ca:	eba5 0901 	sub.w	r9, r5, r1
 80099ce:	6965      	ldr	r5, [r4, #20]
 80099d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80099d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80099d8:	3301      	adds	r3, #1
 80099da:	444b      	add	r3, r9
 80099dc:	106d      	asrs	r5, r5, #1
 80099de:	429d      	cmp	r5, r3
 80099e0:	bf38      	it	cc
 80099e2:	461d      	movcc	r5, r3
 80099e4:	0553      	lsls	r3, r2, #21
 80099e6:	d531      	bpl.n	8009a4c <__ssputs_r+0xa0>
 80099e8:	4629      	mov	r1, r5
 80099ea:	f7ff ff6b 	bl	80098c4 <_malloc_r>
 80099ee:	4606      	mov	r6, r0
 80099f0:	b950      	cbnz	r0, 8009a08 <__ssputs_r+0x5c>
 80099f2:	230c      	movs	r3, #12
 80099f4:	f8ca 3000 	str.w	r3, [sl]
 80099f8:	89a3      	ldrh	r3, [r4, #12]
 80099fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099fe:	81a3      	strh	r3, [r4, #12]
 8009a00:	f04f 30ff 	mov.w	r0, #4294967295
 8009a04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a08:	6921      	ldr	r1, [r4, #16]
 8009a0a:	464a      	mov	r2, r9
 8009a0c:	f7ff fa08 	bl	8008e20 <memcpy>
 8009a10:	89a3      	ldrh	r3, [r4, #12]
 8009a12:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009a16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a1a:	81a3      	strh	r3, [r4, #12]
 8009a1c:	6126      	str	r6, [r4, #16]
 8009a1e:	6165      	str	r5, [r4, #20]
 8009a20:	444e      	add	r6, r9
 8009a22:	eba5 0509 	sub.w	r5, r5, r9
 8009a26:	6026      	str	r6, [r4, #0]
 8009a28:	60a5      	str	r5, [r4, #8]
 8009a2a:	463e      	mov	r6, r7
 8009a2c:	42be      	cmp	r6, r7
 8009a2e:	d900      	bls.n	8009a32 <__ssputs_r+0x86>
 8009a30:	463e      	mov	r6, r7
 8009a32:	6820      	ldr	r0, [r4, #0]
 8009a34:	4632      	mov	r2, r6
 8009a36:	4641      	mov	r1, r8
 8009a38:	f000 f980 	bl	8009d3c <memmove>
 8009a3c:	68a3      	ldr	r3, [r4, #8]
 8009a3e:	1b9b      	subs	r3, r3, r6
 8009a40:	60a3      	str	r3, [r4, #8]
 8009a42:	6823      	ldr	r3, [r4, #0]
 8009a44:	4433      	add	r3, r6
 8009a46:	6023      	str	r3, [r4, #0]
 8009a48:	2000      	movs	r0, #0
 8009a4a:	e7db      	b.n	8009a04 <__ssputs_r+0x58>
 8009a4c:	462a      	mov	r2, r5
 8009a4e:	f000 f99b 	bl	8009d88 <_realloc_r>
 8009a52:	4606      	mov	r6, r0
 8009a54:	2800      	cmp	r0, #0
 8009a56:	d1e1      	bne.n	8009a1c <__ssputs_r+0x70>
 8009a58:	6921      	ldr	r1, [r4, #16]
 8009a5a:	4650      	mov	r0, sl
 8009a5c:	f7ff fec6 	bl	80097ec <_free_r>
 8009a60:	e7c7      	b.n	80099f2 <__ssputs_r+0x46>
	...

08009a64 <_svfiprintf_r>:
 8009a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a68:	4698      	mov	r8, r3
 8009a6a:	898b      	ldrh	r3, [r1, #12]
 8009a6c:	061b      	lsls	r3, r3, #24
 8009a6e:	b09d      	sub	sp, #116	; 0x74
 8009a70:	4607      	mov	r7, r0
 8009a72:	460d      	mov	r5, r1
 8009a74:	4614      	mov	r4, r2
 8009a76:	d50e      	bpl.n	8009a96 <_svfiprintf_r+0x32>
 8009a78:	690b      	ldr	r3, [r1, #16]
 8009a7a:	b963      	cbnz	r3, 8009a96 <_svfiprintf_r+0x32>
 8009a7c:	2140      	movs	r1, #64	; 0x40
 8009a7e:	f7ff ff21 	bl	80098c4 <_malloc_r>
 8009a82:	6028      	str	r0, [r5, #0]
 8009a84:	6128      	str	r0, [r5, #16]
 8009a86:	b920      	cbnz	r0, 8009a92 <_svfiprintf_r+0x2e>
 8009a88:	230c      	movs	r3, #12
 8009a8a:	603b      	str	r3, [r7, #0]
 8009a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8009a90:	e0d1      	b.n	8009c36 <_svfiprintf_r+0x1d2>
 8009a92:	2340      	movs	r3, #64	; 0x40
 8009a94:	616b      	str	r3, [r5, #20]
 8009a96:	2300      	movs	r3, #0
 8009a98:	9309      	str	r3, [sp, #36]	; 0x24
 8009a9a:	2320      	movs	r3, #32
 8009a9c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009aa0:	f8cd 800c 	str.w	r8, [sp, #12]
 8009aa4:	2330      	movs	r3, #48	; 0x30
 8009aa6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009c50 <_svfiprintf_r+0x1ec>
 8009aaa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009aae:	f04f 0901 	mov.w	r9, #1
 8009ab2:	4623      	mov	r3, r4
 8009ab4:	469a      	mov	sl, r3
 8009ab6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009aba:	b10a      	cbz	r2, 8009ac0 <_svfiprintf_r+0x5c>
 8009abc:	2a25      	cmp	r2, #37	; 0x25
 8009abe:	d1f9      	bne.n	8009ab4 <_svfiprintf_r+0x50>
 8009ac0:	ebba 0b04 	subs.w	fp, sl, r4
 8009ac4:	d00b      	beq.n	8009ade <_svfiprintf_r+0x7a>
 8009ac6:	465b      	mov	r3, fp
 8009ac8:	4622      	mov	r2, r4
 8009aca:	4629      	mov	r1, r5
 8009acc:	4638      	mov	r0, r7
 8009ace:	f7ff ff6d 	bl	80099ac <__ssputs_r>
 8009ad2:	3001      	adds	r0, #1
 8009ad4:	f000 80aa 	beq.w	8009c2c <_svfiprintf_r+0x1c8>
 8009ad8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ada:	445a      	add	r2, fp
 8009adc:	9209      	str	r2, [sp, #36]	; 0x24
 8009ade:	f89a 3000 	ldrb.w	r3, [sl]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	f000 80a2 	beq.w	8009c2c <_svfiprintf_r+0x1c8>
 8009ae8:	2300      	movs	r3, #0
 8009aea:	f04f 32ff 	mov.w	r2, #4294967295
 8009aee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009af2:	f10a 0a01 	add.w	sl, sl, #1
 8009af6:	9304      	str	r3, [sp, #16]
 8009af8:	9307      	str	r3, [sp, #28]
 8009afa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009afe:	931a      	str	r3, [sp, #104]	; 0x68
 8009b00:	4654      	mov	r4, sl
 8009b02:	2205      	movs	r2, #5
 8009b04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b08:	4851      	ldr	r0, [pc, #324]	; (8009c50 <_svfiprintf_r+0x1ec>)
 8009b0a:	f7f6 fb69 	bl	80001e0 <memchr>
 8009b0e:	9a04      	ldr	r2, [sp, #16]
 8009b10:	b9d8      	cbnz	r0, 8009b4a <_svfiprintf_r+0xe6>
 8009b12:	06d0      	lsls	r0, r2, #27
 8009b14:	bf44      	itt	mi
 8009b16:	2320      	movmi	r3, #32
 8009b18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b1c:	0711      	lsls	r1, r2, #28
 8009b1e:	bf44      	itt	mi
 8009b20:	232b      	movmi	r3, #43	; 0x2b
 8009b22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b26:	f89a 3000 	ldrb.w	r3, [sl]
 8009b2a:	2b2a      	cmp	r3, #42	; 0x2a
 8009b2c:	d015      	beq.n	8009b5a <_svfiprintf_r+0xf6>
 8009b2e:	9a07      	ldr	r2, [sp, #28]
 8009b30:	4654      	mov	r4, sl
 8009b32:	2000      	movs	r0, #0
 8009b34:	f04f 0c0a 	mov.w	ip, #10
 8009b38:	4621      	mov	r1, r4
 8009b3a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b3e:	3b30      	subs	r3, #48	; 0x30
 8009b40:	2b09      	cmp	r3, #9
 8009b42:	d94e      	bls.n	8009be2 <_svfiprintf_r+0x17e>
 8009b44:	b1b0      	cbz	r0, 8009b74 <_svfiprintf_r+0x110>
 8009b46:	9207      	str	r2, [sp, #28]
 8009b48:	e014      	b.n	8009b74 <_svfiprintf_r+0x110>
 8009b4a:	eba0 0308 	sub.w	r3, r0, r8
 8009b4e:	fa09 f303 	lsl.w	r3, r9, r3
 8009b52:	4313      	orrs	r3, r2
 8009b54:	9304      	str	r3, [sp, #16]
 8009b56:	46a2      	mov	sl, r4
 8009b58:	e7d2      	b.n	8009b00 <_svfiprintf_r+0x9c>
 8009b5a:	9b03      	ldr	r3, [sp, #12]
 8009b5c:	1d19      	adds	r1, r3, #4
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	9103      	str	r1, [sp, #12]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	bfbb      	ittet	lt
 8009b66:	425b      	neglt	r3, r3
 8009b68:	f042 0202 	orrlt.w	r2, r2, #2
 8009b6c:	9307      	strge	r3, [sp, #28]
 8009b6e:	9307      	strlt	r3, [sp, #28]
 8009b70:	bfb8      	it	lt
 8009b72:	9204      	strlt	r2, [sp, #16]
 8009b74:	7823      	ldrb	r3, [r4, #0]
 8009b76:	2b2e      	cmp	r3, #46	; 0x2e
 8009b78:	d10c      	bne.n	8009b94 <_svfiprintf_r+0x130>
 8009b7a:	7863      	ldrb	r3, [r4, #1]
 8009b7c:	2b2a      	cmp	r3, #42	; 0x2a
 8009b7e:	d135      	bne.n	8009bec <_svfiprintf_r+0x188>
 8009b80:	9b03      	ldr	r3, [sp, #12]
 8009b82:	1d1a      	adds	r2, r3, #4
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	9203      	str	r2, [sp, #12]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	bfb8      	it	lt
 8009b8c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009b90:	3402      	adds	r4, #2
 8009b92:	9305      	str	r3, [sp, #20]
 8009b94:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009c60 <_svfiprintf_r+0x1fc>
 8009b98:	7821      	ldrb	r1, [r4, #0]
 8009b9a:	2203      	movs	r2, #3
 8009b9c:	4650      	mov	r0, sl
 8009b9e:	f7f6 fb1f 	bl	80001e0 <memchr>
 8009ba2:	b140      	cbz	r0, 8009bb6 <_svfiprintf_r+0x152>
 8009ba4:	2340      	movs	r3, #64	; 0x40
 8009ba6:	eba0 000a 	sub.w	r0, r0, sl
 8009baa:	fa03 f000 	lsl.w	r0, r3, r0
 8009bae:	9b04      	ldr	r3, [sp, #16]
 8009bb0:	4303      	orrs	r3, r0
 8009bb2:	3401      	adds	r4, #1
 8009bb4:	9304      	str	r3, [sp, #16]
 8009bb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bba:	4826      	ldr	r0, [pc, #152]	; (8009c54 <_svfiprintf_r+0x1f0>)
 8009bbc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009bc0:	2206      	movs	r2, #6
 8009bc2:	f7f6 fb0d 	bl	80001e0 <memchr>
 8009bc6:	2800      	cmp	r0, #0
 8009bc8:	d038      	beq.n	8009c3c <_svfiprintf_r+0x1d8>
 8009bca:	4b23      	ldr	r3, [pc, #140]	; (8009c58 <_svfiprintf_r+0x1f4>)
 8009bcc:	bb1b      	cbnz	r3, 8009c16 <_svfiprintf_r+0x1b2>
 8009bce:	9b03      	ldr	r3, [sp, #12]
 8009bd0:	3307      	adds	r3, #7
 8009bd2:	f023 0307 	bic.w	r3, r3, #7
 8009bd6:	3308      	adds	r3, #8
 8009bd8:	9303      	str	r3, [sp, #12]
 8009bda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bdc:	4433      	add	r3, r6
 8009bde:	9309      	str	r3, [sp, #36]	; 0x24
 8009be0:	e767      	b.n	8009ab2 <_svfiprintf_r+0x4e>
 8009be2:	fb0c 3202 	mla	r2, ip, r2, r3
 8009be6:	460c      	mov	r4, r1
 8009be8:	2001      	movs	r0, #1
 8009bea:	e7a5      	b.n	8009b38 <_svfiprintf_r+0xd4>
 8009bec:	2300      	movs	r3, #0
 8009bee:	3401      	adds	r4, #1
 8009bf0:	9305      	str	r3, [sp, #20]
 8009bf2:	4619      	mov	r1, r3
 8009bf4:	f04f 0c0a 	mov.w	ip, #10
 8009bf8:	4620      	mov	r0, r4
 8009bfa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009bfe:	3a30      	subs	r2, #48	; 0x30
 8009c00:	2a09      	cmp	r2, #9
 8009c02:	d903      	bls.n	8009c0c <_svfiprintf_r+0x1a8>
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d0c5      	beq.n	8009b94 <_svfiprintf_r+0x130>
 8009c08:	9105      	str	r1, [sp, #20]
 8009c0a:	e7c3      	b.n	8009b94 <_svfiprintf_r+0x130>
 8009c0c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c10:	4604      	mov	r4, r0
 8009c12:	2301      	movs	r3, #1
 8009c14:	e7f0      	b.n	8009bf8 <_svfiprintf_r+0x194>
 8009c16:	ab03      	add	r3, sp, #12
 8009c18:	9300      	str	r3, [sp, #0]
 8009c1a:	462a      	mov	r2, r5
 8009c1c:	4b0f      	ldr	r3, [pc, #60]	; (8009c5c <_svfiprintf_r+0x1f8>)
 8009c1e:	a904      	add	r1, sp, #16
 8009c20:	4638      	mov	r0, r7
 8009c22:	f7fc fa47 	bl	80060b4 <_printf_float>
 8009c26:	1c42      	adds	r2, r0, #1
 8009c28:	4606      	mov	r6, r0
 8009c2a:	d1d6      	bne.n	8009bda <_svfiprintf_r+0x176>
 8009c2c:	89ab      	ldrh	r3, [r5, #12]
 8009c2e:	065b      	lsls	r3, r3, #25
 8009c30:	f53f af2c 	bmi.w	8009a8c <_svfiprintf_r+0x28>
 8009c34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009c36:	b01d      	add	sp, #116	; 0x74
 8009c38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c3c:	ab03      	add	r3, sp, #12
 8009c3e:	9300      	str	r3, [sp, #0]
 8009c40:	462a      	mov	r2, r5
 8009c42:	4b06      	ldr	r3, [pc, #24]	; (8009c5c <_svfiprintf_r+0x1f8>)
 8009c44:	a904      	add	r1, sp, #16
 8009c46:	4638      	mov	r0, r7
 8009c48:	f7fc fcd8 	bl	80065fc <_printf_i>
 8009c4c:	e7eb      	b.n	8009c26 <_svfiprintf_r+0x1c2>
 8009c4e:	bf00      	nop
 8009c50:	0800b4cc 	.word	0x0800b4cc
 8009c54:	0800b4d6 	.word	0x0800b4d6
 8009c58:	080060b5 	.word	0x080060b5
 8009c5c:	080099ad 	.word	0x080099ad
 8009c60:	0800b4d2 	.word	0x0800b4d2
 8009c64:	00000000 	.word	0x00000000

08009c68 <nan>:
 8009c68:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009c70 <nan+0x8>
 8009c6c:	4770      	bx	lr
 8009c6e:	bf00      	nop
 8009c70:	00000000 	.word	0x00000000
 8009c74:	7ff80000 	.word	0x7ff80000

08009c78 <_sbrk_r>:
 8009c78:	b538      	push	{r3, r4, r5, lr}
 8009c7a:	4d06      	ldr	r5, [pc, #24]	; (8009c94 <_sbrk_r+0x1c>)
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	4604      	mov	r4, r0
 8009c80:	4608      	mov	r0, r1
 8009c82:	602b      	str	r3, [r5, #0]
 8009c84:	f7f7 ff06 	bl	8001a94 <_sbrk>
 8009c88:	1c43      	adds	r3, r0, #1
 8009c8a:	d102      	bne.n	8009c92 <_sbrk_r+0x1a>
 8009c8c:	682b      	ldr	r3, [r5, #0]
 8009c8e:	b103      	cbz	r3, 8009c92 <_sbrk_r+0x1a>
 8009c90:	6023      	str	r3, [r4, #0]
 8009c92:	bd38      	pop	{r3, r4, r5, pc}
 8009c94:	20000384 	.word	0x20000384

08009c98 <strncmp>:
 8009c98:	b510      	push	{r4, lr}
 8009c9a:	b17a      	cbz	r2, 8009cbc <strncmp+0x24>
 8009c9c:	4603      	mov	r3, r0
 8009c9e:	3901      	subs	r1, #1
 8009ca0:	1884      	adds	r4, r0, r2
 8009ca2:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009ca6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009caa:	4290      	cmp	r0, r2
 8009cac:	d101      	bne.n	8009cb2 <strncmp+0x1a>
 8009cae:	42a3      	cmp	r3, r4
 8009cb0:	d101      	bne.n	8009cb6 <strncmp+0x1e>
 8009cb2:	1a80      	subs	r0, r0, r2
 8009cb4:	bd10      	pop	{r4, pc}
 8009cb6:	2800      	cmp	r0, #0
 8009cb8:	d1f3      	bne.n	8009ca2 <strncmp+0xa>
 8009cba:	e7fa      	b.n	8009cb2 <strncmp+0x1a>
 8009cbc:	4610      	mov	r0, r2
 8009cbe:	e7f9      	b.n	8009cb4 <strncmp+0x1c>

08009cc0 <__ascii_wctomb>:
 8009cc0:	b149      	cbz	r1, 8009cd6 <__ascii_wctomb+0x16>
 8009cc2:	2aff      	cmp	r2, #255	; 0xff
 8009cc4:	bf85      	ittet	hi
 8009cc6:	238a      	movhi	r3, #138	; 0x8a
 8009cc8:	6003      	strhi	r3, [r0, #0]
 8009cca:	700a      	strbls	r2, [r1, #0]
 8009ccc:	f04f 30ff 	movhi.w	r0, #4294967295
 8009cd0:	bf98      	it	ls
 8009cd2:	2001      	movls	r0, #1
 8009cd4:	4770      	bx	lr
 8009cd6:	4608      	mov	r0, r1
 8009cd8:	4770      	bx	lr
	...

08009cdc <__assert_func>:
 8009cdc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009cde:	4614      	mov	r4, r2
 8009ce0:	461a      	mov	r2, r3
 8009ce2:	4b09      	ldr	r3, [pc, #36]	; (8009d08 <__assert_func+0x2c>)
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	4605      	mov	r5, r0
 8009ce8:	68d8      	ldr	r0, [r3, #12]
 8009cea:	b14c      	cbz	r4, 8009d00 <__assert_func+0x24>
 8009cec:	4b07      	ldr	r3, [pc, #28]	; (8009d0c <__assert_func+0x30>)
 8009cee:	9100      	str	r1, [sp, #0]
 8009cf0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009cf4:	4906      	ldr	r1, [pc, #24]	; (8009d10 <__assert_func+0x34>)
 8009cf6:	462b      	mov	r3, r5
 8009cf8:	f000 f80e 	bl	8009d18 <fiprintf>
 8009cfc:	f000 fa8c 	bl	800a218 <abort>
 8009d00:	4b04      	ldr	r3, [pc, #16]	; (8009d14 <__assert_func+0x38>)
 8009d02:	461c      	mov	r4, r3
 8009d04:	e7f3      	b.n	8009cee <__assert_func+0x12>
 8009d06:	bf00      	nop
 8009d08:	2000000c 	.word	0x2000000c
 8009d0c:	0800b4dd 	.word	0x0800b4dd
 8009d10:	0800b4ea 	.word	0x0800b4ea
 8009d14:	0800b518 	.word	0x0800b518

08009d18 <fiprintf>:
 8009d18:	b40e      	push	{r1, r2, r3}
 8009d1a:	b503      	push	{r0, r1, lr}
 8009d1c:	4601      	mov	r1, r0
 8009d1e:	ab03      	add	r3, sp, #12
 8009d20:	4805      	ldr	r0, [pc, #20]	; (8009d38 <fiprintf+0x20>)
 8009d22:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d26:	6800      	ldr	r0, [r0, #0]
 8009d28:	9301      	str	r3, [sp, #4]
 8009d2a:	f000 f885 	bl	8009e38 <_vfiprintf_r>
 8009d2e:	b002      	add	sp, #8
 8009d30:	f85d eb04 	ldr.w	lr, [sp], #4
 8009d34:	b003      	add	sp, #12
 8009d36:	4770      	bx	lr
 8009d38:	2000000c 	.word	0x2000000c

08009d3c <memmove>:
 8009d3c:	4288      	cmp	r0, r1
 8009d3e:	b510      	push	{r4, lr}
 8009d40:	eb01 0402 	add.w	r4, r1, r2
 8009d44:	d902      	bls.n	8009d4c <memmove+0x10>
 8009d46:	4284      	cmp	r4, r0
 8009d48:	4623      	mov	r3, r4
 8009d4a:	d807      	bhi.n	8009d5c <memmove+0x20>
 8009d4c:	1e43      	subs	r3, r0, #1
 8009d4e:	42a1      	cmp	r1, r4
 8009d50:	d008      	beq.n	8009d64 <memmove+0x28>
 8009d52:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009d56:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009d5a:	e7f8      	b.n	8009d4e <memmove+0x12>
 8009d5c:	4402      	add	r2, r0
 8009d5e:	4601      	mov	r1, r0
 8009d60:	428a      	cmp	r2, r1
 8009d62:	d100      	bne.n	8009d66 <memmove+0x2a>
 8009d64:	bd10      	pop	{r4, pc}
 8009d66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009d6a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009d6e:	e7f7      	b.n	8009d60 <memmove+0x24>

08009d70 <__malloc_lock>:
 8009d70:	4801      	ldr	r0, [pc, #4]	; (8009d78 <__malloc_lock+0x8>)
 8009d72:	f000 bc11 	b.w	800a598 <__retarget_lock_acquire_recursive>
 8009d76:	bf00      	nop
 8009d78:	20000388 	.word	0x20000388

08009d7c <__malloc_unlock>:
 8009d7c:	4801      	ldr	r0, [pc, #4]	; (8009d84 <__malloc_unlock+0x8>)
 8009d7e:	f000 bc0c 	b.w	800a59a <__retarget_lock_release_recursive>
 8009d82:	bf00      	nop
 8009d84:	20000388 	.word	0x20000388

08009d88 <_realloc_r>:
 8009d88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d8c:	4680      	mov	r8, r0
 8009d8e:	4614      	mov	r4, r2
 8009d90:	460e      	mov	r6, r1
 8009d92:	b921      	cbnz	r1, 8009d9e <_realloc_r+0x16>
 8009d94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d98:	4611      	mov	r1, r2
 8009d9a:	f7ff bd93 	b.w	80098c4 <_malloc_r>
 8009d9e:	b92a      	cbnz	r2, 8009dac <_realloc_r+0x24>
 8009da0:	f7ff fd24 	bl	80097ec <_free_r>
 8009da4:	4625      	mov	r5, r4
 8009da6:	4628      	mov	r0, r5
 8009da8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009dac:	f000 fc5c 	bl	800a668 <_malloc_usable_size_r>
 8009db0:	4284      	cmp	r4, r0
 8009db2:	4607      	mov	r7, r0
 8009db4:	d802      	bhi.n	8009dbc <_realloc_r+0x34>
 8009db6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009dba:	d812      	bhi.n	8009de2 <_realloc_r+0x5a>
 8009dbc:	4621      	mov	r1, r4
 8009dbe:	4640      	mov	r0, r8
 8009dc0:	f7ff fd80 	bl	80098c4 <_malloc_r>
 8009dc4:	4605      	mov	r5, r0
 8009dc6:	2800      	cmp	r0, #0
 8009dc8:	d0ed      	beq.n	8009da6 <_realloc_r+0x1e>
 8009dca:	42bc      	cmp	r4, r7
 8009dcc:	4622      	mov	r2, r4
 8009dce:	4631      	mov	r1, r6
 8009dd0:	bf28      	it	cs
 8009dd2:	463a      	movcs	r2, r7
 8009dd4:	f7ff f824 	bl	8008e20 <memcpy>
 8009dd8:	4631      	mov	r1, r6
 8009dda:	4640      	mov	r0, r8
 8009ddc:	f7ff fd06 	bl	80097ec <_free_r>
 8009de0:	e7e1      	b.n	8009da6 <_realloc_r+0x1e>
 8009de2:	4635      	mov	r5, r6
 8009de4:	e7df      	b.n	8009da6 <_realloc_r+0x1e>

08009de6 <__sfputc_r>:
 8009de6:	6893      	ldr	r3, [r2, #8]
 8009de8:	3b01      	subs	r3, #1
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	b410      	push	{r4}
 8009dee:	6093      	str	r3, [r2, #8]
 8009df0:	da08      	bge.n	8009e04 <__sfputc_r+0x1e>
 8009df2:	6994      	ldr	r4, [r2, #24]
 8009df4:	42a3      	cmp	r3, r4
 8009df6:	db01      	blt.n	8009dfc <__sfputc_r+0x16>
 8009df8:	290a      	cmp	r1, #10
 8009dfa:	d103      	bne.n	8009e04 <__sfputc_r+0x1e>
 8009dfc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009e00:	f000 b94a 	b.w	800a098 <__swbuf_r>
 8009e04:	6813      	ldr	r3, [r2, #0]
 8009e06:	1c58      	adds	r0, r3, #1
 8009e08:	6010      	str	r0, [r2, #0]
 8009e0a:	7019      	strb	r1, [r3, #0]
 8009e0c:	4608      	mov	r0, r1
 8009e0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009e12:	4770      	bx	lr

08009e14 <__sfputs_r>:
 8009e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e16:	4606      	mov	r6, r0
 8009e18:	460f      	mov	r7, r1
 8009e1a:	4614      	mov	r4, r2
 8009e1c:	18d5      	adds	r5, r2, r3
 8009e1e:	42ac      	cmp	r4, r5
 8009e20:	d101      	bne.n	8009e26 <__sfputs_r+0x12>
 8009e22:	2000      	movs	r0, #0
 8009e24:	e007      	b.n	8009e36 <__sfputs_r+0x22>
 8009e26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e2a:	463a      	mov	r2, r7
 8009e2c:	4630      	mov	r0, r6
 8009e2e:	f7ff ffda 	bl	8009de6 <__sfputc_r>
 8009e32:	1c43      	adds	r3, r0, #1
 8009e34:	d1f3      	bne.n	8009e1e <__sfputs_r+0xa>
 8009e36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009e38 <_vfiprintf_r>:
 8009e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e3c:	460d      	mov	r5, r1
 8009e3e:	b09d      	sub	sp, #116	; 0x74
 8009e40:	4614      	mov	r4, r2
 8009e42:	4698      	mov	r8, r3
 8009e44:	4606      	mov	r6, r0
 8009e46:	b118      	cbz	r0, 8009e50 <_vfiprintf_r+0x18>
 8009e48:	6983      	ldr	r3, [r0, #24]
 8009e4a:	b90b      	cbnz	r3, 8009e50 <_vfiprintf_r+0x18>
 8009e4c:	f000 fb06 	bl	800a45c <__sinit>
 8009e50:	4b89      	ldr	r3, [pc, #548]	; (800a078 <_vfiprintf_r+0x240>)
 8009e52:	429d      	cmp	r5, r3
 8009e54:	d11b      	bne.n	8009e8e <_vfiprintf_r+0x56>
 8009e56:	6875      	ldr	r5, [r6, #4]
 8009e58:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e5a:	07d9      	lsls	r1, r3, #31
 8009e5c:	d405      	bmi.n	8009e6a <_vfiprintf_r+0x32>
 8009e5e:	89ab      	ldrh	r3, [r5, #12]
 8009e60:	059a      	lsls	r2, r3, #22
 8009e62:	d402      	bmi.n	8009e6a <_vfiprintf_r+0x32>
 8009e64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e66:	f000 fb97 	bl	800a598 <__retarget_lock_acquire_recursive>
 8009e6a:	89ab      	ldrh	r3, [r5, #12]
 8009e6c:	071b      	lsls	r3, r3, #28
 8009e6e:	d501      	bpl.n	8009e74 <_vfiprintf_r+0x3c>
 8009e70:	692b      	ldr	r3, [r5, #16]
 8009e72:	b9eb      	cbnz	r3, 8009eb0 <_vfiprintf_r+0x78>
 8009e74:	4629      	mov	r1, r5
 8009e76:	4630      	mov	r0, r6
 8009e78:	f000 f960 	bl	800a13c <__swsetup_r>
 8009e7c:	b1c0      	cbz	r0, 8009eb0 <_vfiprintf_r+0x78>
 8009e7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e80:	07dc      	lsls	r4, r3, #31
 8009e82:	d50e      	bpl.n	8009ea2 <_vfiprintf_r+0x6a>
 8009e84:	f04f 30ff 	mov.w	r0, #4294967295
 8009e88:	b01d      	add	sp, #116	; 0x74
 8009e8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e8e:	4b7b      	ldr	r3, [pc, #492]	; (800a07c <_vfiprintf_r+0x244>)
 8009e90:	429d      	cmp	r5, r3
 8009e92:	d101      	bne.n	8009e98 <_vfiprintf_r+0x60>
 8009e94:	68b5      	ldr	r5, [r6, #8]
 8009e96:	e7df      	b.n	8009e58 <_vfiprintf_r+0x20>
 8009e98:	4b79      	ldr	r3, [pc, #484]	; (800a080 <_vfiprintf_r+0x248>)
 8009e9a:	429d      	cmp	r5, r3
 8009e9c:	bf08      	it	eq
 8009e9e:	68f5      	ldreq	r5, [r6, #12]
 8009ea0:	e7da      	b.n	8009e58 <_vfiprintf_r+0x20>
 8009ea2:	89ab      	ldrh	r3, [r5, #12]
 8009ea4:	0598      	lsls	r0, r3, #22
 8009ea6:	d4ed      	bmi.n	8009e84 <_vfiprintf_r+0x4c>
 8009ea8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009eaa:	f000 fb76 	bl	800a59a <__retarget_lock_release_recursive>
 8009eae:	e7e9      	b.n	8009e84 <_vfiprintf_r+0x4c>
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	9309      	str	r3, [sp, #36]	; 0x24
 8009eb4:	2320      	movs	r3, #32
 8009eb6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009eba:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ebe:	2330      	movs	r3, #48	; 0x30
 8009ec0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a084 <_vfiprintf_r+0x24c>
 8009ec4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009ec8:	f04f 0901 	mov.w	r9, #1
 8009ecc:	4623      	mov	r3, r4
 8009ece:	469a      	mov	sl, r3
 8009ed0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ed4:	b10a      	cbz	r2, 8009eda <_vfiprintf_r+0xa2>
 8009ed6:	2a25      	cmp	r2, #37	; 0x25
 8009ed8:	d1f9      	bne.n	8009ece <_vfiprintf_r+0x96>
 8009eda:	ebba 0b04 	subs.w	fp, sl, r4
 8009ede:	d00b      	beq.n	8009ef8 <_vfiprintf_r+0xc0>
 8009ee0:	465b      	mov	r3, fp
 8009ee2:	4622      	mov	r2, r4
 8009ee4:	4629      	mov	r1, r5
 8009ee6:	4630      	mov	r0, r6
 8009ee8:	f7ff ff94 	bl	8009e14 <__sfputs_r>
 8009eec:	3001      	adds	r0, #1
 8009eee:	f000 80aa 	beq.w	800a046 <_vfiprintf_r+0x20e>
 8009ef2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ef4:	445a      	add	r2, fp
 8009ef6:	9209      	str	r2, [sp, #36]	; 0x24
 8009ef8:	f89a 3000 	ldrb.w	r3, [sl]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	f000 80a2 	beq.w	800a046 <_vfiprintf_r+0x20e>
 8009f02:	2300      	movs	r3, #0
 8009f04:	f04f 32ff 	mov.w	r2, #4294967295
 8009f08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009f0c:	f10a 0a01 	add.w	sl, sl, #1
 8009f10:	9304      	str	r3, [sp, #16]
 8009f12:	9307      	str	r3, [sp, #28]
 8009f14:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009f18:	931a      	str	r3, [sp, #104]	; 0x68
 8009f1a:	4654      	mov	r4, sl
 8009f1c:	2205      	movs	r2, #5
 8009f1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f22:	4858      	ldr	r0, [pc, #352]	; (800a084 <_vfiprintf_r+0x24c>)
 8009f24:	f7f6 f95c 	bl	80001e0 <memchr>
 8009f28:	9a04      	ldr	r2, [sp, #16]
 8009f2a:	b9d8      	cbnz	r0, 8009f64 <_vfiprintf_r+0x12c>
 8009f2c:	06d1      	lsls	r1, r2, #27
 8009f2e:	bf44      	itt	mi
 8009f30:	2320      	movmi	r3, #32
 8009f32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f36:	0713      	lsls	r3, r2, #28
 8009f38:	bf44      	itt	mi
 8009f3a:	232b      	movmi	r3, #43	; 0x2b
 8009f3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f40:	f89a 3000 	ldrb.w	r3, [sl]
 8009f44:	2b2a      	cmp	r3, #42	; 0x2a
 8009f46:	d015      	beq.n	8009f74 <_vfiprintf_r+0x13c>
 8009f48:	9a07      	ldr	r2, [sp, #28]
 8009f4a:	4654      	mov	r4, sl
 8009f4c:	2000      	movs	r0, #0
 8009f4e:	f04f 0c0a 	mov.w	ip, #10
 8009f52:	4621      	mov	r1, r4
 8009f54:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009f58:	3b30      	subs	r3, #48	; 0x30
 8009f5a:	2b09      	cmp	r3, #9
 8009f5c:	d94e      	bls.n	8009ffc <_vfiprintf_r+0x1c4>
 8009f5e:	b1b0      	cbz	r0, 8009f8e <_vfiprintf_r+0x156>
 8009f60:	9207      	str	r2, [sp, #28]
 8009f62:	e014      	b.n	8009f8e <_vfiprintf_r+0x156>
 8009f64:	eba0 0308 	sub.w	r3, r0, r8
 8009f68:	fa09 f303 	lsl.w	r3, r9, r3
 8009f6c:	4313      	orrs	r3, r2
 8009f6e:	9304      	str	r3, [sp, #16]
 8009f70:	46a2      	mov	sl, r4
 8009f72:	e7d2      	b.n	8009f1a <_vfiprintf_r+0xe2>
 8009f74:	9b03      	ldr	r3, [sp, #12]
 8009f76:	1d19      	adds	r1, r3, #4
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	9103      	str	r1, [sp, #12]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	bfbb      	ittet	lt
 8009f80:	425b      	neglt	r3, r3
 8009f82:	f042 0202 	orrlt.w	r2, r2, #2
 8009f86:	9307      	strge	r3, [sp, #28]
 8009f88:	9307      	strlt	r3, [sp, #28]
 8009f8a:	bfb8      	it	lt
 8009f8c:	9204      	strlt	r2, [sp, #16]
 8009f8e:	7823      	ldrb	r3, [r4, #0]
 8009f90:	2b2e      	cmp	r3, #46	; 0x2e
 8009f92:	d10c      	bne.n	8009fae <_vfiprintf_r+0x176>
 8009f94:	7863      	ldrb	r3, [r4, #1]
 8009f96:	2b2a      	cmp	r3, #42	; 0x2a
 8009f98:	d135      	bne.n	800a006 <_vfiprintf_r+0x1ce>
 8009f9a:	9b03      	ldr	r3, [sp, #12]
 8009f9c:	1d1a      	adds	r2, r3, #4
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	9203      	str	r2, [sp, #12]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	bfb8      	it	lt
 8009fa6:	f04f 33ff 	movlt.w	r3, #4294967295
 8009faa:	3402      	adds	r4, #2
 8009fac:	9305      	str	r3, [sp, #20]
 8009fae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a094 <_vfiprintf_r+0x25c>
 8009fb2:	7821      	ldrb	r1, [r4, #0]
 8009fb4:	2203      	movs	r2, #3
 8009fb6:	4650      	mov	r0, sl
 8009fb8:	f7f6 f912 	bl	80001e0 <memchr>
 8009fbc:	b140      	cbz	r0, 8009fd0 <_vfiprintf_r+0x198>
 8009fbe:	2340      	movs	r3, #64	; 0x40
 8009fc0:	eba0 000a 	sub.w	r0, r0, sl
 8009fc4:	fa03 f000 	lsl.w	r0, r3, r0
 8009fc8:	9b04      	ldr	r3, [sp, #16]
 8009fca:	4303      	orrs	r3, r0
 8009fcc:	3401      	adds	r4, #1
 8009fce:	9304      	str	r3, [sp, #16]
 8009fd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fd4:	482c      	ldr	r0, [pc, #176]	; (800a088 <_vfiprintf_r+0x250>)
 8009fd6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009fda:	2206      	movs	r2, #6
 8009fdc:	f7f6 f900 	bl	80001e0 <memchr>
 8009fe0:	2800      	cmp	r0, #0
 8009fe2:	d03f      	beq.n	800a064 <_vfiprintf_r+0x22c>
 8009fe4:	4b29      	ldr	r3, [pc, #164]	; (800a08c <_vfiprintf_r+0x254>)
 8009fe6:	bb1b      	cbnz	r3, 800a030 <_vfiprintf_r+0x1f8>
 8009fe8:	9b03      	ldr	r3, [sp, #12]
 8009fea:	3307      	adds	r3, #7
 8009fec:	f023 0307 	bic.w	r3, r3, #7
 8009ff0:	3308      	adds	r3, #8
 8009ff2:	9303      	str	r3, [sp, #12]
 8009ff4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ff6:	443b      	add	r3, r7
 8009ff8:	9309      	str	r3, [sp, #36]	; 0x24
 8009ffa:	e767      	b.n	8009ecc <_vfiprintf_r+0x94>
 8009ffc:	fb0c 3202 	mla	r2, ip, r2, r3
 800a000:	460c      	mov	r4, r1
 800a002:	2001      	movs	r0, #1
 800a004:	e7a5      	b.n	8009f52 <_vfiprintf_r+0x11a>
 800a006:	2300      	movs	r3, #0
 800a008:	3401      	adds	r4, #1
 800a00a:	9305      	str	r3, [sp, #20]
 800a00c:	4619      	mov	r1, r3
 800a00e:	f04f 0c0a 	mov.w	ip, #10
 800a012:	4620      	mov	r0, r4
 800a014:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a018:	3a30      	subs	r2, #48	; 0x30
 800a01a:	2a09      	cmp	r2, #9
 800a01c:	d903      	bls.n	800a026 <_vfiprintf_r+0x1ee>
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d0c5      	beq.n	8009fae <_vfiprintf_r+0x176>
 800a022:	9105      	str	r1, [sp, #20]
 800a024:	e7c3      	b.n	8009fae <_vfiprintf_r+0x176>
 800a026:	fb0c 2101 	mla	r1, ip, r1, r2
 800a02a:	4604      	mov	r4, r0
 800a02c:	2301      	movs	r3, #1
 800a02e:	e7f0      	b.n	800a012 <_vfiprintf_r+0x1da>
 800a030:	ab03      	add	r3, sp, #12
 800a032:	9300      	str	r3, [sp, #0]
 800a034:	462a      	mov	r2, r5
 800a036:	4b16      	ldr	r3, [pc, #88]	; (800a090 <_vfiprintf_r+0x258>)
 800a038:	a904      	add	r1, sp, #16
 800a03a:	4630      	mov	r0, r6
 800a03c:	f7fc f83a 	bl	80060b4 <_printf_float>
 800a040:	4607      	mov	r7, r0
 800a042:	1c78      	adds	r0, r7, #1
 800a044:	d1d6      	bne.n	8009ff4 <_vfiprintf_r+0x1bc>
 800a046:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a048:	07d9      	lsls	r1, r3, #31
 800a04a:	d405      	bmi.n	800a058 <_vfiprintf_r+0x220>
 800a04c:	89ab      	ldrh	r3, [r5, #12]
 800a04e:	059a      	lsls	r2, r3, #22
 800a050:	d402      	bmi.n	800a058 <_vfiprintf_r+0x220>
 800a052:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a054:	f000 faa1 	bl	800a59a <__retarget_lock_release_recursive>
 800a058:	89ab      	ldrh	r3, [r5, #12]
 800a05a:	065b      	lsls	r3, r3, #25
 800a05c:	f53f af12 	bmi.w	8009e84 <_vfiprintf_r+0x4c>
 800a060:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a062:	e711      	b.n	8009e88 <_vfiprintf_r+0x50>
 800a064:	ab03      	add	r3, sp, #12
 800a066:	9300      	str	r3, [sp, #0]
 800a068:	462a      	mov	r2, r5
 800a06a:	4b09      	ldr	r3, [pc, #36]	; (800a090 <_vfiprintf_r+0x258>)
 800a06c:	a904      	add	r1, sp, #16
 800a06e:	4630      	mov	r0, r6
 800a070:	f7fc fac4 	bl	80065fc <_printf_i>
 800a074:	e7e4      	b.n	800a040 <_vfiprintf_r+0x208>
 800a076:	bf00      	nop
 800a078:	0800b53c 	.word	0x0800b53c
 800a07c:	0800b55c 	.word	0x0800b55c
 800a080:	0800b51c 	.word	0x0800b51c
 800a084:	0800b4cc 	.word	0x0800b4cc
 800a088:	0800b4d6 	.word	0x0800b4d6
 800a08c:	080060b5 	.word	0x080060b5
 800a090:	08009e15 	.word	0x08009e15
 800a094:	0800b4d2 	.word	0x0800b4d2

0800a098 <__swbuf_r>:
 800a098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a09a:	460e      	mov	r6, r1
 800a09c:	4614      	mov	r4, r2
 800a09e:	4605      	mov	r5, r0
 800a0a0:	b118      	cbz	r0, 800a0aa <__swbuf_r+0x12>
 800a0a2:	6983      	ldr	r3, [r0, #24]
 800a0a4:	b90b      	cbnz	r3, 800a0aa <__swbuf_r+0x12>
 800a0a6:	f000 f9d9 	bl	800a45c <__sinit>
 800a0aa:	4b21      	ldr	r3, [pc, #132]	; (800a130 <__swbuf_r+0x98>)
 800a0ac:	429c      	cmp	r4, r3
 800a0ae:	d12b      	bne.n	800a108 <__swbuf_r+0x70>
 800a0b0:	686c      	ldr	r4, [r5, #4]
 800a0b2:	69a3      	ldr	r3, [r4, #24]
 800a0b4:	60a3      	str	r3, [r4, #8]
 800a0b6:	89a3      	ldrh	r3, [r4, #12]
 800a0b8:	071a      	lsls	r2, r3, #28
 800a0ba:	d52f      	bpl.n	800a11c <__swbuf_r+0x84>
 800a0bc:	6923      	ldr	r3, [r4, #16]
 800a0be:	b36b      	cbz	r3, 800a11c <__swbuf_r+0x84>
 800a0c0:	6923      	ldr	r3, [r4, #16]
 800a0c2:	6820      	ldr	r0, [r4, #0]
 800a0c4:	1ac0      	subs	r0, r0, r3
 800a0c6:	6963      	ldr	r3, [r4, #20]
 800a0c8:	b2f6      	uxtb	r6, r6
 800a0ca:	4283      	cmp	r3, r0
 800a0cc:	4637      	mov	r7, r6
 800a0ce:	dc04      	bgt.n	800a0da <__swbuf_r+0x42>
 800a0d0:	4621      	mov	r1, r4
 800a0d2:	4628      	mov	r0, r5
 800a0d4:	f000 f92e 	bl	800a334 <_fflush_r>
 800a0d8:	bb30      	cbnz	r0, 800a128 <__swbuf_r+0x90>
 800a0da:	68a3      	ldr	r3, [r4, #8]
 800a0dc:	3b01      	subs	r3, #1
 800a0de:	60a3      	str	r3, [r4, #8]
 800a0e0:	6823      	ldr	r3, [r4, #0]
 800a0e2:	1c5a      	adds	r2, r3, #1
 800a0e4:	6022      	str	r2, [r4, #0]
 800a0e6:	701e      	strb	r6, [r3, #0]
 800a0e8:	6963      	ldr	r3, [r4, #20]
 800a0ea:	3001      	adds	r0, #1
 800a0ec:	4283      	cmp	r3, r0
 800a0ee:	d004      	beq.n	800a0fa <__swbuf_r+0x62>
 800a0f0:	89a3      	ldrh	r3, [r4, #12]
 800a0f2:	07db      	lsls	r3, r3, #31
 800a0f4:	d506      	bpl.n	800a104 <__swbuf_r+0x6c>
 800a0f6:	2e0a      	cmp	r6, #10
 800a0f8:	d104      	bne.n	800a104 <__swbuf_r+0x6c>
 800a0fa:	4621      	mov	r1, r4
 800a0fc:	4628      	mov	r0, r5
 800a0fe:	f000 f919 	bl	800a334 <_fflush_r>
 800a102:	b988      	cbnz	r0, 800a128 <__swbuf_r+0x90>
 800a104:	4638      	mov	r0, r7
 800a106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a108:	4b0a      	ldr	r3, [pc, #40]	; (800a134 <__swbuf_r+0x9c>)
 800a10a:	429c      	cmp	r4, r3
 800a10c:	d101      	bne.n	800a112 <__swbuf_r+0x7a>
 800a10e:	68ac      	ldr	r4, [r5, #8]
 800a110:	e7cf      	b.n	800a0b2 <__swbuf_r+0x1a>
 800a112:	4b09      	ldr	r3, [pc, #36]	; (800a138 <__swbuf_r+0xa0>)
 800a114:	429c      	cmp	r4, r3
 800a116:	bf08      	it	eq
 800a118:	68ec      	ldreq	r4, [r5, #12]
 800a11a:	e7ca      	b.n	800a0b2 <__swbuf_r+0x1a>
 800a11c:	4621      	mov	r1, r4
 800a11e:	4628      	mov	r0, r5
 800a120:	f000 f80c 	bl	800a13c <__swsetup_r>
 800a124:	2800      	cmp	r0, #0
 800a126:	d0cb      	beq.n	800a0c0 <__swbuf_r+0x28>
 800a128:	f04f 37ff 	mov.w	r7, #4294967295
 800a12c:	e7ea      	b.n	800a104 <__swbuf_r+0x6c>
 800a12e:	bf00      	nop
 800a130:	0800b53c 	.word	0x0800b53c
 800a134:	0800b55c 	.word	0x0800b55c
 800a138:	0800b51c 	.word	0x0800b51c

0800a13c <__swsetup_r>:
 800a13c:	4b32      	ldr	r3, [pc, #200]	; (800a208 <__swsetup_r+0xcc>)
 800a13e:	b570      	push	{r4, r5, r6, lr}
 800a140:	681d      	ldr	r5, [r3, #0]
 800a142:	4606      	mov	r6, r0
 800a144:	460c      	mov	r4, r1
 800a146:	b125      	cbz	r5, 800a152 <__swsetup_r+0x16>
 800a148:	69ab      	ldr	r3, [r5, #24]
 800a14a:	b913      	cbnz	r3, 800a152 <__swsetup_r+0x16>
 800a14c:	4628      	mov	r0, r5
 800a14e:	f000 f985 	bl	800a45c <__sinit>
 800a152:	4b2e      	ldr	r3, [pc, #184]	; (800a20c <__swsetup_r+0xd0>)
 800a154:	429c      	cmp	r4, r3
 800a156:	d10f      	bne.n	800a178 <__swsetup_r+0x3c>
 800a158:	686c      	ldr	r4, [r5, #4]
 800a15a:	89a3      	ldrh	r3, [r4, #12]
 800a15c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a160:	0719      	lsls	r1, r3, #28
 800a162:	d42c      	bmi.n	800a1be <__swsetup_r+0x82>
 800a164:	06dd      	lsls	r5, r3, #27
 800a166:	d411      	bmi.n	800a18c <__swsetup_r+0x50>
 800a168:	2309      	movs	r3, #9
 800a16a:	6033      	str	r3, [r6, #0]
 800a16c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a170:	81a3      	strh	r3, [r4, #12]
 800a172:	f04f 30ff 	mov.w	r0, #4294967295
 800a176:	e03e      	b.n	800a1f6 <__swsetup_r+0xba>
 800a178:	4b25      	ldr	r3, [pc, #148]	; (800a210 <__swsetup_r+0xd4>)
 800a17a:	429c      	cmp	r4, r3
 800a17c:	d101      	bne.n	800a182 <__swsetup_r+0x46>
 800a17e:	68ac      	ldr	r4, [r5, #8]
 800a180:	e7eb      	b.n	800a15a <__swsetup_r+0x1e>
 800a182:	4b24      	ldr	r3, [pc, #144]	; (800a214 <__swsetup_r+0xd8>)
 800a184:	429c      	cmp	r4, r3
 800a186:	bf08      	it	eq
 800a188:	68ec      	ldreq	r4, [r5, #12]
 800a18a:	e7e6      	b.n	800a15a <__swsetup_r+0x1e>
 800a18c:	0758      	lsls	r0, r3, #29
 800a18e:	d512      	bpl.n	800a1b6 <__swsetup_r+0x7a>
 800a190:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a192:	b141      	cbz	r1, 800a1a6 <__swsetup_r+0x6a>
 800a194:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a198:	4299      	cmp	r1, r3
 800a19a:	d002      	beq.n	800a1a2 <__swsetup_r+0x66>
 800a19c:	4630      	mov	r0, r6
 800a19e:	f7ff fb25 	bl	80097ec <_free_r>
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	6363      	str	r3, [r4, #52]	; 0x34
 800a1a6:	89a3      	ldrh	r3, [r4, #12]
 800a1a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a1ac:	81a3      	strh	r3, [r4, #12]
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	6063      	str	r3, [r4, #4]
 800a1b2:	6923      	ldr	r3, [r4, #16]
 800a1b4:	6023      	str	r3, [r4, #0]
 800a1b6:	89a3      	ldrh	r3, [r4, #12]
 800a1b8:	f043 0308 	orr.w	r3, r3, #8
 800a1bc:	81a3      	strh	r3, [r4, #12]
 800a1be:	6923      	ldr	r3, [r4, #16]
 800a1c0:	b94b      	cbnz	r3, 800a1d6 <__swsetup_r+0x9a>
 800a1c2:	89a3      	ldrh	r3, [r4, #12]
 800a1c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a1c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a1cc:	d003      	beq.n	800a1d6 <__swsetup_r+0x9a>
 800a1ce:	4621      	mov	r1, r4
 800a1d0:	4630      	mov	r0, r6
 800a1d2:	f000 fa09 	bl	800a5e8 <__smakebuf_r>
 800a1d6:	89a0      	ldrh	r0, [r4, #12]
 800a1d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a1dc:	f010 0301 	ands.w	r3, r0, #1
 800a1e0:	d00a      	beq.n	800a1f8 <__swsetup_r+0xbc>
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	60a3      	str	r3, [r4, #8]
 800a1e6:	6963      	ldr	r3, [r4, #20]
 800a1e8:	425b      	negs	r3, r3
 800a1ea:	61a3      	str	r3, [r4, #24]
 800a1ec:	6923      	ldr	r3, [r4, #16]
 800a1ee:	b943      	cbnz	r3, 800a202 <__swsetup_r+0xc6>
 800a1f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a1f4:	d1ba      	bne.n	800a16c <__swsetup_r+0x30>
 800a1f6:	bd70      	pop	{r4, r5, r6, pc}
 800a1f8:	0781      	lsls	r1, r0, #30
 800a1fa:	bf58      	it	pl
 800a1fc:	6963      	ldrpl	r3, [r4, #20]
 800a1fe:	60a3      	str	r3, [r4, #8]
 800a200:	e7f4      	b.n	800a1ec <__swsetup_r+0xb0>
 800a202:	2000      	movs	r0, #0
 800a204:	e7f7      	b.n	800a1f6 <__swsetup_r+0xba>
 800a206:	bf00      	nop
 800a208:	2000000c 	.word	0x2000000c
 800a20c:	0800b53c 	.word	0x0800b53c
 800a210:	0800b55c 	.word	0x0800b55c
 800a214:	0800b51c 	.word	0x0800b51c

0800a218 <abort>:
 800a218:	b508      	push	{r3, lr}
 800a21a:	2006      	movs	r0, #6
 800a21c:	f000 fa54 	bl	800a6c8 <raise>
 800a220:	2001      	movs	r0, #1
 800a222:	f7f7 fbbf 	bl	80019a4 <_exit>
	...

0800a228 <__sflush_r>:
 800a228:	898a      	ldrh	r2, [r1, #12]
 800a22a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a22e:	4605      	mov	r5, r0
 800a230:	0710      	lsls	r0, r2, #28
 800a232:	460c      	mov	r4, r1
 800a234:	d458      	bmi.n	800a2e8 <__sflush_r+0xc0>
 800a236:	684b      	ldr	r3, [r1, #4]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	dc05      	bgt.n	800a248 <__sflush_r+0x20>
 800a23c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a23e:	2b00      	cmp	r3, #0
 800a240:	dc02      	bgt.n	800a248 <__sflush_r+0x20>
 800a242:	2000      	movs	r0, #0
 800a244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a248:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a24a:	2e00      	cmp	r6, #0
 800a24c:	d0f9      	beq.n	800a242 <__sflush_r+0x1a>
 800a24e:	2300      	movs	r3, #0
 800a250:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a254:	682f      	ldr	r7, [r5, #0]
 800a256:	602b      	str	r3, [r5, #0]
 800a258:	d032      	beq.n	800a2c0 <__sflush_r+0x98>
 800a25a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a25c:	89a3      	ldrh	r3, [r4, #12]
 800a25e:	075a      	lsls	r2, r3, #29
 800a260:	d505      	bpl.n	800a26e <__sflush_r+0x46>
 800a262:	6863      	ldr	r3, [r4, #4]
 800a264:	1ac0      	subs	r0, r0, r3
 800a266:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a268:	b10b      	cbz	r3, 800a26e <__sflush_r+0x46>
 800a26a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a26c:	1ac0      	subs	r0, r0, r3
 800a26e:	2300      	movs	r3, #0
 800a270:	4602      	mov	r2, r0
 800a272:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a274:	6a21      	ldr	r1, [r4, #32]
 800a276:	4628      	mov	r0, r5
 800a278:	47b0      	blx	r6
 800a27a:	1c43      	adds	r3, r0, #1
 800a27c:	89a3      	ldrh	r3, [r4, #12]
 800a27e:	d106      	bne.n	800a28e <__sflush_r+0x66>
 800a280:	6829      	ldr	r1, [r5, #0]
 800a282:	291d      	cmp	r1, #29
 800a284:	d82c      	bhi.n	800a2e0 <__sflush_r+0xb8>
 800a286:	4a2a      	ldr	r2, [pc, #168]	; (800a330 <__sflush_r+0x108>)
 800a288:	40ca      	lsrs	r2, r1
 800a28a:	07d6      	lsls	r6, r2, #31
 800a28c:	d528      	bpl.n	800a2e0 <__sflush_r+0xb8>
 800a28e:	2200      	movs	r2, #0
 800a290:	6062      	str	r2, [r4, #4]
 800a292:	04d9      	lsls	r1, r3, #19
 800a294:	6922      	ldr	r2, [r4, #16]
 800a296:	6022      	str	r2, [r4, #0]
 800a298:	d504      	bpl.n	800a2a4 <__sflush_r+0x7c>
 800a29a:	1c42      	adds	r2, r0, #1
 800a29c:	d101      	bne.n	800a2a2 <__sflush_r+0x7a>
 800a29e:	682b      	ldr	r3, [r5, #0]
 800a2a0:	b903      	cbnz	r3, 800a2a4 <__sflush_r+0x7c>
 800a2a2:	6560      	str	r0, [r4, #84]	; 0x54
 800a2a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a2a6:	602f      	str	r7, [r5, #0]
 800a2a8:	2900      	cmp	r1, #0
 800a2aa:	d0ca      	beq.n	800a242 <__sflush_r+0x1a>
 800a2ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a2b0:	4299      	cmp	r1, r3
 800a2b2:	d002      	beq.n	800a2ba <__sflush_r+0x92>
 800a2b4:	4628      	mov	r0, r5
 800a2b6:	f7ff fa99 	bl	80097ec <_free_r>
 800a2ba:	2000      	movs	r0, #0
 800a2bc:	6360      	str	r0, [r4, #52]	; 0x34
 800a2be:	e7c1      	b.n	800a244 <__sflush_r+0x1c>
 800a2c0:	6a21      	ldr	r1, [r4, #32]
 800a2c2:	2301      	movs	r3, #1
 800a2c4:	4628      	mov	r0, r5
 800a2c6:	47b0      	blx	r6
 800a2c8:	1c41      	adds	r1, r0, #1
 800a2ca:	d1c7      	bne.n	800a25c <__sflush_r+0x34>
 800a2cc:	682b      	ldr	r3, [r5, #0]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d0c4      	beq.n	800a25c <__sflush_r+0x34>
 800a2d2:	2b1d      	cmp	r3, #29
 800a2d4:	d001      	beq.n	800a2da <__sflush_r+0xb2>
 800a2d6:	2b16      	cmp	r3, #22
 800a2d8:	d101      	bne.n	800a2de <__sflush_r+0xb6>
 800a2da:	602f      	str	r7, [r5, #0]
 800a2dc:	e7b1      	b.n	800a242 <__sflush_r+0x1a>
 800a2de:	89a3      	ldrh	r3, [r4, #12]
 800a2e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a2e4:	81a3      	strh	r3, [r4, #12]
 800a2e6:	e7ad      	b.n	800a244 <__sflush_r+0x1c>
 800a2e8:	690f      	ldr	r7, [r1, #16]
 800a2ea:	2f00      	cmp	r7, #0
 800a2ec:	d0a9      	beq.n	800a242 <__sflush_r+0x1a>
 800a2ee:	0793      	lsls	r3, r2, #30
 800a2f0:	680e      	ldr	r6, [r1, #0]
 800a2f2:	bf08      	it	eq
 800a2f4:	694b      	ldreq	r3, [r1, #20]
 800a2f6:	600f      	str	r7, [r1, #0]
 800a2f8:	bf18      	it	ne
 800a2fa:	2300      	movne	r3, #0
 800a2fc:	eba6 0807 	sub.w	r8, r6, r7
 800a300:	608b      	str	r3, [r1, #8]
 800a302:	f1b8 0f00 	cmp.w	r8, #0
 800a306:	dd9c      	ble.n	800a242 <__sflush_r+0x1a>
 800a308:	6a21      	ldr	r1, [r4, #32]
 800a30a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a30c:	4643      	mov	r3, r8
 800a30e:	463a      	mov	r2, r7
 800a310:	4628      	mov	r0, r5
 800a312:	47b0      	blx	r6
 800a314:	2800      	cmp	r0, #0
 800a316:	dc06      	bgt.n	800a326 <__sflush_r+0xfe>
 800a318:	89a3      	ldrh	r3, [r4, #12]
 800a31a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a31e:	81a3      	strh	r3, [r4, #12]
 800a320:	f04f 30ff 	mov.w	r0, #4294967295
 800a324:	e78e      	b.n	800a244 <__sflush_r+0x1c>
 800a326:	4407      	add	r7, r0
 800a328:	eba8 0800 	sub.w	r8, r8, r0
 800a32c:	e7e9      	b.n	800a302 <__sflush_r+0xda>
 800a32e:	bf00      	nop
 800a330:	20400001 	.word	0x20400001

0800a334 <_fflush_r>:
 800a334:	b538      	push	{r3, r4, r5, lr}
 800a336:	690b      	ldr	r3, [r1, #16]
 800a338:	4605      	mov	r5, r0
 800a33a:	460c      	mov	r4, r1
 800a33c:	b913      	cbnz	r3, 800a344 <_fflush_r+0x10>
 800a33e:	2500      	movs	r5, #0
 800a340:	4628      	mov	r0, r5
 800a342:	bd38      	pop	{r3, r4, r5, pc}
 800a344:	b118      	cbz	r0, 800a34e <_fflush_r+0x1a>
 800a346:	6983      	ldr	r3, [r0, #24]
 800a348:	b90b      	cbnz	r3, 800a34e <_fflush_r+0x1a>
 800a34a:	f000 f887 	bl	800a45c <__sinit>
 800a34e:	4b14      	ldr	r3, [pc, #80]	; (800a3a0 <_fflush_r+0x6c>)
 800a350:	429c      	cmp	r4, r3
 800a352:	d11b      	bne.n	800a38c <_fflush_r+0x58>
 800a354:	686c      	ldr	r4, [r5, #4]
 800a356:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d0ef      	beq.n	800a33e <_fflush_r+0xa>
 800a35e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a360:	07d0      	lsls	r0, r2, #31
 800a362:	d404      	bmi.n	800a36e <_fflush_r+0x3a>
 800a364:	0599      	lsls	r1, r3, #22
 800a366:	d402      	bmi.n	800a36e <_fflush_r+0x3a>
 800a368:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a36a:	f000 f915 	bl	800a598 <__retarget_lock_acquire_recursive>
 800a36e:	4628      	mov	r0, r5
 800a370:	4621      	mov	r1, r4
 800a372:	f7ff ff59 	bl	800a228 <__sflush_r>
 800a376:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a378:	07da      	lsls	r2, r3, #31
 800a37a:	4605      	mov	r5, r0
 800a37c:	d4e0      	bmi.n	800a340 <_fflush_r+0xc>
 800a37e:	89a3      	ldrh	r3, [r4, #12]
 800a380:	059b      	lsls	r3, r3, #22
 800a382:	d4dd      	bmi.n	800a340 <_fflush_r+0xc>
 800a384:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a386:	f000 f908 	bl	800a59a <__retarget_lock_release_recursive>
 800a38a:	e7d9      	b.n	800a340 <_fflush_r+0xc>
 800a38c:	4b05      	ldr	r3, [pc, #20]	; (800a3a4 <_fflush_r+0x70>)
 800a38e:	429c      	cmp	r4, r3
 800a390:	d101      	bne.n	800a396 <_fflush_r+0x62>
 800a392:	68ac      	ldr	r4, [r5, #8]
 800a394:	e7df      	b.n	800a356 <_fflush_r+0x22>
 800a396:	4b04      	ldr	r3, [pc, #16]	; (800a3a8 <_fflush_r+0x74>)
 800a398:	429c      	cmp	r4, r3
 800a39a:	bf08      	it	eq
 800a39c:	68ec      	ldreq	r4, [r5, #12]
 800a39e:	e7da      	b.n	800a356 <_fflush_r+0x22>
 800a3a0:	0800b53c 	.word	0x0800b53c
 800a3a4:	0800b55c 	.word	0x0800b55c
 800a3a8:	0800b51c 	.word	0x0800b51c

0800a3ac <std>:
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	b510      	push	{r4, lr}
 800a3b0:	4604      	mov	r4, r0
 800a3b2:	e9c0 3300 	strd	r3, r3, [r0]
 800a3b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a3ba:	6083      	str	r3, [r0, #8]
 800a3bc:	8181      	strh	r1, [r0, #12]
 800a3be:	6643      	str	r3, [r0, #100]	; 0x64
 800a3c0:	81c2      	strh	r2, [r0, #14]
 800a3c2:	6183      	str	r3, [r0, #24]
 800a3c4:	4619      	mov	r1, r3
 800a3c6:	2208      	movs	r2, #8
 800a3c8:	305c      	adds	r0, #92	; 0x5c
 800a3ca:	f7fb fdcb 	bl	8005f64 <memset>
 800a3ce:	4b05      	ldr	r3, [pc, #20]	; (800a3e4 <std+0x38>)
 800a3d0:	6263      	str	r3, [r4, #36]	; 0x24
 800a3d2:	4b05      	ldr	r3, [pc, #20]	; (800a3e8 <std+0x3c>)
 800a3d4:	62a3      	str	r3, [r4, #40]	; 0x28
 800a3d6:	4b05      	ldr	r3, [pc, #20]	; (800a3ec <std+0x40>)
 800a3d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a3da:	4b05      	ldr	r3, [pc, #20]	; (800a3f0 <std+0x44>)
 800a3dc:	6224      	str	r4, [r4, #32]
 800a3de:	6323      	str	r3, [r4, #48]	; 0x30
 800a3e0:	bd10      	pop	{r4, pc}
 800a3e2:	bf00      	nop
 800a3e4:	0800a701 	.word	0x0800a701
 800a3e8:	0800a723 	.word	0x0800a723
 800a3ec:	0800a75b 	.word	0x0800a75b
 800a3f0:	0800a77f 	.word	0x0800a77f

0800a3f4 <_cleanup_r>:
 800a3f4:	4901      	ldr	r1, [pc, #4]	; (800a3fc <_cleanup_r+0x8>)
 800a3f6:	f000 b8af 	b.w	800a558 <_fwalk_reent>
 800a3fa:	bf00      	nop
 800a3fc:	0800a335 	.word	0x0800a335

0800a400 <__sfmoreglue>:
 800a400:	b570      	push	{r4, r5, r6, lr}
 800a402:	2268      	movs	r2, #104	; 0x68
 800a404:	1e4d      	subs	r5, r1, #1
 800a406:	4355      	muls	r5, r2
 800a408:	460e      	mov	r6, r1
 800a40a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a40e:	f7ff fa59 	bl	80098c4 <_malloc_r>
 800a412:	4604      	mov	r4, r0
 800a414:	b140      	cbz	r0, 800a428 <__sfmoreglue+0x28>
 800a416:	2100      	movs	r1, #0
 800a418:	e9c0 1600 	strd	r1, r6, [r0]
 800a41c:	300c      	adds	r0, #12
 800a41e:	60a0      	str	r0, [r4, #8]
 800a420:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a424:	f7fb fd9e 	bl	8005f64 <memset>
 800a428:	4620      	mov	r0, r4
 800a42a:	bd70      	pop	{r4, r5, r6, pc}

0800a42c <__sfp_lock_acquire>:
 800a42c:	4801      	ldr	r0, [pc, #4]	; (800a434 <__sfp_lock_acquire+0x8>)
 800a42e:	f000 b8b3 	b.w	800a598 <__retarget_lock_acquire_recursive>
 800a432:	bf00      	nop
 800a434:	20000389 	.word	0x20000389

0800a438 <__sfp_lock_release>:
 800a438:	4801      	ldr	r0, [pc, #4]	; (800a440 <__sfp_lock_release+0x8>)
 800a43a:	f000 b8ae 	b.w	800a59a <__retarget_lock_release_recursive>
 800a43e:	bf00      	nop
 800a440:	20000389 	.word	0x20000389

0800a444 <__sinit_lock_acquire>:
 800a444:	4801      	ldr	r0, [pc, #4]	; (800a44c <__sinit_lock_acquire+0x8>)
 800a446:	f000 b8a7 	b.w	800a598 <__retarget_lock_acquire_recursive>
 800a44a:	bf00      	nop
 800a44c:	2000038a 	.word	0x2000038a

0800a450 <__sinit_lock_release>:
 800a450:	4801      	ldr	r0, [pc, #4]	; (800a458 <__sinit_lock_release+0x8>)
 800a452:	f000 b8a2 	b.w	800a59a <__retarget_lock_release_recursive>
 800a456:	bf00      	nop
 800a458:	2000038a 	.word	0x2000038a

0800a45c <__sinit>:
 800a45c:	b510      	push	{r4, lr}
 800a45e:	4604      	mov	r4, r0
 800a460:	f7ff fff0 	bl	800a444 <__sinit_lock_acquire>
 800a464:	69a3      	ldr	r3, [r4, #24]
 800a466:	b11b      	cbz	r3, 800a470 <__sinit+0x14>
 800a468:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a46c:	f7ff bff0 	b.w	800a450 <__sinit_lock_release>
 800a470:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a474:	6523      	str	r3, [r4, #80]	; 0x50
 800a476:	4b13      	ldr	r3, [pc, #76]	; (800a4c4 <__sinit+0x68>)
 800a478:	4a13      	ldr	r2, [pc, #76]	; (800a4c8 <__sinit+0x6c>)
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	62a2      	str	r2, [r4, #40]	; 0x28
 800a47e:	42a3      	cmp	r3, r4
 800a480:	bf04      	itt	eq
 800a482:	2301      	moveq	r3, #1
 800a484:	61a3      	streq	r3, [r4, #24]
 800a486:	4620      	mov	r0, r4
 800a488:	f000 f820 	bl	800a4cc <__sfp>
 800a48c:	6060      	str	r0, [r4, #4]
 800a48e:	4620      	mov	r0, r4
 800a490:	f000 f81c 	bl	800a4cc <__sfp>
 800a494:	60a0      	str	r0, [r4, #8]
 800a496:	4620      	mov	r0, r4
 800a498:	f000 f818 	bl	800a4cc <__sfp>
 800a49c:	2200      	movs	r2, #0
 800a49e:	60e0      	str	r0, [r4, #12]
 800a4a0:	2104      	movs	r1, #4
 800a4a2:	6860      	ldr	r0, [r4, #4]
 800a4a4:	f7ff ff82 	bl	800a3ac <std>
 800a4a8:	68a0      	ldr	r0, [r4, #8]
 800a4aa:	2201      	movs	r2, #1
 800a4ac:	2109      	movs	r1, #9
 800a4ae:	f7ff ff7d 	bl	800a3ac <std>
 800a4b2:	68e0      	ldr	r0, [r4, #12]
 800a4b4:	2202      	movs	r2, #2
 800a4b6:	2112      	movs	r1, #18
 800a4b8:	f7ff ff78 	bl	800a3ac <std>
 800a4bc:	2301      	movs	r3, #1
 800a4be:	61a3      	str	r3, [r4, #24]
 800a4c0:	e7d2      	b.n	800a468 <__sinit+0xc>
 800a4c2:	bf00      	nop
 800a4c4:	0800b0d8 	.word	0x0800b0d8
 800a4c8:	0800a3f5 	.word	0x0800a3f5

0800a4cc <__sfp>:
 800a4cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4ce:	4607      	mov	r7, r0
 800a4d0:	f7ff ffac 	bl	800a42c <__sfp_lock_acquire>
 800a4d4:	4b1e      	ldr	r3, [pc, #120]	; (800a550 <__sfp+0x84>)
 800a4d6:	681e      	ldr	r6, [r3, #0]
 800a4d8:	69b3      	ldr	r3, [r6, #24]
 800a4da:	b913      	cbnz	r3, 800a4e2 <__sfp+0x16>
 800a4dc:	4630      	mov	r0, r6
 800a4de:	f7ff ffbd 	bl	800a45c <__sinit>
 800a4e2:	3648      	adds	r6, #72	; 0x48
 800a4e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a4e8:	3b01      	subs	r3, #1
 800a4ea:	d503      	bpl.n	800a4f4 <__sfp+0x28>
 800a4ec:	6833      	ldr	r3, [r6, #0]
 800a4ee:	b30b      	cbz	r3, 800a534 <__sfp+0x68>
 800a4f0:	6836      	ldr	r6, [r6, #0]
 800a4f2:	e7f7      	b.n	800a4e4 <__sfp+0x18>
 800a4f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a4f8:	b9d5      	cbnz	r5, 800a530 <__sfp+0x64>
 800a4fa:	4b16      	ldr	r3, [pc, #88]	; (800a554 <__sfp+0x88>)
 800a4fc:	60e3      	str	r3, [r4, #12]
 800a4fe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a502:	6665      	str	r5, [r4, #100]	; 0x64
 800a504:	f000 f847 	bl	800a596 <__retarget_lock_init_recursive>
 800a508:	f7ff ff96 	bl	800a438 <__sfp_lock_release>
 800a50c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a510:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a514:	6025      	str	r5, [r4, #0]
 800a516:	61a5      	str	r5, [r4, #24]
 800a518:	2208      	movs	r2, #8
 800a51a:	4629      	mov	r1, r5
 800a51c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a520:	f7fb fd20 	bl	8005f64 <memset>
 800a524:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a528:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a52c:	4620      	mov	r0, r4
 800a52e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a530:	3468      	adds	r4, #104	; 0x68
 800a532:	e7d9      	b.n	800a4e8 <__sfp+0x1c>
 800a534:	2104      	movs	r1, #4
 800a536:	4638      	mov	r0, r7
 800a538:	f7ff ff62 	bl	800a400 <__sfmoreglue>
 800a53c:	4604      	mov	r4, r0
 800a53e:	6030      	str	r0, [r6, #0]
 800a540:	2800      	cmp	r0, #0
 800a542:	d1d5      	bne.n	800a4f0 <__sfp+0x24>
 800a544:	f7ff ff78 	bl	800a438 <__sfp_lock_release>
 800a548:	230c      	movs	r3, #12
 800a54a:	603b      	str	r3, [r7, #0]
 800a54c:	e7ee      	b.n	800a52c <__sfp+0x60>
 800a54e:	bf00      	nop
 800a550:	0800b0d8 	.word	0x0800b0d8
 800a554:	ffff0001 	.word	0xffff0001

0800a558 <_fwalk_reent>:
 800a558:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a55c:	4606      	mov	r6, r0
 800a55e:	4688      	mov	r8, r1
 800a560:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a564:	2700      	movs	r7, #0
 800a566:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a56a:	f1b9 0901 	subs.w	r9, r9, #1
 800a56e:	d505      	bpl.n	800a57c <_fwalk_reent+0x24>
 800a570:	6824      	ldr	r4, [r4, #0]
 800a572:	2c00      	cmp	r4, #0
 800a574:	d1f7      	bne.n	800a566 <_fwalk_reent+0xe>
 800a576:	4638      	mov	r0, r7
 800a578:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a57c:	89ab      	ldrh	r3, [r5, #12]
 800a57e:	2b01      	cmp	r3, #1
 800a580:	d907      	bls.n	800a592 <_fwalk_reent+0x3a>
 800a582:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a586:	3301      	adds	r3, #1
 800a588:	d003      	beq.n	800a592 <_fwalk_reent+0x3a>
 800a58a:	4629      	mov	r1, r5
 800a58c:	4630      	mov	r0, r6
 800a58e:	47c0      	blx	r8
 800a590:	4307      	orrs	r7, r0
 800a592:	3568      	adds	r5, #104	; 0x68
 800a594:	e7e9      	b.n	800a56a <_fwalk_reent+0x12>

0800a596 <__retarget_lock_init_recursive>:
 800a596:	4770      	bx	lr

0800a598 <__retarget_lock_acquire_recursive>:
 800a598:	4770      	bx	lr

0800a59a <__retarget_lock_release_recursive>:
 800a59a:	4770      	bx	lr

0800a59c <__swhatbuf_r>:
 800a59c:	b570      	push	{r4, r5, r6, lr}
 800a59e:	460e      	mov	r6, r1
 800a5a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5a4:	2900      	cmp	r1, #0
 800a5a6:	b096      	sub	sp, #88	; 0x58
 800a5a8:	4614      	mov	r4, r2
 800a5aa:	461d      	mov	r5, r3
 800a5ac:	da08      	bge.n	800a5c0 <__swhatbuf_r+0x24>
 800a5ae:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	602a      	str	r2, [r5, #0]
 800a5b6:	061a      	lsls	r2, r3, #24
 800a5b8:	d410      	bmi.n	800a5dc <__swhatbuf_r+0x40>
 800a5ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a5be:	e00e      	b.n	800a5de <__swhatbuf_r+0x42>
 800a5c0:	466a      	mov	r2, sp
 800a5c2:	f000 f903 	bl	800a7cc <_fstat_r>
 800a5c6:	2800      	cmp	r0, #0
 800a5c8:	dbf1      	blt.n	800a5ae <__swhatbuf_r+0x12>
 800a5ca:	9a01      	ldr	r2, [sp, #4]
 800a5cc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a5d0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a5d4:	425a      	negs	r2, r3
 800a5d6:	415a      	adcs	r2, r3
 800a5d8:	602a      	str	r2, [r5, #0]
 800a5da:	e7ee      	b.n	800a5ba <__swhatbuf_r+0x1e>
 800a5dc:	2340      	movs	r3, #64	; 0x40
 800a5de:	2000      	movs	r0, #0
 800a5e0:	6023      	str	r3, [r4, #0]
 800a5e2:	b016      	add	sp, #88	; 0x58
 800a5e4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a5e8 <__smakebuf_r>:
 800a5e8:	898b      	ldrh	r3, [r1, #12]
 800a5ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a5ec:	079d      	lsls	r5, r3, #30
 800a5ee:	4606      	mov	r6, r0
 800a5f0:	460c      	mov	r4, r1
 800a5f2:	d507      	bpl.n	800a604 <__smakebuf_r+0x1c>
 800a5f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a5f8:	6023      	str	r3, [r4, #0]
 800a5fa:	6123      	str	r3, [r4, #16]
 800a5fc:	2301      	movs	r3, #1
 800a5fe:	6163      	str	r3, [r4, #20]
 800a600:	b002      	add	sp, #8
 800a602:	bd70      	pop	{r4, r5, r6, pc}
 800a604:	ab01      	add	r3, sp, #4
 800a606:	466a      	mov	r2, sp
 800a608:	f7ff ffc8 	bl	800a59c <__swhatbuf_r>
 800a60c:	9900      	ldr	r1, [sp, #0]
 800a60e:	4605      	mov	r5, r0
 800a610:	4630      	mov	r0, r6
 800a612:	f7ff f957 	bl	80098c4 <_malloc_r>
 800a616:	b948      	cbnz	r0, 800a62c <__smakebuf_r+0x44>
 800a618:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a61c:	059a      	lsls	r2, r3, #22
 800a61e:	d4ef      	bmi.n	800a600 <__smakebuf_r+0x18>
 800a620:	f023 0303 	bic.w	r3, r3, #3
 800a624:	f043 0302 	orr.w	r3, r3, #2
 800a628:	81a3      	strh	r3, [r4, #12]
 800a62a:	e7e3      	b.n	800a5f4 <__smakebuf_r+0xc>
 800a62c:	4b0d      	ldr	r3, [pc, #52]	; (800a664 <__smakebuf_r+0x7c>)
 800a62e:	62b3      	str	r3, [r6, #40]	; 0x28
 800a630:	89a3      	ldrh	r3, [r4, #12]
 800a632:	6020      	str	r0, [r4, #0]
 800a634:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a638:	81a3      	strh	r3, [r4, #12]
 800a63a:	9b00      	ldr	r3, [sp, #0]
 800a63c:	6163      	str	r3, [r4, #20]
 800a63e:	9b01      	ldr	r3, [sp, #4]
 800a640:	6120      	str	r0, [r4, #16]
 800a642:	b15b      	cbz	r3, 800a65c <__smakebuf_r+0x74>
 800a644:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a648:	4630      	mov	r0, r6
 800a64a:	f000 f8d1 	bl	800a7f0 <_isatty_r>
 800a64e:	b128      	cbz	r0, 800a65c <__smakebuf_r+0x74>
 800a650:	89a3      	ldrh	r3, [r4, #12]
 800a652:	f023 0303 	bic.w	r3, r3, #3
 800a656:	f043 0301 	orr.w	r3, r3, #1
 800a65a:	81a3      	strh	r3, [r4, #12]
 800a65c:	89a0      	ldrh	r0, [r4, #12]
 800a65e:	4305      	orrs	r5, r0
 800a660:	81a5      	strh	r5, [r4, #12]
 800a662:	e7cd      	b.n	800a600 <__smakebuf_r+0x18>
 800a664:	0800a3f5 	.word	0x0800a3f5

0800a668 <_malloc_usable_size_r>:
 800a668:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a66c:	1f18      	subs	r0, r3, #4
 800a66e:	2b00      	cmp	r3, #0
 800a670:	bfbc      	itt	lt
 800a672:	580b      	ldrlt	r3, [r1, r0]
 800a674:	18c0      	addlt	r0, r0, r3
 800a676:	4770      	bx	lr

0800a678 <_raise_r>:
 800a678:	291f      	cmp	r1, #31
 800a67a:	b538      	push	{r3, r4, r5, lr}
 800a67c:	4604      	mov	r4, r0
 800a67e:	460d      	mov	r5, r1
 800a680:	d904      	bls.n	800a68c <_raise_r+0x14>
 800a682:	2316      	movs	r3, #22
 800a684:	6003      	str	r3, [r0, #0]
 800a686:	f04f 30ff 	mov.w	r0, #4294967295
 800a68a:	bd38      	pop	{r3, r4, r5, pc}
 800a68c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a68e:	b112      	cbz	r2, 800a696 <_raise_r+0x1e>
 800a690:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a694:	b94b      	cbnz	r3, 800a6aa <_raise_r+0x32>
 800a696:	4620      	mov	r0, r4
 800a698:	f000 f830 	bl	800a6fc <_getpid_r>
 800a69c:	462a      	mov	r2, r5
 800a69e:	4601      	mov	r1, r0
 800a6a0:	4620      	mov	r0, r4
 800a6a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a6a6:	f000 b817 	b.w	800a6d8 <_kill_r>
 800a6aa:	2b01      	cmp	r3, #1
 800a6ac:	d00a      	beq.n	800a6c4 <_raise_r+0x4c>
 800a6ae:	1c59      	adds	r1, r3, #1
 800a6b0:	d103      	bne.n	800a6ba <_raise_r+0x42>
 800a6b2:	2316      	movs	r3, #22
 800a6b4:	6003      	str	r3, [r0, #0]
 800a6b6:	2001      	movs	r0, #1
 800a6b8:	e7e7      	b.n	800a68a <_raise_r+0x12>
 800a6ba:	2400      	movs	r4, #0
 800a6bc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a6c0:	4628      	mov	r0, r5
 800a6c2:	4798      	blx	r3
 800a6c4:	2000      	movs	r0, #0
 800a6c6:	e7e0      	b.n	800a68a <_raise_r+0x12>

0800a6c8 <raise>:
 800a6c8:	4b02      	ldr	r3, [pc, #8]	; (800a6d4 <raise+0xc>)
 800a6ca:	4601      	mov	r1, r0
 800a6cc:	6818      	ldr	r0, [r3, #0]
 800a6ce:	f7ff bfd3 	b.w	800a678 <_raise_r>
 800a6d2:	bf00      	nop
 800a6d4:	2000000c 	.word	0x2000000c

0800a6d8 <_kill_r>:
 800a6d8:	b538      	push	{r3, r4, r5, lr}
 800a6da:	4d07      	ldr	r5, [pc, #28]	; (800a6f8 <_kill_r+0x20>)
 800a6dc:	2300      	movs	r3, #0
 800a6de:	4604      	mov	r4, r0
 800a6e0:	4608      	mov	r0, r1
 800a6e2:	4611      	mov	r1, r2
 800a6e4:	602b      	str	r3, [r5, #0]
 800a6e6:	f7f7 f94d 	bl	8001984 <_kill>
 800a6ea:	1c43      	adds	r3, r0, #1
 800a6ec:	d102      	bne.n	800a6f4 <_kill_r+0x1c>
 800a6ee:	682b      	ldr	r3, [r5, #0]
 800a6f0:	b103      	cbz	r3, 800a6f4 <_kill_r+0x1c>
 800a6f2:	6023      	str	r3, [r4, #0]
 800a6f4:	bd38      	pop	{r3, r4, r5, pc}
 800a6f6:	bf00      	nop
 800a6f8:	20000384 	.word	0x20000384

0800a6fc <_getpid_r>:
 800a6fc:	f7f7 b93a 	b.w	8001974 <_getpid>

0800a700 <__sread>:
 800a700:	b510      	push	{r4, lr}
 800a702:	460c      	mov	r4, r1
 800a704:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a708:	f000 f894 	bl	800a834 <_read_r>
 800a70c:	2800      	cmp	r0, #0
 800a70e:	bfab      	itete	ge
 800a710:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a712:	89a3      	ldrhlt	r3, [r4, #12]
 800a714:	181b      	addge	r3, r3, r0
 800a716:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a71a:	bfac      	ite	ge
 800a71c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a71e:	81a3      	strhlt	r3, [r4, #12]
 800a720:	bd10      	pop	{r4, pc}

0800a722 <__swrite>:
 800a722:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a726:	461f      	mov	r7, r3
 800a728:	898b      	ldrh	r3, [r1, #12]
 800a72a:	05db      	lsls	r3, r3, #23
 800a72c:	4605      	mov	r5, r0
 800a72e:	460c      	mov	r4, r1
 800a730:	4616      	mov	r6, r2
 800a732:	d505      	bpl.n	800a740 <__swrite+0x1e>
 800a734:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a738:	2302      	movs	r3, #2
 800a73a:	2200      	movs	r2, #0
 800a73c:	f000 f868 	bl	800a810 <_lseek_r>
 800a740:	89a3      	ldrh	r3, [r4, #12]
 800a742:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a746:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a74a:	81a3      	strh	r3, [r4, #12]
 800a74c:	4632      	mov	r2, r6
 800a74e:	463b      	mov	r3, r7
 800a750:	4628      	mov	r0, r5
 800a752:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a756:	f000 b817 	b.w	800a788 <_write_r>

0800a75a <__sseek>:
 800a75a:	b510      	push	{r4, lr}
 800a75c:	460c      	mov	r4, r1
 800a75e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a762:	f000 f855 	bl	800a810 <_lseek_r>
 800a766:	1c43      	adds	r3, r0, #1
 800a768:	89a3      	ldrh	r3, [r4, #12]
 800a76a:	bf15      	itete	ne
 800a76c:	6560      	strne	r0, [r4, #84]	; 0x54
 800a76e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a772:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a776:	81a3      	strheq	r3, [r4, #12]
 800a778:	bf18      	it	ne
 800a77a:	81a3      	strhne	r3, [r4, #12]
 800a77c:	bd10      	pop	{r4, pc}

0800a77e <__sclose>:
 800a77e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a782:	f000 b813 	b.w	800a7ac <_close_r>
	...

0800a788 <_write_r>:
 800a788:	b538      	push	{r3, r4, r5, lr}
 800a78a:	4d07      	ldr	r5, [pc, #28]	; (800a7a8 <_write_r+0x20>)
 800a78c:	4604      	mov	r4, r0
 800a78e:	4608      	mov	r0, r1
 800a790:	4611      	mov	r1, r2
 800a792:	2200      	movs	r2, #0
 800a794:	602a      	str	r2, [r5, #0]
 800a796:	461a      	mov	r2, r3
 800a798:	f7f7 f92b 	bl	80019f2 <_write>
 800a79c:	1c43      	adds	r3, r0, #1
 800a79e:	d102      	bne.n	800a7a6 <_write_r+0x1e>
 800a7a0:	682b      	ldr	r3, [r5, #0]
 800a7a2:	b103      	cbz	r3, 800a7a6 <_write_r+0x1e>
 800a7a4:	6023      	str	r3, [r4, #0]
 800a7a6:	bd38      	pop	{r3, r4, r5, pc}
 800a7a8:	20000384 	.word	0x20000384

0800a7ac <_close_r>:
 800a7ac:	b538      	push	{r3, r4, r5, lr}
 800a7ae:	4d06      	ldr	r5, [pc, #24]	; (800a7c8 <_close_r+0x1c>)
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	4604      	mov	r4, r0
 800a7b4:	4608      	mov	r0, r1
 800a7b6:	602b      	str	r3, [r5, #0]
 800a7b8:	f7f7 f937 	bl	8001a2a <_close>
 800a7bc:	1c43      	adds	r3, r0, #1
 800a7be:	d102      	bne.n	800a7c6 <_close_r+0x1a>
 800a7c0:	682b      	ldr	r3, [r5, #0]
 800a7c2:	b103      	cbz	r3, 800a7c6 <_close_r+0x1a>
 800a7c4:	6023      	str	r3, [r4, #0]
 800a7c6:	bd38      	pop	{r3, r4, r5, pc}
 800a7c8:	20000384 	.word	0x20000384

0800a7cc <_fstat_r>:
 800a7cc:	b538      	push	{r3, r4, r5, lr}
 800a7ce:	4d07      	ldr	r5, [pc, #28]	; (800a7ec <_fstat_r+0x20>)
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	4604      	mov	r4, r0
 800a7d4:	4608      	mov	r0, r1
 800a7d6:	4611      	mov	r1, r2
 800a7d8:	602b      	str	r3, [r5, #0]
 800a7da:	f7f7 f932 	bl	8001a42 <_fstat>
 800a7de:	1c43      	adds	r3, r0, #1
 800a7e0:	d102      	bne.n	800a7e8 <_fstat_r+0x1c>
 800a7e2:	682b      	ldr	r3, [r5, #0]
 800a7e4:	b103      	cbz	r3, 800a7e8 <_fstat_r+0x1c>
 800a7e6:	6023      	str	r3, [r4, #0]
 800a7e8:	bd38      	pop	{r3, r4, r5, pc}
 800a7ea:	bf00      	nop
 800a7ec:	20000384 	.word	0x20000384

0800a7f0 <_isatty_r>:
 800a7f0:	b538      	push	{r3, r4, r5, lr}
 800a7f2:	4d06      	ldr	r5, [pc, #24]	; (800a80c <_isatty_r+0x1c>)
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	4604      	mov	r4, r0
 800a7f8:	4608      	mov	r0, r1
 800a7fa:	602b      	str	r3, [r5, #0]
 800a7fc:	f7f7 f931 	bl	8001a62 <_isatty>
 800a800:	1c43      	adds	r3, r0, #1
 800a802:	d102      	bne.n	800a80a <_isatty_r+0x1a>
 800a804:	682b      	ldr	r3, [r5, #0]
 800a806:	b103      	cbz	r3, 800a80a <_isatty_r+0x1a>
 800a808:	6023      	str	r3, [r4, #0]
 800a80a:	bd38      	pop	{r3, r4, r5, pc}
 800a80c:	20000384 	.word	0x20000384

0800a810 <_lseek_r>:
 800a810:	b538      	push	{r3, r4, r5, lr}
 800a812:	4d07      	ldr	r5, [pc, #28]	; (800a830 <_lseek_r+0x20>)
 800a814:	4604      	mov	r4, r0
 800a816:	4608      	mov	r0, r1
 800a818:	4611      	mov	r1, r2
 800a81a:	2200      	movs	r2, #0
 800a81c:	602a      	str	r2, [r5, #0]
 800a81e:	461a      	mov	r2, r3
 800a820:	f7f7 f92a 	bl	8001a78 <_lseek>
 800a824:	1c43      	adds	r3, r0, #1
 800a826:	d102      	bne.n	800a82e <_lseek_r+0x1e>
 800a828:	682b      	ldr	r3, [r5, #0]
 800a82a:	b103      	cbz	r3, 800a82e <_lseek_r+0x1e>
 800a82c:	6023      	str	r3, [r4, #0]
 800a82e:	bd38      	pop	{r3, r4, r5, pc}
 800a830:	20000384 	.word	0x20000384

0800a834 <_read_r>:
 800a834:	b538      	push	{r3, r4, r5, lr}
 800a836:	4d07      	ldr	r5, [pc, #28]	; (800a854 <_read_r+0x20>)
 800a838:	4604      	mov	r4, r0
 800a83a:	4608      	mov	r0, r1
 800a83c:	4611      	mov	r1, r2
 800a83e:	2200      	movs	r2, #0
 800a840:	602a      	str	r2, [r5, #0]
 800a842:	461a      	mov	r2, r3
 800a844:	f7f7 f8b8 	bl	80019b8 <_read>
 800a848:	1c43      	adds	r3, r0, #1
 800a84a:	d102      	bne.n	800a852 <_read_r+0x1e>
 800a84c:	682b      	ldr	r3, [r5, #0]
 800a84e:	b103      	cbz	r3, 800a852 <_read_r+0x1e>
 800a850:	6023      	str	r3, [r4, #0]
 800a852:	bd38      	pop	{r3, r4, r5, pc}
 800a854:	20000384 	.word	0x20000384

0800a858 <round>:
 800a858:	ec51 0b10 	vmov	r0, r1, d0
 800a85c:	b570      	push	{r4, r5, r6, lr}
 800a85e:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800a862:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 800a866:	2c13      	cmp	r4, #19
 800a868:	ee10 2a10 	vmov	r2, s0
 800a86c:	460b      	mov	r3, r1
 800a86e:	dc19      	bgt.n	800a8a4 <round+0x4c>
 800a870:	2c00      	cmp	r4, #0
 800a872:	da09      	bge.n	800a888 <round+0x30>
 800a874:	3401      	adds	r4, #1
 800a876:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800a87a:	d103      	bne.n	800a884 <round+0x2c>
 800a87c:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800a880:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a884:	2200      	movs	r2, #0
 800a886:	e028      	b.n	800a8da <round+0x82>
 800a888:	4d15      	ldr	r5, [pc, #84]	; (800a8e0 <round+0x88>)
 800a88a:	4125      	asrs	r5, r4
 800a88c:	ea01 0605 	and.w	r6, r1, r5
 800a890:	4332      	orrs	r2, r6
 800a892:	d00e      	beq.n	800a8b2 <round+0x5a>
 800a894:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800a898:	fa42 f404 	asr.w	r4, r2, r4
 800a89c:	4423      	add	r3, r4
 800a89e:	ea23 0305 	bic.w	r3, r3, r5
 800a8a2:	e7ef      	b.n	800a884 <round+0x2c>
 800a8a4:	2c33      	cmp	r4, #51	; 0x33
 800a8a6:	dd07      	ble.n	800a8b8 <round+0x60>
 800a8a8:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800a8ac:	d101      	bne.n	800a8b2 <round+0x5a>
 800a8ae:	f7f5 fced 	bl	800028c <__adddf3>
 800a8b2:	ec41 0b10 	vmov	d0, r0, r1
 800a8b6:	bd70      	pop	{r4, r5, r6, pc}
 800a8b8:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 800a8bc:	f04f 35ff 	mov.w	r5, #4294967295
 800a8c0:	40f5      	lsrs	r5, r6
 800a8c2:	4228      	tst	r0, r5
 800a8c4:	d0f5      	beq.n	800a8b2 <round+0x5a>
 800a8c6:	2101      	movs	r1, #1
 800a8c8:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800a8cc:	fa01 f404 	lsl.w	r4, r1, r4
 800a8d0:	1912      	adds	r2, r2, r4
 800a8d2:	bf28      	it	cs
 800a8d4:	185b      	addcs	r3, r3, r1
 800a8d6:	ea22 0205 	bic.w	r2, r2, r5
 800a8da:	4619      	mov	r1, r3
 800a8dc:	4610      	mov	r0, r2
 800a8de:	e7e8      	b.n	800a8b2 <round+0x5a>
 800a8e0:	000fffff 	.word	0x000fffff

0800a8e4 <powf>:
 800a8e4:	b508      	push	{r3, lr}
 800a8e6:	ed2d 8b04 	vpush	{d8-d9}
 800a8ea:	eeb0 8a60 	vmov.f32	s16, s1
 800a8ee:	eeb0 9a40 	vmov.f32	s18, s0
 800a8f2:	f000 f84f 	bl	800a994 <__ieee754_powf>
 800a8f6:	eeb4 8a48 	vcmp.f32	s16, s16
 800a8fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8fe:	eef0 8a40 	vmov.f32	s17, s0
 800a902:	d63e      	bvs.n	800a982 <powf+0x9e>
 800a904:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800a908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a90c:	d112      	bne.n	800a934 <powf+0x50>
 800a90e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800a912:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a916:	d039      	beq.n	800a98c <powf+0xa8>
 800a918:	eeb0 0a48 	vmov.f32	s0, s16
 800a91c:	f000 fb35 	bl	800af8a <finitef>
 800a920:	b378      	cbz	r0, 800a982 <powf+0x9e>
 800a922:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800a926:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a92a:	d52a      	bpl.n	800a982 <powf+0x9e>
 800a92c:	f7fb faf0 	bl	8005f10 <__errno>
 800a930:	2322      	movs	r3, #34	; 0x22
 800a932:	e014      	b.n	800a95e <powf+0x7a>
 800a934:	f000 fb29 	bl	800af8a <finitef>
 800a938:	b998      	cbnz	r0, 800a962 <powf+0x7e>
 800a93a:	eeb0 0a49 	vmov.f32	s0, s18
 800a93e:	f000 fb24 	bl	800af8a <finitef>
 800a942:	b170      	cbz	r0, 800a962 <powf+0x7e>
 800a944:	eeb0 0a48 	vmov.f32	s0, s16
 800a948:	f000 fb1f 	bl	800af8a <finitef>
 800a94c:	b148      	cbz	r0, 800a962 <powf+0x7e>
 800a94e:	eef4 8a68 	vcmp.f32	s17, s17
 800a952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a956:	d7e9      	bvc.n	800a92c <powf+0x48>
 800a958:	f7fb fada 	bl	8005f10 <__errno>
 800a95c:	2321      	movs	r3, #33	; 0x21
 800a95e:	6003      	str	r3, [r0, #0]
 800a960:	e00f      	b.n	800a982 <powf+0x9e>
 800a962:	eef5 8a40 	vcmp.f32	s17, #0.0
 800a966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a96a:	d10a      	bne.n	800a982 <powf+0x9e>
 800a96c:	eeb0 0a49 	vmov.f32	s0, s18
 800a970:	f000 fb0b 	bl	800af8a <finitef>
 800a974:	b128      	cbz	r0, 800a982 <powf+0x9e>
 800a976:	eeb0 0a48 	vmov.f32	s0, s16
 800a97a:	f000 fb06 	bl	800af8a <finitef>
 800a97e:	2800      	cmp	r0, #0
 800a980:	d1d4      	bne.n	800a92c <powf+0x48>
 800a982:	eeb0 0a68 	vmov.f32	s0, s17
 800a986:	ecbd 8b04 	vpop	{d8-d9}
 800a98a:	bd08      	pop	{r3, pc}
 800a98c:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800a990:	e7f7      	b.n	800a982 <powf+0x9e>
	...

0800a994 <__ieee754_powf>:
 800a994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a998:	ee10 4a90 	vmov	r4, s1
 800a99c:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 800a9a0:	ed2d 8b02 	vpush	{d8}
 800a9a4:	ee10 6a10 	vmov	r6, s0
 800a9a8:	eeb0 8a40 	vmov.f32	s16, s0
 800a9ac:	eef0 8a60 	vmov.f32	s17, s1
 800a9b0:	d10c      	bne.n	800a9cc <__ieee754_powf+0x38>
 800a9b2:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 800a9b6:	0076      	lsls	r6, r6, #1
 800a9b8:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 800a9bc:	f240 8296 	bls.w	800aeec <__ieee754_powf+0x558>
 800a9c0:	ee38 0a28 	vadd.f32	s0, s16, s17
 800a9c4:	ecbd 8b02 	vpop	{d8}
 800a9c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9cc:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800a9d0:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800a9d4:	dcf4      	bgt.n	800a9c0 <__ieee754_powf+0x2c>
 800a9d6:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800a9da:	dd08      	ble.n	800a9ee <__ieee754_powf+0x5a>
 800a9dc:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 800a9e0:	d1ee      	bne.n	800a9c0 <__ieee754_powf+0x2c>
 800a9e2:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 800a9e6:	0064      	lsls	r4, r4, #1
 800a9e8:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 800a9ec:	e7e6      	b.n	800a9bc <__ieee754_powf+0x28>
 800a9ee:	2e00      	cmp	r6, #0
 800a9f0:	da20      	bge.n	800aa34 <__ieee754_powf+0xa0>
 800a9f2:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 800a9f6:	da2d      	bge.n	800aa54 <__ieee754_powf+0xc0>
 800a9f8:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800a9fc:	f2c0 827f 	blt.w	800aefe <__ieee754_powf+0x56a>
 800aa00:	ea4f 53e8 	mov.w	r3, r8, asr #23
 800aa04:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800aa08:	fa48 f703 	asr.w	r7, r8, r3
 800aa0c:	fa07 f303 	lsl.w	r3, r7, r3
 800aa10:	4543      	cmp	r3, r8
 800aa12:	f040 8274 	bne.w	800aefe <__ieee754_powf+0x56a>
 800aa16:	f007 0701 	and.w	r7, r7, #1
 800aa1a:	f1c7 0702 	rsb	r7, r7, #2
 800aa1e:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800aa22:	d11f      	bne.n	800aa64 <__ieee754_powf+0xd0>
 800aa24:	2c00      	cmp	r4, #0
 800aa26:	f280 8267 	bge.w	800aef8 <__ieee754_powf+0x564>
 800aa2a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800aa2e:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800aa32:	e7c7      	b.n	800a9c4 <__ieee754_powf+0x30>
 800aa34:	2700      	movs	r7, #0
 800aa36:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800aa3a:	d1f0      	bne.n	800aa1e <__ieee754_powf+0x8a>
 800aa3c:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 800aa40:	f000 8254 	beq.w	800aeec <__ieee754_powf+0x558>
 800aa44:	dd08      	ble.n	800aa58 <__ieee754_powf+0xc4>
 800aa46:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 800ad50 <__ieee754_powf+0x3bc>
 800aa4a:	2c00      	cmp	r4, #0
 800aa4c:	bfa8      	it	ge
 800aa4e:	eeb0 0a68 	vmovge.f32	s0, s17
 800aa52:	e7b7      	b.n	800a9c4 <__ieee754_powf+0x30>
 800aa54:	2702      	movs	r7, #2
 800aa56:	e7ee      	b.n	800aa36 <__ieee754_powf+0xa2>
 800aa58:	2c00      	cmp	r4, #0
 800aa5a:	f280 824a 	bge.w	800aef2 <__ieee754_powf+0x55e>
 800aa5e:	eeb1 0a68 	vneg.f32	s0, s17
 800aa62:	e7af      	b.n	800a9c4 <__ieee754_powf+0x30>
 800aa64:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800aa68:	d102      	bne.n	800aa70 <__ieee754_powf+0xdc>
 800aa6a:	ee28 0a08 	vmul.f32	s0, s16, s16
 800aa6e:	e7a9      	b.n	800a9c4 <__ieee754_powf+0x30>
 800aa70:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800aa74:	eeb0 0a48 	vmov.f32	s0, s16
 800aa78:	d107      	bne.n	800aa8a <__ieee754_powf+0xf6>
 800aa7a:	2e00      	cmp	r6, #0
 800aa7c:	db05      	blt.n	800aa8a <__ieee754_powf+0xf6>
 800aa7e:	ecbd 8b02 	vpop	{d8}
 800aa82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa86:	f000 ba53 	b.w	800af30 <__ieee754_sqrtf>
 800aa8a:	f000 fa77 	bl	800af7c <fabsf>
 800aa8e:	b125      	cbz	r5, 800aa9a <__ieee754_powf+0x106>
 800aa90:	f026 4340 	bic.w	r3, r6, #3221225472	; 0xc0000000
 800aa94:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800aa98:	d116      	bne.n	800aac8 <__ieee754_powf+0x134>
 800aa9a:	2c00      	cmp	r4, #0
 800aa9c:	bfbc      	itt	lt
 800aa9e:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800aaa2:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800aaa6:	2e00      	cmp	r6, #0
 800aaa8:	da8c      	bge.n	800a9c4 <__ieee754_powf+0x30>
 800aaaa:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 800aaae:	ea55 0307 	orrs.w	r3, r5, r7
 800aab2:	d104      	bne.n	800aabe <__ieee754_powf+0x12a>
 800aab4:	ee70 7a40 	vsub.f32	s15, s0, s0
 800aab8:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800aabc:	e782      	b.n	800a9c4 <__ieee754_powf+0x30>
 800aabe:	2f01      	cmp	r7, #1
 800aac0:	d180      	bne.n	800a9c4 <__ieee754_powf+0x30>
 800aac2:	eeb1 0a40 	vneg.f32	s0, s0
 800aac6:	e77d      	b.n	800a9c4 <__ieee754_powf+0x30>
 800aac8:	0ff0      	lsrs	r0, r6, #31
 800aaca:	3801      	subs	r0, #1
 800aacc:	ea57 0300 	orrs.w	r3, r7, r0
 800aad0:	d104      	bne.n	800aadc <__ieee754_powf+0x148>
 800aad2:	ee38 8a48 	vsub.f32	s16, s16, s16
 800aad6:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800aada:	e773      	b.n	800a9c4 <__ieee754_powf+0x30>
 800aadc:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 800aae0:	dd74      	ble.n	800abcc <__ieee754_powf+0x238>
 800aae2:	4b9c      	ldr	r3, [pc, #624]	; (800ad54 <__ieee754_powf+0x3c0>)
 800aae4:	429d      	cmp	r5, r3
 800aae6:	dc08      	bgt.n	800aafa <__ieee754_powf+0x166>
 800aae8:	2c00      	cmp	r4, #0
 800aaea:	da0b      	bge.n	800ab04 <__ieee754_powf+0x170>
 800aaec:	2000      	movs	r0, #0
 800aaee:	ecbd 8b02 	vpop	{d8}
 800aaf2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aaf6:	f000 ba3b 	b.w	800af70 <__math_oflowf>
 800aafa:	4b97      	ldr	r3, [pc, #604]	; (800ad58 <__ieee754_powf+0x3c4>)
 800aafc:	429d      	cmp	r5, r3
 800aafe:	dd08      	ble.n	800ab12 <__ieee754_powf+0x17e>
 800ab00:	2c00      	cmp	r4, #0
 800ab02:	dcf3      	bgt.n	800aaec <__ieee754_powf+0x158>
 800ab04:	2000      	movs	r0, #0
 800ab06:	ecbd 8b02 	vpop	{d8}
 800ab0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab0e:	f000 ba29 	b.w	800af64 <__math_uflowf>
 800ab12:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ab16:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ab1a:	eddf 6a90 	vldr	s13, [pc, #576]	; 800ad5c <__ieee754_powf+0x3c8>
 800ab1e:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800ab22:	eee0 6a67 	vfms.f32	s13, s0, s15
 800ab26:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800ab2a:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800ab2e:	ee20 7a00 	vmul.f32	s14, s0, s0
 800ab32:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab36:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800ad60 <__ieee754_powf+0x3cc>
 800ab3a:	ee67 7a67 	vnmul.f32	s15, s14, s15
 800ab3e:	ed9f 7a89 	vldr	s14, [pc, #548]	; 800ad64 <__ieee754_powf+0x3d0>
 800ab42:	eee0 7a07 	vfma.f32	s15, s0, s14
 800ab46:	ed9f 7a88 	vldr	s14, [pc, #544]	; 800ad68 <__ieee754_powf+0x3d4>
 800ab4a:	eef0 6a67 	vmov.f32	s13, s15
 800ab4e:	eee0 6a07 	vfma.f32	s13, s0, s14
 800ab52:	ee16 3a90 	vmov	r3, s13
 800ab56:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800ab5a:	f023 030f 	bic.w	r3, r3, #15
 800ab5e:	ee00 3a90 	vmov	s1, r3
 800ab62:	eee0 0a47 	vfms.f32	s1, s0, s14
 800ab66:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800ab6a:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 800ab6e:	f024 040f 	bic.w	r4, r4, #15
 800ab72:	ee07 4a10 	vmov	s14, r4
 800ab76:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800ab7a:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800ab7e:	ee07 3a90 	vmov	s15, r3
 800ab82:	eee7 0a27 	vfma.f32	s1, s14, s15
 800ab86:	3f01      	subs	r7, #1
 800ab88:	ea57 0200 	orrs.w	r2, r7, r0
 800ab8c:	ee07 4a10 	vmov	s14, r4
 800ab90:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ab94:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800ab98:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800ab9c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800aba0:	ee17 4a10 	vmov	r4, s14
 800aba4:	bf08      	it	eq
 800aba6:	eeb0 8a40 	vmoveq.f32	s16, s0
 800abaa:	2c00      	cmp	r4, #0
 800abac:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800abb0:	f340 817e 	ble.w	800aeb0 <__ieee754_powf+0x51c>
 800abb4:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800abb8:	f340 80f8 	ble.w	800adac <__ieee754_powf+0x418>
 800abbc:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800abc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abc4:	bf4c      	ite	mi
 800abc6:	2001      	movmi	r0, #1
 800abc8:	2000      	movpl	r0, #0
 800abca:	e790      	b.n	800aaee <__ieee754_powf+0x15a>
 800abcc:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 800abd0:	bf01      	itttt	eq
 800abd2:	eddf 7a66 	vldreq	s15, [pc, #408]	; 800ad6c <__ieee754_powf+0x3d8>
 800abd6:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800abda:	f06f 0217 	mvneq.w	r2, #23
 800abde:	ee17 5a90 	vmoveq	r5, s15
 800abe2:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800abe6:	bf18      	it	ne
 800abe8:	2200      	movne	r2, #0
 800abea:	3b7f      	subs	r3, #127	; 0x7f
 800abec:	4413      	add	r3, r2
 800abee:	4a60      	ldr	r2, [pc, #384]	; (800ad70 <__ieee754_powf+0x3dc>)
 800abf0:	f3c5 0516 	ubfx	r5, r5, #0, #23
 800abf4:	4295      	cmp	r5, r2
 800abf6:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 800abfa:	dd06      	ble.n	800ac0a <__ieee754_powf+0x276>
 800abfc:	4a5d      	ldr	r2, [pc, #372]	; (800ad74 <__ieee754_powf+0x3e0>)
 800abfe:	4295      	cmp	r5, r2
 800ac00:	f340 80a4 	ble.w	800ad4c <__ieee754_powf+0x3b8>
 800ac04:	3301      	adds	r3, #1
 800ac06:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800ac0a:	2500      	movs	r5, #0
 800ac0c:	4a5a      	ldr	r2, [pc, #360]	; (800ad78 <__ieee754_powf+0x3e4>)
 800ac0e:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 800ac12:	ee07 1a90 	vmov	s15, r1
 800ac16:	ed92 7a00 	vldr	s14, [r2]
 800ac1a:	4a58      	ldr	r2, [pc, #352]	; (800ad7c <__ieee754_powf+0x3e8>)
 800ac1c:	ee37 6a27 	vadd.f32	s12, s14, s15
 800ac20:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800ac24:	eec5 6a86 	vdiv.f32	s13, s11, s12
 800ac28:	1049      	asrs	r1, r1, #1
 800ac2a:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800ac2e:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800ac32:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 800ac36:	ee37 5ac7 	vsub.f32	s10, s15, s14
 800ac3a:	ee06 1a10 	vmov	s12, r1
 800ac3e:	ee65 4a26 	vmul.f32	s9, s10, s13
 800ac42:	ee36 7a47 	vsub.f32	s14, s12, s14
 800ac46:	ee14 6a90 	vmov	r6, s9
 800ac4a:	4016      	ands	r6, r2
 800ac4c:	ee05 6a90 	vmov	s11, r6
 800ac50:	eea5 5ac6 	vfms.f32	s10, s11, s12
 800ac54:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ac58:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800ad80 <__ieee754_powf+0x3ec>
 800ac5c:	eea5 5ae7 	vfms.f32	s10, s11, s15
 800ac60:	ee64 7aa4 	vmul.f32	s15, s9, s9
 800ac64:	ee25 6a26 	vmul.f32	s12, s10, s13
 800ac68:	eddf 6a46 	vldr	s13, [pc, #280]	; 800ad84 <__ieee754_powf+0x3f0>
 800ac6c:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800ac70:	eddf 6a45 	vldr	s13, [pc, #276]	; 800ad88 <__ieee754_powf+0x3f4>
 800ac74:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ac78:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800ad5c <__ieee754_powf+0x3c8>
 800ac7c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800ac80:	eddf 6a42 	vldr	s13, [pc, #264]	; 800ad8c <__ieee754_powf+0x3f8>
 800ac84:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ac88:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800ad90 <__ieee754_powf+0x3fc>
 800ac8c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800ac90:	ee74 6aa5 	vadd.f32	s13, s9, s11
 800ac94:	ee27 5aa7 	vmul.f32	s10, s15, s15
 800ac98:	ee66 6a86 	vmul.f32	s13, s13, s12
 800ac9c:	eee5 6a07 	vfma.f32	s13, s10, s14
 800aca0:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 800aca4:	eef0 7a45 	vmov.f32	s15, s10
 800aca8:	eee5 7aa5 	vfma.f32	s15, s11, s11
 800acac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800acb0:	ee17 1a90 	vmov	r1, s15
 800acb4:	4011      	ands	r1, r2
 800acb6:	ee07 1a90 	vmov	s15, r1
 800acba:	ee37 7ac5 	vsub.f32	s14, s15, s10
 800acbe:	eea5 7ae5 	vfms.f32	s14, s11, s11
 800acc2:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800acc6:	ee27 7a24 	vmul.f32	s14, s14, s9
 800acca:	eea6 7a27 	vfma.f32	s14, s12, s15
 800acce:	eeb0 6a47 	vmov.f32	s12, s14
 800acd2:	eea5 6aa7 	vfma.f32	s12, s11, s15
 800acd6:	ee16 1a10 	vmov	r1, s12
 800acda:	4011      	ands	r1, r2
 800acdc:	ee06 1a90 	vmov	s13, r1
 800ace0:	eee5 6ae7 	vfms.f32	s13, s11, s15
 800ace4:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800ad94 <__ieee754_powf+0x400>
 800ace8:	eddf 5a2b 	vldr	s11, [pc, #172]	; 800ad98 <__ieee754_powf+0x404>
 800acec:	ee37 7a66 	vsub.f32	s14, s14, s13
 800acf0:	ee06 1a10 	vmov	s12, r1
 800acf4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800acf8:	eddf 7a28 	vldr	s15, [pc, #160]	; 800ad9c <__ieee754_powf+0x408>
 800acfc:	4928      	ldr	r1, [pc, #160]	; (800ada0 <__ieee754_powf+0x40c>)
 800acfe:	eea6 7a27 	vfma.f32	s14, s12, s15
 800ad02:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 800ad06:	edd1 7a00 	vldr	s15, [r1]
 800ad0a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ad0e:	ee07 3a90 	vmov	s15, r3
 800ad12:	4b24      	ldr	r3, [pc, #144]	; (800ada4 <__ieee754_powf+0x410>)
 800ad14:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800ad18:	eef0 7a47 	vmov.f32	s15, s14
 800ad1c:	eee6 7a25 	vfma.f32	s15, s12, s11
 800ad20:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800ad24:	edd5 0a00 	vldr	s1, [r5]
 800ad28:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800ad2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad30:	ee17 3a90 	vmov	r3, s15
 800ad34:	4013      	ands	r3, r2
 800ad36:	ee07 3a90 	vmov	s15, r3
 800ad3a:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800ad3e:	ee76 6ae0 	vsub.f32	s13, s13, s1
 800ad42:	eee6 6a65 	vfms.f32	s13, s12, s11
 800ad46:	ee77 7a66 	vsub.f32	s15, s14, s13
 800ad4a:	e70e      	b.n	800ab6a <__ieee754_powf+0x1d6>
 800ad4c:	2501      	movs	r5, #1
 800ad4e:	e75d      	b.n	800ac0c <__ieee754_powf+0x278>
 800ad50:	00000000 	.word	0x00000000
 800ad54:	3f7ffff3 	.word	0x3f7ffff3
 800ad58:	3f800007 	.word	0x3f800007
 800ad5c:	3eaaaaab 	.word	0x3eaaaaab
 800ad60:	3fb8aa3b 	.word	0x3fb8aa3b
 800ad64:	36eca570 	.word	0x36eca570
 800ad68:	3fb8aa00 	.word	0x3fb8aa00
 800ad6c:	4b800000 	.word	0x4b800000
 800ad70:	001cc471 	.word	0x001cc471
 800ad74:	005db3d6 	.word	0x005db3d6
 800ad78:	0800b57c 	.word	0x0800b57c
 800ad7c:	fffff000 	.word	0xfffff000
 800ad80:	3e6c3255 	.word	0x3e6c3255
 800ad84:	3e53f142 	.word	0x3e53f142
 800ad88:	3e8ba305 	.word	0x3e8ba305
 800ad8c:	3edb6db7 	.word	0x3edb6db7
 800ad90:	3f19999a 	.word	0x3f19999a
 800ad94:	3f76384f 	.word	0x3f76384f
 800ad98:	3f763800 	.word	0x3f763800
 800ad9c:	369dc3a0 	.word	0x369dc3a0
 800ada0:	0800b58c 	.word	0x0800b58c
 800ada4:	0800b584 	.word	0x0800b584
 800ada8:	3338aa3c 	.word	0x3338aa3c
 800adac:	f040 8095 	bne.w	800aeda <__ieee754_powf+0x546>
 800adb0:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800ada8 <__ieee754_powf+0x414>
 800adb4:	ee37 7a67 	vsub.f32	s14, s14, s15
 800adb8:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800adbc:	eef4 6ac7 	vcmpe.f32	s13, s14
 800adc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adc4:	f73f aefa 	bgt.w	800abbc <__ieee754_powf+0x228>
 800adc8:	15db      	asrs	r3, r3, #23
 800adca:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 800adce:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800add2:	4103      	asrs	r3, r0
 800add4:	4423      	add	r3, r4
 800add6:	494b      	ldr	r1, [pc, #300]	; (800af04 <__ieee754_powf+0x570>)
 800add8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800addc:	3a7f      	subs	r2, #127	; 0x7f
 800adde:	4111      	asrs	r1, r2
 800ade0:	ea23 0101 	bic.w	r1, r3, r1
 800ade4:	ee07 1a10 	vmov	s14, r1
 800ade8:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800adec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800adf0:	f1c2 0217 	rsb	r2, r2, #23
 800adf4:	4110      	asrs	r0, r2
 800adf6:	2c00      	cmp	r4, #0
 800adf8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800adfc:	bfb8      	it	lt
 800adfe:	4240      	neglt	r0, r0
 800ae00:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800ae04:	ed9f 0a40 	vldr	s0, [pc, #256]	; 800af08 <__ieee754_powf+0x574>
 800ae08:	eddf 6a40 	vldr	s13, [pc, #256]	; 800af0c <__ieee754_powf+0x578>
 800ae0c:	ee17 3a10 	vmov	r3, s14
 800ae10:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800ae14:	f023 030f 	bic.w	r3, r3, #15
 800ae18:	ee07 3a10 	vmov	s14, r3
 800ae1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ae20:	ee27 0a00 	vmul.f32	s0, s14, s0
 800ae24:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800ae28:	eddf 7a39 	vldr	s15, [pc, #228]	; 800af10 <__ieee754_powf+0x57c>
 800ae2c:	eea0 0aa7 	vfma.f32	s0, s1, s15
 800ae30:	eef0 7a40 	vmov.f32	s15, s0
 800ae34:	eee7 7a26 	vfma.f32	s15, s14, s13
 800ae38:	eeb0 6a67 	vmov.f32	s12, s15
 800ae3c:	eea7 6a66 	vfms.f32	s12, s14, s13
 800ae40:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800ae44:	ee30 0a46 	vsub.f32	s0, s0, s12
 800ae48:	eddf 6a32 	vldr	s13, [pc, #200]	; 800af14 <__ieee754_powf+0x580>
 800ae4c:	ed9f 6a32 	vldr	s12, [pc, #200]	; 800af18 <__ieee754_powf+0x584>
 800ae50:	eee7 6a06 	vfma.f32	s13, s14, s12
 800ae54:	ed9f 6a31 	vldr	s12, [pc, #196]	; 800af1c <__ieee754_powf+0x588>
 800ae58:	eea6 6a87 	vfma.f32	s12, s13, s14
 800ae5c:	eddf 6a30 	vldr	s13, [pc, #192]	; 800af20 <__ieee754_powf+0x58c>
 800ae60:	eee6 6a07 	vfma.f32	s13, s12, s14
 800ae64:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 800af24 <__ieee754_powf+0x590>
 800ae68:	eea6 6a87 	vfma.f32	s12, s13, s14
 800ae6c:	eef0 6a67 	vmov.f32	s13, s15
 800ae70:	eee6 6a47 	vfms.f32	s13, s12, s14
 800ae74:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800ae78:	ee27 6aa6 	vmul.f32	s12, s15, s13
 800ae7c:	ee76 6ac7 	vsub.f32	s13, s13, s14
 800ae80:	eea7 0a80 	vfma.f32	s0, s15, s0
 800ae84:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800ae88:	ee37 0a40 	vsub.f32	s0, s14, s0
 800ae8c:	ee70 7a67 	vsub.f32	s15, s0, s15
 800ae90:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800ae94:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ae98:	ee10 3a10 	vmov	r3, s0
 800ae9c:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800aea0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800aea4:	da1f      	bge.n	800aee6 <__ieee754_powf+0x552>
 800aea6:	f000 f87d 	bl	800afa4 <scalbnf>
 800aeaa:	ee20 0a08 	vmul.f32	s0, s0, s16
 800aeae:	e589      	b.n	800a9c4 <__ieee754_powf+0x30>
 800aeb0:	4a1d      	ldr	r2, [pc, #116]	; (800af28 <__ieee754_powf+0x594>)
 800aeb2:	4293      	cmp	r3, r2
 800aeb4:	dd07      	ble.n	800aec6 <__ieee754_powf+0x532>
 800aeb6:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800aeba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aebe:	bf4c      	ite	mi
 800aec0:	2001      	movmi	r0, #1
 800aec2:	2000      	movpl	r0, #0
 800aec4:	e61f      	b.n	800ab06 <__ieee754_powf+0x172>
 800aec6:	d108      	bne.n	800aeda <__ieee754_powf+0x546>
 800aec8:	ee37 7a67 	vsub.f32	s14, s14, s15
 800aecc:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800aed0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aed4:	f6ff af78 	blt.w	800adc8 <__ieee754_powf+0x434>
 800aed8:	e7ed      	b.n	800aeb6 <__ieee754_powf+0x522>
 800aeda:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800aede:	f73f af73 	bgt.w	800adc8 <__ieee754_powf+0x434>
 800aee2:	2000      	movs	r0, #0
 800aee4:	e78c      	b.n	800ae00 <__ieee754_powf+0x46c>
 800aee6:	ee00 3a10 	vmov	s0, r3
 800aeea:	e7de      	b.n	800aeaa <__ieee754_powf+0x516>
 800aeec:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800aef0:	e568      	b.n	800a9c4 <__ieee754_powf+0x30>
 800aef2:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800af2c <__ieee754_powf+0x598>
 800aef6:	e565      	b.n	800a9c4 <__ieee754_powf+0x30>
 800aef8:	eeb0 0a48 	vmov.f32	s0, s16
 800aefc:	e562      	b.n	800a9c4 <__ieee754_powf+0x30>
 800aefe:	2700      	movs	r7, #0
 800af00:	e58d      	b.n	800aa1e <__ieee754_powf+0x8a>
 800af02:	bf00      	nop
 800af04:	007fffff 	.word	0x007fffff
 800af08:	35bfbe8c 	.word	0x35bfbe8c
 800af0c:	3f317200 	.word	0x3f317200
 800af10:	3f317218 	.word	0x3f317218
 800af14:	b5ddea0e 	.word	0xb5ddea0e
 800af18:	3331bb4c 	.word	0x3331bb4c
 800af1c:	388ab355 	.word	0x388ab355
 800af20:	bb360b61 	.word	0xbb360b61
 800af24:	3e2aaaab 	.word	0x3e2aaaab
 800af28:	43160000 	.word	0x43160000
 800af2c:	00000000 	.word	0x00000000

0800af30 <__ieee754_sqrtf>:
 800af30:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800af34:	4770      	bx	lr

0800af36 <with_errnof>:
 800af36:	b513      	push	{r0, r1, r4, lr}
 800af38:	4604      	mov	r4, r0
 800af3a:	ed8d 0a01 	vstr	s0, [sp, #4]
 800af3e:	f7fa ffe7 	bl	8005f10 <__errno>
 800af42:	ed9d 0a01 	vldr	s0, [sp, #4]
 800af46:	6004      	str	r4, [r0, #0]
 800af48:	b002      	add	sp, #8
 800af4a:	bd10      	pop	{r4, pc}

0800af4c <xflowf>:
 800af4c:	b130      	cbz	r0, 800af5c <xflowf+0x10>
 800af4e:	eef1 7a40 	vneg.f32	s15, s0
 800af52:	ee27 0a80 	vmul.f32	s0, s15, s0
 800af56:	2022      	movs	r0, #34	; 0x22
 800af58:	f7ff bfed 	b.w	800af36 <with_errnof>
 800af5c:	eef0 7a40 	vmov.f32	s15, s0
 800af60:	e7f7      	b.n	800af52 <xflowf+0x6>
	...

0800af64 <__math_uflowf>:
 800af64:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800af6c <__math_uflowf+0x8>
 800af68:	f7ff bff0 	b.w	800af4c <xflowf>
 800af6c:	10000000 	.word	0x10000000

0800af70 <__math_oflowf>:
 800af70:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800af78 <__math_oflowf+0x8>
 800af74:	f7ff bfea 	b.w	800af4c <xflowf>
 800af78:	70000000 	.word	0x70000000

0800af7c <fabsf>:
 800af7c:	ee10 3a10 	vmov	r3, s0
 800af80:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800af84:	ee00 3a10 	vmov	s0, r3
 800af88:	4770      	bx	lr

0800af8a <finitef>:
 800af8a:	b082      	sub	sp, #8
 800af8c:	ed8d 0a01 	vstr	s0, [sp, #4]
 800af90:	9801      	ldr	r0, [sp, #4]
 800af92:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800af96:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800af9a:	bfac      	ite	ge
 800af9c:	2000      	movge	r0, #0
 800af9e:	2001      	movlt	r0, #1
 800afa0:	b002      	add	sp, #8
 800afa2:	4770      	bx	lr

0800afa4 <scalbnf>:
 800afa4:	ee10 3a10 	vmov	r3, s0
 800afa8:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800afac:	d025      	beq.n	800affa <scalbnf+0x56>
 800afae:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800afb2:	d302      	bcc.n	800afba <scalbnf+0x16>
 800afb4:	ee30 0a00 	vadd.f32	s0, s0, s0
 800afb8:	4770      	bx	lr
 800afba:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800afbe:	d122      	bne.n	800b006 <scalbnf+0x62>
 800afc0:	4b2a      	ldr	r3, [pc, #168]	; (800b06c <scalbnf+0xc8>)
 800afc2:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800b070 <scalbnf+0xcc>
 800afc6:	4298      	cmp	r0, r3
 800afc8:	ee20 0a27 	vmul.f32	s0, s0, s15
 800afcc:	db16      	blt.n	800affc <scalbnf+0x58>
 800afce:	ee10 3a10 	vmov	r3, s0
 800afd2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800afd6:	3a19      	subs	r2, #25
 800afd8:	4402      	add	r2, r0
 800afda:	2afe      	cmp	r2, #254	; 0xfe
 800afdc:	dd15      	ble.n	800b00a <scalbnf+0x66>
 800afde:	ee10 3a10 	vmov	r3, s0
 800afe2:	eddf 7a24 	vldr	s15, [pc, #144]	; 800b074 <scalbnf+0xd0>
 800afe6:	eddf 6a24 	vldr	s13, [pc, #144]	; 800b078 <scalbnf+0xd4>
 800afea:	2b00      	cmp	r3, #0
 800afec:	eeb0 7a67 	vmov.f32	s14, s15
 800aff0:	bfb8      	it	lt
 800aff2:	eef0 7a66 	vmovlt.f32	s15, s13
 800aff6:	ee27 0a27 	vmul.f32	s0, s14, s15
 800affa:	4770      	bx	lr
 800affc:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800b07c <scalbnf+0xd8>
 800b000:	ee20 0a27 	vmul.f32	s0, s0, s15
 800b004:	4770      	bx	lr
 800b006:	0dd2      	lsrs	r2, r2, #23
 800b008:	e7e6      	b.n	800afd8 <scalbnf+0x34>
 800b00a:	2a00      	cmp	r2, #0
 800b00c:	dd06      	ble.n	800b01c <scalbnf+0x78>
 800b00e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b012:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800b016:	ee00 3a10 	vmov	s0, r3
 800b01a:	4770      	bx	lr
 800b01c:	f112 0f16 	cmn.w	r2, #22
 800b020:	da1a      	bge.n	800b058 <scalbnf+0xb4>
 800b022:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b026:	4298      	cmp	r0, r3
 800b028:	ee10 3a10 	vmov	r3, s0
 800b02c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b030:	dd0a      	ble.n	800b048 <scalbnf+0xa4>
 800b032:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800b074 <scalbnf+0xd0>
 800b036:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800b078 <scalbnf+0xd4>
 800b03a:	eef0 7a40 	vmov.f32	s15, s0
 800b03e:	2b00      	cmp	r3, #0
 800b040:	bf18      	it	ne
 800b042:	eeb0 0a47 	vmovne.f32	s0, s14
 800b046:	e7db      	b.n	800b000 <scalbnf+0x5c>
 800b048:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800b07c <scalbnf+0xd8>
 800b04c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800b080 <scalbnf+0xdc>
 800b050:	eef0 7a40 	vmov.f32	s15, s0
 800b054:	2b00      	cmp	r3, #0
 800b056:	e7f3      	b.n	800b040 <scalbnf+0x9c>
 800b058:	3219      	adds	r2, #25
 800b05a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b05e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800b062:	eddf 7a08 	vldr	s15, [pc, #32]	; 800b084 <scalbnf+0xe0>
 800b066:	ee07 3a10 	vmov	s14, r3
 800b06a:	e7c4      	b.n	800aff6 <scalbnf+0x52>
 800b06c:	ffff3cb0 	.word	0xffff3cb0
 800b070:	4c000000 	.word	0x4c000000
 800b074:	7149f2ca 	.word	0x7149f2ca
 800b078:	f149f2ca 	.word	0xf149f2ca
 800b07c:	0da24260 	.word	0x0da24260
 800b080:	8da24260 	.word	0x8da24260
 800b084:	33000000 	.word	0x33000000

0800b088 <_init>:
 800b088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b08a:	bf00      	nop
 800b08c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b08e:	bc08      	pop	{r3}
 800b090:	469e      	mov	lr, r3
 800b092:	4770      	bx	lr

0800b094 <_fini>:
 800b094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b096:	bf00      	nop
 800b098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b09a:	bc08      	pop	{r3}
 800b09c:	469e      	mov	lr, r3
 800b09e:	4770      	bx	lr
