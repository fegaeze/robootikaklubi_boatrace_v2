
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b24c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f4  0800b3e0  0800b3e0  0001b3e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b8d4  0800b8d4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b8d4  0800b8d4  0001b8d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b8dc  0800b8dc  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b8dc  0800b8dc  0001b8dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b8e0  0800b8e0  0001b8e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800b8e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
 10 .bss          000001b0  200001e0  200001e0  000201e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000390  20000390  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010440  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f1b  00000000  00000000  00030650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e40  00000000  00000000  00032570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d78  00000000  00000000  000333b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ce3d  00000000  00000000  00034128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011750  00000000  00000000  00050f65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000adca8  00000000  00000000  000626b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011035d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005410  00000000  00000000  001103b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b3c4 	.word	0x0800b3c4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800b3c4 	.word	0x0800b3c4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <togglePowerBtn>:


/*
 * Toggle Robot Start Button
 */
int togglePowerBtn(int powerBtnState) {
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
	if (powerBtnState) {
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d027      	beq.n	8001056 <togglePowerBtn+0x5e>
		block = 0;
 8001006:	4b19      	ldr	r3, [pc, #100]	; (800106c <togglePowerBtn+0x74>)
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
		if (!byteStream && buttonState) {
 800100c:	4b18      	ldr	r3, [pc, #96]	; (8001070 <togglePowerBtn+0x78>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d10c      	bne.n	800102e <togglePowerBtn+0x36>
 8001014:	4b17      	ldr	r3, [pc, #92]	; (8001074 <togglePowerBtn+0x7c>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d008      	beq.n	800102e <togglePowerBtn+0x36>
		  byteStream = 1;
 800101c:	4b14      	ldr	r3, [pc, #80]	; (8001070 <togglePowerBtn+0x78>)
 800101e:	2201      	movs	r2, #1
 8001020:	601a      	str	r2, [r3, #0]
		  buttonState = 0;
 8001022:	4b14      	ldr	r3, [pc, #80]	; (8001074 <togglePowerBtn+0x7c>)
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
		  return buttonState;
 8001028:	4b12      	ldr	r3, [pc, #72]	; (8001074 <togglePowerBtn+0x7c>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	e018      	b.n	8001060 <togglePowerBtn+0x68>
		} else if (!byteStream && !buttonState) {
 800102e:	4b10      	ldr	r3, [pc, #64]	; (8001070 <togglePowerBtn+0x78>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d10c      	bne.n	8001050 <togglePowerBtn+0x58>
 8001036:	4b0f      	ldr	r3, [pc, #60]	; (8001074 <togglePowerBtn+0x7c>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d108      	bne.n	8001050 <togglePowerBtn+0x58>
		  byteStream = 1;
 800103e:	4b0c      	ldr	r3, [pc, #48]	; (8001070 <togglePowerBtn+0x78>)
 8001040:	2201      	movs	r2, #1
 8001042:	601a      	str	r2, [r3, #0]
		  buttonState = 1;
 8001044:	4b0b      	ldr	r3, [pc, #44]	; (8001074 <togglePowerBtn+0x7c>)
 8001046:	2201      	movs	r2, #1
 8001048:	601a      	str	r2, [r3, #0]
		  return buttonState;
 800104a:	4b0a      	ldr	r3, [pc, #40]	; (8001074 <togglePowerBtn+0x7c>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	e007      	b.n	8001060 <togglePowerBtn+0x68>
		} else {
		  return buttonState;
 8001050:	4b08      	ldr	r3, [pc, #32]	; (8001074 <togglePowerBtn+0x7c>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	e004      	b.n	8001060 <togglePowerBtn+0x68>
		}
	} else {
		byteStream = 0;
 8001056:	4b06      	ldr	r3, [pc, #24]	; (8001070 <togglePowerBtn+0x78>)
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
		return buttonState;
 800105c:	4b05      	ldr	r3, [pc, #20]	; (8001074 <togglePowerBtn+0x7c>)
 800105e:	681b      	ldr	r3, [r3, #0]
	}
}
 8001060:	4618      	mov	r0, r3
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr
 800106c:	20000368 	.word	0x20000368
 8001070:	2000036c 	.word	0x2000036c
 8001074:	20000370 	.word	0x20000370

08001078 <ADC_Read>:
 * Read IR sensor value:
 * Update ADC channel config
 * Start, convert and read sensor value
 */
uint16_t ADC_Read(ADC_HandleTypeDef* hadc, uint8_t channel)
{
 8001078:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800107c:	b08c      	sub	sp, #48	; 0x30
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
 8001082:	460b      	mov	r3, r1
 8001084:	70fb      	strb	r3, [r7, #3]
  ADC_ChannelConfTypeDef sConfig;

  sConfig.Channel = channel;
 8001086:	78fb      	ldrb	r3, [r7, #3]
 8001088:	60fb      	str	r3, [r7, #12]
  sConfig.Rank = 1;
 800108a:	2301      	movs	r3, #1
 800108c:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800108e:	2300      	movs	r3, #0
 8001090:	617b      	str	r3, [r7, #20]

  HAL_ADC_ConfigChannel(hadc, &sConfig);
 8001092:	f107 030c 	add.w	r3, r7, #12
 8001096:	4619      	mov	r1, r3
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	f001 fadd 	bl	8002658 <HAL_ADC_ConfigChannel>

  HAL_ADC_Start(hadc);
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f001 f948 	bl	8002334 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(hadc, 10);
 80010a4:	210a      	movs	r1, #10
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f001 f9fa 	bl	80024a0 <HAL_ADC_PollForConversion>

  uint64_t sum = 0;
 80010ac:	f04f 0200 	mov.w	r2, #0
 80010b0:	f04f 0300 	mov.w	r3, #0
 80010b4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  for (int i = 0; i < 3; i++) {
 80010b8:	2300      	movs	r3, #0
 80010ba:	627b      	str	r3, [r7, #36]	; 0x24
 80010bc:	e011      	b.n	80010e2 <ADC_Read+0x6a>
  	sum+= HAL_ADC_GetValue(hadc);
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f001 fabc 	bl	800263c <HAL_ADC_GetValue>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2200      	movs	r2, #0
 80010c8:	461c      	mov	r4, r3
 80010ca:	4615      	mov	r5, r2
 80010cc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80010d0:	eb12 0804 	adds.w	r8, r2, r4
 80010d4:	eb43 0905 	adc.w	r9, r3, r5
 80010d8:	e9c7 890a 	strd	r8, r9, [r7, #40]	; 0x28
  for (int i = 0; i < 3; i++) {
 80010dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010de:	3301      	adds	r3, #1
 80010e0:	627b      	str	r3, [r7, #36]	; 0x24
 80010e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e4:	2b02      	cmp	r3, #2
 80010e6:	ddea      	ble.n	80010be <ADC_Read+0x46>
  }

  sum = sum / 3;
 80010e8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80010ec:	f04f 0203 	mov.w	r2, #3
 80010f0:	f04f 0300 	mov.w	r3, #0
 80010f4:	f7ff fdc8 	bl	8000c88 <__aeabi_uldivmod>
 80010f8:	4602      	mov	r2, r0
 80010fa:	460b      	mov	r3, r1
 80010fc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

  return sum;
 8001100:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
}
 8001102:	4618      	mov	r0, r3
 8001104:	3730      	adds	r7, #48	; 0x30
 8001106:	46bd      	mov	sp, r7
 8001108:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800110c <setInitialState>:
/*
 * Set Initial State:
 * Set speed to highest settings
 */
void setInitialState()
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
	HAL_Delay(5000);
 8001110:	f241 3088 	movw	r0, #5000	; 0x1388
 8001114:	f000 ff58 	bl	8001fc8 <HAL_Delay>
	setMotorSpeed(-255, -255);
 8001118:	f06f 01fe 	mvn.w	r1, #254	; 0xfe
 800111c:	f06f 00fe 	mvn.w	r0, #254	; 0xfe
 8001120:	f000 f8ce 	bl	80012c0 <setMotorSpeed>
	HAL_Delay(2000);
 8001124:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001128:	f000 ff4e 	bl	8001fc8 <HAL_Delay>
}
 800112c:	bf00      	nop
 800112e:	bd80      	pop	{r7, pc}

08001130 <getDistance>:
 * Then based on the IR sensor datasheet graph, we determine
 * an equation to get accurate distance levels in centimeters.
 */

float getDistance(float adcVal)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b086      	sub	sp, #24
 8001134:	af00      	add	r7, sp, #0
 8001136:	ed87 0a01 	vstr	s0, [r7, #4]
  float voltageVal = (3.3 * adcVal) / 4096;
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f7ff fa04 	bl	8000548 <__aeabi_f2d>
 8001140:	a334      	add	r3, pc, #208	; (adr r3, 8001214 <getDistance+0xe4>)
 8001142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001146:	f7ff fa57 	bl	80005f8 <__aeabi_dmul>
 800114a:	4602      	mov	r2, r0
 800114c:	460b      	mov	r3, r1
 800114e:	4610      	mov	r0, r2
 8001150:	4619      	mov	r1, r3
 8001152:	f04f 0200 	mov.w	r2, #0
 8001156:	4b2a      	ldr	r3, [pc, #168]	; (8001200 <getDistance+0xd0>)
 8001158:	f7ff fb78 	bl	800084c <__aeabi_ddiv>
 800115c:	4602      	mov	r2, r0
 800115e:	460b      	mov	r3, r1
 8001160:	4610      	mov	r0, r2
 8001162:	4619      	mov	r1, r3
 8001164:	f7ff fd40 	bl	8000be8 <__aeabi_d2f>
 8001168:	4603      	mov	r3, r0
 800116a:	617b      	str	r3, [r7, #20]

  float max_distance = DISTANCE_MAX;
 800116c:	4b25      	ldr	r3, [pc, #148]	; (8001204 <getDistance+0xd4>)
 800116e:	613b      	str	r3, [r7, #16]
  float min_distance = DISTANCE_MIN;
 8001170:	4b25      	ldr	r3, [pc, #148]	; (8001208 <getDistance+0xd8>)
 8001172:	60fb      	str	r3, [r7, #12]

  float distance = 23.4993 / powf(voltageVal, 1.7);
 8001174:	eddf 0a25 	vldr	s1, [pc, #148]	; 800120c <getDistance+0xdc>
 8001178:	ed97 0a05 	vldr	s0, [r7, #20]
 800117c:	f009 fd50 	bl	800ac20 <powf>
 8001180:	ee10 3a10 	vmov	r3, s0
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff f9df 	bl	8000548 <__aeabi_f2d>
 800118a:	4602      	mov	r2, r0
 800118c:	460b      	mov	r3, r1
 800118e:	a11a      	add	r1, pc, #104	; (adr r1, 80011f8 <getDistance+0xc8>)
 8001190:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001194:	f7ff fb5a 	bl	800084c <__aeabi_ddiv>
 8001198:	4602      	mov	r2, r0
 800119a:	460b      	mov	r3, r1
 800119c:	4610      	mov	r0, r2
 800119e:	4619      	mov	r1, r3
 80011a0:	f7ff fd22 	bl	8000be8 <__aeabi_d2f>
 80011a4:	4603      	mov	r3, r0
 80011a6:	60bb      	str	r3, [r7, #8]

  distance -= DISTANCE_THRESHOLD;
 80011a8:	edd7 7a02 	vldr	s15, [r7, #8]
 80011ac:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80011b0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80011b4:	edc7 7a02 	vstr	s15, [r7, #8]

  if(distance >= DISTANCE_MAX) {
 80011b8:	edd7 7a02 	vldr	s15, [r7, #8]
 80011bc:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001210 <getDistance+0xe0>
 80011c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011c8:	db01      	blt.n	80011ce <getDistance+0x9e>
	  return max_distance;
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	e00b      	b.n	80011e6 <getDistance+0xb6>
  } else if(distance <= DISTANCE_MIN) {
 80011ce:	edd7 7a02 	vldr	s15, [r7, #8]
 80011d2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80011d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011de:	d801      	bhi.n	80011e4 <getDistance+0xb4>
	  return min_distance;
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	e000      	b.n	80011e6 <getDistance+0xb6>
  } else {
	  return distance;
 80011e4:	68bb      	ldr	r3, [r7, #8]
  }
}
 80011e6:	ee07 3a90 	vmov	s15, r3
 80011ea:	eeb0 0a67 	vmov.f32	s0, s15
 80011ee:	3718      	adds	r7, #24
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	f3af 8000 	nop.w
 80011f8:	1ff2e48f 	.word	0x1ff2e48f
 80011fc:	40377fd2 	.word	0x40377fd2
 8001200:	40b00000 	.word	0x40b00000
 8001204:	43160000 	.word	0x43160000
 8001208:	41200000 	.word	0x41200000
 800120c:	3fd9999a 	.word	0x3fd9999a
 8001210:	43160000 	.word	0x43160000
 8001214:	66666666 	.word	0x66666666
 8001218:	400a6666 	.word	0x400a6666

0800121c <steerBoat>:
 * if turn amount is negative, the boat needs to turn right
 * Constraint: 0 <= turn_amount <= 140
 */

void steerBoat(float left_dist, float front_dist, float right_dist)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b086      	sub	sp, #24
 8001220:	af00      	add	r7, sp, #0
 8001222:	ed87 0a03 	vstr	s0, [r7, #12]
 8001226:	edc7 0a02 	vstr	s1, [r7, #8]
 800122a:	ed87 1a01 	vstr	s2, [r7, #4]
	float dist_diff = left_dist - right_dist;
 800122e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001232:	edd7 7a01 	vldr	s15, [r7, #4]
 8001236:	ee77 7a67 	vsub.f32	s15, s14, s15
 800123a:	edc7 7a05 	vstr	s15, [r7, #20]

	if(front_dist > 100) {
 800123e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001242:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80012bc <steerBoat+0xa0>
 8001246:	eef4 7ac7 	vcmpe.f32	s15, s14
 800124a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800124e:	dd06      	ble.n	800125e <steerBoat+0x42>
		setMotorSpeed(-MAX_SPEED, -MAX_SPEED);
 8001250:	f06f 01fe 	mvn.w	r1, #254	; 0xfe
 8001254:	f06f 00fe 	mvn.w	r0, #254	; 0xfe
 8001258:	f000 f832 	bl	80012c0 <setMotorSpeed>
			setMotorSpeed(100, -50);
		} else {
			setMotorSpeed(-MAX_SPEED, -MAX_SPEED);
		}
	}
}
 800125c:	e029      	b.n	80012b2 <steerBoat+0x96>
		if(dist_diff < -DISTANCE_THRESHOLD) { // Left Turn
 800125e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001262:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 8001266:	eef4 7ac7 	vcmpe.f32	s15, s14
 800126a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800126e:	d508      	bpl.n	8001282 <steerBoat+0x66>
			HAL_Delay(100);
 8001270:	2064      	movs	r0, #100	; 0x64
 8001272:	f000 fea9 	bl	8001fc8 <HAL_Delay>
			setMotorSpeed(-50, 100);
 8001276:	2164      	movs	r1, #100	; 0x64
 8001278:	f06f 0031 	mvn.w	r0, #49	; 0x31
 800127c:	f000 f820 	bl	80012c0 <setMotorSpeed>
}
 8001280:	e017      	b.n	80012b2 <steerBoat+0x96>
		} else if(dist_diff > DISTANCE_THRESHOLD) {// Right Turn
 8001282:	edd7 7a05 	vldr	s15, [r7, #20]
 8001286:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800128a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800128e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001292:	dd08      	ble.n	80012a6 <steerBoat+0x8a>
			HAL_Delay(100);
 8001294:	2064      	movs	r0, #100	; 0x64
 8001296:	f000 fe97 	bl	8001fc8 <HAL_Delay>
			setMotorSpeed(100, -50);
 800129a:	f06f 0131 	mvn.w	r1, #49	; 0x31
 800129e:	2064      	movs	r0, #100	; 0x64
 80012a0:	f000 f80e 	bl	80012c0 <setMotorSpeed>
}
 80012a4:	e005      	b.n	80012b2 <steerBoat+0x96>
			setMotorSpeed(-MAX_SPEED, -MAX_SPEED);
 80012a6:	f06f 01fe 	mvn.w	r1, #254	; 0xfe
 80012aa:	f06f 00fe 	mvn.w	r0, #254	; 0xfe
 80012ae:	f000 f807 	bl	80012c0 <setMotorSpeed>
}
 80012b2:	bf00      	nop
 80012b4:	3718      	adds	r7, #24
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	42c80000 	.word	0x42c80000

080012c0 <setMotorSpeed>:

/*
 * Set Motor Speed:
 *
 */
void setMotorSpeed(int32_t left, int32_t right) {
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	6039      	str	r1, [r7, #0]
	if (left > 0)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	dd0c      	ble.n	80012ea <setMotorSpeed+0x2a>
	{
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, -1 * left);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	425a      	negs	r2, r3
 80012d4:	4b1a      	ldr	r3, [pc, #104]	; (8001340 <setMotorSpeed+0x80>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_GPIO_WritePin(LEFT_DM_PHASE_GPIO_Port, LEFT_DM_PHASE_Pin, 1);
 80012da:	2201      	movs	r2, #1
 80012dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012e4:	f002 f878 	bl	80033d8 <HAL_GPIO_WritePin>
 80012e8:	e00a      	b.n	8001300 <setMotorSpeed+0x40>
	}
	else
	{
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, left);
 80012ea:	4b15      	ldr	r3, [pc, #84]	; (8001340 <setMotorSpeed+0x80>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	687a      	ldr	r2, [r7, #4]
 80012f0:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_GPIO_WritePin(LEFT_DM_PHASE_GPIO_Port, LEFT_DM_PHASE_Pin, 0);
 80012f2:	2200      	movs	r2, #0
 80012f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012fc:	f002 f86c 	bl	80033d8 <HAL_GPIO_WritePin>
	}

	if (right > 0)
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	2b00      	cmp	r3, #0
 8001304:	dd0c      	ble.n	8001320 <setMotorSpeed+0x60>
	{
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, -1 * right);
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	425a      	negs	r2, r3
 800130a:	4b0d      	ldr	r3, [pc, #52]	; (8001340 <setMotorSpeed+0x80>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(RIGHT_DM_PHASE_GPIO_Port, RIGHT_DM_PHASE_Pin, 0);
 8001310:	2200      	movs	r2, #0
 8001312:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001316:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800131a:	f002 f85d 	bl	80033d8 <HAL_GPIO_WritePin>
	else
	{
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, right);
		HAL_GPIO_WritePin(RIGHT_DM_PHASE_GPIO_Port, RIGHT_DM_PHASE_Pin, 1);
	}
}
 800131e:	e00a      	b.n	8001336 <setMotorSpeed+0x76>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, right);
 8001320:	4b07      	ldr	r3, [pc, #28]	; (8001340 <setMotorSpeed+0x80>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	683a      	ldr	r2, [r7, #0]
 8001326:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(RIGHT_DM_PHASE_GPIO_Port, RIGHT_DM_PHASE_Pin, 1);
 8001328:	2201      	movs	r2, #1
 800132a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800132e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001332:	f002 f851 	bl	80033d8 <HAL_GPIO_WritePin>
}
 8001336:	bf00      	nop
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	2000024c 	.word	0x2000024c

08001344 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b086      	sub	sp, #24
 8001348:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800134a:	f000 fdd7 	bl	8001efc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800134e:	f000 f8f9 	bl	8001544 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001352:	f000 fb1d 	bl	8001990 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001356:	f000 faeb 	bl	8001930 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800135a:	f000 f9b7 	bl	80016cc <MX_TIM1_Init>
  MX_ADC1_Init();
 800135e:	f000 f945 	bl	80015ec <MX_ADC1_Init>
  MX_TIM17_Init();
 8001362:	f000 fa6b 	bl	800183c <MX_TIM17_Init>

  uint8_t powerBtnState;

  float left_dist, front_dist, right_dist;

  float left_stored_dist = 0;
 8001366:	f04f 0300 	mov.w	r3, #0
 800136a:	617b      	str	r3, [r7, #20]
  float right_stored_dist = 0;
 800136c:	f04f 0300 	mov.w	r3, #0
 8001370:	613b      	str	r3, [r7, #16]

  HAL_TIM_Base_Start(&htim1);
 8001372:	4870      	ldr	r0, [pc, #448]	; (8001534 <main+0x1f0>)
 8001374:	f003 fc3a 	bl	8004bec <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim17);
 8001378:	486f      	ldr	r0, [pc, #444]	; (8001538 <main+0x1f4>)
 800137a:	f003 fc37 	bl	8004bec <HAL_TIM_Base_Start>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800137e:	2100      	movs	r1, #0
 8001380:	486c      	ldr	r0, [pc, #432]	; (8001534 <main+0x1f0>)
 8001382:	f003 fce9 	bl	8004d58 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001386:	2104      	movs	r1, #4
 8001388:	486a      	ldr	r0, [pc, #424]	; (8001534 <main+0x1f0>)
 800138a:	f003 fce5 	bl	8004d58 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 800138e:	2100      	movs	r1, #0
 8001390:	4869      	ldr	r0, [pc, #420]	; (8001538 <main+0x1f4>)
 8001392:	f003 fce1 	bl	8004d58 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		powerBtnState = HAL_GPIO_ReadPin(POWER_BTN_GPIO_Port, POWER_BTN_Pin);
 8001396:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800139a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800139e:	f002 f803 	bl	80033a8 <HAL_GPIO_ReadPin>
 80013a2:	4603      	mov	r3, r0
 80013a4:	73fb      	strb	r3, [r7, #15]

		if(togglePowerBtn(powerBtnState) == 0 && delay == 1) {
 80013a6:	7bfb      	ldrb	r3, [r7, #15]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff fe25 	bl	8000ff8 <togglePowerBtn>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d106      	bne.n	80013c2 <main+0x7e>
 80013b4:	4b61      	ldr	r3, [pc, #388]	; (800153c <main+0x1f8>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d102      	bne.n	80013c2 <main+0x7e>
			delay = 0;
 80013bc:	4b5f      	ldr	r3, [pc, #380]	; (800153c <main+0x1f8>)
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
		}

		if (togglePowerBtn(powerBtnState) == 1) {
 80013c2:	7bfb      	ldrb	r3, [r7, #15]
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff fe17 	bl	8000ff8 <togglePowerBtn>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	f040 80ab 	bne.w	8001528 <main+0x1e4>

			if(delay == 0) {
 80013d2:	4b5a      	ldr	r3, [pc, #360]	; (800153c <main+0x1f8>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d10a      	bne.n	80013f0 <main+0xac>
				setInitialState();
 80013da:	f7ff fe97 	bl	800110c <setInitialState>
				left_stored_dist = 0;
 80013de:	f04f 0300 	mov.w	r3, #0
 80013e2:	617b      	str	r3, [r7, #20]
				right_stored_dist = 0;
 80013e4:	f04f 0300 	mov.w	r3, #0
 80013e8:	613b      	str	r3, [r7, #16]
				delay = 1;
 80013ea:	4b54      	ldr	r3, [pc, #336]	; (800153c <main+0x1f8>)
 80013ec:	2201      	movs	r2, #1
 80013ee:	601a      	str	r2, [r3, #0]
			 }

			left_dist = getDistance(ADC_Read(&hadc1, ADC_CHANNEL_1));
 80013f0:	2101      	movs	r1, #1
 80013f2:	4853      	ldr	r0, [pc, #332]	; (8001540 <main+0x1fc>)
 80013f4:	f7ff fe40 	bl	8001078 <ADC_Read>
 80013f8:	4603      	mov	r3, r0
 80013fa:	ee07 3a90 	vmov	s15, r3
 80013fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001402:	eeb0 0a67 	vmov.f32	s0, s15
 8001406:	f7ff fe93 	bl	8001130 <getDistance>
 800140a:	ed87 0a02 	vstr	s0, [r7, #8]
			front_dist = getDistance(ADC_Read(&hadc1, ADC_CHANNEL_2));
 800140e:	2102      	movs	r1, #2
 8001410:	484b      	ldr	r0, [pc, #300]	; (8001540 <main+0x1fc>)
 8001412:	f7ff fe31 	bl	8001078 <ADC_Read>
 8001416:	4603      	mov	r3, r0
 8001418:	ee07 3a90 	vmov	s15, r3
 800141c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001420:	eeb0 0a67 	vmov.f32	s0, s15
 8001424:	f7ff fe84 	bl	8001130 <getDistance>
 8001428:	ed87 0a01 	vstr	s0, [r7, #4]
			right_dist = getDistance(ADC_Read(&hadc1, ADC_CHANNEL_4));
 800142c:	2104      	movs	r1, #4
 800142e:	4844      	ldr	r0, [pc, #272]	; (8001540 <main+0x1fc>)
 8001430:	f7ff fe22 	bl	8001078 <ADC_Read>
 8001434:	4603      	mov	r3, r0
 8001436:	ee07 3a90 	vmov	s15, r3
 800143a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800143e:	eeb0 0a67 	vmov.f32	s0, s15
 8001442:	f7ff fe75 	bl	8001130 <getDistance>
 8001446:	ed87 0a00 	vstr	s0, [r7]


			// Store distance values to know which turn position to favor
			if(left_stored_dist > 0 && right_stored_dist > 0) {
 800144a:	edd7 7a05 	vldr	s15, [r7, #20]
 800144e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001456:	dd27      	ble.n	80014a8 <main+0x164>
 8001458:	edd7 7a04 	vldr	s15, [r7, #16]
 800145c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001460:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001464:	dd20      	ble.n	80014a8 <main+0x164>
				left_stored_dist += left_dist;
 8001466:	ed97 7a05 	vldr	s14, [r7, #20]
 800146a:	edd7 7a02 	vldr	s15, [r7, #8]
 800146e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001472:	edc7 7a05 	vstr	s15, [r7, #20]
				right_stored_dist += right_dist;
 8001476:	ed97 7a04 	vldr	s14, [r7, #16]
 800147a:	edd7 7a00 	vldr	s15, [r7]
 800147e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001482:	edc7 7a04 	vstr	s15, [r7, #16]

				left_stored_dist /= 2;
 8001486:	ed97 7a05 	vldr	s14, [r7, #20]
 800148a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800148e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001492:	edc7 7a05 	vstr	s15, [r7, #20]
				right_stored_dist /= 2;
 8001496:	ed97 7a04 	vldr	s14, [r7, #16]
 800149a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800149e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014a2:	edc7 7a04 	vstr	s15, [r7, #16]
 80014a6:	e003      	b.n	80014b0 <main+0x16c>
			} else {
				left_stored_dist = left_dist;
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	617b      	str	r3, [r7, #20]
				right_stored_dist = right_dist;
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	613b      	str	r3, [r7, #16]
			}

			if(front_dist < 15) {
 80014b0:	edd7 7a01 	vldr	s15, [r7, #4]
 80014b4:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 80014b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014c0:	d529      	bpl.n	8001516 <main+0x1d2>
				setMotorSpeed(MAX_SPEED, MAX_SPEED);
 80014c2:	21ff      	movs	r1, #255	; 0xff
 80014c4:	20ff      	movs	r0, #255	; 0xff
 80014c6:	f7ff fefb 	bl	80012c0 <setMotorSpeed>
				HAL_Delay(1000);
 80014ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014ce:	f000 fd7b 	bl	8001fc8 <HAL_Delay>

				if(left_stored_dist < right_stored_dist) {
 80014d2:	ed97 7a05 	vldr	s14, [r7, #20]
 80014d6:	edd7 7a04 	vldr	s15, [r7, #16]
 80014da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014e2:	d505      	bpl.n	80014f0 <main+0x1ac>
					setMotorSpeed(-MAX_SPEED, MAX_SPEED);
 80014e4:	21ff      	movs	r1, #255	; 0xff
 80014e6:	f06f 00fe 	mvn.w	r0, #254	; 0xfe
 80014ea:	f7ff fee9 	bl	80012c0 <setMotorSpeed>
 80014ee:	e00d      	b.n	800150c <main+0x1c8>
				} else if(left_stored_dist > right_stored_dist) {
 80014f0:	ed97 7a05 	vldr	s14, [r7, #20]
 80014f4:	edd7 7a04 	vldr	s15, [r7, #16]
 80014f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001500:	dd04      	ble.n	800150c <main+0x1c8>
					setMotorSpeed(MAX_SPEED, -MAX_SPEED);
 8001502:	f06f 01fe 	mvn.w	r1, #254	; 0xfe
 8001506:	20ff      	movs	r0, #255	; 0xff
 8001508:	f7ff feda 	bl	80012c0 <setMotorSpeed>
				}

				HAL_Delay(300);
 800150c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001510:	f000 fd5a 	bl	8001fc8 <HAL_Delay>
 8001514:	e73f      	b.n	8001396 <main+0x52>
			} else {
				steerBoat(left_dist, front_dist, right_dist);
 8001516:	ed97 1a00 	vldr	s2, [r7]
 800151a:	edd7 0a01 	vldr	s1, [r7, #4]
 800151e:	ed97 0a02 	vldr	s0, [r7, #8]
 8001522:	f7ff fe7b 	bl	800121c <steerBoat>
 8001526:	e736      	b.n	8001396 <main+0x52>
			}

		} else {
			setMotorSpeed(0, 0);
 8001528:	2100      	movs	r1, #0
 800152a:	2000      	movs	r0, #0
 800152c:	f7ff fec8 	bl	80012c0 <setMotorSpeed>
		powerBtnState = HAL_GPIO_ReadPin(POWER_BTN_GPIO_Port, POWER_BTN_Pin);
 8001530:	e731      	b.n	8001396 <main+0x52>
 8001532:	bf00      	nop
 8001534:	2000024c 	.word	0x2000024c
 8001538:	20000298 	.word	0x20000298
 800153c:	20000374 	.word	0x20000374
 8001540:	200001fc 	.word	0x200001fc

08001544 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b096      	sub	sp, #88	; 0x58
 8001548:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800154a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800154e:	2228      	movs	r2, #40	; 0x28
 8001550:	2100      	movs	r1, #0
 8001552:	4618      	mov	r0, r3
 8001554:	f004 feec 	bl	8006330 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001558:	f107 031c 	add.w	r3, r7, #28
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	605a      	str	r2, [r3, #4]
 8001562:	609a      	str	r2, [r3, #8]
 8001564:	60da      	str	r2, [r3, #12]
 8001566:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001568:	1d3b      	adds	r3, r7, #4
 800156a:	2200      	movs	r2, #0
 800156c:	601a      	str	r2, [r3, #0]
 800156e:	605a      	str	r2, [r3, #4]
 8001570:	609a      	str	r2, [r3, #8]
 8001572:	60da      	str	r2, [r3, #12]
 8001574:	611a      	str	r2, [r3, #16]
 8001576:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001578:	2302      	movs	r3, #2
 800157a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800157c:	2301      	movs	r3, #1
 800157e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001580:	2310      	movs	r3, #16
 8001582:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001584:	2300      	movs	r3, #0
 8001586:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001588:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800158c:	4618      	mov	r0, r3
 800158e:	f001 ff3b 	bl	8003408 <HAL_RCC_OscConfig>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001598:	f000 fa48 	bl	8001a2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800159c:	230f      	movs	r3, #15
 800159e:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80015a0:	2300      	movs	r3, #0
 80015a2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015a4:	2300      	movs	r3, #0
 80015a6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015a8:	2300      	movs	r3, #0
 80015aa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015ac:	2300      	movs	r3, #0
 80015ae:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80015b0:	f107 031c 	add.w	r3, r7, #28
 80015b4:	2100      	movs	r1, #0
 80015b6:	4618      	mov	r0, r3
 80015b8:	f002 ff64 	bl	8004484 <HAL_RCC_ClockConfig>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80015c2:	f000 fa33 	bl	8001a2c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 80015c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015ca:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80015cc:	2300      	movs	r3, #0
 80015ce:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015d0:	1d3b      	adds	r3, r7, #4
 80015d2:	4618      	mov	r0, r3
 80015d4:	f003 f98c 	bl	80048f0 <HAL_RCCEx_PeriphCLKConfig>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80015de:	f000 fa25 	bl	8001a2c <Error_Handler>
  }
}
 80015e2:	bf00      	nop
 80015e4:	3758      	adds	r7, #88	; 0x58
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
	...

080015ec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b08a      	sub	sp, #40	; 0x28
 80015f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80015f2:	f107 031c 	add.w	r3, r7, #28
 80015f6:	2200      	movs	r2, #0
 80015f8:	601a      	str	r2, [r3, #0]
 80015fa:	605a      	str	r2, [r3, #4]
 80015fc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80015fe:	1d3b      	adds	r3, r7, #4
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	605a      	str	r2, [r3, #4]
 8001606:	609a      	str	r2, [r3, #8]
 8001608:	60da      	str	r2, [r3, #12]
 800160a:	611a      	str	r2, [r3, #16]
 800160c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800160e:	4b2e      	ldr	r3, [pc, #184]	; (80016c8 <MX_ADC1_Init+0xdc>)
 8001610:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001614:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8001616:	4b2c      	ldr	r3, [pc, #176]	; (80016c8 <MX_ADC1_Init+0xdc>)
 8001618:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800161c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800161e:	4b2a      	ldr	r3, [pc, #168]	; (80016c8 <MX_ADC1_Init+0xdc>)
 8001620:	2200      	movs	r2, #0
 8001622:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001624:	4b28      	ldr	r3, [pc, #160]	; (80016c8 <MX_ADC1_Init+0xdc>)
 8001626:	2200      	movs	r2, #0
 8001628:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800162a:	4b27      	ldr	r3, [pc, #156]	; (80016c8 <MX_ADC1_Init+0xdc>)
 800162c:	2200      	movs	r2, #0
 800162e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001630:	4b25      	ldr	r3, [pc, #148]	; (80016c8 <MX_ADC1_Init+0xdc>)
 8001632:	2200      	movs	r2, #0
 8001634:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001638:	4b23      	ldr	r3, [pc, #140]	; (80016c8 <MX_ADC1_Init+0xdc>)
 800163a:	2200      	movs	r2, #0
 800163c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800163e:	4b22      	ldr	r3, [pc, #136]	; (80016c8 <MX_ADC1_Init+0xdc>)
 8001640:	2201      	movs	r2, #1
 8001642:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001644:	4b20      	ldr	r3, [pc, #128]	; (80016c8 <MX_ADC1_Init+0xdc>)
 8001646:	2200      	movs	r2, #0
 8001648:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800164a:	4b1f      	ldr	r3, [pc, #124]	; (80016c8 <MX_ADC1_Init+0xdc>)
 800164c:	2201      	movs	r2, #1
 800164e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001650:	4b1d      	ldr	r3, [pc, #116]	; (80016c8 <MX_ADC1_Init+0xdc>)
 8001652:	2200      	movs	r2, #0
 8001654:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001658:	4b1b      	ldr	r3, [pc, #108]	; (80016c8 <MX_ADC1_Init+0xdc>)
 800165a:	2204      	movs	r2, #4
 800165c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800165e:	4b1a      	ldr	r3, [pc, #104]	; (80016c8 <MX_ADC1_Init+0xdc>)
 8001660:	2200      	movs	r2, #0
 8001662:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001664:	4b18      	ldr	r3, [pc, #96]	; (80016c8 <MX_ADC1_Init+0xdc>)
 8001666:	2200      	movs	r2, #0
 8001668:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800166a:	4817      	ldr	r0, [pc, #92]	; (80016c8 <MX_ADC1_Init+0xdc>)
 800166c:	f000 fcd0 	bl	8002010 <HAL_ADC_Init>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001676:	f000 f9d9 	bl	8001a2c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800167a:	2300      	movs	r3, #0
 800167c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800167e:	f107 031c 	add.w	r3, r7, #28
 8001682:	4619      	mov	r1, r3
 8001684:	4810      	ldr	r0, [pc, #64]	; (80016c8 <MX_ADC1_Init+0xdc>)
 8001686:	f001 faa7 	bl	8002bd8 <HAL_ADCEx_MultiModeConfigChannel>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8001690:	f000 f9cc 	bl	8001a2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001694:	2301      	movs	r3, #1
 8001696:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001698:	2301      	movs	r3, #1
 800169a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800169c:	2300      	movs	r3, #0
 800169e:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80016a0:	2300      	movs	r3, #0
 80016a2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80016a4:	2300      	movs	r3, #0
 80016a6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80016a8:	2300      	movs	r3, #0
 80016aa:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016ac:	1d3b      	adds	r3, r7, #4
 80016ae:	4619      	mov	r1, r3
 80016b0:	4805      	ldr	r0, [pc, #20]	; (80016c8 <MX_ADC1_Init+0xdc>)
 80016b2:	f000 ffd1 	bl	8002658 <HAL_ADC_ConfigChannel>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 80016bc:	f000 f9b6 	bl	8001a2c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80016c0:	bf00      	nop
 80016c2:	3728      	adds	r7, #40	; 0x28
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	200001fc 	.word	0x200001fc

080016cc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b09a      	sub	sp, #104	; 0x68
 80016d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016d2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80016d6:	2200      	movs	r2, #0
 80016d8:	601a      	str	r2, [r3, #0]
 80016da:	605a      	str	r2, [r3, #4]
 80016dc:	609a      	str	r2, [r3, #8]
 80016de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016e0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	605a      	str	r2, [r3, #4]
 80016ea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016ec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80016f0:	2200      	movs	r2, #0
 80016f2:	601a      	str	r2, [r3, #0]
 80016f4:	605a      	str	r2, [r3, #4]
 80016f6:	609a      	str	r2, [r3, #8]
 80016f8:	60da      	str	r2, [r3, #12]
 80016fa:	611a      	str	r2, [r3, #16]
 80016fc:	615a      	str	r2, [r3, #20]
 80016fe:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001700:	1d3b      	adds	r3, r7, #4
 8001702:	222c      	movs	r2, #44	; 0x2c
 8001704:	2100      	movs	r1, #0
 8001706:	4618      	mov	r0, r3
 8001708:	f004 fe12 	bl	8006330 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800170c:	4b49      	ldr	r3, [pc, #292]	; (8001834 <MX_TIM1_Init+0x168>)
 800170e:	4a4a      	ldr	r2, [pc, #296]	; (8001838 <MX_TIM1_Init+0x16c>)
 8001710:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 625-1;
 8001712:	4b48      	ldr	r3, [pc, #288]	; (8001834 <MX_TIM1_Init+0x168>)
 8001714:	f44f 721c 	mov.w	r2, #624	; 0x270
 8001718:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800171a:	4b46      	ldr	r3, [pc, #280]	; (8001834 <MX_TIM1_Init+0x168>)
 800171c:	2200      	movs	r2, #0
 800171e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 256-1;
 8001720:	4b44      	ldr	r3, [pc, #272]	; (8001834 <MX_TIM1_Init+0x168>)
 8001722:	22ff      	movs	r2, #255	; 0xff
 8001724:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001726:	4b43      	ldr	r3, [pc, #268]	; (8001834 <MX_TIM1_Init+0x168>)
 8001728:	2200      	movs	r2, #0
 800172a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800172c:	4b41      	ldr	r3, [pc, #260]	; (8001834 <MX_TIM1_Init+0x168>)
 800172e:	2200      	movs	r2, #0
 8001730:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001732:	4b40      	ldr	r3, [pc, #256]	; (8001834 <MX_TIM1_Init+0x168>)
 8001734:	2280      	movs	r2, #128	; 0x80
 8001736:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001738:	483e      	ldr	r0, [pc, #248]	; (8001834 <MX_TIM1_Init+0x168>)
 800173a:	f003 f9ff 	bl	8004b3c <HAL_TIM_Base_Init>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001744:	f000 f972 	bl	8001a2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001748:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800174c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800174e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001752:	4619      	mov	r1, r3
 8001754:	4837      	ldr	r0, [pc, #220]	; (8001834 <MX_TIM1_Init+0x168>)
 8001756:	f003 fcff 	bl	8005158 <HAL_TIM_ConfigClockSource>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001760:	f000 f964 	bl	8001a2c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001764:	4833      	ldr	r0, [pc, #204]	; (8001834 <MX_TIM1_Init+0x168>)
 8001766:	f003 fa95 	bl	8004c94 <HAL_TIM_PWM_Init>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001770:	f000 f95c 	bl	8001a2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001774:	2300      	movs	r3, #0
 8001776:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001778:	2300      	movs	r3, #0
 800177a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800177c:	2300      	movs	r3, #0
 800177e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001780:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001784:	4619      	mov	r1, r3
 8001786:	482b      	ldr	r0, [pc, #172]	; (8001834 <MX_TIM1_Init+0x168>)
 8001788:	f004 f98e 	bl	8005aa8 <HAL_TIMEx_MasterConfigSynchronization>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001792:	f000 f94b 	bl	8001a2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001796:	2360      	movs	r3, #96	; 0x60
 8001798:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800179a:	2300      	movs	r3, #0
 800179c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800179e:	2300      	movs	r3, #0
 80017a0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80017a2:	2300      	movs	r3, #0
 80017a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017a6:	2300      	movs	r3, #0
 80017a8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80017aa:	2300      	movs	r3, #0
 80017ac:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80017ae:	2300      	movs	r3, #0
 80017b0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017b6:	2200      	movs	r2, #0
 80017b8:	4619      	mov	r1, r3
 80017ba:	481e      	ldr	r0, [pc, #120]	; (8001834 <MX_TIM1_Init+0x168>)
 80017bc:	f003 fbb8 	bl	8004f30 <HAL_TIM_PWM_ConfigChannel>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80017c6:	f000 f931 	bl	8001a2c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80017ca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017ce:	2204      	movs	r2, #4
 80017d0:	4619      	mov	r1, r3
 80017d2:	4818      	ldr	r0, [pc, #96]	; (8001834 <MX_TIM1_Init+0x168>)
 80017d4:	f003 fbac 	bl	8004f30 <HAL_TIM_PWM_ConfigChannel>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80017de:	f000 f925 	bl	8001a2c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80017e2:	2300      	movs	r3, #0
 80017e4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80017e6:	2300      	movs	r3, #0
 80017e8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80017ea:	2300      	movs	r3, #0
 80017ec:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80017ee:	2300      	movs	r3, #0
 80017f0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80017f2:	2300      	movs	r3, #0
 80017f4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80017f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017fa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80017fc:	2300      	movs	r3, #0
 80017fe:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001800:	2300      	movs	r3, #0
 8001802:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001804:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001808:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800180a:	2300      	movs	r3, #0
 800180c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800180e:	2300      	movs	r3, #0
 8001810:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001812:	1d3b      	adds	r3, r7, #4
 8001814:	4619      	mov	r1, r3
 8001816:	4807      	ldr	r0, [pc, #28]	; (8001834 <MX_TIM1_Init+0x168>)
 8001818:	f004 f9b4 	bl	8005b84 <HAL_TIMEx_ConfigBreakDeadTime>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8001822:	f000 f903 	bl	8001a2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001826:	4803      	ldr	r0, [pc, #12]	; (8001834 <MX_TIM1_Init+0x168>)
 8001828:	f000 f99a 	bl	8001b60 <HAL_TIM_MspPostInit>

}
 800182c:	bf00      	nop
 800182e:	3768      	adds	r7, #104	; 0x68
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	2000024c 	.word	0x2000024c
 8001838:	40012c00 	.word	0x40012c00

0800183c <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b092      	sub	sp, #72	; 0x48
 8001840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001842:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001846:	2200      	movs	r2, #0
 8001848:	601a      	str	r2, [r3, #0]
 800184a:	605a      	str	r2, [r3, #4]
 800184c:	609a      	str	r2, [r3, #8]
 800184e:	60da      	str	r2, [r3, #12]
 8001850:	611a      	str	r2, [r3, #16]
 8001852:	615a      	str	r2, [r3, #20]
 8001854:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001856:	463b      	mov	r3, r7
 8001858:	222c      	movs	r2, #44	; 0x2c
 800185a:	2100      	movs	r1, #0
 800185c:	4618      	mov	r0, r3
 800185e:	f004 fd67 	bl	8006330 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001862:	4b31      	ldr	r3, [pc, #196]	; (8001928 <MX_TIM17_Init+0xec>)
 8001864:	4a31      	ldr	r2, [pc, #196]	; (800192c <MX_TIM17_Init+0xf0>)
 8001866:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 8-1;
 8001868:	4b2f      	ldr	r3, [pc, #188]	; (8001928 <MX_TIM17_Init+0xec>)
 800186a:	2207      	movs	r2, #7
 800186c:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800186e:	4b2e      	ldr	r3, [pc, #184]	; (8001928 <MX_TIM17_Init+0xec>)
 8001870:	2200      	movs	r2, #0
 8001872:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 20000-1;
 8001874:	4b2c      	ldr	r3, [pc, #176]	; (8001928 <MX_TIM17_Init+0xec>)
 8001876:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800187a:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800187c:	4b2a      	ldr	r3, [pc, #168]	; (8001928 <MX_TIM17_Init+0xec>)
 800187e:	2200      	movs	r2, #0
 8001880:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001882:	4b29      	ldr	r3, [pc, #164]	; (8001928 <MX_TIM17_Init+0xec>)
 8001884:	2200      	movs	r2, #0
 8001886:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001888:	4b27      	ldr	r3, [pc, #156]	; (8001928 <MX_TIM17_Init+0xec>)
 800188a:	2280      	movs	r2, #128	; 0x80
 800188c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800188e:	4826      	ldr	r0, [pc, #152]	; (8001928 <MX_TIM17_Init+0xec>)
 8001890:	f003 f954 	bl	8004b3c <HAL_TIM_Base_Init>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 800189a:	f000 f8c7 	bl	8001a2c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 800189e:	4822      	ldr	r0, [pc, #136]	; (8001928 <MX_TIM17_Init+0xec>)
 80018a0:	f003 f9f8 	bl	8004c94 <HAL_TIM_PWM_Init>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 80018aa:	f000 f8bf 	bl	8001a2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018ae:	2360      	movs	r3, #96	; 0x60
 80018b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 80018b2:	2300      	movs	r3, #0
 80018b4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018b6:	2300      	movs	r3, #0
 80018b8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80018ba:	2300      	movs	r3, #0
 80018bc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018be:	2300      	movs	r3, #0
 80018c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80018c2:	2300      	movs	r3, #0
 80018c4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018c6:	2300      	movs	r3, #0
 80018c8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018ce:	2200      	movs	r2, #0
 80018d0:	4619      	mov	r1, r3
 80018d2:	4815      	ldr	r0, [pc, #84]	; (8001928 <MX_TIM17_Init+0xec>)
 80018d4:	f003 fb2c 	bl	8004f30 <HAL_TIM_PWM_ConfigChannel>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 80018de:	f000 f8a5 	bl	8001a2c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018e2:	2300      	movs	r3, #0
 80018e4:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018e6:	2300      	movs	r3, #0
 80018e8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018ea:	2300      	movs	r3, #0
 80018ec:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80018ee:	2300      	movs	r3, #0
 80018f0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80018f2:	2300      	movs	r3, #0
 80018f4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80018f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018fa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80018fc:	2300      	movs	r3, #0
 80018fe:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001900:	2300      	movs	r3, #0
 8001902:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8001904:	463b      	mov	r3, r7
 8001906:	4619      	mov	r1, r3
 8001908:	4807      	ldr	r0, [pc, #28]	; (8001928 <MX_TIM17_Init+0xec>)
 800190a:	f004 f93b 	bl	8005b84 <HAL_TIMEx_ConfigBreakDeadTime>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 8001914:	f000 f88a 	bl	8001a2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8001918:	4803      	ldr	r0, [pc, #12]	; (8001928 <MX_TIM17_Init+0xec>)
 800191a:	f000 f921 	bl	8001b60 <HAL_TIM_MspPostInit>

}
 800191e:	bf00      	nop
 8001920:	3748      	adds	r7, #72	; 0x48
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	20000298 	.word	0x20000298
 800192c:	40014800 	.word	0x40014800

08001930 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001934:	4b14      	ldr	r3, [pc, #80]	; (8001988 <MX_USART2_UART_Init+0x58>)
 8001936:	4a15      	ldr	r2, [pc, #84]	; (800198c <MX_USART2_UART_Init+0x5c>)
 8001938:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800193a:	4b13      	ldr	r3, [pc, #76]	; (8001988 <MX_USART2_UART_Init+0x58>)
 800193c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001940:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001942:	4b11      	ldr	r3, [pc, #68]	; (8001988 <MX_USART2_UART_Init+0x58>)
 8001944:	2200      	movs	r2, #0
 8001946:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001948:	4b0f      	ldr	r3, [pc, #60]	; (8001988 <MX_USART2_UART_Init+0x58>)
 800194a:	2200      	movs	r2, #0
 800194c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800194e:	4b0e      	ldr	r3, [pc, #56]	; (8001988 <MX_USART2_UART_Init+0x58>)
 8001950:	2200      	movs	r2, #0
 8001952:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001954:	4b0c      	ldr	r3, [pc, #48]	; (8001988 <MX_USART2_UART_Init+0x58>)
 8001956:	220c      	movs	r2, #12
 8001958:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800195a:	4b0b      	ldr	r3, [pc, #44]	; (8001988 <MX_USART2_UART_Init+0x58>)
 800195c:	2200      	movs	r2, #0
 800195e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001960:	4b09      	ldr	r3, [pc, #36]	; (8001988 <MX_USART2_UART_Init+0x58>)
 8001962:	2200      	movs	r2, #0
 8001964:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001966:	4b08      	ldr	r3, [pc, #32]	; (8001988 <MX_USART2_UART_Init+0x58>)
 8001968:	2200      	movs	r2, #0
 800196a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800196c:	4b06      	ldr	r3, [pc, #24]	; (8001988 <MX_USART2_UART_Init+0x58>)
 800196e:	2200      	movs	r2, #0
 8001970:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001972:	4805      	ldr	r0, [pc, #20]	; (8001988 <MX_USART2_UART_Init+0x58>)
 8001974:	f004 f97e 	bl	8005c74 <HAL_UART_Init>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800197e:	f000 f855 	bl	8001a2c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001982:	bf00      	nop
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	200002e4 	.word	0x200002e4
 800198c:	40004400 	.word	0x40004400

08001990 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b088      	sub	sp, #32
 8001994:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001996:	f107 030c 	add.w	r3, r7, #12
 800199a:	2200      	movs	r2, #0
 800199c:	601a      	str	r2, [r3, #0]
 800199e:	605a      	str	r2, [r3, #4]
 80019a0:	609a      	str	r2, [r3, #8]
 80019a2:	60da      	str	r2, [r3, #12]
 80019a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019a6:	4b20      	ldr	r3, [pc, #128]	; (8001a28 <MX_GPIO_Init+0x98>)
 80019a8:	695b      	ldr	r3, [r3, #20]
 80019aa:	4a1f      	ldr	r2, [pc, #124]	; (8001a28 <MX_GPIO_Init+0x98>)
 80019ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019b0:	6153      	str	r3, [r2, #20]
 80019b2:	4b1d      	ldr	r3, [pc, #116]	; (8001a28 <MX_GPIO_Init+0x98>)
 80019b4:	695b      	ldr	r3, [r3, #20]
 80019b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ba:	60bb      	str	r3, [r7, #8]
 80019bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019be:	4b1a      	ldr	r3, [pc, #104]	; (8001a28 <MX_GPIO_Init+0x98>)
 80019c0:	695b      	ldr	r3, [r3, #20]
 80019c2:	4a19      	ldr	r2, [pc, #100]	; (8001a28 <MX_GPIO_Init+0x98>)
 80019c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019c8:	6153      	str	r3, [r2, #20]
 80019ca:	4b17      	ldr	r3, [pc, #92]	; (8001a28 <MX_GPIO_Init+0x98>)
 80019cc:	695b      	ldr	r3, [r3, #20]
 80019ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019d2:	607b      	str	r3, [r7, #4]
 80019d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RIGHT_DM_PHASE_Pin|LEFT_DM_PHASE_Pin, GPIO_PIN_RESET);
 80019d6:	2200      	movs	r2, #0
 80019d8:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80019dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019e0:	f001 fcfa 	bl	80033d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RIGHT_DM_PHASE_Pin LEFT_DM_PHASE_Pin */
  GPIO_InitStruct.Pin = RIGHT_DM_PHASE_Pin|LEFT_DM_PHASE_Pin;
 80019e4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80019e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ea:	2301      	movs	r3, #1
 80019ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ee:	2300      	movs	r3, #0
 80019f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f2:	2300      	movs	r3, #0
 80019f4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f6:	f107 030c 	add.w	r3, r7, #12
 80019fa:	4619      	mov	r1, r3
 80019fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a00:	f001 fb60 	bl	80030c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : POWER_BTN_Pin */
  GPIO_InitStruct.Pin = POWER_BTN_Pin;
 8001a04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a08:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a0e:	2302      	movs	r3, #2
 8001a10:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(POWER_BTN_GPIO_Port, &GPIO_InitStruct);
 8001a12:	f107 030c 	add.w	r3, r7, #12
 8001a16:	4619      	mov	r1, r3
 8001a18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a1c:	f001 fb52 	bl	80030c4 <HAL_GPIO_Init>

}
 8001a20:	bf00      	nop
 8001a22:	3720      	adds	r7, #32
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	40021000 	.word	0x40021000

08001a2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a30:	b672      	cpsid	i
}
 8001a32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a34:	e7fe      	b.n	8001a34 <Error_Handler+0x8>
	...

08001a38 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a3e:	4b0f      	ldr	r3, [pc, #60]	; (8001a7c <HAL_MspInit+0x44>)
 8001a40:	699b      	ldr	r3, [r3, #24]
 8001a42:	4a0e      	ldr	r2, [pc, #56]	; (8001a7c <HAL_MspInit+0x44>)
 8001a44:	f043 0301 	orr.w	r3, r3, #1
 8001a48:	6193      	str	r3, [r2, #24]
 8001a4a:	4b0c      	ldr	r3, [pc, #48]	; (8001a7c <HAL_MspInit+0x44>)
 8001a4c:	699b      	ldr	r3, [r3, #24]
 8001a4e:	f003 0301 	and.w	r3, r3, #1
 8001a52:	607b      	str	r3, [r7, #4]
 8001a54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a56:	4b09      	ldr	r3, [pc, #36]	; (8001a7c <HAL_MspInit+0x44>)
 8001a58:	69db      	ldr	r3, [r3, #28]
 8001a5a:	4a08      	ldr	r2, [pc, #32]	; (8001a7c <HAL_MspInit+0x44>)
 8001a5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a60:	61d3      	str	r3, [r2, #28]
 8001a62:	4b06      	ldr	r3, [pc, #24]	; (8001a7c <HAL_MspInit+0x44>)
 8001a64:	69db      	ldr	r3, [r3, #28]
 8001a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a6a:	603b      	str	r3, [r7, #0]
 8001a6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a6e:	bf00      	nop
 8001a70:	370c      	adds	r7, #12
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	40021000 	.word	0x40021000

08001a80 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b08a      	sub	sp, #40	; 0x28
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a88:	f107 0314 	add.w	r3, r7, #20
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]
 8001a90:	605a      	str	r2, [r3, #4]
 8001a92:	609a      	str	r2, [r3, #8]
 8001a94:	60da      	str	r2, [r3, #12]
 8001a96:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001aa0:	d124      	bne.n	8001aec <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001aa2:	4b14      	ldr	r3, [pc, #80]	; (8001af4 <HAL_ADC_MspInit+0x74>)
 8001aa4:	695b      	ldr	r3, [r3, #20]
 8001aa6:	4a13      	ldr	r2, [pc, #76]	; (8001af4 <HAL_ADC_MspInit+0x74>)
 8001aa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aac:	6153      	str	r3, [r2, #20]
 8001aae:	4b11      	ldr	r3, [pc, #68]	; (8001af4 <HAL_ADC_MspInit+0x74>)
 8001ab0:	695b      	ldr	r3, [r3, #20]
 8001ab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ab6:	613b      	str	r3, [r7, #16]
 8001ab8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aba:	4b0e      	ldr	r3, [pc, #56]	; (8001af4 <HAL_ADC_MspInit+0x74>)
 8001abc:	695b      	ldr	r3, [r3, #20]
 8001abe:	4a0d      	ldr	r2, [pc, #52]	; (8001af4 <HAL_ADC_MspInit+0x74>)
 8001ac0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ac4:	6153      	str	r3, [r2, #20]
 8001ac6:	4b0b      	ldr	r3, [pc, #44]	; (8001af4 <HAL_ADC_MspInit+0x74>)
 8001ac8:	695b      	ldr	r3, [r3, #20]
 8001aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ace:	60fb      	str	r3, [r7, #12]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = IR_LEFT_Pin|IR_CENTER_Pin|IR_RIGHT_Pin;
 8001ad2:	230b      	movs	r3, #11
 8001ad4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ada:	2300      	movs	r3, #0
 8001adc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ade:	f107 0314 	add.w	r3, r7, #20
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ae8:	f001 faec 	bl	80030c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001aec:	bf00      	nop
 8001aee:	3728      	adds	r7, #40	; 0x28
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	40021000 	.word	0x40021000

08001af8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b085      	sub	sp, #20
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a13      	ldr	r2, [pc, #76]	; (8001b54 <HAL_TIM_Base_MspInit+0x5c>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d10c      	bne.n	8001b24 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b0a:	4b13      	ldr	r3, [pc, #76]	; (8001b58 <HAL_TIM_Base_MspInit+0x60>)
 8001b0c:	699b      	ldr	r3, [r3, #24]
 8001b0e:	4a12      	ldr	r2, [pc, #72]	; (8001b58 <HAL_TIM_Base_MspInit+0x60>)
 8001b10:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b14:	6193      	str	r3, [r2, #24]
 8001b16:	4b10      	ldr	r3, [pc, #64]	; (8001b58 <HAL_TIM_Base_MspInit+0x60>)
 8001b18:	699b      	ldr	r3, [r3, #24]
 8001b1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b1e:	60fb      	str	r3, [r7, #12]
 8001b20:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001b22:	e010      	b.n	8001b46 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM17)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a0c      	ldr	r2, [pc, #48]	; (8001b5c <HAL_TIM_Base_MspInit+0x64>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d10b      	bne.n	8001b46 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001b2e:	4b0a      	ldr	r3, [pc, #40]	; (8001b58 <HAL_TIM_Base_MspInit+0x60>)
 8001b30:	699b      	ldr	r3, [r3, #24]
 8001b32:	4a09      	ldr	r2, [pc, #36]	; (8001b58 <HAL_TIM_Base_MspInit+0x60>)
 8001b34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b38:	6193      	str	r3, [r2, #24]
 8001b3a:	4b07      	ldr	r3, [pc, #28]	; (8001b58 <HAL_TIM_Base_MspInit+0x60>)
 8001b3c:	699b      	ldr	r3, [r3, #24]
 8001b3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b42:	60bb      	str	r3, [r7, #8]
 8001b44:	68bb      	ldr	r3, [r7, #8]
}
 8001b46:	bf00      	nop
 8001b48:	3714      	adds	r7, #20
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	40012c00 	.word	0x40012c00
 8001b58:	40021000 	.word	0x40021000
 8001b5c:	40014800 	.word	0x40014800

08001b60 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b08a      	sub	sp, #40	; 0x28
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b68:	f107 0314 	add.w	r3, r7, #20
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	601a      	str	r2, [r3, #0]
 8001b70:	605a      	str	r2, [r3, #4]
 8001b72:	609a      	str	r2, [r3, #8]
 8001b74:	60da      	str	r2, [r3, #12]
 8001b76:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a23      	ldr	r2, [pc, #140]	; (8001c0c <HAL_TIM_MspPostInit+0xac>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d11e      	bne.n	8001bc0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b82:	4b23      	ldr	r3, [pc, #140]	; (8001c10 <HAL_TIM_MspPostInit+0xb0>)
 8001b84:	695b      	ldr	r3, [r3, #20]
 8001b86:	4a22      	ldr	r2, [pc, #136]	; (8001c10 <HAL_TIM_MspPostInit+0xb0>)
 8001b88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b8c:	6153      	str	r3, [r2, #20]
 8001b8e:	4b20      	ldr	r3, [pc, #128]	; (8001c10 <HAL_TIM_MspPostInit+0xb0>)
 8001b90:	695b      	ldr	r3, [r3, #20]
 8001b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b96:	613b      	str	r3, [r7, #16]
 8001b98:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = RIGHT_DM_ENBL_Pin|LEFT_DM_ENBL_Pin;
 8001b9a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001bac:	2306      	movs	r3, #6
 8001bae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bb0:	f107 0314 	add.w	r3, r7, #20
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bba:	f001 fa83 	bl	80030c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8001bbe:	e020      	b.n	8001c02 <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM17)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a13      	ldr	r2, [pc, #76]	; (8001c14 <HAL_TIM_MspPostInit+0xb4>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d11b      	bne.n	8001c02 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bca:	4b11      	ldr	r3, [pc, #68]	; (8001c10 <HAL_TIM_MspPostInit+0xb0>)
 8001bcc:	695b      	ldr	r3, [r3, #20]
 8001bce:	4a10      	ldr	r2, [pc, #64]	; (8001c10 <HAL_TIM_MspPostInit+0xb0>)
 8001bd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bd4:	6153      	str	r3, [r2, #20]
 8001bd6:	4b0e      	ldr	r3, [pc, #56]	; (8001c10 <HAL_TIM_MspPostInit+0xb0>)
 8001bd8:	695b      	ldr	r3, [r3, #20]
 8001bda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bde:	60fb      	str	r3, [r7, #12]
 8001be0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SERVO_MOTOR_Pin;
 8001be2:	2320      	movs	r3, #32
 8001be4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be6:	2302      	movs	r3, #2
 8001be8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bea:	2300      	movs	r3, #0
 8001bec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM17;
 8001bf2:	230a      	movs	r3, #10
 8001bf4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SERVO_MOTOR_GPIO_Port, &GPIO_InitStruct);
 8001bf6:	f107 0314 	add.w	r3, r7, #20
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	4806      	ldr	r0, [pc, #24]	; (8001c18 <HAL_TIM_MspPostInit+0xb8>)
 8001bfe:	f001 fa61 	bl	80030c4 <HAL_GPIO_Init>
}
 8001c02:	bf00      	nop
 8001c04:	3728      	adds	r7, #40	; 0x28
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	40012c00 	.word	0x40012c00
 8001c10:	40021000 	.word	0x40021000
 8001c14:	40014800 	.word	0x40014800
 8001c18:	48000400 	.word	0x48000400

08001c1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b08a      	sub	sp, #40	; 0x28
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c24:	f107 0314 	add.w	r3, r7, #20
 8001c28:	2200      	movs	r2, #0
 8001c2a:	601a      	str	r2, [r3, #0]
 8001c2c:	605a      	str	r2, [r3, #4]
 8001c2e:	609a      	str	r2, [r3, #8]
 8001c30:	60da      	str	r2, [r3, #12]
 8001c32:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a18      	ldr	r2, [pc, #96]	; (8001c9c <HAL_UART_MspInit+0x80>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d129      	bne.n	8001c92 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c3e:	4b18      	ldr	r3, [pc, #96]	; (8001ca0 <HAL_UART_MspInit+0x84>)
 8001c40:	69db      	ldr	r3, [r3, #28]
 8001c42:	4a17      	ldr	r2, [pc, #92]	; (8001ca0 <HAL_UART_MspInit+0x84>)
 8001c44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c48:	61d3      	str	r3, [r2, #28]
 8001c4a:	4b15      	ldr	r3, [pc, #84]	; (8001ca0 <HAL_UART_MspInit+0x84>)
 8001c4c:	69db      	ldr	r3, [r3, #28]
 8001c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c52:	613b      	str	r3, [r7, #16]
 8001c54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c56:	4b12      	ldr	r3, [pc, #72]	; (8001ca0 <HAL_UART_MspInit+0x84>)
 8001c58:	695b      	ldr	r3, [r3, #20]
 8001c5a:	4a11      	ldr	r2, [pc, #68]	; (8001ca0 <HAL_UART_MspInit+0x84>)
 8001c5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c60:	6153      	str	r3, [r2, #20]
 8001c62:	4b0f      	ldr	r3, [pc, #60]	; (8001ca0 <HAL_UART_MspInit+0x84>)
 8001c64:	695b      	ldr	r3, [r3, #20]
 8001c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c6a:	60fb      	str	r3, [r7, #12]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8001c6e:	f248 0304 	movw	r3, #32772	; 0x8004
 8001c72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c74:	2302      	movs	r3, #2
 8001c76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c80:	2307      	movs	r3, #7
 8001c82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c84:	f107 0314 	add.w	r3, r7, #20
 8001c88:	4619      	mov	r1, r3
 8001c8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c8e:	f001 fa19 	bl	80030c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c92:	bf00      	nop
 8001c94:	3728      	adds	r7, #40	; 0x28
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	40004400 	.word	0x40004400
 8001ca0:	40021000 	.word	0x40021000

08001ca4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ca8:	e7fe      	b.n	8001ca8 <NMI_Handler+0x4>

08001caa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001caa:	b480      	push	{r7}
 8001cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cae:	e7fe      	b.n	8001cae <HardFault_Handler+0x4>

08001cb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cb4:	e7fe      	b.n	8001cb4 <MemManage_Handler+0x4>

08001cb6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cba:	e7fe      	b.n	8001cba <BusFault_Handler+0x4>

08001cbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cc0:	e7fe      	b.n	8001cc0 <UsageFault_Handler+0x4>

08001cc2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cc6:	bf00      	nop
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr

08001cd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cd4:	bf00      	nop
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr

08001cde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ce2:	bf00      	nop
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cf0:	f000 f94a 	bl	8001f88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cf4:	bf00      	nop
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
	return 1;
 8001cfc:	2301      	movs	r3, #1
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <_kill>:

int _kill(int pid, int sig)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001d12:	f004 fae3 	bl	80062dc <__errno>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2216      	movs	r2, #22
 8001d1a:	601a      	str	r2, [r3, #0]
	return -1;
 8001d1c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3708      	adds	r7, #8
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <_exit>:

void _exit (int status)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001d30:	f04f 31ff 	mov.w	r1, #4294967295
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f7ff ffe7 	bl	8001d08 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001d3a:	e7fe      	b.n	8001d3a <_exit+0x12>

08001d3c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b086      	sub	sp, #24
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	60f8      	str	r0, [r7, #12]
 8001d44:	60b9      	str	r1, [r7, #8]
 8001d46:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d48:	2300      	movs	r3, #0
 8001d4a:	617b      	str	r3, [r7, #20]
 8001d4c:	e00a      	b.n	8001d64 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001d4e:	f3af 8000 	nop.w
 8001d52:	4601      	mov	r1, r0
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	1c5a      	adds	r2, r3, #1
 8001d58:	60ba      	str	r2, [r7, #8]
 8001d5a:	b2ca      	uxtb	r2, r1
 8001d5c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	3301      	adds	r3, #1
 8001d62:	617b      	str	r3, [r7, #20]
 8001d64:	697a      	ldr	r2, [r7, #20]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	dbf0      	blt.n	8001d4e <_read+0x12>
	}

return len;
 8001d6c:	687b      	ldr	r3, [r7, #4]
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3718      	adds	r7, #24
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}

08001d76 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d76:	b580      	push	{r7, lr}
 8001d78:	b086      	sub	sp, #24
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	60f8      	str	r0, [r7, #12]
 8001d7e:	60b9      	str	r1, [r7, #8]
 8001d80:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d82:	2300      	movs	r3, #0
 8001d84:	617b      	str	r3, [r7, #20]
 8001d86:	e009      	b.n	8001d9c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	1c5a      	adds	r2, r3, #1
 8001d8c:	60ba      	str	r2, [r7, #8]
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	4618      	mov	r0, r3
 8001d92:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	3301      	adds	r3, #1
 8001d9a:	617b      	str	r3, [r7, #20]
 8001d9c:	697a      	ldr	r2, [r7, #20]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	429a      	cmp	r2, r3
 8001da2:	dbf1      	blt.n	8001d88 <_write+0x12>
	}
	return len;
 8001da4:	687b      	ldr	r3, [r7, #4]
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3718      	adds	r7, #24
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}

08001dae <_close>:

int _close(int file)
{
 8001dae:	b480      	push	{r7}
 8001db0:	b083      	sub	sp, #12
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]
	return -1;
 8001db6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	370c      	adds	r7, #12
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr

08001dc6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001dc6:	b480      	push	{r7}
 8001dc8:	b083      	sub	sp, #12
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
 8001dce:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001dd6:	605a      	str	r2, [r3, #4]
	return 0;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	370c      	adds	r7, #12
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr

08001de6 <_isatty>:

int _isatty(int file)
{
 8001de6:	b480      	push	{r7}
 8001de8:	b083      	sub	sp, #12
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]
	return 1;
 8001dee:	2301      	movs	r3, #1
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b085      	sub	sp, #20
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	60b9      	str	r1, [r7, #8]
 8001e06:	607a      	str	r2, [r7, #4]
	return 0;
 8001e08:	2300      	movs	r3, #0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3714      	adds	r7, #20
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
	...

08001e18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b086      	sub	sp, #24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e20:	4a14      	ldr	r2, [pc, #80]	; (8001e74 <_sbrk+0x5c>)
 8001e22:	4b15      	ldr	r3, [pc, #84]	; (8001e78 <_sbrk+0x60>)
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e2c:	4b13      	ldr	r3, [pc, #76]	; (8001e7c <_sbrk+0x64>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d102      	bne.n	8001e3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e34:	4b11      	ldr	r3, [pc, #68]	; (8001e7c <_sbrk+0x64>)
 8001e36:	4a12      	ldr	r2, [pc, #72]	; (8001e80 <_sbrk+0x68>)
 8001e38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e3a:	4b10      	ldr	r3, [pc, #64]	; (8001e7c <_sbrk+0x64>)
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4413      	add	r3, r2
 8001e42:	693a      	ldr	r2, [r7, #16]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d207      	bcs.n	8001e58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e48:	f004 fa48 	bl	80062dc <__errno>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	220c      	movs	r2, #12
 8001e50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e52:	f04f 33ff 	mov.w	r3, #4294967295
 8001e56:	e009      	b.n	8001e6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e58:	4b08      	ldr	r3, [pc, #32]	; (8001e7c <_sbrk+0x64>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e5e:	4b07      	ldr	r3, [pc, #28]	; (8001e7c <_sbrk+0x64>)
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4413      	add	r3, r2
 8001e66:	4a05      	ldr	r2, [pc, #20]	; (8001e7c <_sbrk+0x64>)
 8001e68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3718      	adds	r7, #24
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	20003000 	.word	0x20003000
 8001e78:	00000400 	.word	0x00000400
 8001e7c:	20000378 	.word	0x20000378
 8001e80:	20000390 	.word	0x20000390

08001e84 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e88:	4b06      	ldr	r3, [pc, #24]	; (8001ea4 <SystemInit+0x20>)
 8001e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e8e:	4a05      	ldr	r2, [pc, #20]	; (8001ea4 <SystemInit+0x20>)
 8001e90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e98:	bf00      	nop
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	e000ed00 	.word	0xe000ed00

08001ea8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001ea8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ee0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001eac:	480d      	ldr	r0, [pc, #52]	; (8001ee4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001eae:	490e      	ldr	r1, [pc, #56]	; (8001ee8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001eb0:	4a0e      	ldr	r2, [pc, #56]	; (8001eec <LoopForever+0xe>)
  movs r3, #0
 8001eb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001eb4:	e002      	b.n	8001ebc <LoopCopyDataInit>

08001eb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001eb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eba:	3304      	adds	r3, #4

08001ebc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ebc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ebe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ec0:	d3f9      	bcc.n	8001eb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ec2:	4a0b      	ldr	r2, [pc, #44]	; (8001ef0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ec4:	4c0b      	ldr	r4, [pc, #44]	; (8001ef4 <LoopForever+0x16>)
  movs r3, #0
 8001ec6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ec8:	e001      	b.n	8001ece <LoopFillZerobss>

08001eca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ecc:	3204      	adds	r2, #4

08001ece <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ece:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ed0:	d3fb      	bcc.n	8001eca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001ed2:	f7ff ffd7 	bl	8001e84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ed6:	f004 fa07 	bl	80062e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001eda:	f7ff fa33 	bl	8001344 <main>

08001ede <LoopForever>:

LoopForever:
    b LoopForever
 8001ede:	e7fe      	b.n	8001ede <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001ee0:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001ee4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ee8:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001eec:	0800b8e4 	.word	0x0800b8e4
  ldr r2, =_sbss
 8001ef0:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001ef4:	20000390 	.word	0x20000390

08001ef8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ef8:	e7fe      	b.n	8001ef8 <ADC1_2_IRQHandler>
	...

08001efc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f00:	4b08      	ldr	r3, [pc, #32]	; (8001f24 <HAL_Init+0x28>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a07      	ldr	r2, [pc, #28]	; (8001f24 <HAL_Init+0x28>)
 8001f06:	f043 0310 	orr.w	r3, r3, #16
 8001f0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f0c:	2003      	movs	r0, #3
 8001f0e:	f001 f8a5 	bl	800305c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f12:	2000      	movs	r0, #0
 8001f14:	f000 f808 	bl	8001f28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f18:	f7ff fd8e 	bl	8001a38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f1c:	2300      	movs	r3, #0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	40022000 	.word	0x40022000

08001f28 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f30:	4b12      	ldr	r3, [pc, #72]	; (8001f7c <HAL_InitTick+0x54>)
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	4b12      	ldr	r3, [pc, #72]	; (8001f80 <HAL_InitTick+0x58>)
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	4619      	mov	r1, r3
 8001f3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f46:	4618      	mov	r0, r3
 8001f48:	f001 f8af 	bl	80030aa <HAL_SYSTICK_Config>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e00e      	b.n	8001f74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2b0f      	cmp	r3, #15
 8001f5a:	d80a      	bhi.n	8001f72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	6879      	ldr	r1, [r7, #4]
 8001f60:	f04f 30ff 	mov.w	r0, #4294967295
 8001f64:	f001 f885 	bl	8003072 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f68:	4a06      	ldr	r2, [pc, #24]	; (8001f84 <HAL_InitTick+0x5c>)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	e000      	b.n	8001f74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3708      	adds	r7, #8
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	20000000 	.word	0x20000000
 8001f80:	20000008 	.word	0x20000008
 8001f84:	20000004 	.word	0x20000004

08001f88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f8c:	4b06      	ldr	r3, [pc, #24]	; (8001fa8 <HAL_IncTick+0x20>)
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	461a      	mov	r2, r3
 8001f92:	4b06      	ldr	r3, [pc, #24]	; (8001fac <HAL_IncTick+0x24>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4413      	add	r3, r2
 8001f98:	4a04      	ldr	r2, [pc, #16]	; (8001fac <HAL_IncTick+0x24>)
 8001f9a:	6013      	str	r3, [r2, #0]
}
 8001f9c:	bf00      	nop
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	20000008 	.word	0x20000008
 8001fac:	2000037c 	.word	0x2000037c

08001fb0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  return uwTick;  
 8001fb4:	4b03      	ldr	r3, [pc, #12]	; (8001fc4 <HAL_GetTick+0x14>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	2000037c 	.word	0x2000037c

08001fc8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b084      	sub	sp, #16
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fd0:	f7ff ffee 	bl	8001fb0 <HAL_GetTick>
 8001fd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fe0:	d005      	beq.n	8001fee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fe2:	4b0a      	ldr	r3, [pc, #40]	; (800200c <HAL_Delay+0x44>)
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	4413      	add	r3, r2
 8001fec:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001fee:	bf00      	nop
 8001ff0:	f7ff ffde 	bl	8001fb0 <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	68fa      	ldr	r2, [r7, #12]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d8f7      	bhi.n	8001ff0 <HAL_Delay+0x28>
  {
  }
}
 8002000:	bf00      	nop
 8002002:	bf00      	nop
 8002004:	3710      	adds	r7, #16
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	20000008 	.word	0x20000008

08002010 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b09a      	sub	sp, #104	; 0x68
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002018:	2300      	movs	r3, #0
 800201a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800201e:	2300      	movs	r3, #0
 8002020:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8002022:	2300      	movs	r3, #0
 8002024:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d101      	bne.n	8002030 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e172      	b.n	8002316 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	691b      	ldr	r3, [r3, #16]
 8002034:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203a:	f003 0310 	and.w	r3, r3, #16
 800203e:	2b00      	cmp	r3, #0
 8002040:	d176      	bne.n	8002130 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002046:	2b00      	cmp	r3, #0
 8002048:	d152      	bne.n	80020f0 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2200      	movs	r2, #0
 800205a:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2200      	movs	r2, #0
 8002060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f7ff fd0b 	bl	8001a80 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002074:	2b00      	cmp	r3, #0
 8002076:	d13b      	bne.n	80020f0 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f000 fed7 	bl	8002e2c <ADC_Disable>
 800207e:	4603      	mov	r3, r0
 8002080:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002088:	f003 0310 	and.w	r3, r3, #16
 800208c:	2b00      	cmp	r3, #0
 800208e:	d12f      	bne.n	80020f0 <HAL_ADC_Init+0xe0>
 8002090:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002094:	2b00      	cmp	r3, #0
 8002096:	d12b      	bne.n	80020f0 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80020a0:	f023 0302 	bic.w	r3, r3, #2
 80020a4:	f043 0202 	orr.w	r2, r3, #2
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	689a      	ldr	r2, [r3, #8]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80020ba:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	689a      	ldr	r2, [r3, #8]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80020ca:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80020cc:	4b94      	ldr	r3, [pc, #592]	; (8002320 <HAL_ADC_Init+0x310>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a94      	ldr	r2, [pc, #592]	; (8002324 <HAL_ADC_Init+0x314>)
 80020d2:	fba2 2303 	umull	r2, r3, r2, r3
 80020d6:	0c9a      	lsrs	r2, r3, #18
 80020d8:	4613      	mov	r3, r2
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	4413      	add	r3, r2
 80020de:	005b      	lsls	r3, r3, #1
 80020e0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80020e2:	e002      	b.n	80020ea <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	3b01      	subs	r3, #1
 80020e8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d1f9      	bne.n	80020e4 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d007      	beq.n	800210e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002108:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800210c:	d110      	bne.n	8002130 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002112:	f023 0312 	bic.w	r3, r3, #18
 8002116:	f043 0210 	orr.w	r2, r3, #16
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002122:	f043 0201 	orr.w	r2, r3, #1
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002134:	f003 0310 	and.w	r3, r3, #16
 8002138:	2b00      	cmp	r3, #0
 800213a:	f040 80df 	bne.w	80022fc <HAL_ADC_Init+0x2ec>
 800213e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002142:	2b00      	cmp	r3, #0
 8002144:	f040 80da 	bne.w	80022fc <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8002152:	2b00      	cmp	r3, #0
 8002154:	f040 80d2 	bne.w	80022fc <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002160:	f043 0202 	orr.w	r2, r3, #2
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002168:	4b6f      	ldr	r3, [pc, #444]	; (8002328 <HAL_ADC_Init+0x318>)
 800216a:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002174:	d102      	bne.n	800217c <HAL_ADC_Init+0x16c>
 8002176:	4b6d      	ldr	r3, [pc, #436]	; (800232c <HAL_ADC_Init+0x31c>)
 8002178:	60fb      	str	r3, [r7, #12]
 800217a:	e002      	b.n	8002182 <HAL_ADC_Init+0x172>
 800217c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002180:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	f003 0303 	and.w	r3, r3, #3
 800218c:	2b01      	cmp	r3, #1
 800218e:	d108      	bne.n	80021a2 <HAL_ADC_Init+0x192>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0301 	and.w	r3, r3, #1
 800219a:	2b01      	cmp	r3, #1
 800219c:	d101      	bne.n	80021a2 <HAL_ADC_Init+0x192>
 800219e:	2301      	movs	r3, #1
 80021a0:	e000      	b.n	80021a4 <HAL_ADC_Init+0x194>
 80021a2:	2300      	movs	r3, #0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d11c      	bne.n	80021e2 <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80021a8:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d010      	beq.n	80021d0 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	f003 0303 	and.w	r3, r3, #3
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d107      	bne.n	80021ca <HAL_ADC_Init+0x1ba>
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0301 	and.w	r3, r3, #1
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d101      	bne.n	80021ca <HAL_ADC_Init+0x1ba>
 80021c6:	2301      	movs	r3, #1
 80021c8:	e000      	b.n	80021cc <HAL_ADC_Init+0x1bc>
 80021ca:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d108      	bne.n	80021e2 <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80021d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	431a      	orrs	r2, r3
 80021de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021e0:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	7e5b      	ldrb	r3, [r3, #25]
 80021e6:	035b      	lsls	r3, r3, #13
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80021ec:	2a01      	cmp	r2, #1
 80021ee:	d002      	beq.n	80021f6 <HAL_ADC_Init+0x1e6>
 80021f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80021f4:	e000      	b.n	80021f8 <HAL_ADC_Init+0x1e8>
 80021f6:	2200      	movs	r2, #0
 80021f8:	431a      	orrs	r2, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	68db      	ldr	r3, [r3, #12]
 80021fe:	431a      	orrs	r2, r3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	4313      	orrs	r3, r2
 8002206:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002208:	4313      	orrs	r3, r2
 800220a:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002212:	2b01      	cmp	r3, #1
 8002214:	d11b      	bne.n	800224e <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	7e5b      	ldrb	r3, [r3, #25]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d109      	bne.n	8002232 <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002222:	3b01      	subs	r3, #1
 8002224:	045a      	lsls	r2, r3, #17
 8002226:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002228:	4313      	orrs	r3, r2
 800222a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800222e:	663b      	str	r3, [r7, #96]	; 0x60
 8002230:	e00d      	b.n	800224e <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002236:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800223a:	f043 0220 	orr.w	r2, r3, #32
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002246:	f043 0201 	orr.w	r2, r3, #1
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002252:	2b01      	cmp	r3, #1
 8002254:	d007      	beq.n	8002266 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800225e:	4313      	orrs	r3, r2
 8002260:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002262:	4313      	orrs	r3, r2
 8002264:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	f003 030c 	and.w	r3, r3, #12
 8002270:	2b00      	cmp	r3, #0
 8002272:	d114      	bne.n	800229e <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	68db      	ldr	r3, [r3, #12]
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	6812      	ldr	r2, [r2, #0]
 800227e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002282:	f023 0302 	bic.w	r3, r3, #2
 8002286:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	7e1b      	ldrb	r3, [r3, #24]
 800228c:	039a      	lsls	r2, r3, #14
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002294:	005b      	lsls	r3, r3, #1
 8002296:	4313      	orrs	r3, r2
 8002298:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800229a:	4313      	orrs	r3, r2
 800229c:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	68da      	ldr	r2, [r3, #12]
 80022a4:	4b22      	ldr	r3, [pc, #136]	; (8002330 <HAL_ADC_Init+0x320>)
 80022a6:	4013      	ands	r3, r2
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	6812      	ldr	r2, [r2, #0]
 80022ac:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80022ae:	430b      	orrs	r3, r1
 80022b0:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	691b      	ldr	r3, [r3, #16]
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d10c      	bne.n	80022d4 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c0:	f023 010f 	bic.w	r1, r3, #15
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	69db      	ldr	r3, [r3, #28]
 80022c8:	1e5a      	subs	r2, r3, #1
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	430a      	orrs	r2, r1
 80022d0:	631a      	str	r2, [r3, #48]	; 0x30
 80022d2:	e007      	b.n	80022e4 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f022 020f 	bic.w	r2, r2, #15
 80022e2:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2200      	movs	r2, #0
 80022e8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ee:	f023 0303 	bic.w	r3, r3, #3
 80022f2:	f043 0201 	orr.w	r2, r3, #1
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	641a      	str	r2, [r3, #64]	; 0x40
 80022fa:	e00a      	b.n	8002312 <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002300:	f023 0312 	bic.w	r3, r3, #18
 8002304:	f043 0210 	orr.w	r2, r3, #16
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800230c:	2301      	movs	r3, #1
 800230e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8002312:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002316:	4618      	mov	r0, r3
 8002318:	3768      	adds	r7, #104	; 0x68
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	20000000 	.word	0x20000000
 8002324:	431bde83 	.word	0x431bde83
 8002328:	50000300 	.word	0x50000300
 800232c:	50000100 	.word	0x50000100
 8002330:	fff0c007 	.word	0xfff0c007

08002334 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800233c:	2300      	movs	r3, #0
 800233e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	f003 0304 	and.w	r3, r3, #4
 800234a:	2b00      	cmp	r3, #0
 800234c:	f040 809c 	bne.w	8002488 <HAL_ADC_Start+0x154>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002356:	2b01      	cmp	r3, #1
 8002358:	d101      	bne.n	800235e <HAL_ADC_Start+0x2a>
 800235a:	2302      	movs	r3, #2
 800235c:	e097      	b.n	800248e <HAL_ADC_Start+0x15a>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2201      	movs	r2, #1
 8002362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f000 fcfc 	bl	8002d64 <ADC_Enable>
 800236c:	4603      	mov	r3, r0
 800236e:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002370:	7bfb      	ldrb	r3, [r7, #15]
 8002372:	2b00      	cmp	r3, #0
 8002374:	f040 8083 	bne.w	800247e <HAL_ADC_Start+0x14a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002380:	f023 0301 	bic.w	r3, r3, #1
 8002384:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800238c:	4b42      	ldr	r3, [pc, #264]	; (8002498 <HAL_ADC_Start+0x164>)
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	f003 031f 	and.w	r3, r3, #31
 8002394:	2b00      	cmp	r3, #0
 8002396:	d004      	beq.n	80023a2 <HAL_ADC_Start+0x6e>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023a0:	d115      	bne.n	80023ce <HAL_ADC_Start+0x9a>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d027      	beq.n	800240c <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80023c4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80023cc:	e01e      	b.n	800240c <HAL_ADC_Start+0xd8>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023e2:	d004      	beq.n	80023ee <HAL_ADC_Start+0xba>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a2c      	ldr	r2, [pc, #176]	; (800249c <HAL_ADC_Start+0x168>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d10e      	bne.n	800240c <HAL_ADC_Start+0xd8>
 80023ee:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d007      	beq.n	800240c <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002400:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002404:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002410:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002414:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002418:	d106      	bne.n	8002428 <HAL_ADC_Start+0xf4>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800241e:	f023 0206 	bic.w	r2, r3, #6
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	645a      	str	r2, [r3, #68]	; 0x44
 8002426:	e002      	b.n	800242e <HAL_ADC_Start+0xfa>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2200      	movs	r2, #0
 800242c:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	221c      	movs	r2, #28
 800243c:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800243e:	4b16      	ldr	r3, [pc, #88]	; (8002498 <HAL_ADC_Start+0x164>)
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	f003 031f 	and.w	r3, r3, #31
 8002446:	2b00      	cmp	r3, #0
 8002448:	d010      	beq.n	800246c <HAL_ADC_Start+0x138>
 800244a:	4b13      	ldr	r3, [pc, #76]	; (8002498 <HAL_ADC_Start+0x164>)
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	f003 031f 	and.w	r3, r3, #31
 8002452:	2b05      	cmp	r3, #5
 8002454:	d00a      	beq.n	800246c <HAL_ADC_Start+0x138>
 8002456:	4b10      	ldr	r3, [pc, #64]	; (8002498 <HAL_ADC_Start+0x164>)
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	f003 031f 	and.w	r3, r3, #31
 800245e:	2b09      	cmp	r3, #9
 8002460:	d004      	beq.n	800246c <HAL_ADC_Start+0x138>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800246a:	d10f      	bne.n	800248c <HAL_ADC_Start+0x158>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	689a      	ldr	r2, [r3, #8]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f042 0204 	orr.w	r2, r2, #4
 800247a:	609a      	str	r2, [r3, #8]
 800247c:	e006      	b.n	800248c <HAL_ADC_Start+0x158>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2200      	movs	r2, #0
 8002482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002486:	e001      	b.n	800248c <HAL_ADC_Start+0x158>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002488:	2302      	movs	r3, #2
 800248a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800248c:	7bfb      	ldrb	r3, [r7, #15]
}
 800248e:	4618      	mov	r0, r3
 8002490:	3710      	adds	r7, #16
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	50000300 	.word	0x50000300
 800249c:	50000100 	.word	0x50000100

080024a0 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b086      	sub	sp, #24
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 80024aa:	2300      	movs	r3, #0
 80024ac:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	695b      	ldr	r3, [r3, #20]
 80024b2:	2b08      	cmp	r3, #8
 80024b4:	d102      	bne.n	80024bc <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80024b6:	2308      	movs	r3, #8
 80024b8:	617b      	str	r3, [r7, #20]
 80024ba:	e02e      	b.n	800251a <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024bc:	4b5e      	ldr	r3, [pc, #376]	; (8002638 <HAL_ADC_PollForConversion+0x198>)
 80024be:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	f003 031f 	and.w	r3, r3, #31
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d112      	bne.n	80024f2 <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	f003 0301 	and.w	r3, r3, #1
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d11d      	bne.n	8002516 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024de:	f043 0220 	orr.w	r2, r3, #32
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2200      	movs	r2, #0
 80024ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e09d      	b.n	800262e <HAL_ADC_PollForConversion+0x18e>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d00b      	beq.n	8002516 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002502:	f043 0220 	orr.w	r2, r3, #32
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e08b      	b.n	800262e <HAL_ADC_PollForConversion+0x18e>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8002516:	230c      	movs	r3, #12
 8002518:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800251a:	4b47      	ldr	r3, [pc, #284]	; (8002638 <HAL_ADC_PollForConversion+0x198>)
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	f003 031f 	and.w	r3, r3, #31
 8002522:	2b00      	cmp	r3, #0
 8002524:	d004      	beq.n	8002530 <HAL_ADC_PollForConversion+0x90>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800252e:	d104      	bne.n	800253a <HAL_ADC_PollForConversion+0x9a>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	613b      	str	r3, [r7, #16]
 8002538:	e003      	b.n	8002542 <HAL_ADC_PollForConversion+0xa2>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800253a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8002542:	f7ff fd35 	bl	8001fb0 <HAL_GetTick>
 8002546:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002548:	e021      	b.n	800258e <HAL_ADC_PollForConversion+0xee>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002550:	d01d      	beq.n	800258e <HAL_ADC_PollForConversion+0xee>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d007      	beq.n	8002568 <HAL_ADC_PollForConversion+0xc8>
 8002558:	f7ff fd2a 	bl	8001fb0 <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	683a      	ldr	r2, [r7, #0]
 8002564:	429a      	cmp	r2, r3
 8002566:	d212      	bcs.n	800258e <HAL_ADC_PollForConversion+0xee>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	4013      	ands	r3, r2
 8002572:	2b00      	cmp	r3, #0
 8002574:	d10b      	bne.n	800258e <HAL_ADC_PollForConversion+0xee>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257a:	f043 0204 	orr.w	r2, r3, #4
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e04f      	b.n	800262e <HAL_ADC_PollForConversion+0x18e>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	4013      	ands	r3, r2
 8002598:	2b00      	cmp	r3, #0
 800259a:	d0d6      	beq.n	800254a <HAL_ADC_PollForConversion+0xaa>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d131      	bne.n	800261a <HAL_ADC_PollForConversion+0x17a>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d12c      	bne.n	800261a <HAL_ADC_PollForConversion+0x17a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0308 	and.w	r3, r3, #8
 80025ca:	2b08      	cmp	r3, #8
 80025cc:	d125      	bne.n	800261a <HAL_ADC_PollForConversion+0x17a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	f003 0304 	and.w	r3, r3, #4
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d112      	bne.n	8002602 <HAL_ADC_PollForConversion+0x162>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d112      	bne.n	800261a <HAL_ADC_PollForConversion+0x17a>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f8:	f043 0201 	orr.w	r2, r3, #1
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	641a      	str	r2, [r3, #64]	; 0x40
 8002600:	e00b      	b.n	800261a <HAL_ADC_PollForConversion+0x17a>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002606:	f043 0220 	orr.w	r2, r3, #32
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002612:	f043 0201 	orr.w	r2, r3, #1
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d103      	bne.n	800262c <HAL_ADC_PollForConversion+0x18c>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	697a      	ldr	r2, [r7, #20]
 800262a:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 800262c:	2300      	movs	r3, #0
}
 800262e:	4618      	mov	r0, r3
 8002630:	3718      	adds	r7, #24
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	50000300 	.word	0x50000300

0800263c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800264a:	4618      	mov	r0, r3
 800264c:	370c      	adds	r7, #12
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
	...

08002658 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002658:	b480      	push	{r7}
 800265a:	b09b      	sub	sp, #108	; 0x6c
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002662:	2300      	movs	r3, #0
 8002664:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002668:	2300      	movs	r3, #0
 800266a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002672:	2b01      	cmp	r3, #1
 8002674:	d101      	bne.n	800267a <HAL_ADC_ConfigChannel+0x22>
 8002676:	2302      	movs	r3, #2
 8002678:	e2a4      	b.n	8002bc4 <HAL_ADC_ConfigChannel+0x56c>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2201      	movs	r2, #1
 800267e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	f003 0304 	and.w	r3, r3, #4
 800268c:	2b00      	cmp	r3, #0
 800268e:	f040 8288 	bne.w	8002ba2 <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	2b04      	cmp	r3, #4
 8002698:	d81c      	bhi.n	80026d4 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	685a      	ldr	r2, [r3, #4]
 80026a4:	4613      	mov	r3, r2
 80026a6:	005b      	lsls	r3, r3, #1
 80026a8:	4413      	add	r3, r2
 80026aa:	005b      	lsls	r3, r3, #1
 80026ac:	461a      	mov	r2, r3
 80026ae:	231f      	movs	r3, #31
 80026b0:	4093      	lsls	r3, r2
 80026b2:	43db      	mvns	r3, r3
 80026b4:	4019      	ands	r1, r3
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	6818      	ldr	r0, [r3, #0]
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	685a      	ldr	r2, [r3, #4]
 80026be:	4613      	mov	r3, r2
 80026c0:	005b      	lsls	r3, r3, #1
 80026c2:	4413      	add	r3, r2
 80026c4:	005b      	lsls	r3, r3, #1
 80026c6:	fa00 f203 	lsl.w	r2, r0, r3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	430a      	orrs	r2, r1
 80026d0:	631a      	str	r2, [r3, #48]	; 0x30
 80026d2:	e063      	b.n	800279c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	2b09      	cmp	r3, #9
 80026da:	d81e      	bhi.n	800271a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	685a      	ldr	r2, [r3, #4]
 80026e6:	4613      	mov	r3, r2
 80026e8:	005b      	lsls	r3, r3, #1
 80026ea:	4413      	add	r3, r2
 80026ec:	005b      	lsls	r3, r3, #1
 80026ee:	3b1e      	subs	r3, #30
 80026f0:	221f      	movs	r2, #31
 80026f2:	fa02 f303 	lsl.w	r3, r2, r3
 80026f6:	43db      	mvns	r3, r3
 80026f8:	4019      	ands	r1, r3
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	6818      	ldr	r0, [r3, #0]
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	685a      	ldr	r2, [r3, #4]
 8002702:	4613      	mov	r3, r2
 8002704:	005b      	lsls	r3, r3, #1
 8002706:	4413      	add	r3, r2
 8002708:	005b      	lsls	r3, r3, #1
 800270a:	3b1e      	subs	r3, #30
 800270c:	fa00 f203 	lsl.w	r2, r0, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	430a      	orrs	r2, r1
 8002716:	635a      	str	r2, [r3, #52]	; 0x34
 8002718:	e040      	b.n	800279c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	2b0e      	cmp	r3, #14
 8002720:	d81e      	bhi.n	8002760 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	685a      	ldr	r2, [r3, #4]
 800272c:	4613      	mov	r3, r2
 800272e:	005b      	lsls	r3, r3, #1
 8002730:	4413      	add	r3, r2
 8002732:	005b      	lsls	r3, r3, #1
 8002734:	3b3c      	subs	r3, #60	; 0x3c
 8002736:	221f      	movs	r2, #31
 8002738:	fa02 f303 	lsl.w	r3, r2, r3
 800273c:	43db      	mvns	r3, r3
 800273e:	4019      	ands	r1, r3
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	6818      	ldr	r0, [r3, #0]
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	685a      	ldr	r2, [r3, #4]
 8002748:	4613      	mov	r3, r2
 800274a:	005b      	lsls	r3, r3, #1
 800274c:	4413      	add	r3, r2
 800274e:	005b      	lsls	r3, r3, #1
 8002750:	3b3c      	subs	r3, #60	; 0x3c
 8002752:	fa00 f203 	lsl.w	r2, r0, r3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	430a      	orrs	r2, r1
 800275c:	639a      	str	r2, [r3, #56]	; 0x38
 800275e:	e01d      	b.n	800279c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	685a      	ldr	r2, [r3, #4]
 800276a:	4613      	mov	r3, r2
 800276c:	005b      	lsls	r3, r3, #1
 800276e:	4413      	add	r3, r2
 8002770:	005b      	lsls	r3, r3, #1
 8002772:	3b5a      	subs	r3, #90	; 0x5a
 8002774:	221f      	movs	r2, #31
 8002776:	fa02 f303 	lsl.w	r3, r2, r3
 800277a:	43db      	mvns	r3, r3
 800277c:	4019      	ands	r1, r3
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	6818      	ldr	r0, [r3, #0]
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	685a      	ldr	r2, [r3, #4]
 8002786:	4613      	mov	r3, r2
 8002788:	005b      	lsls	r3, r3, #1
 800278a:	4413      	add	r3, r2
 800278c:	005b      	lsls	r3, r3, #1
 800278e:	3b5a      	subs	r3, #90	; 0x5a
 8002790:	fa00 f203 	lsl.w	r2, r0, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	430a      	orrs	r2, r1
 800279a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	f003 030c 	and.w	r3, r3, #12
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	f040 80e5 	bne.w	8002976 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2b09      	cmp	r3, #9
 80027b2:	d91c      	bls.n	80027ee <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	6999      	ldr	r1, [r3, #24]
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	4613      	mov	r3, r2
 80027c0:	005b      	lsls	r3, r3, #1
 80027c2:	4413      	add	r3, r2
 80027c4:	3b1e      	subs	r3, #30
 80027c6:	2207      	movs	r2, #7
 80027c8:	fa02 f303 	lsl.w	r3, r2, r3
 80027cc:	43db      	mvns	r3, r3
 80027ce:	4019      	ands	r1, r3
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	6898      	ldr	r0, [r3, #8]
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	4613      	mov	r3, r2
 80027da:	005b      	lsls	r3, r3, #1
 80027dc:	4413      	add	r3, r2
 80027de:	3b1e      	subs	r3, #30
 80027e0:	fa00 f203 	lsl.w	r2, r0, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	430a      	orrs	r2, r1
 80027ea:	619a      	str	r2, [r3, #24]
 80027ec:	e019      	b.n	8002822 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	6959      	ldr	r1, [r3, #20]
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	4613      	mov	r3, r2
 80027fa:	005b      	lsls	r3, r3, #1
 80027fc:	4413      	add	r3, r2
 80027fe:	2207      	movs	r2, #7
 8002800:	fa02 f303 	lsl.w	r3, r2, r3
 8002804:	43db      	mvns	r3, r3
 8002806:	4019      	ands	r1, r3
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	6898      	ldr	r0, [r3, #8]
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	4613      	mov	r3, r2
 8002812:	005b      	lsls	r3, r3, #1
 8002814:	4413      	add	r3, r2
 8002816:	fa00 f203 	lsl.w	r2, r0, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	430a      	orrs	r2, r1
 8002820:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	695a      	ldr	r2, [r3, #20]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	08db      	lsrs	r3, r3, #3
 800282e:	f003 0303 	and.w	r3, r3, #3
 8002832:	005b      	lsls	r3, r3, #1
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	691b      	ldr	r3, [r3, #16]
 800283e:	3b01      	subs	r3, #1
 8002840:	2b03      	cmp	r3, #3
 8002842:	d84f      	bhi.n	80028e4 <HAL_ADC_ConfigChannel+0x28c>
 8002844:	a201      	add	r2, pc, #4	; (adr r2, 800284c <HAL_ADC_ConfigChannel+0x1f4>)
 8002846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800284a:	bf00      	nop
 800284c:	0800285d 	.word	0x0800285d
 8002850:	0800287f 	.word	0x0800287f
 8002854:	080028a1 	.word	0x080028a1
 8002858:	080028c3 	.word	0x080028c3
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002862:	4b94      	ldr	r3, [pc, #592]	; (8002ab4 <HAL_ADC_ConfigChannel+0x45c>)
 8002864:	4013      	ands	r3, r2
 8002866:	683a      	ldr	r2, [r7, #0]
 8002868:	6812      	ldr	r2, [r2, #0]
 800286a:	0691      	lsls	r1, r2, #26
 800286c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800286e:	430a      	orrs	r2, r1
 8002870:	431a      	orrs	r2, r3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800287a:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800287c:	e07e      	b.n	800297c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002884:	4b8b      	ldr	r3, [pc, #556]	; (8002ab4 <HAL_ADC_ConfigChannel+0x45c>)
 8002886:	4013      	ands	r3, r2
 8002888:	683a      	ldr	r2, [r7, #0]
 800288a:	6812      	ldr	r2, [r2, #0]
 800288c:	0691      	lsls	r1, r2, #26
 800288e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002890:	430a      	orrs	r2, r1
 8002892:	431a      	orrs	r2, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800289c:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800289e:	e06d      	b.n	800297c <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80028a6:	4b83      	ldr	r3, [pc, #524]	; (8002ab4 <HAL_ADC_ConfigChannel+0x45c>)
 80028a8:	4013      	ands	r3, r2
 80028aa:	683a      	ldr	r2, [r7, #0]
 80028ac:	6812      	ldr	r2, [r2, #0]
 80028ae:	0691      	lsls	r1, r2, #26
 80028b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80028b2:	430a      	orrs	r2, r1
 80028b4:	431a      	orrs	r2, r3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80028be:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80028c0:	e05c      	b.n	800297c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80028c8:	4b7a      	ldr	r3, [pc, #488]	; (8002ab4 <HAL_ADC_ConfigChannel+0x45c>)
 80028ca:	4013      	ands	r3, r2
 80028cc:	683a      	ldr	r2, [r7, #0]
 80028ce:	6812      	ldr	r2, [r2, #0]
 80028d0:	0691      	lsls	r1, r2, #26
 80028d2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80028d4:	430a      	orrs	r2, r1
 80028d6:	431a      	orrs	r2, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80028e0:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80028e2:	e04b      	b.n	800297c <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028ea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	069b      	lsls	r3, r3, #26
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d107      	bne.n	8002908 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002906:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800290e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	069b      	lsls	r3, r3, #26
 8002918:	429a      	cmp	r2, r3
 800291a:	d107      	bne.n	800292c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800292a:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002932:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	069b      	lsls	r3, r3, #26
 800293c:	429a      	cmp	r2, r3
 800293e:	d107      	bne.n	8002950 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800294e:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002956:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	069b      	lsls	r3, r3, #26
 8002960:	429a      	cmp	r2, r3
 8002962:	d10a      	bne.n	800297a <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002972:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002974:	e001      	b.n	800297a <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8002976:	bf00      	nop
 8002978:	e000      	b.n	800297c <HAL_ADC_ConfigChannel+0x324>
      break;
 800297a:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	f003 0303 	and.w	r3, r3, #3
 8002986:	2b01      	cmp	r3, #1
 8002988:	d108      	bne.n	800299c <HAL_ADC_ConfigChannel+0x344>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0301 	and.w	r3, r3, #1
 8002994:	2b01      	cmp	r3, #1
 8002996:	d101      	bne.n	800299c <HAL_ADC_ConfigChannel+0x344>
 8002998:	2301      	movs	r3, #1
 800299a:	e000      	b.n	800299e <HAL_ADC_ConfigChannel+0x346>
 800299c:	2300      	movs	r3, #0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	f040 810a 	bne.w	8002bb8 <HAL_ADC_ConfigChannel+0x560>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d00f      	beq.n	80029cc <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	2201      	movs	r2, #1
 80029ba:	fa02 f303 	lsl.w	r3, r2, r3
 80029be:	43da      	mvns	r2, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	400a      	ands	r2, r1
 80029c6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80029ca:	e049      	b.n	8002a60 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2201      	movs	r2, #1
 80029da:	409a      	lsls	r2, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	430a      	orrs	r2, r1
 80029e2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	2b09      	cmp	r3, #9
 80029ec:	d91c      	bls.n	8002a28 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	6999      	ldr	r1, [r3, #24]
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	4613      	mov	r3, r2
 80029fa:	005b      	lsls	r3, r3, #1
 80029fc:	4413      	add	r3, r2
 80029fe:	3b1b      	subs	r3, #27
 8002a00:	2207      	movs	r2, #7
 8002a02:	fa02 f303 	lsl.w	r3, r2, r3
 8002a06:	43db      	mvns	r3, r3
 8002a08:	4019      	ands	r1, r3
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	6898      	ldr	r0, [r3, #8]
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	4613      	mov	r3, r2
 8002a14:	005b      	lsls	r3, r3, #1
 8002a16:	4413      	add	r3, r2
 8002a18:	3b1b      	subs	r3, #27
 8002a1a:	fa00 f203 	lsl.w	r2, r0, r3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	430a      	orrs	r2, r1
 8002a24:	619a      	str	r2, [r3, #24]
 8002a26:	e01b      	b.n	8002a60 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	6959      	ldr	r1, [r3, #20]
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	1c5a      	adds	r2, r3, #1
 8002a34:	4613      	mov	r3, r2
 8002a36:	005b      	lsls	r3, r3, #1
 8002a38:	4413      	add	r3, r2
 8002a3a:	2207      	movs	r2, #7
 8002a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a40:	43db      	mvns	r3, r3
 8002a42:	4019      	ands	r1, r3
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	6898      	ldr	r0, [r3, #8]
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	1c5a      	adds	r2, r3, #1
 8002a4e:	4613      	mov	r3, r2
 8002a50:	005b      	lsls	r3, r3, #1
 8002a52:	4413      	add	r3, r2
 8002a54:	fa00 f203 	lsl.w	r2, r0, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	430a      	orrs	r2, r1
 8002a5e:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a60:	4b15      	ldr	r3, [pc, #84]	; (8002ab8 <HAL_ADC_ConfigChannel+0x460>)
 8002a62:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	2b10      	cmp	r3, #16
 8002a6a:	d105      	bne.n	8002a78 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002a6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d015      	beq.n	8002aa4 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002a7c:	2b11      	cmp	r3, #17
 8002a7e:	d105      	bne.n	8002a8c <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002a80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d00b      	beq.n	8002aa4 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002a90:	2b12      	cmp	r3, #18
 8002a92:	f040 8091 	bne.w	8002bb8 <HAL_ADC_ConfigChannel+0x560>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002a96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	f040 808a 	bne.w	8002bb8 <HAL_ADC_ConfigChannel+0x560>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002aac:	d108      	bne.n	8002ac0 <HAL_ADC_ConfigChannel+0x468>
 8002aae:	4b03      	ldr	r3, [pc, #12]	; (8002abc <HAL_ADC_ConfigChannel+0x464>)
 8002ab0:	60fb      	str	r3, [r7, #12]
 8002ab2:	e008      	b.n	8002ac6 <HAL_ADC_ConfigChannel+0x46e>
 8002ab4:	83fff000 	.word	0x83fff000
 8002ab8:	50000300 	.word	0x50000300
 8002abc:	50000100 	.word	0x50000100
 8002ac0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002ac4:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	f003 0303 	and.w	r3, r3, #3
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d108      	bne.n	8002ae6 <HAL_ADC_ConfigChannel+0x48e>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0301 	and.w	r3, r3, #1
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d101      	bne.n	8002ae6 <HAL_ADC_ConfigChannel+0x48e>
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e000      	b.n	8002ae8 <HAL_ADC_ConfigChannel+0x490>
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d150      	bne.n	8002b8e <HAL_ADC_ConfigChannel+0x536>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002aec:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d010      	beq.n	8002b14 <HAL_ADC_ConfigChannel+0x4bc>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	f003 0303 	and.w	r3, r3, #3
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d107      	bne.n	8002b0e <HAL_ADC_ConfigChannel+0x4b6>
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0301 	and.w	r3, r3, #1
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d101      	bne.n	8002b0e <HAL_ADC_ConfigChannel+0x4b6>
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e000      	b.n	8002b10 <HAL_ADC_ConfigChannel+0x4b8>
 8002b0e:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d13c      	bne.n	8002b8e <HAL_ADC_ConfigChannel+0x536>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	2b10      	cmp	r3, #16
 8002b1a:	d11d      	bne.n	8002b58 <HAL_ADC_ConfigChannel+0x500>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b24:	d118      	bne.n	8002b58 <HAL_ADC_ConfigChannel+0x500>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002b26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002b2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b30:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002b32:	4b27      	ldr	r3, [pc, #156]	; (8002bd0 <HAL_ADC_ConfigChannel+0x578>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a27      	ldr	r2, [pc, #156]	; (8002bd4 <HAL_ADC_ConfigChannel+0x57c>)
 8002b38:	fba2 2303 	umull	r2, r3, r2, r3
 8002b3c:	0c9a      	lsrs	r2, r3, #18
 8002b3e:	4613      	mov	r3, r2
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	4413      	add	r3, r2
 8002b44:	005b      	lsls	r3, r3, #1
 8002b46:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002b48:	e002      	b.n	8002b50 <HAL_ADC_ConfigChannel+0x4f8>
          {
            wait_loop_index--;
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	3b01      	subs	r3, #1
 8002b4e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d1f9      	bne.n	8002b4a <HAL_ADC_ConfigChannel+0x4f2>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002b56:	e02e      	b.n	8002bb6 <HAL_ADC_ConfigChannel+0x55e>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	2b11      	cmp	r3, #17
 8002b5e:	d10b      	bne.n	8002b78 <HAL_ADC_ConfigChannel+0x520>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b68:	d106      	bne.n	8002b78 <HAL_ADC_ConfigChannel+0x520>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002b6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002b72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b74:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002b76:	e01e      	b.n	8002bb6 <HAL_ADC_ConfigChannel+0x55e>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2b12      	cmp	r3, #18
 8002b7e:	d11a      	bne.n	8002bb6 <HAL_ADC_ConfigChannel+0x55e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002b80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002b88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b8a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002b8c:	e013      	b.n	8002bb6 <HAL_ADC_ConfigChannel+0x55e>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b92:	f043 0220 	orr.w	r2, r3, #32
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002ba0:	e00a      	b.n	8002bb8 <HAL_ADC_ConfigChannel+0x560>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba6:	f043 0220 	orr.w	r2, r3, #32
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002bb4:	e000      	b.n	8002bb8 <HAL_ADC_ConfigChannel+0x560>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002bb6:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002bc0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	376c      	adds	r7, #108	; 0x6c
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr
 8002bd0:	20000000 	.word	0x20000000
 8002bd4:	431bde83 	.word	0x431bde83

08002bd8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b099      	sub	sp, #100	; 0x64
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002be2:	2300      	movs	r3, #0
 8002be4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bf0:	d102      	bne.n	8002bf8 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8002bf2:	4b5a      	ldr	r3, [pc, #360]	; (8002d5c <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8002bf4:	60bb      	str	r3, [r7, #8]
 8002bf6:	e002      	b.n	8002bfe <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8002bf8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002bfc:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d101      	bne.n	8002c08 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e0a2      	b.n	8002d4e <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d101      	bne.n	8002c16 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002c12:	2302      	movs	r3, #2
 8002c14:	e09b      	b.n	8002d4e <HAL_ADCEx_MultiModeConfigChannel+0x176>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2201      	movs	r2, #1
 8002c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	f003 0304 	and.w	r3, r3, #4
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d17f      	bne.n	8002d2c <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	f003 0304 	and.w	r3, r3, #4
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d179      	bne.n	8002d2c <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c38:	4b49      	ldr	r3, [pc, #292]	; (8002d60 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 8002c3a:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d040      	beq.n	8002cc6 <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002c44:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	6859      	ldr	r1, [r3, #4]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002c56:	035b      	lsls	r3, r3, #13
 8002c58:	430b      	orrs	r3, r1
 8002c5a:	431a      	orrs	r2, r3
 8002c5c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c5e:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	f003 0303 	and.w	r3, r3, #3
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d108      	bne.n	8002c80 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 0301 	and.w	r3, r3, #1
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d101      	bne.n	8002c80 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e000      	b.n	8002c82 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8002c80:	2300      	movs	r3, #0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d15c      	bne.n	8002d40 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	f003 0303 	and.w	r3, r3, #3
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d107      	bne.n	8002ca2 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0301 	and.w	r3, r3, #1
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d101      	bne.n	8002ca2 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e000      	b.n	8002ca4 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8002ca2:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d14b      	bne.n	8002d40 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002ca8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002cb0:	f023 030f 	bic.w	r3, r3, #15
 8002cb4:	683a      	ldr	r2, [r7, #0]
 8002cb6:	6811      	ldr	r1, [r2, #0]
 8002cb8:	683a      	ldr	r2, [r7, #0]
 8002cba:	6892      	ldr	r2, [r2, #8]
 8002cbc:	430a      	orrs	r2, r1
 8002cbe:	431a      	orrs	r2, r3
 8002cc0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cc2:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002cc4:	e03c      	b.n	8002d40 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002cc6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002cce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cd0:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	f003 0303 	and.w	r3, r3, #3
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d108      	bne.n	8002cf2 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0301 	and.w	r3, r3, #1
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d101      	bne.n	8002cf2 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e000      	b.n	8002cf4 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d123      	bne.n	8002d40 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	f003 0303 	and.w	r3, r3, #3
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d107      	bne.n	8002d14 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0301 	and.w	r3, r3, #1
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d101      	bne.n	8002d14 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8002d10:	2301      	movs	r3, #1
 8002d12:	e000      	b.n	8002d16 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8002d14:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d112      	bne.n	8002d40 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002d1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002d22:	f023 030f 	bic.w	r3, r3, #15
 8002d26:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002d28:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d2a:	e009      	b.n	8002d40 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d30:	f043 0220 	orr.w	r2, r3, #32
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002d3e:	e000      	b.n	8002d42 <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d40:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002d4a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3764      	adds	r7, #100	; 0x64
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	50000100 	.word	0x50000100
 8002d60:	50000300 	.word	0x50000300

08002d64 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	f003 0303 	and.w	r3, r3, #3
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d108      	bne.n	8002d90 <ADC_Enable+0x2c>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0301 	and.w	r3, r3, #1
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d101      	bne.n	8002d90 <ADC_Enable+0x2c>
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e000      	b.n	8002d92 <ADC_Enable+0x2e>
 8002d90:	2300      	movs	r3, #0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d143      	bne.n	8002e1e <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	689a      	ldr	r2, [r3, #8]
 8002d9c:	4b22      	ldr	r3, [pc, #136]	; (8002e28 <ADC_Enable+0xc4>)
 8002d9e:	4013      	ands	r3, r2
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d00d      	beq.n	8002dc0 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da8:	f043 0210 	orr.w	r2, r3, #16
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002db4:	f043 0201 	orr.w	r2, r3, #1
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e02f      	b.n	8002e20 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	689a      	ldr	r2, [r3, #8]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f042 0201 	orr.w	r2, r2, #1
 8002dce:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002dd0:	f7ff f8ee 	bl	8001fb0 <HAL_GetTick>
 8002dd4:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002dd6:	e01b      	b.n	8002e10 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002dd8:	f7ff f8ea 	bl	8001fb0 <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d914      	bls.n	8002e10 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0301 	and.w	r3, r3, #1
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d00d      	beq.n	8002e10 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df8:	f043 0210 	orr.w	r2, r3, #16
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e04:	f043 0201 	orr.w	r2, r3, #1
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e007      	b.n	8002e20 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0301 	and.w	r3, r3, #1
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d1dc      	bne.n	8002dd8 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002e1e:	2300      	movs	r3, #0
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3710      	adds	r7, #16
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	8000003f 	.word	0x8000003f

08002e2c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b084      	sub	sp, #16
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e34:	2300      	movs	r3, #0
 8002e36:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f003 0303 	and.w	r3, r3, #3
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d108      	bne.n	8002e58 <ADC_Disable+0x2c>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0301 	and.w	r3, r3, #1
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d101      	bne.n	8002e58 <ADC_Disable+0x2c>
 8002e54:	2301      	movs	r3, #1
 8002e56:	e000      	b.n	8002e5a <ADC_Disable+0x2e>
 8002e58:	2300      	movs	r3, #0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d047      	beq.n	8002eee <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	f003 030d 	and.w	r3, r3, #13
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d10f      	bne.n	8002e8c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	689a      	ldr	r2, [r3, #8]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f042 0202 	orr.w	r2, r2, #2
 8002e7a:	609a      	str	r2, [r3, #8]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2203      	movs	r2, #3
 8002e82:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002e84:	f7ff f894 	bl	8001fb0 <HAL_GetTick>
 8002e88:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002e8a:	e029      	b.n	8002ee0 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e90:	f043 0210 	orr.w	r2, r3, #16
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e9c:	f043 0201 	orr.w	r2, r3, #1
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e023      	b.n	8002ef0 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002ea8:	f7ff f882 	bl	8001fb0 <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d914      	bls.n	8002ee0 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	f003 0301 	and.w	r3, r3, #1
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d10d      	bne.n	8002ee0 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec8:	f043 0210 	orr.w	r2, r3, #16
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed4:	f043 0201 	orr.w	r2, r3, #1
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e007      	b.n	8002ef0 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	f003 0301 	and.w	r3, r3, #1
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d0dc      	beq.n	8002ea8 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002eee:	2300      	movs	r3, #0
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3710      	adds	r7, #16
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b085      	sub	sp, #20
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f003 0307 	and.w	r3, r3, #7
 8002f06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f08:	4b0c      	ldr	r3, [pc, #48]	; (8002f3c <__NVIC_SetPriorityGrouping+0x44>)
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f0e:	68ba      	ldr	r2, [r7, #8]
 8002f10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f14:	4013      	ands	r3, r2
 8002f16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f2a:	4a04      	ldr	r2, [pc, #16]	; (8002f3c <__NVIC_SetPriorityGrouping+0x44>)
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	60d3      	str	r3, [r2, #12]
}
 8002f30:	bf00      	nop
 8002f32:	3714      	adds	r7, #20
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr
 8002f3c:	e000ed00 	.word	0xe000ed00

08002f40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f40:	b480      	push	{r7}
 8002f42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f44:	4b04      	ldr	r3, [pc, #16]	; (8002f58 <__NVIC_GetPriorityGrouping+0x18>)
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	0a1b      	lsrs	r3, r3, #8
 8002f4a:	f003 0307 	and.w	r3, r3, #7
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr
 8002f58:	e000ed00 	.word	0xe000ed00

08002f5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	4603      	mov	r3, r0
 8002f64:	6039      	str	r1, [r7, #0]
 8002f66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	db0a      	blt.n	8002f86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	b2da      	uxtb	r2, r3
 8002f74:	490c      	ldr	r1, [pc, #48]	; (8002fa8 <__NVIC_SetPriority+0x4c>)
 8002f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f7a:	0112      	lsls	r2, r2, #4
 8002f7c:	b2d2      	uxtb	r2, r2
 8002f7e:	440b      	add	r3, r1
 8002f80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f84:	e00a      	b.n	8002f9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	b2da      	uxtb	r2, r3
 8002f8a:	4908      	ldr	r1, [pc, #32]	; (8002fac <__NVIC_SetPriority+0x50>)
 8002f8c:	79fb      	ldrb	r3, [r7, #7]
 8002f8e:	f003 030f 	and.w	r3, r3, #15
 8002f92:	3b04      	subs	r3, #4
 8002f94:	0112      	lsls	r2, r2, #4
 8002f96:	b2d2      	uxtb	r2, r2
 8002f98:	440b      	add	r3, r1
 8002f9a:	761a      	strb	r2, [r3, #24]
}
 8002f9c:	bf00      	nop
 8002f9e:	370c      	adds	r7, #12
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr
 8002fa8:	e000e100 	.word	0xe000e100
 8002fac:	e000ed00 	.word	0xe000ed00

08002fb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b089      	sub	sp, #36	; 0x24
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	60f8      	str	r0, [r7, #12]
 8002fb8:	60b9      	str	r1, [r7, #8]
 8002fba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f003 0307 	and.w	r3, r3, #7
 8002fc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	f1c3 0307 	rsb	r3, r3, #7
 8002fca:	2b04      	cmp	r3, #4
 8002fcc:	bf28      	it	cs
 8002fce:	2304      	movcs	r3, #4
 8002fd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	3304      	adds	r3, #4
 8002fd6:	2b06      	cmp	r3, #6
 8002fd8:	d902      	bls.n	8002fe0 <NVIC_EncodePriority+0x30>
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	3b03      	subs	r3, #3
 8002fde:	e000      	b.n	8002fe2 <NVIC_EncodePriority+0x32>
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fe4:	f04f 32ff 	mov.w	r2, #4294967295
 8002fe8:	69bb      	ldr	r3, [r7, #24]
 8002fea:	fa02 f303 	lsl.w	r3, r2, r3
 8002fee:	43da      	mvns	r2, r3
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	401a      	ands	r2, r3
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ff8:	f04f 31ff 	mov.w	r1, #4294967295
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8003002:	43d9      	mvns	r1, r3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003008:	4313      	orrs	r3, r2
         );
}
 800300a:	4618      	mov	r0, r3
 800300c:	3724      	adds	r7, #36	; 0x24
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr
	...

08003018 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	3b01      	subs	r3, #1
 8003024:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003028:	d301      	bcc.n	800302e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800302a:	2301      	movs	r3, #1
 800302c:	e00f      	b.n	800304e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800302e:	4a0a      	ldr	r2, [pc, #40]	; (8003058 <SysTick_Config+0x40>)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	3b01      	subs	r3, #1
 8003034:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003036:	210f      	movs	r1, #15
 8003038:	f04f 30ff 	mov.w	r0, #4294967295
 800303c:	f7ff ff8e 	bl	8002f5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003040:	4b05      	ldr	r3, [pc, #20]	; (8003058 <SysTick_Config+0x40>)
 8003042:	2200      	movs	r2, #0
 8003044:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003046:	4b04      	ldr	r3, [pc, #16]	; (8003058 <SysTick_Config+0x40>)
 8003048:	2207      	movs	r2, #7
 800304a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800304c:	2300      	movs	r3, #0
}
 800304e:	4618      	mov	r0, r3
 8003050:	3708      	adds	r7, #8
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	e000e010 	.word	0xe000e010

0800305c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b082      	sub	sp, #8
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f7ff ff47 	bl	8002ef8 <__NVIC_SetPriorityGrouping>
}
 800306a:	bf00      	nop
 800306c:	3708      	adds	r7, #8
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}

08003072 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003072:	b580      	push	{r7, lr}
 8003074:	b086      	sub	sp, #24
 8003076:	af00      	add	r7, sp, #0
 8003078:	4603      	mov	r3, r0
 800307a:	60b9      	str	r1, [r7, #8]
 800307c:	607a      	str	r2, [r7, #4]
 800307e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003080:	2300      	movs	r3, #0
 8003082:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003084:	f7ff ff5c 	bl	8002f40 <__NVIC_GetPriorityGrouping>
 8003088:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	68b9      	ldr	r1, [r7, #8]
 800308e:	6978      	ldr	r0, [r7, #20]
 8003090:	f7ff ff8e 	bl	8002fb0 <NVIC_EncodePriority>
 8003094:	4602      	mov	r2, r0
 8003096:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800309a:	4611      	mov	r1, r2
 800309c:	4618      	mov	r0, r3
 800309e:	f7ff ff5d 	bl	8002f5c <__NVIC_SetPriority>
}
 80030a2:	bf00      	nop
 80030a4:	3718      	adds	r7, #24
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}

080030aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030aa:	b580      	push	{r7, lr}
 80030ac:	b082      	sub	sp, #8
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f7ff ffb0 	bl	8003018 <SysTick_Config>
 80030b8:	4603      	mov	r3, r0
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3708      	adds	r7, #8
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
	...

080030c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b087      	sub	sp, #28
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80030ce:	2300      	movs	r3, #0
 80030d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030d2:	e14e      	b.n	8003372 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	2101      	movs	r1, #1
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	fa01 f303 	lsl.w	r3, r1, r3
 80030e0:	4013      	ands	r3, r2
 80030e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	f000 8140 	beq.w	800336c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f003 0303 	and.w	r3, r3, #3
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d005      	beq.n	8003104 <HAL_GPIO_Init+0x40>
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f003 0303 	and.w	r3, r3, #3
 8003100:	2b02      	cmp	r3, #2
 8003102:	d130      	bne.n	8003166 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	005b      	lsls	r3, r3, #1
 800310e:	2203      	movs	r2, #3
 8003110:	fa02 f303 	lsl.w	r3, r2, r3
 8003114:	43db      	mvns	r3, r3
 8003116:	693a      	ldr	r2, [r7, #16]
 8003118:	4013      	ands	r3, r2
 800311a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	68da      	ldr	r2, [r3, #12]
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	005b      	lsls	r3, r3, #1
 8003124:	fa02 f303 	lsl.w	r3, r2, r3
 8003128:	693a      	ldr	r2, [r7, #16]
 800312a:	4313      	orrs	r3, r2
 800312c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	693a      	ldr	r2, [r7, #16]
 8003132:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800313a:	2201      	movs	r2, #1
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	fa02 f303 	lsl.w	r3, r2, r3
 8003142:	43db      	mvns	r3, r3
 8003144:	693a      	ldr	r2, [r7, #16]
 8003146:	4013      	ands	r3, r2
 8003148:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	091b      	lsrs	r3, r3, #4
 8003150:	f003 0201 	and.w	r2, r3, #1
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	fa02 f303 	lsl.w	r3, r2, r3
 800315a:	693a      	ldr	r2, [r7, #16]
 800315c:	4313      	orrs	r3, r2
 800315e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	693a      	ldr	r2, [r7, #16]
 8003164:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f003 0303 	and.w	r3, r3, #3
 800316e:	2b03      	cmp	r3, #3
 8003170:	d017      	beq.n	80031a2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	68db      	ldr	r3, [r3, #12]
 8003176:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	005b      	lsls	r3, r3, #1
 800317c:	2203      	movs	r2, #3
 800317e:	fa02 f303 	lsl.w	r3, r2, r3
 8003182:	43db      	mvns	r3, r3
 8003184:	693a      	ldr	r2, [r7, #16]
 8003186:	4013      	ands	r3, r2
 8003188:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	689a      	ldr	r2, [r3, #8]
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	005b      	lsls	r3, r3, #1
 8003192:	fa02 f303 	lsl.w	r3, r2, r3
 8003196:	693a      	ldr	r2, [r7, #16]
 8003198:	4313      	orrs	r3, r2
 800319a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	693a      	ldr	r2, [r7, #16]
 80031a0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	f003 0303 	and.w	r3, r3, #3
 80031aa:	2b02      	cmp	r3, #2
 80031ac:	d123      	bne.n	80031f6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	08da      	lsrs	r2, r3, #3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	3208      	adds	r2, #8
 80031b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	f003 0307 	and.w	r3, r3, #7
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	220f      	movs	r2, #15
 80031c6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ca:	43db      	mvns	r3, r3
 80031cc:	693a      	ldr	r2, [r7, #16]
 80031ce:	4013      	ands	r3, r2
 80031d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	691a      	ldr	r2, [r3, #16]
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	f003 0307 	and.w	r3, r3, #7
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	fa02 f303 	lsl.w	r3, r2, r3
 80031e2:	693a      	ldr	r2, [r7, #16]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	08da      	lsrs	r2, r3, #3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	3208      	adds	r2, #8
 80031f0:	6939      	ldr	r1, [r7, #16]
 80031f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	005b      	lsls	r3, r3, #1
 8003200:	2203      	movs	r2, #3
 8003202:	fa02 f303 	lsl.w	r3, r2, r3
 8003206:	43db      	mvns	r3, r3
 8003208:	693a      	ldr	r2, [r7, #16]
 800320a:	4013      	ands	r3, r2
 800320c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	f003 0203 	and.w	r2, r3, #3
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	005b      	lsls	r3, r3, #1
 800321a:	fa02 f303 	lsl.w	r3, r2, r3
 800321e:	693a      	ldr	r2, [r7, #16]
 8003220:	4313      	orrs	r3, r2
 8003222:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	693a      	ldr	r2, [r7, #16]
 8003228:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003232:	2b00      	cmp	r3, #0
 8003234:	f000 809a 	beq.w	800336c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003238:	4b55      	ldr	r3, [pc, #340]	; (8003390 <HAL_GPIO_Init+0x2cc>)
 800323a:	699b      	ldr	r3, [r3, #24]
 800323c:	4a54      	ldr	r2, [pc, #336]	; (8003390 <HAL_GPIO_Init+0x2cc>)
 800323e:	f043 0301 	orr.w	r3, r3, #1
 8003242:	6193      	str	r3, [r2, #24]
 8003244:	4b52      	ldr	r3, [pc, #328]	; (8003390 <HAL_GPIO_Init+0x2cc>)
 8003246:	699b      	ldr	r3, [r3, #24]
 8003248:	f003 0301 	and.w	r3, r3, #1
 800324c:	60bb      	str	r3, [r7, #8]
 800324e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003250:	4a50      	ldr	r2, [pc, #320]	; (8003394 <HAL_GPIO_Init+0x2d0>)
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	089b      	lsrs	r3, r3, #2
 8003256:	3302      	adds	r3, #2
 8003258:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800325c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	f003 0303 	and.w	r3, r3, #3
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	220f      	movs	r2, #15
 8003268:	fa02 f303 	lsl.w	r3, r2, r3
 800326c:	43db      	mvns	r3, r3
 800326e:	693a      	ldr	r2, [r7, #16]
 8003270:	4013      	ands	r3, r2
 8003272:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800327a:	d013      	beq.n	80032a4 <HAL_GPIO_Init+0x1e0>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	4a46      	ldr	r2, [pc, #280]	; (8003398 <HAL_GPIO_Init+0x2d4>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d00d      	beq.n	80032a0 <HAL_GPIO_Init+0x1dc>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	4a45      	ldr	r2, [pc, #276]	; (800339c <HAL_GPIO_Init+0x2d8>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d007      	beq.n	800329c <HAL_GPIO_Init+0x1d8>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	4a44      	ldr	r2, [pc, #272]	; (80033a0 <HAL_GPIO_Init+0x2dc>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d101      	bne.n	8003298 <HAL_GPIO_Init+0x1d4>
 8003294:	2303      	movs	r3, #3
 8003296:	e006      	b.n	80032a6 <HAL_GPIO_Init+0x1e2>
 8003298:	2305      	movs	r3, #5
 800329a:	e004      	b.n	80032a6 <HAL_GPIO_Init+0x1e2>
 800329c:	2302      	movs	r3, #2
 800329e:	e002      	b.n	80032a6 <HAL_GPIO_Init+0x1e2>
 80032a0:	2301      	movs	r3, #1
 80032a2:	e000      	b.n	80032a6 <HAL_GPIO_Init+0x1e2>
 80032a4:	2300      	movs	r3, #0
 80032a6:	697a      	ldr	r2, [r7, #20]
 80032a8:	f002 0203 	and.w	r2, r2, #3
 80032ac:	0092      	lsls	r2, r2, #2
 80032ae:	4093      	lsls	r3, r2
 80032b0:	693a      	ldr	r2, [r7, #16]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80032b6:	4937      	ldr	r1, [pc, #220]	; (8003394 <HAL_GPIO_Init+0x2d0>)
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	089b      	lsrs	r3, r3, #2
 80032bc:	3302      	adds	r3, #2
 80032be:	693a      	ldr	r2, [r7, #16]
 80032c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032c4:	4b37      	ldr	r3, [pc, #220]	; (80033a4 <HAL_GPIO_Init+0x2e0>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	43db      	mvns	r3, r3
 80032ce:	693a      	ldr	r2, [r7, #16]
 80032d0:	4013      	ands	r3, r2
 80032d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d003      	beq.n	80032e8 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80032e0:	693a      	ldr	r2, [r7, #16]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80032e8:	4a2e      	ldr	r2, [pc, #184]	; (80033a4 <HAL_GPIO_Init+0x2e0>)
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80032ee:	4b2d      	ldr	r3, [pc, #180]	; (80033a4 <HAL_GPIO_Init+0x2e0>)
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	43db      	mvns	r3, r3
 80032f8:	693a      	ldr	r2, [r7, #16]
 80032fa:	4013      	ands	r3, r2
 80032fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d003      	beq.n	8003312 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800330a:	693a      	ldr	r2, [r7, #16]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	4313      	orrs	r3, r2
 8003310:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003312:	4a24      	ldr	r2, [pc, #144]	; (80033a4 <HAL_GPIO_Init+0x2e0>)
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003318:	4b22      	ldr	r3, [pc, #136]	; (80033a4 <HAL_GPIO_Init+0x2e0>)
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	43db      	mvns	r3, r3
 8003322:	693a      	ldr	r2, [r7, #16]
 8003324:	4013      	ands	r3, r2
 8003326:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003330:	2b00      	cmp	r3, #0
 8003332:	d003      	beq.n	800333c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8003334:	693a      	ldr	r2, [r7, #16]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	4313      	orrs	r3, r2
 800333a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800333c:	4a19      	ldr	r2, [pc, #100]	; (80033a4 <HAL_GPIO_Init+0x2e0>)
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003342:	4b18      	ldr	r3, [pc, #96]	; (80033a4 <HAL_GPIO_Init+0x2e0>)
 8003344:	68db      	ldr	r3, [r3, #12]
 8003346:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	43db      	mvns	r3, r3
 800334c:	693a      	ldr	r2, [r7, #16]
 800334e:	4013      	ands	r3, r2
 8003350:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d003      	beq.n	8003366 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800335e:	693a      	ldr	r2, [r7, #16]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	4313      	orrs	r3, r2
 8003364:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003366:	4a0f      	ldr	r2, [pc, #60]	; (80033a4 <HAL_GPIO_Init+0x2e0>)
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	3301      	adds	r3, #1
 8003370:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	fa22 f303 	lsr.w	r3, r2, r3
 800337c:	2b00      	cmp	r3, #0
 800337e:	f47f aea9 	bne.w	80030d4 <HAL_GPIO_Init+0x10>
  }
}
 8003382:	bf00      	nop
 8003384:	bf00      	nop
 8003386:	371c      	adds	r7, #28
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr
 8003390:	40021000 	.word	0x40021000
 8003394:	40010000 	.word	0x40010000
 8003398:	48000400 	.word	0x48000400
 800339c:	48000800 	.word	0x48000800
 80033a0:	48000c00 	.word	0x48000c00
 80033a4:	40010400 	.word	0x40010400

080033a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b085      	sub	sp, #20
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	460b      	mov	r3, r1
 80033b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	691a      	ldr	r2, [r3, #16]
 80033b8:	887b      	ldrh	r3, [r7, #2]
 80033ba:	4013      	ands	r3, r2
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d002      	beq.n	80033c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80033c0:	2301      	movs	r3, #1
 80033c2:	73fb      	strb	r3, [r7, #15]
 80033c4:	e001      	b.n	80033ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80033c6:	2300      	movs	r3, #0
 80033c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80033ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3714      	adds	r7, #20
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr

080033d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	460b      	mov	r3, r1
 80033e2:	807b      	strh	r3, [r7, #2]
 80033e4:	4613      	mov	r3, r2
 80033e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80033e8:	787b      	ldrb	r3, [r7, #1]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d003      	beq.n	80033f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80033ee:	887a      	ldrh	r2, [r7, #2]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80033f4:	e002      	b.n	80033fc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80033f6:	887a      	ldrh	r2, [r7, #2]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80033fc:	bf00      	nop
 80033fe:	370c      	adds	r7, #12
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr

08003408 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800340e:	af00      	add	r7, sp, #0
 8003410:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003414:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003418:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800341a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800341e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d102      	bne.n	800342e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	f001 b823 	b.w	8004474 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800342e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003432:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0301 	and.w	r3, r3, #1
 800343e:	2b00      	cmp	r3, #0
 8003440:	f000 817d 	beq.w	800373e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003444:	4bbc      	ldr	r3, [pc, #752]	; (8003738 <HAL_RCC_OscConfig+0x330>)
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f003 030c 	and.w	r3, r3, #12
 800344c:	2b04      	cmp	r3, #4
 800344e:	d00c      	beq.n	800346a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003450:	4bb9      	ldr	r3, [pc, #740]	; (8003738 <HAL_RCC_OscConfig+0x330>)
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f003 030c 	and.w	r3, r3, #12
 8003458:	2b08      	cmp	r3, #8
 800345a:	d15c      	bne.n	8003516 <HAL_RCC_OscConfig+0x10e>
 800345c:	4bb6      	ldr	r3, [pc, #728]	; (8003738 <HAL_RCC_OscConfig+0x330>)
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003464:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003468:	d155      	bne.n	8003516 <HAL_RCC_OscConfig+0x10e>
 800346a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800346e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003472:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8003476:	fa93 f3a3 	rbit	r3, r3
 800347a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800347e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003482:	fab3 f383 	clz	r3, r3
 8003486:	b2db      	uxtb	r3, r3
 8003488:	095b      	lsrs	r3, r3, #5
 800348a:	b2db      	uxtb	r3, r3
 800348c:	f043 0301 	orr.w	r3, r3, #1
 8003490:	b2db      	uxtb	r3, r3
 8003492:	2b01      	cmp	r3, #1
 8003494:	d102      	bne.n	800349c <HAL_RCC_OscConfig+0x94>
 8003496:	4ba8      	ldr	r3, [pc, #672]	; (8003738 <HAL_RCC_OscConfig+0x330>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	e015      	b.n	80034c8 <HAL_RCC_OscConfig+0xc0>
 800349c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034a0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80034a8:	fa93 f3a3 	rbit	r3, r3
 80034ac:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80034b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034b4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80034b8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80034bc:	fa93 f3a3 	rbit	r3, r3
 80034c0:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80034c4:	4b9c      	ldr	r3, [pc, #624]	; (8003738 <HAL_RCC_OscConfig+0x330>)
 80034c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80034cc:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80034d0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80034d4:	fa92 f2a2 	rbit	r2, r2
 80034d8:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80034dc:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80034e0:	fab2 f282 	clz	r2, r2
 80034e4:	b2d2      	uxtb	r2, r2
 80034e6:	f042 0220 	orr.w	r2, r2, #32
 80034ea:	b2d2      	uxtb	r2, r2
 80034ec:	f002 021f 	and.w	r2, r2, #31
 80034f0:	2101      	movs	r1, #1
 80034f2:	fa01 f202 	lsl.w	r2, r1, r2
 80034f6:	4013      	ands	r3, r2
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	f000 811f 	beq.w	800373c <HAL_RCC_OscConfig+0x334>
 80034fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003502:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	2b00      	cmp	r3, #0
 800350c:	f040 8116 	bne.w	800373c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	f000 bfaf 	b.w	8004474 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003516:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800351a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003526:	d106      	bne.n	8003536 <HAL_RCC_OscConfig+0x12e>
 8003528:	4b83      	ldr	r3, [pc, #524]	; (8003738 <HAL_RCC_OscConfig+0x330>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a82      	ldr	r2, [pc, #520]	; (8003738 <HAL_RCC_OscConfig+0x330>)
 800352e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003532:	6013      	str	r3, [r2, #0]
 8003534:	e036      	b.n	80035a4 <HAL_RCC_OscConfig+0x19c>
 8003536:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800353a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d10c      	bne.n	8003560 <HAL_RCC_OscConfig+0x158>
 8003546:	4b7c      	ldr	r3, [pc, #496]	; (8003738 <HAL_RCC_OscConfig+0x330>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a7b      	ldr	r2, [pc, #492]	; (8003738 <HAL_RCC_OscConfig+0x330>)
 800354c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003550:	6013      	str	r3, [r2, #0]
 8003552:	4b79      	ldr	r3, [pc, #484]	; (8003738 <HAL_RCC_OscConfig+0x330>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a78      	ldr	r2, [pc, #480]	; (8003738 <HAL_RCC_OscConfig+0x330>)
 8003558:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800355c:	6013      	str	r3, [r2, #0]
 800355e:	e021      	b.n	80035a4 <HAL_RCC_OscConfig+0x19c>
 8003560:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003564:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003570:	d10c      	bne.n	800358c <HAL_RCC_OscConfig+0x184>
 8003572:	4b71      	ldr	r3, [pc, #452]	; (8003738 <HAL_RCC_OscConfig+0x330>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a70      	ldr	r2, [pc, #448]	; (8003738 <HAL_RCC_OscConfig+0x330>)
 8003578:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800357c:	6013      	str	r3, [r2, #0]
 800357e:	4b6e      	ldr	r3, [pc, #440]	; (8003738 <HAL_RCC_OscConfig+0x330>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a6d      	ldr	r2, [pc, #436]	; (8003738 <HAL_RCC_OscConfig+0x330>)
 8003584:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003588:	6013      	str	r3, [r2, #0]
 800358a:	e00b      	b.n	80035a4 <HAL_RCC_OscConfig+0x19c>
 800358c:	4b6a      	ldr	r3, [pc, #424]	; (8003738 <HAL_RCC_OscConfig+0x330>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a69      	ldr	r2, [pc, #420]	; (8003738 <HAL_RCC_OscConfig+0x330>)
 8003592:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003596:	6013      	str	r3, [r2, #0]
 8003598:	4b67      	ldr	r3, [pc, #412]	; (8003738 <HAL_RCC_OscConfig+0x330>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a66      	ldr	r2, [pc, #408]	; (8003738 <HAL_RCC_OscConfig+0x330>)
 800359e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035a2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80035a4:	4b64      	ldr	r3, [pc, #400]	; (8003738 <HAL_RCC_OscConfig+0x330>)
 80035a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a8:	f023 020f 	bic.w	r2, r3, #15
 80035ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035b0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	495f      	ldr	r1, [pc, #380]	; (8003738 <HAL_RCC_OscConfig+0x330>)
 80035ba:	4313      	orrs	r3, r2
 80035bc:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d059      	beq.n	8003682 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ce:	f7fe fcef 	bl	8001fb0 <HAL_GetTick>
 80035d2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035d6:	e00a      	b.n	80035ee <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035d8:	f7fe fcea 	bl	8001fb0 <HAL_GetTick>
 80035dc:	4602      	mov	r2, r0
 80035de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80035e2:	1ad3      	subs	r3, r2, r3
 80035e4:	2b64      	cmp	r3, #100	; 0x64
 80035e6:	d902      	bls.n	80035ee <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80035e8:	2303      	movs	r3, #3
 80035ea:	f000 bf43 	b.w	8004474 <HAL_RCC_OscConfig+0x106c>
 80035ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80035f2:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035f6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80035fa:	fa93 f3a3 	rbit	r3, r3
 80035fe:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8003602:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003606:	fab3 f383 	clz	r3, r3
 800360a:	b2db      	uxtb	r3, r3
 800360c:	095b      	lsrs	r3, r3, #5
 800360e:	b2db      	uxtb	r3, r3
 8003610:	f043 0301 	orr.w	r3, r3, #1
 8003614:	b2db      	uxtb	r3, r3
 8003616:	2b01      	cmp	r3, #1
 8003618:	d102      	bne.n	8003620 <HAL_RCC_OscConfig+0x218>
 800361a:	4b47      	ldr	r3, [pc, #284]	; (8003738 <HAL_RCC_OscConfig+0x330>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	e015      	b.n	800364c <HAL_RCC_OscConfig+0x244>
 8003620:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003624:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003628:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800362c:	fa93 f3a3 	rbit	r3, r3
 8003630:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003634:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003638:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800363c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003640:	fa93 f3a3 	rbit	r3, r3
 8003644:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003648:	4b3b      	ldr	r3, [pc, #236]	; (8003738 <HAL_RCC_OscConfig+0x330>)
 800364a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003650:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8003654:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003658:	fa92 f2a2 	rbit	r2, r2
 800365c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8003660:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8003664:	fab2 f282 	clz	r2, r2
 8003668:	b2d2      	uxtb	r2, r2
 800366a:	f042 0220 	orr.w	r2, r2, #32
 800366e:	b2d2      	uxtb	r2, r2
 8003670:	f002 021f 	and.w	r2, r2, #31
 8003674:	2101      	movs	r1, #1
 8003676:	fa01 f202 	lsl.w	r2, r1, r2
 800367a:	4013      	ands	r3, r2
 800367c:	2b00      	cmp	r3, #0
 800367e:	d0ab      	beq.n	80035d8 <HAL_RCC_OscConfig+0x1d0>
 8003680:	e05d      	b.n	800373e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003682:	f7fe fc95 	bl	8001fb0 <HAL_GetTick>
 8003686:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800368a:	e00a      	b.n	80036a2 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800368c:	f7fe fc90 	bl	8001fb0 <HAL_GetTick>
 8003690:	4602      	mov	r2, r0
 8003692:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	2b64      	cmp	r3, #100	; 0x64
 800369a:	d902      	bls.n	80036a2 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800369c:	2303      	movs	r3, #3
 800369e:	f000 bee9 	b.w	8004474 <HAL_RCC_OscConfig+0x106c>
 80036a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036a6:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036aa:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80036ae:	fa93 f3a3 	rbit	r3, r3
 80036b2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80036b6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036ba:	fab3 f383 	clz	r3, r3
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	095b      	lsrs	r3, r3, #5
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	f043 0301 	orr.w	r3, r3, #1
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d102      	bne.n	80036d4 <HAL_RCC_OscConfig+0x2cc>
 80036ce:	4b1a      	ldr	r3, [pc, #104]	; (8003738 <HAL_RCC_OscConfig+0x330>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	e015      	b.n	8003700 <HAL_RCC_OscConfig+0x2f8>
 80036d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036d8:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036dc:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80036e0:	fa93 f3a3 	rbit	r3, r3
 80036e4:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80036e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036ec:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80036f0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80036f4:	fa93 f3a3 	rbit	r3, r3
 80036f8:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80036fc:	4b0e      	ldr	r3, [pc, #56]	; (8003738 <HAL_RCC_OscConfig+0x330>)
 80036fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003700:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003704:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003708:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800370c:	fa92 f2a2 	rbit	r2, r2
 8003710:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8003714:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003718:	fab2 f282 	clz	r2, r2
 800371c:	b2d2      	uxtb	r2, r2
 800371e:	f042 0220 	orr.w	r2, r2, #32
 8003722:	b2d2      	uxtb	r2, r2
 8003724:	f002 021f 	and.w	r2, r2, #31
 8003728:	2101      	movs	r1, #1
 800372a:	fa01 f202 	lsl.w	r2, r1, r2
 800372e:	4013      	ands	r3, r2
 8003730:	2b00      	cmp	r3, #0
 8003732:	d1ab      	bne.n	800368c <HAL_RCC_OscConfig+0x284>
 8003734:	e003      	b.n	800373e <HAL_RCC_OscConfig+0x336>
 8003736:	bf00      	nop
 8003738:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800373c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800373e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003742:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0302 	and.w	r3, r3, #2
 800374e:	2b00      	cmp	r3, #0
 8003750:	f000 817d 	beq.w	8003a4e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003754:	4ba6      	ldr	r3, [pc, #664]	; (80039f0 <HAL_RCC_OscConfig+0x5e8>)
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	f003 030c 	and.w	r3, r3, #12
 800375c:	2b00      	cmp	r3, #0
 800375e:	d00b      	beq.n	8003778 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003760:	4ba3      	ldr	r3, [pc, #652]	; (80039f0 <HAL_RCC_OscConfig+0x5e8>)
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f003 030c 	and.w	r3, r3, #12
 8003768:	2b08      	cmp	r3, #8
 800376a:	d172      	bne.n	8003852 <HAL_RCC_OscConfig+0x44a>
 800376c:	4ba0      	ldr	r3, [pc, #640]	; (80039f0 <HAL_RCC_OscConfig+0x5e8>)
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d16c      	bne.n	8003852 <HAL_RCC_OscConfig+0x44a>
 8003778:	2302      	movs	r3, #2
 800377a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800377e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003782:	fa93 f3a3 	rbit	r3, r3
 8003786:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800378a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800378e:	fab3 f383 	clz	r3, r3
 8003792:	b2db      	uxtb	r3, r3
 8003794:	095b      	lsrs	r3, r3, #5
 8003796:	b2db      	uxtb	r3, r3
 8003798:	f043 0301 	orr.w	r3, r3, #1
 800379c:	b2db      	uxtb	r3, r3
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d102      	bne.n	80037a8 <HAL_RCC_OscConfig+0x3a0>
 80037a2:	4b93      	ldr	r3, [pc, #588]	; (80039f0 <HAL_RCC_OscConfig+0x5e8>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	e013      	b.n	80037d0 <HAL_RCC_OscConfig+0x3c8>
 80037a8:	2302      	movs	r3, #2
 80037aa:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ae:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80037b2:	fa93 f3a3 	rbit	r3, r3
 80037b6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80037ba:	2302      	movs	r3, #2
 80037bc:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80037c0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80037c4:	fa93 f3a3 	rbit	r3, r3
 80037c8:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80037cc:	4b88      	ldr	r3, [pc, #544]	; (80039f0 <HAL_RCC_OscConfig+0x5e8>)
 80037ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d0:	2202      	movs	r2, #2
 80037d2:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80037d6:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80037da:	fa92 f2a2 	rbit	r2, r2
 80037de:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80037e2:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80037e6:	fab2 f282 	clz	r2, r2
 80037ea:	b2d2      	uxtb	r2, r2
 80037ec:	f042 0220 	orr.w	r2, r2, #32
 80037f0:	b2d2      	uxtb	r2, r2
 80037f2:	f002 021f 	and.w	r2, r2, #31
 80037f6:	2101      	movs	r1, #1
 80037f8:	fa01 f202 	lsl.w	r2, r1, r2
 80037fc:	4013      	ands	r3, r2
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d00a      	beq.n	8003818 <HAL_RCC_OscConfig+0x410>
 8003802:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003806:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	691b      	ldr	r3, [r3, #16]
 800380e:	2b01      	cmp	r3, #1
 8003810:	d002      	beq.n	8003818 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	f000 be2e 	b.w	8004474 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003818:	4b75      	ldr	r3, [pc, #468]	; (80039f0 <HAL_RCC_OscConfig+0x5e8>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003820:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003824:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	695b      	ldr	r3, [r3, #20]
 800382c:	21f8      	movs	r1, #248	; 0xf8
 800382e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003832:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003836:	fa91 f1a1 	rbit	r1, r1
 800383a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800383e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8003842:	fab1 f181 	clz	r1, r1
 8003846:	b2c9      	uxtb	r1, r1
 8003848:	408b      	lsls	r3, r1
 800384a:	4969      	ldr	r1, [pc, #420]	; (80039f0 <HAL_RCC_OscConfig+0x5e8>)
 800384c:	4313      	orrs	r3, r2
 800384e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003850:	e0fd      	b.n	8003a4e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003852:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003856:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	691b      	ldr	r3, [r3, #16]
 800385e:	2b00      	cmp	r3, #0
 8003860:	f000 8088 	beq.w	8003974 <HAL_RCC_OscConfig+0x56c>
 8003864:	2301      	movs	r3, #1
 8003866:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800386a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800386e:	fa93 f3a3 	rbit	r3, r3
 8003872:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8003876:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800387a:	fab3 f383 	clz	r3, r3
 800387e:	b2db      	uxtb	r3, r3
 8003880:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003884:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003888:	009b      	lsls	r3, r3, #2
 800388a:	461a      	mov	r2, r3
 800388c:	2301      	movs	r3, #1
 800388e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003890:	f7fe fb8e 	bl	8001fb0 <HAL_GetTick>
 8003894:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003898:	e00a      	b.n	80038b0 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800389a:	f7fe fb89 	bl	8001fb0 <HAL_GetTick>
 800389e:	4602      	mov	r2, r0
 80038a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d902      	bls.n	80038b0 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	f000 bde2 	b.w	8004474 <HAL_RCC_OscConfig+0x106c>
 80038b0:	2302      	movs	r3, #2
 80038b2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038b6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80038ba:	fa93 f3a3 	rbit	r3, r3
 80038be:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80038c2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038c6:	fab3 f383 	clz	r3, r3
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	095b      	lsrs	r3, r3, #5
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	f043 0301 	orr.w	r3, r3, #1
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d102      	bne.n	80038e0 <HAL_RCC_OscConfig+0x4d8>
 80038da:	4b45      	ldr	r3, [pc, #276]	; (80039f0 <HAL_RCC_OscConfig+0x5e8>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	e013      	b.n	8003908 <HAL_RCC_OscConfig+0x500>
 80038e0:	2302      	movs	r3, #2
 80038e2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038e6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80038ea:	fa93 f3a3 	rbit	r3, r3
 80038ee:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80038f2:	2302      	movs	r3, #2
 80038f4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80038f8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80038fc:	fa93 f3a3 	rbit	r3, r3
 8003900:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003904:	4b3a      	ldr	r3, [pc, #232]	; (80039f0 <HAL_RCC_OscConfig+0x5e8>)
 8003906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003908:	2202      	movs	r2, #2
 800390a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800390e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003912:	fa92 f2a2 	rbit	r2, r2
 8003916:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800391a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800391e:	fab2 f282 	clz	r2, r2
 8003922:	b2d2      	uxtb	r2, r2
 8003924:	f042 0220 	orr.w	r2, r2, #32
 8003928:	b2d2      	uxtb	r2, r2
 800392a:	f002 021f 	and.w	r2, r2, #31
 800392e:	2101      	movs	r1, #1
 8003930:	fa01 f202 	lsl.w	r2, r1, r2
 8003934:	4013      	ands	r3, r2
 8003936:	2b00      	cmp	r3, #0
 8003938:	d0af      	beq.n	800389a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800393a:	4b2d      	ldr	r3, [pc, #180]	; (80039f0 <HAL_RCC_OscConfig+0x5e8>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003942:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003946:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	695b      	ldr	r3, [r3, #20]
 800394e:	21f8      	movs	r1, #248	; 0xf8
 8003950:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003954:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003958:	fa91 f1a1 	rbit	r1, r1
 800395c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003960:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003964:	fab1 f181 	clz	r1, r1
 8003968:	b2c9      	uxtb	r1, r1
 800396a:	408b      	lsls	r3, r1
 800396c:	4920      	ldr	r1, [pc, #128]	; (80039f0 <HAL_RCC_OscConfig+0x5e8>)
 800396e:	4313      	orrs	r3, r2
 8003970:	600b      	str	r3, [r1, #0]
 8003972:	e06c      	b.n	8003a4e <HAL_RCC_OscConfig+0x646>
 8003974:	2301      	movs	r3, #1
 8003976:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800397a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800397e:	fa93 f3a3 	rbit	r3, r3
 8003982:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003986:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800398a:	fab3 f383 	clz	r3, r3
 800398e:	b2db      	uxtb	r3, r3
 8003990:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003994:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	461a      	mov	r2, r3
 800399c:	2300      	movs	r3, #0
 800399e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039a0:	f7fe fb06 	bl	8001fb0 <HAL_GetTick>
 80039a4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039a8:	e00a      	b.n	80039c0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039aa:	f7fe fb01 	bl	8001fb0 <HAL_GetTick>
 80039ae:	4602      	mov	r2, r0
 80039b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	2b02      	cmp	r3, #2
 80039b8:	d902      	bls.n	80039c0 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80039ba:	2303      	movs	r3, #3
 80039bc:	f000 bd5a 	b.w	8004474 <HAL_RCC_OscConfig+0x106c>
 80039c0:	2302      	movs	r3, #2
 80039c2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039c6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80039ca:	fa93 f3a3 	rbit	r3, r3
 80039ce:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80039d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039d6:	fab3 f383 	clz	r3, r3
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	095b      	lsrs	r3, r3, #5
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	f043 0301 	orr.w	r3, r3, #1
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d104      	bne.n	80039f4 <HAL_RCC_OscConfig+0x5ec>
 80039ea:	4b01      	ldr	r3, [pc, #4]	; (80039f0 <HAL_RCC_OscConfig+0x5e8>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	e015      	b.n	8003a1c <HAL_RCC_OscConfig+0x614>
 80039f0:	40021000 	.word	0x40021000
 80039f4:	2302      	movs	r3, #2
 80039f6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80039fe:	fa93 f3a3 	rbit	r3, r3
 8003a02:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003a06:	2302      	movs	r3, #2
 8003a08:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003a0c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003a10:	fa93 f3a3 	rbit	r3, r3
 8003a14:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003a18:	4bc8      	ldr	r3, [pc, #800]	; (8003d3c <HAL_RCC_OscConfig+0x934>)
 8003a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1c:	2202      	movs	r2, #2
 8003a1e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003a22:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003a26:	fa92 f2a2 	rbit	r2, r2
 8003a2a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003a2e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003a32:	fab2 f282 	clz	r2, r2
 8003a36:	b2d2      	uxtb	r2, r2
 8003a38:	f042 0220 	orr.w	r2, r2, #32
 8003a3c:	b2d2      	uxtb	r2, r2
 8003a3e:	f002 021f 	and.w	r2, r2, #31
 8003a42:	2101      	movs	r1, #1
 8003a44:	fa01 f202 	lsl.w	r2, r1, r2
 8003a48:	4013      	ands	r3, r2
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d1ad      	bne.n	80039aa <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a52:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 0308 	and.w	r3, r3, #8
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	f000 8110 	beq.w	8003c84 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a68:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	699b      	ldr	r3, [r3, #24]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d079      	beq.n	8003b68 <HAL_RCC_OscConfig+0x760>
 8003a74:	2301      	movs	r3, #1
 8003a76:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a7a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003a7e:	fa93 f3a3 	rbit	r3, r3
 8003a82:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003a86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a8a:	fab3 f383 	clz	r3, r3
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	461a      	mov	r2, r3
 8003a92:	4bab      	ldr	r3, [pc, #684]	; (8003d40 <HAL_RCC_OscConfig+0x938>)
 8003a94:	4413      	add	r3, r2
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	461a      	mov	r2, r3
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a9e:	f7fe fa87 	bl	8001fb0 <HAL_GetTick>
 8003aa2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003aa6:	e00a      	b.n	8003abe <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003aa8:	f7fe fa82 	bl	8001fb0 <HAL_GetTick>
 8003aac:	4602      	mov	r2, r0
 8003aae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	2b02      	cmp	r3, #2
 8003ab6:	d902      	bls.n	8003abe <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003ab8:	2303      	movs	r3, #3
 8003aba:	f000 bcdb 	b.w	8004474 <HAL_RCC_OscConfig+0x106c>
 8003abe:	2302      	movs	r3, #2
 8003ac0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ac4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003ac8:	fa93 f3a3 	rbit	r3, r3
 8003acc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003ad0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ad4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003ad8:	2202      	movs	r2, #2
 8003ada:	601a      	str	r2, [r3, #0]
 8003adc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ae0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	fa93 f2a3 	rbit	r2, r3
 8003aea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003af2:	601a      	str	r2, [r3, #0]
 8003af4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003af8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003afc:	2202      	movs	r2, #2
 8003afe:	601a      	str	r2, [r3, #0]
 8003b00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	fa93 f2a3 	rbit	r2, r3
 8003b0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b12:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003b16:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b18:	4b88      	ldr	r3, [pc, #544]	; (8003d3c <HAL_RCC_OscConfig+0x934>)
 8003b1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b20:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003b24:	2102      	movs	r1, #2
 8003b26:	6019      	str	r1, [r3, #0]
 8003b28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b2c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	fa93 f1a3 	rbit	r1, r3
 8003b36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b3a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003b3e:	6019      	str	r1, [r3, #0]
  return result;
 8003b40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b44:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	fab3 f383 	clz	r3, r3
 8003b4e:	b2db      	uxtb	r3, r3
 8003b50:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	f003 031f 	and.w	r3, r3, #31
 8003b5a:	2101      	movs	r1, #1
 8003b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b60:	4013      	ands	r3, r2
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d0a0      	beq.n	8003aa8 <HAL_RCC_OscConfig+0x6a0>
 8003b66:	e08d      	b.n	8003c84 <HAL_RCC_OscConfig+0x87c>
 8003b68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b6c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003b70:	2201      	movs	r2, #1
 8003b72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b78:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	fa93 f2a3 	rbit	r2, r3
 8003b82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b86:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003b8a:	601a      	str	r2, [r3, #0]
  return result;
 8003b8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b90:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003b94:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b96:	fab3 f383 	clz	r3, r3
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	4b68      	ldr	r3, [pc, #416]	; (8003d40 <HAL_RCC_OscConfig+0x938>)
 8003ba0:	4413      	add	r3, r2
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003baa:	f7fe fa01 	bl	8001fb0 <HAL_GetTick>
 8003bae:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bb2:	e00a      	b.n	8003bca <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bb4:	f7fe f9fc 	bl	8001fb0 <HAL_GetTick>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003bbe:	1ad3      	subs	r3, r2, r3
 8003bc0:	2b02      	cmp	r3, #2
 8003bc2:	d902      	bls.n	8003bca <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	f000 bc55 	b.w	8004474 <HAL_RCC_OscConfig+0x106c>
 8003bca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bce:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003bd2:	2202      	movs	r2, #2
 8003bd4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bda:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	fa93 f2a3 	rbit	r2, r3
 8003be4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003be8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003bec:	601a      	str	r2, [r3, #0]
 8003bee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bf2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003bf6:	2202      	movs	r2, #2
 8003bf8:	601a      	str	r2, [r3, #0]
 8003bfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bfe:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	fa93 f2a3 	rbit	r2, r3
 8003c08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c0c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003c10:	601a      	str	r2, [r3, #0]
 8003c12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003c1a:	2202      	movs	r2, #2
 8003c1c:	601a      	str	r2, [r3, #0]
 8003c1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	fa93 f2a3 	rbit	r2, r3
 8003c2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c30:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003c34:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c36:	4b41      	ldr	r3, [pc, #260]	; (8003d3c <HAL_RCC_OscConfig+0x934>)
 8003c38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c3e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003c42:	2102      	movs	r1, #2
 8003c44:	6019      	str	r1, [r3, #0]
 8003c46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c4a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	fa93 f1a3 	rbit	r1, r3
 8003c54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c58:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003c5c:	6019      	str	r1, [r3, #0]
  return result;
 8003c5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c62:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	fab3 f383 	clz	r3, r3
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	f003 031f 	and.w	r3, r3, #31
 8003c78:	2101      	movs	r1, #1
 8003c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c7e:	4013      	ands	r3, r2
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d197      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c88:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0304 	and.w	r3, r3, #4
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	f000 81a1 	beq.w	8003fdc <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ca0:	4b26      	ldr	r3, [pc, #152]	; (8003d3c <HAL_RCC_OscConfig+0x934>)
 8003ca2:	69db      	ldr	r3, [r3, #28]
 8003ca4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d116      	bne.n	8003cda <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cac:	4b23      	ldr	r3, [pc, #140]	; (8003d3c <HAL_RCC_OscConfig+0x934>)
 8003cae:	69db      	ldr	r3, [r3, #28]
 8003cb0:	4a22      	ldr	r2, [pc, #136]	; (8003d3c <HAL_RCC_OscConfig+0x934>)
 8003cb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cb6:	61d3      	str	r3, [r2, #28]
 8003cb8:	4b20      	ldr	r3, [pc, #128]	; (8003d3c <HAL_RCC_OscConfig+0x934>)
 8003cba:	69db      	ldr	r3, [r3, #28]
 8003cbc:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003cc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cc4:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003cc8:	601a      	str	r2, [r3, #0]
 8003cca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cce:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003cd2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cda:	4b1a      	ldr	r3, [pc, #104]	; (8003d44 <HAL_RCC_OscConfig+0x93c>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d11a      	bne.n	8003d1c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ce6:	4b17      	ldr	r3, [pc, #92]	; (8003d44 <HAL_RCC_OscConfig+0x93c>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a16      	ldr	r2, [pc, #88]	; (8003d44 <HAL_RCC_OscConfig+0x93c>)
 8003cec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cf0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cf2:	f7fe f95d 	bl	8001fb0 <HAL_GetTick>
 8003cf6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cfa:	e009      	b.n	8003d10 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cfc:	f7fe f958 	bl	8001fb0 <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003d06:	1ad3      	subs	r3, r2, r3
 8003d08:	2b64      	cmp	r3, #100	; 0x64
 8003d0a:	d901      	bls.n	8003d10 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003d0c:	2303      	movs	r3, #3
 8003d0e:	e3b1      	b.n	8004474 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d10:	4b0c      	ldr	r3, [pc, #48]	; (8003d44 <HAL_RCC_OscConfig+0x93c>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d0ef      	beq.n	8003cfc <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d20:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d10d      	bne.n	8003d48 <HAL_RCC_OscConfig+0x940>
 8003d2c:	4b03      	ldr	r3, [pc, #12]	; (8003d3c <HAL_RCC_OscConfig+0x934>)
 8003d2e:	6a1b      	ldr	r3, [r3, #32]
 8003d30:	4a02      	ldr	r2, [pc, #8]	; (8003d3c <HAL_RCC_OscConfig+0x934>)
 8003d32:	f043 0301 	orr.w	r3, r3, #1
 8003d36:	6213      	str	r3, [r2, #32]
 8003d38:	e03c      	b.n	8003db4 <HAL_RCC_OscConfig+0x9ac>
 8003d3a:	bf00      	nop
 8003d3c:	40021000 	.word	0x40021000
 8003d40:	10908120 	.word	0x10908120
 8003d44:	40007000 	.word	0x40007000
 8003d48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d4c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d10c      	bne.n	8003d72 <HAL_RCC_OscConfig+0x96a>
 8003d58:	4bc1      	ldr	r3, [pc, #772]	; (8004060 <HAL_RCC_OscConfig+0xc58>)
 8003d5a:	6a1b      	ldr	r3, [r3, #32]
 8003d5c:	4ac0      	ldr	r2, [pc, #768]	; (8004060 <HAL_RCC_OscConfig+0xc58>)
 8003d5e:	f023 0301 	bic.w	r3, r3, #1
 8003d62:	6213      	str	r3, [r2, #32]
 8003d64:	4bbe      	ldr	r3, [pc, #760]	; (8004060 <HAL_RCC_OscConfig+0xc58>)
 8003d66:	6a1b      	ldr	r3, [r3, #32]
 8003d68:	4abd      	ldr	r2, [pc, #756]	; (8004060 <HAL_RCC_OscConfig+0xc58>)
 8003d6a:	f023 0304 	bic.w	r3, r3, #4
 8003d6e:	6213      	str	r3, [r2, #32]
 8003d70:	e020      	b.n	8003db4 <HAL_RCC_OscConfig+0x9ac>
 8003d72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d76:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	68db      	ldr	r3, [r3, #12]
 8003d7e:	2b05      	cmp	r3, #5
 8003d80:	d10c      	bne.n	8003d9c <HAL_RCC_OscConfig+0x994>
 8003d82:	4bb7      	ldr	r3, [pc, #732]	; (8004060 <HAL_RCC_OscConfig+0xc58>)
 8003d84:	6a1b      	ldr	r3, [r3, #32]
 8003d86:	4ab6      	ldr	r2, [pc, #728]	; (8004060 <HAL_RCC_OscConfig+0xc58>)
 8003d88:	f043 0304 	orr.w	r3, r3, #4
 8003d8c:	6213      	str	r3, [r2, #32]
 8003d8e:	4bb4      	ldr	r3, [pc, #720]	; (8004060 <HAL_RCC_OscConfig+0xc58>)
 8003d90:	6a1b      	ldr	r3, [r3, #32]
 8003d92:	4ab3      	ldr	r2, [pc, #716]	; (8004060 <HAL_RCC_OscConfig+0xc58>)
 8003d94:	f043 0301 	orr.w	r3, r3, #1
 8003d98:	6213      	str	r3, [r2, #32]
 8003d9a:	e00b      	b.n	8003db4 <HAL_RCC_OscConfig+0x9ac>
 8003d9c:	4bb0      	ldr	r3, [pc, #704]	; (8004060 <HAL_RCC_OscConfig+0xc58>)
 8003d9e:	6a1b      	ldr	r3, [r3, #32]
 8003da0:	4aaf      	ldr	r2, [pc, #700]	; (8004060 <HAL_RCC_OscConfig+0xc58>)
 8003da2:	f023 0301 	bic.w	r3, r3, #1
 8003da6:	6213      	str	r3, [r2, #32]
 8003da8:	4bad      	ldr	r3, [pc, #692]	; (8004060 <HAL_RCC_OscConfig+0xc58>)
 8003daa:	6a1b      	ldr	r3, [r3, #32]
 8003dac:	4aac      	ldr	r2, [pc, #688]	; (8004060 <HAL_RCC_OscConfig+0xc58>)
 8003dae:	f023 0304 	bic.w	r3, r3, #4
 8003db2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003db4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003db8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	f000 8081 	beq.w	8003ec8 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dc6:	f7fe f8f3 	bl	8001fb0 <HAL_GetTick>
 8003dca:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dce:	e00b      	b.n	8003de8 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003dd0:	f7fe f8ee 	bl	8001fb0 <HAL_GetTick>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d901      	bls.n	8003de8 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003de4:	2303      	movs	r3, #3
 8003de6:	e345      	b.n	8004474 <HAL_RCC_OscConfig+0x106c>
 8003de8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dec:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003df0:	2202      	movs	r2, #2
 8003df2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003df4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003df8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	fa93 f2a3 	rbit	r2, r3
 8003e02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e06:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003e0a:	601a      	str	r2, [r3, #0]
 8003e0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e10:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003e14:	2202      	movs	r2, #2
 8003e16:	601a      	str	r2, [r3, #0]
 8003e18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e1c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	fa93 f2a3 	rbit	r2, r3
 8003e26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e2a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003e2e:	601a      	str	r2, [r3, #0]
  return result;
 8003e30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e34:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003e38:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e3a:	fab3 f383 	clz	r3, r3
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	095b      	lsrs	r3, r3, #5
 8003e42:	b2db      	uxtb	r3, r3
 8003e44:	f043 0302 	orr.w	r3, r3, #2
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	2b02      	cmp	r3, #2
 8003e4c:	d102      	bne.n	8003e54 <HAL_RCC_OscConfig+0xa4c>
 8003e4e:	4b84      	ldr	r3, [pc, #528]	; (8004060 <HAL_RCC_OscConfig+0xc58>)
 8003e50:	6a1b      	ldr	r3, [r3, #32]
 8003e52:	e013      	b.n	8003e7c <HAL_RCC_OscConfig+0xa74>
 8003e54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e58:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003e5c:	2202      	movs	r2, #2
 8003e5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e64:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	fa93 f2a3 	rbit	r2, r3
 8003e6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e72:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003e76:	601a      	str	r2, [r3, #0]
 8003e78:	4b79      	ldr	r3, [pc, #484]	; (8004060 <HAL_RCC_OscConfig+0xc58>)
 8003e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003e80:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003e84:	2102      	movs	r1, #2
 8003e86:	6011      	str	r1, [r2, #0]
 8003e88:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003e8c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003e90:	6812      	ldr	r2, [r2, #0]
 8003e92:	fa92 f1a2 	rbit	r1, r2
 8003e96:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003e9a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003e9e:	6011      	str	r1, [r2, #0]
  return result;
 8003ea0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ea4:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003ea8:	6812      	ldr	r2, [r2, #0]
 8003eaa:	fab2 f282 	clz	r2, r2
 8003eae:	b2d2      	uxtb	r2, r2
 8003eb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003eb4:	b2d2      	uxtb	r2, r2
 8003eb6:	f002 021f 	and.w	r2, r2, #31
 8003eba:	2101      	movs	r1, #1
 8003ebc:	fa01 f202 	lsl.w	r2, r1, r2
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d084      	beq.n	8003dd0 <HAL_RCC_OscConfig+0x9c8>
 8003ec6:	e07f      	b.n	8003fc8 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ec8:	f7fe f872 	bl	8001fb0 <HAL_GetTick>
 8003ecc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ed0:	e00b      	b.n	8003eea <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ed2:	f7fe f86d 	bl	8001fb0 <HAL_GetTick>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d901      	bls.n	8003eea <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	e2c4      	b.n	8004474 <HAL_RCC_OscConfig+0x106c>
 8003eea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003eee:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003ef2:	2202      	movs	r2, #2
 8003ef4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ef6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003efa:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	fa93 f2a3 	rbit	r2, r3
 8003f04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f08:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003f0c:	601a      	str	r2, [r3, #0]
 8003f0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f12:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003f16:	2202      	movs	r2, #2
 8003f18:	601a      	str	r2, [r3, #0]
 8003f1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f1e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	fa93 f2a3 	rbit	r2, r3
 8003f28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f2c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003f30:	601a      	str	r2, [r3, #0]
  return result;
 8003f32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f36:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003f3a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f3c:	fab3 f383 	clz	r3, r3
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	095b      	lsrs	r3, r3, #5
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	f043 0302 	orr.w	r3, r3, #2
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	2b02      	cmp	r3, #2
 8003f4e:	d102      	bne.n	8003f56 <HAL_RCC_OscConfig+0xb4e>
 8003f50:	4b43      	ldr	r3, [pc, #268]	; (8004060 <HAL_RCC_OscConfig+0xc58>)
 8003f52:	6a1b      	ldr	r3, [r3, #32]
 8003f54:	e013      	b.n	8003f7e <HAL_RCC_OscConfig+0xb76>
 8003f56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f5a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003f5e:	2202      	movs	r2, #2
 8003f60:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f66:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	fa93 f2a3 	rbit	r2, r3
 8003f70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f74:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003f78:	601a      	str	r2, [r3, #0]
 8003f7a:	4b39      	ldr	r3, [pc, #228]	; (8004060 <HAL_RCC_OscConfig+0xc58>)
 8003f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f82:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003f86:	2102      	movs	r1, #2
 8003f88:	6011      	str	r1, [r2, #0]
 8003f8a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f8e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003f92:	6812      	ldr	r2, [r2, #0]
 8003f94:	fa92 f1a2 	rbit	r1, r2
 8003f98:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f9c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003fa0:	6011      	str	r1, [r2, #0]
  return result;
 8003fa2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003fa6:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003faa:	6812      	ldr	r2, [r2, #0]
 8003fac:	fab2 f282 	clz	r2, r2
 8003fb0:	b2d2      	uxtb	r2, r2
 8003fb2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003fb6:	b2d2      	uxtb	r2, r2
 8003fb8:	f002 021f 	and.w	r2, r2, #31
 8003fbc:	2101      	movs	r1, #1
 8003fbe:	fa01 f202 	lsl.w	r2, r1, r2
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d184      	bne.n	8003ed2 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003fc8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d105      	bne.n	8003fdc <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fd0:	4b23      	ldr	r3, [pc, #140]	; (8004060 <HAL_RCC_OscConfig+0xc58>)
 8003fd2:	69db      	ldr	r3, [r3, #28]
 8003fd4:	4a22      	ldr	r2, [pc, #136]	; (8004060 <HAL_RCC_OscConfig+0xc58>)
 8003fd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fda:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fe0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	69db      	ldr	r3, [r3, #28]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	f000 8242 	beq.w	8004472 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003fee:	4b1c      	ldr	r3, [pc, #112]	; (8004060 <HAL_RCC_OscConfig+0xc58>)
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	f003 030c 	and.w	r3, r3, #12
 8003ff6:	2b08      	cmp	r3, #8
 8003ff8:	f000 8213 	beq.w	8004422 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ffc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004000:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	69db      	ldr	r3, [r3, #28]
 8004008:	2b02      	cmp	r3, #2
 800400a:	f040 8162 	bne.w	80042d2 <HAL_RCC_OscConfig+0xeca>
 800400e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004012:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004016:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800401a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800401c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004020:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	fa93 f2a3 	rbit	r2, r3
 800402a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800402e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004032:	601a      	str	r2, [r3, #0]
  return result;
 8004034:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004038:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800403c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800403e:	fab3 f383 	clz	r3, r3
 8004042:	b2db      	uxtb	r3, r3
 8004044:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004048:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	461a      	mov	r2, r3
 8004050:	2300      	movs	r3, #0
 8004052:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004054:	f7fd ffac 	bl	8001fb0 <HAL_GetTick>
 8004058:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800405c:	e00c      	b.n	8004078 <HAL_RCC_OscConfig+0xc70>
 800405e:	bf00      	nop
 8004060:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004064:	f7fd ffa4 	bl	8001fb0 <HAL_GetTick>
 8004068:	4602      	mov	r2, r0
 800406a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800406e:	1ad3      	subs	r3, r2, r3
 8004070:	2b02      	cmp	r3, #2
 8004072:	d901      	bls.n	8004078 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8004074:	2303      	movs	r3, #3
 8004076:	e1fd      	b.n	8004474 <HAL_RCC_OscConfig+0x106c>
 8004078:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800407c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004080:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004084:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004086:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800408a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	fa93 f2a3 	rbit	r2, r3
 8004094:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004098:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800409c:	601a      	str	r2, [r3, #0]
  return result;
 800409e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040a2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80040a6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040a8:	fab3 f383 	clz	r3, r3
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	095b      	lsrs	r3, r3, #5
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	f043 0301 	orr.w	r3, r3, #1
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d102      	bne.n	80040c2 <HAL_RCC_OscConfig+0xcba>
 80040bc:	4bb0      	ldr	r3, [pc, #704]	; (8004380 <HAL_RCC_OscConfig+0xf78>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	e027      	b.n	8004112 <HAL_RCC_OscConfig+0xd0a>
 80040c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040c6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80040ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80040ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040d4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	fa93 f2a3 	rbit	r2, r3
 80040de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040e2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80040e6:	601a      	str	r2, [r3, #0]
 80040e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040ec:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80040f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80040f4:	601a      	str	r2, [r3, #0]
 80040f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040fa:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	fa93 f2a3 	rbit	r2, r3
 8004104:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004108:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800410c:	601a      	str	r2, [r3, #0]
 800410e:	4b9c      	ldr	r3, [pc, #624]	; (8004380 <HAL_RCC_OscConfig+0xf78>)
 8004110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004112:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004116:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800411a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800411e:	6011      	str	r1, [r2, #0]
 8004120:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004124:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8004128:	6812      	ldr	r2, [r2, #0]
 800412a:	fa92 f1a2 	rbit	r1, r2
 800412e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004132:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004136:	6011      	str	r1, [r2, #0]
  return result;
 8004138:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800413c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004140:	6812      	ldr	r2, [r2, #0]
 8004142:	fab2 f282 	clz	r2, r2
 8004146:	b2d2      	uxtb	r2, r2
 8004148:	f042 0220 	orr.w	r2, r2, #32
 800414c:	b2d2      	uxtb	r2, r2
 800414e:	f002 021f 	and.w	r2, r2, #31
 8004152:	2101      	movs	r1, #1
 8004154:	fa01 f202 	lsl.w	r2, r1, r2
 8004158:	4013      	ands	r3, r2
 800415a:	2b00      	cmp	r3, #0
 800415c:	d182      	bne.n	8004064 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800415e:	4b88      	ldr	r3, [pc, #544]	; (8004380 <HAL_RCC_OscConfig+0xf78>)
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004166:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800416a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004172:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004176:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	6a1b      	ldr	r3, [r3, #32]
 800417e:	430b      	orrs	r3, r1
 8004180:	497f      	ldr	r1, [pc, #508]	; (8004380 <HAL_RCC_OscConfig+0xf78>)
 8004182:	4313      	orrs	r3, r2
 8004184:	604b      	str	r3, [r1, #4]
 8004186:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800418a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800418e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004192:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004194:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004198:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	fa93 f2a3 	rbit	r2, r3
 80041a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041a6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80041aa:	601a      	str	r2, [r3, #0]
  return result;
 80041ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041b0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80041b4:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041b6:	fab3 f383 	clz	r3, r3
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80041c0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	461a      	mov	r2, r3
 80041c8:	2301      	movs	r3, #1
 80041ca:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041cc:	f7fd fef0 	bl	8001fb0 <HAL_GetTick>
 80041d0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80041d4:	e009      	b.n	80041ea <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041d6:	f7fd feeb 	bl	8001fb0 <HAL_GetTick>
 80041da:	4602      	mov	r2, r0
 80041dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	d901      	bls.n	80041ea <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80041e6:	2303      	movs	r3, #3
 80041e8:	e144      	b.n	8004474 <HAL_RCC_OscConfig+0x106c>
 80041ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041ee:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80041f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80041f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041fc:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	fa93 f2a3 	rbit	r2, r3
 8004206:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800420a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800420e:	601a      	str	r2, [r3, #0]
  return result;
 8004210:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004214:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004218:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800421a:	fab3 f383 	clz	r3, r3
 800421e:	b2db      	uxtb	r3, r3
 8004220:	095b      	lsrs	r3, r3, #5
 8004222:	b2db      	uxtb	r3, r3
 8004224:	f043 0301 	orr.w	r3, r3, #1
 8004228:	b2db      	uxtb	r3, r3
 800422a:	2b01      	cmp	r3, #1
 800422c:	d102      	bne.n	8004234 <HAL_RCC_OscConfig+0xe2c>
 800422e:	4b54      	ldr	r3, [pc, #336]	; (8004380 <HAL_RCC_OscConfig+0xf78>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	e027      	b.n	8004284 <HAL_RCC_OscConfig+0xe7c>
 8004234:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004238:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800423c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004240:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004242:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004246:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	fa93 f2a3 	rbit	r2, r3
 8004250:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004254:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004258:	601a      	str	r2, [r3, #0]
 800425a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800425e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004262:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004266:	601a      	str	r2, [r3, #0]
 8004268:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800426c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	fa93 f2a3 	rbit	r2, r3
 8004276:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800427a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800427e:	601a      	str	r2, [r3, #0]
 8004280:	4b3f      	ldr	r3, [pc, #252]	; (8004380 <HAL_RCC_OscConfig+0xf78>)
 8004282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004284:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004288:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800428c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004290:	6011      	str	r1, [r2, #0]
 8004292:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004296:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800429a:	6812      	ldr	r2, [r2, #0]
 800429c:	fa92 f1a2 	rbit	r1, r2
 80042a0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80042a4:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80042a8:	6011      	str	r1, [r2, #0]
  return result;
 80042aa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80042ae:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80042b2:	6812      	ldr	r2, [r2, #0]
 80042b4:	fab2 f282 	clz	r2, r2
 80042b8:	b2d2      	uxtb	r2, r2
 80042ba:	f042 0220 	orr.w	r2, r2, #32
 80042be:	b2d2      	uxtb	r2, r2
 80042c0:	f002 021f 	and.w	r2, r2, #31
 80042c4:	2101      	movs	r1, #1
 80042c6:	fa01 f202 	lsl.w	r2, r1, r2
 80042ca:	4013      	ands	r3, r2
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d082      	beq.n	80041d6 <HAL_RCC_OscConfig+0xdce>
 80042d0:	e0cf      	b.n	8004472 <HAL_RCC_OscConfig+0x106a>
 80042d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042d6:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80042da:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80042de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042e4:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	fa93 f2a3 	rbit	r2, r3
 80042ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042f2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80042f6:	601a      	str	r2, [r3, #0]
  return result;
 80042f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042fc:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004300:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004302:	fab3 f383 	clz	r3, r3
 8004306:	b2db      	uxtb	r3, r3
 8004308:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800430c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	461a      	mov	r2, r3
 8004314:	2300      	movs	r3, #0
 8004316:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004318:	f7fd fe4a 	bl	8001fb0 <HAL_GetTick>
 800431c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004320:	e009      	b.n	8004336 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004322:	f7fd fe45 	bl	8001fb0 <HAL_GetTick>
 8004326:	4602      	mov	r2, r0
 8004328:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	2b02      	cmp	r3, #2
 8004330:	d901      	bls.n	8004336 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8004332:	2303      	movs	r3, #3
 8004334:	e09e      	b.n	8004474 <HAL_RCC_OscConfig+0x106c>
 8004336:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800433a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800433e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004342:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004344:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004348:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	fa93 f2a3 	rbit	r2, r3
 8004352:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004356:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800435a:	601a      	str	r2, [r3, #0]
  return result;
 800435c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004360:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004364:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004366:	fab3 f383 	clz	r3, r3
 800436a:	b2db      	uxtb	r3, r3
 800436c:	095b      	lsrs	r3, r3, #5
 800436e:	b2db      	uxtb	r3, r3
 8004370:	f043 0301 	orr.w	r3, r3, #1
 8004374:	b2db      	uxtb	r3, r3
 8004376:	2b01      	cmp	r3, #1
 8004378:	d104      	bne.n	8004384 <HAL_RCC_OscConfig+0xf7c>
 800437a:	4b01      	ldr	r3, [pc, #4]	; (8004380 <HAL_RCC_OscConfig+0xf78>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	e029      	b.n	80043d4 <HAL_RCC_OscConfig+0xfcc>
 8004380:	40021000 	.word	0x40021000
 8004384:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004388:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800438c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004390:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004392:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004396:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	fa93 f2a3 	rbit	r2, r3
 80043a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043a4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80043a8:	601a      	str	r2, [r3, #0]
 80043aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043ae:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80043b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80043b6:	601a      	str	r2, [r3, #0]
 80043b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043bc:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	fa93 f2a3 	rbit	r2, r3
 80043c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043ca:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80043ce:	601a      	str	r2, [r3, #0]
 80043d0:	4b2b      	ldr	r3, [pc, #172]	; (8004480 <HAL_RCC_OscConfig+0x1078>)
 80043d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80043d8:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80043dc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80043e0:	6011      	str	r1, [r2, #0]
 80043e2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80043e6:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80043ea:	6812      	ldr	r2, [r2, #0]
 80043ec:	fa92 f1a2 	rbit	r1, r2
 80043f0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80043f4:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80043f8:	6011      	str	r1, [r2, #0]
  return result;
 80043fa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80043fe:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004402:	6812      	ldr	r2, [r2, #0]
 8004404:	fab2 f282 	clz	r2, r2
 8004408:	b2d2      	uxtb	r2, r2
 800440a:	f042 0220 	orr.w	r2, r2, #32
 800440e:	b2d2      	uxtb	r2, r2
 8004410:	f002 021f 	and.w	r2, r2, #31
 8004414:	2101      	movs	r1, #1
 8004416:	fa01 f202 	lsl.w	r2, r1, r2
 800441a:	4013      	ands	r3, r2
 800441c:	2b00      	cmp	r3, #0
 800441e:	d180      	bne.n	8004322 <HAL_RCC_OscConfig+0xf1a>
 8004420:	e027      	b.n	8004472 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004422:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004426:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	69db      	ldr	r3, [r3, #28]
 800442e:	2b01      	cmp	r3, #1
 8004430:	d101      	bne.n	8004436 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	e01e      	b.n	8004474 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004436:	4b12      	ldr	r3, [pc, #72]	; (8004480 <HAL_RCC_OscConfig+0x1078>)
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800443e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004442:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004446:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800444a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	6a1b      	ldr	r3, [r3, #32]
 8004452:	429a      	cmp	r2, r3
 8004454:	d10b      	bne.n	800446e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004456:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800445a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800445e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004462:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800446a:	429a      	cmp	r2, r3
 800446c:	d001      	beq.n	8004472 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e000      	b.n	8004474 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8004472:	2300      	movs	r3, #0
}
 8004474:	4618      	mov	r0, r3
 8004476:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}
 800447e:	bf00      	nop
 8004480:	40021000 	.word	0x40021000

08004484 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b09e      	sub	sp, #120	; 0x78
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800448e:	2300      	movs	r3, #0
 8004490:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d101      	bne.n	800449c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	e162      	b.n	8004762 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800449c:	4b90      	ldr	r3, [pc, #576]	; (80046e0 <HAL_RCC_ClockConfig+0x25c>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 0307 	and.w	r3, r3, #7
 80044a4:	683a      	ldr	r2, [r7, #0]
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d910      	bls.n	80044cc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044aa:	4b8d      	ldr	r3, [pc, #564]	; (80046e0 <HAL_RCC_ClockConfig+0x25c>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f023 0207 	bic.w	r2, r3, #7
 80044b2:	498b      	ldr	r1, [pc, #556]	; (80046e0 <HAL_RCC_ClockConfig+0x25c>)
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	4313      	orrs	r3, r2
 80044b8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044ba:	4b89      	ldr	r3, [pc, #548]	; (80046e0 <HAL_RCC_ClockConfig+0x25c>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 0307 	and.w	r3, r3, #7
 80044c2:	683a      	ldr	r2, [r7, #0]
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d001      	beq.n	80044cc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e14a      	b.n	8004762 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 0302 	and.w	r3, r3, #2
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d008      	beq.n	80044ea <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044d8:	4b82      	ldr	r3, [pc, #520]	; (80046e4 <HAL_RCC_ClockConfig+0x260>)
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	497f      	ldr	r1, [pc, #508]	; (80046e4 <HAL_RCC_ClockConfig+0x260>)
 80044e6:	4313      	orrs	r3, r2
 80044e8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 0301 	and.w	r3, r3, #1
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	f000 80dc 	beq.w	80046b0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d13c      	bne.n	800457a <HAL_RCC_ClockConfig+0xf6>
 8004500:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004504:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004506:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004508:	fa93 f3a3 	rbit	r3, r3
 800450c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800450e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004510:	fab3 f383 	clz	r3, r3
 8004514:	b2db      	uxtb	r3, r3
 8004516:	095b      	lsrs	r3, r3, #5
 8004518:	b2db      	uxtb	r3, r3
 800451a:	f043 0301 	orr.w	r3, r3, #1
 800451e:	b2db      	uxtb	r3, r3
 8004520:	2b01      	cmp	r3, #1
 8004522:	d102      	bne.n	800452a <HAL_RCC_ClockConfig+0xa6>
 8004524:	4b6f      	ldr	r3, [pc, #444]	; (80046e4 <HAL_RCC_ClockConfig+0x260>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	e00f      	b.n	800454a <HAL_RCC_ClockConfig+0xc6>
 800452a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800452e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004530:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004532:	fa93 f3a3 	rbit	r3, r3
 8004536:	667b      	str	r3, [r7, #100]	; 0x64
 8004538:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800453c:	663b      	str	r3, [r7, #96]	; 0x60
 800453e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004540:	fa93 f3a3 	rbit	r3, r3
 8004544:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004546:	4b67      	ldr	r3, [pc, #412]	; (80046e4 <HAL_RCC_ClockConfig+0x260>)
 8004548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800454e:	65ba      	str	r2, [r7, #88]	; 0x58
 8004550:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004552:	fa92 f2a2 	rbit	r2, r2
 8004556:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004558:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800455a:	fab2 f282 	clz	r2, r2
 800455e:	b2d2      	uxtb	r2, r2
 8004560:	f042 0220 	orr.w	r2, r2, #32
 8004564:	b2d2      	uxtb	r2, r2
 8004566:	f002 021f 	and.w	r2, r2, #31
 800456a:	2101      	movs	r1, #1
 800456c:	fa01 f202 	lsl.w	r2, r1, r2
 8004570:	4013      	ands	r3, r2
 8004572:	2b00      	cmp	r3, #0
 8004574:	d17b      	bne.n	800466e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e0f3      	b.n	8004762 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	2b02      	cmp	r3, #2
 8004580:	d13c      	bne.n	80045fc <HAL_RCC_ClockConfig+0x178>
 8004582:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004586:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004588:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800458a:	fa93 f3a3 	rbit	r3, r3
 800458e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004590:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004592:	fab3 f383 	clz	r3, r3
 8004596:	b2db      	uxtb	r3, r3
 8004598:	095b      	lsrs	r3, r3, #5
 800459a:	b2db      	uxtb	r3, r3
 800459c:	f043 0301 	orr.w	r3, r3, #1
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d102      	bne.n	80045ac <HAL_RCC_ClockConfig+0x128>
 80045a6:	4b4f      	ldr	r3, [pc, #316]	; (80046e4 <HAL_RCC_ClockConfig+0x260>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	e00f      	b.n	80045cc <HAL_RCC_ClockConfig+0x148>
 80045ac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80045b0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045b4:	fa93 f3a3 	rbit	r3, r3
 80045b8:	647b      	str	r3, [r7, #68]	; 0x44
 80045ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80045be:	643b      	str	r3, [r7, #64]	; 0x40
 80045c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045c2:	fa93 f3a3 	rbit	r3, r3
 80045c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045c8:	4b46      	ldr	r3, [pc, #280]	; (80046e4 <HAL_RCC_ClockConfig+0x260>)
 80045ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80045d0:	63ba      	str	r2, [r7, #56]	; 0x38
 80045d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80045d4:	fa92 f2a2 	rbit	r2, r2
 80045d8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80045da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80045dc:	fab2 f282 	clz	r2, r2
 80045e0:	b2d2      	uxtb	r2, r2
 80045e2:	f042 0220 	orr.w	r2, r2, #32
 80045e6:	b2d2      	uxtb	r2, r2
 80045e8:	f002 021f 	and.w	r2, r2, #31
 80045ec:	2101      	movs	r1, #1
 80045ee:	fa01 f202 	lsl.w	r2, r1, r2
 80045f2:	4013      	ands	r3, r2
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d13a      	bne.n	800466e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e0b2      	b.n	8004762 <HAL_RCC_ClockConfig+0x2de>
 80045fc:	2302      	movs	r3, #2
 80045fe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004602:	fa93 f3a3 	rbit	r3, r3
 8004606:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800460a:	fab3 f383 	clz	r3, r3
 800460e:	b2db      	uxtb	r3, r3
 8004610:	095b      	lsrs	r3, r3, #5
 8004612:	b2db      	uxtb	r3, r3
 8004614:	f043 0301 	orr.w	r3, r3, #1
 8004618:	b2db      	uxtb	r3, r3
 800461a:	2b01      	cmp	r3, #1
 800461c:	d102      	bne.n	8004624 <HAL_RCC_ClockConfig+0x1a0>
 800461e:	4b31      	ldr	r3, [pc, #196]	; (80046e4 <HAL_RCC_ClockConfig+0x260>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	e00d      	b.n	8004640 <HAL_RCC_ClockConfig+0x1bc>
 8004624:	2302      	movs	r3, #2
 8004626:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800462a:	fa93 f3a3 	rbit	r3, r3
 800462e:	627b      	str	r3, [r7, #36]	; 0x24
 8004630:	2302      	movs	r3, #2
 8004632:	623b      	str	r3, [r7, #32]
 8004634:	6a3b      	ldr	r3, [r7, #32]
 8004636:	fa93 f3a3 	rbit	r3, r3
 800463a:	61fb      	str	r3, [r7, #28]
 800463c:	4b29      	ldr	r3, [pc, #164]	; (80046e4 <HAL_RCC_ClockConfig+0x260>)
 800463e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004640:	2202      	movs	r2, #2
 8004642:	61ba      	str	r2, [r7, #24]
 8004644:	69ba      	ldr	r2, [r7, #24]
 8004646:	fa92 f2a2 	rbit	r2, r2
 800464a:	617a      	str	r2, [r7, #20]
  return result;
 800464c:	697a      	ldr	r2, [r7, #20]
 800464e:	fab2 f282 	clz	r2, r2
 8004652:	b2d2      	uxtb	r2, r2
 8004654:	f042 0220 	orr.w	r2, r2, #32
 8004658:	b2d2      	uxtb	r2, r2
 800465a:	f002 021f 	and.w	r2, r2, #31
 800465e:	2101      	movs	r1, #1
 8004660:	fa01 f202 	lsl.w	r2, r1, r2
 8004664:	4013      	ands	r3, r2
 8004666:	2b00      	cmp	r3, #0
 8004668:	d101      	bne.n	800466e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e079      	b.n	8004762 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800466e:	4b1d      	ldr	r3, [pc, #116]	; (80046e4 <HAL_RCC_ClockConfig+0x260>)
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	f023 0203 	bic.w	r2, r3, #3
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	491a      	ldr	r1, [pc, #104]	; (80046e4 <HAL_RCC_ClockConfig+0x260>)
 800467c:	4313      	orrs	r3, r2
 800467e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004680:	f7fd fc96 	bl	8001fb0 <HAL_GetTick>
 8004684:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004686:	e00a      	b.n	800469e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004688:	f7fd fc92 	bl	8001fb0 <HAL_GetTick>
 800468c:	4602      	mov	r2, r0
 800468e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004690:	1ad3      	subs	r3, r2, r3
 8004692:	f241 3288 	movw	r2, #5000	; 0x1388
 8004696:	4293      	cmp	r3, r2
 8004698:	d901      	bls.n	800469e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800469a:	2303      	movs	r3, #3
 800469c:	e061      	b.n	8004762 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800469e:	4b11      	ldr	r3, [pc, #68]	; (80046e4 <HAL_RCC_ClockConfig+0x260>)
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	f003 020c 	and.w	r2, r3, #12
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d1eb      	bne.n	8004688 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80046b0:	4b0b      	ldr	r3, [pc, #44]	; (80046e0 <HAL_RCC_ClockConfig+0x25c>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f003 0307 	and.w	r3, r3, #7
 80046b8:	683a      	ldr	r2, [r7, #0]
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d214      	bcs.n	80046e8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046be:	4b08      	ldr	r3, [pc, #32]	; (80046e0 <HAL_RCC_ClockConfig+0x25c>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f023 0207 	bic.w	r2, r3, #7
 80046c6:	4906      	ldr	r1, [pc, #24]	; (80046e0 <HAL_RCC_ClockConfig+0x25c>)
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046ce:	4b04      	ldr	r3, [pc, #16]	; (80046e0 <HAL_RCC_ClockConfig+0x25c>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 0307 	and.w	r3, r3, #7
 80046d6:	683a      	ldr	r2, [r7, #0]
 80046d8:	429a      	cmp	r2, r3
 80046da:	d005      	beq.n	80046e8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	e040      	b.n	8004762 <HAL_RCC_ClockConfig+0x2de>
 80046e0:	40022000 	.word	0x40022000
 80046e4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 0304 	and.w	r3, r3, #4
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d008      	beq.n	8004706 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046f4:	4b1d      	ldr	r3, [pc, #116]	; (800476c <HAL_RCC_ClockConfig+0x2e8>)
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	491a      	ldr	r1, [pc, #104]	; (800476c <HAL_RCC_ClockConfig+0x2e8>)
 8004702:	4313      	orrs	r3, r2
 8004704:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 0308 	and.w	r3, r3, #8
 800470e:	2b00      	cmp	r3, #0
 8004710:	d009      	beq.n	8004726 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004712:	4b16      	ldr	r3, [pc, #88]	; (800476c <HAL_RCC_ClockConfig+0x2e8>)
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	691b      	ldr	r3, [r3, #16]
 800471e:	00db      	lsls	r3, r3, #3
 8004720:	4912      	ldr	r1, [pc, #72]	; (800476c <HAL_RCC_ClockConfig+0x2e8>)
 8004722:	4313      	orrs	r3, r2
 8004724:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004726:	f000 f829 	bl	800477c <HAL_RCC_GetSysClockFreq>
 800472a:	4601      	mov	r1, r0
 800472c:	4b0f      	ldr	r3, [pc, #60]	; (800476c <HAL_RCC_ClockConfig+0x2e8>)
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004734:	22f0      	movs	r2, #240	; 0xf0
 8004736:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004738:	693a      	ldr	r2, [r7, #16]
 800473a:	fa92 f2a2 	rbit	r2, r2
 800473e:	60fa      	str	r2, [r7, #12]
  return result;
 8004740:	68fa      	ldr	r2, [r7, #12]
 8004742:	fab2 f282 	clz	r2, r2
 8004746:	b2d2      	uxtb	r2, r2
 8004748:	40d3      	lsrs	r3, r2
 800474a:	4a09      	ldr	r2, [pc, #36]	; (8004770 <HAL_RCC_ClockConfig+0x2ec>)
 800474c:	5cd3      	ldrb	r3, [r2, r3]
 800474e:	fa21 f303 	lsr.w	r3, r1, r3
 8004752:	4a08      	ldr	r2, [pc, #32]	; (8004774 <HAL_RCC_ClockConfig+0x2f0>)
 8004754:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004756:	4b08      	ldr	r3, [pc, #32]	; (8004778 <HAL_RCC_ClockConfig+0x2f4>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4618      	mov	r0, r3
 800475c:	f7fd fbe4 	bl	8001f28 <HAL_InitTick>
  
  return HAL_OK;
 8004760:	2300      	movs	r3, #0
}
 8004762:	4618      	mov	r0, r3
 8004764:	3778      	adds	r7, #120	; 0x78
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}
 800476a:	bf00      	nop
 800476c:	40021000 	.word	0x40021000
 8004770:	0800b3e0 	.word	0x0800b3e0
 8004774:	20000000 	.word	0x20000000
 8004778:	20000004 	.word	0x20000004

0800477c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800477c:	b480      	push	{r7}
 800477e:	b08b      	sub	sp, #44	; 0x2c
 8004780:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004782:	2300      	movs	r3, #0
 8004784:	61fb      	str	r3, [r7, #28]
 8004786:	2300      	movs	r3, #0
 8004788:	61bb      	str	r3, [r7, #24]
 800478a:	2300      	movs	r3, #0
 800478c:	627b      	str	r3, [r7, #36]	; 0x24
 800478e:	2300      	movs	r3, #0
 8004790:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004792:	2300      	movs	r3, #0
 8004794:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004796:	4b29      	ldr	r3, [pc, #164]	; (800483c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800479c:	69fb      	ldr	r3, [r7, #28]
 800479e:	f003 030c 	and.w	r3, r3, #12
 80047a2:	2b04      	cmp	r3, #4
 80047a4:	d002      	beq.n	80047ac <HAL_RCC_GetSysClockFreq+0x30>
 80047a6:	2b08      	cmp	r3, #8
 80047a8:	d003      	beq.n	80047b2 <HAL_RCC_GetSysClockFreq+0x36>
 80047aa:	e03c      	b.n	8004826 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80047ac:	4b24      	ldr	r3, [pc, #144]	; (8004840 <HAL_RCC_GetSysClockFreq+0xc4>)
 80047ae:	623b      	str	r3, [r7, #32]
      break;
 80047b0:	e03c      	b.n	800482c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80047b2:	69fb      	ldr	r3, [r7, #28]
 80047b4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80047b8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80047bc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047be:	68ba      	ldr	r2, [r7, #8]
 80047c0:	fa92 f2a2 	rbit	r2, r2
 80047c4:	607a      	str	r2, [r7, #4]
  return result;
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	fab2 f282 	clz	r2, r2
 80047cc:	b2d2      	uxtb	r2, r2
 80047ce:	40d3      	lsrs	r3, r2
 80047d0:	4a1c      	ldr	r2, [pc, #112]	; (8004844 <HAL_RCC_GetSysClockFreq+0xc8>)
 80047d2:	5cd3      	ldrb	r3, [r2, r3]
 80047d4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80047d6:	4b19      	ldr	r3, [pc, #100]	; (800483c <HAL_RCC_GetSysClockFreq+0xc0>)
 80047d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047da:	f003 030f 	and.w	r3, r3, #15
 80047de:	220f      	movs	r2, #15
 80047e0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047e2:	693a      	ldr	r2, [r7, #16]
 80047e4:	fa92 f2a2 	rbit	r2, r2
 80047e8:	60fa      	str	r2, [r7, #12]
  return result;
 80047ea:	68fa      	ldr	r2, [r7, #12]
 80047ec:	fab2 f282 	clz	r2, r2
 80047f0:	b2d2      	uxtb	r2, r2
 80047f2:	40d3      	lsrs	r3, r2
 80047f4:	4a14      	ldr	r2, [pc, #80]	; (8004848 <HAL_RCC_GetSysClockFreq+0xcc>)
 80047f6:	5cd3      	ldrb	r3, [r2, r3]
 80047f8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80047fa:	69fb      	ldr	r3, [r7, #28]
 80047fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004800:	2b00      	cmp	r3, #0
 8004802:	d008      	beq.n	8004816 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004804:	4a0e      	ldr	r2, [pc, #56]	; (8004840 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004806:	69bb      	ldr	r3, [r7, #24]
 8004808:	fbb2 f2f3 	udiv	r2, r2, r3
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	fb02 f303 	mul.w	r3, r2, r3
 8004812:	627b      	str	r3, [r7, #36]	; 0x24
 8004814:	e004      	b.n	8004820 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	4a0c      	ldr	r2, [pc, #48]	; (800484c <HAL_RCC_GetSysClockFreq+0xd0>)
 800481a:	fb02 f303 	mul.w	r3, r2, r3
 800481e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004822:	623b      	str	r3, [r7, #32]
      break;
 8004824:	e002      	b.n	800482c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004826:	4b06      	ldr	r3, [pc, #24]	; (8004840 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004828:	623b      	str	r3, [r7, #32]
      break;
 800482a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800482c:	6a3b      	ldr	r3, [r7, #32]
}
 800482e:	4618      	mov	r0, r3
 8004830:	372c      	adds	r7, #44	; 0x2c
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr
 800483a:	bf00      	nop
 800483c:	40021000 	.word	0x40021000
 8004840:	007a1200 	.word	0x007a1200
 8004844:	0800b3f8 	.word	0x0800b3f8
 8004848:	0800b408 	.word	0x0800b408
 800484c:	003d0900 	.word	0x003d0900

08004850 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004850:	b480      	push	{r7}
 8004852:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004854:	4b03      	ldr	r3, [pc, #12]	; (8004864 <HAL_RCC_GetHCLKFreq+0x14>)
 8004856:	681b      	ldr	r3, [r3, #0]
}
 8004858:	4618      	mov	r0, r3
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr
 8004862:	bf00      	nop
 8004864:	20000000 	.word	0x20000000

08004868 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b082      	sub	sp, #8
 800486c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800486e:	f7ff ffef 	bl	8004850 <HAL_RCC_GetHCLKFreq>
 8004872:	4601      	mov	r1, r0
 8004874:	4b0b      	ldr	r3, [pc, #44]	; (80048a4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800487c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004880:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	fa92 f2a2 	rbit	r2, r2
 8004888:	603a      	str	r2, [r7, #0]
  return result;
 800488a:	683a      	ldr	r2, [r7, #0]
 800488c:	fab2 f282 	clz	r2, r2
 8004890:	b2d2      	uxtb	r2, r2
 8004892:	40d3      	lsrs	r3, r2
 8004894:	4a04      	ldr	r2, [pc, #16]	; (80048a8 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004896:	5cd3      	ldrb	r3, [r2, r3]
 8004898:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800489c:	4618      	mov	r0, r3
 800489e:	3708      	adds	r7, #8
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}
 80048a4:	40021000 	.word	0x40021000
 80048a8:	0800b3f0 	.word	0x0800b3f0

080048ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b082      	sub	sp, #8
 80048b0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80048b2:	f7ff ffcd 	bl	8004850 <HAL_RCC_GetHCLKFreq>
 80048b6:	4601      	mov	r1, r0
 80048b8:	4b0b      	ldr	r3, [pc, #44]	; (80048e8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80048c0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80048c4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	fa92 f2a2 	rbit	r2, r2
 80048cc:	603a      	str	r2, [r7, #0]
  return result;
 80048ce:	683a      	ldr	r2, [r7, #0]
 80048d0:	fab2 f282 	clz	r2, r2
 80048d4:	b2d2      	uxtb	r2, r2
 80048d6:	40d3      	lsrs	r3, r2
 80048d8:	4a04      	ldr	r2, [pc, #16]	; (80048ec <HAL_RCC_GetPCLK2Freq+0x40>)
 80048da:	5cd3      	ldrb	r3, [r2, r3]
 80048dc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80048e0:	4618      	mov	r0, r3
 80048e2:	3708      	adds	r7, #8
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}
 80048e8:	40021000 	.word	0x40021000
 80048ec:	0800b3f0 	.word	0x0800b3f0

080048f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b092      	sub	sp, #72	; 0x48
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80048f8:	2300      	movs	r3, #0
 80048fa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80048fc:	2300      	movs	r3, #0
 80048fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004900:	2300      	movs	r3, #0
 8004902:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800490e:	2b00      	cmp	r3, #0
 8004910:	f000 80cd 	beq.w	8004aae <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004914:	4b86      	ldr	r3, [pc, #536]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004916:	69db      	ldr	r3, [r3, #28]
 8004918:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800491c:	2b00      	cmp	r3, #0
 800491e:	d10e      	bne.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004920:	4b83      	ldr	r3, [pc, #524]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004922:	69db      	ldr	r3, [r3, #28]
 8004924:	4a82      	ldr	r2, [pc, #520]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004926:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800492a:	61d3      	str	r3, [r2, #28]
 800492c:	4b80      	ldr	r3, [pc, #512]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800492e:	69db      	ldr	r3, [r3, #28]
 8004930:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004934:	60bb      	str	r3, [r7, #8]
 8004936:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004938:	2301      	movs	r3, #1
 800493a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800493e:	4b7d      	ldr	r3, [pc, #500]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004946:	2b00      	cmp	r3, #0
 8004948:	d118      	bne.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800494a:	4b7a      	ldr	r3, [pc, #488]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a79      	ldr	r2, [pc, #484]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004950:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004954:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004956:	f7fd fb2b 	bl	8001fb0 <HAL_GetTick>
 800495a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800495c:	e008      	b.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800495e:	f7fd fb27 	bl	8001fb0 <HAL_GetTick>
 8004962:	4602      	mov	r2, r0
 8004964:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004966:	1ad3      	subs	r3, r2, r3
 8004968:	2b64      	cmp	r3, #100	; 0x64
 800496a:	d901      	bls.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800496c:	2303      	movs	r3, #3
 800496e:	e0db      	b.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004970:	4b70      	ldr	r3, [pc, #448]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004978:	2b00      	cmp	r3, #0
 800497a:	d0f0      	beq.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800497c:	4b6c      	ldr	r3, [pc, #432]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800497e:	6a1b      	ldr	r3, [r3, #32]
 8004980:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004984:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004986:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004988:	2b00      	cmp	r3, #0
 800498a:	d07d      	beq.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x198>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004994:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004996:	429a      	cmp	r2, r3
 8004998:	d076      	beq.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800499a:	4b65      	ldr	r3, [pc, #404]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800499c:	6a1b      	ldr	r3, [r3, #32]
 800499e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80049a8:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ac:	fa93 f3a3 	rbit	r3, r3
 80049b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80049b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80049b4:	fab3 f383 	clz	r3, r3
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	461a      	mov	r2, r3
 80049bc:	4b5e      	ldr	r3, [pc, #376]	; (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80049be:	4413      	add	r3, r2
 80049c0:	009b      	lsls	r3, r3, #2
 80049c2:	461a      	mov	r2, r3
 80049c4:	2301      	movs	r3, #1
 80049c6:	6013      	str	r3, [r2, #0]
 80049c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80049cc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049d0:	fa93 f3a3 	rbit	r3, r3
 80049d4:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80049d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80049d8:	fab3 f383 	clz	r3, r3
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	461a      	mov	r2, r3
 80049e0:	4b55      	ldr	r3, [pc, #340]	; (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80049e2:	4413      	add	r3, r2
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	461a      	mov	r2, r3
 80049e8:	2300      	movs	r3, #0
 80049ea:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80049ec:	4a50      	ldr	r2, [pc, #320]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80049ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049f0:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80049f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049f4:	f003 0301 	and.w	r3, r3, #1
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d045      	beq.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049fc:	f7fd fad8 	bl	8001fb0 <HAL_GetTick>
 8004a00:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a02:	e00a      	b.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a04:	f7fd fad4 	bl	8001fb0 <HAL_GetTick>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a0c:	1ad3      	subs	r3, r2, r3
 8004a0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d901      	bls.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8004a16:	2303      	movs	r3, #3
 8004a18:	e086      	b.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8004a1a:	2302      	movs	r3, #2
 8004a1c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a20:	fa93 f3a3 	rbit	r3, r3
 8004a24:	627b      	str	r3, [r7, #36]	; 0x24
 8004a26:	2302      	movs	r3, #2
 8004a28:	623b      	str	r3, [r7, #32]
 8004a2a:	6a3b      	ldr	r3, [r7, #32]
 8004a2c:	fa93 f3a3 	rbit	r3, r3
 8004a30:	61fb      	str	r3, [r7, #28]
  return result;
 8004a32:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a34:	fab3 f383 	clz	r3, r3
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	095b      	lsrs	r3, r3, #5
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	f043 0302 	orr.w	r3, r3, #2
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	2b02      	cmp	r3, #2
 8004a46:	d102      	bne.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004a48:	4b39      	ldr	r3, [pc, #228]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004a4a:	6a1b      	ldr	r3, [r3, #32]
 8004a4c:	e007      	b.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8004a4e:	2302      	movs	r3, #2
 8004a50:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a52:	69bb      	ldr	r3, [r7, #24]
 8004a54:	fa93 f3a3 	rbit	r3, r3
 8004a58:	617b      	str	r3, [r7, #20]
 8004a5a:	4b35      	ldr	r3, [pc, #212]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5e:	2202      	movs	r2, #2
 8004a60:	613a      	str	r2, [r7, #16]
 8004a62:	693a      	ldr	r2, [r7, #16]
 8004a64:	fa92 f2a2 	rbit	r2, r2
 8004a68:	60fa      	str	r2, [r7, #12]
  return result;
 8004a6a:	68fa      	ldr	r2, [r7, #12]
 8004a6c:	fab2 f282 	clz	r2, r2
 8004a70:	b2d2      	uxtb	r2, r2
 8004a72:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a76:	b2d2      	uxtb	r2, r2
 8004a78:	f002 021f 	and.w	r2, r2, #31
 8004a7c:	2101      	movs	r1, #1
 8004a7e:	fa01 f202 	lsl.w	r2, r1, r2
 8004a82:	4013      	ands	r3, r2
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d0bd      	beq.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004a88:	4b29      	ldr	r3, [pc, #164]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004a8a:	6a1b      	ldr	r3, [r3, #32]
 8004a8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	4926      	ldr	r1, [pc, #152]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004a96:	4313      	orrs	r3, r2
 8004a98:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004a9a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d105      	bne.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004aa2:	4b23      	ldr	r3, [pc, #140]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004aa4:	69db      	ldr	r3, [r3, #28]
 8004aa6:	4a22      	ldr	r2, [pc, #136]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004aa8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004aac:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 0301 	and.w	r3, r3, #1
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d008      	beq.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004aba:	4b1d      	ldr	r3, [pc, #116]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004abe:	f023 0203 	bic.w	r2, r3, #3
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	491a      	ldr	r1, [pc, #104]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 0320 	and.w	r3, r3, #32
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d008      	beq.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ad8:	4b15      	ldr	r3, [pc, #84]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004adc:	f023 0210 	bic.w	r2, r3, #16
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	68db      	ldr	r3, [r3, #12]
 8004ae4:	4912      	ldr	r1, [pc, #72]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d008      	beq.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004af6:	4b0e      	ldr	r3, [pc, #56]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004afa:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	691b      	ldr	r3, [r3, #16]
 8004b02:	490b      	ldr	r1, [pc, #44]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004b04:	4313      	orrs	r3, r2
 8004b06:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d008      	beq.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004b14:	4b06      	ldr	r3, [pc, #24]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b18:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	695b      	ldr	r3, [r3, #20]
 8004b20:	4903      	ldr	r1, [pc, #12]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004b22:	4313      	orrs	r3, r2
 8004b24:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004b26:	2300      	movs	r3, #0
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3748      	adds	r7, #72	; 0x48
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}
 8004b30:	40021000 	.word	0x40021000
 8004b34:	40007000 	.word	0x40007000
 8004b38:	10908100 	.word	0x10908100

08004b3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b082      	sub	sp, #8
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d101      	bne.n	8004b4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e049      	b.n	8004be2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d106      	bne.n	8004b68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f7fc ffc8 	bl	8001af8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2202      	movs	r2, #2
 8004b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	3304      	adds	r3, #4
 8004b78:	4619      	mov	r1, r3
 8004b7a:	4610      	mov	r0, r2
 8004b7c:	f000 fbb6 	bl	80052ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2201      	movs	r2, #1
 8004b84:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2201      	movs	r2, #1
 8004b94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004be0:	2300      	movs	r3, #0
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3708      	adds	r7, #8
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
	...

08004bec <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b085      	sub	sp, #20
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bfa:	b2db      	uxtb	r3, r3
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d001      	beq.n	8004c04 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	e038      	b.n	8004c76 <HAL_TIM_Base_Start+0x8a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2202      	movs	r2, #2
 8004c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a1c      	ldr	r2, [pc, #112]	; (8004c84 <HAL_TIM_Base_Start+0x98>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d00e      	beq.n	8004c34 <HAL_TIM_Base_Start+0x48>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c1e:	d009      	beq.n	8004c34 <HAL_TIM_Base_Start+0x48>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a18      	ldr	r2, [pc, #96]	; (8004c88 <HAL_TIM_Base_Start+0x9c>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d004      	beq.n	8004c34 <HAL_TIM_Base_Start+0x48>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a17      	ldr	r2, [pc, #92]	; (8004c8c <HAL_TIM_Base_Start+0xa0>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d115      	bne.n	8004c60 <HAL_TIM_Base_Start+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	689a      	ldr	r2, [r3, #8]
 8004c3a:	4b15      	ldr	r3, [pc, #84]	; (8004c90 <HAL_TIM_Base_Start+0xa4>)
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2b06      	cmp	r3, #6
 8004c44:	d015      	beq.n	8004c72 <HAL_TIM_Base_Start+0x86>
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c4c:	d011      	beq.n	8004c72 <HAL_TIM_Base_Start+0x86>
    {
      __HAL_TIM_ENABLE(htim);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f042 0201 	orr.w	r2, r2, #1
 8004c5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c5e:	e008      	b.n	8004c72 <HAL_TIM_Base_Start+0x86>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f042 0201 	orr.w	r2, r2, #1
 8004c6e:	601a      	str	r2, [r3, #0]
 8004c70:	e000      	b.n	8004c74 <HAL_TIM_Base_Start+0x88>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c72:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004c74:	2300      	movs	r3, #0
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3714      	adds	r7, #20
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr
 8004c82:	bf00      	nop
 8004c84:	40012c00 	.word	0x40012c00
 8004c88:	40000400 	.word	0x40000400
 8004c8c:	40014000 	.word	0x40014000
 8004c90:	00010007 	.word	0x00010007

08004c94 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b082      	sub	sp, #8
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d101      	bne.n	8004ca6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e049      	b.n	8004d3a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d106      	bne.n	8004cc0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f000 f841 	bl	8004d42 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2202      	movs	r2, #2
 8004cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681a      	ldr	r2, [r3, #0]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	3304      	adds	r3, #4
 8004cd0:	4619      	mov	r1, r3
 8004cd2:	4610      	mov	r0, r2
 8004cd4:	f000 fb0a 	bl	80052ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2201      	movs	r2, #1
 8004cec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2201      	movs	r2, #1
 8004d04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2201      	movs	r2, #1
 8004d14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d38:	2300      	movs	r3, #0
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3708      	adds	r7, #8
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}

08004d42 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004d42:	b480      	push	{r7}
 8004d44:	b083      	sub	sp, #12
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004d4a:	bf00      	nop
 8004d4c:	370c      	adds	r7, #12
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr
	...

08004d58 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b084      	sub	sp, #16
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
 8004d60:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d109      	bne.n	8004d7c <HAL_TIM_PWM_Start+0x24>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d6e:	b2db      	uxtb	r3, r3
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	bf14      	ite	ne
 8004d74:	2301      	movne	r3, #1
 8004d76:	2300      	moveq	r3, #0
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	e03c      	b.n	8004df6 <HAL_TIM_PWM_Start+0x9e>
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	2b04      	cmp	r3, #4
 8004d80:	d109      	bne.n	8004d96 <HAL_TIM_PWM_Start+0x3e>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	bf14      	ite	ne
 8004d8e:	2301      	movne	r3, #1
 8004d90:	2300      	moveq	r3, #0
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	e02f      	b.n	8004df6 <HAL_TIM_PWM_Start+0x9e>
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	2b08      	cmp	r3, #8
 8004d9a:	d109      	bne.n	8004db0 <HAL_TIM_PWM_Start+0x58>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004da2:	b2db      	uxtb	r3, r3
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	bf14      	ite	ne
 8004da8:	2301      	movne	r3, #1
 8004daa:	2300      	moveq	r3, #0
 8004dac:	b2db      	uxtb	r3, r3
 8004dae:	e022      	b.n	8004df6 <HAL_TIM_PWM_Start+0x9e>
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	2b0c      	cmp	r3, #12
 8004db4:	d109      	bne.n	8004dca <HAL_TIM_PWM_Start+0x72>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	bf14      	ite	ne
 8004dc2:	2301      	movne	r3, #1
 8004dc4:	2300      	moveq	r3, #0
 8004dc6:	b2db      	uxtb	r3, r3
 8004dc8:	e015      	b.n	8004df6 <HAL_TIM_PWM_Start+0x9e>
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	2b10      	cmp	r3, #16
 8004dce:	d109      	bne.n	8004de4 <HAL_TIM_PWM_Start+0x8c>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	bf14      	ite	ne
 8004ddc:	2301      	movne	r3, #1
 8004dde:	2300      	moveq	r3, #0
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	e008      	b.n	8004df6 <HAL_TIM_PWM_Start+0x9e>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004dea:	b2db      	uxtb	r3, r3
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	bf14      	ite	ne
 8004df0:	2301      	movne	r3, #1
 8004df2:	2300      	moveq	r3, #0
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d001      	beq.n	8004dfe <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e088      	b.n	8004f10 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d104      	bne.n	8004e0e <HAL_TIM_PWM_Start+0xb6>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2202      	movs	r2, #2
 8004e08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e0c:	e023      	b.n	8004e56 <HAL_TIM_PWM_Start+0xfe>
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	2b04      	cmp	r3, #4
 8004e12:	d104      	bne.n	8004e1e <HAL_TIM_PWM_Start+0xc6>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2202      	movs	r2, #2
 8004e18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e1c:	e01b      	b.n	8004e56 <HAL_TIM_PWM_Start+0xfe>
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	2b08      	cmp	r3, #8
 8004e22:	d104      	bne.n	8004e2e <HAL_TIM_PWM_Start+0xd6>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2202      	movs	r2, #2
 8004e28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e2c:	e013      	b.n	8004e56 <HAL_TIM_PWM_Start+0xfe>
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	2b0c      	cmp	r3, #12
 8004e32:	d104      	bne.n	8004e3e <HAL_TIM_PWM_Start+0xe6>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2202      	movs	r2, #2
 8004e38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e3c:	e00b      	b.n	8004e56 <HAL_TIM_PWM_Start+0xfe>
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	2b10      	cmp	r3, #16
 8004e42:	d104      	bne.n	8004e4e <HAL_TIM_PWM_Start+0xf6>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2202      	movs	r2, #2
 8004e48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e4c:	e003      	b.n	8004e56 <HAL_TIM_PWM_Start+0xfe>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2202      	movs	r2, #2
 8004e52:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	6839      	ldr	r1, [r7, #0]
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f000 fdfc 	bl	8005a5c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a2b      	ldr	r2, [pc, #172]	; (8004f18 <HAL_TIM_PWM_Start+0x1c0>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d00e      	beq.n	8004e8c <HAL_TIM_PWM_Start+0x134>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a2a      	ldr	r2, [pc, #168]	; (8004f1c <HAL_TIM_PWM_Start+0x1c4>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d009      	beq.n	8004e8c <HAL_TIM_PWM_Start+0x134>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a28      	ldr	r2, [pc, #160]	; (8004f20 <HAL_TIM_PWM_Start+0x1c8>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d004      	beq.n	8004e8c <HAL_TIM_PWM_Start+0x134>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a27      	ldr	r2, [pc, #156]	; (8004f24 <HAL_TIM_PWM_Start+0x1cc>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d101      	bne.n	8004e90 <HAL_TIM_PWM_Start+0x138>
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	e000      	b.n	8004e92 <HAL_TIM_PWM_Start+0x13a>
 8004e90:	2300      	movs	r3, #0
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d007      	beq.n	8004ea6 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ea4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a1b      	ldr	r2, [pc, #108]	; (8004f18 <HAL_TIM_PWM_Start+0x1c0>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d00e      	beq.n	8004ece <HAL_TIM_PWM_Start+0x176>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eb8:	d009      	beq.n	8004ece <HAL_TIM_PWM_Start+0x176>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a1a      	ldr	r2, [pc, #104]	; (8004f28 <HAL_TIM_PWM_Start+0x1d0>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d004      	beq.n	8004ece <HAL_TIM_PWM_Start+0x176>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a14      	ldr	r2, [pc, #80]	; (8004f1c <HAL_TIM_PWM_Start+0x1c4>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d115      	bne.n	8004efa <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	689a      	ldr	r2, [r3, #8]
 8004ed4:	4b15      	ldr	r3, [pc, #84]	; (8004f2c <HAL_TIM_PWM_Start+0x1d4>)
 8004ed6:	4013      	ands	r3, r2
 8004ed8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2b06      	cmp	r3, #6
 8004ede:	d015      	beq.n	8004f0c <HAL_TIM_PWM_Start+0x1b4>
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ee6:	d011      	beq.n	8004f0c <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	681a      	ldr	r2, [r3, #0]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f042 0201 	orr.w	r2, r2, #1
 8004ef6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ef8:	e008      	b.n	8004f0c <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f042 0201 	orr.w	r2, r2, #1
 8004f08:	601a      	str	r2, [r3, #0]
 8004f0a:	e000      	b.n	8004f0e <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f0c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004f0e:	2300      	movs	r3, #0
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	3710      	adds	r7, #16
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}
 8004f18:	40012c00 	.word	0x40012c00
 8004f1c:	40014000 	.word	0x40014000
 8004f20:	40014400 	.word	0x40014400
 8004f24:	40014800 	.word	0x40014800
 8004f28:	40000400 	.word	0x40000400
 8004f2c:	00010007 	.word	0x00010007

08004f30 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b086      	sub	sp, #24
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	60f8      	str	r0, [r7, #12]
 8004f38:	60b9      	str	r1, [r7, #8]
 8004f3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d101      	bne.n	8004f4e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004f4a:	2302      	movs	r3, #2
 8004f4c:	e0ff      	b.n	800514e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2201      	movs	r2, #1
 8004f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2b14      	cmp	r3, #20
 8004f5a:	f200 80f0 	bhi.w	800513e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004f5e:	a201      	add	r2, pc, #4	; (adr r2, 8004f64 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f64:	08004fb9 	.word	0x08004fb9
 8004f68:	0800513f 	.word	0x0800513f
 8004f6c:	0800513f 	.word	0x0800513f
 8004f70:	0800513f 	.word	0x0800513f
 8004f74:	08004ff9 	.word	0x08004ff9
 8004f78:	0800513f 	.word	0x0800513f
 8004f7c:	0800513f 	.word	0x0800513f
 8004f80:	0800513f 	.word	0x0800513f
 8004f84:	0800503b 	.word	0x0800503b
 8004f88:	0800513f 	.word	0x0800513f
 8004f8c:	0800513f 	.word	0x0800513f
 8004f90:	0800513f 	.word	0x0800513f
 8004f94:	0800507b 	.word	0x0800507b
 8004f98:	0800513f 	.word	0x0800513f
 8004f9c:	0800513f 	.word	0x0800513f
 8004fa0:	0800513f 	.word	0x0800513f
 8004fa4:	080050bd 	.word	0x080050bd
 8004fa8:	0800513f 	.word	0x0800513f
 8004fac:	0800513f 	.word	0x0800513f
 8004fb0:	0800513f 	.word	0x0800513f
 8004fb4:	080050fd 	.word	0x080050fd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	68b9      	ldr	r1, [r7, #8]
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f000 fa0c 	bl	80053dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	699a      	ldr	r2, [r3, #24]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f042 0208 	orr.w	r2, r2, #8
 8004fd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	699a      	ldr	r2, [r3, #24]
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f022 0204 	bic.w	r2, r2, #4
 8004fe2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	6999      	ldr	r1, [r3, #24]
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	691a      	ldr	r2, [r3, #16]
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	430a      	orrs	r2, r1
 8004ff4:	619a      	str	r2, [r3, #24]
      break;
 8004ff6:	e0a5      	b.n	8005144 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	68b9      	ldr	r1, [r7, #8]
 8004ffe:	4618      	mov	r0, r3
 8005000:	f000 fa72 	bl	80054e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	699a      	ldr	r2, [r3, #24]
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005012:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	699a      	ldr	r2, [r3, #24]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005022:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	6999      	ldr	r1, [r3, #24]
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	691b      	ldr	r3, [r3, #16]
 800502e:	021a      	lsls	r2, r3, #8
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	430a      	orrs	r2, r1
 8005036:	619a      	str	r2, [r3, #24]
      break;
 8005038:	e084      	b.n	8005144 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	68b9      	ldr	r1, [r7, #8]
 8005040:	4618      	mov	r0, r3
 8005042:	f000 fad1 	bl	80055e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	69da      	ldr	r2, [r3, #28]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f042 0208 	orr.w	r2, r2, #8
 8005054:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	69da      	ldr	r2, [r3, #28]
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f022 0204 	bic.w	r2, r2, #4
 8005064:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	69d9      	ldr	r1, [r3, #28]
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	691a      	ldr	r2, [r3, #16]
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	430a      	orrs	r2, r1
 8005076:	61da      	str	r2, [r3, #28]
      break;
 8005078:	e064      	b.n	8005144 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	68b9      	ldr	r1, [r7, #8]
 8005080:	4618      	mov	r0, r3
 8005082:	f000 fb2f 	bl	80056e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	69da      	ldr	r2, [r3, #28]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005094:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	69da      	ldr	r2, [r3, #28]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	69d9      	ldr	r1, [r3, #28]
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	691b      	ldr	r3, [r3, #16]
 80050b0:	021a      	lsls	r2, r3, #8
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	430a      	orrs	r2, r1
 80050b8:	61da      	str	r2, [r3, #28]
      break;
 80050ba:	e043      	b.n	8005144 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	68b9      	ldr	r1, [r7, #8]
 80050c2:	4618      	mov	r0, r3
 80050c4:	f000 fb72 	bl	80057ac <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f042 0208 	orr.w	r2, r2, #8
 80050d6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f022 0204 	bic.w	r2, r2, #4
 80050e6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	691a      	ldr	r2, [r3, #16]
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	430a      	orrs	r2, r1
 80050f8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80050fa:	e023      	b.n	8005144 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	68b9      	ldr	r1, [r7, #8]
 8005102:	4618      	mov	r0, r3
 8005104:	f000 fbb0 	bl	8005868 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005116:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005126:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	691b      	ldr	r3, [r3, #16]
 8005132:	021a      	lsls	r2, r3, #8
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	430a      	orrs	r2, r1
 800513a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800513c:	e002      	b.n	8005144 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	75fb      	strb	r3, [r7, #23]
      break;
 8005142:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2200      	movs	r2, #0
 8005148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800514c:	7dfb      	ldrb	r3, [r7, #23]
}
 800514e:	4618      	mov	r0, r3
 8005150:	3718      	adds	r7, #24
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}
 8005156:	bf00      	nop

08005158 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b084      	sub	sp, #16
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005162:	2300      	movs	r3, #0
 8005164:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800516c:	2b01      	cmp	r3, #1
 800516e:	d101      	bne.n	8005174 <HAL_TIM_ConfigClockSource+0x1c>
 8005170:	2302      	movs	r3, #2
 8005172:	e0b6      	b.n	80052e2 <HAL_TIM_ConfigClockSource+0x18a>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2202      	movs	r2, #2
 8005180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005192:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005196:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800519e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	68ba      	ldr	r2, [r7, #8]
 80051a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051b0:	d03e      	beq.n	8005230 <HAL_TIM_ConfigClockSource+0xd8>
 80051b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051b6:	f200 8087 	bhi.w	80052c8 <HAL_TIM_ConfigClockSource+0x170>
 80051ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051be:	f000 8086 	beq.w	80052ce <HAL_TIM_ConfigClockSource+0x176>
 80051c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051c6:	d87f      	bhi.n	80052c8 <HAL_TIM_ConfigClockSource+0x170>
 80051c8:	2b70      	cmp	r3, #112	; 0x70
 80051ca:	d01a      	beq.n	8005202 <HAL_TIM_ConfigClockSource+0xaa>
 80051cc:	2b70      	cmp	r3, #112	; 0x70
 80051ce:	d87b      	bhi.n	80052c8 <HAL_TIM_ConfigClockSource+0x170>
 80051d0:	2b60      	cmp	r3, #96	; 0x60
 80051d2:	d050      	beq.n	8005276 <HAL_TIM_ConfigClockSource+0x11e>
 80051d4:	2b60      	cmp	r3, #96	; 0x60
 80051d6:	d877      	bhi.n	80052c8 <HAL_TIM_ConfigClockSource+0x170>
 80051d8:	2b50      	cmp	r3, #80	; 0x50
 80051da:	d03c      	beq.n	8005256 <HAL_TIM_ConfigClockSource+0xfe>
 80051dc:	2b50      	cmp	r3, #80	; 0x50
 80051de:	d873      	bhi.n	80052c8 <HAL_TIM_ConfigClockSource+0x170>
 80051e0:	2b40      	cmp	r3, #64	; 0x40
 80051e2:	d058      	beq.n	8005296 <HAL_TIM_ConfigClockSource+0x13e>
 80051e4:	2b40      	cmp	r3, #64	; 0x40
 80051e6:	d86f      	bhi.n	80052c8 <HAL_TIM_ConfigClockSource+0x170>
 80051e8:	2b30      	cmp	r3, #48	; 0x30
 80051ea:	d064      	beq.n	80052b6 <HAL_TIM_ConfigClockSource+0x15e>
 80051ec:	2b30      	cmp	r3, #48	; 0x30
 80051ee:	d86b      	bhi.n	80052c8 <HAL_TIM_ConfigClockSource+0x170>
 80051f0:	2b20      	cmp	r3, #32
 80051f2:	d060      	beq.n	80052b6 <HAL_TIM_ConfigClockSource+0x15e>
 80051f4:	2b20      	cmp	r3, #32
 80051f6:	d867      	bhi.n	80052c8 <HAL_TIM_ConfigClockSource+0x170>
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d05c      	beq.n	80052b6 <HAL_TIM_ConfigClockSource+0x15e>
 80051fc:	2b10      	cmp	r3, #16
 80051fe:	d05a      	beq.n	80052b6 <HAL_TIM_ConfigClockSource+0x15e>
 8005200:	e062      	b.n	80052c8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6818      	ldr	r0, [r3, #0]
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	6899      	ldr	r1, [r3, #8]
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	685a      	ldr	r2, [r3, #4]
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	68db      	ldr	r3, [r3, #12]
 8005212:	f000 fc03 	bl	8005a1c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005224:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	68ba      	ldr	r2, [r7, #8]
 800522c:	609a      	str	r2, [r3, #8]
      break;
 800522e:	e04f      	b.n	80052d0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6818      	ldr	r0, [r3, #0]
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	6899      	ldr	r1, [r3, #8]
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	685a      	ldr	r2, [r3, #4]
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	68db      	ldr	r3, [r3, #12]
 8005240:	f000 fbec 	bl	8005a1c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	689a      	ldr	r2, [r3, #8]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005252:	609a      	str	r2, [r3, #8]
      break;
 8005254:	e03c      	b.n	80052d0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6818      	ldr	r0, [r3, #0]
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	6859      	ldr	r1, [r3, #4]
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	68db      	ldr	r3, [r3, #12]
 8005262:	461a      	mov	r2, r3
 8005264:	f000 fb60 	bl	8005928 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	2150      	movs	r1, #80	; 0x50
 800526e:	4618      	mov	r0, r3
 8005270:	f000 fbb9 	bl	80059e6 <TIM_ITRx_SetConfig>
      break;
 8005274:	e02c      	b.n	80052d0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6818      	ldr	r0, [r3, #0]
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	6859      	ldr	r1, [r3, #4]
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	68db      	ldr	r3, [r3, #12]
 8005282:	461a      	mov	r2, r3
 8005284:	f000 fb7f 	bl	8005986 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	2160      	movs	r1, #96	; 0x60
 800528e:	4618      	mov	r0, r3
 8005290:	f000 fba9 	bl	80059e6 <TIM_ITRx_SetConfig>
      break;
 8005294:	e01c      	b.n	80052d0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6818      	ldr	r0, [r3, #0]
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	6859      	ldr	r1, [r3, #4]
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	68db      	ldr	r3, [r3, #12]
 80052a2:	461a      	mov	r2, r3
 80052a4:	f000 fb40 	bl	8005928 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	2140      	movs	r1, #64	; 0x40
 80052ae:	4618      	mov	r0, r3
 80052b0:	f000 fb99 	bl	80059e6 <TIM_ITRx_SetConfig>
      break;
 80052b4:	e00c      	b.n	80052d0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4619      	mov	r1, r3
 80052c0:	4610      	mov	r0, r2
 80052c2:	f000 fb90 	bl	80059e6 <TIM_ITRx_SetConfig>
      break;
 80052c6:	e003      	b.n	80052d0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80052c8:	2301      	movs	r3, #1
 80052ca:	73fb      	strb	r3, [r7, #15]
      break;
 80052cc:	e000      	b.n	80052d0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80052ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2201      	movs	r2, #1
 80052d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2200      	movs	r2, #0
 80052dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80052e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3710      	adds	r7, #16
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}
	...

080052ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b085      	sub	sp, #20
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	4a32      	ldr	r2, [pc, #200]	; (80053c8 <TIM_Base_SetConfig+0xdc>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d007      	beq.n	8005314 <TIM_Base_SetConfig+0x28>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800530a:	d003      	beq.n	8005314 <TIM_Base_SetConfig+0x28>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	4a2f      	ldr	r2, [pc, #188]	; (80053cc <TIM_Base_SetConfig+0xe0>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d108      	bne.n	8005326 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800531a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	68fa      	ldr	r2, [r7, #12]
 8005322:	4313      	orrs	r3, r2
 8005324:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	4a27      	ldr	r2, [pc, #156]	; (80053c8 <TIM_Base_SetConfig+0xdc>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d013      	beq.n	8005356 <TIM_Base_SetConfig+0x6a>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005334:	d00f      	beq.n	8005356 <TIM_Base_SetConfig+0x6a>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	4a24      	ldr	r2, [pc, #144]	; (80053cc <TIM_Base_SetConfig+0xe0>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d00b      	beq.n	8005356 <TIM_Base_SetConfig+0x6a>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4a23      	ldr	r2, [pc, #140]	; (80053d0 <TIM_Base_SetConfig+0xe4>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d007      	beq.n	8005356 <TIM_Base_SetConfig+0x6a>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	4a22      	ldr	r2, [pc, #136]	; (80053d4 <TIM_Base_SetConfig+0xe8>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d003      	beq.n	8005356 <TIM_Base_SetConfig+0x6a>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4a21      	ldr	r2, [pc, #132]	; (80053d8 <TIM_Base_SetConfig+0xec>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d108      	bne.n	8005368 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800535c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	68db      	ldr	r3, [r3, #12]
 8005362:	68fa      	ldr	r2, [r7, #12]
 8005364:	4313      	orrs	r3, r2
 8005366:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	695b      	ldr	r3, [r3, #20]
 8005372:	4313      	orrs	r3, r2
 8005374:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	68fa      	ldr	r2, [r7, #12]
 800537a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	689a      	ldr	r2, [r3, #8]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	4a0e      	ldr	r2, [pc, #56]	; (80053c8 <TIM_Base_SetConfig+0xdc>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d00b      	beq.n	80053ac <TIM_Base_SetConfig+0xc0>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	4a0e      	ldr	r2, [pc, #56]	; (80053d0 <TIM_Base_SetConfig+0xe4>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d007      	beq.n	80053ac <TIM_Base_SetConfig+0xc0>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	4a0d      	ldr	r2, [pc, #52]	; (80053d4 <TIM_Base_SetConfig+0xe8>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d003      	beq.n	80053ac <TIM_Base_SetConfig+0xc0>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	4a0c      	ldr	r2, [pc, #48]	; (80053d8 <TIM_Base_SetConfig+0xec>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d103      	bne.n	80053b4 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	691a      	ldr	r2, [r3, #16]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2201      	movs	r2, #1
 80053b8:	615a      	str	r2, [r3, #20]
}
 80053ba:	bf00      	nop
 80053bc:	3714      	adds	r7, #20
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr
 80053c6:	bf00      	nop
 80053c8:	40012c00 	.word	0x40012c00
 80053cc:	40000400 	.word	0x40000400
 80053d0:	40014000 	.word	0x40014000
 80053d4:	40014400 	.word	0x40014400
 80053d8:	40014800 	.word	0x40014800

080053dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053dc:	b480      	push	{r7}
 80053de:	b087      	sub	sp, #28
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6a1b      	ldr	r3, [r3, #32]
 80053ea:	f023 0201 	bic.w	r2, r3, #1
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6a1b      	ldr	r3, [r3, #32]
 80053f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	699b      	ldr	r3, [r3, #24]
 8005402:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800540a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800540e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f023 0303 	bic.w	r3, r3, #3
 8005416:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	68fa      	ldr	r2, [r7, #12]
 800541e:	4313      	orrs	r3, r2
 8005420:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	f023 0302 	bic.w	r3, r3, #2
 8005428:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	697a      	ldr	r2, [r7, #20]
 8005430:	4313      	orrs	r3, r2
 8005432:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	4a28      	ldr	r2, [pc, #160]	; (80054d8 <TIM_OC1_SetConfig+0xfc>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d00b      	beq.n	8005454 <TIM_OC1_SetConfig+0x78>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	4a27      	ldr	r2, [pc, #156]	; (80054dc <TIM_OC1_SetConfig+0x100>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d007      	beq.n	8005454 <TIM_OC1_SetConfig+0x78>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	4a26      	ldr	r2, [pc, #152]	; (80054e0 <TIM_OC1_SetConfig+0x104>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d003      	beq.n	8005454 <TIM_OC1_SetConfig+0x78>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	4a25      	ldr	r2, [pc, #148]	; (80054e4 <TIM_OC1_SetConfig+0x108>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d10c      	bne.n	800546e <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	f023 0308 	bic.w	r3, r3, #8
 800545a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	68db      	ldr	r3, [r3, #12]
 8005460:	697a      	ldr	r2, [r7, #20]
 8005462:	4313      	orrs	r3, r2
 8005464:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	f023 0304 	bic.w	r3, r3, #4
 800546c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	4a19      	ldr	r2, [pc, #100]	; (80054d8 <TIM_OC1_SetConfig+0xfc>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d00b      	beq.n	800548e <TIM_OC1_SetConfig+0xb2>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	4a18      	ldr	r2, [pc, #96]	; (80054dc <TIM_OC1_SetConfig+0x100>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d007      	beq.n	800548e <TIM_OC1_SetConfig+0xb2>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	4a17      	ldr	r2, [pc, #92]	; (80054e0 <TIM_OC1_SetConfig+0x104>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d003      	beq.n	800548e <TIM_OC1_SetConfig+0xb2>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	4a16      	ldr	r2, [pc, #88]	; (80054e4 <TIM_OC1_SetConfig+0x108>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d111      	bne.n	80054b2 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005494:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800549c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	695b      	ldr	r3, [r3, #20]
 80054a2:	693a      	ldr	r2, [r7, #16]
 80054a4:	4313      	orrs	r3, r2
 80054a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	699b      	ldr	r3, [r3, #24]
 80054ac:	693a      	ldr	r2, [r7, #16]
 80054ae:	4313      	orrs	r3, r2
 80054b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	693a      	ldr	r2, [r7, #16]
 80054b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	68fa      	ldr	r2, [r7, #12]
 80054bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	685a      	ldr	r2, [r3, #4]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	697a      	ldr	r2, [r7, #20]
 80054ca:	621a      	str	r2, [r3, #32]
}
 80054cc:	bf00      	nop
 80054ce:	371c      	adds	r7, #28
 80054d0:	46bd      	mov	sp, r7
 80054d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d6:	4770      	bx	lr
 80054d8:	40012c00 	.word	0x40012c00
 80054dc:	40014000 	.word	0x40014000
 80054e0:	40014400 	.word	0x40014400
 80054e4:	40014800 	.word	0x40014800

080054e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b087      	sub	sp, #28
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
 80054f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6a1b      	ldr	r3, [r3, #32]
 80054f6:	f023 0210 	bic.w	r2, r3, #16
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6a1b      	ldr	r3, [r3, #32]
 8005502:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	699b      	ldr	r3, [r3, #24]
 800550e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005516:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800551a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005522:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	021b      	lsls	r3, r3, #8
 800552a:	68fa      	ldr	r2, [r7, #12]
 800552c:	4313      	orrs	r3, r2
 800552e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	f023 0320 	bic.w	r3, r3, #32
 8005536:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	689b      	ldr	r3, [r3, #8]
 800553c:	011b      	lsls	r3, r3, #4
 800553e:	697a      	ldr	r2, [r7, #20]
 8005540:	4313      	orrs	r3, r2
 8005542:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	4a24      	ldr	r2, [pc, #144]	; (80055d8 <TIM_OC2_SetConfig+0xf0>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d10d      	bne.n	8005568 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005552:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	68db      	ldr	r3, [r3, #12]
 8005558:	011b      	lsls	r3, r3, #4
 800555a:	697a      	ldr	r2, [r7, #20]
 800555c:	4313      	orrs	r3, r2
 800555e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005566:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	4a1b      	ldr	r2, [pc, #108]	; (80055d8 <TIM_OC2_SetConfig+0xf0>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d00b      	beq.n	8005588 <TIM_OC2_SetConfig+0xa0>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	4a1a      	ldr	r2, [pc, #104]	; (80055dc <TIM_OC2_SetConfig+0xf4>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d007      	beq.n	8005588 <TIM_OC2_SetConfig+0xa0>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	4a19      	ldr	r2, [pc, #100]	; (80055e0 <TIM_OC2_SetConfig+0xf8>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d003      	beq.n	8005588 <TIM_OC2_SetConfig+0xa0>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	4a18      	ldr	r2, [pc, #96]	; (80055e4 <TIM_OC2_SetConfig+0xfc>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d113      	bne.n	80055b0 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800558e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005596:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	695b      	ldr	r3, [r3, #20]
 800559c:	009b      	lsls	r3, r3, #2
 800559e:	693a      	ldr	r2, [r7, #16]
 80055a0:	4313      	orrs	r3, r2
 80055a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	699b      	ldr	r3, [r3, #24]
 80055a8:	009b      	lsls	r3, r3, #2
 80055aa:	693a      	ldr	r2, [r7, #16]
 80055ac:	4313      	orrs	r3, r2
 80055ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	693a      	ldr	r2, [r7, #16]
 80055b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	68fa      	ldr	r2, [r7, #12]
 80055ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	685a      	ldr	r2, [r3, #4]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	697a      	ldr	r2, [r7, #20]
 80055c8:	621a      	str	r2, [r3, #32]
}
 80055ca:	bf00      	nop
 80055cc:	371c      	adds	r7, #28
 80055ce:	46bd      	mov	sp, r7
 80055d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d4:	4770      	bx	lr
 80055d6:	bf00      	nop
 80055d8:	40012c00 	.word	0x40012c00
 80055dc:	40014000 	.word	0x40014000
 80055e0:	40014400 	.word	0x40014400
 80055e4:	40014800 	.word	0x40014800

080055e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b087      	sub	sp, #28
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
 80055f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6a1b      	ldr	r3, [r3, #32]
 80055f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6a1b      	ldr	r3, [r3, #32]
 8005602:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	69db      	ldr	r3, [r3, #28]
 800560e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005616:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800561a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	f023 0303 	bic.w	r3, r3, #3
 8005622:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	68fa      	ldr	r2, [r7, #12]
 800562a:	4313      	orrs	r3, r2
 800562c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005634:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	021b      	lsls	r3, r3, #8
 800563c:	697a      	ldr	r2, [r7, #20]
 800563e:	4313      	orrs	r3, r2
 8005640:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	4a23      	ldr	r2, [pc, #140]	; (80056d4 <TIM_OC3_SetConfig+0xec>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d10d      	bne.n	8005666 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005650:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	68db      	ldr	r3, [r3, #12]
 8005656:	021b      	lsls	r3, r3, #8
 8005658:	697a      	ldr	r2, [r7, #20]
 800565a:	4313      	orrs	r3, r2
 800565c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005664:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	4a1a      	ldr	r2, [pc, #104]	; (80056d4 <TIM_OC3_SetConfig+0xec>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d00b      	beq.n	8005686 <TIM_OC3_SetConfig+0x9e>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	4a19      	ldr	r2, [pc, #100]	; (80056d8 <TIM_OC3_SetConfig+0xf0>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d007      	beq.n	8005686 <TIM_OC3_SetConfig+0x9e>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	4a18      	ldr	r2, [pc, #96]	; (80056dc <TIM_OC3_SetConfig+0xf4>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d003      	beq.n	8005686 <TIM_OC3_SetConfig+0x9e>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	4a17      	ldr	r2, [pc, #92]	; (80056e0 <TIM_OC3_SetConfig+0xf8>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d113      	bne.n	80056ae <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800568c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005694:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	695b      	ldr	r3, [r3, #20]
 800569a:	011b      	lsls	r3, r3, #4
 800569c:	693a      	ldr	r2, [r7, #16]
 800569e:	4313      	orrs	r3, r2
 80056a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	699b      	ldr	r3, [r3, #24]
 80056a6:	011b      	lsls	r3, r3, #4
 80056a8:	693a      	ldr	r2, [r7, #16]
 80056aa:	4313      	orrs	r3, r2
 80056ac:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	693a      	ldr	r2, [r7, #16]
 80056b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	68fa      	ldr	r2, [r7, #12]
 80056b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	685a      	ldr	r2, [r3, #4]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	697a      	ldr	r2, [r7, #20]
 80056c6:	621a      	str	r2, [r3, #32]
}
 80056c8:	bf00      	nop
 80056ca:	371c      	adds	r7, #28
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr
 80056d4:	40012c00 	.word	0x40012c00
 80056d8:	40014000 	.word	0x40014000
 80056dc:	40014400 	.word	0x40014400
 80056e0:	40014800 	.word	0x40014800

080056e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b087      	sub	sp, #28
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
 80056ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6a1b      	ldr	r3, [r3, #32]
 80056f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6a1b      	ldr	r3, [r3, #32]
 80056fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	69db      	ldr	r3, [r3, #28]
 800570a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005712:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005716:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800571e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	021b      	lsls	r3, r3, #8
 8005726:	68fa      	ldr	r2, [r7, #12]
 8005728:	4313      	orrs	r3, r2
 800572a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005732:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	031b      	lsls	r3, r3, #12
 800573a:	693a      	ldr	r2, [r7, #16]
 800573c:	4313      	orrs	r3, r2
 800573e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	4a16      	ldr	r2, [pc, #88]	; (800579c <TIM_OC4_SetConfig+0xb8>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d00b      	beq.n	8005760 <TIM_OC4_SetConfig+0x7c>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	4a15      	ldr	r2, [pc, #84]	; (80057a0 <TIM_OC4_SetConfig+0xbc>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d007      	beq.n	8005760 <TIM_OC4_SetConfig+0x7c>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	4a14      	ldr	r2, [pc, #80]	; (80057a4 <TIM_OC4_SetConfig+0xc0>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d003      	beq.n	8005760 <TIM_OC4_SetConfig+0x7c>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	4a13      	ldr	r2, [pc, #76]	; (80057a8 <TIM_OC4_SetConfig+0xc4>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d109      	bne.n	8005774 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005766:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	695b      	ldr	r3, [r3, #20]
 800576c:	019b      	lsls	r3, r3, #6
 800576e:	697a      	ldr	r2, [r7, #20]
 8005770:	4313      	orrs	r3, r2
 8005772:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	697a      	ldr	r2, [r7, #20]
 8005778:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	68fa      	ldr	r2, [r7, #12]
 800577e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	685a      	ldr	r2, [r3, #4]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	693a      	ldr	r2, [r7, #16]
 800578c:	621a      	str	r2, [r3, #32]
}
 800578e:	bf00      	nop
 8005790:	371c      	adds	r7, #28
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr
 800579a:	bf00      	nop
 800579c:	40012c00 	.word	0x40012c00
 80057a0:	40014000 	.word	0x40014000
 80057a4:	40014400 	.word	0x40014400
 80057a8:	40014800 	.word	0x40014800

080057ac <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b087      	sub	sp, #28
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
 80057b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6a1b      	ldr	r3, [r3, #32]
 80057ba:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6a1b      	ldr	r3, [r3, #32]
 80057c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	68fa      	ldr	r2, [r7, #12]
 80057e6:	4313      	orrs	r3, r2
 80057e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80057f0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	041b      	lsls	r3, r3, #16
 80057f8:	693a      	ldr	r2, [r7, #16]
 80057fa:	4313      	orrs	r3, r2
 80057fc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	4a15      	ldr	r2, [pc, #84]	; (8005858 <TIM_OC5_SetConfig+0xac>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d00b      	beq.n	800581e <TIM_OC5_SetConfig+0x72>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	4a14      	ldr	r2, [pc, #80]	; (800585c <TIM_OC5_SetConfig+0xb0>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d007      	beq.n	800581e <TIM_OC5_SetConfig+0x72>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	4a13      	ldr	r2, [pc, #76]	; (8005860 <TIM_OC5_SetConfig+0xb4>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d003      	beq.n	800581e <TIM_OC5_SetConfig+0x72>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	4a12      	ldr	r2, [pc, #72]	; (8005864 <TIM_OC5_SetConfig+0xb8>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d109      	bne.n	8005832 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005824:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	695b      	ldr	r3, [r3, #20]
 800582a:	021b      	lsls	r3, r3, #8
 800582c:	697a      	ldr	r2, [r7, #20]
 800582e:	4313      	orrs	r3, r2
 8005830:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	697a      	ldr	r2, [r7, #20]
 8005836:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	68fa      	ldr	r2, [r7, #12]
 800583c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	685a      	ldr	r2, [r3, #4]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	693a      	ldr	r2, [r7, #16]
 800584a:	621a      	str	r2, [r3, #32]
}
 800584c:	bf00      	nop
 800584e:	371c      	adds	r7, #28
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr
 8005858:	40012c00 	.word	0x40012c00
 800585c:	40014000 	.word	0x40014000
 8005860:	40014400 	.word	0x40014400
 8005864:	40014800 	.word	0x40014800

08005868 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005868:	b480      	push	{r7}
 800586a:	b087      	sub	sp, #28
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
 8005870:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6a1b      	ldr	r3, [r3, #32]
 8005876:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6a1b      	ldr	r3, [r3, #32]
 8005882:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800588e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005896:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800589a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	021b      	lsls	r3, r3, #8
 80058a2:	68fa      	ldr	r2, [r7, #12]
 80058a4:	4313      	orrs	r3, r2
 80058a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80058ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	051b      	lsls	r3, r3, #20
 80058b6:	693a      	ldr	r2, [r7, #16]
 80058b8:	4313      	orrs	r3, r2
 80058ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	4a16      	ldr	r2, [pc, #88]	; (8005918 <TIM_OC6_SetConfig+0xb0>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d00b      	beq.n	80058dc <TIM_OC6_SetConfig+0x74>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	4a15      	ldr	r2, [pc, #84]	; (800591c <TIM_OC6_SetConfig+0xb4>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d007      	beq.n	80058dc <TIM_OC6_SetConfig+0x74>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	4a14      	ldr	r2, [pc, #80]	; (8005920 <TIM_OC6_SetConfig+0xb8>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d003      	beq.n	80058dc <TIM_OC6_SetConfig+0x74>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	4a13      	ldr	r2, [pc, #76]	; (8005924 <TIM_OC6_SetConfig+0xbc>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d109      	bne.n	80058f0 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80058e2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	695b      	ldr	r3, [r3, #20]
 80058e8:	029b      	lsls	r3, r3, #10
 80058ea:	697a      	ldr	r2, [r7, #20]
 80058ec:	4313      	orrs	r3, r2
 80058ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	697a      	ldr	r2, [r7, #20]
 80058f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	68fa      	ldr	r2, [r7, #12]
 80058fa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	685a      	ldr	r2, [r3, #4]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	693a      	ldr	r2, [r7, #16]
 8005908:	621a      	str	r2, [r3, #32]
}
 800590a:	bf00      	nop
 800590c:	371c      	adds	r7, #28
 800590e:	46bd      	mov	sp, r7
 8005910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005914:	4770      	bx	lr
 8005916:	bf00      	nop
 8005918:	40012c00 	.word	0x40012c00
 800591c:	40014000 	.word	0x40014000
 8005920:	40014400 	.word	0x40014400
 8005924:	40014800 	.word	0x40014800

08005928 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005928:	b480      	push	{r7}
 800592a:	b087      	sub	sp, #28
 800592c:	af00      	add	r7, sp, #0
 800592e:	60f8      	str	r0, [r7, #12]
 8005930:	60b9      	str	r1, [r7, #8]
 8005932:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6a1b      	ldr	r3, [r3, #32]
 8005938:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	6a1b      	ldr	r3, [r3, #32]
 800593e:	f023 0201 	bic.w	r2, r3, #1
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	699b      	ldr	r3, [r3, #24]
 800594a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005952:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	011b      	lsls	r3, r3, #4
 8005958:	693a      	ldr	r2, [r7, #16]
 800595a:	4313      	orrs	r3, r2
 800595c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	f023 030a 	bic.w	r3, r3, #10
 8005964:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005966:	697a      	ldr	r2, [r7, #20]
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	4313      	orrs	r3, r2
 800596c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	693a      	ldr	r2, [r7, #16]
 8005972:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	697a      	ldr	r2, [r7, #20]
 8005978:	621a      	str	r2, [r3, #32]
}
 800597a:	bf00      	nop
 800597c:	371c      	adds	r7, #28
 800597e:	46bd      	mov	sp, r7
 8005980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005984:	4770      	bx	lr

08005986 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005986:	b480      	push	{r7}
 8005988:	b087      	sub	sp, #28
 800598a:	af00      	add	r7, sp, #0
 800598c:	60f8      	str	r0, [r7, #12]
 800598e:	60b9      	str	r1, [r7, #8]
 8005990:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	6a1b      	ldr	r3, [r3, #32]
 8005996:	f023 0210 	bic.w	r2, r3, #16
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	699b      	ldr	r3, [r3, #24]
 80059a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	6a1b      	ldr	r3, [r3, #32]
 80059a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80059b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	031b      	lsls	r3, r3, #12
 80059b6:	697a      	ldr	r2, [r7, #20]
 80059b8:	4313      	orrs	r3, r2
 80059ba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80059c2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	011b      	lsls	r3, r3, #4
 80059c8:	693a      	ldr	r2, [r7, #16]
 80059ca:	4313      	orrs	r3, r2
 80059cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	697a      	ldr	r2, [r7, #20]
 80059d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	693a      	ldr	r2, [r7, #16]
 80059d8:	621a      	str	r2, [r3, #32]
}
 80059da:	bf00      	nop
 80059dc:	371c      	adds	r7, #28
 80059de:	46bd      	mov	sp, r7
 80059e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e4:	4770      	bx	lr

080059e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80059e6:	b480      	push	{r7}
 80059e8:	b085      	sub	sp, #20
 80059ea:	af00      	add	r7, sp, #0
 80059ec:	6078      	str	r0, [r7, #4]
 80059ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80059fe:	683a      	ldr	r2, [r7, #0]
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	4313      	orrs	r3, r2
 8005a04:	f043 0307 	orr.w	r3, r3, #7
 8005a08:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	68fa      	ldr	r2, [r7, #12]
 8005a0e:	609a      	str	r2, [r3, #8]
}
 8005a10:	bf00      	nop
 8005a12:	3714      	adds	r7, #20
 8005a14:	46bd      	mov	sp, r7
 8005a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1a:	4770      	bx	lr

08005a1c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b087      	sub	sp, #28
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	60f8      	str	r0, [r7, #12]
 8005a24:	60b9      	str	r1, [r7, #8]
 8005a26:	607a      	str	r2, [r7, #4]
 8005a28:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a36:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	021a      	lsls	r2, r3, #8
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	431a      	orrs	r2, r3
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	4313      	orrs	r3, r2
 8005a44:	697a      	ldr	r2, [r7, #20]
 8005a46:	4313      	orrs	r3, r2
 8005a48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	697a      	ldr	r2, [r7, #20]
 8005a4e:	609a      	str	r2, [r3, #8]
}
 8005a50:	bf00      	nop
 8005a52:	371c      	adds	r7, #28
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr

08005a5c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b087      	sub	sp, #28
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	60f8      	str	r0, [r7, #12]
 8005a64:	60b9      	str	r1, [r7, #8]
 8005a66:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	f003 031f 	and.w	r3, r3, #31
 8005a6e:	2201      	movs	r2, #1
 8005a70:	fa02 f303 	lsl.w	r3, r2, r3
 8005a74:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	6a1a      	ldr	r2, [r3, #32]
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	43db      	mvns	r3, r3
 8005a7e:	401a      	ands	r2, r3
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	6a1a      	ldr	r2, [r3, #32]
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	f003 031f 	and.w	r3, r3, #31
 8005a8e:	6879      	ldr	r1, [r7, #4]
 8005a90:	fa01 f303 	lsl.w	r3, r1, r3
 8005a94:	431a      	orrs	r2, r3
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	621a      	str	r2, [r3, #32]
}
 8005a9a:	bf00      	nop
 8005a9c:	371c      	adds	r7, #28
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa4:	4770      	bx	lr
	...

08005aa8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b085      	sub	sp, #20
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
 8005ab0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d101      	bne.n	8005ac0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005abc:	2302      	movs	r3, #2
 8005abe:	e054      	b.n	8005b6a <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2202      	movs	r2, #2
 8005acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a24      	ldr	r2, [pc, #144]	; (8005b78 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d108      	bne.n	8005afc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005af0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	68fa      	ldr	r2, [r7, #12]
 8005af8:	4313      	orrs	r3, r2
 8005afa:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	68fa      	ldr	r2, [r7, #12]
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	68fa      	ldr	r2, [r7, #12]
 8005b14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a17      	ldr	r2, [pc, #92]	; (8005b78 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d00e      	beq.n	8005b3e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b28:	d009      	beq.n	8005b3e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a13      	ldr	r2, [pc, #76]	; (8005b7c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d004      	beq.n	8005b3e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a11      	ldr	r2, [pc, #68]	; (8005b80 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d10c      	bne.n	8005b58 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b44:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	68ba      	ldr	r2, [r7, #8]
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	68ba      	ldr	r2, [r7, #8]
 8005b56:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2200      	movs	r2, #0
 8005b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b68:	2300      	movs	r3, #0
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3714      	adds	r7, #20
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b74:	4770      	bx	lr
 8005b76:	bf00      	nop
 8005b78:	40012c00 	.word	0x40012c00
 8005b7c:	40000400 	.word	0x40000400
 8005b80:	40014000 	.word	0x40014000

08005b84 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b085      	sub	sp, #20
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
 8005b8c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d101      	bne.n	8005ba0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005b9c:	2302      	movs	r3, #2
 8005b9e:	e060      	b.n	8005c62 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	68db      	ldr	r3, [r3, #12]
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	691b      	ldr	r3, [r3, #16]
 8005bea:	4313      	orrs	r3, r2
 8005bec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	695b      	ldr	r3, [r3, #20]
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c06:	4313      	orrs	r3, r2
 8005c08:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	699b      	ldr	r3, [r3, #24]
 8005c14:	041b      	lsls	r3, r3, #16
 8005c16:	4313      	orrs	r3, r2
 8005c18:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a14      	ldr	r2, [pc, #80]	; (8005c70 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d115      	bne.n	8005c50 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c2e:	051b      	lsls	r3, r3, #20
 8005c30:	4313      	orrs	r3, r2
 8005c32:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	69db      	ldr	r3, [r3, #28]
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	6a1b      	ldr	r3, [r3, #32]
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	68fa      	ldr	r2, [r7, #12]
 8005c56:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c60:	2300      	movs	r3, #0
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3714      	adds	r7, #20
 8005c66:	46bd      	mov	sp, r7
 8005c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6c:	4770      	bx	lr
 8005c6e:	bf00      	nop
 8005c70:	40012c00 	.word	0x40012c00

08005c74 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b082      	sub	sp, #8
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d101      	bne.n	8005c86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c82:	2301      	movs	r3, #1
 8005c84:	e040      	b.n	8005d08 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d106      	bne.n	8005c9c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2200      	movs	r2, #0
 8005c92:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f7fb ffc0 	bl	8001c1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2224      	movs	r2, #36	; 0x24
 8005ca0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f022 0201 	bic.w	r2, r2, #1
 8005cb0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f000 f82c 	bl	8005d10 <UART_SetConfig>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	2b01      	cmp	r3, #1
 8005cbc:	d101      	bne.n	8005cc2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	e022      	b.n	8005d08 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d002      	beq.n	8005cd0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f000 f956 	bl	8005f7c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	685a      	ldr	r2, [r3, #4]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005cde:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	689a      	ldr	r2, [r3, #8]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005cee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	681a      	ldr	r2, [r3, #0]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f042 0201 	orr.w	r2, r2, #1
 8005cfe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	f000 f9dd 	bl	80060c0 <UART_CheckIdleState>
 8005d06:	4603      	mov	r3, r0
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	3708      	adds	r7, #8
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}

08005d10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b088      	sub	sp, #32
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d18:	2300      	movs	r3, #0
 8005d1a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	689a      	ldr	r2, [r3, #8]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	691b      	ldr	r3, [r3, #16]
 8005d24:	431a      	orrs	r2, r3
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	695b      	ldr	r3, [r3, #20]
 8005d2a:	431a      	orrs	r2, r3
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	69db      	ldr	r3, [r3, #28]
 8005d30:	4313      	orrs	r3, r2
 8005d32:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	681a      	ldr	r2, [r3, #0]
 8005d3a:	4b8a      	ldr	r3, [pc, #552]	; (8005f64 <UART_SetConfig+0x254>)
 8005d3c:	4013      	ands	r3, r2
 8005d3e:	687a      	ldr	r2, [r7, #4]
 8005d40:	6812      	ldr	r2, [r2, #0]
 8005d42:	6979      	ldr	r1, [r7, #20]
 8005d44:	430b      	orrs	r3, r1
 8005d46:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	68da      	ldr	r2, [r3, #12]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	430a      	orrs	r2, r1
 8005d5c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	699b      	ldr	r3, [r3, #24]
 8005d62:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6a1b      	ldr	r3, [r3, #32]
 8005d68:	697a      	ldr	r2, [r7, #20]
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	697a      	ldr	r2, [r7, #20]
 8005d7e:	430a      	orrs	r2, r1
 8005d80:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a78      	ldr	r2, [pc, #480]	; (8005f68 <UART_SetConfig+0x258>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d120      	bne.n	8005dce <UART_SetConfig+0xbe>
 8005d8c:	4b77      	ldr	r3, [pc, #476]	; (8005f6c <UART_SetConfig+0x25c>)
 8005d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d90:	f003 0303 	and.w	r3, r3, #3
 8005d94:	2b03      	cmp	r3, #3
 8005d96:	d817      	bhi.n	8005dc8 <UART_SetConfig+0xb8>
 8005d98:	a201      	add	r2, pc, #4	; (adr r2, 8005da0 <UART_SetConfig+0x90>)
 8005d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d9e:	bf00      	nop
 8005da0:	08005db1 	.word	0x08005db1
 8005da4:	08005dbd 	.word	0x08005dbd
 8005da8:	08005dc3 	.word	0x08005dc3
 8005dac:	08005db7 	.word	0x08005db7
 8005db0:	2300      	movs	r3, #0
 8005db2:	77fb      	strb	r3, [r7, #31]
 8005db4:	e01d      	b.n	8005df2 <UART_SetConfig+0xe2>
 8005db6:	2302      	movs	r3, #2
 8005db8:	77fb      	strb	r3, [r7, #31]
 8005dba:	e01a      	b.n	8005df2 <UART_SetConfig+0xe2>
 8005dbc:	2304      	movs	r3, #4
 8005dbe:	77fb      	strb	r3, [r7, #31]
 8005dc0:	e017      	b.n	8005df2 <UART_SetConfig+0xe2>
 8005dc2:	2308      	movs	r3, #8
 8005dc4:	77fb      	strb	r3, [r7, #31]
 8005dc6:	e014      	b.n	8005df2 <UART_SetConfig+0xe2>
 8005dc8:	2310      	movs	r3, #16
 8005dca:	77fb      	strb	r3, [r7, #31]
 8005dcc:	e011      	b.n	8005df2 <UART_SetConfig+0xe2>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a67      	ldr	r2, [pc, #412]	; (8005f70 <UART_SetConfig+0x260>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d102      	bne.n	8005dde <UART_SetConfig+0xce>
 8005dd8:	2300      	movs	r3, #0
 8005dda:	77fb      	strb	r3, [r7, #31]
 8005ddc:	e009      	b.n	8005df2 <UART_SetConfig+0xe2>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a64      	ldr	r2, [pc, #400]	; (8005f74 <UART_SetConfig+0x264>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d102      	bne.n	8005dee <UART_SetConfig+0xde>
 8005de8:	2300      	movs	r3, #0
 8005dea:	77fb      	strb	r3, [r7, #31]
 8005dec:	e001      	b.n	8005df2 <UART_SetConfig+0xe2>
 8005dee:	2310      	movs	r3, #16
 8005df0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	69db      	ldr	r3, [r3, #28]
 8005df6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005dfa:	d15b      	bne.n	8005eb4 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8005dfc:	7ffb      	ldrb	r3, [r7, #31]
 8005dfe:	2b08      	cmp	r3, #8
 8005e00:	d827      	bhi.n	8005e52 <UART_SetConfig+0x142>
 8005e02:	a201      	add	r2, pc, #4	; (adr r2, 8005e08 <UART_SetConfig+0xf8>)
 8005e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e08:	08005e2d 	.word	0x08005e2d
 8005e0c:	08005e35 	.word	0x08005e35
 8005e10:	08005e3d 	.word	0x08005e3d
 8005e14:	08005e53 	.word	0x08005e53
 8005e18:	08005e43 	.word	0x08005e43
 8005e1c:	08005e53 	.word	0x08005e53
 8005e20:	08005e53 	.word	0x08005e53
 8005e24:	08005e53 	.word	0x08005e53
 8005e28:	08005e4b 	.word	0x08005e4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e2c:	f7fe fd1c 	bl	8004868 <HAL_RCC_GetPCLK1Freq>
 8005e30:	61b8      	str	r0, [r7, #24]
        break;
 8005e32:	e013      	b.n	8005e5c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e34:	f7fe fd3a 	bl	80048ac <HAL_RCC_GetPCLK2Freq>
 8005e38:	61b8      	str	r0, [r7, #24]
        break;
 8005e3a:	e00f      	b.n	8005e5c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e3c:	4b4e      	ldr	r3, [pc, #312]	; (8005f78 <UART_SetConfig+0x268>)
 8005e3e:	61bb      	str	r3, [r7, #24]
        break;
 8005e40:	e00c      	b.n	8005e5c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e42:	f7fe fc9b 	bl	800477c <HAL_RCC_GetSysClockFreq>
 8005e46:	61b8      	str	r0, [r7, #24]
        break;
 8005e48:	e008      	b.n	8005e5c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e4e:	61bb      	str	r3, [r7, #24]
        break;
 8005e50:	e004      	b.n	8005e5c <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8005e52:	2300      	movs	r3, #0
 8005e54:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
 8005e58:	77bb      	strb	r3, [r7, #30]
        break;
 8005e5a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005e5c:	69bb      	ldr	r3, [r7, #24]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d074      	beq.n	8005f4c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005e62:	69bb      	ldr	r3, [r7, #24]
 8005e64:	005a      	lsls	r2, r3, #1
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	085b      	lsrs	r3, r3, #1
 8005e6c:	441a      	add	r2, r3
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e76:	b29b      	uxth	r3, r3
 8005e78:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	2b0f      	cmp	r3, #15
 8005e7e:	d916      	bls.n	8005eae <UART_SetConfig+0x19e>
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e86:	d212      	bcs.n	8005eae <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	b29b      	uxth	r3, r3
 8005e8c:	f023 030f 	bic.w	r3, r3, #15
 8005e90:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	085b      	lsrs	r3, r3, #1
 8005e96:	b29b      	uxth	r3, r3
 8005e98:	f003 0307 	and.w	r3, r3, #7
 8005e9c:	b29a      	uxth	r2, r3
 8005e9e:	89fb      	ldrh	r3, [r7, #14]
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	89fa      	ldrh	r2, [r7, #14]
 8005eaa:	60da      	str	r2, [r3, #12]
 8005eac:	e04e      	b.n	8005f4c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	77bb      	strb	r3, [r7, #30]
 8005eb2:	e04b      	b.n	8005f4c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005eb4:	7ffb      	ldrb	r3, [r7, #31]
 8005eb6:	2b08      	cmp	r3, #8
 8005eb8:	d827      	bhi.n	8005f0a <UART_SetConfig+0x1fa>
 8005eba:	a201      	add	r2, pc, #4	; (adr r2, 8005ec0 <UART_SetConfig+0x1b0>)
 8005ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ec0:	08005ee5 	.word	0x08005ee5
 8005ec4:	08005eed 	.word	0x08005eed
 8005ec8:	08005ef5 	.word	0x08005ef5
 8005ecc:	08005f0b 	.word	0x08005f0b
 8005ed0:	08005efb 	.word	0x08005efb
 8005ed4:	08005f0b 	.word	0x08005f0b
 8005ed8:	08005f0b 	.word	0x08005f0b
 8005edc:	08005f0b 	.word	0x08005f0b
 8005ee0:	08005f03 	.word	0x08005f03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ee4:	f7fe fcc0 	bl	8004868 <HAL_RCC_GetPCLK1Freq>
 8005ee8:	61b8      	str	r0, [r7, #24]
        break;
 8005eea:	e013      	b.n	8005f14 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005eec:	f7fe fcde 	bl	80048ac <HAL_RCC_GetPCLK2Freq>
 8005ef0:	61b8      	str	r0, [r7, #24]
        break;
 8005ef2:	e00f      	b.n	8005f14 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ef4:	4b20      	ldr	r3, [pc, #128]	; (8005f78 <UART_SetConfig+0x268>)
 8005ef6:	61bb      	str	r3, [r7, #24]
        break;
 8005ef8:	e00c      	b.n	8005f14 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005efa:	f7fe fc3f 	bl	800477c <HAL_RCC_GetSysClockFreq>
 8005efe:	61b8      	str	r0, [r7, #24]
        break;
 8005f00:	e008      	b.n	8005f14 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f06:	61bb      	str	r3, [r7, #24]
        break;
 8005f08:	e004      	b.n	8005f14 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	77bb      	strb	r3, [r7, #30]
        break;
 8005f12:	bf00      	nop
    }

    if (pclk != 0U)
 8005f14:	69bb      	ldr	r3, [r7, #24]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d018      	beq.n	8005f4c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	085a      	lsrs	r2, r3, #1
 8005f20:	69bb      	ldr	r3, [r7, #24]
 8005f22:	441a      	add	r2, r3
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f2c:	b29b      	uxth	r3, r3
 8005f2e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	2b0f      	cmp	r3, #15
 8005f34:	d908      	bls.n	8005f48 <UART_SetConfig+0x238>
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f3c:	d204      	bcs.n	8005f48 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	693a      	ldr	r2, [r7, #16]
 8005f44:	60da      	str	r2, [r3, #12]
 8005f46:	e001      	b.n	8005f4c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2200      	movs	r2, #0
 8005f56:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005f58:	7fbb      	ldrb	r3, [r7, #30]
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	3720      	adds	r7, #32
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}
 8005f62:	bf00      	nop
 8005f64:	efff69f3 	.word	0xefff69f3
 8005f68:	40013800 	.word	0x40013800
 8005f6c:	40021000 	.word	0x40021000
 8005f70:	40004400 	.word	0x40004400
 8005f74:	40004800 	.word	0x40004800
 8005f78:	007a1200 	.word	0x007a1200

08005f7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b083      	sub	sp, #12
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f88:	f003 0301 	and.w	r3, r3, #1
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d00a      	beq.n	8005fa6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	430a      	orrs	r2, r1
 8005fa4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005faa:	f003 0302 	and.w	r3, r3, #2
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d00a      	beq.n	8005fc8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	430a      	orrs	r2, r1
 8005fc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fcc:	f003 0304 	and.w	r3, r3, #4
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d00a      	beq.n	8005fea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	430a      	orrs	r2, r1
 8005fe8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fee:	f003 0308 	and.w	r3, r3, #8
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d00a      	beq.n	800600c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	430a      	orrs	r2, r1
 800600a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006010:	f003 0310 	and.w	r3, r3, #16
 8006014:	2b00      	cmp	r3, #0
 8006016:	d00a      	beq.n	800602e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	689b      	ldr	r3, [r3, #8]
 800601e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	430a      	orrs	r2, r1
 800602c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006032:	f003 0320 	and.w	r3, r3, #32
 8006036:	2b00      	cmp	r3, #0
 8006038:	d00a      	beq.n	8006050 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	430a      	orrs	r2, r1
 800604e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006058:	2b00      	cmp	r3, #0
 800605a:	d01a      	beq.n	8006092 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	430a      	orrs	r2, r1
 8006070:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006076:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800607a:	d10a      	bne.n	8006092 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	430a      	orrs	r2, r1
 8006090:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800609a:	2b00      	cmp	r3, #0
 800609c:	d00a      	beq.n	80060b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	430a      	orrs	r2, r1
 80060b2:	605a      	str	r2, [r3, #4]
  }
}
 80060b4:	bf00      	nop
 80060b6:	370c      	adds	r7, #12
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr

080060c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b086      	sub	sp, #24
 80060c4:	af02      	add	r7, sp, #8
 80060c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2200      	movs	r2, #0
 80060cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80060d0:	f7fb ff6e 	bl	8001fb0 <HAL_GetTick>
 80060d4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f003 0308 	and.w	r3, r3, #8
 80060e0:	2b08      	cmp	r3, #8
 80060e2:	d10e      	bne.n	8006102 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80060e8:	9300      	str	r3, [sp, #0]
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2200      	movs	r2, #0
 80060ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f000 f82d 	bl	8006152 <UART_WaitOnFlagUntilTimeout>
 80060f8:	4603      	mov	r3, r0
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d001      	beq.n	8006102 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060fe:	2303      	movs	r3, #3
 8006100:	e023      	b.n	800614a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f003 0304 	and.w	r3, r3, #4
 800610c:	2b04      	cmp	r3, #4
 800610e:	d10e      	bne.n	800612e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006110:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006114:	9300      	str	r3, [sp, #0]
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2200      	movs	r2, #0
 800611a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f000 f817 	bl	8006152 <UART_WaitOnFlagUntilTimeout>
 8006124:	4603      	mov	r3, r0
 8006126:	2b00      	cmp	r3, #0
 8006128:	d001      	beq.n	800612e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800612a:	2303      	movs	r3, #3
 800612c:	e00d      	b.n	800614a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2220      	movs	r2, #32
 8006132:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2220      	movs	r2, #32
 8006138:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2200      	movs	r2, #0
 800613e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2200      	movs	r2, #0
 8006144:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006148:	2300      	movs	r3, #0
}
 800614a:	4618      	mov	r0, r3
 800614c:	3710      	adds	r7, #16
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}

08006152 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006152:	b580      	push	{r7, lr}
 8006154:	b09c      	sub	sp, #112	; 0x70
 8006156:	af00      	add	r7, sp, #0
 8006158:	60f8      	str	r0, [r7, #12]
 800615a:	60b9      	str	r1, [r7, #8]
 800615c:	603b      	str	r3, [r7, #0]
 800615e:	4613      	mov	r3, r2
 8006160:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006162:	e0a5      	b.n	80062b0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006164:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800616a:	f000 80a1 	beq.w	80062b0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800616e:	f7fb ff1f 	bl	8001fb0 <HAL_GetTick>
 8006172:	4602      	mov	r2, r0
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	1ad3      	subs	r3, r2, r3
 8006178:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800617a:	429a      	cmp	r2, r3
 800617c:	d302      	bcc.n	8006184 <UART_WaitOnFlagUntilTimeout+0x32>
 800617e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006180:	2b00      	cmp	r3, #0
 8006182:	d13e      	bne.n	8006202 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800618a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800618c:	e853 3f00 	ldrex	r3, [r3]
 8006190:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006192:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006194:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006198:	667b      	str	r3, [r7, #100]	; 0x64
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	461a      	mov	r2, r3
 80061a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80061a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80061a4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061a6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80061a8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80061aa:	e841 2300 	strex	r3, r2, [r1]
 80061ae:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80061b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d1e6      	bne.n	8006184 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	3308      	adds	r3, #8
 80061bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061c0:	e853 3f00 	ldrex	r3, [r3]
 80061c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80061c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061c8:	f023 0301 	bic.w	r3, r3, #1
 80061cc:	663b      	str	r3, [r7, #96]	; 0x60
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	3308      	adds	r3, #8
 80061d4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80061d6:	64ba      	str	r2, [r7, #72]	; 0x48
 80061d8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061da:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80061dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80061de:	e841 2300 	strex	r3, r2, [r1]
 80061e2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80061e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d1e5      	bne.n	80061b6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2220      	movs	r2, #32
 80061ee:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2220      	movs	r2, #32
 80061f4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2200      	movs	r2, #0
 80061fa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80061fe:	2303      	movs	r3, #3
 8006200:	e067      	b.n	80062d2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f003 0304 	and.w	r3, r3, #4
 800620c:	2b00      	cmp	r3, #0
 800620e:	d04f      	beq.n	80062b0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	69db      	ldr	r3, [r3, #28]
 8006216:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800621a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800621e:	d147      	bne.n	80062b0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006228:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006232:	e853 3f00 	ldrex	r3, [r3]
 8006236:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800623a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800623e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	461a      	mov	r2, r3
 8006246:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006248:	637b      	str	r3, [r7, #52]	; 0x34
 800624a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800624c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800624e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006250:	e841 2300 	strex	r3, r2, [r1]
 8006254:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006258:	2b00      	cmp	r3, #0
 800625a:	d1e6      	bne.n	800622a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	3308      	adds	r3, #8
 8006262:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	e853 3f00 	ldrex	r3, [r3]
 800626a:	613b      	str	r3, [r7, #16]
   return(result);
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	f023 0301 	bic.w	r3, r3, #1
 8006272:	66bb      	str	r3, [r7, #104]	; 0x68
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	3308      	adds	r3, #8
 800627a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800627c:	623a      	str	r2, [r7, #32]
 800627e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006280:	69f9      	ldr	r1, [r7, #28]
 8006282:	6a3a      	ldr	r2, [r7, #32]
 8006284:	e841 2300 	strex	r3, r2, [r1]
 8006288:	61bb      	str	r3, [r7, #24]
   return(result);
 800628a:	69bb      	ldr	r3, [r7, #24]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d1e5      	bne.n	800625c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2220      	movs	r2, #32
 8006294:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	2220      	movs	r2, #32
 800629a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2220      	movs	r2, #32
 80062a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2200      	movs	r2, #0
 80062a8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80062ac:	2303      	movs	r3, #3
 80062ae:	e010      	b.n	80062d2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	69da      	ldr	r2, [r3, #28]
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	4013      	ands	r3, r2
 80062ba:	68ba      	ldr	r2, [r7, #8]
 80062bc:	429a      	cmp	r2, r3
 80062be:	bf0c      	ite	eq
 80062c0:	2301      	moveq	r3, #1
 80062c2:	2300      	movne	r3, #0
 80062c4:	b2db      	uxtb	r3, r3
 80062c6:	461a      	mov	r2, r3
 80062c8:	79fb      	ldrb	r3, [r7, #7]
 80062ca:	429a      	cmp	r2, r3
 80062cc:	f43f af4a 	beq.w	8006164 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80062d0:	2300      	movs	r3, #0
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	3770      	adds	r7, #112	; 0x70
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}
	...

080062dc <__errno>:
 80062dc:	4b01      	ldr	r3, [pc, #4]	; (80062e4 <__errno+0x8>)
 80062de:	6818      	ldr	r0, [r3, #0]
 80062e0:	4770      	bx	lr
 80062e2:	bf00      	nop
 80062e4:	2000000c 	.word	0x2000000c

080062e8 <__libc_init_array>:
 80062e8:	b570      	push	{r4, r5, r6, lr}
 80062ea:	4d0d      	ldr	r5, [pc, #52]	; (8006320 <__libc_init_array+0x38>)
 80062ec:	4c0d      	ldr	r4, [pc, #52]	; (8006324 <__libc_init_array+0x3c>)
 80062ee:	1b64      	subs	r4, r4, r5
 80062f0:	10a4      	asrs	r4, r4, #2
 80062f2:	2600      	movs	r6, #0
 80062f4:	42a6      	cmp	r6, r4
 80062f6:	d109      	bne.n	800630c <__libc_init_array+0x24>
 80062f8:	4d0b      	ldr	r5, [pc, #44]	; (8006328 <__libc_init_array+0x40>)
 80062fa:	4c0c      	ldr	r4, [pc, #48]	; (800632c <__libc_init_array+0x44>)
 80062fc:	f005 f862 	bl	800b3c4 <_init>
 8006300:	1b64      	subs	r4, r4, r5
 8006302:	10a4      	asrs	r4, r4, #2
 8006304:	2600      	movs	r6, #0
 8006306:	42a6      	cmp	r6, r4
 8006308:	d105      	bne.n	8006316 <__libc_init_array+0x2e>
 800630a:	bd70      	pop	{r4, r5, r6, pc}
 800630c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006310:	4798      	blx	r3
 8006312:	3601      	adds	r6, #1
 8006314:	e7ee      	b.n	80062f4 <__libc_init_array+0xc>
 8006316:	f855 3b04 	ldr.w	r3, [r5], #4
 800631a:	4798      	blx	r3
 800631c:	3601      	adds	r6, #1
 800631e:	e7f2      	b.n	8006306 <__libc_init_array+0x1e>
 8006320:	0800b8dc 	.word	0x0800b8dc
 8006324:	0800b8dc 	.word	0x0800b8dc
 8006328:	0800b8dc 	.word	0x0800b8dc
 800632c:	0800b8e0 	.word	0x0800b8e0

08006330 <memset>:
 8006330:	4402      	add	r2, r0
 8006332:	4603      	mov	r3, r0
 8006334:	4293      	cmp	r3, r2
 8006336:	d100      	bne.n	800633a <memset+0xa>
 8006338:	4770      	bx	lr
 800633a:	f803 1b01 	strb.w	r1, [r3], #1
 800633e:	e7f9      	b.n	8006334 <memset+0x4>

08006340 <__cvt>:
 8006340:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006344:	ec55 4b10 	vmov	r4, r5, d0
 8006348:	2d00      	cmp	r5, #0
 800634a:	460e      	mov	r6, r1
 800634c:	4619      	mov	r1, r3
 800634e:	462b      	mov	r3, r5
 8006350:	bfbb      	ittet	lt
 8006352:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006356:	461d      	movlt	r5, r3
 8006358:	2300      	movge	r3, #0
 800635a:	232d      	movlt	r3, #45	; 0x2d
 800635c:	700b      	strb	r3, [r1, #0]
 800635e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006360:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006364:	4691      	mov	r9, r2
 8006366:	f023 0820 	bic.w	r8, r3, #32
 800636a:	bfbc      	itt	lt
 800636c:	4622      	movlt	r2, r4
 800636e:	4614      	movlt	r4, r2
 8006370:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006374:	d005      	beq.n	8006382 <__cvt+0x42>
 8006376:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800637a:	d100      	bne.n	800637e <__cvt+0x3e>
 800637c:	3601      	adds	r6, #1
 800637e:	2102      	movs	r1, #2
 8006380:	e000      	b.n	8006384 <__cvt+0x44>
 8006382:	2103      	movs	r1, #3
 8006384:	ab03      	add	r3, sp, #12
 8006386:	9301      	str	r3, [sp, #4]
 8006388:	ab02      	add	r3, sp, #8
 800638a:	9300      	str	r3, [sp, #0]
 800638c:	ec45 4b10 	vmov	d0, r4, r5
 8006390:	4653      	mov	r3, sl
 8006392:	4632      	mov	r2, r6
 8006394:	f001 fdac 	bl	8007ef0 <_dtoa_r>
 8006398:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800639c:	4607      	mov	r7, r0
 800639e:	d102      	bne.n	80063a6 <__cvt+0x66>
 80063a0:	f019 0f01 	tst.w	r9, #1
 80063a4:	d022      	beq.n	80063ec <__cvt+0xac>
 80063a6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80063aa:	eb07 0906 	add.w	r9, r7, r6
 80063ae:	d110      	bne.n	80063d2 <__cvt+0x92>
 80063b0:	783b      	ldrb	r3, [r7, #0]
 80063b2:	2b30      	cmp	r3, #48	; 0x30
 80063b4:	d10a      	bne.n	80063cc <__cvt+0x8c>
 80063b6:	2200      	movs	r2, #0
 80063b8:	2300      	movs	r3, #0
 80063ba:	4620      	mov	r0, r4
 80063bc:	4629      	mov	r1, r5
 80063be:	f7fa fb83 	bl	8000ac8 <__aeabi_dcmpeq>
 80063c2:	b918      	cbnz	r0, 80063cc <__cvt+0x8c>
 80063c4:	f1c6 0601 	rsb	r6, r6, #1
 80063c8:	f8ca 6000 	str.w	r6, [sl]
 80063cc:	f8da 3000 	ldr.w	r3, [sl]
 80063d0:	4499      	add	r9, r3
 80063d2:	2200      	movs	r2, #0
 80063d4:	2300      	movs	r3, #0
 80063d6:	4620      	mov	r0, r4
 80063d8:	4629      	mov	r1, r5
 80063da:	f7fa fb75 	bl	8000ac8 <__aeabi_dcmpeq>
 80063de:	b108      	cbz	r0, 80063e4 <__cvt+0xa4>
 80063e0:	f8cd 900c 	str.w	r9, [sp, #12]
 80063e4:	2230      	movs	r2, #48	; 0x30
 80063e6:	9b03      	ldr	r3, [sp, #12]
 80063e8:	454b      	cmp	r3, r9
 80063ea:	d307      	bcc.n	80063fc <__cvt+0xbc>
 80063ec:	9b03      	ldr	r3, [sp, #12]
 80063ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80063f0:	1bdb      	subs	r3, r3, r7
 80063f2:	4638      	mov	r0, r7
 80063f4:	6013      	str	r3, [r2, #0]
 80063f6:	b004      	add	sp, #16
 80063f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063fc:	1c59      	adds	r1, r3, #1
 80063fe:	9103      	str	r1, [sp, #12]
 8006400:	701a      	strb	r2, [r3, #0]
 8006402:	e7f0      	b.n	80063e6 <__cvt+0xa6>

08006404 <__exponent>:
 8006404:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006406:	4603      	mov	r3, r0
 8006408:	2900      	cmp	r1, #0
 800640a:	bfb8      	it	lt
 800640c:	4249      	neglt	r1, r1
 800640e:	f803 2b02 	strb.w	r2, [r3], #2
 8006412:	bfb4      	ite	lt
 8006414:	222d      	movlt	r2, #45	; 0x2d
 8006416:	222b      	movge	r2, #43	; 0x2b
 8006418:	2909      	cmp	r1, #9
 800641a:	7042      	strb	r2, [r0, #1]
 800641c:	dd2a      	ble.n	8006474 <__exponent+0x70>
 800641e:	f10d 0407 	add.w	r4, sp, #7
 8006422:	46a4      	mov	ip, r4
 8006424:	270a      	movs	r7, #10
 8006426:	46a6      	mov	lr, r4
 8006428:	460a      	mov	r2, r1
 800642a:	fb91 f6f7 	sdiv	r6, r1, r7
 800642e:	fb07 1516 	mls	r5, r7, r6, r1
 8006432:	3530      	adds	r5, #48	; 0x30
 8006434:	2a63      	cmp	r2, #99	; 0x63
 8006436:	f104 34ff 	add.w	r4, r4, #4294967295
 800643a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800643e:	4631      	mov	r1, r6
 8006440:	dcf1      	bgt.n	8006426 <__exponent+0x22>
 8006442:	3130      	adds	r1, #48	; 0x30
 8006444:	f1ae 0502 	sub.w	r5, lr, #2
 8006448:	f804 1c01 	strb.w	r1, [r4, #-1]
 800644c:	1c44      	adds	r4, r0, #1
 800644e:	4629      	mov	r1, r5
 8006450:	4561      	cmp	r1, ip
 8006452:	d30a      	bcc.n	800646a <__exponent+0x66>
 8006454:	f10d 0209 	add.w	r2, sp, #9
 8006458:	eba2 020e 	sub.w	r2, r2, lr
 800645c:	4565      	cmp	r5, ip
 800645e:	bf88      	it	hi
 8006460:	2200      	movhi	r2, #0
 8006462:	4413      	add	r3, r2
 8006464:	1a18      	subs	r0, r3, r0
 8006466:	b003      	add	sp, #12
 8006468:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800646a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800646e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006472:	e7ed      	b.n	8006450 <__exponent+0x4c>
 8006474:	2330      	movs	r3, #48	; 0x30
 8006476:	3130      	adds	r1, #48	; 0x30
 8006478:	7083      	strb	r3, [r0, #2]
 800647a:	70c1      	strb	r1, [r0, #3]
 800647c:	1d03      	adds	r3, r0, #4
 800647e:	e7f1      	b.n	8006464 <__exponent+0x60>

08006480 <_printf_float>:
 8006480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006484:	ed2d 8b02 	vpush	{d8}
 8006488:	b08d      	sub	sp, #52	; 0x34
 800648a:	460c      	mov	r4, r1
 800648c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006490:	4616      	mov	r6, r2
 8006492:	461f      	mov	r7, r3
 8006494:	4605      	mov	r5, r0
 8006496:	f002 fe89 	bl	80091ac <_localeconv_r>
 800649a:	f8d0 a000 	ldr.w	sl, [r0]
 800649e:	4650      	mov	r0, sl
 80064a0:	f7f9 fe96 	bl	80001d0 <strlen>
 80064a4:	2300      	movs	r3, #0
 80064a6:	930a      	str	r3, [sp, #40]	; 0x28
 80064a8:	6823      	ldr	r3, [r4, #0]
 80064aa:	9305      	str	r3, [sp, #20]
 80064ac:	f8d8 3000 	ldr.w	r3, [r8]
 80064b0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80064b4:	3307      	adds	r3, #7
 80064b6:	f023 0307 	bic.w	r3, r3, #7
 80064ba:	f103 0208 	add.w	r2, r3, #8
 80064be:	f8c8 2000 	str.w	r2, [r8]
 80064c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064c6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80064ca:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80064ce:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80064d2:	9307      	str	r3, [sp, #28]
 80064d4:	f8cd 8018 	str.w	r8, [sp, #24]
 80064d8:	ee08 0a10 	vmov	s16, r0
 80064dc:	4b9f      	ldr	r3, [pc, #636]	; (800675c <_printf_float+0x2dc>)
 80064de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80064e2:	f04f 32ff 	mov.w	r2, #4294967295
 80064e6:	f7fa fb21 	bl	8000b2c <__aeabi_dcmpun>
 80064ea:	bb88      	cbnz	r0, 8006550 <_printf_float+0xd0>
 80064ec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80064f0:	4b9a      	ldr	r3, [pc, #616]	; (800675c <_printf_float+0x2dc>)
 80064f2:	f04f 32ff 	mov.w	r2, #4294967295
 80064f6:	f7fa fafb 	bl	8000af0 <__aeabi_dcmple>
 80064fa:	bb48      	cbnz	r0, 8006550 <_printf_float+0xd0>
 80064fc:	2200      	movs	r2, #0
 80064fe:	2300      	movs	r3, #0
 8006500:	4640      	mov	r0, r8
 8006502:	4649      	mov	r1, r9
 8006504:	f7fa faea 	bl	8000adc <__aeabi_dcmplt>
 8006508:	b110      	cbz	r0, 8006510 <_printf_float+0x90>
 800650a:	232d      	movs	r3, #45	; 0x2d
 800650c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006510:	4b93      	ldr	r3, [pc, #588]	; (8006760 <_printf_float+0x2e0>)
 8006512:	4894      	ldr	r0, [pc, #592]	; (8006764 <_printf_float+0x2e4>)
 8006514:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006518:	bf94      	ite	ls
 800651a:	4698      	movls	r8, r3
 800651c:	4680      	movhi	r8, r0
 800651e:	2303      	movs	r3, #3
 8006520:	6123      	str	r3, [r4, #16]
 8006522:	9b05      	ldr	r3, [sp, #20]
 8006524:	f023 0204 	bic.w	r2, r3, #4
 8006528:	6022      	str	r2, [r4, #0]
 800652a:	f04f 0900 	mov.w	r9, #0
 800652e:	9700      	str	r7, [sp, #0]
 8006530:	4633      	mov	r3, r6
 8006532:	aa0b      	add	r2, sp, #44	; 0x2c
 8006534:	4621      	mov	r1, r4
 8006536:	4628      	mov	r0, r5
 8006538:	f000 f9d8 	bl	80068ec <_printf_common>
 800653c:	3001      	adds	r0, #1
 800653e:	f040 8090 	bne.w	8006662 <_printf_float+0x1e2>
 8006542:	f04f 30ff 	mov.w	r0, #4294967295
 8006546:	b00d      	add	sp, #52	; 0x34
 8006548:	ecbd 8b02 	vpop	{d8}
 800654c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006550:	4642      	mov	r2, r8
 8006552:	464b      	mov	r3, r9
 8006554:	4640      	mov	r0, r8
 8006556:	4649      	mov	r1, r9
 8006558:	f7fa fae8 	bl	8000b2c <__aeabi_dcmpun>
 800655c:	b140      	cbz	r0, 8006570 <_printf_float+0xf0>
 800655e:	464b      	mov	r3, r9
 8006560:	2b00      	cmp	r3, #0
 8006562:	bfbc      	itt	lt
 8006564:	232d      	movlt	r3, #45	; 0x2d
 8006566:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800656a:	487f      	ldr	r0, [pc, #508]	; (8006768 <_printf_float+0x2e8>)
 800656c:	4b7f      	ldr	r3, [pc, #508]	; (800676c <_printf_float+0x2ec>)
 800656e:	e7d1      	b.n	8006514 <_printf_float+0x94>
 8006570:	6863      	ldr	r3, [r4, #4]
 8006572:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006576:	9206      	str	r2, [sp, #24]
 8006578:	1c5a      	adds	r2, r3, #1
 800657a:	d13f      	bne.n	80065fc <_printf_float+0x17c>
 800657c:	2306      	movs	r3, #6
 800657e:	6063      	str	r3, [r4, #4]
 8006580:	9b05      	ldr	r3, [sp, #20]
 8006582:	6861      	ldr	r1, [r4, #4]
 8006584:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006588:	2300      	movs	r3, #0
 800658a:	9303      	str	r3, [sp, #12]
 800658c:	ab0a      	add	r3, sp, #40	; 0x28
 800658e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006592:	ab09      	add	r3, sp, #36	; 0x24
 8006594:	ec49 8b10 	vmov	d0, r8, r9
 8006598:	9300      	str	r3, [sp, #0]
 800659a:	6022      	str	r2, [r4, #0]
 800659c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80065a0:	4628      	mov	r0, r5
 80065a2:	f7ff fecd 	bl	8006340 <__cvt>
 80065a6:	9b06      	ldr	r3, [sp, #24]
 80065a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80065aa:	2b47      	cmp	r3, #71	; 0x47
 80065ac:	4680      	mov	r8, r0
 80065ae:	d108      	bne.n	80065c2 <_printf_float+0x142>
 80065b0:	1cc8      	adds	r0, r1, #3
 80065b2:	db02      	blt.n	80065ba <_printf_float+0x13a>
 80065b4:	6863      	ldr	r3, [r4, #4]
 80065b6:	4299      	cmp	r1, r3
 80065b8:	dd41      	ble.n	800663e <_printf_float+0x1be>
 80065ba:	f1ab 0b02 	sub.w	fp, fp, #2
 80065be:	fa5f fb8b 	uxtb.w	fp, fp
 80065c2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80065c6:	d820      	bhi.n	800660a <_printf_float+0x18a>
 80065c8:	3901      	subs	r1, #1
 80065ca:	465a      	mov	r2, fp
 80065cc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80065d0:	9109      	str	r1, [sp, #36]	; 0x24
 80065d2:	f7ff ff17 	bl	8006404 <__exponent>
 80065d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80065d8:	1813      	adds	r3, r2, r0
 80065da:	2a01      	cmp	r2, #1
 80065dc:	4681      	mov	r9, r0
 80065de:	6123      	str	r3, [r4, #16]
 80065e0:	dc02      	bgt.n	80065e8 <_printf_float+0x168>
 80065e2:	6822      	ldr	r2, [r4, #0]
 80065e4:	07d2      	lsls	r2, r2, #31
 80065e6:	d501      	bpl.n	80065ec <_printf_float+0x16c>
 80065e8:	3301      	adds	r3, #1
 80065ea:	6123      	str	r3, [r4, #16]
 80065ec:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d09c      	beq.n	800652e <_printf_float+0xae>
 80065f4:	232d      	movs	r3, #45	; 0x2d
 80065f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065fa:	e798      	b.n	800652e <_printf_float+0xae>
 80065fc:	9a06      	ldr	r2, [sp, #24]
 80065fe:	2a47      	cmp	r2, #71	; 0x47
 8006600:	d1be      	bne.n	8006580 <_printf_float+0x100>
 8006602:	2b00      	cmp	r3, #0
 8006604:	d1bc      	bne.n	8006580 <_printf_float+0x100>
 8006606:	2301      	movs	r3, #1
 8006608:	e7b9      	b.n	800657e <_printf_float+0xfe>
 800660a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800660e:	d118      	bne.n	8006642 <_printf_float+0x1c2>
 8006610:	2900      	cmp	r1, #0
 8006612:	6863      	ldr	r3, [r4, #4]
 8006614:	dd0b      	ble.n	800662e <_printf_float+0x1ae>
 8006616:	6121      	str	r1, [r4, #16]
 8006618:	b913      	cbnz	r3, 8006620 <_printf_float+0x1a0>
 800661a:	6822      	ldr	r2, [r4, #0]
 800661c:	07d0      	lsls	r0, r2, #31
 800661e:	d502      	bpl.n	8006626 <_printf_float+0x1a6>
 8006620:	3301      	adds	r3, #1
 8006622:	440b      	add	r3, r1
 8006624:	6123      	str	r3, [r4, #16]
 8006626:	65a1      	str	r1, [r4, #88]	; 0x58
 8006628:	f04f 0900 	mov.w	r9, #0
 800662c:	e7de      	b.n	80065ec <_printf_float+0x16c>
 800662e:	b913      	cbnz	r3, 8006636 <_printf_float+0x1b6>
 8006630:	6822      	ldr	r2, [r4, #0]
 8006632:	07d2      	lsls	r2, r2, #31
 8006634:	d501      	bpl.n	800663a <_printf_float+0x1ba>
 8006636:	3302      	adds	r3, #2
 8006638:	e7f4      	b.n	8006624 <_printf_float+0x1a4>
 800663a:	2301      	movs	r3, #1
 800663c:	e7f2      	b.n	8006624 <_printf_float+0x1a4>
 800663e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006642:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006644:	4299      	cmp	r1, r3
 8006646:	db05      	blt.n	8006654 <_printf_float+0x1d4>
 8006648:	6823      	ldr	r3, [r4, #0]
 800664a:	6121      	str	r1, [r4, #16]
 800664c:	07d8      	lsls	r0, r3, #31
 800664e:	d5ea      	bpl.n	8006626 <_printf_float+0x1a6>
 8006650:	1c4b      	adds	r3, r1, #1
 8006652:	e7e7      	b.n	8006624 <_printf_float+0x1a4>
 8006654:	2900      	cmp	r1, #0
 8006656:	bfd4      	ite	le
 8006658:	f1c1 0202 	rsble	r2, r1, #2
 800665c:	2201      	movgt	r2, #1
 800665e:	4413      	add	r3, r2
 8006660:	e7e0      	b.n	8006624 <_printf_float+0x1a4>
 8006662:	6823      	ldr	r3, [r4, #0]
 8006664:	055a      	lsls	r2, r3, #21
 8006666:	d407      	bmi.n	8006678 <_printf_float+0x1f8>
 8006668:	6923      	ldr	r3, [r4, #16]
 800666a:	4642      	mov	r2, r8
 800666c:	4631      	mov	r1, r6
 800666e:	4628      	mov	r0, r5
 8006670:	47b8      	blx	r7
 8006672:	3001      	adds	r0, #1
 8006674:	d12c      	bne.n	80066d0 <_printf_float+0x250>
 8006676:	e764      	b.n	8006542 <_printf_float+0xc2>
 8006678:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800667c:	f240 80e0 	bls.w	8006840 <_printf_float+0x3c0>
 8006680:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006684:	2200      	movs	r2, #0
 8006686:	2300      	movs	r3, #0
 8006688:	f7fa fa1e 	bl	8000ac8 <__aeabi_dcmpeq>
 800668c:	2800      	cmp	r0, #0
 800668e:	d034      	beq.n	80066fa <_printf_float+0x27a>
 8006690:	4a37      	ldr	r2, [pc, #220]	; (8006770 <_printf_float+0x2f0>)
 8006692:	2301      	movs	r3, #1
 8006694:	4631      	mov	r1, r6
 8006696:	4628      	mov	r0, r5
 8006698:	47b8      	blx	r7
 800669a:	3001      	adds	r0, #1
 800669c:	f43f af51 	beq.w	8006542 <_printf_float+0xc2>
 80066a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80066a4:	429a      	cmp	r2, r3
 80066a6:	db02      	blt.n	80066ae <_printf_float+0x22e>
 80066a8:	6823      	ldr	r3, [r4, #0]
 80066aa:	07d8      	lsls	r0, r3, #31
 80066ac:	d510      	bpl.n	80066d0 <_printf_float+0x250>
 80066ae:	ee18 3a10 	vmov	r3, s16
 80066b2:	4652      	mov	r2, sl
 80066b4:	4631      	mov	r1, r6
 80066b6:	4628      	mov	r0, r5
 80066b8:	47b8      	blx	r7
 80066ba:	3001      	adds	r0, #1
 80066bc:	f43f af41 	beq.w	8006542 <_printf_float+0xc2>
 80066c0:	f04f 0800 	mov.w	r8, #0
 80066c4:	f104 091a 	add.w	r9, r4, #26
 80066c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066ca:	3b01      	subs	r3, #1
 80066cc:	4543      	cmp	r3, r8
 80066ce:	dc09      	bgt.n	80066e4 <_printf_float+0x264>
 80066d0:	6823      	ldr	r3, [r4, #0]
 80066d2:	079b      	lsls	r3, r3, #30
 80066d4:	f100 8105 	bmi.w	80068e2 <_printf_float+0x462>
 80066d8:	68e0      	ldr	r0, [r4, #12]
 80066da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80066dc:	4298      	cmp	r0, r3
 80066de:	bfb8      	it	lt
 80066e0:	4618      	movlt	r0, r3
 80066e2:	e730      	b.n	8006546 <_printf_float+0xc6>
 80066e4:	2301      	movs	r3, #1
 80066e6:	464a      	mov	r2, r9
 80066e8:	4631      	mov	r1, r6
 80066ea:	4628      	mov	r0, r5
 80066ec:	47b8      	blx	r7
 80066ee:	3001      	adds	r0, #1
 80066f0:	f43f af27 	beq.w	8006542 <_printf_float+0xc2>
 80066f4:	f108 0801 	add.w	r8, r8, #1
 80066f8:	e7e6      	b.n	80066c8 <_printf_float+0x248>
 80066fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	dc39      	bgt.n	8006774 <_printf_float+0x2f4>
 8006700:	4a1b      	ldr	r2, [pc, #108]	; (8006770 <_printf_float+0x2f0>)
 8006702:	2301      	movs	r3, #1
 8006704:	4631      	mov	r1, r6
 8006706:	4628      	mov	r0, r5
 8006708:	47b8      	blx	r7
 800670a:	3001      	adds	r0, #1
 800670c:	f43f af19 	beq.w	8006542 <_printf_float+0xc2>
 8006710:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006714:	4313      	orrs	r3, r2
 8006716:	d102      	bne.n	800671e <_printf_float+0x29e>
 8006718:	6823      	ldr	r3, [r4, #0]
 800671a:	07d9      	lsls	r1, r3, #31
 800671c:	d5d8      	bpl.n	80066d0 <_printf_float+0x250>
 800671e:	ee18 3a10 	vmov	r3, s16
 8006722:	4652      	mov	r2, sl
 8006724:	4631      	mov	r1, r6
 8006726:	4628      	mov	r0, r5
 8006728:	47b8      	blx	r7
 800672a:	3001      	adds	r0, #1
 800672c:	f43f af09 	beq.w	8006542 <_printf_float+0xc2>
 8006730:	f04f 0900 	mov.w	r9, #0
 8006734:	f104 0a1a 	add.w	sl, r4, #26
 8006738:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800673a:	425b      	negs	r3, r3
 800673c:	454b      	cmp	r3, r9
 800673e:	dc01      	bgt.n	8006744 <_printf_float+0x2c4>
 8006740:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006742:	e792      	b.n	800666a <_printf_float+0x1ea>
 8006744:	2301      	movs	r3, #1
 8006746:	4652      	mov	r2, sl
 8006748:	4631      	mov	r1, r6
 800674a:	4628      	mov	r0, r5
 800674c:	47b8      	blx	r7
 800674e:	3001      	adds	r0, #1
 8006750:	f43f aef7 	beq.w	8006542 <_printf_float+0xc2>
 8006754:	f109 0901 	add.w	r9, r9, #1
 8006758:	e7ee      	b.n	8006738 <_printf_float+0x2b8>
 800675a:	bf00      	nop
 800675c:	7fefffff 	.word	0x7fefffff
 8006760:	0800b41c 	.word	0x0800b41c
 8006764:	0800b420 	.word	0x0800b420
 8006768:	0800b428 	.word	0x0800b428
 800676c:	0800b424 	.word	0x0800b424
 8006770:	0800b42c 	.word	0x0800b42c
 8006774:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006776:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006778:	429a      	cmp	r2, r3
 800677a:	bfa8      	it	ge
 800677c:	461a      	movge	r2, r3
 800677e:	2a00      	cmp	r2, #0
 8006780:	4691      	mov	r9, r2
 8006782:	dc37      	bgt.n	80067f4 <_printf_float+0x374>
 8006784:	f04f 0b00 	mov.w	fp, #0
 8006788:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800678c:	f104 021a 	add.w	r2, r4, #26
 8006790:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006792:	9305      	str	r3, [sp, #20]
 8006794:	eba3 0309 	sub.w	r3, r3, r9
 8006798:	455b      	cmp	r3, fp
 800679a:	dc33      	bgt.n	8006804 <_printf_float+0x384>
 800679c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80067a0:	429a      	cmp	r2, r3
 80067a2:	db3b      	blt.n	800681c <_printf_float+0x39c>
 80067a4:	6823      	ldr	r3, [r4, #0]
 80067a6:	07da      	lsls	r2, r3, #31
 80067a8:	d438      	bmi.n	800681c <_printf_float+0x39c>
 80067aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067ac:	9a05      	ldr	r2, [sp, #20]
 80067ae:	9909      	ldr	r1, [sp, #36]	; 0x24
 80067b0:	1a9a      	subs	r2, r3, r2
 80067b2:	eba3 0901 	sub.w	r9, r3, r1
 80067b6:	4591      	cmp	r9, r2
 80067b8:	bfa8      	it	ge
 80067ba:	4691      	movge	r9, r2
 80067bc:	f1b9 0f00 	cmp.w	r9, #0
 80067c0:	dc35      	bgt.n	800682e <_printf_float+0x3ae>
 80067c2:	f04f 0800 	mov.w	r8, #0
 80067c6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80067ca:	f104 0a1a 	add.w	sl, r4, #26
 80067ce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80067d2:	1a9b      	subs	r3, r3, r2
 80067d4:	eba3 0309 	sub.w	r3, r3, r9
 80067d8:	4543      	cmp	r3, r8
 80067da:	f77f af79 	ble.w	80066d0 <_printf_float+0x250>
 80067de:	2301      	movs	r3, #1
 80067e0:	4652      	mov	r2, sl
 80067e2:	4631      	mov	r1, r6
 80067e4:	4628      	mov	r0, r5
 80067e6:	47b8      	blx	r7
 80067e8:	3001      	adds	r0, #1
 80067ea:	f43f aeaa 	beq.w	8006542 <_printf_float+0xc2>
 80067ee:	f108 0801 	add.w	r8, r8, #1
 80067f2:	e7ec      	b.n	80067ce <_printf_float+0x34e>
 80067f4:	4613      	mov	r3, r2
 80067f6:	4631      	mov	r1, r6
 80067f8:	4642      	mov	r2, r8
 80067fa:	4628      	mov	r0, r5
 80067fc:	47b8      	blx	r7
 80067fe:	3001      	adds	r0, #1
 8006800:	d1c0      	bne.n	8006784 <_printf_float+0x304>
 8006802:	e69e      	b.n	8006542 <_printf_float+0xc2>
 8006804:	2301      	movs	r3, #1
 8006806:	4631      	mov	r1, r6
 8006808:	4628      	mov	r0, r5
 800680a:	9205      	str	r2, [sp, #20]
 800680c:	47b8      	blx	r7
 800680e:	3001      	adds	r0, #1
 8006810:	f43f ae97 	beq.w	8006542 <_printf_float+0xc2>
 8006814:	9a05      	ldr	r2, [sp, #20]
 8006816:	f10b 0b01 	add.w	fp, fp, #1
 800681a:	e7b9      	b.n	8006790 <_printf_float+0x310>
 800681c:	ee18 3a10 	vmov	r3, s16
 8006820:	4652      	mov	r2, sl
 8006822:	4631      	mov	r1, r6
 8006824:	4628      	mov	r0, r5
 8006826:	47b8      	blx	r7
 8006828:	3001      	adds	r0, #1
 800682a:	d1be      	bne.n	80067aa <_printf_float+0x32a>
 800682c:	e689      	b.n	8006542 <_printf_float+0xc2>
 800682e:	9a05      	ldr	r2, [sp, #20]
 8006830:	464b      	mov	r3, r9
 8006832:	4442      	add	r2, r8
 8006834:	4631      	mov	r1, r6
 8006836:	4628      	mov	r0, r5
 8006838:	47b8      	blx	r7
 800683a:	3001      	adds	r0, #1
 800683c:	d1c1      	bne.n	80067c2 <_printf_float+0x342>
 800683e:	e680      	b.n	8006542 <_printf_float+0xc2>
 8006840:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006842:	2a01      	cmp	r2, #1
 8006844:	dc01      	bgt.n	800684a <_printf_float+0x3ca>
 8006846:	07db      	lsls	r3, r3, #31
 8006848:	d538      	bpl.n	80068bc <_printf_float+0x43c>
 800684a:	2301      	movs	r3, #1
 800684c:	4642      	mov	r2, r8
 800684e:	4631      	mov	r1, r6
 8006850:	4628      	mov	r0, r5
 8006852:	47b8      	blx	r7
 8006854:	3001      	adds	r0, #1
 8006856:	f43f ae74 	beq.w	8006542 <_printf_float+0xc2>
 800685a:	ee18 3a10 	vmov	r3, s16
 800685e:	4652      	mov	r2, sl
 8006860:	4631      	mov	r1, r6
 8006862:	4628      	mov	r0, r5
 8006864:	47b8      	blx	r7
 8006866:	3001      	adds	r0, #1
 8006868:	f43f ae6b 	beq.w	8006542 <_printf_float+0xc2>
 800686c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006870:	2200      	movs	r2, #0
 8006872:	2300      	movs	r3, #0
 8006874:	f7fa f928 	bl	8000ac8 <__aeabi_dcmpeq>
 8006878:	b9d8      	cbnz	r0, 80068b2 <_printf_float+0x432>
 800687a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800687c:	f108 0201 	add.w	r2, r8, #1
 8006880:	3b01      	subs	r3, #1
 8006882:	4631      	mov	r1, r6
 8006884:	4628      	mov	r0, r5
 8006886:	47b8      	blx	r7
 8006888:	3001      	adds	r0, #1
 800688a:	d10e      	bne.n	80068aa <_printf_float+0x42a>
 800688c:	e659      	b.n	8006542 <_printf_float+0xc2>
 800688e:	2301      	movs	r3, #1
 8006890:	4652      	mov	r2, sl
 8006892:	4631      	mov	r1, r6
 8006894:	4628      	mov	r0, r5
 8006896:	47b8      	blx	r7
 8006898:	3001      	adds	r0, #1
 800689a:	f43f ae52 	beq.w	8006542 <_printf_float+0xc2>
 800689e:	f108 0801 	add.w	r8, r8, #1
 80068a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068a4:	3b01      	subs	r3, #1
 80068a6:	4543      	cmp	r3, r8
 80068a8:	dcf1      	bgt.n	800688e <_printf_float+0x40e>
 80068aa:	464b      	mov	r3, r9
 80068ac:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80068b0:	e6dc      	b.n	800666c <_printf_float+0x1ec>
 80068b2:	f04f 0800 	mov.w	r8, #0
 80068b6:	f104 0a1a 	add.w	sl, r4, #26
 80068ba:	e7f2      	b.n	80068a2 <_printf_float+0x422>
 80068bc:	2301      	movs	r3, #1
 80068be:	4642      	mov	r2, r8
 80068c0:	e7df      	b.n	8006882 <_printf_float+0x402>
 80068c2:	2301      	movs	r3, #1
 80068c4:	464a      	mov	r2, r9
 80068c6:	4631      	mov	r1, r6
 80068c8:	4628      	mov	r0, r5
 80068ca:	47b8      	blx	r7
 80068cc:	3001      	adds	r0, #1
 80068ce:	f43f ae38 	beq.w	8006542 <_printf_float+0xc2>
 80068d2:	f108 0801 	add.w	r8, r8, #1
 80068d6:	68e3      	ldr	r3, [r4, #12]
 80068d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80068da:	1a5b      	subs	r3, r3, r1
 80068dc:	4543      	cmp	r3, r8
 80068de:	dcf0      	bgt.n	80068c2 <_printf_float+0x442>
 80068e0:	e6fa      	b.n	80066d8 <_printf_float+0x258>
 80068e2:	f04f 0800 	mov.w	r8, #0
 80068e6:	f104 0919 	add.w	r9, r4, #25
 80068ea:	e7f4      	b.n	80068d6 <_printf_float+0x456>

080068ec <_printf_common>:
 80068ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068f0:	4616      	mov	r6, r2
 80068f2:	4699      	mov	r9, r3
 80068f4:	688a      	ldr	r2, [r1, #8]
 80068f6:	690b      	ldr	r3, [r1, #16]
 80068f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80068fc:	4293      	cmp	r3, r2
 80068fe:	bfb8      	it	lt
 8006900:	4613      	movlt	r3, r2
 8006902:	6033      	str	r3, [r6, #0]
 8006904:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006908:	4607      	mov	r7, r0
 800690a:	460c      	mov	r4, r1
 800690c:	b10a      	cbz	r2, 8006912 <_printf_common+0x26>
 800690e:	3301      	adds	r3, #1
 8006910:	6033      	str	r3, [r6, #0]
 8006912:	6823      	ldr	r3, [r4, #0]
 8006914:	0699      	lsls	r1, r3, #26
 8006916:	bf42      	ittt	mi
 8006918:	6833      	ldrmi	r3, [r6, #0]
 800691a:	3302      	addmi	r3, #2
 800691c:	6033      	strmi	r3, [r6, #0]
 800691e:	6825      	ldr	r5, [r4, #0]
 8006920:	f015 0506 	ands.w	r5, r5, #6
 8006924:	d106      	bne.n	8006934 <_printf_common+0x48>
 8006926:	f104 0a19 	add.w	sl, r4, #25
 800692a:	68e3      	ldr	r3, [r4, #12]
 800692c:	6832      	ldr	r2, [r6, #0]
 800692e:	1a9b      	subs	r3, r3, r2
 8006930:	42ab      	cmp	r3, r5
 8006932:	dc26      	bgt.n	8006982 <_printf_common+0x96>
 8006934:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006938:	1e13      	subs	r3, r2, #0
 800693a:	6822      	ldr	r2, [r4, #0]
 800693c:	bf18      	it	ne
 800693e:	2301      	movne	r3, #1
 8006940:	0692      	lsls	r2, r2, #26
 8006942:	d42b      	bmi.n	800699c <_printf_common+0xb0>
 8006944:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006948:	4649      	mov	r1, r9
 800694a:	4638      	mov	r0, r7
 800694c:	47c0      	blx	r8
 800694e:	3001      	adds	r0, #1
 8006950:	d01e      	beq.n	8006990 <_printf_common+0xa4>
 8006952:	6823      	ldr	r3, [r4, #0]
 8006954:	68e5      	ldr	r5, [r4, #12]
 8006956:	6832      	ldr	r2, [r6, #0]
 8006958:	f003 0306 	and.w	r3, r3, #6
 800695c:	2b04      	cmp	r3, #4
 800695e:	bf08      	it	eq
 8006960:	1aad      	subeq	r5, r5, r2
 8006962:	68a3      	ldr	r3, [r4, #8]
 8006964:	6922      	ldr	r2, [r4, #16]
 8006966:	bf0c      	ite	eq
 8006968:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800696c:	2500      	movne	r5, #0
 800696e:	4293      	cmp	r3, r2
 8006970:	bfc4      	itt	gt
 8006972:	1a9b      	subgt	r3, r3, r2
 8006974:	18ed      	addgt	r5, r5, r3
 8006976:	2600      	movs	r6, #0
 8006978:	341a      	adds	r4, #26
 800697a:	42b5      	cmp	r5, r6
 800697c:	d11a      	bne.n	80069b4 <_printf_common+0xc8>
 800697e:	2000      	movs	r0, #0
 8006980:	e008      	b.n	8006994 <_printf_common+0xa8>
 8006982:	2301      	movs	r3, #1
 8006984:	4652      	mov	r2, sl
 8006986:	4649      	mov	r1, r9
 8006988:	4638      	mov	r0, r7
 800698a:	47c0      	blx	r8
 800698c:	3001      	adds	r0, #1
 800698e:	d103      	bne.n	8006998 <_printf_common+0xac>
 8006990:	f04f 30ff 	mov.w	r0, #4294967295
 8006994:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006998:	3501      	adds	r5, #1
 800699a:	e7c6      	b.n	800692a <_printf_common+0x3e>
 800699c:	18e1      	adds	r1, r4, r3
 800699e:	1c5a      	adds	r2, r3, #1
 80069a0:	2030      	movs	r0, #48	; 0x30
 80069a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80069a6:	4422      	add	r2, r4
 80069a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80069ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80069b0:	3302      	adds	r3, #2
 80069b2:	e7c7      	b.n	8006944 <_printf_common+0x58>
 80069b4:	2301      	movs	r3, #1
 80069b6:	4622      	mov	r2, r4
 80069b8:	4649      	mov	r1, r9
 80069ba:	4638      	mov	r0, r7
 80069bc:	47c0      	blx	r8
 80069be:	3001      	adds	r0, #1
 80069c0:	d0e6      	beq.n	8006990 <_printf_common+0xa4>
 80069c2:	3601      	adds	r6, #1
 80069c4:	e7d9      	b.n	800697a <_printf_common+0x8e>
	...

080069c8 <_printf_i>:
 80069c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80069cc:	7e0f      	ldrb	r7, [r1, #24]
 80069ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80069d0:	2f78      	cmp	r7, #120	; 0x78
 80069d2:	4691      	mov	r9, r2
 80069d4:	4680      	mov	r8, r0
 80069d6:	460c      	mov	r4, r1
 80069d8:	469a      	mov	sl, r3
 80069da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80069de:	d807      	bhi.n	80069f0 <_printf_i+0x28>
 80069e0:	2f62      	cmp	r7, #98	; 0x62
 80069e2:	d80a      	bhi.n	80069fa <_printf_i+0x32>
 80069e4:	2f00      	cmp	r7, #0
 80069e6:	f000 80d8 	beq.w	8006b9a <_printf_i+0x1d2>
 80069ea:	2f58      	cmp	r7, #88	; 0x58
 80069ec:	f000 80a3 	beq.w	8006b36 <_printf_i+0x16e>
 80069f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80069f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80069f8:	e03a      	b.n	8006a70 <_printf_i+0xa8>
 80069fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80069fe:	2b15      	cmp	r3, #21
 8006a00:	d8f6      	bhi.n	80069f0 <_printf_i+0x28>
 8006a02:	a101      	add	r1, pc, #4	; (adr r1, 8006a08 <_printf_i+0x40>)
 8006a04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006a08:	08006a61 	.word	0x08006a61
 8006a0c:	08006a75 	.word	0x08006a75
 8006a10:	080069f1 	.word	0x080069f1
 8006a14:	080069f1 	.word	0x080069f1
 8006a18:	080069f1 	.word	0x080069f1
 8006a1c:	080069f1 	.word	0x080069f1
 8006a20:	08006a75 	.word	0x08006a75
 8006a24:	080069f1 	.word	0x080069f1
 8006a28:	080069f1 	.word	0x080069f1
 8006a2c:	080069f1 	.word	0x080069f1
 8006a30:	080069f1 	.word	0x080069f1
 8006a34:	08006b81 	.word	0x08006b81
 8006a38:	08006aa5 	.word	0x08006aa5
 8006a3c:	08006b63 	.word	0x08006b63
 8006a40:	080069f1 	.word	0x080069f1
 8006a44:	080069f1 	.word	0x080069f1
 8006a48:	08006ba3 	.word	0x08006ba3
 8006a4c:	080069f1 	.word	0x080069f1
 8006a50:	08006aa5 	.word	0x08006aa5
 8006a54:	080069f1 	.word	0x080069f1
 8006a58:	080069f1 	.word	0x080069f1
 8006a5c:	08006b6b 	.word	0x08006b6b
 8006a60:	682b      	ldr	r3, [r5, #0]
 8006a62:	1d1a      	adds	r2, r3, #4
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	602a      	str	r2, [r5, #0]
 8006a68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006a70:	2301      	movs	r3, #1
 8006a72:	e0a3      	b.n	8006bbc <_printf_i+0x1f4>
 8006a74:	6820      	ldr	r0, [r4, #0]
 8006a76:	6829      	ldr	r1, [r5, #0]
 8006a78:	0606      	lsls	r6, r0, #24
 8006a7a:	f101 0304 	add.w	r3, r1, #4
 8006a7e:	d50a      	bpl.n	8006a96 <_printf_i+0xce>
 8006a80:	680e      	ldr	r6, [r1, #0]
 8006a82:	602b      	str	r3, [r5, #0]
 8006a84:	2e00      	cmp	r6, #0
 8006a86:	da03      	bge.n	8006a90 <_printf_i+0xc8>
 8006a88:	232d      	movs	r3, #45	; 0x2d
 8006a8a:	4276      	negs	r6, r6
 8006a8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a90:	485e      	ldr	r0, [pc, #376]	; (8006c0c <_printf_i+0x244>)
 8006a92:	230a      	movs	r3, #10
 8006a94:	e019      	b.n	8006aca <_printf_i+0x102>
 8006a96:	680e      	ldr	r6, [r1, #0]
 8006a98:	602b      	str	r3, [r5, #0]
 8006a9a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006a9e:	bf18      	it	ne
 8006aa0:	b236      	sxthne	r6, r6
 8006aa2:	e7ef      	b.n	8006a84 <_printf_i+0xbc>
 8006aa4:	682b      	ldr	r3, [r5, #0]
 8006aa6:	6820      	ldr	r0, [r4, #0]
 8006aa8:	1d19      	adds	r1, r3, #4
 8006aaa:	6029      	str	r1, [r5, #0]
 8006aac:	0601      	lsls	r1, r0, #24
 8006aae:	d501      	bpl.n	8006ab4 <_printf_i+0xec>
 8006ab0:	681e      	ldr	r6, [r3, #0]
 8006ab2:	e002      	b.n	8006aba <_printf_i+0xf2>
 8006ab4:	0646      	lsls	r6, r0, #25
 8006ab6:	d5fb      	bpl.n	8006ab0 <_printf_i+0xe8>
 8006ab8:	881e      	ldrh	r6, [r3, #0]
 8006aba:	4854      	ldr	r0, [pc, #336]	; (8006c0c <_printf_i+0x244>)
 8006abc:	2f6f      	cmp	r7, #111	; 0x6f
 8006abe:	bf0c      	ite	eq
 8006ac0:	2308      	moveq	r3, #8
 8006ac2:	230a      	movne	r3, #10
 8006ac4:	2100      	movs	r1, #0
 8006ac6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006aca:	6865      	ldr	r5, [r4, #4]
 8006acc:	60a5      	str	r5, [r4, #8]
 8006ace:	2d00      	cmp	r5, #0
 8006ad0:	bfa2      	ittt	ge
 8006ad2:	6821      	ldrge	r1, [r4, #0]
 8006ad4:	f021 0104 	bicge.w	r1, r1, #4
 8006ad8:	6021      	strge	r1, [r4, #0]
 8006ada:	b90e      	cbnz	r6, 8006ae0 <_printf_i+0x118>
 8006adc:	2d00      	cmp	r5, #0
 8006ade:	d04d      	beq.n	8006b7c <_printf_i+0x1b4>
 8006ae0:	4615      	mov	r5, r2
 8006ae2:	fbb6 f1f3 	udiv	r1, r6, r3
 8006ae6:	fb03 6711 	mls	r7, r3, r1, r6
 8006aea:	5dc7      	ldrb	r7, [r0, r7]
 8006aec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006af0:	4637      	mov	r7, r6
 8006af2:	42bb      	cmp	r3, r7
 8006af4:	460e      	mov	r6, r1
 8006af6:	d9f4      	bls.n	8006ae2 <_printf_i+0x11a>
 8006af8:	2b08      	cmp	r3, #8
 8006afa:	d10b      	bne.n	8006b14 <_printf_i+0x14c>
 8006afc:	6823      	ldr	r3, [r4, #0]
 8006afe:	07de      	lsls	r6, r3, #31
 8006b00:	d508      	bpl.n	8006b14 <_printf_i+0x14c>
 8006b02:	6923      	ldr	r3, [r4, #16]
 8006b04:	6861      	ldr	r1, [r4, #4]
 8006b06:	4299      	cmp	r1, r3
 8006b08:	bfde      	ittt	le
 8006b0a:	2330      	movle	r3, #48	; 0x30
 8006b0c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006b10:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006b14:	1b52      	subs	r2, r2, r5
 8006b16:	6122      	str	r2, [r4, #16]
 8006b18:	f8cd a000 	str.w	sl, [sp]
 8006b1c:	464b      	mov	r3, r9
 8006b1e:	aa03      	add	r2, sp, #12
 8006b20:	4621      	mov	r1, r4
 8006b22:	4640      	mov	r0, r8
 8006b24:	f7ff fee2 	bl	80068ec <_printf_common>
 8006b28:	3001      	adds	r0, #1
 8006b2a:	d14c      	bne.n	8006bc6 <_printf_i+0x1fe>
 8006b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8006b30:	b004      	add	sp, #16
 8006b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b36:	4835      	ldr	r0, [pc, #212]	; (8006c0c <_printf_i+0x244>)
 8006b38:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006b3c:	6829      	ldr	r1, [r5, #0]
 8006b3e:	6823      	ldr	r3, [r4, #0]
 8006b40:	f851 6b04 	ldr.w	r6, [r1], #4
 8006b44:	6029      	str	r1, [r5, #0]
 8006b46:	061d      	lsls	r5, r3, #24
 8006b48:	d514      	bpl.n	8006b74 <_printf_i+0x1ac>
 8006b4a:	07df      	lsls	r7, r3, #31
 8006b4c:	bf44      	itt	mi
 8006b4e:	f043 0320 	orrmi.w	r3, r3, #32
 8006b52:	6023      	strmi	r3, [r4, #0]
 8006b54:	b91e      	cbnz	r6, 8006b5e <_printf_i+0x196>
 8006b56:	6823      	ldr	r3, [r4, #0]
 8006b58:	f023 0320 	bic.w	r3, r3, #32
 8006b5c:	6023      	str	r3, [r4, #0]
 8006b5e:	2310      	movs	r3, #16
 8006b60:	e7b0      	b.n	8006ac4 <_printf_i+0xfc>
 8006b62:	6823      	ldr	r3, [r4, #0]
 8006b64:	f043 0320 	orr.w	r3, r3, #32
 8006b68:	6023      	str	r3, [r4, #0]
 8006b6a:	2378      	movs	r3, #120	; 0x78
 8006b6c:	4828      	ldr	r0, [pc, #160]	; (8006c10 <_printf_i+0x248>)
 8006b6e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006b72:	e7e3      	b.n	8006b3c <_printf_i+0x174>
 8006b74:	0659      	lsls	r1, r3, #25
 8006b76:	bf48      	it	mi
 8006b78:	b2b6      	uxthmi	r6, r6
 8006b7a:	e7e6      	b.n	8006b4a <_printf_i+0x182>
 8006b7c:	4615      	mov	r5, r2
 8006b7e:	e7bb      	b.n	8006af8 <_printf_i+0x130>
 8006b80:	682b      	ldr	r3, [r5, #0]
 8006b82:	6826      	ldr	r6, [r4, #0]
 8006b84:	6961      	ldr	r1, [r4, #20]
 8006b86:	1d18      	adds	r0, r3, #4
 8006b88:	6028      	str	r0, [r5, #0]
 8006b8a:	0635      	lsls	r5, r6, #24
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	d501      	bpl.n	8006b94 <_printf_i+0x1cc>
 8006b90:	6019      	str	r1, [r3, #0]
 8006b92:	e002      	b.n	8006b9a <_printf_i+0x1d2>
 8006b94:	0670      	lsls	r0, r6, #25
 8006b96:	d5fb      	bpl.n	8006b90 <_printf_i+0x1c8>
 8006b98:	8019      	strh	r1, [r3, #0]
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	6123      	str	r3, [r4, #16]
 8006b9e:	4615      	mov	r5, r2
 8006ba0:	e7ba      	b.n	8006b18 <_printf_i+0x150>
 8006ba2:	682b      	ldr	r3, [r5, #0]
 8006ba4:	1d1a      	adds	r2, r3, #4
 8006ba6:	602a      	str	r2, [r5, #0]
 8006ba8:	681d      	ldr	r5, [r3, #0]
 8006baa:	6862      	ldr	r2, [r4, #4]
 8006bac:	2100      	movs	r1, #0
 8006bae:	4628      	mov	r0, r5
 8006bb0:	f7f9 fb16 	bl	80001e0 <memchr>
 8006bb4:	b108      	cbz	r0, 8006bba <_printf_i+0x1f2>
 8006bb6:	1b40      	subs	r0, r0, r5
 8006bb8:	6060      	str	r0, [r4, #4]
 8006bba:	6863      	ldr	r3, [r4, #4]
 8006bbc:	6123      	str	r3, [r4, #16]
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006bc4:	e7a8      	b.n	8006b18 <_printf_i+0x150>
 8006bc6:	6923      	ldr	r3, [r4, #16]
 8006bc8:	462a      	mov	r2, r5
 8006bca:	4649      	mov	r1, r9
 8006bcc:	4640      	mov	r0, r8
 8006bce:	47d0      	blx	sl
 8006bd0:	3001      	adds	r0, #1
 8006bd2:	d0ab      	beq.n	8006b2c <_printf_i+0x164>
 8006bd4:	6823      	ldr	r3, [r4, #0]
 8006bd6:	079b      	lsls	r3, r3, #30
 8006bd8:	d413      	bmi.n	8006c02 <_printf_i+0x23a>
 8006bda:	68e0      	ldr	r0, [r4, #12]
 8006bdc:	9b03      	ldr	r3, [sp, #12]
 8006bde:	4298      	cmp	r0, r3
 8006be0:	bfb8      	it	lt
 8006be2:	4618      	movlt	r0, r3
 8006be4:	e7a4      	b.n	8006b30 <_printf_i+0x168>
 8006be6:	2301      	movs	r3, #1
 8006be8:	4632      	mov	r2, r6
 8006bea:	4649      	mov	r1, r9
 8006bec:	4640      	mov	r0, r8
 8006bee:	47d0      	blx	sl
 8006bf0:	3001      	adds	r0, #1
 8006bf2:	d09b      	beq.n	8006b2c <_printf_i+0x164>
 8006bf4:	3501      	adds	r5, #1
 8006bf6:	68e3      	ldr	r3, [r4, #12]
 8006bf8:	9903      	ldr	r1, [sp, #12]
 8006bfa:	1a5b      	subs	r3, r3, r1
 8006bfc:	42ab      	cmp	r3, r5
 8006bfe:	dcf2      	bgt.n	8006be6 <_printf_i+0x21e>
 8006c00:	e7eb      	b.n	8006bda <_printf_i+0x212>
 8006c02:	2500      	movs	r5, #0
 8006c04:	f104 0619 	add.w	r6, r4, #25
 8006c08:	e7f5      	b.n	8006bf6 <_printf_i+0x22e>
 8006c0a:	bf00      	nop
 8006c0c:	0800b42e 	.word	0x0800b42e
 8006c10:	0800b43f 	.word	0x0800b43f

08006c14 <_scanf_float>:
 8006c14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c18:	b087      	sub	sp, #28
 8006c1a:	4617      	mov	r7, r2
 8006c1c:	9303      	str	r3, [sp, #12]
 8006c1e:	688b      	ldr	r3, [r1, #8]
 8006c20:	1e5a      	subs	r2, r3, #1
 8006c22:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006c26:	bf83      	ittte	hi
 8006c28:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006c2c:	195b      	addhi	r3, r3, r5
 8006c2e:	9302      	strhi	r3, [sp, #8]
 8006c30:	2300      	movls	r3, #0
 8006c32:	bf86      	itte	hi
 8006c34:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006c38:	608b      	strhi	r3, [r1, #8]
 8006c3a:	9302      	strls	r3, [sp, #8]
 8006c3c:	680b      	ldr	r3, [r1, #0]
 8006c3e:	468b      	mov	fp, r1
 8006c40:	2500      	movs	r5, #0
 8006c42:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006c46:	f84b 3b1c 	str.w	r3, [fp], #28
 8006c4a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006c4e:	4680      	mov	r8, r0
 8006c50:	460c      	mov	r4, r1
 8006c52:	465e      	mov	r6, fp
 8006c54:	46aa      	mov	sl, r5
 8006c56:	46a9      	mov	r9, r5
 8006c58:	9501      	str	r5, [sp, #4]
 8006c5a:	68a2      	ldr	r2, [r4, #8]
 8006c5c:	b152      	cbz	r2, 8006c74 <_scanf_float+0x60>
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	781b      	ldrb	r3, [r3, #0]
 8006c62:	2b4e      	cmp	r3, #78	; 0x4e
 8006c64:	d864      	bhi.n	8006d30 <_scanf_float+0x11c>
 8006c66:	2b40      	cmp	r3, #64	; 0x40
 8006c68:	d83c      	bhi.n	8006ce4 <_scanf_float+0xd0>
 8006c6a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006c6e:	b2c8      	uxtb	r0, r1
 8006c70:	280e      	cmp	r0, #14
 8006c72:	d93a      	bls.n	8006cea <_scanf_float+0xd6>
 8006c74:	f1b9 0f00 	cmp.w	r9, #0
 8006c78:	d003      	beq.n	8006c82 <_scanf_float+0x6e>
 8006c7a:	6823      	ldr	r3, [r4, #0]
 8006c7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c80:	6023      	str	r3, [r4, #0]
 8006c82:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006c86:	f1ba 0f01 	cmp.w	sl, #1
 8006c8a:	f200 8113 	bhi.w	8006eb4 <_scanf_float+0x2a0>
 8006c8e:	455e      	cmp	r6, fp
 8006c90:	f200 8105 	bhi.w	8006e9e <_scanf_float+0x28a>
 8006c94:	2501      	movs	r5, #1
 8006c96:	4628      	mov	r0, r5
 8006c98:	b007      	add	sp, #28
 8006c9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c9e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006ca2:	2a0d      	cmp	r2, #13
 8006ca4:	d8e6      	bhi.n	8006c74 <_scanf_float+0x60>
 8006ca6:	a101      	add	r1, pc, #4	; (adr r1, 8006cac <_scanf_float+0x98>)
 8006ca8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006cac:	08006deb 	.word	0x08006deb
 8006cb0:	08006c75 	.word	0x08006c75
 8006cb4:	08006c75 	.word	0x08006c75
 8006cb8:	08006c75 	.word	0x08006c75
 8006cbc:	08006e4b 	.word	0x08006e4b
 8006cc0:	08006e23 	.word	0x08006e23
 8006cc4:	08006c75 	.word	0x08006c75
 8006cc8:	08006c75 	.word	0x08006c75
 8006ccc:	08006df9 	.word	0x08006df9
 8006cd0:	08006c75 	.word	0x08006c75
 8006cd4:	08006c75 	.word	0x08006c75
 8006cd8:	08006c75 	.word	0x08006c75
 8006cdc:	08006c75 	.word	0x08006c75
 8006ce0:	08006db1 	.word	0x08006db1
 8006ce4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006ce8:	e7db      	b.n	8006ca2 <_scanf_float+0x8e>
 8006cea:	290e      	cmp	r1, #14
 8006cec:	d8c2      	bhi.n	8006c74 <_scanf_float+0x60>
 8006cee:	a001      	add	r0, pc, #4	; (adr r0, 8006cf4 <_scanf_float+0xe0>)
 8006cf0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006cf4:	08006da3 	.word	0x08006da3
 8006cf8:	08006c75 	.word	0x08006c75
 8006cfc:	08006da3 	.word	0x08006da3
 8006d00:	08006e37 	.word	0x08006e37
 8006d04:	08006c75 	.word	0x08006c75
 8006d08:	08006d51 	.word	0x08006d51
 8006d0c:	08006d8d 	.word	0x08006d8d
 8006d10:	08006d8d 	.word	0x08006d8d
 8006d14:	08006d8d 	.word	0x08006d8d
 8006d18:	08006d8d 	.word	0x08006d8d
 8006d1c:	08006d8d 	.word	0x08006d8d
 8006d20:	08006d8d 	.word	0x08006d8d
 8006d24:	08006d8d 	.word	0x08006d8d
 8006d28:	08006d8d 	.word	0x08006d8d
 8006d2c:	08006d8d 	.word	0x08006d8d
 8006d30:	2b6e      	cmp	r3, #110	; 0x6e
 8006d32:	d809      	bhi.n	8006d48 <_scanf_float+0x134>
 8006d34:	2b60      	cmp	r3, #96	; 0x60
 8006d36:	d8b2      	bhi.n	8006c9e <_scanf_float+0x8a>
 8006d38:	2b54      	cmp	r3, #84	; 0x54
 8006d3a:	d077      	beq.n	8006e2c <_scanf_float+0x218>
 8006d3c:	2b59      	cmp	r3, #89	; 0x59
 8006d3e:	d199      	bne.n	8006c74 <_scanf_float+0x60>
 8006d40:	2d07      	cmp	r5, #7
 8006d42:	d197      	bne.n	8006c74 <_scanf_float+0x60>
 8006d44:	2508      	movs	r5, #8
 8006d46:	e029      	b.n	8006d9c <_scanf_float+0x188>
 8006d48:	2b74      	cmp	r3, #116	; 0x74
 8006d4a:	d06f      	beq.n	8006e2c <_scanf_float+0x218>
 8006d4c:	2b79      	cmp	r3, #121	; 0x79
 8006d4e:	e7f6      	b.n	8006d3e <_scanf_float+0x12a>
 8006d50:	6821      	ldr	r1, [r4, #0]
 8006d52:	05c8      	lsls	r0, r1, #23
 8006d54:	d51a      	bpl.n	8006d8c <_scanf_float+0x178>
 8006d56:	9b02      	ldr	r3, [sp, #8]
 8006d58:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006d5c:	6021      	str	r1, [r4, #0]
 8006d5e:	f109 0901 	add.w	r9, r9, #1
 8006d62:	b11b      	cbz	r3, 8006d6c <_scanf_float+0x158>
 8006d64:	3b01      	subs	r3, #1
 8006d66:	3201      	adds	r2, #1
 8006d68:	9302      	str	r3, [sp, #8]
 8006d6a:	60a2      	str	r2, [r4, #8]
 8006d6c:	68a3      	ldr	r3, [r4, #8]
 8006d6e:	3b01      	subs	r3, #1
 8006d70:	60a3      	str	r3, [r4, #8]
 8006d72:	6923      	ldr	r3, [r4, #16]
 8006d74:	3301      	adds	r3, #1
 8006d76:	6123      	str	r3, [r4, #16]
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	3b01      	subs	r3, #1
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	607b      	str	r3, [r7, #4]
 8006d80:	f340 8084 	ble.w	8006e8c <_scanf_float+0x278>
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	3301      	adds	r3, #1
 8006d88:	603b      	str	r3, [r7, #0]
 8006d8a:	e766      	b.n	8006c5a <_scanf_float+0x46>
 8006d8c:	eb1a 0f05 	cmn.w	sl, r5
 8006d90:	f47f af70 	bne.w	8006c74 <_scanf_float+0x60>
 8006d94:	6822      	ldr	r2, [r4, #0]
 8006d96:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006d9a:	6022      	str	r2, [r4, #0]
 8006d9c:	f806 3b01 	strb.w	r3, [r6], #1
 8006da0:	e7e4      	b.n	8006d6c <_scanf_float+0x158>
 8006da2:	6822      	ldr	r2, [r4, #0]
 8006da4:	0610      	lsls	r0, r2, #24
 8006da6:	f57f af65 	bpl.w	8006c74 <_scanf_float+0x60>
 8006daa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006dae:	e7f4      	b.n	8006d9a <_scanf_float+0x186>
 8006db0:	f1ba 0f00 	cmp.w	sl, #0
 8006db4:	d10e      	bne.n	8006dd4 <_scanf_float+0x1c0>
 8006db6:	f1b9 0f00 	cmp.w	r9, #0
 8006dba:	d10e      	bne.n	8006dda <_scanf_float+0x1c6>
 8006dbc:	6822      	ldr	r2, [r4, #0]
 8006dbe:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006dc2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006dc6:	d108      	bne.n	8006dda <_scanf_float+0x1c6>
 8006dc8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006dcc:	6022      	str	r2, [r4, #0]
 8006dce:	f04f 0a01 	mov.w	sl, #1
 8006dd2:	e7e3      	b.n	8006d9c <_scanf_float+0x188>
 8006dd4:	f1ba 0f02 	cmp.w	sl, #2
 8006dd8:	d055      	beq.n	8006e86 <_scanf_float+0x272>
 8006dda:	2d01      	cmp	r5, #1
 8006ddc:	d002      	beq.n	8006de4 <_scanf_float+0x1d0>
 8006dde:	2d04      	cmp	r5, #4
 8006de0:	f47f af48 	bne.w	8006c74 <_scanf_float+0x60>
 8006de4:	3501      	adds	r5, #1
 8006de6:	b2ed      	uxtb	r5, r5
 8006de8:	e7d8      	b.n	8006d9c <_scanf_float+0x188>
 8006dea:	f1ba 0f01 	cmp.w	sl, #1
 8006dee:	f47f af41 	bne.w	8006c74 <_scanf_float+0x60>
 8006df2:	f04f 0a02 	mov.w	sl, #2
 8006df6:	e7d1      	b.n	8006d9c <_scanf_float+0x188>
 8006df8:	b97d      	cbnz	r5, 8006e1a <_scanf_float+0x206>
 8006dfa:	f1b9 0f00 	cmp.w	r9, #0
 8006dfe:	f47f af3c 	bne.w	8006c7a <_scanf_float+0x66>
 8006e02:	6822      	ldr	r2, [r4, #0]
 8006e04:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006e08:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006e0c:	f47f af39 	bne.w	8006c82 <_scanf_float+0x6e>
 8006e10:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006e14:	6022      	str	r2, [r4, #0]
 8006e16:	2501      	movs	r5, #1
 8006e18:	e7c0      	b.n	8006d9c <_scanf_float+0x188>
 8006e1a:	2d03      	cmp	r5, #3
 8006e1c:	d0e2      	beq.n	8006de4 <_scanf_float+0x1d0>
 8006e1e:	2d05      	cmp	r5, #5
 8006e20:	e7de      	b.n	8006de0 <_scanf_float+0x1cc>
 8006e22:	2d02      	cmp	r5, #2
 8006e24:	f47f af26 	bne.w	8006c74 <_scanf_float+0x60>
 8006e28:	2503      	movs	r5, #3
 8006e2a:	e7b7      	b.n	8006d9c <_scanf_float+0x188>
 8006e2c:	2d06      	cmp	r5, #6
 8006e2e:	f47f af21 	bne.w	8006c74 <_scanf_float+0x60>
 8006e32:	2507      	movs	r5, #7
 8006e34:	e7b2      	b.n	8006d9c <_scanf_float+0x188>
 8006e36:	6822      	ldr	r2, [r4, #0]
 8006e38:	0591      	lsls	r1, r2, #22
 8006e3a:	f57f af1b 	bpl.w	8006c74 <_scanf_float+0x60>
 8006e3e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006e42:	6022      	str	r2, [r4, #0]
 8006e44:	f8cd 9004 	str.w	r9, [sp, #4]
 8006e48:	e7a8      	b.n	8006d9c <_scanf_float+0x188>
 8006e4a:	6822      	ldr	r2, [r4, #0]
 8006e4c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006e50:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006e54:	d006      	beq.n	8006e64 <_scanf_float+0x250>
 8006e56:	0550      	lsls	r0, r2, #21
 8006e58:	f57f af0c 	bpl.w	8006c74 <_scanf_float+0x60>
 8006e5c:	f1b9 0f00 	cmp.w	r9, #0
 8006e60:	f43f af0f 	beq.w	8006c82 <_scanf_float+0x6e>
 8006e64:	0591      	lsls	r1, r2, #22
 8006e66:	bf58      	it	pl
 8006e68:	9901      	ldrpl	r1, [sp, #4]
 8006e6a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006e6e:	bf58      	it	pl
 8006e70:	eba9 0101 	subpl.w	r1, r9, r1
 8006e74:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006e78:	bf58      	it	pl
 8006e7a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006e7e:	6022      	str	r2, [r4, #0]
 8006e80:	f04f 0900 	mov.w	r9, #0
 8006e84:	e78a      	b.n	8006d9c <_scanf_float+0x188>
 8006e86:	f04f 0a03 	mov.w	sl, #3
 8006e8a:	e787      	b.n	8006d9c <_scanf_float+0x188>
 8006e8c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006e90:	4639      	mov	r1, r7
 8006e92:	4640      	mov	r0, r8
 8006e94:	4798      	blx	r3
 8006e96:	2800      	cmp	r0, #0
 8006e98:	f43f aedf 	beq.w	8006c5a <_scanf_float+0x46>
 8006e9c:	e6ea      	b.n	8006c74 <_scanf_float+0x60>
 8006e9e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006ea2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006ea6:	463a      	mov	r2, r7
 8006ea8:	4640      	mov	r0, r8
 8006eaa:	4798      	blx	r3
 8006eac:	6923      	ldr	r3, [r4, #16]
 8006eae:	3b01      	subs	r3, #1
 8006eb0:	6123      	str	r3, [r4, #16]
 8006eb2:	e6ec      	b.n	8006c8e <_scanf_float+0x7a>
 8006eb4:	1e6b      	subs	r3, r5, #1
 8006eb6:	2b06      	cmp	r3, #6
 8006eb8:	d825      	bhi.n	8006f06 <_scanf_float+0x2f2>
 8006eba:	2d02      	cmp	r5, #2
 8006ebc:	d836      	bhi.n	8006f2c <_scanf_float+0x318>
 8006ebe:	455e      	cmp	r6, fp
 8006ec0:	f67f aee8 	bls.w	8006c94 <_scanf_float+0x80>
 8006ec4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006ec8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006ecc:	463a      	mov	r2, r7
 8006ece:	4640      	mov	r0, r8
 8006ed0:	4798      	blx	r3
 8006ed2:	6923      	ldr	r3, [r4, #16]
 8006ed4:	3b01      	subs	r3, #1
 8006ed6:	6123      	str	r3, [r4, #16]
 8006ed8:	e7f1      	b.n	8006ebe <_scanf_float+0x2aa>
 8006eda:	9802      	ldr	r0, [sp, #8]
 8006edc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006ee0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006ee4:	9002      	str	r0, [sp, #8]
 8006ee6:	463a      	mov	r2, r7
 8006ee8:	4640      	mov	r0, r8
 8006eea:	4798      	blx	r3
 8006eec:	6923      	ldr	r3, [r4, #16]
 8006eee:	3b01      	subs	r3, #1
 8006ef0:	6123      	str	r3, [r4, #16]
 8006ef2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006ef6:	fa5f fa8a 	uxtb.w	sl, sl
 8006efa:	f1ba 0f02 	cmp.w	sl, #2
 8006efe:	d1ec      	bne.n	8006eda <_scanf_float+0x2c6>
 8006f00:	3d03      	subs	r5, #3
 8006f02:	b2ed      	uxtb	r5, r5
 8006f04:	1b76      	subs	r6, r6, r5
 8006f06:	6823      	ldr	r3, [r4, #0]
 8006f08:	05da      	lsls	r2, r3, #23
 8006f0a:	d52f      	bpl.n	8006f6c <_scanf_float+0x358>
 8006f0c:	055b      	lsls	r3, r3, #21
 8006f0e:	d510      	bpl.n	8006f32 <_scanf_float+0x31e>
 8006f10:	455e      	cmp	r6, fp
 8006f12:	f67f aebf 	bls.w	8006c94 <_scanf_float+0x80>
 8006f16:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006f1a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006f1e:	463a      	mov	r2, r7
 8006f20:	4640      	mov	r0, r8
 8006f22:	4798      	blx	r3
 8006f24:	6923      	ldr	r3, [r4, #16]
 8006f26:	3b01      	subs	r3, #1
 8006f28:	6123      	str	r3, [r4, #16]
 8006f2a:	e7f1      	b.n	8006f10 <_scanf_float+0x2fc>
 8006f2c:	46aa      	mov	sl, r5
 8006f2e:	9602      	str	r6, [sp, #8]
 8006f30:	e7df      	b.n	8006ef2 <_scanf_float+0x2de>
 8006f32:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006f36:	6923      	ldr	r3, [r4, #16]
 8006f38:	2965      	cmp	r1, #101	; 0x65
 8006f3a:	f103 33ff 	add.w	r3, r3, #4294967295
 8006f3e:	f106 35ff 	add.w	r5, r6, #4294967295
 8006f42:	6123      	str	r3, [r4, #16]
 8006f44:	d00c      	beq.n	8006f60 <_scanf_float+0x34c>
 8006f46:	2945      	cmp	r1, #69	; 0x45
 8006f48:	d00a      	beq.n	8006f60 <_scanf_float+0x34c>
 8006f4a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006f4e:	463a      	mov	r2, r7
 8006f50:	4640      	mov	r0, r8
 8006f52:	4798      	blx	r3
 8006f54:	6923      	ldr	r3, [r4, #16]
 8006f56:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006f5a:	3b01      	subs	r3, #1
 8006f5c:	1eb5      	subs	r5, r6, #2
 8006f5e:	6123      	str	r3, [r4, #16]
 8006f60:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006f64:	463a      	mov	r2, r7
 8006f66:	4640      	mov	r0, r8
 8006f68:	4798      	blx	r3
 8006f6a:	462e      	mov	r6, r5
 8006f6c:	6825      	ldr	r5, [r4, #0]
 8006f6e:	f015 0510 	ands.w	r5, r5, #16
 8006f72:	d159      	bne.n	8007028 <_scanf_float+0x414>
 8006f74:	7035      	strb	r5, [r6, #0]
 8006f76:	6823      	ldr	r3, [r4, #0]
 8006f78:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006f7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f80:	d11b      	bne.n	8006fba <_scanf_float+0x3a6>
 8006f82:	9b01      	ldr	r3, [sp, #4]
 8006f84:	454b      	cmp	r3, r9
 8006f86:	eba3 0209 	sub.w	r2, r3, r9
 8006f8a:	d123      	bne.n	8006fd4 <_scanf_float+0x3c0>
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	4659      	mov	r1, fp
 8006f90:	4640      	mov	r0, r8
 8006f92:	f000 fe97 	bl	8007cc4 <_strtod_r>
 8006f96:	6822      	ldr	r2, [r4, #0]
 8006f98:	9b03      	ldr	r3, [sp, #12]
 8006f9a:	f012 0f02 	tst.w	r2, #2
 8006f9e:	ec57 6b10 	vmov	r6, r7, d0
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	d021      	beq.n	8006fea <_scanf_float+0x3d6>
 8006fa6:	9903      	ldr	r1, [sp, #12]
 8006fa8:	1d1a      	adds	r2, r3, #4
 8006faa:	600a      	str	r2, [r1, #0]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	e9c3 6700 	strd	r6, r7, [r3]
 8006fb2:	68e3      	ldr	r3, [r4, #12]
 8006fb4:	3301      	adds	r3, #1
 8006fb6:	60e3      	str	r3, [r4, #12]
 8006fb8:	e66d      	b.n	8006c96 <_scanf_float+0x82>
 8006fba:	9b04      	ldr	r3, [sp, #16]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d0e5      	beq.n	8006f8c <_scanf_float+0x378>
 8006fc0:	9905      	ldr	r1, [sp, #20]
 8006fc2:	230a      	movs	r3, #10
 8006fc4:	462a      	mov	r2, r5
 8006fc6:	3101      	adds	r1, #1
 8006fc8:	4640      	mov	r0, r8
 8006fca:	f000 ff03 	bl	8007dd4 <_strtol_r>
 8006fce:	9b04      	ldr	r3, [sp, #16]
 8006fd0:	9e05      	ldr	r6, [sp, #20]
 8006fd2:	1ac2      	subs	r2, r0, r3
 8006fd4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006fd8:	429e      	cmp	r6, r3
 8006fda:	bf28      	it	cs
 8006fdc:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006fe0:	4912      	ldr	r1, [pc, #72]	; (800702c <_scanf_float+0x418>)
 8006fe2:	4630      	mov	r0, r6
 8006fe4:	f000 f82c 	bl	8007040 <siprintf>
 8006fe8:	e7d0      	b.n	8006f8c <_scanf_float+0x378>
 8006fea:	9903      	ldr	r1, [sp, #12]
 8006fec:	f012 0f04 	tst.w	r2, #4
 8006ff0:	f103 0204 	add.w	r2, r3, #4
 8006ff4:	600a      	str	r2, [r1, #0]
 8006ff6:	d1d9      	bne.n	8006fac <_scanf_float+0x398>
 8006ff8:	f8d3 8000 	ldr.w	r8, [r3]
 8006ffc:	ee10 2a10 	vmov	r2, s0
 8007000:	ee10 0a10 	vmov	r0, s0
 8007004:	463b      	mov	r3, r7
 8007006:	4639      	mov	r1, r7
 8007008:	f7f9 fd90 	bl	8000b2c <__aeabi_dcmpun>
 800700c:	b128      	cbz	r0, 800701a <_scanf_float+0x406>
 800700e:	4808      	ldr	r0, [pc, #32]	; (8007030 <_scanf_float+0x41c>)
 8007010:	f000 f810 	bl	8007034 <nanf>
 8007014:	ed88 0a00 	vstr	s0, [r8]
 8007018:	e7cb      	b.n	8006fb2 <_scanf_float+0x39e>
 800701a:	4630      	mov	r0, r6
 800701c:	4639      	mov	r1, r7
 800701e:	f7f9 fde3 	bl	8000be8 <__aeabi_d2f>
 8007022:	f8c8 0000 	str.w	r0, [r8]
 8007026:	e7c4      	b.n	8006fb2 <_scanf_float+0x39e>
 8007028:	2500      	movs	r5, #0
 800702a:	e634      	b.n	8006c96 <_scanf_float+0x82>
 800702c:	0800b450 	.word	0x0800b450
 8007030:	0800b858 	.word	0x0800b858

08007034 <nanf>:
 8007034:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800703c <nanf+0x8>
 8007038:	4770      	bx	lr
 800703a:	bf00      	nop
 800703c:	7fc00000 	.word	0x7fc00000

08007040 <siprintf>:
 8007040:	b40e      	push	{r1, r2, r3}
 8007042:	b500      	push	{lr}
 8007044:	b09c      	sub	sp, #112	; 0x70
 8007046:	ab1d      	add	r3, sp, #116	; 0x74
 8007048:	9002      	str	r0, [sp, #8]
 800704a:	9006      	str	r0, [sp, #24]
 800704c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007050:	4809      	ldr	r0, [pc, #36]	; (8007078 <siprintf+0x38>)
 8007052:	9107      	str	r1, [sp, #28]
 8007054:	9104      	str	r1, [sp, #16]
 8007056:	4909      	ldr	r1, [pc, #36]	; (800707c <siprintf+0x3c>)
 8007058:	f853 2b04 	ldr.w	r2, [r3], #4
 800705c:	9105      	str	r1, [sp, #20]
 800705e:	6800      	ldr	r0, [r0, #0]
 8007060:	9301      	str	r3, [sp, #4]
 8007062:	a902      	add	r1, sp, #8
 8007064:	f002 fee2 	bl	8009e2c <_svfiprintf_r>
 8007068:	9b02      	ldr	r3, [sp, #8]
 800706a:	2200      	movs	r2, #0
 800706c:	701a      	strb	r2, [r3, #0]
 800706e:	b01c      	add	sp, #112	; 0x70
 8007070:	f85d eb04 	ldr.w	lr, [sp], #4
 8007074:	b003      	add	sp, #12
 8007076:	4770      	bx	lr
 8007078:	2000000c 	.word	0x2000000c
 800707c:	ffff0208 	.word	0xffff0208

08007080 <sulp>:
 8007080:	b570      	push	{r4, r5, r6, lr}
 8007082:	4604      	mov	r4, r0
 8007084:	460d      	mov	r5, r1
 8007086:	ec45 4b10 	vmov	d0, r4, r5
 800708a:	4616      	mov	r6, r2
 800708c:	f002 fc2c 	bl	80098e8 <__ulp>
 8007090:	ec51 0b10 	vmov	r0, r1, d0
 8007094:	b17e      	cbz	r6, 80070b6 <sulp+0x36>
 8007096:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800709a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800709e:	2b00      	cmp	r3, #0
 80070a0:	dd09      	ble.n	80070b6 <sulp+0x36>
 80070a2:	051b      	lsls	r3, r3, #20
 80070a4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80070a8:	2400      	movs	r4, #0
 80070aa:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80070ae:	4622      	mov	r2, r4
 80070b0:	462b      	mov	r3, r5
 80070b2:	f7f9 faa1 	bl	80005f8 <__aeabi_dmul>
 80070b6:	bd70      	pop	{r4, r5, r6, pc}

080070b8 <_strtod_l>:
 80070b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070bc:	ed2d 8b02 	vpush	{d8}
 80070c0:	b09d      	sub	sp, #116	; 0x74
 80070c2:	461f      	mov	r7, r3
 80070c4:	2300      	movs	r3, #0
 80070c6:	9318      	str	r3, [sp, #96]	; 0x60
 80070c8:	4ba2      	ldr	r3, [pc, #648]	; (8007354 <_strtod_l+0x29c>)
 80070ca:	9213      	str	r2, [sp, #76]	; 0x4c
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	9305      	str	r3, [sp, #20]
 80070d0:	4604      	mov	r4, r0
 80070d2:	4618      	mov	r0, r3
 80070d4:	4688      	mov	r8, r1
 80070d6:	f7f9 f87b 	bl	80001d0 <strlen>
 80070da:	f04f 0a00 	mov.w	sl, #0
 80070de:	4605      	mov	r5, r0
 80070e0:	f04f 0b00 	mov.w	fp, #0
 80070e4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80070e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80070ea:	781a      	ldrb	r2, [r3, #0]
 80070ec:	2a2b      	cmp	r2, #43	; 0x2b
 80070ee:	d04e      	beq.n	800718e <_strtod_l+0xd6>
 80070f0:	d83b      	bhi.n	800716a <_strtod_l+0xb2>
 80070f2:	2a0d      	cmp	r2, #13
 80070f4:	d834      	bhi.n	8007160 <_strtod_l+0xa8>
 80070f6:	2a08      	cmp	r2, #8
 80070f8:	d834      	bhi.n	8007164 <_strtod_l+0xac>
 80070fa:	2a00      	cmp	r2, #0
 80070fc:	d03e      	beq.n	800717c <_strtod_l+0xc4>
 80070fe:	2300      	movs	r3, #0
 8007100:	930a      	str	r3, [sp, #40]	; 0x28
 8007102:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8007104:	7833      	ldrb	r3, [r6, #0]
 8007106:	2b30      	cmp	r3, #48	; 0x30
 8007108:	f040 80b0 	bne.w	800726c <_strtod_l+0x1b4>
 800710c:	7873      	ldrb	r3, [r6, #1]
 800710e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007112:	2b58      	cmp	r3, #88	; 0x58
 8007114:	d168      	bne.n	80071e8 <_strtod_l+0x130>
 8007116:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007118:	9301      	str	r3, [sp, #4]
 800711a:	ab18      	add	r3, sp, #96	; 0x60
 800711c:	9702      	str	r7, [sp, #8]
 800711e:	9300      	str	r3, [sp, #0]
 8007120:	4a8d      	ldr	r2, [pc, #564]	; (8007358 <_strtod_l+0x2a0>)
 8007122:	ab19      	add	r3, sp, #100	; 0x64
 8007124:	a917      	add	r1, sp, #92	; 0x5c
 8007126:	4620      	mov	r0, r4
 8007128:	f001 fd38 	bl	8008b9c <__gethex>
 800712c:	f010 0707 	ands.w	r7, r0, #7
 8007130:	4605      	mov	r5, r0
 8007132:	d005      	beq.n	8007140 <_strtod_l+0x88>
 8007134:	2f06      	cmp	r7, #6
 8007136:	d12c      	bne.n	8007192 <_strtod_l+0xda>
 8007138:	3601      	adds	r6, #1
 800713a:	2300      	movs	r3, #0
 800713c:	9617      	str	r6, [sp, #92]	; 0x5c
 800713e:	930a      	str	r3, [sp, #40]	; 0x28
 8007140:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007142:	2b00      	cmp	r3, #0
 8007144:	f040 8590 	bne.w	8007c68 <_strtod_l+0xbb0>
 8007148:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800714a:	b1eb      	cbz	r3, 8007188 <_strtod_l+0xd0>
 800714c:	4652      	mov	r2, sl
 800714e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007152:	ec43 2b10 	vmov	d0, r2, r3
 8007156:	b01d      	add	sp, #116	; 0x74
 8007158:	ecbd 8b02 	vpop	{d8}
 800715c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007160:	2a20      	cmp	r2, #32
 8007162:	d1cc      	bne.n	80070fe <_strtod_l+0x46>
 8007164:	3301      	adds	r3, #1
 8007166:	9317      	str	r3, [sp, #92]	; 0x5c
 8007168:	e7be      	b.n	80070e8 <_strtod_l+0x30>
 800716a:	2a2d      	cmp	r2, #45	; 0x2d
 800716c:	d1c7      	bne.n	80070fe <_strtod_l+0x46>
 800716e:	2201      	movs	r2, #1
 8007170:	920a      	str	r2, [sp, #40]	; 0x28
 8007172:	1c5a      	adds	r2, r3, #1
 8007174:	9217      	str	r2, [sp, #92]	; 0x5c
 8007176:	785b      	ldrb	r3, [r3, #1]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d1c2      	bne.n	8007102 <_strtod_l+0x4a>
 800717c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800717e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007182:	2b00      	cmp	r3, #0
 8007184:	f040 856e 	bne.w	8007c64 <_strtod_l+0xbac>
 8007188:	4652      	mov	r2, sl
 800718a:	465b      	mov	r3, fp
 800718c:	e7e1      	b.n	8007152 <_strtod_l+0x9a>
 800718e:	2200      	movs	r2, #0
 8007190:	e7ee      	b.n	8007170 <_strtod_l+0xb8>
 8007192:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007194:	b13a      	cbz	r2, 80071a6 <_strtod_l+0xee>
 8007196:	2135      	movs	r1, #53	; 0x35
 8007198:	a81a      	add	r0, sp, #104	; 0x68
 800719a:	f002 fcb0 	bl	8009afe <__copybits>
 800719e:	9918      	ldr	r1, [sp, #96]	; 0x60
 80071a0:	4620      	mov	r0, r4
 80071a2:	f002 f86f 	bl	8009284 <_Bfree>
 80071a6:	3f01      	subs	r7, #1
 80071a8:	2f04      	cmp	r7, #4
 80071aa:	d806      	bhi.n	80071ba <_strtod_l+0x102>
 80071ac:	e8df f007 	tbb	[pc, r7]
 80071b0:	1714030a 	.word	0x1714030a
 80071b4:	0a          	.byte	0x0a
 80071b5:	00          	.byte	0x00
 80071b6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80071ba:	0728      	lsls	r0, r5, #28
 80071bc:	d5c0      	bpl.n	8007140 <_strtod_l+0x88>
 80071be:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80071c2:	e7bd      	b.n	8007140 <_strtod_l+0x88>
 80071c4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80071c8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80071ca:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80071ce:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80071d2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80071d6:	e7f0      	b.n	80071ba <_strtod_l+0x102>
 80071d8:	f8df b180 	ldr.w	fp, [pc, #384]	; 800735c <_strtod_l+0x2a4>
 80071dc:	e7ed      	b.n	80071ba <_strtod_l+0x102>
 80071de:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80071e2:	f04f 3aff 	mov.w	sl, #4294967295
 80071e6:	e7e8      	b.n	80071ba <_strtod_l+0x102>
 80071e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80071ea:	1c5a      	adds	r2, r3, #1
 80071ec:	9217      	str	r2, [sp, #92]	; 0x5c
 80071ee:	785b      	ldrb	r3, [r3, #1]
 80071f0:	2b30      	cmp	r3, #48	; 0x30
 80071f2:	d0f9      	beq.n	80071e8 <_strtod_l+0x130>
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d0a3      	beq.n	8007140 <_strtod_l+0x88>
 80071f8:	2301      	movs	r3, #1
 80071fa:	f04f 0900 	mov.w	r9, #0
 80071fe:	9304      	str	r3, [sp, #16]
 8007200:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007202:	9308      	str	r3, [sp, #32]
 8007204:	f8cd 901c 	str.w	r9, [sp, #28]
 8007208:	464f      	mov	r7, r9
 800720a:	220a      	movs	r2, #10
 800720c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800720e:	7806      	ldrb	r6, [r0, #0]
 8007210:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007214:	b2d9      	uxtb	r1, r3
 8007216:	2909      	cmp	r1, #9
 8007218:	d92a      	bls.n	8007270 <_strtod_l+0x1b8>
 800721a:	9905      	ldr	r1, [sp, #20]
 800721c:	462a      	mov	r2, r5
 800721e:	f002 ff1f 	bl	800a060 <strncmp>
 8007222:	b398      	cbz	r0, 800728c <_strtod_l+0x1d4>
 8007224:	2000      	movs	r0, #0
 8007226:	4632      	mov	r2, r6
 8007228:	463d      	mov	r5, r7
 800722a:	9005      	str	r0, [sp, #20]
 800722c:	4603      	mov	r3, r0
 800722e:	2a65      	cmp	r2, #101	; 0x65
 8007230:	d001      	beq.n	8007236 <_strtod_l+0x17e>
 8007232:	2a45      	cmp	r2, #69	; 0x45
 8007234:	d118      	bne.n	8007268 <_strtod_l+0x1b0>
 8007236:	b91d      	cbnz	r5, 8007240 <_strtod_l+0x188>
 8007238:	9a04      	ldr	r2, [sp, #16]
 800723a:	4302      	orrs	r2, r0
 800723c:	d09e      	beq.n	800717c <_strtod_l+0xc4>
 800723e:	2500      	movs	r5, #0
 8007240:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8007244:	f108 0201 	add.w	r2, r8, #1
 8007248:	9217      	str	r2, [sp, #92]	; 0x5c
 800724a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800724e:	2a2b      	cmp	r2, #43	; 0x2b
 8007250:	d075      	beq.n	800733e <_strtod_l+0x286>
 8007252:	2a2d      	cmp	r2, #45	; 0x2d
 8007254:	d07b      	beq.n	800734e <_strtod_l+0x296>
 8007256:	f04f 0c00 	mov.w	ip, #0
 800725a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800725e:	2909      	cmp	r1, #9
 8007260:	f240 8082 	bls.w	8007368 <_strtod_l+0x2b0>
 8007264:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007268:	2600      	movs	r6, #0
 800726a:	e09d      	b.n	80073a8 <_strtod_l+0x2f0>
 800726c:	2300      	movs	r3, #0
 800726e:	e7c4      	b.n	80071fa <_strtod_l+0x142>
 8007270:	2f08      	cmp	r7, #8
 8007272:	bfd8      	it	le
 8007274:	9907      	ldrle	r1, [sp, #28]
 8007276:	f100 0001 	add.w	r0, r0, #1
 800727a:	bfda      	itte	le
 800727c:	fb02 3301 	mlale	r3, r2, r1, r3
 8007280:	9307      	strle	r3, [sp, #28]
 8007282:	fb02 3909 	mlagt	r9, r2, r9, r3
 8007286:	3701      	adds	r7, #1
 8007288:	9017      	str	r0, [sp, #92]	; 0x5c
 800728a:	e7bf      	b.n	800720c <_strtod_l+0x154>
 800728c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800728e:	195a      	adds	r2, r3, r5
 8007290:	9217      	str	r2, [sp, #92]	; 0x5c
 8007292:	5d5a      	ldrb	r2, [r3, r5]
 8007294:	2f00      	cmp	r7, #0
 8007296:	d037      	beq.n	8007308 <_strtod_l+0x250>
 8007298:	9005      	str	r0, [sp, #20]
 800729a:	463d      	mov	r5, r7
 800729c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80072a0:	2b09      	cmp	r3, #9
 80072a2:	d912      	bls.n	80072ca <_strtod_l+0x212>
 80072a4:	2301      	movs	r3, #1
 80072a6:	e7c2      	b.n	800722e <_strtod_l+0x176>
 80072a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80072aa:	1c5a      	adds	r2, r3, #1
 80072ac:	9217      	str	r2, [sp, #92]	; 0x5c
 80072ae:	785a      	ldrb	r2, [r3, #1]
 80072b0:	3001      	adds	r0, #1
 80072b2:	2a30      	cmp	r2, #48	; 0x30
 80072b4:	d0f8      	beq.n	80072a8 <_strtod_l+0x1f0>
 80072b6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80072ba:	2b08      	cmp	r3, #8
 80072bc:	f200 84d9 	bhi.w	8007c72 <_strtod_l+0xbba>
 80072c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80072c2:	9005      	str	r0, [sp, #20]
 80072c4:	2000      	movs	r0, #0
 80072c6:	9308      	str	r3, [sp, #32]
 80072c8:	4605      	mov	r5, r0
 80072ca:	3a30      	subs	r2, #48	; 0x30
 80072cc:	f100 0301 	add.w	r3, r0, #1
 80072d0:	d014      	beq.n	80072fc <_strtod_l+0x244>
 80072d2:	9905      	ldr	r1, [sp, #20]
 80072d4:	4419      	add	r1, r3
 80072d6:	9105      	str	r1, [sp, #20]
 80072d8:	462b      	mov	r3, r5
 80072da:	eb00 0e05 	add.w	lr, r0, r5
 80072de:	210a      	movs	r1, #10
 80072e0:	4573      	cmp	r3, lr
 80072e2:	d113      	bne.n	800730c <_strtod_l+0x254>
 80072e4:	182b      	adds	r3, r5, r0
 80072e6:	2b08      	cmp	r3, #8
 80072e8:	f105 0501 	add.w	r5, r5, #1
 80072ec:	4405      	add	r5, r0
 80072ee:	dc1c      	bgt.n	800732a <_strtod_l+0x272>
 80072f0:	9907      	ldr	r1, [sp, #28]
 80072f2:	230a      	movs	r3, #10
 80072f4:	fb03 2301 	mla	r3, r3, r1, r2
 80072f8:	9307      	str	r3, [sp, #28]
 80072fa:	2300      	movs	r3, #0
 80072fc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80072fe:	1c51      	adds	r1, r2, #1
 8007300:	9117      	str	r1, [sp, #92]	; 0x5c
 8007302:	7852      	ldrb	r2, [r2, #1]
 8007304:	4618      	mov	r0, r3
 8007306:	e7c9      	b.n	800729c <_strtod_l+0x1e4>
 8007308:	4638      	mov	r0, r7
 800730a:	e7d2      	b.n	80072b2 <_strtod_l+0x1fa>
 800730c:	2b08      	cmp	r3, #8
 800730e:	dc04      	bgt.n	800731a <_strtod_l+0x262>
 8007310:	9e07      	ldr	r6, [sp, #28]
 8007312:	434e      	muls	r6, r1
 8007314:	9607      	str	r6, [sp, #28]
 8007316:	3301      	adds	r3, #1
 8007318:	e7e2      	b.n	80072e0 <_strtod_l+0x228>
 800731a:	f103 0c01 	add.w	ip, r3, #1
 800731e:	f1bc 0f10 	cmp.w	ip, #16
 8007322:	bfd8      	it	le
 8007324:	fb01 f909 	mulle.w	r9, r1, r9
 8007328:	e7f5      	b.n	8007316 <_strtod_l+0x25e>
 800732a:	2d10      	cmp	r5, #16
 800732c:	bfdc      	itt	le
 800732e:	230a      	movle	r3, #10
 8007330:	fb03 2909 	mlale	r9, r3, r9, r2
 8007334:	e7e1      	b.n	80072fa <_strtod_l+0x242>
 8007336:	2300      	movs	r3, #0
 8007338:	9305      	str	r3, [sp, #20]
 800733a:	2301      	movs	r3, #1
 800733c:	e77c      	b.n	8007238 <_strtod_l+0x180>
 800733e:	f04f 0c00 	mov.w	ip, #0
 8007342:	f108 0202 	add.w	r2, r8, #2
 8007346:	9217      	str	r2, [sp, #92]	; 0x5c
 8007348:	f898 2002 	ldrb.w	r2, [r8, #2]
 800734c:	e785      	b.n	800725a <_strtod_l+0x1a2>
 800734e:	f04f 0c01 	mov.w	ip, #1
 8007352:	e7f6      	b.n	8007342 <_strtod_l+0x28a>
 8007354:	0800b6a0 	.word	0x0800b6a0
 8007358:	0800b458 	.word	0x0800b458
 800735c:	7ff00000 	.word	0x7ff00000
 8007360:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007362:	1c51      	adds	r1, r2, #1
 8007364:	9117      	str	r1, [sp, #92]	; 0x5c
 8007366:	7852      	ldrb	r2, [r2, #1]
 8007368:	2a30      	cmp	r2, #48	; 0x30
 800736a:	d0f9      	beq.n	8007360 <_strtod_l+0x2a8>
 800736c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007370:	2908      	cmp	r1, #8
 8007372:	f63f af79 	bhi.w	8007268 <_strtod_l+0x1b0>
 8007376:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800737a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800737c:	9206      	str	r2, [sp, #24]
 800737e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007380:	1c51      	adds	r1, r2, #1
 8007382:	9117      	str	r1, [sp, #92]	; 0x5c
 8007384:	7852      	ldrb	r2, [r2, #1]
 8007386:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800738a:	2e09      	cmp	r6, #9
 800738c:	d937      	bls.n	80073fe <_strtod_l+0x346>
 800738e:	9e06      	ldr	r6, [sp, #24]
 8007390:	1b89      	subs	r1, r1, r6
 8007392:	2908      	cmp	r1, #8
 8007394:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8007398:	dc02      	bgt.n	80073a0 <_strtod_l+0x2e8>
 800739a:	4576      	cmp	r6, lr
 800739c:	bfa8      	it	ge
 800739e:	4676      	movge	r6, lr
 80073a0:	f1bc 0f00 	cmp.w	ip, #0
 80073a4:	d000      	beq.n	80073a8 <_strtod_l+0x2f0>
 80073a6:	4276      	negs	r6, r6
 80073a8:	2d00      	cmp	r5, #0
 80073aa:	d14d      	bne.n	8007448 <_strtod_l+0x390>
 80073ac:	9904      	ldr	r1, [sp, #16]
 80073ae:	4301      	orrs	r1, r0
 80073b0:	f47f aec6 	bne.w	8007140 <_strtod_l+0x88>
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	f47f aee1 	bne.w	800717c <_strtod_l+0xc4>
 80073ba:	2a69      	cmp	r2, #105	; 0x69
 80073bc:	d027      	beq.n	800740e <_strtod_l+0x356>
 80073be:	dc24      	bgt.n	800740a <_strtod_l+0x352>
 80073c0:	2a49      	cmp	r2, #73	; 0x49
 80073c2:	d024      	beq.n	800740e <_strtod_l+0x356>
 80073c4:	2a4e      	cmp	r2, #78	; 0x4e
 80073c6:	f47f aed9 	bne.w	800717c <_strtod_l+0xc4>
 80073ca:	499f      	ldr	r1, [pc, #636]	; (8007648 <_strtod_l+0x590>)
 80073cc:	a817      	add	r0, sp, #92	; 0x5c
 80073ce:	f001 fe3d 	bl	800904c <__match>
 80073d2:	2800      	cmp	r0, #0
 80073d4:	f43f aed2 	beq.w	800717c <_strtod_l+0xc4>
 80073d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80073da:	781b      	ldrb	r3, [r3, #0]
 80073dc:	2b28      	cmp	r3, #40	; 0x28
 80073de:	d12d      	bne.n	800743c <_strtod_l+0x384>
 80073e0:	499a      	ldr	r1, [pc, #616]	; (800764c <_strtod_l+0x594>)
 80073e2:	aa1a      	add	r2, sp, #104	; 0x68
 80073e4:	a817      	add	r0, sp, #92	; 0x5c
 80073e6:	f001 fe45 	bl	8009074 <__hexnan>
 80073ea:	2805      	cmp	r0, #5
 80073ec:	d126      	bne.n	800743c <_strtod_l+0x384>
 80073ee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80073f0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80073f4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80073f8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80073fc:	e6a0      	b.n	8007140 <_strtod_l+0x88>
 80073fe:	210a      	movs	r1, #10
 8007400:	fb01 2e0e 	mla	lr, r1, lr, r2
 8007404:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007408:	e7b9      	b.n	800737e <_strtod_l+0x2c6>
 800740a:	2a6e      	cmp	r2, #110	; 0x6e
 800740c:	e7db      	b.n	80073c6 <_strtod_l+0x30e>
 800740e:	4990      	ldr	r1, [pc, #576]	; (8007650 <_strtod_l+0x598>)
 8007410:	a817      	add	r0, sp, #92	; 0x5c
 8007412:	f001 fe1b 	bl	800904c <__match>
 8007416:	2800      	cmp	r0, #0
 8007418:	f43f aeb0 	beq.w	800717c <_strtod_l+0xc4>
 800741c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800741e:	498d      	ldr	r1, [pc, #564]	; (8007654 <_strtod_l+0x59c>)
 8007420:	3b01      	subs	r3, #1
 8007422:	a817      	add	r0, sp, #92	; 0x5c
 8007424:	9317      	str	r3, [sp, #92]	; 0x5c
 8007426:	f001 fe11 	bl	800904c <__match>
 800742a:	b910      	cbnz	r0, 8007432 <_strtod_l+0x37a>
 800742c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800742e:	3301      	adds	r3, #1
 8007430:	9317      	str	r3, [sp, #92]	; 0x5c
 8007432:	f8df b230 	ldr.w	fp, [pc, #560]	; 8007664 <_strtod_l+0x5ac>
 8007436:	f04f 0a00 	mov.w	sl, #0
 800743a:	e681      	b.n	8007140 <_strtod_l+0x88>
 800743c:	4886      	ldr	r0, [pc, #536]	; (8007658 <_strtod_l+0x5a0>)
 800743e:	f002 fdf7 	bl	800a030 <nan>
 8007442:	ec5b ab10 	vmov	sl, fp, d0
 8007446:	e67b      	b.n	8007140 <_strtod_l+0x88>
 8007448:	9b05      	ldr	r3, [sp, #20]
 800744a:	9807      	ldr	r0, [sp, #28]
 800744c:	1af3      	subs	r3, r6, r3
 800744e:	2f00      	cmp	r7, #0
 8007450:	bf08      	it	eq
 8007452:	462f      	moveq	r7, r5
 8007454:	2d10      	cmp	r5, #16
 8007456:	9306      	str	r3, [sp, #24]
 8007458:	46a8      	mov	r8, r5
 800745a:	bfa8      	it	ge
 800745c:	f04f 0810 	movge.w	r8, #16
 8007460:	f7f9 f850 	bl	8000504 <__aeabi_ui2d>
 8007464:	2d09      	cmp	r5, #9
 8007466:	4682      	mov	sl, r0
 8007468:	468b      	mov	fp, r1
 800746a:	dd13      	ble.n	8007494 <_strtod_l+0x3dc>
 800746c:	4b7b      	ldr	r3, [pc, #492]	; (800765c <_strtod_l+0x5a4>)
 800746e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007472:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007476:	f7f9 f8bf 	bl	80005f8 <__aeabi_dmul>
 800747a:	4682      	mov	sl, r0
 800747c:	4648      	mov	r0, r9
 800747e:	468b      	mov	fp, r1
 8007480:	f7f9 f840 	bl	8000504 <__aeabi_ui2d>
 8007484:	4602      	mov	r2, r0
 8007486:	460b      	mov	r3, r1
 8007488:	4650      	mov	r0, sl
 800748a:	4659      	mov	r1, fp
 800748c:	f7f8 fefe 	bl	800028c <__adddf3>
 8007490:	4682      	mov	sl, r0
 8007492:	468b      	mov	fp, r1
 8007494:	2d0f      	cmp	r5, #15
 8007496:	dc38      	bgt.n	800750a <_strtod_l+0x452>
 8007498:	9b06      	ldr	r3, [sp, #24]
 800749a:	2b00      	cmp	r3, #0
 800749c:	f43f ae50 	beq.w	8007140 <_strtod_l+0x88>
 80074a0:	dd24      	ble.n	80074ec <_strtod_l+0x434>
 80074a2:	2b16      	cmp	r3, #22
 80074a4:	dc0b      	bgt.n	80074be <_strtod_l+0x406>
 80074a6:	496d      	ldr	r1, [pc, #436]	; (800765c <_strtod_l+0x5a4>)
 80074a8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80074ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80074b0:	4652      	mov	r2, sl
 80074b2:	465b      	mov	r3, fp
 80074b4:	f7f9 f8a0 	bl	80005f8 <__aeabi_dmul>
 80074b8:	4682      	mov	sl, r0
 80074ba:	468b      	mov	fp, r1
 80074bc:	e640      	b.n	8007140 <_strtod_l+0x88>
 80074be:	9a06      	ldr	r2, [sp, #24]
 80074c0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80074c4:	4293      	cmp	r3, r2
 80074c6:	db20      	blt.n	800750a <_strtod_l+0x452>
 80074c8:	4c64      	ldr	r4, [pc, #400]	; (800765c <_strtod_l+0x5a4>)
 80074ca:	f1c5 050f 	rsb	r5, r5, #15
 80074ce:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80074d2:	4652      	mov	r2, sl
 80074d4:	465b      	mov	r3, fp
 80074d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80074da:	f7f9 f88d 	bl	80005f8 <__aeabi_dmul>
 80074de:	9b06      	ldr	r3, [sp, #24]
 80074e0:	1b5d      	subs	r5, r3, r5
 80074e2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80074e6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80074ea:	e7e3      	b.n	80074b4 <_strtod_l+0x3fc>
 80074ec:	9b06      	ldr	r3, [sp, #24]
 80074ee:	3316      	adds	r3, #22
 80074f0:	db0b      	blt.n	800750a <_strtod_l+0x452>
 80074f2:	9b05      	ldr	r3, [sp, #20]
 80074f4:	1b9e      	subs	r6, r3, r6
 80074f6:	4b59      	ldr	r3, [pc, #356]	; (800765c <_strtod_l+0x5a4>)
 80074f8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80074fc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007500:	4650      	mov	r0, sl
 8007502:	4659      	mov	r1, fp
 8007504:	f7f9 f9a2 	bl	800084c <__aeabi_ddiv>
 8007508:	e7d6      	b.n	80074b8 <_strtod_l+0x400>
 800750a:	9b06      	ldr	r3, [sp, #24]
 800750c:	eba5 0808 	sub.w	r8, r5, r8
 8007510:	4498      	add	r8, r3
 8007512:	f1b8 0f00 	cmp.w	r8, #0
 8007516:	dd74      	ble.n	8007602 <_strtod_l+0x54a>
 8007518:	f018 030f 	ands.w	r3, r8, #15
 800751c:	d00a      	beq.n	8007534 <_strtod_l+0x47c>
 800751e:	494f      	ldr	r1, [pc, #316]	; (800765c <_strtod_l+0x5a4>)
 8007520:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007524:	4652      	mov	r2, sl
 8007526:	465b      	mov	r3, fp
 8007528:	e9d1 0100 	ldrd	r0, r1, [r1]
 800752c:	f7f9 f864 	bl	80005f8 <__aeabi_dmul>
 8007530:	4682      	mov	sl, r0
 8007532:	468b      	mov	fp, r1
 8007534:	f038 080f 	bics.w	r8, r8, #15
 8007538:	d04f      	beq.n	80075da <_strtod_l+0x522>
 800753a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800753e:	dd22      	ble.n	8007586 <_strtod_l+0x4ce>
 8007540:	2500      	movs	r5, #0
 8007542:	462e      	mov	r6, r5
 8007544:	9507      	str	r5, [sp, #28]
 8007546:	9505      	str	r5, [sp, #20]
 8007548:	2322      	movs	r3, #34	; 0x22
 800754a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8007664 <_strtod_l+0x5ac>
 800754e:	6023      	str	r3, [r4, #0]
 8007550:	f04f 0a00 	mov.w	sl, #0
 8007554:	9b07      	ldr	r3, [sp, #28]
 8007556:	2b00      	cmp	r3, #0
 8007558:	f43f adf2 	beq.w	8007140 <_strtod_l+0x88>
 800755c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800755e:	4620      	mov	r0, r4
 8007560:	f001 fe90 	bl	8009284 <_Bfree>
 8007564:	9905      	ldr	r1, [sp, #20]
 8007566:	4620      	mov	r0, r4
 8007568:	f001 fe8c 	bl	8009284 <_Bfree>
 800756c:	4631      	mov	r1, r6
 800756e:	4620      	mov	r0, r4
 8007570:	f001 fe88 	bl	8009284 <_Bfree>
 8007574:	9907      	ldr	r1, [sp, #28]
 8007576:	4620      	mov	r0, r4
 8007578:	f001 fe84 	bl	8009284 <_Bfree>
 800757c:	4629      	mov	r1, r5
 800757e:	4620      	mov	r0, r4
 8007580:	f001 fe80 	bl	8009284 <_Bfree>
 8007584:	e5dc      	b.n	8007140 <_strtod_l+0x88>
 8007586:	4b36      	ldr	r3, [pc, #216]	; (8007660 <_strtod_l+0x5a8>)
 8007588:	9304      	str	r3, [sp, #16]
 800758a:	2300      	movs	r3, #0
 800758c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007590:	4650      	mov	r0, sl
 8007592:	4659      	mov	r1, fp
 8007594:	4699      	mov	r9, r3
 8007596:	f1b8 0f01 	cmp.w	r8, #1
 800759a:	dc21      	bgt.n	80075e0 <_strtod_l+0x528>
 800759c:	b10b      	cbz	r3, 80075a2 <_strtod_l+0x4ea>
 800759e:	4682      	mov	sl, r0
 80075a0:	468b      	mov	fp, r1
 80075a2:	4b2f      	ldr	r3, [pc, #188]	; (8007660 <_strtod_l+0x5a8>)
 80075a4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80075a8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80075ac:	4652      	mov	r2, sl
 80075ae:	465b      	mov	r3, fp
 80075b0:	e9d9 0100 	ldrd	r0, r1, [r9]
 80075b4:	f7f9 f820 	bl	80005f8 <__aeabi_dmul>
 80075b8:	4b2a      	ldr	r3, [pc, #168]	; (8007664 <_strtod_l+0x5ac>)
 80075ba:	460a      	mov	r2, r1
 80075bc:	400b      	ands	r3, r1
 80075be:	492a      	ldr	r1, [pc, #168]	; (8007668 <_strtod_l+0x5b0>)
 80075c0:	428b      	cmp	r3, r1
 80075c2:	4682      	mov	sl, r0
 80075c4:	d8bc      	bhi.n	8007540 <_strtod_l+0x488>
 80075c6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80075ca:	428b      	cmp	r3, r1
 80075cc:	bf86      	itte	hi
 80075ce:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800766c <_strtod_l+0x5b4>
 80075d2:	f04f 3aff 	movhi.w	sl, #4294967295
 80075d6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80075da:	2300      	movs	r3, #0
 80075dc:	9304      	str	r3, [sp, #16]
 80075de:	e084      	b.n	80076ea <_strtod_l+0x632>
 80075e0:	f018 0f01 	tst.w	r8, #1
 80075e4:	d005      	beq.n	80075f2 <_strtod_l+0x53a>
 80075e6:	9b04      	ldr	r3, [sp, #16]
 80075e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ec:	f7f9 f804 	bl	80005f8 <__aeabi_dmul>
 80075f0:	2301      	movs	r3, #1
 80075f2:	9a04      	ldr	r2, [sp, #16]
 80075f4:	3208      	adds	r2, #8
 80075f6:	f109 0901 	add.w	r9, r9, #1
 80075fa:	ea4f 0868 	mov.w	r8, r8, asr #1
 80075fe:	9204      	str	r2, [sp, #16]
 8007600:	e7c9      	b.n	8007596 <_strtod_l+0x4de>
 8007602:	d0ea      	beq.n	80075da <_strtod_l+0x522>
 8007604:	f1c8 0800 	rsb	r8, r8, #0
 8007608:	f018 020f 	ands.w	r2, r8, #15
 800760c:	d00a      	beq.n	8007624 <_strtod_l+0x56c>
 800760e:	4b13      	ldr	r3, [pc, #76]	; (800765c <_strtod_l+0x5a4>)
 8007610:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007614:	4650      	mov	r0, sl
 8007616:	4659      	mov	r1, fp
 8007618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800761c:	f7f9 f916 	bl	800084c <__aeabi_ddiv>
 8007620:	4682      	mov	sl, r0
 8007622:	468b      	mov	fp, r1
 8007624:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007628:	d0d7      	beq.n	80075da <_strtod_l+0x522>
 800762a:	f1b8 0f1f 	cmp.w	r8, #31
 800762e:	dd1f      	ble.n	8007670 <_strtod_l+0x5b8>
 8007630:	2500      	movs	r5, #0
 8007632:	462e      	mov	r6, r5
 8007634:	9507      	str	r5, [sp, #28]
 8007636:	9505      	str	r5, [sp, #20]
 8007638:	2322      	movs	r3, #34	; 0x22
 800763a:	f04f 0a00 	mov.w	sl, #0
 800763e:	f04f 0b00 	mov.w	fp, #0
 8007642:	6023      	str	r3, [r4, #0]
 8007644:	e786      	b.n	8007554 <_strtod_l+0x49c>
 8007646:	bf00      	nop
 8007648:	0800b429 	.word	0x0800b429
 800764c:	0800b46c 	.word	0x0800b46c
 8007650:	0800b421 	.word	0x0800b421
 8007654:	0800b5ac 	.word	0x0800b5ac
 8007658:	0800b858 	.word	0x0800b858
 800765c:	0800b738 	.word	0x0800b738
 8007660:	0800b710 	.word	0x0800b710
 8007664:	7ff00000 	.word	0x7ff00000
 8007668:	7ca00000 	.word	0x7ca00000
 800766c:	7fefffff 	.word	0x7fefffff
 8007670:	f018 0310 	ands.w	r3, r8, #16
 8007674:	bf18      	it	ne
 8007676:	236a      	movne	r3, #106	; 0x6a
 8007678:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8007a28 <_strtod_l+0x970>
 800767c:	9304      	str	r3, [sp, #16]
 800767e:	4650      	mov	r0, sl
 8007680:	4659      	mov	r1, fp
 8007682:	2300      	movs	r3, #0
 8007684:	f018 0f01 	tst.w	r8, #1
 8007688:	d004      	beq.n	8007694 <_strtod_l+0x5dc>
 800768a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800768e:	f7f8 ffb3 	bl	80005f8 <__aeabi_dmul>
 8007692:	2301      	movs	r3, #1
 8007694:	ea5f 0868 	movs.w	r8, r8, asr #1
 8007698:	f109 0908 	add.w	r9, r9, #8
 800769c:	d1f2      	bne.n	8007684 <_strtod_l+0x5cc>
 800769e:	b10b      	cbz	r3, 80076a4 <_strtod_l+0x5ec>
 80076a0:	4682      	mov	sl, r0
 80076a2:	468b      	mov	fp, r1
 80076a4:	9b04      	ldr	r3, [sp, #16]
 80076a6:	b1c3      	cbz	r3, 80076da <_strtod_l+0x622>
 80076a8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80076ac:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	4659      	mov	r1, fp
 80076b4:	dd11      	ble.n	80076da <_strtod_l+0x622>
 80076b6:	2b1f      	cmp	r3, #31
 80076b8:	f340 8124 	ble.w	8007904 <_strtod_l+0x84c>
 80076bc:	2b34      	cmp	r3, #52	; 0x34
 80076be:	bfde      	ittt	le
 80076c0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80076c4:	f04f 33ff 	movle.w	r3, #4294967295
 80076c8:	fa03 f202 	lslle.w	r2, r3, r2
 80076cc:	f04f 0a00 	mov.w	sl, #0
 80076d0:	bfcc      	ite	gt
 80076d2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80076d6:	ea02 0b01 	andle.w	fp, r2, r1
 80076da:	2200      	movs	r2, #0
 80076dc:	2300      	movs	r3, #0
 80076de:	4650      	mov	r0, sl
 80076e0:	4659      	mov	r1, fp
 80076e2:	f7f9 f9f1 	bl	8000ac8 <__aeabi_dcmpeq>
 80076e6:	2800      	cmp	r0, #0
 80076e8:	d1a2      	bne.n	8007630 <_strtod_l+0x578>
 80076ea:	9b07      	ldr	r3, [sp, #28]
 80076ec:	9300      	str	r3, [sp, #0]
 80076ee:	9908      	ldr	r1, [sp, #32]
 80076f0:	462b      	mov	r3, r5
 80076f2:	463a      	mov	r2, r7
 80076f4:	4620      	mov	r0, r4
 80076f6:	f001 fe2d 	bl	8009354 <__s2b>
 80076fa:	9007      	str	r0, [sp, #28]
 80076fc:	2800      	cmp	r0, #0
 80076fe:	f43f af1f 	beq.w	8007540 <_strtod_l+0x488>
 8007702:	9b05      	ldr	r3, [sp, #20]
 8007704:	1b9e      	subs	r6, r3, r6
 8007706:	9b06      	ldr	r3, [sp, #24]
 8007708:	2b00      	cmp	r3, #0
 800770a:	bfb4      	ite	lt
 800770c:	4633      	movlt	r3, r6
 800770e:	2300      	movge	r3, #0
 8007710:	930c      	str	r3, [sp, #48]	; 0x30
 8007712:	9b06      	ldr	r3, [sp, #24]
 8007714:	2500      	movs	r5, #0
 8007716:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800771a:	9312      	str	r3, [sp, #72]	; 0x48
 800771c:	462e      	mov	r6, r5
 800771e:	9b07      	ldr	r3, [sp, #28]
 8007720:	4620      	mov	r0, r4
 8007722:	6859      	ldr	r1, [r3, #4]
 8007724:	f001 fd6e 	bl	8009204 <_Balloc>
 8007728:	9005      	str	r0, [sp, #20]
 800772a:	2800      	cmp	r0, #0
 800772c:	f43f af0c 	beq.w	8007548 <_strtod_l+0x490>
 8007730:	9b07      	ldr	r3, [sp, #28]
 8007732:	691a      	ldr	r2, [r3, #16]
 8007734:	3202      	adds	r2, #2
 8007736:	f103 010c 	add.w	r1, r3, #12
 800773a:	0092      	lsls	r2, r2, #2
 800773c:	300c      	adds	r0, #12
 800773e:	f001 fd53 	bl	80091e8 <memcpy>
 8007742:	ec4b ab10 	vmov	d0, sl, fp
 8007746:	aa1a      	add	r2, sp, #104	; 0x68
 8007748:	a919      	add	r1, sp, #100	; 0x64
 800774a:	4620      	mov	r0, r4
 800774c:	f002 f948 	bl	80099e0 <__d2b>
 8007750:	ec4b ab18 	vmov	d8, sl, fp
 8007754:	9018      	str	r0, [sp, #96]	; 0x60
 8007756:	2800      	cmp	r0, #0
 8007758:	f43f aef6 	beq.w	8007548 <_strtod_l+0x490>
 800775c:	2101      	movs	r1, #1
 800775e:	4620      	mov	r0, r4
 8007760:	f001 fe92 	bl	8009488 <__i2b>
 8007764:	4606      	mov	r6, r0
 8007766:	2800      	cmp	r0, #0
 8007768:	f43f aeee 	beq.w	8007548 <_strtod_l+0x490>
 800776c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800776e:	9904      	ldr	r1, [sp, #16]
 8007770:	2b00      	cmp	r3, #0
 8007772:	bfab      	itete	ge
 8007774:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8007776:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8007778:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800777a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800777e:	bfac      	ite	ge
 8007780:	eb03 0902 	addge.w	r9, r3, r2
 8007784:	1ad7      	sublt	r7, r2, r3
 8007786:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007788:	eba3 0801 	sub.w	r8, r3, r1
 800778c:	4490      	add	r8, r2
 800778e:	4ba1      	ldr	r3, [pc, #644]	; (8007a14 <_strtod_l+0x95c>)
 8007790:	f108 38ff 	add.w	r8, r8, #4294967295
 8007794:	4598      	cmp	r8, r3
 8007796:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800779a:	f280 80c7 	bge.w	800792c <_strtod_l+0x874>
 800779e:	eba3 0308 	sub.w	r3, r3, r8
 80077a2:	2b1f      	cmp	r3, #31
 80077a4:	eba2 0203 	sub.w	r2, r2, r3
 80077a8:	f04f 0101 	mov.w	r1, #1
 80077ac:	f300 80b1 	bgt.w	8007912 <_strtod_l+0x85a>
 80077b0:	fa01 f303 	lsl.w	r3, r1, r3
 80077b4:	930d      	str	r3, [sp, #52]	; 0x34
 80077b6:	2300      	movs	r3, #0
 80077b8:	9308      	str	r3, [sp, #32]
 80077ba:	eb09 0802 	add.w	r8, r9, r2
 80077be:	9b04      	ldr	r3, [sp, #16]
 80077c0:	45c1      	cmp	r9, r8
 80077c2:	4417      	add	r7, r2
 80077c4:	441f      	add	r7, r3
 80077c6:	464b      	mov	r3, r9
 80077c8:	bfa8      	it	ge
 80077ca:	4643      	movge	r3, r8
 80077cc:	42bb      	cmp	r3, r7
 80077ce:	bfa8      	it	ge
 80077d0:	463b      	movge	r3, r7
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	bfc2      	ittt	gt
 80077d6:	eba8 0803 	subgt.w	r8, r8, r3
 80077da:	1aff      	subgt	r7, r7, r3
 80077dc:	eba9 0903 	subgt.w	r9, r9, r3
 80077e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	dd17      	ble.n	8007816 <_strtod_l+0x75e>
 80077e6:	4631      	mov	r1, r6
 80077e8:	461a      	mov	r2, r3
 80077ea:	4620      	mov	r0, r4
 80077ec:	f001 ff0c 	bl	8009608 <__pow5mult>
 80077f0:	4606      	mov	r6, r0
 80077f2:	2800      	cmp	r0, #0
 80077f4:	f43f aea8 	beq.w	8007548 <_strtod_l+0x490>
 80077f8:	4601      	mov	r1, r0
 80077fa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80077fc:	4620      	mov	r0, r4
 80077fe:	f001 fe59 	bl	80094b4 <__multiply>
 8007802:	900b      	str	r0, [sp, #44]	; 0x2c
 8007804:	2800      	cmp	r0, #0
 8007806:	f43f ae9f 	beq.w	8007548 <_strtod_l+0x490>
 800780a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800780c:	4620      	mov	r0, r4
 800780e:	f001 fd39 	bl	8009284 <_Bfree>
 8007812:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007814:	9318      	str	r3, [sp, #96]	; 0x60
 8007816:	f1b8 0f00 	cmp.w	r8, #0
 800781a:	f300 808c 	bgt.w	8007936 <_strtod_l+0x87e>
 800781e:	9b06      	ldr	r3, [sp, #24]
 8007820:	2b00      	cmp	r3, #0
 8007822:	dd08      	ble.n	8007836 <_strtod_l+0x77e>
 8007824:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007826:	9905      	ldr	r1, [sp, #20]
 8007828:	4620      	mov	r0, r4
 800782a:	f001 feed 	bl	8009608 <__pow5mult>
 800782e:	9005      	str	r0, [sp, #20]
 8007830:	2800      	cmp	r0, #0
 8007832:	f43f ae89 	beq.w	8007548 <_strtod_l+0x490>
 8007836:	2f00      	cmp	r7, #0
 8007838:	dd08      	ble.n	800784c <_strtod_l+0x794>
 800783a:	9905      	ldr	r1, [sp, #20]
 800783c:	463a      	mov	r2, r7
 800783e:	4620      	mov	r0, r4
 8007840:	f001 ff3c 	bl	80096bc <__lshift>
 8007844:	9005      	str	r0, [sp, #20]
 8007846:	2800      	cmp	r0, #0
 8007848:	f43f ae7e 	beq.w	8007548 <_strtod_l+0x490>
 800784c:	f1b9 0f00 	cmp.w	r9, #0
 8007850:	dd08      	ble.n	8007864 <_strtod_l+0x7ac>
 8007852:	4631      	mov	r1, r6
 8007854:	464a      	mov	r2, r9
 8007856:	4620      	mov	r0, r4
 8007858:	f001 ff30 	bl	80096bc <__lshift>
 800785c:	4606      	mov	r6, r0
 800785e:	2800      	cmp	r0, #0
 8007860:	f43f ae72 	beq.w	8007548 <_strtod_l+0x490>
 8007864:	9a05      	ldr	r2, [sp, #20]
 8007866:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007868:	4620      	mov	r0, r4
 800786a:	f001 ffb3 	bl	80097d4 <__mdiff>
 800786e:	4605      	mov	r5, r0
 8007870:	2800      	cmp	r0, #0
 8007872:	f43f ae69 	beq.w	8007548 <_strtod_l+0x490>
 8007876:	68c3      	ldr	r3, [r0, #12]
 8007878:	930b      	str	r3, [sp, #44]	; 0x2c
 800787a:	2300      	movs	r3, #0
 800787c:	60c3      	str	r3, [r0, #12]
 800787e:	4631      	mov	r1, r6
 8007880:	f001 ff8c 	bl	800979c <__mcmp>
 8007884:	2800      	cmp	r0, #0
 8007886:	da60      	bge.n	800794a <_strtod_l+0x892>
 8007888:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800788a:	ea53 030a 	orrs.w	r3, r3, sl
 800788e:	f040 8082 	bne.w	8007996 <_strtod_l+0x8de>
 8007892:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007896:	2b00      	cmp	r3, #0
 8007898:	d17d      	bne.n	8007996 <_strtod_l+0x8de>
 800789a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800789e:	0d1b      	lsrs	r3, r3, #20
 80078a0:	051b      	lsls	r3, r3, #20
 80078a2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80078a6:	d976      	bls.n	8007996 <_strtod_l+0x8de>
 80078a8:	696b      	ldr	r3, [r5, #20]
 80078aa:	b913      	cbnz	r3, 80078b2 <_strtod_l+0x7fa>
 80078ac:	692b      	ldr	r3, [r5, #16]
 80078ae:	2b01      	cmp	r3, #1
 80078b0:	dd71      	ble.n	8007996 <_strtod_l+0x8de>
 80078b2:	4629      	mov	r1, r5
 80078b4:	2201      	movs	r2, #1
 80078b6:	4620      	mov	r0, r4
 80078b8:	f001 ff00 	bl	80096bc <__lshift>
 80078bc:	4631      	mov	r1, r6
 80078be:	4605      	mov	r5, r0
 80078c0:	f001 ff6c 	bl	800979c <__mcmp>
 80078c4:	2800      	cmp	r0, #0
 80078c6:	dd66      	ble.n	8007996 <_strtod_l+0x8de>
 80078c8:	9904      	ldr	r1, [sp, #16]
 80078ca:	4a53      	ldr	r2, [pc, #332]	; (8007a18 <_strtod_l+0x960>)
 80078cc:	465b      	mov	r3, fp
 80078ce:	2900      	cmp	r1, #0
 80078d0:	f000 8081 	beq.w	80079d6 <_strtod_l+0x91e>
 80078d4:	ea02 010b 	and.w	r1, r2, fp
 80078d8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80078dc:	dc7b      	bgt.n	80079d6 <_strtod_l+0x91e>
 80078de:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80078e2:	f77f aea9 	ble.w	8007638 <_strtod_l+0x580>
 80078e6:	4b4d      	ldr	r3, [pc, #308]	; (8007a1c <_strtod_l+0x964>)
 80078e8:	4650      	mov	r0, sl
 80078ea:	4659      	mov	r1, fp
 80078ec:	2200      	movs	r2, #0
 80078ee:	f7f8 fe83 	bl	80005f8 <__aeabi_dmul>
 80078f2:	460b      	mov	r3, r1
 80078f4:	4303      	orrs	r3, r0
 80078f6:	bf08      	it	eq
 80078f8:	2322      	moveq	r3, #34	; 0x22
 80078fa:	4682      	mov	sl, r0
 80078fc:	468b      	mov	fp, r1
 80078fe:	bf08      	it	eq
 8007900:	6023      	streq	r3, [r4, #0]
 8007902:	e62b      	b.n	800755c <_strtod_l+0x4a4>
 8007904:	f04f 32ff 	mov.w	r2, #4294967295
 8007908:	fa02 f303 	lsl.w	r3, r2, r3
 800790c:	ea03 0a0a 	and.w	sl, r3, sl
 8007910:	e6e3      	b.n	80076da <_strtod_l+0x622>
 8007912:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8007916:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800791a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800791e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8007922:	fa01 f308 	lsl.w	r3, r1, r8
 8007926:	9308      	str	r3, [sp, #32]
 8007928:	910d      	str	r1, [sp, #52]	; 0x34
 800792a:	e746      	b.n	80077ba <_strtod_l+0x702>
 800792c:	2300      	movs	r3, #0
 800792e:	9308      	str	r3, [sp, #32]
 8007930:	2301      	movs	r3, #1
 8007932:	930d      	str	r3, [sp, #52]	; 0x34
 8007934:	e741      	b.n	80077ba <_strtod_l+0x702>
 8007936:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007938:	4642      	mov	r2, r8
 800793a:	4620      	mov	r0, r4
 800793c:	f001 febe 	bl	80096bc <__lshift>
 8007940:	9018      	str	r0, [sp, #96]	; 0x60
 8007942:	2800      	cmp	r0, #0
 8007944:	f47f af6b 	bne.w	800781e <_strtod_l+0x766>
 8007948:	e5fe      	b.n	8007548 <_strtod_l+0x490>
 800794a:	465f      	mov	r7, fp
 800794c:	d16e      	bne.n	8007a2c <_strtod_l+0x974>
 800794e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007950:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007954:	b342      	cbz	r2, 80079a8 <_strtod_l+0x8f0>
 8007956:	4a32      	ldr	r2, [pc, #200]	; (8007a20 <_strtod_l+0x968>)
 8007958:	4293      	cmp	r3, r2
 800795a:	d128      	bne.n	80079ae <_strtod_l+0x8f6>
 800795c:	9b04      	ldr	r3, [sp, #16]
 800795e:	4651      	mov	r1, sl
 8007960:	b1eb      	cbz	r3, 800799e <_strtod_l+0x8e6>
 8007962:	4b2d      	ldr	r3, [pc, #180]	; (8007a18 <_strtod_l+0x960>)
 8007964:	403b      	ands	r3, r7
 8007966:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800796a:	f04f 32ff 	mov.w	r2, #4294967295
 800796e:	d819      	bhi.n	80079a4 <_strtod_l+0x8ec>
 8007970:	0d1b      	lsrs	r3, r3, #20
 8007972:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007976:	fa02 f303 	lsl.w	r3, r2, r3
 800797a:	4299      	cmp	r1, r3
 800797c:	d117      	bne.n	80079ae <_strtod_l+0x8f6>
 800797e:	4b29      	ldr	r3, [pc, #164]	; (8007a24 <_strtod_l+0x96c>)
 8007980:	429f      	cmp	r7, r3
 8007982:	d102      	bne.n	800798a <_strtod_l+0x8d2>
 8007984:	3101      	adds	r1, #1
 8007986:	f43f addf 	beq.w	8007548 <_strtod_l+0x490>
 800798a:	4b23      	ldr	r3, [pc, #140]	; (8007a18 <_strtod_l+0x960>)
 800798c:	403b      	ands	r3, r7
 800798e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8007992:	f04f 0a00 	mov.w	sl, #0
 8007996:	9b04      	ldr	r3, [sp, #16]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d1a4      	bne.n	80078e6 <_strtod_l+0x82e>
 800799c:	e5de      	b.n	800755c <_strtod_l+0x4a4>
 800799e:	f04f 33ff 	mov.w	r3, #4294967295
 80079a2:	e7ea      	b.n	800797a <_strtod_l+0x8c2>
 80079a4:	4613      	mov	r3, r2
 80079a6:	e7e8      	b.n	800797a <_strtod_l+0x8c2>
 80079a8:	ea53 030a 	orrs.w	r3, r3, sl
 80079ac:	d08c      	beq.n	80078c8 <_strtod_l+0x810>
 80079ae:	9b08      	ldr	r3, [sp, #32]
 80079b0:	b1db      	cbz	r3, 80079ea <_strtod_l+0x932>
 80079b2:	423b      	tst	r3, r7
 80079b4:	d0ef      	beq.n	8007996 <_strtod_l+0x8de>
 80079b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079b8:	9a04      	ldr	r2, [sp, #16]
 80079ba:	4650      	mov	r0, sl
 80079bc:	4659      	mov	r1, fp
 80079be:	b1c3      	cbz	r3, 80079f2 <_strtod_l+0x93a>
 80079c0:	f7ff fb5e 	bl	8007080 <sulp>
 80079c4:	4602      	mov	r2, r0
 80079c6:	460b      	mov	r3, r1
 80079c8:	ec51 0b18 	vmov	r0, r1, d8
 80079cc:	f7f8 fc5e 	bl	800028c <__adddf3>
 80079d0:	4682      	mov	sl, r0
 80079d2:	468b      	mov	fp, r1
 80079d4:	e7df      	b.n	8007996 <_strtod_l+0x8de>
 80079d6:	4013      	ands	r3, r2
 80079d8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80079dc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80079e0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80079e4:	f04f 3aff 	mov.w	sl, #4294967295
 80079e8:	e7d5      	b.n	8007996 <_strtod_l+0x8de>
 80079ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80079ec:	ea13 0f0a 	tst.w	r3, sl
 80079f0:	e7e0      	b.n	80079b4 <_strtod_l+0x8fc>
 80079f2:	f7ff fb45 	bl	8007080 <sulp>
 80079f6:	4602      	mov	r2, r0
 80079f8:	460b      	mov	r3, r1
 80079fa:	ec51 0b18 	vmov	r0, r1, d8
 80079fe:	f7f8 fc43 	bl	8000288 <__aeabi_dsub>
 8007a02:	2200      	movs	r2, #0
 8007a04:	2300      	movs	r3, #0
 8007a06:	4682      	mov	sl, r0
 8007a08:	468b      	mov	fp, r1
 8007a0a:	f7f9 f85d 	bl	8000ac8 <__aeabi_dcmpeq>
 8007a0e:	2800      	cmp	r0, #0
 8007a10:	d0c1      	beq.n	8007996 <_strtod_l+0x8de>
 8007a12:	e611      	b.n	8007638 <_strtod_l+0x580>
 8007a14:	fffffc02 	.word	0xfffffc02
 8007a18:	7ff00000 	.word	0x7ff00000
 8007a1c:	39500000 	.word	0x39500000
 8007a20:	000fffff 	.word	0x000fffff
 8007a24:	7fefffff 	.word	0x7fefffff
 8007a28:	0800b480 	.word	0x0800b480
 8007a2c:	4631      	mov	r1, r6
 8007a2e:	4628      	mov	r0, r5
 8007a30:	f002 f832 	bl	8009a98 <__ratio>
 8007a34:	ec59 8b10 	vmov	r8, r9, d0
 8007a38:	ee10 0a10 	vmov	r0, s0
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007a42:	4649      	mov	r1, r9
 8007a44:	f7f9 f854 	bl	8000af0 <__aeabi_dcmple>
 8007a48:	2800      	cmp	r0, #0
 8007a4a:	d07a      	beq.n	8007b42 <_strtod_l+0xa8a>
 8007a4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d04a      	beq.n	8007ae8 <_strtod_l+0xa30>
 8007a52:	4b95      	ldr	r3, [pc, #596]	; (8007ca8 <_strtod_l+0xbf0>)
 8007a54:	2200      	movs	r2, #0
 8007a56:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007a5a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8007ca8 <_strtod_l+0xbf0>
 8007a5e:	f04f 0800 	mov.w	r8, #0
 8007a62:	4b92      	ldr	r3, [pc, #584]	; (8007cac <_strtod_l+0xbf4>)
 8007a64:	403b      	ands	r3, r7
 8007a66:	930d      	str	r3, [sp, #52]	; 0x34
 8007a68:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007a6a:	4b91      	ldr	r3, [pc, #580]	; (8007cb0 <_strtod_l+0xbf8>)
 8007a6c:	429a      	cmp	r2, r3
 8007a6e:	f040 80b0 	bne.w	8007bd2 <_strtod_l+0xb1a>
 8007a72:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007a76:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8007a7a:	ec4b ab10 	vmov	d0, sl, fp
 8007a7e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007a82:	f001 ff31 	bl	80098e8 <__ulp>
 8007a86:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007a8a:	ec53 2b10 	vmov	r2, r3, d0
 8007a8e:	f7f8 fdb3 	bl	80005f8 <__aeabi_dmul>
 8007a92:	4652      	mov	r2, sl
 8007a94:	465b      	mov	r3, fp
 8007a96:	f7f8 fbf9 	bl	800028c <__adddf3>
 8007a9a:	460b      	mov	r3, r1
 8007a9c:	4983      	ldr	r1, [pc, #524]	; (8007cac <_strtod_l+0xbf4>)
 8007a9e:	4a85      	ldr	r2, [pc, #532]	; (8007cb4 <_strtod_l+0xbfc>)
 8007aa0:	4019      	ands	r1, r3
 8007aa2:	4291      	cmp	r1, r2
 8007aa4:	4682      	mov	sl, r0
 8007aa6:	d960      	bls.n	8007b6a <_strtod_l+0xab2>
 8007aa8:	ee18 3a90 	vmov	r3, s17
 8007aac:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d104      	bne.n	8007abe <_strtod_l+0xa06>
 8007ab4:	ee18 3a10 	vmov	r3, s16
 8007ab8:	3301      	adds	r3, #1
 8007aba:	f43f ad45 	beq.w	8007548 <_strtod_l+0x490>
 8007abe:	f8df b200 	ldr.w	fp, [pc, #512]	; 8007cc0 <_strtod_l+0xc08>
 8007ac2:	f04f 3aff 	mov.w	sl, #4294967295
 8007ac6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007ac8:	4620      	mov	r0, r4
 8007aca:	f001 fbdb 	bl	8009284 <_Bfree>
 8007ace:	9905      	ldr	r1, [sp, #20]
 8007ad0:	4620      	mov	r0, r4
 8007ad2:	f001 fbd7 	bl	8009284 <_Bfree>
 8007ad6:	4631      	mov	r1, r6
 8007ad8:	4620      	mov	r0, r4
 8007ada:	f001 fbd3 	bl	8009284 <_Bfree>
 8007ade:	4629      	mov	r1, r5
 8007ae0:	4620      	mov	r0, r4
 8007ae2:	f001 fbcf 	bl	8009284 <_Bfree>
 8007ae6:	e61a      	b.n	800771e <_strtod_l+0x666>
 8007ae8:	f1ba 0f00 	cmp.w	sl, #0
 8007aec:	d11b      	bne.n	8007b26 <_strtod_l+0xa6e>
 8007aee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007af2:	b9f3      	cbnz	r3, 8007b32 <_strtod_l+0xa7a>
 8007af4:	4b6c      	ldr	r3, [pc, #432]	; (8007ca8 <_strtod_l+0xbf0>)
 8007af6:	2200      	movs	r2, #0
 8007af8:	4640      	mov	r0, r8
 8007afa:	4649      	mov	r1, r9
 8007afc:	f7f8 ffee 	bl	8000adc <__aeabi_dcmplt>
 8007b00:	b9d0      	cbnz	r0, 8007b38 <_strtod_l+0xa80>
 8007b02:	4640      	mov	r0, r8
 8007b04:	4649      	mov	r1, r9
 8007b06:	4b6c      	ldr	r3, [pc, #432]	; (8007cb8 <_strtod_l+0xc00>)
 8007b08:	2200      	movs	r2, #0
 8007b0a:	f7f8 fd75 	bl	80005f8 <__aeabi_dmul>
 8007b0e:	4680      	mov	r8, r0
 8007b10:	4689      	mov	r9, r1
 8007b12:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007b16:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8007b1a:	9315      	str	r3, [sp, #84]	; 0x54
 8007b1c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007b20:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007b24:	e79d      	b.n	8007a62 <_strtod_l+0x9aa>
 8007b26:	f1ba 0f01 	cmp.w	sl, #1
 8007b2a:	d102      	bne.n	8007b32 <_strtod_l+0xa7a>
 8007b2c:	2f00      	cmp	r7, #0
 8007b2e:	f43f ad83 	beq.w	8007638 <_strtod_l+0x580>
 8007b32:	4b62      	ldr	r3, [pc, #392]	; (8007cbc <_strtod_l+0xc04>)
 8007b34:	2200      	movs	r2, #0
 8007b36:	e78e      	b.n	8007a56 <_strtod_l+0x99e>
 8007b38:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8007cb8 <_strtod_l+0xc00>
 8007b3c:	f04f 0800 	mov.w	r8, #0
 8007b40:	e7e7      	b.n	8007b12 <_strtod_l+0xa5a>
 8007b42:	4b5d      	ldr	r3, [pc, #372]	; (8007cb8 <_strtod_l+0xc00>)
 8007b44:	4640      	mov	r0, r8
 8007b46:	4649      	mov	r1, r9
 8007b48:	2200      	movs	r2, #0
 8007b4a:	f7f8 fd55 	bl	80005f8 <__aeabi_dmul>
 8007b4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b50:	4680      	mov	r8, r0
 8007b52:	4689      	mov	r9, r1
 8007b54:	b933      	cbnz	r3, 8007b64 <_strtod_l+0xaac>
 8007b56:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007b5a:	900e      	str	r0, [sp, #56]	; 0x38
 8007b5c:	930f      	str	r3, [sp, #60]	; 0x3c
 8007b5e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007b62:	e7dd      	b.n	8007b20 <_strtod_l+0xa68>
 8007b64:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8007b68:	e7f9      	b.n	8007b5e <_strtod_l+0xaa6>
 8007b6a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8007b6e:	9b04      	ldr	r3, [sp, #16]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d1a8      	bne.n	8007ac6 <_strtod_l+0xa0e>
 8007b74:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007b78:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007b7a:	0d1b      	lsrs	r3, r3, #20
 8007b7c:	051b      	lsls	r3, r3, #20
 8007b7e:	429a      	cmp	r2, r3
 8007b80:	d1a1      	bne.n	8007ac6 <_strtod_l+0xa0e>
 8007b82:	4640      	mov	r0, r8
 8007b84:	4649      	mov	r1, r9
 8007b86:	f7f9 f897 	bl	8000cb8 <__aeabi_d2lz>
 8007b8a:	f7f8 fd07 	bl	800059c <__aeabi_l2d>
 8007b8e:	4602      	mov	r2, r0
 8007b90:	460b      	mov	r3, r1
 8007b92:	4640      	mov	r0, r8
 8007b94:	4649      	mov	r1, r9
 8007b96:	f7f8 fb77 	bl	8000288 <__aeabi_dsub>
 8007b9a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007b9c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007ba0:	ea43 030a 	orr.w	r3, r3, sl
 8007ba4:	4313      	orrs	r3, r2
 8007ba6:	4680      	mov	r8, r0
 8007ba8:	4689      	mov	r9, r1
 8007baa:	d055      	beq.n	8007c58 <_strtod_l+0xba0>
 8007bac:	a336      	add	r3, pc, #216	; (adr r3, 8007c88 <_strtod_l+0xbd0>)
 8007bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bb2:	f7f8 ff93 	bl	8000adc <__aeabi_dcmplt>
 8007bb6:	2800      	cmp	r0, #0
 8007bb8:	f47f acd0 	bne.w	800755c <_strtod_l+0x4a4>
 8007bbc:	a334      	add	r3, pc, #208	; (adr r3, 8007c90 <_strtod_l+0xbd8>)
 8007bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bc2:	4640      	mov	r0, r8
 8007bc4:	4649      	mov	r1, r9
 8007bc6:	f7f8 ffa7 	bl	8000b18 <__aeabi_dcmpgt>
 8007bca:	2800      	cmp	r0, #0
 8007bcc:	f43f af7b 	beq.w	8007ac6 <_strtod_l+0xa0e>
 8007bd0:	e4c4      	b.n	800755c <_strtod_l+0x4a4>
 8007bd2:	9b04      	ldr	r3, [sp, #16]
 8007bd4:	b333      	cbz	r3, 8007c24 <_strtod_l+0xb6c>
 8007bd6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007bd8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007bdc:	d822      	bhi.n	8007c24 <_strtod_l+0xb6c>
 8007bde:	a32e      	add	r3, pc, #184	; (adr r3, 8007c98 <_strtod_l+0xbe0>)
 8007be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007be4:	4640      	mov	r0, r8
 8007be6:	4649      	mov	r1, r9
 8007be8:	f7f8 ff82 	bl	8000af0 <__aeabi_dcmple>
 8007bec:	b1a0      	cbz	r0, 8007c18 <_strtod_l+0xb60>
 8007bee:	4649      	mov	r1, r9
 8007bf0:	4640      	mov	r0, r8
 8007bf2:	f7f8 ffd9 	bl	8000ba8 <__aeabi_d2uiz>
 8007bf6:	2801      	cmp	r0, #1
 8007bf8:	bf38      	it	cc
 8007bfa:	2001      	movcc	r0, #1
 8007bfc:	f7f8 fc82 	bl	8000504 <__aeabi_ui2d>
 8007c00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c02:	4680      	mov	r8, r0
 8007c04:	4689      	mov	r9, r1
 8007c06:	bb23      	cbnz	r3, 8007c52 <_strtod_l+0xb9a>
 8007c08:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007c0c:	9010      	str	r0, [sp, #64]	; 0x40
 8007c0e:	9311      	str	r3, [sp, #68]	; 0x44
 8007c10:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007c14:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007c18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c1a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007c1c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007c20:	1a9b      	subs	r3, r3, r2
 8007c22:	9309      	str	r3, [sp, #36]	; 0x24
 8007c24:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007c28:	eeb0 0a48 	vmov.f32	s0, s16
 8007c2c:	eef0 0a68 	vmov.f32	s1, s17
 8007c30:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007c34:	f001 fe58 	bl	80098e8 <__ulp>
 8007c38:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007c3c:	ec53 2b10 	vmov	r2, r3, d0
 8007c40:	f7f8 fcda 	bl	80005f8 <__aeabi_dmul>
 8007c44:	ec53 2b18 	vmov	r2, r3, d8
 8007c48:	f7f8 fb20 	bl	800028c <__adddf3>
 8007c4c:	4682      	mov	sl, r0
 8007c4e:	468b      	mov	fp, r1
 8007c50:	e78d      	b.n	8007b6e <_strtod_l+0xab6>
 8007c52:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8007c56:	e7db      	b.n	8007c10 <_strtod_l+0xb58>
 8007c58:	a311      	add	r3, pc, #68	; (adr r3, 8007ca0 <_strtod_l+0xbe8>)
 8007c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c5e:	f7f8 ff3d 	bl	8000adc <__aeabi_dcmplt>
 8007c62:	e7b2      	b.n	8007bca <_strtod_l+0xb12>
 8007c64:	2300      	movs	r3, #0
 8007c66:	930a      	str	r3, [sp, #40]	; 0x28
 8007c68:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007c6a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007c6c:	6013      	str	r3, [r2, #0]
 8007c6e:	f7ff ba6b 	b.w	8007148 <_strtod_l+0x90>
 8007c72:	2a65      	cmp	r2, #101	; 0x65
 8007c74:	f43f ab5f 	beq.w	8007336 <_strtod_l+0x27e>
 8007c78:	2a45      	cmp	r2, #69	; 0x45
 8007c7a:	f43f ab5c 	beq.w	8007336 <_strtod_l+0x27e>
 8007c7e:	2301      	movs	r3, #1
 8007c80:	f7ff bb94 	b.w	80073ac <_strtod_l+0x2f4>
 8007c84:	f3af 8000 	nop.w
 8007c88:	94a03595 	.word	0x94a03595
 8007c8c:	3fdfffff 	.word	0x3fdfffff
 8007c90:	35afe535 	.word	0x35afe535
 8007c94:	3fe00000 	.word	0x3fe00000
 8007c98:	ffc00000 	.word	0xffc00000
 8007c9c:	41dfffff 	.word	0x41dfffff
 8007ca0:	94a03595 	.word	0x94a03595
 8007ca4:	3fcfffff 	.word	0x3fcfffff
 8007ca8:	3ff00000 	.word	0x3ff00000
 8007cac:	7ff00000 	.word	0x7ff00000
 8007cb0:	7fe00000 	.word	0x7fe00000
 8007cb4:	7c9fffff 	.word	0x7c9fffff
 8007cb8:	3fe00000 	.word	0x3fe00000
 8007cbc:	bff00000 	.word	0xbff00000
 8007cc0:	7fefffff 	.word	0x7fefffff

08007cc4 <_strtod_r>:
 8007cc4:	4b01      	ldr	r3, [pc, #4]	; (8007ccc <_strtod_r+0x8>)
 8007cc6:	f7ff b9f7 	b.w	80070b8 <_strtod_l>
 8007cca:	bf00      	nop
 8007ccc:	20000074 	.word	0x20000074

08007cd0 <_strtol_l.constprop.0>:
 8007cd0:	2b01      	cmp	r3, #1
 8007cd2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cd6:	d001      	beq.n	8007cdc <_strtol_l.constprop.0+0xc>
 8007cd8:	2b24      	cmp	r3, #36	; 0x24
 8007cda:	d906      	bls.n	8007cea <_strtol_l.constprop.0+0x1a>
 8007cdc:	f7fe fafe 	bl	80062dc <__errno>
 8007ce0:	2316      	movs	r3, #22
 8007ce2:	6003      	str	r3, [r0, #0]
 8007ce4:	2000      	movs	r0, #0
 8007ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cea:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007dd0 <_strtol_l.constprop.0+0x100>
 8007cee:	460d      	mov	r5, r1
 8007cf0:	462e      	mov	r6, r5
 8007cf2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007cf6:	f814 700c 	ldrb.w	r7, [r4, ip]
 8007cfa:	f017 0708 	ands.w	r7, r7, #8
 8007cfe:	d1f7      	bne.n	8007cf0 <_strtol_l.constprop.0+0x20>
 8007d00:	2c2d      	cmp	r4, #45	; 0x2d
 8007d02:	d132      	bne.n	8007d6a <_strtol_l.constprop.0+0x9a>
 8007d04:	782c      	ldrb	r4, [r5, #0]
 8007d06:	2701      	movs	r7, #1
 8007d08:	1cb5      	adds	r5, r6, #2
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d05b      	beq.n	8007dc6 <_strtol_l.constprop.0+0xf6>
 8007d0e:	2b10      	cmp	r3, #16
 8007d10:	d109      	bne.n	8007d26 <_strtol_l.constprop.0+0x56>
 8007d12:	2c30      	cmp	r4, #48	; 0x30
 8007d14:	d107      	bne.n	8007d26 <_strtol_l.constprop.0+0x56>
 8007d16:	782c      	ldrb	r4, [r5, #0]
 8007d18:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007d1c:	2c58      	cmp	r4, #88	; 0x58
 8007d1e:	d14d      	bne.n	8007dbc <_strtol_l.constprop.0+0xec>
 8007d20:	786c      	ldrb	r4, [r5, #1]
 8007d22:	2310      	movs	r3, #16
 8007d24:	3502      	adds	r5, #2
 8007d26:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007d2a:	f108 38ff 	add.w	r8, r8, #4294967295
 8007d2e:	f04f 0c00 	mov.w	ip, #0
 8007d32:	fbb8 f9f3 	udiv	r9, r8, r3
 8007d36:	4666      	mov	r6, ip
 8007d38:	fb03 8a19 	mls	sl, r3, r9, r8
 8007d3c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8007d40:	f1be 0f09 	cmp.w	lr, #9
 8007d44:	d816      	bhi.n	8007d74 <_strtol_l.constprop.0+0xa4>
 8007d46:	4674      	mov	r4, lr
 8007d48:	42a3      	cmp	r3, r4
 8007d4a:	dd24      	ble.n	8007d96 <_strtol_l.constprop.0+0xc6>
 8007d4c:	f1bc 0f00 	cmp.w	ip, #0
 8007d50:	db1e      	blt.n	8007d90 <_strtol_l.constprop.0+0xc0>
 8007d52:	45b1      	cmp	r9, r6
 8007d54:	d31c      	bcc.n	8007d90 <_strtol_l.constprop.0+0xc0>
 8007d56:	d101      	bne.n	8007d5c <_strtol_l.constprop.0+0x8c>
 8007d58:	45a2      	cmp	sl, r4
 8007d5a:	db19      	blt.n	8007d90 <_strtol_l.constprop.0+0xc0>
 8007d5c:	fb06 4603 	mla	r6, r6, r3, r4
 8007d60:	f04f 0c01 	mov.w	ip, #1
 8007d64:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007d68:	e7e8      	b.n	8007d3c <_strtol_l.constprop.0+0x6c>
 8007d6a:	2c2b      	cmp	r4, #43	; 0x2b
 8007d6c:	bf04      	itt	eq
 8007d6e:	782c      	ldrbeq	r4, [r5, #0]
 8007d70:	1cb5      	addeq	r5, r6, #2
 8007d72:	e7ca      	b.n	8007d0a <_strtol_l.constprop.0+0x3a>
 8007d74:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8007d78:	f1be 0f19 	cmp.w	lr, #25
 8007d7c:	d801      	bhi.n	8007d82 <_strtol_l.constprop.0+0xb2>
 8007d7e:	3c37      	subs	r4, #55	; 0x37
 8007d80:	e7e2      	b.n	8007d48 <_strtol_l.constprop.0+0x78>
 8007d82:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8007d86:	f1be 0f19 	cmp.w	lr, #25
 8007d8a:	d804      	bhi.n	8007d96 <_strtol_l.constprop.0+0xc6>
 8007d8c:	3c57      	subs	r4, #87	; 0x57
 8007d8e:	e7db      	b.n	8007d48 <_strtol_l.constprop.0+0x78>
 8007d90:	f04f 3cff 	mov.w	ip, #4294967295
 8007d94:	e7e6      	b.n	8007d64 <_strtol_l.constprop.0+0x94>
 8007d96:	f1bc 0f00 	cmp.w	ip, #0
 8007d9a:	da05      	bge.n	8007da8 <_strtol_l.constprop.0+0xd8>
 8007d9c:	2322      	movs	r3, #34	; 0x22
 8007d9e:	6003      	str	r3, [r0, #0]
 8007da0:	4646      	mov	r6, r8
 8007da2:	b942      	cbnz	r2, 8007db6 <_strtol_l.constprop.0+0xe6>
 8007da4:	4630      	mov	r0, r6
 8007da6:	e79e      	b.n	8007ce6 <_strtol_l.constprop.0+0x16>
 8007da8:	b107      	cbz	r7, 8007dac <_strtol_l.constprop.0+0xdc>
 8007daa:	4276      	negs	r6, r6
 8007dac:	2a00      	cmp	r2, #0
 8007dae:	d0f9      	beq.n	8007da4 <_strtol_l.constprop.0+0xd4>
 8007db0:	f1bc 0f00 	cmp.w	ip, #0
 8007db4:	d000      	beq.n	8007db8 <_strtol_l.constprop.0+0xe8>
 8007db6:	1e69      	subs	r1, r5, #1
 8007db8:	6011      	str	r1, [r2, #0]
 8007dba:	e7f3      	b.n	8007da4 <_strtol_l.constprop.0+0xd4>
 8007dbc:	2430      	movs	r4, #48	; 0x30
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d1b1      	bne.n	8007d26 <_strtol_l.constprop.0+0x56>
 8007dc2:	2308      	movs	r3, #8
 8007dc4:	e7af      	b.n	8007d26 <_strtol_l.constprop.0+0x56>
 8007dc6:	2c30      	cmp	r4, #48	; 0x30
 8007dc8:	d0a5      	beq.n	8007d16 <_strtol_l.constprop.0+0x46>
 8007dca:	230a      	movs	r3, #10
 8007dcc:	e7ab      	b.n	8007d26 <_strtol_l.constprop.0+0x56>
 8007dce:	bf00      	nop
 8007dd0:	0800b4a9 	.word	0x0800b4a9

08007dd4 <_strtol_r>:
 8007dd4:	f7ff bf7c 	b.w	8007cd0 <_strtol_l.constprop.0>

08007dd8 <quorem>:
 8007dd8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ddc:	6903      	ldr	r3, [r0, #16]
 8007dde:	690c      	ldr	r4, [r1, #16]
 8007de0:	42a3      	cmp	r3, r4
 8007de2:	4607      	mov	r7, r0
 8007de4:	f2c0 8081 	blt.w	8007eea <quorem+0x112>
 8007de8:	3c01      	subs	r4, #1
 8007dea:	f101 0814 	add.w	r8, r1, #20
 8007dee:	f100 0514 	add.w	r5, r0, #20
 8007df2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007df6:	9301      	str	r3, [sp, #4]
 8007df8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007dfc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007e00:	3301      	adds	r3, #1
 8007e02:	429a      	cmp	r2, r3
 8007e04:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007e08:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007e0c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007e10:	d331      	bcc.n	8007e76 <quorem+0x9e>
 8007e12:	f04f 0e00 	mov.w	lr, #0
 8007e16:	4640      	mov	r0, r8
 8007e18:	46ac      	mov	ip, r5
 8007e1a:	46f2      	mov	sl, lr
 8007e1c:	f850 2b04 	ldr.w	r2, [r0], #4
 8007e20:	b293      	uxth	r3, r2
 8007e22:	fb06 e303 	mla	r3, r6, r3, lr
 8007e26:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007e2a:	b29b      	uxth	r3, r3
 8007e2c:	ebaa 0303 	sub.w	r3, sl, r3
 8007e30:	f8dc a000 	ldr.w	sl, [ip]
 8007e34:	0c12      	lsrs	r2, r2, #16
 8007e36:	fa13 f38a 	uxtah	r3, r3, sl
 8007e3a:	fb06 e202 	mla	r2, r6, r2, lr
 8007e3e:	9300      	str	r3, [sp, #0]
 8007e40:	9b00      	ldr	r3, [sp, #0]
 8007e42:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007e46:	b292      	uxth	r2, r2
 8007e48:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007e4c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007e50:	f8bd 3000 	ldrh.w	r3, [sp]
 8007e54:	4581      	cmp	r9, r0
 8007e56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007e5a:	f84c 3b04 	str.w	r3, [ip], #4
 8007e5e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007e62:	d2db      	bcs.n	8007e1c <quorem+0x44>
 8007e64:	f855 300b 	ldr.w	r3, [r5, fp]
 8007e68:	b92b      	cbnz	r3, 8007e76 <quorem+0x9e>
 8007e6a:	9b01      	ldr	r3, [sp, #4]
 8007e6c:	3b04      	subs	r3, #4
 8007e6e:	429d      	cmp	r5, r3
 8007e70:	461a      	mov	r2, r3
 8007e72:	d32e      	bcc.n	8007ed2 <quorem+0xfa>
 8007e74:	613c      	str	r4, [r7, #16]
 8007e76:	4638      	mov	r0, r7
 8007e78:	f001 fc90 	bl	800979c <__mcmp>
 8007e7c:	2800      	cmp	r0, #0
 8007e7e:	db24      	blt.n	8007eca <quorem+0xf2>
 8007e80:	3601      	adds	r6, #1
 8007e82:	4628      	mov	r0, r5
 8007e84:	f04f 0c00 	mov.w	ip, #0
 8007e88:	f858 2b04 	ldr.w	r2, [r8], #4
 8007e8c:	f8d0 e000 	ldr.w	lr, [r0]
 8007e90:	b293      	uxth	r3, r2
 8007e92:	ebac 0303 	sub.w	r3, ip, r3
 8007e96:	0c12      	lsrs	r2, r2, #16
 8007e98:	fa13 f38e 	uxtah	r3, r3, lr
 8007e9c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007ea0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007ea4:	b29b      	uxth	r3, r3
 8007ea6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007eaa:	45c1      	cmp	r9, r8
 8007eac:	f840 3b04 	str.w	r3, [r0], #4
 8007eb0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007eb4:	d2e8      	bcs.n	8007e88 <quorem+0xb0>
 8007eb6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007eba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007ebe:	b922      	cbnz	r2, 8007eca <quorem+0xf2>
 8007ec0:	3b04      	subs	r3, #4
 8007ec2:	429d      	cmp	r5, r3
 8007ec4:	461a      	mov	r2, r3
 8007ec6:	d30a      	bcc.n	8007ede <quorem+0x106>
 8007ec8:	613c      	str	r4, [r7, #16]
 8007eca:	4630      	mov	r0, r6
 8007ecc:	b003      	add	sp, #12
 8007ece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ed2:	6812      	ldr	r2, [r2, #0]
 8007ed4:	3b04      	subs	r3, #4
 8007ed6:	2a00      	cmp	r2, #0
 8007ed8:	d1cc      	bne.n	8007e74 <quorem+0x9c>
 8007eda:	3c01      	subs	r4, #1
 8007edc:	e7c7      	b.n	8007e6e <quorem+0x96>
 8007ede:	6812      	ldr	r2, [r2, #0]
 8007ee0:	3b04      	subs	r3, #4
 8007ee2:	2a00      	cmp	r2, #0
 8007ee4:	d1f0      	bne.n	8007ec8 <quorem+0xf0>
 8007ee6:	3c01      	subs	r4, #1
 8007ee8:	e7eb      	b.n	8007ec2 <quorem+0xea>
 8007eea:	2000      	movs	r0, #0
 8007eec:	e7ee      	b.n	8007ecc <quorem+0xf4>
	...

08007ef0 <_dtoa_r>:
 8007ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ef4:	ed2d 8b04 	vpush	{d8-d9}
 8007ef8:	ec57 6b10 	vmov	r6, r7, d0
 8007efc:	b093      	sub	sp, #76	; 0x4c
 8007efe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007f00:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007f04:	9106      	str	r1, [sp, #24]
 8007f06:	ee10 aa10 	vmov	sl, s0
 8007f0a:	4604      	mov	r4, r0
 8007f0c:	9209      	str	r2, [sp, #36]	; 0x24
 8007f0e:	930c      	str	r3, [sp, #48]	; 0x30
 8007f10:	46bb      	mov	fp, r7
 8007f12:	b975      	cbnz	r5, 8007f32 <_dtoa_r+0x42>
 8007f14:	2010      	movs	r0, #16
 8007f16:	f001 f94d 	bl	80091b4 <malloc>
 8007f1a:	4602      	mov	r2, r0
 8007f1c:	6260      	str	r0, [r4, #36]	; 0x24
 8007f1e:	b920      	cbnz	r0, 8007f2a <_dtoa_r+0x3a>
 8007f20:	4ba7      	ldr	r3, [pc, #668]	; (80081c0 <_dtoa_r+0x2d0>)
 8007f22:	21ea      	movs	r1, #234	; 0xea
 8007f24:	48a7      	ldr	r0, [pc, #668]	; (80081c4 <_dtoa_r+0x2d4>)
 8007f26:	f002 f8bd 	bl	800a0a4 <__assert_func>
 8007f2a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007f2e:	6005      	str	r5, [r0, #0]
 8007f30:	60c5      	str	r5, [r0, #12]
 8007f32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f34:	6819      	ldr	r1, [r3, #0]
 8007f36:	b151      	cbz	r1, 8007f4e <_dtoa_r+0x5e>
 8007f38:	685a      	ldr	r2, [r3, #4]
 8007f3a:	604a      	str	r2, [r1, #4]
 8007f3c:	2301      	movs	r3, #1
 8007f3e:	4093      	lsls	r3, r2
 8007f40:	608b      	str	r3, [r1, #8]
 8007f42:	4620      	mov	r0, r4
 8007f44:	f001 f99e 	bl	8009284 <_Bfree>
 8007f48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	601a      	str	r2, [r3, #0]
 8007f4e:	1e3b      	subs	r3, r7, #0
 8007f50:	bfaa      	itet	ge
 8007f52:	2300      	movge	r3, #0
 8007f54:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007f58:	f8c8 3000 	strge.w	r3, [r8]
 8007f5c:	4b9a      	ldr	r3, [pc, #616]	; (80081c8 <_dtoa_r+0x2d8>)
 8007f5e:	bfbc      	itt	lt
 8007f60:	2201      	movlt	r2, #1
 8007f62:	f8c8 2000 	strlt.w	r2, [r8]
 8007f66:	ea33 030b 	bics.w	r3, r3, fp
 8007f6a:	d11b      	bne.n	8007fa4 <_dtoa_r+0xb4>
 8007f6c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007f6e:	f242 730f 	movw	r3, #9999	; 0x270f
 8007f72:	6013      	str	r3, [r2, #0]
 8007f74:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007f78:	4333      	orrs	r3, r6
 8007f7a:	f000 8592 	beq.w	8008aa2 <_dtoa_r+0xbb2>
 8007f7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007f80:	b963      	cbnz	r3, 8007f9c <_dtoa_r+0xac>
 8007f82:	4b92      	ldr	r3, [pc, #584]	; (80081cc <_dtoa_r+0x2dc>)
 8007f84:	e022      	b.n	8007fcc <_dtoa_r+0xdc>
 8007f86:	4b92      	ldr	r3, [pc, #584]	; (80081d0 <_dtoa_r+0x2e0>)
 8007f88:	9301      	str	r3, [sp, #4]
 8007f8a:	3308      	adds	r3, #8
 8007f8c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007f8e:	6013      	str	r3, [r2, #0]
 8007f90:	9801      	ldr	r0, [sp, #4]
 8007f92:	b013      	add	sp, #76	; 0x4c
 8007f94:	ecbd 8b04 	vpop	{d8-d9}
 8007f98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f9c:	4b8b      	ldr	r3, [pc, #556]	; (80081cc <_dtoa_r+0x2dc>)
 8007f9e:	9301      	str	r3, [sp, #4]
 8007fa0:	3303      	adds	r3, #3
 8007fa2:	e7f3      	b.n	8007f8c <_dtoa_r+0x9c>
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	4650      	mov	r0, sl
 8007faa:	4659      	mov	r1, fp
 8007fac:	f7f8 fd8c 	bl	8000ac8 <__aeabi_dcmpeq>
 8007fb0:	ec4b ab19 	vmov	d9, sl, fp
 8007fb4:	4680      	mov	r8, r0
 8007fb6:	b158      	cbz	r0, 8007fd0 <_dtoa_r+0xe0>
 8007fb8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007fba:	2301      	movs	r3, #1
 8007fbc:	6013      	str	r3, [r2, #0]
 8007fbe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	f000 856b 	beq.w	8008a9c <_dtoa_r+0xbac>
 8007fc6:	4883      	ldr	r0, [pc, #524]	; (80081d4 <_dtoa_r+0x2e4>)
 8007fc8:	6018      	str	r0, [r3, #0]
 8007fca:	1e43      	subs	r3, r0, #1
 8007fcc:	9301      	str	r3, [sp, #4]
 8007fce:	e7df      	b.n	8007f90 <_dtoa_r+0xa0>
 8007fd0:	ec4b ab10 	vmov	d0, sl, fp
 8007fd4:	aa10      	add	r2, sp, #64	; 0x40
 8007fd6:	a911      	add	r1, sp, #68	; 0x44
 8007fd8:	4620      	mov	r0, r4
 8007fda:	f001 fd01 	bl	80099e0 <__d2b>
 8007fde:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007fe2:	ee08 0a10 	vmov	s16, r0
 8007fe6:	2d00      	cmp	r5, #0
 8007fe8:	f000 8084 	beq.w	80080f4 <_dtoa_r+0x204>
 8007fec:	ee19 3a90 	vmov	r3, s19
 8007ff0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007ff4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007ff8:	4656      	mov	r6, sl
 8007ffa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007ffe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008002:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008006:	4b74      	ldr	r3, [pc, #464]	; (80081d8 <_dtoa_r+0x2e8>)
 8008008:	2200      	movs	r2, #0
 800800a:	4630      	mov	r0, r6
 800800c:	4639      	mov	r1, r7
 800800e:	f7f8 f93b 	bl	8000288 <__aeabi_dsub>
 8008012:	a365      	add	r3, pc, #404	; (adr r3, 80081a8 <_dtoa_r+0x2b8>)
 8008014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008018:	f7f8 faee 	bl	80005f8 <__aeabi_dmul>
 800801c:	a364      	add	r3, pc, #400	; (adr r3, 80081b0 <_dtoa_r+0x2c0>)
 800801e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008022:	f7f8 f933 	bl	800028c <__adddf3>
 8008026:	4606      	mov	r6, r0
 8008028:	4628      	mov	r0, r5
 800802a:	460f      	mov	r7, r1
 800802c:	f7f8 fa7a 	bl	8000524 <__aeabi_i2d>
 8008030:	a361      	add	r3, pc, #388	; (adr r3, 80081b8 <_dtoa_r+0x2c8>)
 8008032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008036:	f7f8 fadf 	bl	80005f8 <__aeabi_dmul>
 800803a:	4602      	mov	r2, r0
 800803c:	460b      	mov	r3, r1
 800803e:	4630      	mov	r0, r6
 8008040:	4639      	mov	r1, r7
 8008042:	f7f8 f923 	bl	800028c <__adddf3>
 8008046:	4606      	mov	r6, r0
 8008048:	460f      	mov	r7, r1
 800804a:	f7f8 fd85 	bl	8000b58 <__aeabi_d2iz>
 800804e:	2200      	movs	r2, #0
 8008050:	9000      	str	r0, [sp, #0]
 8008052:	2300      	movs	r3, #0
 8008054:	4630      	mov	r0, r6
 8008056:	4639      	mov	r1, r7
 8008058:	f7f8 fd40 	bl	8000adc <__aeabi_dcmplt>
 800805c:	b150      	cbz	r0, 8008074 <_dtoa_r+0x184>
 800805e:	9800      	ldr	r0, [sp, #0]
 8008060:	f7f8 fa60 	bl	8000524 <__aeabi_i2d>
 8008064:	4632      	mov	r2, r6
 8008066:	463b      	mov	r3, r7
 8008068:	f7f8 fd2e 	bl	8000ac8 <__aeabi_dcmpeq>
 800806c:	b910      	cbnz	r0, 8008074 <_dtoa_r+0x184>
 800806e:	9b00      	ldr	r3, [sp, #0]
 8008070:	3b01      	subs	r3, #1
 8008072:	9300      	str	r3, [sp, #0]
 8008074:	9b00      	ldr	r3, [sp, #0]
 8008076:	2b16      	cmp	r3, #22
 8008078:	d85a      	bhi.n	8008130 <_dtoa_r+0x240>
 800807a:	9a00      	ldr	r2, [sp, #0]
 800807c:	4b57      	ldr	r3, [pc, #348]	; (80081dc <_dtoa_r+0x2ec>)
 800807e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008086:	ec51 0b19 	vmov	r0, r1, d9
 800808a:	f7f8 fd27 	bl	8000adc <__aeabi_dcmplt>
 800808e:	2800      	cmp	r0, #0
 8008090:	d050      	beq.n	8008134 <_dtoa_r+0x244>
 8008092:	9b00      	ldr	r3, [sp, #0]
 8008094:	3b01      	subs	r3, #1
 8008096:	9300      	str	r3, [sp, #0]
 8008098:	2300      	movs	r3, #0
 800809a:	930b      	str	r3, [sp, #44]	; 0x2c
 800809c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800809e:	1b5d      	subs	r5, r3, r5
 80080a0:	1e6b      	subs	r3, r5, #1
 80080a2:	9305      	str	r3, [sp, #20]
 80080a4:	bf45      	ittet	mi
 80080a6:	f1c5 0301 	rsbmi	r3, r5, #1
 80080aa:	9304      	strmi	r3, [sp, #16]
 80080ac:	2300      	movpl	r3, #0
 80080ae:	2300      	movmi	r3, #0
 80080b0:	bf4c      	ite	mi
 80080b2:	9305      	strmi	r3, [sp, #20]
 80080b4:	9304      	strpl	r3, [sp, #16]
 80080b6:	9b00      	ldr	r3, [sp, #0]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	db3d      	blt.n	8008138 <_dtoa_r+0x248>
 80080bc:	9b05      	ldr	r3, [sp, #20]
 80080be:	9a00      	ldr	r2, [sp, #0]
 80080c0:	920a      	str	r2, [sp, #40]	; 0x28
 80080c2:	4413      	add	r3, r2
 80080c4:	9305      	str	r3, [sp, #20]
 80080c6:	2300      	movs	r3, #0
 80080c8:	9307      	str	r3, [sp, #28]
 80080ca:	9b06      	ldr	r3, [sp, #24]
 80080cc:	2b09      	cmp	r3, #9
 80080ce:	f200 8089 	bhi.w	80081e4 <_dtoa_r+0x2f4>
 80080d2:	2b05      	cmp	r3, #5
 80080d4:	bfc4      	itt	gt
 80080d6:	3b04      	subgt	r3, #4
 80080d8:	9306      	strgt	r3, [sp, #24]
 80080da:	9b06      	ldr	r3, [sp, #24]
 80080dc:	f1a3 0302 	sub.w	r3, r3, #2
 80080e0:	bfcc      	ite	gt
 80080e2:	2500      	movgt	r5, #0
 80080e4:	2501      	movle	r5, #1
 80080e6:	2b03      	cmp	r3, #3
 80080e8:	f200 8087 	bhi.w	80081fa <_dtoa_r+0x30a>
 80080ec:	e8df f003 	tbb	[pc, r3]
 80080f0:	59383a2d 	.word	0x59383a2d
 80080f4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80080f8:	441d      	add	r5, r3
 80080fa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80080fe:	2b20      	cmp	r3, #32
 8008100:	bfc1      	itttt	gt
 8008102:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008106:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800810a:	fa0b f303 	lslgt.w	r3, fp, r3
 800810e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008112:	bfda      	itte	le
 8008114:	f1c3 0320 	rsble	r3, r3, #32
 8008118:	fa06 f003 	lslle.w	r0, r6, r3
 800811c:	4318      	orrgt	r0, r3
 800811e:	f7f8 f9f1 	bl	8000504 <__aeabi_ui2d>
 8008122:	2301      	movs	r3, #1
 8008124:	4606      	mov	r6, r0
 8008126:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800812a:	3d01      	subs	r5, #1
 800812c:	930e      	str	r3, [sp, #56]	; 0x38
 800812e:	e76a      	b.n	8008006 <_dtoa_r+0x116>
 8008130:	2301      	movs	r3, #1
 8008132:	e7b2      	b.n	800809a <_dtoa_r+0x1aa>
 8008134:	900b      	str	r0, [sp, #44]	; 0x2c
 8008136:	e7b1      	b.n	800809c <_dtoa_r+0x1ac>
 8008138:	9b04      	ldr	r3, [sp, #16]
 800813a:	9a00      	ldr	r2, [sp, #0]
 800813c:	1a9b      	subs	r3, r3, r2
 800813e:	9304      	str	r3, [sp, #16]
 8008140:	4253      	negs	r3, r2
 8008142:	9307      	str	r3, [sp, #28]
 8008144:	2300      	movs	r3, #0
 8008146:	930a      	str	r3, [sp, #40]	; 0x28
 8008148:	e7bf      	b.n	80080ca <_dtoa_r+0x1da>
 800814a:	2300      	movs	r3, #0
 800814c:	9308      	str	r3, [sp, #32]
 800814e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008150:	2b00      	cmp	r3, #0
 8008152:	dc55      	bgt.n	8008200 <_dtoa_r+0x310>
 8008154:	2301      	movs	r3, #1
 8008156:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800815a:	461a      	mov	r2, r3
 800815c:	9209      	str	r2, [sp, #36]	; 0x24
 800815e:	e00c      	b.n	800817a <_dtoa_r+0x28a>
 8008160:	2301      	movs	r3, #1
 8008162:	e7f3      	b.n	800814c <_dtoa_r+0x25c>
 8008164:	2300      	movs	r3, #0
 8008166:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008168:	9308      	str	r3, [sp, #32]
 800816a:	9b00      	ldr	r3, [sp, #0]
 800816c:	4413      	add	r3, r2
 800816e:	9302      	str	r3, [sp, #8]
 8008170:	3301      	adds	r3, #1
 8008172:	2b01      	cmp	r3, #1
 8008174:	9303      	str	r3, [sp, #12]
 8008176:	bfb8      	it	lt
 8008178:	2301      	movlt	r3, #1
 800817a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800817c:	2200      	movs	r2, #0
 800817e:	6042      	str	r2, [r0, #4]
 8008180:	2204      	movs	r2, #4
 8008182:	f102 0614 	add.w	r6, r2, #20
 8008186:	429e      	cmp	r6, r3
 8008188:	6841      	ldr	r1, [r0, #4]
 800818a:	d93d      	bls.n	8008208 <_dtoa_r+0x318>
 800818c:	4620      	mov	r0, r4
 800818e:	f001 f839 	bl	8009204 <_Balloc>
 8008192:	9001      	str	r0, [sp, #4]
 8008194:	2800      	cmp	r0, #0
 8008196:	d13b      	bne.n	8008210 <_dtoa_r+0x320>
 8008198:	4b11      	ldr	r3, [pc, #68]	; (80081e0 <_dtoa_r+0x2f0>)
 800819a:	4602      	mov	r2, r0
 800819c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80081a0:	e6c0      	b.n	8007f24 <_dtoa_r+0x34>
 80081a2:	2301      	movs	r3, #1
 80081a4:	e7df      	b.n	8008166 <_dtoa_r+0x276>
 80081a6:	bf00      	nop
 80081a8:	636f4361 	.word	0x636f4361
 80081ac:	3fd287a7 	.word	0x3fd287a7
 80081b0:	8b60c8b3 	.word	0x8b60c8b3
 80081b4:	3fc68a28 	.word	0x3fc68a28
 80081b8:	509f79fb 	.word	0x509f79fb
 80081bc:	3fd34413 	.word	0x3fd34413
 80081c0:	0800b5b6 	.word	0x0800b5b6
 80081c4:	0800b5cd 	.word	0x0800b5cd
 80081c8:	7ff00000 	.word	0x7ff00000
 80081cc:	0800b5b2 	.word	0x0800b5b2
 80081d0:	0800b5a9 	.word	0x0800b5a9
 80081d4:	0800b42d 	.word	0x0800b42d
 80081d8:	3ff80000 	.word	0x3ff80000
 80081dc:	0800b738 	.word	0x0800b738
 80081e0:	0800b628 	.word	0x0800b628
 80081e4:	2501      	movs	r5, #1
 80081e6:	2300      	movs	r3, #0
 80081e8:	9306      	str	r3, [sp, #24]
 80081ea:	9508      	str	r5, [sp, #32]
 80081ec:	f04f 33ff 	mov.w	r3, #4294967295
 80081f0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80081f4:	2200      	movs	r2, #0
 80081f6:	2312      	movs	r3, #18
 80081f8:	e7b0      	b.n	800815c <_dtoa_r+0x26c>
 80081fa:	2301      	movs	r3, #1
 80081fc:	9308      	str	r3, [sp, #32]
 80081fe:	e7f5      	b.n	80081ec <_dtoa_r+0x2fc>
 8008200:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008202:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008206:	e7b8      	b.n	800817a <_dtoa_r+0x28a>
 8008208:	3101      	adds	r1, #1
 800820a:	6041      	str	r1, [r0, #4]
 800820c:	0052      	lsls	r2, r2, #1
 800820e:	e7b8      	b.n	8008182 <_dtoa_r+0x292>
 8008210:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008212:	9a01      	ldr	r2, [sp, #4]
 8008214:	601a      	str	r2, [r3, #0]
 8008216:	9b03      	ldr	r3, [sp, #12]
 8008218:	2b0e      	cmp	r3, #14
 800821a:	f200 809d 	bhi.w	8008358 <_dtoa_r+0x468>
 800821e:	2d00      	cmp	r5, #0
 8008220:	f000 809a 	beq.w	8008358 <_dtoa_r+0x468>
 8008224:	9b00      	ldr	r3, [sp, #0]
 8008226:	2b00      	cmp	r3, #0
 8008228:	dd32      	ble.n	8008290 <_dtoa_r+0x3a0>
 800822a:	4ab7      	ldr	r2, [pc, #732]	; (8008508 <_dtoa_r+0x618>)
 800822c:	f003 030f 	and.w	r3, r3, #15
 8008230:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008234:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008238:	9b00      	ldr	r3, [sp, #0]
 800823a:	05d8      	lsls	r0, r3, #23
 800823c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008240:	d516      	bpl.n	8008270 <_dtoa_r+0x380>
 8008242:	4bb2      	ldr	r3, [pc, #712]	; (800850c <_dtoa_r+0x61c>)
 8008244:	ec51 0b19 	vmov	r0, r1, d9
 8008248:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800824c:	f7f8 fafe 	bl	800084c <__aeabi_ddiv>
 8008250:	f007 070f 	and.w	r7, r7, #15
 8008254:	4682      	mov	sl, r0
 8008256:	468b      	mov	fp, r1
 8008258:	2503      	movs	r5, #3
 800825a:	4eac      	ldr	r6, [pc, #688]	; (800850c <_dtoa_r+0x61c>)
 800825c:	b957      	cbnz	r7, 8008274 <_dtoa_r+0x384>
 800825e:	4642      	mov	r2, r8
 8008260:	464b      	mov	r3, r9
 8008262:	4650      	mov	r0, sl
 8008264:	4659      	mov	r1, fp
 8008266:	f7f8 faf1 	bl	800084c <__aeabi_ddiv>
 800826a:	4682      	mov	sl, r0
 800826c:	468b      	mov	fp, r1
 800826e:	e028      	b.n	80082c2 <_dtoa_r+0x3d2>
 8008270:	2502      	movs	r5, #2
 8008272:	e7f2      	b.n	800825a <_dtoa_r+0x36a>
 8008274:	07f9      	lsls	r1, r7, #31
 8008276:	d508      	bpl.n	800828a <_dtoa_r+0x39a>
 8008278:	4640      	mov	r0, r8
 800827a:	4649      	mov	r1, r9
 800827c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008280:	f7f8 f9ba 	bl	80005f8 <__aeabi_dmul>
 8008284:	3501      	adds	r5, #1
 8008286:	4680      	mov	r8, r0
 8008288:	4689      	mov	r9, r1
 800828a:	107f      	asrs	r7, r7, #1
 800828c:	3608      	adds	r6, #8
 800828e:	e7e5      	b.n	800825c <_dtoa_r+0x36c>
 8008290:	f000 809b 	beq.w	80083ca <_dtoa_r+0x4da>
 8008294:	9b00      	ldr	r3, [sp, #0]
 8008296:	4f9d      	ldr	r7, [pc, #628]	; (800850c <_dtoa_r+0x61c>)
 8008298:	425e      	negs	r6, r3
 800829a:	4b9b      	ldr	r3, [pc, #620]	; (8008508 <_dtoa_r+0x618>)
 800829c:	f006 020f 	and.w	r2, r6, #15
 80082a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80082a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082a8:	ec51 0b19 	vmov	r0, r1, d9
 80082ac:	f7f8 f9a4 	bl	80005f8 <__aeabi_dmul>
 80082b0:	1136      	asrs	r6, r6, #4
 80082b2:	4682      	mov	sl, r0
 80082b4:	468b      	mov	fp, r1
 80082b6:	2300      	movs	r3, #0
 80082b8:	2502      	movs	r5, #2
 80082ba:	2e00      	cmp	r6, #0
 80082bc:	d17a      	bne.n	80083b4 <_dtoa_r+0x4c4>
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d1d3      	bne.n	800826a <_dtoa_r+0x37a>
 80082c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	f000 8082 	beq.w	80083ce <_dtoa_r+0x4de>
 80082ca:	4b91      	ldr	r3, [pc, #580]	; (8008510 <_dtoa_r+0x620>)
 80082cc:	2200      	movs	r2, #0
 80082ce:	4650      	mov	r0, sl
 80082d0:	4659      	mov	r1, fp
 80082d2:	f7f8 fc03 	bl	8000adc <__aeabi_dcmplt>
 80082d6:	2800      	cmp	r0, #0
 80082d8:	d079      	beq.n	80083ce <_dtoa_r+0x4de>
 80082da:	9b03      	ldr	r3, [sp, #12]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d076      	beq.n	80083ce <_dtoa_r+0x4de>
 80082e0:	9b02      	ldr	r3, [sp, #8]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	dd36      	ble.n	8008354 <_dtoa_r+0x464>
 80082e6:	9b00      	ldr	r3, [sp, #0]
 80082e8:	4650      	mov	r0, sl
 80082ea:	4659      	mov	r1, fp
 80082ec:	1e5f      	subs	r7, r3, #1
 80082ee:	2200      	movs	r2, #0
 80082f0:	4b88      	ldr	r3, [pc, #544]	; (8008514 <_dtoa_r+0x624>)
 80082f2:	f7f8 f981 	bl	80005f8 <__aeabi_dmul>
 80082f6:	9e02      	ldr	r6, [sp, #8]
 80082f8:	4682      	mov	sl, r0
 80082fa:	468b      	mov	fp, r1
 80082fc:	3501      	adds	r5, #1
 80082fe:	4628      	mov	r0, r5
 8008300:	f7f8 f910 	bl	8000524 <__aeabi_i2d>
 8008304:	4652      	mov	r2, sl
 8008306:	465b      	mov	r3, fp
 8008308:	f7f8 f976 	bl	80005f8 <__aeabi_dmul>
 800830c:	4b82      	ldr	r3, [pc, #520]	; (8008518 <_dtoa_r+0x628>)
 800830e:	2200      	movs	r2, #0
 8008310:	f7f7 ffbc 	bl	800028c <__adddf3>
 8008314:	46d0      	mov	r8, sl
 8008316:	46d9      	mov	r9, fp
 8008318:	4682      	mov	sl, r0
 800831a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800831e:	2e00      	cmp	r6, #0
 8008320:	d158      	bne.n	80083d4 <_dtoa_r+0x4e4>
 8008322:	4b7e      	ldr	r3, [pc, #504]	; (800851c <_dtoa_r+0x62c>)
 8008324:	2200      	movs	r2, #0
 8008326:	4640      	mov	r0, r8
 8008328:	4649      	mov	r1, r9
 800832a:	f7f7 ffad 	bl	8000288 <__aeabi_dsub>
 800832e:	4652      	mov	r2, sl
 8008330:	465b      	mov	r3, fp
 8008332:	4680      	mov	r8, r0
 8008334:	4689      	mov	r9, r1
 8008336:	f7f8 fbef 	bl	8000b18 <__aeabi_dcmpgt>
 800833a:	2800      	cmp	r0, #0
 800833c:	f040 8295 	bne.w	800886a <_dtoa_r+0x97a>
 8008340:	4652      	mov	r2, sl
 8008342:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008346:	4640      	mov	r0, r8
 8008348:	4649      	mov	r1, r9
 800834a:	f7f8 fbc7 	bl	8000adc <__aeabi_dcmplt>
 800834e:	2800      	cmp	r0, #0
 8008350:	f040 8289 	bne.w	8008866 <_dtoa_r+0x976>
 8008354:	ec5b ab19 	vmov	sl, fp, d9
 8008358:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800835a:	2b00      	cmp	r3, #0
 800835c:	f2c0 8148 	blt.w	80085f0 <_dtoa_r+0x700>
 8008360:	9a00      	ldr	r2, [sp, #0]
 8008362:	2a0e      	cmp	r2, #14
 8008364:	f300 8144 	bgt.w	80085f0 <_dtoa_r+0x700>
 8008368:	4b67      	ldr	r3, [pc, #412]	; (8008508 <_dtoa_r+0x618>)
 800836a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800836e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008372:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008374:	2b00      	cmp	r3, #0
 8008376:	f280 80d5 	bge.w	8008524 <_dtoa_r+0x634>
 800837a:	9b03      	ldr	r3, [sp, #12]
 800837c:	2b00      	cmp	r3, #0
 800837e:	f300 80d1 	bgt.w	8008524 <_dtoa_r+0x634>
 8008382:	f040 826f 	bne.w	8008864 <_dtoa_r+0x974>
 8008386:	4b65      	ldr	r3, [pc, #404]	; (800851c <_dtoa_r+0x62c>)
 8008388:	2200      	movs	r2, #0
 800838a:	4640      	mov	r0, r8
 800838c:	4649      	mov	r1, r9
 800838e:	f7f8 f933 	bl	80005f8 <__aeabi_dmul>
 8008392:	4652      	mov	r2, sl
 8008394:	465b      	mov	r3, fp
 8008396:	f7f8 fbb5 	bl	8000b04 <__aeabi_dcmpge>
 800839a:	9e03      	ldr	r6, [sp, #12]
 800839c:	4637      	mov	r7, r6
 800839e:	2800      	cmp	r0, #0
 80083a0:	f040 8245 	bne.w	800882e <_dtoa_r+0x93e>
 80083a4:	9d01      	ldr	r5, [sp, #4]
 80083a6:	2331      	movs	r3, #49	; 0x31
 80083a8:	f805 3b01 	strb.w	r3, [r5], #1
 80083ac:	9b00      	ldr	r3, [sp, #0]
 80083ae:	3301      	adds	r3, #1
 80083b0:	9300      	str	r3, [sp, #0]
 80083b2:	e240      	b.n	8008836 <_dtoa_r+0x946>
 80083b4:	07f2      	lsls	r2, r6, #31
 80083b6:	d505      	bpl.n	80083c4 <_dtoa_r+0x4d4>
 80083b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80083bc:	f7f8 f91c 	bl	80005f8 <__aeabi_dmul>
 80083c0:	3501      	adds	r5, #1
 80083c2:	2301      	movs	r3, #1
 80083c4:	1076      	asrs	r6, r6, #1
 80083c6:	3708      	adds	r7, #8
 80083c8:	e777      	b.n	80082ba <_dtoa_r+0x3ca>
 80083ca:	2502      	movs	r5, #2
 80083cc:	e779      	b.n	80082c2 <_dtoa_r+0x3d2>
 80083ce:	9f00      	ldr	r7, [sp, #0]
 80083d0:	9e03      	ldr	r6, [sp, #12]
 80083d2:	e794      	b.n	80082fe <_dtoa_r+0x40e>
 80083d4:	9901      	ldr	r1, [sp, #4]
 80083d6:	4b4c      	ldr	r3, [pc, #304]	; (8008508 <_dtoa_r+0x618>)
 80083d8:	4431      	add	r1, r6
 80083da:	910d      	str	r1, [sp, #52]	; 0x34
 80083dc:	9908      	ldr	r1, [sp, #32]
 80083de:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80083e2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80083e6:	2900      	cmp	r1, #0
 80083e8:	d043      	beq.n	8008472 <_dtoa_r+0x582>
 80083ea:	494d      	ldr	r1, [pc, #308]	; (8008520 <_dtoa_r+0x630>)
 80083ec:	2000      	movs	r0, #0
 80083ee:	f7f8 fa2d 	bl	800084c <__aeabi_ddiv>
 80083f2:	4652      	mov	r2, sl
 80083f4:	465b      	mov	r3, fp
 80083f6:	f7f7 ff47 	bl	8000288 <__aeabi_dsub>
 80083fa:	9d01      	ldr	r5, [sp, #4]
 80083fc:	4682      	mov	sl, r0
 80083fe:	468b      	mov	fp, r1
 8008400:	4649      	mov	r1, r9
 8008402:	4640      	mov	r0, r8
 8008404:	f7f8 fba8 	bl	8000b58 <__aeabi_d2iz>
 8008408:	4606      	mov	r6, r0
 800840a:	f7f8 f88b 	bl	8000524 <__aeabi_i2d>
 800840e:	4602      	mov	r2, r0
 8008410:	460b      	mov	r3, r1
 8008412:	4640      	mov	r0, r8
 8008414:	4649      	mov	r1, r9
 8008416:	f7f7 ff37 	bl	8000288 <__aeabi_dsub>
 800841a:	3630      	adds	r6, #48	; 0x30
 800841c:	f805 6b01 	strb.w	r6, [r5], #1
 8008420:	4652      	mov	r2, sl
 8008422:	465b      	mov	r3, fp
 8008424:	4680      	mov	r8, r0
 8008426:	4689      	mov	r9, r1
 8008428:	f7f8 fb58 	bl	8000adc <__aeabi_dcmplt>
 800842c:	2800      	cmp	r0, #0
 800842e:	d163      	bne.n	80084f8 <_dtoa_r+0x608>
 8008430:	4642      	mov	r2, r8
 8008432:	464b      	mov	r3, r9
 8008434:	4936      	ldr	r1, [pc, #216]	; (8008510 <_dtoa_r+0x620>)
 8008436:	2000      	movs	r0, #0
 8008438:	f7f7 ff26 	bl	8000288 <__aeabi_dsub>
 800843c:	4652      	mov	r2, sl
 800843e:	465b      	mov	r3, fp
 8008440:	f7f8 fb4c 	bl	8000adc <__aeabi_dcmplt>
 8008444:	2800      	cmp	r0, #0
 8008446:	f040 80b5 	bne.w	80085b4 <_dtoa_r+0x6c4>
 800844a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800844c:	429d      	cmp	r5, r3
 800844e:	d081      	beq.n	8008354 <_dtoa_r+0x464>
 8008450:	4b30      	ldr	r3, [pc, #192]	; (8008514 <_dtoa_r+0x624>)
 8008452:	2200      	movs	r2, #0
 8008454:	4650      	mov	r0, sl
 8008456:	4659      	mov	r1, fp
 8008458:	f7f8 f8ce 	bl	80005f8 <__aeabi_dmul>
 800845c:	4b2d      	ldr	r3, [pc, #180]	; (8008514 <_dtoa_r+0x624>)
 800845e:	4682      	mov	sl, r0
 8008460:	468b      	mov	fp, r1
 8008462:	4640      	mov	r0, r8
 8008464:	4649      	mov	r1, r9
 8008466:	2200      	movs	r2, #0
 8008468:	f7f8 f8c6 	bl	80005f8 <__aeabi_dmul>
 800846c:	4680      	mov	r8, r0
 800846e:	4689      	mov	r9, r1
 8008470:	e7c6      	b.n	8008400 <_dtoa_r+0x510>
 8008472:	4650      	mov	r0, sl
 8008474:	4659      	mov	r1, fp
 8008476:	f7f8 f8bf 	bl	80005f8 <__aeabi_dmul>
 800847a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800847c:	9d01      	ldr	r5, [sp, #4]
 800847e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008480:	4682      	mov	sl, r0
 8008482:	468b      	mov	fp, r1
 8008484:	4649      	mov	r1, r9
 8008486:	4640      	mov	r0, r8
 8008488:	f7f8 fb66 	bl	8000b58 <__aeabi_d2iz>
 800848c:	4606      	mov	r6, r0
 800848e:	f7f8 f849 	bl	8000524 <__aeabi_i2d>
 8008492:	3630      	adds	r6, #48	; 0x30
 8008494:	4602      	mov	r2, r0
 8008496:	460b      	mov	r3, r1
 8008498:	4640      	mov	r0, r8
 800849a:	4649      	mov	r1, r9
 800849c:	f7f7 fef4 	bl	8000288 <__aeabi_dsub>
 80084a0:	f805 6b01 	strb.w	r6, [r5], #1
 80084a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80084a6:	429d      	cmp	r5, r3
 80084a8:	4680      	mov	r8, r0
 80084aa:	4689      	mov	r9, r1
 80084ac:	f04f 0200 	mov.w	r2, #0
 80084b0:	d124      	bne.n	80084fc <_dtoa_r+0x60c>
 80084b2:	4b1b      	ldr	r3, [pc, #108]	; (8008520 <_dtoa_r+0x630>)
 80084b4:	4650      	mov	r0, sl
 80084b6:	4659      	mov	r1, fp
 80084b8:	f7f7 fee8 	bl	800028c <__adddf3>
 80084bc:	4602      	mov	r2, r0
 80084be:	460b      	mov	r3, r1
 80084c0:	4640      	mov	r0, r8
 80084c2:	4649      	mov	r1, r9
 80084c4:	f7f8 fb28 	bl	8000b18 <__aeabi_dcmpgt>
 80084c8:	2800      	cmp	r0, #0
 80084ca:	d173      	bne.n	80085b4 <_dtoa_r+0x6c4>
 80084cc:	4652      	mov	r2, sl
 80084ce:	465b      	mov	r3, fp
 80084d0:	4913      	ldr	r1, [pc, #76]	; (8008520 <_dtoa_r+0x630>)
 80084d2:	2000      	movs	r0, #0
 80084d4:	f7f7 fed8 	bl	8000288 <__aeabi_dsub>
 80084d8:	4602      	mov	r2, r0
 80084da:	460b      	mov	r3, r1
 80084dc:	4640      	mov	r0, r8
 80084de:	4649      	mov	r1, r9
 80084e0:	f7f8 fafc 	bl	8000adc <__aeabi_dcmplt>
 80084e4:	2800      	cmp	r0, #0
 80084e6:	f43f af35 	beq.w	8008354 <_dtoa_r+0x464>
 80084ea:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80084ec:	1e6b      	subs	r3, r5, #1
 80084ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80084f0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80084f4:	2b30      	cmp	r3, #48	; 0x30
 80084f6:	d0f8      	beq.n	80084ea <_dtoa_r+0x5fa>
 80084f8:	9700      	str	r7, [sp, #0]
 80084fa:	e049      	b.n	8008590 <_dtoa_r+0x6a0>
 80084fc:	4b05      	ldr	r3, [pc, #20]	; (8008514 <_dtoa_r+0x624>)
 80084fe:	f7f8 f87b 	bl	80005f8 <__aeabi_dmul>
 8008502:	4680      	mov	r8, r0
 8008504:	4689      	mov	r9, r1
 8008506:	e7bd      	b.n	8008484 <_dtoa_r+0x594>
 8008508:	0800b738 	.word	0x0800b738
 800850c:	0800b710 	.word	0x0800b710
 8008510:	3ff00000 	.word	0x3ff00000
 8008514:	40240000 	.word	0x40240000
 8008518:	401c0000 	.word	0x401c0000
 800851c:	40140000 	.word	0x40140000
 8008520:	3fe00000 	.word	0x3fe00000
 8008524:	9d01      	ldr	r5, [sp, #4]
 8008526:	4656      	mov	r6, sl
 8008528:	465f      	mov	r7, fp
 800852a:	4642      	mov	r2, r8
 800852c:	464b      	mov	r3, r9
 800852e:	4630      	mov	r0, r6
 8008530:	4639      	mov	r1, r7
 8008532:	f7f8 f98b 	bl	800084c <__aeabi_ddiv>
 8008536:	f7f8 fb0f 	bl	8000b58 <__aeabi_d2iz>
 800853a:	4682      	mov	sl, r0
 800853c:	f7f7 fff2 	bl	8000524 <__aeabi_i2d>
 8008540:	4642      	mov	r2, r8
 8008542:	464b      	mov	r3, r9
 8008544:	f7f8 f858 	bl	80005f8 <__aeabi_dmul>
 8008548:	4602      	mov	r2, r0
 800854a:	460b      	mov	r3, r1
 800854c:	4630      	mov	r0, r6
 800854e:	4639      	mov	r1, r7
 8008550:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8008554:	f7f7 fe98 	bl	8000288 <__aeabi_dsub>
 8008558:	f805 6b01 	strb.w	r6, [r5], #1
 800855c:	9e01      	ldr	r6, [sp, #4]
 800855e:	9f03      	ldr	r7, [sp, #12]
 8008560:	1bae      	subs	r6, r5, r6
 8008562:	42b7      	cmp	r7, r6
 8008564:	4602      	mov	r2, r0
 8008566:	460b      	mov	r3, r1
 8008568:	d135      	bne.n	80085d6 <_dtoa_r+0x6e6>
 800856a:	f7f7 fe8f 	bl	800028c <__adddf3>
 800856e:	4642      	mov	r2, r8
 8008570:	464b      	mov	r3, r9
 8008572:	4606      	mov	r6, r0
 8008574:	460f      	mov	r7, r1
 8008576:	f7f8 facf 	bl	8000b18 <__aeabi_dcmpgt>
 800857a:	b9d0      	cbnz	r0, 80085b2 <_dtoa_r+0x6c2>
 800857c:	4642      	mov	r2, r8
 800857e:	464b      	mov	r3, r9
 8008580:	4630      	mov	r0, r6
 8008582:	4639      	mov	r1, r7
 8008584:	f7f8 faa0 	bl	8000ac8 <__aeabi_dcmpeq>
 8008588:	b110      	cbz	r0, 8008590 <_dtoa_r+0x6a0>
 800858a:	f01a 0f01 	tst.w	sl, #1
 800858e:	d110      	bne.n	80085b2 <_dtoa_r+0x6c2>
 8008590:	4620      	mov	r0, r4
 8008592:	ee18 1a10 	vmov	r1, s16
 8008596:	f000 fe75 	bl	8009284 <_Bfree>
 800859a:	2300      	movs	r3, #0
 800859c:	9800      	ldr	r0, [sp, #0]
 800859e:	702b      	strb	r3, [r5, #0]
 80085a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80085a2:	3001      	adds	r0, #1
 80085a4:	6018      	str	r0, [r3, #0]
 80085a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	f43f acf1 	beq.w	8007f90 <_dtoa_r+0xa0>
 80085ae:	601d      	str	r5, [r3, #0]
 80085b0:	e4ee      	b.n	8007f90 <_dtoa_r+0xa0>
 80085b2:	9f00      	ldr	r7, [sp, #0]
 80085b4:	462b      	mov	r3, r5
 80085b6:	461d      	mov	r5, r3
 80085b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80085bc:	2a39      	cmp	r2, #57	; 0x39
 80085be:	d106      	bne.n	80085ce <_dtoa_r+0x6de>
 80085c0:	9a01      	ldr	r2, [sp, #4]
 80085c2:	429a      	cmp	r2, r3
 80085c4:	d1f7      	bne.n	80085b6 <_dtoa_r+0x6c6>
 80085c6:	9901      	ldr	r1, [sp, #4]
 80085c8:	2230      	movs	r2, #48	; 0x30
 80085ca:	3701      	adds	r7, #1
 80085cc:	700a      	strb	r2, [r1, #0]
 80085ce:	781a      	ldrb	r2, [r3, #0]
 80085d0:	3201      	adds	r2, #1
 80085d2:	701a      	strb	r2, [r3, #0]
 80085d4:	e790      	b.n	80084f8 <_dtoa_r+0x608>
 80085d6:	4ba6      	ldr	r3, [pc, #664]	; (8008870 <_dtoa_r+0x980>)
 80085d8:	2200      	movs	r2, #0
 80085da:	f7f8 f80d 	bl	80005f8 <__aeabi_dmul>
 80085de:	2200      	movs	r2, #0
 80085e0:	2300      	movs	r3, #0
 80085e2:	4606      	mov	r6, r0
 80085e4:	460f      	mov	r7, r1
 80085e6:	f7f8 fa6f 	bl	8000ac8 <__aeabi_dcmpeq>
 80085ea:	2800      	cmp	r0, #0
 80085ec:	d09d      	beq.n	800852a <_dtoa_r+0x63a>
 80085ee:	e7cf      	b.n	8008590 <_dtoa_r+0x6a0>
 80085f0:	9a08      	ldr	r2, [sp, #32]
 80085f2:	2a00      	cmp	r2, #0
 80085f4:	f000 80d7 	beq.w	80087a6 <_dtoa_r+0x8b6>
 80085f8:	9a06      	ldr	r2, [sp, #24]
 80085fa:	2a01      	cmp	r2, #1
 80085fc:	f300 80ba 	bgt.w	8008774 <_dtoa_r+0x884>
 8008600:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008602:	2a00      	cmp	r2, #0
 8008604:	f000 80b2 	beq.w	800876c <_dtoa_r+0x87c>
 8008608:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800860c:	9e07      	ldr	r6, [sp, #28]
 800860e:	9d04      	ldr	r5, [sp, #16]
 8008610:	9a04      	ldr	r2, [sp, #16]
 8008612:	441a      	add	r2, r3
 8008614:	9204      	str	r2, [sp, #16]
 8008616:	9a05      	ldr	r2, [sp, #20]
 8008618:	2101      	movs	r1, #1
 800861a:	441a      	add	r2, r3
 800861c:	4620      	mov	r0, r4
 800861e:	9205      	str	r2, [sp, #20]
 8008620:	f000 ff32 	bl	8009488 <__i2b>
 8008624:	4607      	mov	r7, r0
 8008626:	2d00      	cmp	r5, #0
 8008628:	dd0c      	ble.n	8008644 <_dtoa_r+0x754>
 800862a:	9b05      	ldr	r3, [sp, #20]
 800862c:	2b00      	cmp	r3, #0
 800862e:	dd09      	ble.n	8008644 <_dtoa_r+0x754>
 8008630:	42ab      	cmp	r3, r5
 8008632:	9a04      	ldr	r2, [sp, #16]
 8008634:	bfa8      	it	ge
 8008636:	462b      	movge	r3, r5
 8008638:	1ad2      	subs	r2, r2, r3
 800863a:	9204      	str	r2, [sp, #16]
 800863c:	9a05      	ldr	r2, [sp, #20]
 800863e:	1aed      	subs	r5, r5, r3
 8008640:	1ad3      	subs	r3, r2, r3
 8008642:	9305      	str	r3, [sp, #20]
 8008644:	9b07      	ldr	r3, [sp, #28]
 8008646:	b31b      	cbz	r3, 8008690 <_dtoa_r+0x7a0>
 8008648:	9b08      	ldr	r3, [sp, #32]
 800864a:	2b00      	cmp	r3, #0
 800864c:	f000 80af 	beq.w	80087ae <_dtoa_r+0x8be>
 8008650:	2e00      	cmp	r6, #0
 8008652:	dd13      	ble.n	800867c <_dtoa_r+0x78c>
 8008654:	4639      	mov	r1, r7
 8008656:	4632      	mov	r2, r6
 8008658:	4620      	mov	r0, r4
 800865a:	f000 ffd5 	bl	8009608 <__pow5mult>
 800865e:	ee18 2a10 	vmov	r2, s16
 8008662:	4601      	mov	r1, r0
 8008664:	4607      	mov	r7, r0
 8008666:	4620      	mov	r0, r4
 8008668:	f000 ff24 	bl	80094b4 <__multiply>
 800866c:	ee18 1a10 	vmov	r1, s16
 8008670:	4680      	mov	r8, r0
 8008672:	4620      	mov	r0, r4
 8008674:	f000 fe06 	bl	8009284 <_Bfree>
 8008678:	ee08 8a10 	vmov	s16, r8
 800867c:	9b07      	ldr	r3, [sp, #28]
 800867e:	1b9a      	subs	r2, r3, r6
 8008680:	d006      	beq.n	8008690 <_dtoa_r+0x7a0>
 8008682:	ee18 1a10 	vmov	r1, s16
 8008686:	4620      	mov	r0, r4
 8008688:	f000 ffbe 	bl	8009608 <__pow5mult>
 800868c:	ee08 0a10 	vmov	s16, r0
 8008690:	2101      	movs	r1, #1
 8008692:	4620      	mov	r0, r4
 8008694:	f000 fef8 	bl	8009488 <__i2b>
 8008698:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800869a:	2b00      	cmp	r3, #0
 800869c:	4606      	mov	r6, r0
 800869e:	f340 8088 	ble.w	80087b2 <_dtoa_r+0x8c2>
 80086a2:	461a      	mov	r2, r3
 80086a4:	4601      	mov	r1, r0
 80086a6:	4620      	mov	r0, r4
 80086a8:	f000 ffae 	bl	8009608 <__pow5mult>
 80086ac:	9b06      	ldr	r3, [sp, #24]
 80086ae:	2b01      	cmp	r3, #1
 80086b0:	4606      	mov	r6, r0
 80086b2:	f340 8081 	ble.w	80087b8 <_dtoa_r+0x8c8>
 80086b6:	f04f 0800 	mov.w	r8, #0
 80086ba:	6933      	ldr	r3, [r6, #16]
 80086bc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80086c0:	6918      	ldr	r0, [r3, #16]
 80086c2:	f000 fe91 	bl	80093e8 <__hi0bits>
 80086c6:	f1c0 0020 	rsb	r0, r0, #32
 80086ca:	9b05      	ldr	r3, [sp, #20]
 80086cc:	4418      	add	r0, r3
 80086ce:	f010 001f 	ands.w	r0, r0, #31
 80086d2:	f000 8092 	beq.w	80087fa <_dtoa_r+0x90a>
 80086d6:	f1c0 0320 	rsb	r3, r0, #32
 80086da:	2b04      	cmp	r3, #4
 80086dc:	f340 808a 	ble.w	80087f4 <_dtoa_r+0x904>
 80086e0:	f1c0 001c 	rsb	r0, r0, #28
 80086e4:	9b04      	ldr	r3, [sp, #16]
 80086e6:	4403      	add	r3, r0
 80086e8:	9304      	str	r3, [sp, #16]
 80086ea:	9b05      	ldr	r3, [sp, #20]
 80086ec:	4403      	add	r3, r0
 80086ee:	4405      	add	r5, r0
 80086f0:	9305      	str	r3, [sp, #20]
 80086f2:	9b04      	ldr	r3, [sp, #16]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	dd07      	ble.n	8008708 <_dtoa_r+0x818>
 80086f8:	ee18 1a10 	vmov	r1, s16
 80086fc:	461a      	mov	r2, r3
 80086fe:	4620      	mov	r0, r4
 8008700:	f000 ffdc 	bl	80096bc <__lshift>
 8008704:	ee08 0a10 	vmov	s16, r0
 8008708:	9b05      	ldr	r3, [sp, #20]
 800870a:	2b00      	cmp	r3, #0
 800870c:	dd05      	ble.n	800871a <_dtoa_r+0x82a>
 800870e:	4631      	mov	r1, r6
 8008710:	461a      	mov	r2, r3
 8008712:	4620      	mov	r0, r4
 8008714:	f000 ffd2 	bl	80096bc <__lshift>
 8008718:	4606      	mov	r6, r0
 800871a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800871c:	2b00      	cmp	r3, #0
 800871e:	d06e      	beq.n	80087fe <_dtoa_r+0x90e>
 8008720:	ee18 0a10 	vmov	r0, s16
 8008724:	4631      	mov	r1, r6
 8008726:	f001 f839 	bl	800979c <__mcmp>
 800872a:	2800      	cmp	r0, #0
 800872c:	da67      	bge.n	80087fe <_dtoa_r+0x90e>
 800872e:	9b00      	ldr	r3, [sp, #0]
 8008730:	3b01      	subs	r3, #1
 8008732:	ee18 1a10 	vmov	r1, s16
 8008736:	9300      	str	r3, [sp, #0]
 8008738:	220a      	movs	r2, #10
 800873a:	2300      	movs	r3, #0
 800873c:	4620      	mov	r0, r4
 800873e:	f000 fdc3 	bl	80092c8 <__multadd>
 8008742:	9b08      	ldr	r3, [sp, #32]
 8008744:	ee08 0a10 	vmov	s16, r0
 8008748:	2b00      	cmp	r3, #0
 800874a:	f000 81b1 	beq.w	8008ab0 <_dtoa_r+0xbc0>
 800874e:	2300      	movs	r3, #0
 8008750:	4639      	mov	r1, r7
 8008752:	220a      	movs	r2, #10
 8008754:	4620      	mov	r0, r4
 8008756:	f000 fdb7 	bl	80092c8 <__multadd>
 800875a:	9b02      	ldr	r3, [sp, #8]
 800875c:	2b00      	cmp	r3, #0
 800875e:	4607      	mov	r7, r0
 8008760:	f300 808e 	bgt.w	8008880 <_dtoa_r+0x990>
 8008764:	9b06      	ldr	r3, [sp, #24]
 8008766:	2b02      	cmp	r3, #2
 8008768:	dc51      	bgt.n	800880e <_dtoa_r+0x91e>
 800876a:	e089      	b.n	8008880 <_dtoa_r+0x990>
 800876c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800876e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008772:	e74b      	b.n	800860c <_dtoa_r+0x71c>
 8008774:	9b03      	ldr	r3, [sp, #12]
 8008776:	1e5e      	subs	r6, r3, #1
 8008778:	9b07      	ldr	r3, [sp, #28]
 800877a:	42b3      	cmp	r3, r6
 800877c:	bfbf      	itttt	lt
 800877e:	9b07      	ldrlt	r3, [sp, #28]
 8008780:	9607      	strlt	r6, [sp, #28]
 8008782:	1af2      	sublt	r2, r6, r3
 8008784:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008786:	bfb6      	itet	lt
 8008788:	189b      	addlt	r3, r3, r2
 800878a:	1b9e      	subge	r6, r3, r6
 800878c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800878e:	9b03      	ldr	r3, [sp, #12]
 8008790:	bfb8      	it	lt
 8008792:	2600      	movlt	r6, #0
 8008794:	2b00      	cmp	r3, #0
 8008796:	bfb7      	itett	lt
 8008798:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800879c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80087a0:	1a9d      	sublt	r5, r3, r2
 80087a2:	2300      	movlt	r3, #0
 80087a4:	e734      	b.n	8008610 <_dtoa_r+0x720>
 80087a6:	9e07      	ldr	r6, [sp, #28]
 80087a8:	9d04      	ldr	r5, [sp, #16]
 80087aa:	9f08      	ldr	r7, [sp, #32]
 80087ac:	e73b      	b.n	8008626 <_dtoa_r+0x736>
 80087ae:	9a07      	ldr	r2, [sp, #28]
 80087b0:	e767      	b.n	8008682 <_dtoa_r+0x792>
 80087b2:	9b06      	ldr	r3, [sp, #24]
 80087b4:	2b01      	cmp	r3, #1
 80087b6:	dc18      	bgt.n	80087ea <_dtoa_r+0x8fa>
 80087b8:	f1ba 0f00 	cmp.w	sl, #0
 80087bc:	d115      	bne.n	80087ea <_dtoa_r+0x8fa>
 80087be:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80087c2:	b993      	cbnz	r3, 80087ea <_dtoa_r+0x8fa>
 80087c4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80087c8:	0d1b      	lsrs	r3, r3, #20
 80087ca:	051b      	lsls	r3, r3, #20
 80087cc:	b183      	cbz	r3, 80087f0 <_dtoa_r+0x900>
 80087ce:	9b04      	ldr	r3, [sp, #16]
 80087d0:	3301      	adds	r3, #1
 80087d2:	9304      	str	r3, [sp, #16]
 80087d4:	9b05      	ldr	r3, [sp, #20]
 80087d6:	3301      	adds	r3, #1
 80087d8:	9305      	str	r3, [sp, #20]
 80087da:	f04f 0801 	mov.w	r8, #1
 80087de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	f47f af6a 	bne.w	80086ba <_dtoa_r+0x7ca>
 80087e6:	2001      	movs	r0, #1
 80087e8:	e76f      	b.n	80086ca <_dtoa_r+0x7da>
 80087ea:	f04f 0800 	mov.w	r8, #0
 80087ee:	e7f6      	b.n	80087de <_dtoa_r+0x8ee>
 80087f0:	4698      	mov	r8, r3
 80087f2:	e7f4      	b.n	80087de <_dtoa_r+0x8ee>
 80087f4:	f43f af7d 	beq.w	80086f2 <_dtoa_r+0x802>
 80087f8:	4618      	mov	r0, r3
 80087fa:	301c      	adds	r0, #28
 80087fc:	e772      	b.n	80086e4 <_dtoa_r+0x7f4>
 80087fe:	9b03      	ldr	r3, [sp, #12]
 8008800:	2b00      	cmp	r3, #0
 8008802:	dc37      	bgt.n	8008874 <_dtoa_r+0x984>
 8008804:	9b06      	ldr	r3, [sp, #24]
 8008806:	2b02      	cmp	r3, #2
 8008808:	dd34      	ble.n	8008874 <_dtoa_r+0x984>
 800880a:	9b03      	ldr	r3, [sp, #12]
 800880c:	9302      	str	r3, [sp, #8]
 800880e:	9b02      	ldr	r3, [sp, #8]
 8008810:	b96b      	cbnz	r3, 800882e <_dtoa_r+0x93e>
 8008812:	4631      	mov	r1, r6
 8008814:	2205      	movs	r2, #5
 8008816:	4620      	mov	r0, r4
 8008818:	f000 fd56 	bl	80092c8 <__multadd>
 800881c:	4601      	mov	r1, r0
 800881e:	4606      	mov	r6, r0
 8008820:	ee18 0a10 	vmov	r0, s16
 8008824:	f000 ffba 	bl	800979c <__mcmp>
 8008828:	2800      	cmp	r0, #0
 800882a:	f73f adbb 	bgt.w	80083a4 <_dtoa_r+0x4b4>
 800882e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008830:	9d01      	ldr	r5, [sp, #4]
 8008832:	43db      	mvns	r3, r3
 8008834:	9300      	str	r3, [sp, #0]
 8008836:	f04f 0800 	mov.w	r8, #0
 800883a:	4631      	mov	r1, r6
 800883c:	4620      	mov	r0, r4
 800883e:	f000 fd21 	bl	8009284 <_Bfree>
 8008842:	2f00      	cmp	r7, #0
 8008844:	f43f aea4 	beq.w	8008590 <_dtoa_r+0x6a0>
 8008848:	f1b8 0f00 	cmp.w	r8, #0
 800884c:	d005      	beq.n	800885a <_dtoa_r+0x96a>
 800884e:	45b8      	cmp	r8, r7
 8008850:	d003      	beq.n	800885a <_dtoa_r+0x96a>
 8008852:	4641      	mov	r1, r8
 8008854:	4620      	mov	r0, r4
 8008856:	f000 fd15 	bl	8009284 <_Bfree>
 800885a:	4639      	mov	r1, r7
 800885c:	4620      	mov	r0, r4
 800885e:	f000 fd11 	bl	8009284 <_Bfree>
 8008862:	e695      	b.n	8008590 <_dtoa_r+0x6a0>
 8008864:	2600      	movs	r6, #0
 8008866:	4637      	mov	r7, r6
 8008868:	e7e1      	b.n	800882e <_dtoa_r+0x93e>
 800886a:	9700      	str	r7, [sp, #0]
 800886c:	4637      	mov	r7, r6
 800886e:	e599      	b.n	80083a4 <_dtoa_r+0x4b4>
 8008870:	40240000 	.word	0x40240000
 8008874:	9b08      	ldr	r3, [sp, #32]
 8008876:	2b00      	cmp	r3, #0
 8008878:	f000 80ca 	beq.w	8008a10 <_dtoa_r+0xb20>
 800887c:	9b03      	ldr	r3, [sp, #12]
 800887e:	9302      	str	r3, [sp, #8]
 8008880:	2d00      	cmp	r5, #0
 8008882:	dd05      	ble.n	8008890 <_dtoa_r+0x9a0>
 8008884:	4639      	mov	r1, r7
 8008886:	462a      	mov	r2, r5
 8008888:	4620      	mov	r0, r4
 800888a:	f000 ff17 	bl	80096bc <__lshift>
 800888e:	4607      	mov	r7, r0
 8008890:	f1b8 0f00 	cmp.w	r8, #0
 8008894:	d05b      	beq.n	800894e <_dtoa_r+0xa5e>
 8008896:	6879      	ldr	r1, [r7, #4]
 8008898:	4620      	mov	r0, r4
 800889a:	f000 fcb3 	bl	8009204 <_Balloc>
 800889e:	4605      	mov	r5, r0
 80088a0:	b928      	cbnz	r0, 80088ae <_dtoa_r+0x9be>
 80088a2:	4b87      	ldr	r3, [pc, #540]	; (8008ac0 <_dtoa_r+0xbd0>)
 80088a4:	4602      	mov	r2, r0
 80088a6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80088aa:	f7ff bb3b 	b.w	8007f24 <_dtoa_r+0x34>
 80088ae:	693a      	ldr	r2, [r7, #16]
 80088b0:	3202      	adds	r2, #2
 80088b2:	0092      	lsls	r2, r2, #2
 80088b4:	f107 010c 	add.w	r1, r7, #12
 80088b8:	300c      	adds	r0, #12
 80088ba:	f000 fc95 	bl	80091e8 <memcpy>
 80088be:	2201      	movs	r2, #1
 80088c0:	4629      	mov	r1, r5
 80088c2:	4620      	mov	r0, r4
 80088c4:	f000 fefa 	bl	80096bc <__lshift>
 80088c8:	9b01      	ldr	r3, [sp, #4]
 80088ca:	f103 0901 	add.w	r9, r3, #1
 80088ce:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80088d2:	4413      	add	r3, r2
 80088d4:	9305      	str	r3, [sp, #20]
 80088d6:	f00a 0301 	and.w	r3, sl, #1
 80088da:	46b8      	mov	r8, r7
 80088dc:	9304      	str	r3, [sp, #16]
 80088de:	4607      	mov	r7, r0
 80088e0:	4631      	mov	r1, r6
 80088e2:	ee18 0a10 	vmov	r0, s16
 80088e6:	f7ff fa77 	bl	8007dd8 <quorem>
 80088ea:	4641      	mov	r1, r8
 80088ec:	9002      	str	r0, [sp, #8]
 80088ee:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80088f2:	ee18 0a10 	vmov	r0, s16
 80088f6:	f000 ff51 	bl	800979c <__mcmp>
 80088fa:	463a      	mov	r2, r7
 80088fc:	9003      	str	r0, [sp, #12]
 80088fe:	4631      	mov	r1, r6
 8008900:	4620      	mov	r0, r4
 8008902:	f000 ff67 	bl	80097d4 <__mdiff>
 8008906:	68c2      	ldr	r2, [r0, #12]
 8008908:	f109 3bff 	add.w	fp, r9, #4294967295
 800890c:	4605      	mov	r5, r0
 800890e:	bb02      	cbnz	r2, 8008952 <_dtoa_r+0xa62>
 8008910:	4601      	mov	r1, r0
 8008912:	ee18 0a10 	vmov	r0, s16
 8008916:	f000 ff41 	bl	800979c <__mcmp>
 800891a:	4602      	mov	r2, r0
 800891c:	4629      	mov	r1, r5
 800891e:	4620      	mov	r0, r4
 8008920:	9207      	str	r2, [sp, #28]
 8008922:	f000 fcaf 	bl	8009284 <_Bfree>
 8008926:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800892a:	ea43 0102 	orr.w	r1, r3, r2
 800892e:	9b04      	ldr	r3, [sp, #16]
 8008930:	430b      	orrs	r3, r1
 8008932:	464d      	mov	r5, r9
 8008934:	d10f      	bne.n	8008956 <_dtoa_r+0xa66>
 8008936:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800893a:	d02a      	beq.n	8008992 <_dtoa_r+0xaa2>
 800893c:	9b03      	ldr	r3, [sp, #12]
 800893e:	2b00      	cmp	r3, #0
 8008940:	dd02      	ble.n	8008948 <_dtoa_r+0xa58>
 8008942:	9b02      	ldr	r3, [sp, #8]
 8008944:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008948:	f88b a000 	strb.w	sl, [fp]
 800894c:	e775      	b.n	800883a <_dtoa_r+0x94a>
 800894e:	4638      	mov	r0, r7
 8008950:	e7ba      	b.n	80088c8 <_dtoa_r+0x9d8>
 8008952:	2201      	movs	r2, #1
 8008954:	e7e2      	b.n	800891c <_dtoa_r+0xa2c>
 8008956:	9b03      	ldr	r3, [sp, #12]
 8008958:	2b00      	cmp	r3, #0
 800895a:	db04      	blt.n	8008966 <_dtoa_r+0xa76>
 800895c:	9906      	ldr	r1, [sp, #24]
 800895e:	430b      	orrs	r3, r1
 8008960:	9904      	ldr	r1, [sp, #16]
 8008962:	430b      	orrs	r3, r1
 8008964:	d122      	bne.n	80089ac <_dtoa_r+0xabc>
 8008966:	2a00      	cmp	r2, #0
 8008968:	ddee      	ble.n	8008948 <_dtoa_r+0xa58>
 800896a:	ee18 1a10 	vmov	r1, s16
 800896e:	2201      	movs	r2, #1
 8008970:	4620      	mov	r0, r4
 8008972:	f000 fea3 	bl	80096bc <__lshift>
 8008976:	4631      	mov	r1, r6
 8008978:	ee08 0a10 	vmov	s16, r0
 800897c:	f000 ff0e 	bl	800979c <__mcmp>
 8008980:	2800      	cmp	r0, #0
 8008982:	dc03      	bgt.n	800898c <_dtoa_r+0xa9c>
 8008984:	d1e0      	bne.n	8008948 <_dtoa_r+0xa58>
 8008986:	f01a 0f01 	tst.w	sl, #1
 800898a:	d0dd      	beq.n	8008948 <_dtoa_r+0xa58>
 800898c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008990:	d1d7      	bne.n	8008942 <_dtoa_r+0xa52>
 8008992:	2339      	movs	r3, #57	; 0x39
 8008994:	f88b 3000 	strb.w	r3, [fp]
 8008998:	462b      	mov	r3, r5
 800899a:	461d      	mov	r5, r3
 800899c:	3b01      	subs	r3, #1
 800899e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80089a2:	2a39      	cmp	r2, #57	; 0x39
 80089a4:	d071      	beq.n	8008a8a <_dtoa_r+0xb9a>
 80089a6:	3201      	adds	r2, #1
 80089a8:	701a      	strb	r2, [r3, #0]
 80089aa:	e746      	b.n	800883a <_dtoa_r+0x94a>
 80089ac:	2a00      	cmp	r2, #0
 80089ae:	dd07      	ble.n	80089c0 <_dtoa_r+0xad0>
 80089b0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80089b4:	d0ed      	beq.n	8008992 <_dtoa_r+0xaa2>
 80089b6:	f10a 0301 	add.w	r3, sl, #1
 80089ba:	f88b 3000 	strb.w	r3, [fp]
 80089be:	e73c      	b.n	800883a <_dtoa_r+0x94a>
 80089c0:	9b05      	ldr	r3, [sp, #20]
 80089c2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80089c6:	4599      	cmp	r9, r3
 80089c8:	d047      	beq.n	8008a5a <_dtoa_r+0xb6a>
 80089ca:	ee18 1a10 	vmov	r1, s16
 80089ce:	2300      	movs	r3, #0
 80089d0:	220a      	movs	r2, #10
 80089d2:	4620      	mov	r0, r4
 80089d4:	f000 fc78 	bl	80092c8 <__multadd>
 80089d8:	45b8      	cmp	r8, r7
 80089da:	ee08 0a10 	vmov	s16, r0
 80089de:	f04f 0300 	mov.w	r3, #0
 80089e2:	f04f 020a 	mov.w	r2, #10
 80089e6:	4641      	mov	r1, r8
 80089e8:	4620      	mov	r0, r4
 80089ea:	d106      	bne.n	80089fa <_dtoa_r+0xb0a>
 80089ec:	f000 fc6c 	bl	80092c8 <__multadd>
 80089f0:	4680      	mov	r8, r0
 80089f2:	4607      	mov	r7, r0
 80089f4:	f109 0901 	add.w	r9, r9, #1
 80089f8:	e772      	b.n	80088e0 <_dtoa_r+0x9f0>
 80089fa:	f000 fc65 	bl	80092c8 <__multadd>
 80089fe:	4639      	mov	r1, r7
 8008a00:	4680      	mov	r8, r0
 8008a02:	2300      	movs	r3, #0
 8008a04:	220a      	movs	r2, #10
 8008a06:	4620      	mov	r0, r4
 8008a08:	f000 fc5e 	bl	80092c8 <__multadd>
 8008a0c:	4607      	mov	r7, r0
 8008a0e:	e7f1      	b.n	80089f4 <_dtoa_r+0xb04>
 8008a10:	9b03      	ldr	r3, [sp, #12]
 8008a12:	9302      	str	r3, [sp, #8]
 8008a14:	9d01      	ldr	r5, [sp, #4]
 8008a16:	ee18 0a10 	vmov	r0, s16
 8008a1a:	4631      	mov	r1, r6
 8008a1c:	f7ff f9dc 	bl	8007dd8 <quorem>
 8008a20:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008a24:	9b01      	ldr	r3, [sp, #4]
 8008a26:	f805 ab01 	strb.w	sl, [r5], #1
 8008a2a:	1aea      	subs	r2, r5, r3
 8008a2c:	9b02      	ldr	r3, [sp, #8]
 8008a2e:	4293      	cmp	r3, r2
 8008a30:	dd09      	ble.n	8008a46 <_dtoa_r+0xb56>
 8008a32:	ee18 1a10 	vmov	r1, s16
 8008a36:	2300      	movs	r3, #0
 8008a38:	220a      	movs	r2, #10
 8008a3a:	4620      	mov	r0, r4
 8008a3c:	f000 fc44 	bl	80092c8 <__multadd>
 8008a40:	ee08 0a10 	vmov	s16, r0
 8008a44:	e7e7      	b.n	8008a16 <_dtoa_r+0xb26>
 8008a46:	9b02      	ldr	r3, [sp, #8]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	bfc8      	it	gt
 8008a4c:	461d      	movgt	r5, r3
 8008a4e:	9b01      	ldr	r3, [sp, #4]
 8008a50:	bfd8      	it	le
 8008a52:	2501      	movle	r5, #1
 8008a54:	441d      	add	r5, r3
 8008a56:	f04f 0800 	mov.w	r8, #0
 8008a5a:	ee18 1a10 	vmov	r1, s16
 8008a5e:	2201      	movs	r2, #1
 8008a60:	4620      	mov	r0, r4
 8008a62:	f000 fe2b 	bl	80096bc <__lshift>
 8008a66:	4631      	mov	r1, r6
 8008a68:	ee08 0a10 	vmov	s16, r0
 8008a6c:	f000 fe96 	bl	800979c <__mcmp>
 8008a70:	2800      	cmp	r0, #0
 8008a72:	dc91      	bgt.n	8008998 <_dtoa_r+0xaa8>
 8008a74:	d102      	bne.n	8008a7c <_dtoa_r+0xb8c>
 8008a76:	f01a 0f01 	tst.w	sl, #1
 8008a7a:	d18d      	bne.n	8008998 <_dtoa_r+0xaa8>
 8008a7c:	462b      	mov	r3, r5
 8008a7e:	461d      	mov	r5, r3
 8008a80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008a84:	2a30      	cmp	r2, #48	; 0x30
 8008a86:	d0fa      	beq.n	8008a7e <_dtoa_r+0xb8e>
 8008a88:	e6d7      	b.n	800883a <_dtoa_r+0x94a>
 8008a8a:	9a01      	ldr	r2, [sp, #4]
 8008a8c:	429a      	cmp	r2, r3
 8008a8e:	d184      	bne.n	800899a <_dtoa_r+0xaaa>
 8008a90:	9b00      	ldr	r3, [sp, #0]
 8008a92:	3301      	adds	r3, #1
 8008a94:	9300      	str	r3, [sp, #0]
 8008a96:	2331      	movs	r3, #49	; 0x31
 8008a98:	7013      	strb	r3, [r2, #0]
 8008a9a:	e6ce      	b.n	800883a <_dtoa_r+0x94a>
 8008a9c:	4b09      	ldr	r3, [pc, #36]	; (8008ac4 <_dtoa_r+0xbd4>)
 8008a9e:	f7ff ba95 	b.w	8007fcc <_dtoa_r+0xdc>
 8008aa2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	f47f aa6e 	bne.w	8007f86 <_dtoa_r+0x96>
 8008aaa:	4b07      	ldr	r3, [pc, #28]	; (8008ac8 <_dtoa_r+0xbd8>)
 8008aac:	f7ff ba8e 	b.w	8007fcc <_dtoa_r+0xdc>
 8008ab0:	9b02      	ldr	r3, [sp, #8]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	dcae      	bgt.n	8008a14 <_dtoa_r+0xb24>
 8008ab6:	9b06      	ldr	r3, [sp, #24]
 8008ab8:	2b02      	cmp	r3, #2
 8008aba:	f73f aea8 	bgt.w	800880e <_dtoa_r+0x91e>
 8008abe:	e7a9      	b.n	8008a14 <_dtoa_r+0xb24>
 8008ac0:	0800b628 	.word	0x0800b628
 8008ac4:	0800b42c 	.word	0x0800b42c
 8008ac8:	0800b5a9 	.word	0x0800b5a9

08008acc <rshift>:
 8008acc:	6903      	ldr	r3, [r0, #16]
 8008ace:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008ad2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008ad6:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008ada:	f100 0414 	add.w	r4, r0, #20
 8008ade:	dd45      	ble.n	8008b6c <rshift+0xa0>
 8008ae0:	f011 011f 	ands.w	r1, r1, #31
 8008ae4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008ae8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008aec:	d10c      	bne.n	8008b08 <rshift+0x3c>
 8008aee:	f100 0710 	add.w	r7, r0, #16
 8008af2:	4629      	mov	r1, r5
 8008af4:	42b1      	cmp	r1, r6
 8008af6:	d334      	bcc.n	8008b62 <rshift+0x96>
 8008af8:	1a9b      	subs	r3, r3, r2
 8008afa:	009b      	lsls	r3, r3, #2
 8008afc:	1eea      	subs	r2, r5, #3
 8008afe:	4296      	cmp	r6, r2
 8008b00:	bf38      	it	cc
 8008b02:	2300      	movcc	r3, #0
 8008b04:	4423      	add	r3, r4
 8008b06:	e015      	b.n	8008b34 <rshift+0x68>
 8008b08:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008b0c:	f1c1 0820 	rsb	r8, r1, #32
 8008b10:	40cf      	lsrs	r7, r1
 8008b12:	f105 0e04 	add.w	lr, r5, #4
 8008b16:	46a1      	mov	r9, r4
 8008b18:	4576      	cmp	r6, lr
 8008b1a:	46f4      	mov	ip, lr
 8008b1c:	d815      	bhi.n	8008b4a <rshift+0x7e>
 8008b1e:	1a9a      	subs	r2, r3, r2
 8008b20:	0092      	lsls	r2, r2, #2
 8008b22:	3a04      	subs	r2, #4
 8008b24:	3501      	adds	r5, #1
 8008b26:	42ae      	cmp	r6, r5
 8008b28:	bf38      	it	cc
 8008b2a:	2200      	movcc	r2, #0
 8008b2c:	18a3      	adds	r3, r4, r2
 8008b2e:	50a7      	str	r7, [r4, r2]
 8008b30:	b107      	cbz	r7, 8008b34 <rshift+0x68>
 8008b32:	3304      	adds	r3, #4
 8008b34:	1b1a      	subs	r2, r3, r4
 8008b36:	42a3      	cmp	r3, r4
 8008b38:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008b3c:	bf08      	it	eq
 8008b3e:	2300      	moveq	r3, #0
 8008b40:	6102      	str	r2, [r0, #16]
 8008b42:	bf08      	it	eq
 8008b44:	6143      	streq	r3, [r0, #20]
 8008b46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008b4a:	f8dc c000 	ldr.w	ip, [ip]
 8008b4e:	fa0c fc08 	lsl.w	ip, ip, r8
 8008b52:	ea4c 0707 	orr.w	r7, ip, r7
 8008b56:	f849 7b04 	str.w	r7, [r9], #4
 8008b5a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008b5e:	40cf      	lsrs	r7, r1
 8008b60:	e7da      	b.n	8008b18 <rshift+0x4c>
 8008b62:	f851 cb04 	ldr.w	ip, [r1], #4
 8008b66:	f847 cf04 	str.w	ip, [r7, #4]!
 8008b6a:	e7c3      	b.n	8008af4 <rshift+0x28>
 8008b6c:	4623      	mov	r3, r4
 8008b6e:	e7e1      	b.n	8008b34 <rshift+0x68>

08008b70 <__hexdig_fun>:
 8008b70:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008b74:	2b09      	cmp	r3, #9
 8008b76:	d802      	bhi.n	8008b7e <__hexdig_fun+0xe>
 8008b78:	3820      	subs	r0, #32
 8008b7a:	b2c0      	uxtb	r0, r0
 8008b7c:	4770      	bx	lr
 8008b7e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008b82:	2b05      	cmp	r3, #5
 8008b84:	d801      	bhi.n	8008b8a <__hexdig_fun+0x1a>
 8008b86:	3847      	subs	r0, #71	; 0x47
 8008b88:	e7f7      	b.n	8008b7a <__hexdig_fun+0xa>
 8008b8a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008b8e:	2b05      	cmp	r3, #5
 8008b90:	d801      	bhi.n	8008b96 <__hexdig_fun+0x26>
 8008b92:	3827      	subs	r0, #39	; 0x27
 8008b94:	e7f1      	b.n	8008b7a <__hexdig_fun+0xa>
 8008b96:	2000      	movs	r0, #0
 8008b98:	4770      	bx	lr
	...

08008b9c <__gethex>:
 8008b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ba0:	ed2d 8b02 	vpush	{d8}
 8008ba4:	b089      	sub	sp, #36	; 0x24
 8008ba6:	ee08 0a10 	vmov	s16, r0
 8008baa:	9304      	str	r3, [sp, #16]
 8008bac:	4bb4      	ldr	r3, [pc, #720]	; (8008e80 <__gethex+0x2e4>)
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	9301      	str	r3, [sp, #4]
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	468b      	mov	fp, r1
 8008bb6:	4690      	mov	r8, r2
 8008bb8:	f7f7 fb0a 	bl	80001d0 <strlen>
 8008bbc:	9b01      	ldr	r3, [sp, #4]
 8008bbe:	f8db 2000 	ldr.w	r2, [fp]
 8008bc2:	4403      	add	r3, r0
 8008bc4:	4682      	mov	sl, r0
 8008bc6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008bca:	9305      	str	r3, [sp, #20]
 8008bcc:	1c93      	adds	r3, r2, #2
 8008bce:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008bd2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008bd6:	32fe      	adds	r2, #254	; 0xfe
 8008bd8:	18d1      	adds	r1, r2, r3
 8008bda:	461f      	mov	r7, r3
 8008bdc:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008be0:	9100      	str	r1, [sp, #0]
 8008be2:	2830      	cmp	r0, #48	; 0x30
 8008be4:	d0f8      	beq.n	8008bd8 <__gethex+0x3c>
 8008be6:	f7ff ffc3 	bl	8008b70 <__hexdig_fun>
 8008bea:	4604      	mov	r4, r0
 8008bec:	2800      	cmp	r0, #0
 8008bee:	d13a      	bne.n	8008c66 <__gethex+0xca>
 8008bf0:	9901      	ldr	r1, [sp, #4]
 8008bf2:	4652      	mov	r2, sl
 8008bf4:	4638      	mov	r0, r7
 8008bf6:	f001 fa33 	bl	800a060 <strncmp>
 8008bfa:	4605      	mov	r5, r0
 8008bfc:	2800      	cmp	r0, #0
 8008bfe:	d168      	bne.n	8008cd2 <__gethex+0x136>
 8008c00:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008c04:	eb07 060a 	add.w	r6, r7, sl
 8008c08:	f7ff ffb2 	bl	8008b70 <__hexdig_fun>
 8008c0c:	2800      	cmp	r0, #0
 8008c0e:	d062      	beq.n	8008cd6 <__gethex+0x13a>
 8008c10:	4633      	mov	r3, r6
 8008c12:	7818      	ldrb	r0, [r3, #0]
 8008c14:	2830      	cmp	r0, #48	; 0x30
 8008c16:	461f      	mov	r7, r3
 8008c18:	f103 0301 	add.w	r3, r3, #1
 8008c1c:	d0f9      	beq.n	8008c12 <__gethex+0x76>
 8008c1e:	f7ff ffa7 	bl	8008b70 <__hexdig_fun>
 8008c22:	2301      	movs	r3, #1
 8008c24:	fab0 f480 	clz	r4, r0
 8008c28:	0964      	lsrs	r4, r4, #5
 8008c2a:	4635      	mov	r5, r6
 8008c2c:	9300      	str	r3, [sp, #0]
 8008c2e:	463a      	mov	r2, r7
 8008c30:	4616      	mov	r6, r2
 8008c32:	3201      	adds	r2, #1
 8008c34:	7830      	ldrb	r0, [r6, #0]
 8008c36:	f7ff ff9b 	bl	8008b70 <__hexdig_fun>
 8008c3a:	2800      	cmp	r0, #0
 8008c3c:	d1f8      	bne.n	8008c30 <__gethex+0x94>
 8008c3e:	9901      	ldr	r1, [sp, #4]
 8008c40:	4652      	mov	r2, sl
 8008c42:	4630      	mov	r0, r6
 8008c44:	f001 fa0c 	bl	800a060 <strncmp>
 8008c48:	b980      	cbnz	r0, 8008c6c <__gethex+0xd0>
 8008c4a:	b94d      	cbnz	r5, 8008c60 <__gethex+0xc4>
 8008c4c:	eb06 050a 	add.w	r5, r6, sl
 8008c50:	462a      	mov	r2, r5
 8008c52:	4616      	mov	r6, r2
 8008c54:	3201      	adds	r2, #1
 8008c56:	7830      	ldrb	r0, [r6, #0]
 8008c58:	f7ff ff8a 	bl	8008b70 <__hexdig_fun>
 8008c5c:	2800      	cmp	r0, #0
 8008c5e:	d1f8      	bne.n	8008c52 <__gethex+0xb6>
 8008c60:	1bad      	subs	r5, r5, r6
 8008c62:	00ad      	lsls	r5, r5, #2
 8008c64:	e004      	b.n	8008c70 <__gethex+0xd4>
 8008c66:	2400      	movs	r4, #0
 8008c68:	4625      	mov	r5, r4
 8008c6a:	e7e0      	b.n	8008c2e <__gethex+0x92>
 8008c6c:	2d00      	cmp	r5, #0
 8008c6e:	d1f7      	bne.n	8008c60 <__gethex+0xc4>
 8008c70:	7833      	ldrb	r3, [r6, #0]
 8008c72:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008c76:	2b50      	cmp	r3, #80	; 0x50
 8008c78:	d13b      	bne.n	8008cf2 <__gethex+0x156>
 8008c7a:	7873      	ldrb	r3, [r6, #1]
 8008c7c:	2b2b      	cmp	r3, #43	; 0x2b
 8008c7e:	d02c      	beq.n	8008cda <__gethex+0x13e>
 8008c80:	2b2d      	cmp	r3, #45	; 0x2d
 8008c82:	d02e      	beq.n	8008ce2 <__gethex+0x146>
 8008c84:	1c71      	adds	r1, r6, #1
 8008c86:	f04f 0900 	mov.w	r9, #0
 8008c8a:	7808      	ldrb	r0, [r1, #0]
 8008c8c:	f7ff ff70 	bl	8008b70 <__hexdig_fun>
 8008c90:	1e43      	subs	r3, r0, #1
 8008c92:	b2db      	uxtb	r3, r3
 8008c94:	2b18      	cmp	r3, #24
 8008c96:	d82c      	bhi.n	8008cf2 <__gethex+0x156>
 8008c98:	f1a0 0210 	sub.w	r2, r0, #16
 8008c9c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008ca0:	f7ff ff66 	bl	8008b70 <__hexdig_fun>
 8008ca4:	1e43      	subs	r3, r0, #1
 8008ca6:	b2db      	uxtb	r3, r3
 8008ca8:	2b18      	cmp	r3, #24
 8008caa:	d91d      	bls.n	8008ce8 <__gethex+0x14c>
 8008cac:	f1b9 0f00 	cmp.w	r9, #0
 8008cb0:	d000      	beq.n	8008cb4 <__gethex+0x118>
 8008cb2:	4252      	negs	r2, r2
 8008cb4:	4415      	add	r5, r2
 8008cb6:	f8cb 1000 	str.w	r1, [fp]
 8008cba:	b1e4      	cbz	r4, 8008cf6 <__gethex+0x15a>
 8008cbc:	9b00      	ldr	r3, [sp, #0]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	bf14      	ite	ne
 8008cc2:	2700      	movne	r7, #0
 8008cc4:	2706      	moveq	r7, #6
 8008cc6:	4638      	mov	r0, r7
 8008cc8:	b009      	add	sp, #36	; 0x24
 8008cca:	ecbd 8b02 	vpop	{d8}
 8008cce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cd2:	463e      	mov	r6, r7
 8008cd4:	4625      	mov	r5, r4
 8008cd6:	2401      	movs	r4, #1
 8008cd8:	e7ca      	b.n	8008c70 <__gethex+0xd4>
 8008cda:	f04f 0900 	mov.w	r9, #0
 8008cde:	1cb1      	adds	r1, r6, #2
 8008ce0:	e7d3      	b.n	8008c8a <__gethex+0xee>
 8008ce2:	f04f 0901 	mov.w	r9, #1
 8008ce6:	e7fa      	b.n	8008cde <__gethex+0x142>
 8008ce8:	230a      	movs	r3, #10
 8008cea:	fb03 0202 	mla	r2, r3, r2, r0
 8008cee:	3a10      	subs	r2, #16
 8008cf0:	e7d4      	b.n	8008c9c <__gethex+0x100>
 8008cf2:	4631      	mov	r1, r6
 8008cf4:	e7df      	b.n	8008cb6 <__gethex+0x11a>
 8008cf6:	1bf3      	subs	r3, r6, r7
 8008cf8:	3b01      	subs	r3, #1
 8008cfa:	4621      	mov	r1, r4
 8008cfc:	2b07      	cmp	r3, #7
 8008cfe:	dc0b      	bgt.n	8008d18 <__gethex+0x17c>
 8008d00:	ee18 0a10 	vmov	r0, s16
 8008d04:	f000 fa7e 	bl	8009204 <_Balloc>
 8008d08:	4604      	mov	r4, r0
 8008d0a:	b940      	cbnz	r0, 8008d1e <__gethex+0x182>
 8008d0c:	4b5d      	ldr	r3, [pc, #372]	; (8008e84 <__gethex+0x2e8>)
 8008d0e:	4602      	mov	r2, r0
 8008d10:	21de      	movs	r1, #222	; 0xde
 8008d12:	485d      	ldr	r0, [pc, #372]	; (8008e88 <__gethex+0x2ec>)
 8008d14:	f001 f9c6 	bl	800a0a4 <__assert_func>
 8008d18:	3101      	adds	r1, #1
 8008d1a:	105b      	asrs	r3, r3, #1
 8008d1c:	e7ee      	b.n	8008cfc <__gethex+0x160>
 8008d1e:	f100 0914 	add.w	r9, r0, #20
 8008d22:	f04f 0b00 	mov.w	fp, #0
 8008d26:	f1ca 0301 	rsb	r3, sl, #1
 8008d2a:	f8cd 9008 	str.w	r9, [sp, #8]
 8008d2e:	f8cd b000 	str.w	fp, [sp]
 8008d32:	9306      	str	r3, [sp, #24]
 8008d34:	42b7      	cmp	r7, r6
 8008d36:	d340      	bcc.n	8008dba <__gethex+0x21e>
 8008d38:	9802      	ldr	r0, [sp, #8]
 8008d3a:	9b00      	ldr	r3, [sp, #0]
 8008d3c:	f840 3b04 	str.w	r3, [r0], #4
 8008d40:	eba0 0009 	sub.w	r0, r0, r9
 8008d44:	1080      	asrs	r0, r0, #2
 8008d46:	0146      	lsls	r6, r0, #5
 8008d48:	6120      	str	r0, [r4, #16]
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	f000 fb4c 	bl	80093e8 <__hi0bits>
 8008d50:	1a30      	subs	r0, r6, r0
 8008d52:	f8d8 6000 	ldr.w	r6, [r8]
 8008d56:	42b0      	cmp	r0, r6
 8008d58:	dd63      	ble.n	8008e22 <__gethex+0x286>
 8008d5a:	1b87      	subs	r7, r0, r6
 8008d5c:	4639      	mov	r1, r7
 8008d5e:	4620      	mov	r0, r4
 8008d60:	f000 fef0 	bl	8009b44 <__any_on>
 8008d64:	4682      	mov	sl, r0
 8008d66:	b1a8      	cbz	r0, 8008d94 <__gethex+0x1f8>
 8008d68:	1e7b      	subs	r3, r7, #1
 8008d6a:	1159      	asrs	r1, r3, #5
 8008d6c:	f003 021f 	and.w	r2, r3, #31
 8008d70:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008d74:	f04f 0a01 	mov.w	sl, #1
 8008d78:	fa0a f202 	lsl.w	r2, sl, r2
 8008d7c:	420a      	tst	r2, r1
 8008d7e:	d009      	beq.n	8008d94 <__gethex+0x1f8>
 8008d80:	4553      	cmp	r3, sl
 8008d82:	dd05      	ble.n	8008d90 <__gethex+0x1f4>
 8008d84:	1eb9      	subs	r1, r7, #2
 8008d86:	4620      	mov	r0, r4
 8008d88:	f000 fedc 	bl	8009b44 <__any_on>
 8008d8c:	2800      	cmp	r0, #0
 8008d8e:	d145      	bne.n	8008e1c <__gethex+0x280>
 8008d90:	f04f 0a02 	mov.w	sl, #2
 8008d94:	4639      	mov	r1, r7
 8008d96:	4620      	mov	r0, r4
 8008d98:	f7ff fe98 	bl	8008acc <rshift>
 8008d9c:	443d      	add	r5, r7
 8008d9e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008da2:	42ab      	cmp	r3, r5
 8008da4:	da4c      	bge.n	8008e40 <__gethex+0x2a4>
 8008da6:	ee18 0a10 	vmov	r0, s16
 8008daa:	4621      	mov	r1, r4
 8008dac:	f000 fa6a 	bl	8009284 <_Bfree>
 8008db0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008db2:	2300      	movs	r3, #0
 8008db4:	6013      	str	r3, [r2, #0]
 8008db6:	27a3      	movs	r7, #163	; 0xa3
 8008db8:	e785      	b.n	8008cc6 <__gethex+0x12a>
 8008dba:	1e73      	subs	r3, r6, #1
 8008dbc:	9a05      	ldr	r2, [sp, #20]
 8008dbe:	9303      	str	r3, [sp, #12]
 8008dc0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008dc4:	4293      	cmp	r3, r2
 8008dc6:	d019      	beq.n	8008dfc <__gethex+0x260>
 8008dc8:	f1bb 0f20 	cmp.w	fp, #32
 8008dcc:	d107      	bne.n	8008dde <__gethex+0x242>
 8008dce:	9b02      	ldr	r3, [sp, #8]
 8008dd0:	9a00      	ldr	r2, [sp, #0]
 8008dd2:	f843 2b04 	str.w	r2, [r3], #4
 8008dd6:	9302      	str	r3, [sp, #8]
 8008dd8:	2300      	movs	r3, #0
 8008dda:	9300      	str	r3, [sp, #0]
 8008ddc:	469b      	mov	fp, r3
 8008dde:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008de2:	f7ff fec5 	bl	8008b70 <__hexdig_fun>
 8008de6:	9b00      	ldr	r3, [sp, #0]
 8008de8:	f000 000f 	and.w	r0, r0, #15
 8008dec:	fa00 f00b 	lsl.w	r0, r0, fp
 8008df0:	4303      	orrs	r3, r0
 8008df2:	9300      	str	r3, [sp, #0]
 8008df4:	f10b 0b04 	add.w	fp, fp, #4
 8008df8:	9b03      	ldr	r3, [sp, #12]
 8008dfa:	e00d      	b.n	8008e18 <__gethex+0x27c>
 8008dfc:	9b03      	ldr	r3, [sp, #12]
 8008dfe:	9a06      	ldr	r2, [sp, #24]
 8008e00:	4413      	add	r3, r2
 8008e02:	42bb      	cmp	r3, r7
 8008e04:	d3e0      	bcc.n	8008dc8 <__gethex+0x22c>
 8008e06:	4618      	mov	r0, r3
 8008e08:	9901      	ldr	r1, [sp, #4]
 8008e0a:	9307      	str	r3, [sp, #28]
 8008e0c:	4652      	mov	r2, sl
 8008e0e:	f001 f927 	bl	800a060 <strncmp>
 8008e12:	9b07      	ldr	r3, [sp, #28]
 8008e14:	2800      	cmp	r0, #0
 8008e16:	d1d7      	bne.n	8008dc8 <__gethex+0x22c>
 8008e18:	461e      	mov	r6, r3
 8008e1a:	e78b      	b.n	8008d34 <__gethex+0x198>
 8008e1c:	f04f 0a03 	mov.w	sl, #3
 8008e20:	e7b8      	b.n	8008d94 <__gethex+0x1f8>
 8008e22:	da0a      	bge.n	8008e3a <__gethex+0x29e>
 8008e24:	1a37      	subs	r7, r6, r0
 8008e26:	4621      	mov	r1, r4
 8008e28:	ee18 0a10 	vmov	r0, s16
 8008e2c:	463a      	mov	r2, r7
 8008e2e:	f000 fc45 	bl	80096bc <__lshift>
 8008e32:	1bed      	subs	r5, r5, r7
 8008e34:	4604      	mov	r4, r0
 8008e36:	f100 0914 	add.w	r9, r0, #20
 8008e3a:	f04f 0a00 	mov.w	sl, #0
 8008e3e:	e7ae      	b.n	8008d9e <__gethex+0x202>
 8008e40:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008e44:	42a8      	cmp	r0, r5
 8008e46:	dd72      	ble.n	8008f2e <__gethex+0x392>
 8008e48:	1b45      	subs	r5, r0, r5
 8008e4a:	42ae      	cmp	r6, r5
 8008e4c:	dc36      	bgt.n	8008ebc <__gethex+0x320>
 8008e4e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008e52:	2b02      	cmp	r3, #2
 8008e54:	d02a      	beq.n	8008eac <__gethex+0x310>
 8008e56:	2b03      	cmp	r3, #3
 8008e58:	d02c      	beq.n	8008eb4 <__gethex+0x318>
 8008e5a:	2b01      	cmp	r3, #1
 8008e5c:	d11c      	bne.n	8008e98 <__gethex+0x2fc>
 8008e5e:	42ae      	cmp	r6, r5
 8008e60:	d11a      	bne.n	8008e98 <__gethex+0x2fc>
 8008e62:	2e01      	cmp	r6, #1
 8008e64:	d112      	bne.n	8008e8c <__gethex+0x2f0>
 8008e66:	9a04      	ldr	r2, [sp, #16]
 8008e68:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008e6c:	6013      	str	r3, [r2, #0]
 8008e6e:	2301      	movs	r3, #1
 8008e70:	6123      	str	r3, [r4, #16]
 8008e72:	f8c9 3000 	str.w	r3, [r9]
 8008e76:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008e78:	2762      	movs	r7, #98	; 0x62
 8008e7a:	601c      	str	r4, [r3, #0]
 8008e7c:	e723      	b.n	8008cc6 <__gethex+0x12a>
 8008e7e:	bf00      	nop
 8008e80:	0800b6a0 	.word	0x0800b6a0
 8008e84:	0800b628 	.word	0x0800b628
 8008e88:	0800b639 	.word	0x0800b639
 8008e8c:	1e71      	subs	r1, r6, #1
 8008e8e:	4620      	mov	r0, r4
 8008e90:	f000 fe58 	bl	8009b44 <__any_on>
 8008e94:	2800      	cmp	r0, #0
 8008e96:	d1e6      	bne.n	8008e66 <__gethex+0x2ca>
 8008e98:	ee18 0a10 	vmov	r0, s16
 8008e9c:	4621      	mov	r1, r4
 8008e9e:	f000 f9f1 	bl	8009284 <_Bfree>
 8008ea2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	6013      	str	r3, [r2, #0]
 8008ea8:	2750      	movs	r7, #80	; 0x50
 8008eaa:	e70c      	b.n	8008cc6 <__gethex+0x12a>
 8008eac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d1f2      	bne.n	8008e98 <__gethex+0x2fc>
 8008eb2:	e7d8      	b.n	8008e66 <__gethex+0x2ca>
 8008eb4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d1d5      	bne.n	8008e66 <__gethex+0x2ca>
 8008eba:	e7ed      	b.n	8008e98 <__gethex+0x2fc>
 8008ebc:	1e6f      	subs	r7, r5, #1
 8008ebe:	f1ba 0f00 	cmp.w	sl, #0
 8008ec2:	d131      	bne.n	8008f28 <__gethex+0x38c>
 8008ec4:	b127      	cbz	r7, 8008ed0 <__gethex+0x334>
 8008ec6:	4639      	mov	r1, r7
 8008ec8:	4620      	mov	r0, r4
 8008eca:	f000 fe3b 	bl	8009b44 <__any_on>
 8008ece:	4682      	mov	sl, r0
 8008ed0:	117b      	asrs	r3, r7, #5
 8008ed2:	2101      	movs	r1, #1
 8008ed4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008ed8:	f007 071f 	and.w	r7, r7, #31
 8008edc:	fa01 f707 	lsl.w	r7, r1, r7
 8008ee0:	421f      	tst	r7, r3
 8008ee2:	4629      	mov	r1, r5
 8008ee4:	4620      	mov	r0, r4
 8008ee6:	bf18      	it	ne
 8008ee8:	f04a 0a02 	orrne.w	sl, sl, #2
 8008eec:	1b76      	subs	r6, r6, r5
 8008eee:	f7ff fded 	bl	8008acc <rshift>
 8008ef2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008ef6:	2702      	movs	r7, #2
 8008ef8:	f1ba 0f00 	cmp.w	sl, #0
 8008efc:	d048      	beq.n	8008f90 <__gethex+0x3f4>
 8008efe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008f02:	2b02      	cmp	r3, #2
 8008f04:	d015      	beq.n	8008f32 <__gethex+0x396>
 8008f06:	2b03      	cmp	r3, #3
 8008f08:	d017      	beq.n	8008f3a <__gethex+0x39e>
 8008f0a:	2b01      	cmp	r3, #1
 8008f0c:	d109      	bne.n	8008f22 <__gethex+0x386>
 8008f0e:	f01a 0f02 	tst.w	sl, #2
 8008f12:	d006      	beq.n	8008f22 <__gethex+0x386>
 8008f14:	f8d9 0000 	ldr.w	r0, [r9]
 8008f18:	ea4a 0a00 	orr.w	sl, sl, r0
 8008f1c:	f01a 0f01 	tst.w	sl, #1
 8008f20:	d10e      	bne.n	8008f40 <__gethex+0x3a4>
 8008f22:	f047 0710 	orr.w	r7, r7, #16
 8008f26:	e033      	b.n	8008f90 <__gethex+0x3f4>
 8008f28:	f04f 0a01 	mov.w	sl, #1
 8008f2c:	e7d0      	b.n	8008ed0 <__gethex+0x334>
 8008f2e:	2701      	movs	r7, #1
 8008f30:	e7e2      	b.n	8008ef8 <__gethex+0x35c>
 8008f32:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008f34:	f1c3 0301 	rsb	r3, r3, #1
 8008f38:	9315      	str	r3, [sp, #84]	; 0x54
 8008f3a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d0f0      	beq.n	8008f22 <__gethex+0x386>
 8008f40:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008f44:	f104 0314 	add.w	r3, r4, #20
 8008f48:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008f4c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008f50:	f04f 0c00 	mov.w	ip, #0
 8008f54:	4618      	mov	r0, r3
 8008f56:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f5a:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008f5e:	d01c      	beq.n	8008f9a <__gethex+0x3fe>
 8008f60:	3201      	adds	r2, #1
 8008f62:	6002      	str	r2, [r0, #0]
 8008f64:	2f02      	cmp	r7, #2
 8008f66:	f104 0314 	add.w	r3, r4, #20
 8008f6a:	d13f      	bne.n	8008fec <__gethex+0x450>
 8008f6c:	f8d8 2000 	ldr.w	r2, [r8]
 8008f70:	3a01      	subs	r2, #1
 8008f72:	42b2      	cmp	r2, r6
 8008f74:	d10a      	bne.n	8008f8c <__gethex+0x3f0>
 8008f76:	1171      	asrs	r1, r6, #5
 8008f78:	2201      	movs	r2, #1
 8008f7a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008f7e:	f006 061f 	and.w	r6, r6, #31
 8008f82:	fa02 f606 	lsl.w	r6, r2, r6
 8008f86:	421e      	tst	r6, r3
 8008f88:	bf18      	it	ne
 8008f8a:	4617      	movne	r7, r2
 8008f8c:	f047 0720 	orr.w	r7, r7, #32
 8008f90:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008f92:	601c      	str	r4, [r3, #0]
 8008f94:	9b04      	ldr	r3, [sp, #16]
 8008f96:	601d      	str	r5, [r3, #0]
 8008f98:	e695      	b.n	8008cc6 <__gethex+0x12a>
 8008f9a:	4299      	cmp	r1, r3
 8008f9c:	f843 cc04 	str.w	ip, [r3, #-4]
 8008fa0:	d8d8      	bhi.n	8008f54 <__gethex+0x3b8>
 8008fa2:	68a3      	ldr	r3, [r4, #8]
 8008fa4:	459b      	cmp	fp, r3
 8008fa6:	db19      	blt.n	8008fdc <__gethex+0x440>
 8008fa8:	6861      	ldr	r1, [r4, #4]
 8008faa:	ee18 0a10 	vmov	r0, s16
 8008fae:	3101      	adds	r1, #1
 8008fb0:	f000 f928 	bl	8009204 <_Balloc>
 8008fb4:	4681      	mov	r9, r0
 8008fb6:	b918      	cbnz	r0, 8008fc0 <__gethex+0x424>
 8008fb8:	4b1a      	ldr	r3, [pc, #104]	; (8009024 <__gethex+0x488>)
 8008fba:	4602      	mov	r2, r0
 8008fbc:	2184      	movs	r1, #132	; 0x84
 8008fbe:	e6a8      	b.n	8008d12 <__gethex+0x176>
 8008fc0:	6922      	ldr	r2, [r4, #16]
 8008fc2:	3202      	adds	r2, #2
 8008fc4:	f104 010c 	add.w	r1, r4, #12
 8008fc8:	0092      	lsls	r2, r2, #2
 8008fca:	300c      	adds	r0, #12
 8008fcc:	f000 f90c 	bl	80091e8 <memcpy>
 8008fd0:	4621      	mov	r1, r4
 8008fd2:	ee18 0a10 	vmov	r0, s16
 8008fd6:	f000 f955 	bl	8009284 <_Bfree>
 8008fda:	464c      	mov	r4, r9
 8008fdc:	6923      	ldr	r3, [r4, #16]
 8008fde:	1c5a      	adds	r2, r3, #1
 8008fe0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008fe4:	6122      	str	r2, [r4, #16]
 8008fe6:	2201      	movs	r2, #1
 8008fe8:	615a      	str	r2, [r3, #20]
 8008fea:	e7bb      	b.n	8008f64 <__gethex+0x3c8>
 8008fec:	6922      	ldr	r2, [r4, #16]
 8008fee:	455a      	cmp	r2, fp
 8008ff0:	dd0b      	ble.n	800900a <__gethex+0x46e>
 8008ff2:	2101      	movs	r1, #1
 8008ff4:	4620      	mov	r0, r4
 8008ff6:	f7ff fd69 	bl	8008acc <rshift>
 8008ffa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008ffe:	3501      	adds	r5, #1
 8009000:	42ab      	cmp	r3, r5
 8009002:	f6ff aed0 	blt.w	8008da6 <__gethex+0x20a>
 8009006:	2701      	movs	r7, #1
 8009008:	e7c0      	b.n	8008f8c <__gethex+0x3f0>
 800900a:	f016 061f 	ands.w	r6, r6, #31
 800900e:	d0fa      	beq.n	8009006 <__gethex+0x46a>
 8009010:	4453      	add	r3, sl
 8009012:	f1c6 0620 	rsb	r6, r6, #32
 8009016:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800901a:	f000 f9e5 	bl	80093e8 <__hi0bits>
 800901e:	42b0      	cmp	r0, r6
 8009020:	dbe7      	blt.n	8008ff2 <__gethex+0x456>
 8009022:	e7f0      	b.n	8009006 <__gethex+0x46a>
 8009024:	0800b628 	.word	0x0800b628

08009028 <L_shift>:
 8009028:	f1c2 0208 	rsb	r2, r2, #8
 800902c:	0092      	lsls	r2, r2, #2
 800902e:	b570      	push	{r4, r5, r6, lr}
 8009030:	f1c2 0620 	rsb	r6, r2, #32
 8009034:	6843      	ldr	r3, [r0, #4]
 8009036:	6804      	ldr	r4, [r0, #0]
 8009038:	fa03 f506 	lsl.w	r5, r3, r6
 800903c:	432c      	orrs	r4, r5
 800903e:	40d3      	lsrs	r3, r2
 8009040:	6004      	str	r4, [r0, #0]
 8009042:	f840 3f04 	str.w	r3, [r0, #4]!
 8009046:	4288      	cmp	r0, r1
 8009048:	d3f4      	bcc.n	8009034 <L_shift+0xc>
 800904a:	bd70      	pop	{r4, r5, r6, pc}

0800904c <__match>:
 800904c:	b530      	push	{r4, r5, lr}
 800904e:	6803      	ldr	r3, [r0, #0]
 8009050:	3301      	adds	r3, #1
 8009052:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009056:	b914      	cbnz	r4, 800905e <__match+0x12>
 8009058:	6003      	str	r3, [r0, #0]
 800905a:	2001      	movs	r0, #1
 800905c:	bd30      	pop	{r4, r5, pc}
 800905e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009062:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009066:	2d19      	cmp	r5, #25
 8009068:	bf98      	it	ls
 800906a:	3220      	addls	r2, #32
 800906c:	42a2      	cmp	r2, r4
 800906e:	d0f0      	beq.n	8009052 <__match+0x6>
 8009070:	2000      	movs	r0, #0
 8009072:	e7f3      	b.n	800905c <__match+0x10>

08009074 <__hexnan>:
 8009074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009078:	680b      	ldr	r3, [r1, #0]
 800907a:	115e      	asrs	r6, r3, #5
 800907c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009080:	f013 031f 	ands.w	r3, r3, #31
 8009084:	b087      	sub	sp, #28
 8009086:	bf18      	it	ne
 8009088:	3604      	addne	r6, #4
 800908a:	2500      	movs	r5, #0
 800908c:	1f37      	subs	r7, r6, #4
 800908e:	4690      	mov	r8, r2
 8009090:	6802      	ldr	r2, [r0, #0]
 8009092:	9301      	str	r3, [sp, #4]
 8009094:	4682      	mov	sl, r0
 8009096:	f846 5c04 	str.w	r5, [r6, #-4]
 800909a:	46b9      	mov	r9, r7
 800909c:	463c      	mov	r4, r7
 800909e:	9502      	str	r5, [sp, #8]
 80090a0:	46ab      	mov	fp, r5
 80090a2:	7851      	ldrb	r1, [r2, #1]
 80090a4:	1c53      	adds	r3, r2, #1
 80090a6:	9303      	str	r3, [sp, #12]
 80090a8:	b341      	cbz	r1, 80090fc <__hexnan+0x88>
 80090aa:	4608      	mov	r0, r1
 80090ac:	9205      	str	r2, [sp, #20]
 80090ae:	9104      	str	r1, [sp, #16]
 80090b0:	f7ff fd5e 	bl	8008b70 <__hexdig_fun>
 80090b4:	2800      	cmp	r0, #0
 80090b6:	d14f      	bne.n	8009158 <__hexnan+0xe4>
 80090b8:	9904      	ldr	r1, [sp, #16]
 80090ba:	9a05      	ldr	r2, [sp, #20]
 80090bc:	2920      	cmp	r1, #32
 80090be:	d818      	bhi.n	80090f2 <__hexnan+0x7e>
 80090c0:	9b02      	ldr	r3, [sp, #8]
 80090c2:	459b      	cmp	fp, r3
 80090c4:	dd13      	ble.n	80090ee <__hexnan+0x7a>
 80090c6:	454c      	cmp	r4, r9
 80090c8:	d206      	bcs.n	80090d8 <__hexnan+0x64>
 80090ca:	2d07      	cmp	r5, #7
 80090cc:	dc04      	bgt.n	80090d8 <__hexnan+0x64>
 80090ce:	462a      	mov	r2, r5
 80090d0:	4649      	mov	r1, r9
 80090d2:	4620      	mov	r0, r4
 80090d4:	f7ff ffa8 	bl	8009028 <L_shift>
 80090d8:	4544      	cmp	r4, r8
 80090da:	d950      	bls.n	800917e <__hexnan+0x10a>
 80090dc:	2300      	movs	r3, #0
 80090de:	f1a4 0904 	sub.w	r9, r4, #4
 80090e2:	f844 3c04 	str.w	r3, [r4, #-4]
 80090e6:	f8cd b008 	str.w	fp, [sp, #8]
 80090ea:	464c      	mov	r4, r9
 80090ec:	461d      	mov	r5, r3
 80090ee:	9a03      	ldr	r2, [sp, #12]
 80090f0:	e7d7      	b.n	80090a2 <__hexnan+0x2e>
 80090f2:	2929      	cmp	r1, #41	; 0x29
 80090f4:	d156      	bne.n	80091a4 <__hexnan+0x130>
 80090f6:	3202      	adds	r2, #2
 80090f8:	f8ca 2000 	str.w	r2, [sl]
 80090fc:	f1bb 0f00 	cmp.w	fp, #0
 8009100:	d050      	beq.n	80091a4 <__hexnan+0x130>
 8009102:	454c      	cmp	r4, r9
 8009104:	d206      	bcs.n	8009114 <__hexnan+0xa0>
 8009106:	2d07      	cmp	r5, #7
 8009108:	dc04      	bgt.n	8009114 <__hexnan+0xa0>
 800910a:	462a      	mov	r2, r5
 800910c:	4649      	mov	r1, r9
 800910e:	4620      	mov	r0, r4
 8009110:	f7ff ff8a 	bl	8009028 <L_shift>
 8009114:	4544      	cmp	r4, r8
 8009116:	d934      	bls.n	8009182 <__hexnan+0x10e>
 8009118:	f1a8 0204 	sub.w	r2, r8, #4
 800911c:	4623      	mov	r3, r4
 800911e:	f853 1b04 	ldr.w	r1, [r3], #4
 8009122:	f842 1f04 	str.w	r1, [r2, #4]!
 8009126:	429f      	cmp	r7, r3
 8009128:	d2f9      	bcs.n	800911e <__hexnan+0xaa>
 800912a:	1b3b      	subs	r3, r7, r4
 800912c:	f023 0303 	bic.w	r3, r3, #3
 8009130:	3304      	adds	r3, #4
 8009132:	3401      	adds	r4, #1
 8009134:	3e03      	subs	r6, #3
 8009136:	42b4      	cmp	r4, r6
 8009138:	bf88      	it	hi
 800913a:	2304      	movhi	r3, #4
 800913c:	4443      	add	r3, r8
 800913e:	2200      	movs	r2, #0
 8009140:	f843 2b04 	str.w	r2, [r3], #4
 8009144:	429f      	cmp	r7, r3
 8009146:	d2fb      	bcs.n	8009140 <__hexnan+0xcc>
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	b91b      	cbnz	r3, 8009154 <__hexnan+0xe0>
 800914c:	4547      	cmp	r7, r8
 800914e:	d127      	bne.n	80091a0 <__hexnan+0x12c>
 8009150:	2301      	movs	r3, #1
 8009152:	603b      	str	r3, [r7, #0]
 8009154:	2005      	movs	r0, #5
 8009156:	e026      	b.n	80091a6 <__hexnan+0x132>
 8009158:	3501      	adds	r5, #1
 800915a:	2d08      	cmp	r5, #8
 800915c:	f10b 0b01 	add.w	fp, fp, #1
 8009160:	dd06      	ble.n	8009170 <__hexnan+0xfc>
 8009162:	4544      	cmp	r4, r8
 8009164:	d9c3      	bls.n	80090ee <__hexnan+0x7a>
 8009166:	2300      	movs	r3, #0
 8009168:	f844 3c04 	str.w	r3, [r4, #-4]
 800916c:	2501      	movs	r5, #1
 800916e:	3c04      	subs	r4, #4
 8009170:	6822      	ldr	r2, [r4, #0]
 8009172:	f000 000f 	and.w	r0, r0, #15
 8009176:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800917a:	6022      	str	r2, [r4, #0]
 800917c:	e7b7      	b.n	80090ee <__hexnan+0x7a>
 800917e:	2508      	movs	r5, #8
 8009180:	e7b5      	b.n	80090ee <__hexnan+0x7a>
 8009182:	9b01      	ldr	r3, [sp, #4]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d0df      	beq.n	8009148 <__hexnan+0xd4>
 8009188:	f04f 32ff 	mov.w	r2, #4294967295
 800918c:	f1c3 0320 	rsb	r3, r3, #32
 8009190:	fa22 f303 	lsr.w	r3, r2, r3
 8009194:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009198:	401a      	ands	r2, r3
 800919a:	f846 2c04 	str.w	r2, [r6, #-4]
 800919e:	e7d3      	b.n	8009148 <__hexnan+0xd4>
 80091a0:	3f04      	subs	r7, #4
 80091a2:	e7d1      	b.n	8009148 <__hexnan+0xd4>
 80091a4:	2004      	movs	r0, #4
 80091a6:	b007      	add	sp, #28
 80091a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080091ac <_localeconv_r>:
 80091ac:	4800      	ldr	r0, [pc, #0]	; (80091b0 <_localeconv_r+0x4>)
 80091ae:	4770      	bx	lr
 80091b0:	20000164 	.word	0x20000164

080091b4 <malloc>:
 80091b4:	4b02      	ldr	r3, [pc, #8]	; (80091c0 <malloc+0xc>)
 80091b6:	4601      	mov	r1, r0
 80091b8:	6818      	ldr	r0, [r3, #0]
 80091ba:	f000 bd67 	b.w	8009c8c <_malloc_r>
 80091be:	bf00      	nop
 80091c0:	2000000c 	.word	0x2000000c

080091c4 <__ascii_mbtowc>:
 80091c4:	b082      	sub	sp, #8
 80091c6:	b901      	cbnz	r1, 80091ca <__ascii_mbtowc+0x6>
 80091c8:	a901      	add	r1, sp, #4
 80091ca:	b142      	cbz	r2, 80091de <__ascii_mbtowc+0x1a>
 80091cc:	b14b      	cbz	r3, 80091e2 <__ascii_mbtowc+0x1e>
 80091ce:	7813      	ldrb	r3, [r2, #0]
 80091d0:	600b      	str	r3, [r1, #0]
 80091d2:	7812      	ldrb	r2, [r2, #0]
 80091d4:	1e10      	subs	r0, r2, #0
 80091d6:	bf18      	it	ne
 80091d8:	2001      	movne	r0, #1
 80091da:	b002      	add	sp, #8
 80091dc:	4770      	bx	lr
 80091de:	4610      	mov	r0, r2
 80091e0:	e7fb      	b.n	80091da <__ascii_mbtowc+0x16>
 80091e2:	f06f 0001 	mvn.w	r0, #1
 80091e6:	e7f8      	b.n	80091da <__ascii_mbtowc+0x16>

080091e8 <memcpy>:
 80091e8:	440a      	add	r2, r1
 80091ea:	4291      	cmp	r1, r2
 80091ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80091f0:	d100      	bne.n	80091f4 <memcpy+0xc>
 80091f2:	4770      	bx	lr
 80091f4:	b510      	push	{r4, lr}
 80091f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80091fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80091fe:	4291      	cmp	r1, r2
 8009200:	d1f9      	bne.n	80091f6 <memcpy+0xe>
 8009202:	bd10      	pop	{r4, pc}

08009204 <_Balloc>:
 8009204:	b570      	push	{r4, r5, r6, lr}
 8009206:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009208:	4604      	mov	r4, r0
 800920a:	460d      	mov	r5, r1
 800920c:	b976      	cbnz	r6, 800922c <_Balloc+0x28>
 800920e:	2010      	movs	r0, #16
 8009210:	f7ff ffd0 	bl	80091b4 <malloc>
 8009214:	4602      	mov	r2, r0
 8009216:	6260      	str	r0, [r4, #36]	; 0x24
 8009218:	b920      	cbnz	r0, 8009224 <_Balloc+0x20>
 800921a:	4b18      	ldr	r3, [pc, #96]	; (800927c <_Balloc+0x78>)
 800921c:	4818      	ldr	r0, [pc, #96]	; (8009280 <_Balloc+0x7c>)
 800921e:	2166      	movs	r1, #102	; 0x66
 8009220:	f000 ff40 	bl	800a0a4 <__assert_func>
 8009224:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009228:	6006      	str	r6, [r0, #0]
 800922a:	60c6      	str	r6, [r0, #12]
 800922c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800922e:	68f3      	ldr	r3, [r6, #12]
 8009230:	b183      	cbz	r3, 8009254 <_Balloc+0x50>
 8009232:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009234:	68db      	ldr	r3, [r3, #12]
 8009236:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800923a:	b9b8      	cbnz	r0, 800926c <_Balloc+0x68>
 800923c:	2101      	movs	r1, #1
 800923e:	fa01 f605 	lsl.w	r6, r1, r5
 8009242:	1d72      	adds	r2, r6, #5
 8009244:	0092      	lsls	r2, r2, #2
 8009246:	4620      	mov	r0, r4
 8009248:	f000 fc9d 	bl	8009b86 <_calloc_r>
 800924c:	b160      	cbz	r0, 8009268 <_Balloc+0x64>
 800924e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009252:	e00e      	b.n	8009272 <_Balloc+0x6e>
 8009254:	2221      	movs	r2, #33	; 0x21
 8009256:	2104      	movs	r1, #4
 8009258:	4620      	mov	r0, r4
 800925a:	f000 fc94 	bl	8009b86 <_calloc_r>
 800925e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009260:	60f0      	str	r0, [r6, #12]
 8009262:	68db      	ldr	r3, [r3, #12]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d1e4      	bne.n	8009232 <_Balloc+0x2e>
 8009268:	2000      	movs	r0, #0
 800926a:	bd70      	pop	{r4, r5, r6, pc}
 800926c:	6802      	ldr	r2, [r0, #0]
 800926e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009272:	2300      	movs	r3, #0
 8009274:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009278:	e7f7      	b.n	800926a <_Balloc+0x66>
 800927a:	bf00      	nop
 800927c:	0800b5b6 	.word	0x0800b5b6
 8009280:	0800b6b4 	.word	0x0800b6b4

08009284 <_Bfree>:
 8009284:	b570      	push	{r4, r5, r6, lr}
 8009286:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009288:	4605      	mov	r5, r0
 800928a:	460c      	mov	r4, r1
 800928c:	b976      	cbnz	r6, 80092ac <_Bfree+0x28>
 800928e:	2010      	movs	r0, #16
 8009290:	f7ff ff90 	bl	80091b4 <malloc>
 8009294:	4602      	mov	r2, r0
 8009296:	6268      	str	r0, [r5, #36]	; 0x24
 8009298:	b920      	cbnz	r0, 80092a4 <_Bfree+0x20>
 800929a:	4b09      	ldr	r3, [pc, #36]	; (80092c0 <_Bfree+0x3c>)
 800929c:	4809      	ldr	r0, [pc, #36]	; (80092c4 <_Bfree+0x40>)
 800929e:	218a      	movs	r1, #138	; 0x8a
 80092a0:	f000 ff00 	bl	800a0a4 <__assert_func>
 80092a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80092a8:	6006      	str	r6, [r0, #0]
 80092aa:	60c6      	str	r6, [r0, #12]
 80092ac:	b13c      	cbz	r4, 80092be <_Bfree+0x3a>
 80092ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80092b0:	6862      	ldr	r2, [r4, #4]
 80092b2:	68db      	ldr	r3, [r3, #12]
 80092b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80092b8:	6021      	str	r1, [r4, #0]
 80092ba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80092be:	bd70      	pop	{r4, r5, r6, pc}
 80092c0:	0800b5b6 	.word	0x0800b5b6
 80092c4:	0800b6b4 	.word	0x0800b6b4

080092c8 <__multadd>:
 80092c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092cc:	690d      	ldr	r5, [r1, #16]
 80092ce:	4607      	mov	r7, r0
 80092d0:	460c      	mov	r4, r1
 80092d2:	461e      	mov	r6, r3
 80092d4:	f101 0c14 	add.w	ip, r1, #20
 80092d8:	2000      	movs	r0, #0
 80092da:	f8dc 3000 	ldr.w	r3, [ip]
 80092de:	b299      	uxth	r1, r3
 80092e0:	fb02 6101 	mla	r1, r2, r1, r6
 80092e4:	0c1e      	lsrs	r6, r3, #16
 80092e6:	0c0b      	lsrs	r3, r1, #16
 80092e8:	fb02 3306 	mla	r3, r2, r6, r3
 80092ec:	b289      	uxth	r1, r1
 80092ee:	3001      	adds	r0, #1
 80092f0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80092f4:	4285      	cmp	r5, r0
 80092f6:	f84c 1b04 	str.w	r1, [ip], #4
 80092fa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80092fe:	dcec      	bgt.n	80092da <__multadd+0x12>
 8009300:	b30e      	cbz	r6, 8009346 <__multadd+0x7e>
 8009302:	68a3      	ldr	r3, [r4, #8]
 8009304:	42ab      	cmp	r3, r5
 8009306:	dc19      	bgt.n	800933c <__multadd+0x74>
 8009308:	6861      	ldr	r1, [r4, #4]
 800930a:	4638      	mov	r0, r7
 800930c:	3101      	adds	r1, #1
 800930e:	f7ff ff79 	bl	8009204 <_Balloc>
 8009312:	4680      	mov	r8, r0
 8009314:	b928      	cbnz	r0, 8009322 <__multadd+0x5a>
 8009316:	4602      	mov	r2, r0
 8009318:	4b0c      	ldr	r3, [pc, #48]	; (800934c <__multadd+0x84>)
 800931a:	480d      	ldr	r0, [pc, #52]	; (8009350 <__multadd+0x88>)
 800931c:	21b5      	movs	r1, #181	; 0xb5
 800931e:	f000 fec1 	bl	800a0a4 <__assert_func>
 8009322:	6922      	ldr	r2, [r4, #16]
 8009324:	3202      	adds	r2, #2
 8009326:	f104 010c 	add.w	r1, r4, #12
 800932a:	0092      	lsls	r2, r2, #2
 800932c:	300c      	adds	r0, #12
 800932e:	f7ff ff5b 	bl	80091e8 <memcpy>
 8009332:	4621      	mov	r1, r4
 8009334:	4638      	mov	r0, r7
 8009336:	f7ff ffa5 	bl	8009284 <_Bfree>
 800933a:	4644      	mov	r4, r8
 800933c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009340:	3501      	adds	r5, #1
 8009342:	615e      	str	r6, [r3, #20]
 8009344:	6125      	str	r5, [r4, #16]
 8009346:	4620      	mov	r0, r4
 8009348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800934c:	0800b628 	.word	0x0800b628
 8009350:	0800b6b4 	.word	0x0800b6b4

08009354 <__s2b>:
 8009354:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009358:	460c      	mov	r4, r1
 800935a:	4615      	mov	r5, r2
 800935c:	461f      	mov	r7, r3
 800935e:	2209      	movs	r2, #9
 8009360:	3308      	adds	r3, #8
 8009362:	4606      	mov	r6, r0
 8009364:	fb93 f3f2 	sdiv	r3, r3, r2
 8009368:	2100      	movs	r1, #0
 800936a:	2201      	movs	r2, #1
 800936c:	429a      	cmp	r2, r3
 800936e:	db09      	blt.n	8009384 <__s2b+0x30>
 8009370:	4630      	mov	r0, r6
 8009372:	f7ff ff47 	bl	8009204 <_Balloc>
 8009376:	b940      	cbnz	r0, 800938a <__s2b+0x36>
 8009378:	4602      	mov	r2, r0
 800937a:	4b19      	ldr	r3, [pc, #100]	; (80093e0 <__s2b+0x8c>)
 800937c:	4819      	ldr	r0, [pc, #100]	; (80093e4 <__s2b+0x90>)
 800937e:	21ce      	movs	r1, #206	; 0xce
 8009380:	f000 fe90 	bl	800a0a4 <__assert_func>
 8009384:	0052      	lsls	r2, r2, #1
 8009386:	3101      	adds	r1, #1
 8009388:	e7f0      	b.n	800936c <__s2b+0x18>
 800938a:	9b08      	ldr	r3, [sp, #32]
 800938c:	6143      	str	r3, [r0, #20]
 800938e:	2d09      	cmp	r5, #9
 8009390:	f04f 0301 	mov.w	r3, #1
 8009394:	6103      	str	r3, [r0, #16]
 8009396:	dd16      	ble.n	80093c6 <__s2b+0x72>
 8009398:	f104 0909 	add.w	r9, r4, #9
 800939c:	46c8      	mov	r8, r9
 800939e:	442c      	add	r4, r5
 80093a0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80093a4:	4601      	mov	r1, r0
 80093a6:	3b30      	subs	r3, #48	; 0x30
 80093a8:	220a      	movs	r2, #10
 80093aa:	4630      	mov	r0, r6
 80093ac:	f7ff ff8c 	bl	80092c8 <__multadd>
 80093b0:	45a0      	cmp	r8, r4
 80093b2:	d1f5      	bne.n	80093a0 <__s2b+0x4c>
 80093b4:	f1a5 0408 	sub.w	r4, r5, #8
 80093b8:	444c      	add	r4, r9
 80093ba:	1b2d      	subs	r5, r5, r4
 80093bc:	1963      	adds	r3, r4, r5
 80093be:	42bb      	cmp	r3, r7
 80093c0:	db04      	blt.n	80093cc <__s2b+0x78>
 80093c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80093c6:	340a      	adds	r4, #10
 80093c8:	2509      	movs	r5, #9
 80093ca:	e7f6      	b.n	80093ba <__s2b+0x66>
 80093cc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80093d0:	4601      	mov	r1, r0
 80093d2:	3b30      	subs	r3, #48	; 0x30
 80093d4:	220a      	movs	r2, #10
 80093d6:	4630      	mov	r0, r6
 80093d8:	f7ff ff76 	bl	80092c8 <__multadd>
 80093dc:	e7ee      	b.n	80093bc <__s2b+0x68>
 80093de:	bf00      	nop
 80093e0:	0800b628 	.word	0x0800b628
 80093e4:	0800b6b4 	.word	0x0800b6b4

080093e8 <__hi0bits>:
 80093e8:	0c03      	lsrs	r3, r0, #16
 80093ea:	041b      	lsls	r3, r3, #16
 80093ec:	b9d3      	cbnz	r3, 8009424 <__hi0bits+0x3c>
 80093ee:	0400      	lsls	r0, r0, #16
 80093f0:	2310      	movs	r3, #16
 80093f2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80093f6:	bf04      	itt	eq
 80093f8:	0200      	lsleq	r0, r0, #8
 80093fa:	3308      	addeq	r3, #8
 80093fc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009400:	bf04      	itt	eq
 8009402:	0100      	lsleq	r0, r0, #4
 8009404:	3304      	addeq	r3, #4
 8009406:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800940a:	bf04      	itt	eq
 800940c:	0080      	lsleq	r0, r0, #2
 800940e:	3302      	addeq	r3, #2
 8009410:	2800      	cmp	r0, #0
 8009412:	db05      	blt.n	8009420 <__hi0bits+0x38>
 8009414:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009418:	f103 0301 	add.w	r3, r3, #1
 800941c:	bf08      	it	eq
 800941e:	2320      	moveq	r3, #32
 8009420:	4618      	mov	r0, r3
 8009422:	4770      	bx	lr
 8009424:	2300      	movs	r3, #0
 8009426:	e7e4      	b.n	80093f2 <__hi0bits+0xa>

08009428 <__lo0bits>:
 8009428:	6803      	ldr	r3, [r0, #0]
 800942a:	f013 0207 	ands.w	r2, r3, #7
 800942e:	4601      	mov	r1, r0
 8009430:	d00b      	beq.n	800944a <__lo0bits+0x22>
 8009432:	07da      	lsls	r2, r3, #31
 8009434:	d423      	bmi.n	800947e <__lo0bits+0x56>
 8009436:	0798      	lsls	r0, r3, #30
 8009438:	bf49      	itett	mi
 800943a:	085b      	lsrmi	r3, r3, #1
 800943c:	089b      	lsrpl	r3, r3, #2
 800943e:	2001      	movmi	r0, #1
 8009440:	600b      	strmi	r3, [r1, #0]
 8009442:	bf5c      	itt	pl
 8009444:	600b      	strpl	r3, [r1, #0]
 8009446:	2002      	movpl	r0, #2
 8009448:	4770      	bx	lr
 800944a:	b298      	uxth	r0, r3
 800944c:	b9a8      	cbnz	r0, 800947a <__lo0bits+0x52>
 800944e:	0c1b      	lsrs	r3, r3, #16
 8009450:	2010      	movs	r0, #16
 8009452:	b2da      	uxtb	r2, r3
 8009454:	b90a      	cbnz	r2, 800945a <__lo0bits+0x32>
 8009456:	3008      	adds	r0, #8
 8009458:	0a1b      	lsrs	r3, r3, #8
 800945a:	071a      	lsls	r2, r3, #28
 800945c:	bf04      	itt	eq
 800945e:	091b      	lsreq	r3, r3, #4
 8009460:	3004      	addeq	r0, #4
 8009462:	079a      	lsls	r2, r3, #30
 8009464:	bf04      	itt	eq
 8009466:	089b      	lsreq	r3, r3, #2
 8009468:	3002      	addeq	r0, #2
 800946a:	07da      	lsls	r2, r3, #31
 800946c:	d403      	bmi.n	8009476 <__lo0bits+0x4e>
 800946e:	085b      	lsrs	r3, r3, #1
 8009470:	f100 0001 	add.w	r0, r0, #1
 8009474:	d005      	beq.n	8009482 <__lo0bits+0x5a>
 8009476:	600b      	str	r3, [r1, #0]
 8009478:	4770      	bx	lr
 800947a:	4610      	mov	r0, r2
 800947c:	e7e9      	b.n	8009452 <__lo0bits+0x2a>
 800947e:	2000      	movs	r0, #0
 8009480:	4770      	bx	lr
 8009482:	2020      	movs	r0, #32
 8009484:	4770      	bx	lr
	...

08009488 <__i2b>:
 8009488:	b510      	push	{r4, lr}
 800948a:	460c      	mov	r4, r1
 800948c:	2101      	movs	r1, #1
 800948e:	f7ff feb9 	bl	8009204 <_Balloc>
 8009492:	4602      	mov	r2, r0
 8009494:	b928      	cbnz	r0, 80094a2 <__i2b+0x1a>
 8009496:	4b05      	ldr	r3, [pc, #20]	; (80094ac <__i2b+0x24>)
 8009498:	4805      	ldr	r0, [pc, #20]	; (80094b0 <__i2b+0x28>)
 800949a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800949e:	f000 fe01 	bl	800a0a4 <__assert_func>
 80094a2:	2301      	movs	r3, #1
 80094a4:	6144      	str	r4, [r0, #20]
 80094a6:	6103      	str	r3, [r0, #16]
 80094a8:	bd10      	pop	{r4, pc}
 80094aa:	bf00      	nop
 80094ac:	0800b628 	.word	0x0800b628
 80094b0:	0800b6b4 	.word	0x0800b6b4

080094b4 <__multiply>:
 80094b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094b8:	4691      	mov	r9, r2
 80094ba:	690a      	ldr	r2, [r1, #16]
 80094bc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80094c0:	429a      	cmp	r2, r3
 80094c2:	bfb8      	it	lt
 80094c4:	460b      	movlt	r3, r1
 80094c6:	460c      	mov	r4, r1
 80094c8:	bfbc      	itt	lt
 80094ca:	464c      	movlt	r4, r9
 80094cc:	4699      	movlt	r9, r3
 80094ce:	6927      	ldr	r7, [r4, #16]
 80094d0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80094d4:	68a3      	ldr	r3, [r4, #8]
 80094d6:	6861      	ldr	r1, [r4, #4]
 80094d8:	eb07 060a 	add.w	r6, r7, sl
 80094dc:	42b3      	cmp	r3, r6
 80094de:	b085      	sub	sp, #20
 80094e0:	bfb8      	it	lt
 80094e2:	3101      	addlt	r1, #1
 80094e4:	f7ff fe8e 	bl	8009204 <_Balloc>
 80094e8:	b930      	cbnz	r0, 80094f8 <__multiply+0x44>
 80094ea:	4602      	mov	r2, r0
 80094ec:	4b44      	ldr	r3, [pc, #272]	; (8009600 <__multiply+0x14c>)
 80094ee:	4845      	ldr	r0, [pc, #276]	; (8009604 <__multiply+0x150>)
 80094f0:	f240 115d 	movw	r1, #349	; 0x15d
 80094f4:	f000 fdd6 	bl	800a0a4 <__assert_func>
 80094f8:	f100 0514 	add.w	r5, r0, #20
 80094fc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009500:	462b      	mov	r3, r5
 8009502:	2200      	movs	r2, #0
 8009504:	4543      	cmp	r3, r8
 8009506:	d321      	bcc.n	800954c <__multiply+0x98>
 8009508:	f104 0314 	add.w	r3, r4, #20
 800950c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009510:	f109 0314 	add.w	r3, r9, #20
 8009514:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009518:	9202      	str	r2, [sp, #8]
 800951a:	1b3a      	subs	r2, r7, r4
 800951c:	3a15      	subs	r2, #21
 800951e:	f022 0203 	bic.w	r2, r2, #3
 8009522:	3204      	adds	r2, #4
 8009524:	f104 0115 	add.w	r1, r4, #21
 8009528:	428f      	cmp	r7, r1
 800952a:	bf38      	it	cc
 800952c:	2204      	movcc	r2, #4
 800952e:	9201      	str	r2, [sp, #4]
 8009530:	9a02      	ldr	r2, [sp, #8]
 8009532:	9303      	str	r3, [sp, #12]
 8009534:	429a      	cmp	r2, r3
 8009536:	d80c      	bhi.n	8009552 <__multiply+0x9e>
 8009538:	2e00      	cmp	r6, #0
 800953a:	dd03      	ble.n	8009544 <__multiply+0x90>
 800953c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009540:	2b00      	cmp	r3, #0
 8009542:	d05a      	beq.n	80095fa <__multiply+0x146>
 8009544:	6106      	str	r6, [r0, #16]
 8009546:	b005      	add	sp, #20
 8009548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800954c:	f843 2b04 	str.w	r2, [r3], #4
 8009550:	e7d8      	b.n	8009504 <__multiply+0x50>
 8009552:	f8b3 a000 	ldrh.w	sl, [r3]
 8009556:	f1ba 0f00 	cmp.w	sl, #0
 800955a:	d024      	beq.n	80095a6 <__multiply+0xf2>
 800955c:	f104 0e14 	add.w	lr, r4, #20
 8009560:	46a9      	mov	r9, r5
 8009562:	f04f 0c00 	mov.w	ip, #0
 8009566:	f85e 2b04 	ldr.w	r2, [lr], #4
 800956a:	f8d9 1000 	ldr.w	r1, [r9]
 800956e:	fa1f fb82 	uxth.w	fp, r2
 8009572:	b289      	uxth	r1, r1
 8009574:	fb0a 110b 	mla	r1, sl, fp, r1
 8009578:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800957c:	f8d9 2000 	ldr.w	r2, [r9]
 8009580:	4461      	add	r1, ip
 8009582:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009586:	fb0a c20b 	mla	r2, sl, fp, ip
 800958a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800958e:	b289      	uxth	r1, r1
 8009590:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009594:	4577      	cmp	r7, lr
 8009596:	f849 1b04 	str.w	r1, [r9], #4
 800959a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800959e:	d8e2      	bhi.n	8009566 <__multiply+0xb2>
 80095a0:	9a01      	ldr	r2, [sp, #4]
 80095a2:	f845 c002 	str.w	ip, [r5, r2]
 80095a6:	9a03      	ldr	r2, [sp, #12]
 80095a8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80095ac:	3304      	adds	r3, #4
 80095ae:	f1b9 0f00 	cmp.w	r9, #0
 80095b2:	d020      	beq.n	80095f6 <__multiply+0x142>
 80095b4:	6829      	ldr	r1, [r5, #0]
 80095b6:	f104 0c14 	add.w	ip, r4, #20
 80095ba:	46ae      	mov	lr, r5
 80095bc:	f04f 0a00 	mov.w	sl, #0
 80095c0:	f8bc b000 	ldrh.w	fp, [ip]
 80095c4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80095c8:	fb09 220b 	mla	r2, r9, fp, r2
 80095cc:	4492      	add	sl, r2
 80095ce:	b289      	uxth	r1, r1
 80095d0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80095d4:	f84e 1b04 	str.w	r1, [lr], #4
 80095d8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80095dc:	f8be 1000 	ldrh.w	r1, [lr]
 80095e0:	0c12      	lsrs	r2, r2, #16
 80095e2:	fb09 1102 	mla	r1, r9, r2, r1
 80095e6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80095ea:	4567      	cmp	r7, ip
 80095ec:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80095f0:	d8e6      	bhi.n	80095c0 <__multiply+0x10c>
 80095f2:	9a01      	ldr	r2, [sp, #4]
 80095f4:	50a9      	str	r1, [r5, r2]
 80095f6:	3504      	adds	r5, #4
 80095f8:	e79a      	b.n	8009530 <__multiply+0x7c>
 80095fa:	3e01      	subs	r6, #1
 80095fc:	e79c      	b.n	8009538 <__multiply+0x84>
 80095fe:	bf00      	nop
 8009600:	0800b628 	.word	0x0800b628
 8009604:	0800b6b4 	.word	0x0800b6b4

08009608 <__pow5mult>:
 8009608:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800960c:	4615      	mov	r5, r2
 800960e:	f012 0203 	ands.w	r2, r2, #3
 8009612:	4606      	mov	r6, r0
 8009614:	460f      	mov	r7, r1
 8009616:	d007      	beq.n	8009628 <__pow5mult+0x20>
 8009618:	4c25      	ldr	r4, [pc, #148]	; (80096b0 <__pow5mult+0xa8>)
 800961a:	3a01      	subs	r2, #1
 800961c:	2300      	movs	r3, #0
 800961e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009622:	f7ff fe51 	bl	80092c8 <__multadd>
 8009626:	4607      	mov	r7, r0
 8009628:	10ad      	asrs	r5, r5, #2
 800962a:	d03d      	beq.n	80096a8 <__pow5mult+0xa0>
 800962c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800962e:	b97c      	cbnz	r4, 8009650 <__pow5mult+0x48>
 8009630:	2010      	movs	r0, #16
 8009632:	f7ff fdbf 	bl	80091b4 <malloc>
 8009636:	4602      	mov	r2, r0
 8009638:	6270      	str	r0, [r6, #36]	; 0x24
 800963a:	b928      	cbnz	r0, 8009648 <__pow5mult+0x40>
 800963c:	4b1d      	ldr	r3, [pc, #116]	; (80096b4 <__pow5mult+0xac>)
 800963e:	481e      	ldr	r0, [pc, #120]	; (80096b8 <__pow5mult+0xb0>)
 8009640:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009644:	f000 fd2e 	bl	800a0a4 <__assert_func>
 8009648:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800964c:	6004      	str	r4, [r0, #0]
 800964e:	60c4      	str	r4, [r0, #12]
 8009650:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009654:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009658:	b94c      	cbnz	r4, 800966e <__pow5mult+0x66>
 800965a:	f240 2171 	movw	r1, #625	; 0x271
 800965e:	4630      	mov	r0, r6
 8009660:	f7ff ff12 	bl	8009488 <__i2b>
 8009664:	2300      	movs	r3, #0
 8009666:	f8c8 0008 	str.w	r0, [r8, #8]
 800966a:	4604      	mov	r4, r0
 800966c:	6003      	str	r3, [r0, #0]
 800966e:	f04f 0900 	mov.w	r9, #0
 8009672:	07eb      	lsls	r3, r5, #31
 8009674:	d50a      	bpl.n	800968c <__pow5mult+0x84>
 8009676:	4639      	mov	r1, r7
 8009678:	4622      	mov	r2, r4
 800967a:	4630      	mov	r0, r6
 800967c:	f7ff ff1a 	bl	80094b4 <__multiply>
 8009680:	4639      	mov	r1, r7
 8009682:	4680      	mov	r8, r0
 8009684:	4630      	mov	r0, r6
 8009686:	f7ff fdfd 	bl	8009284 <_Bfree>
 800968a:	4647      	mov	r7, r8
 800968c:	106d      	asrs	r5, r5, #1
 800968e:	d00b      	beq.n	80096a8 <__pow5mult+0xa0>
 8009690:	6820      	ldr	r0, [r4, #0]
 8009692:	b938      	cbnz	r0, 80096a4 <__pow5mult+0x9c>
 8009694:	4622      	mov	r2, r4
 8009696:	4621      	mov	r1, r4
 8009698:	4630      	mov	r0, r6
 800969a:	f7ff ff0b 	bl	80094b4 <__multiply>
 800969e:	6020      	str	r0, [r4, #0]
 80096a0:	f8c0 9000 	str.w	r9, [r0]
 80096a4:	4604      	mov	r4, r0
 80096a6:	e7e4      	b.n	8009672 <__pow5mult+0x6a>
 80096a8:	4638      	mov	r0, r7
 80096aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096ae:	bf00      	nop
 80096b0:	0800b800 	.word	0x0800b800
 80096b4:	0800b5b6 	.word	0x0800b5b6
 80096b8:	0800b6b4 	.word	0x0800b6b4

080096bc <__lshift>:
 80096bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096c0:	460c      	mov	r4, r1
 80096c2:	6849      	ldr	r1, [r1, #4]
 80096c4:	6923      	ldr	r3, [r4, #16]
 80096c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80096ca:	68a3      	ldr	r3, [r4, #8]
 80096cc:	4607      	mov	r7, r0
 80096ce:	4691      	mov	r9, r2
 80096d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80096d4:	f108 0601 	add.w	r6, r8, #1
 80096d8:	42b3      	cmp	r3, r6
 80096da:	db0b      	blt.n	80096f4 <__lshift+0x38>
 80096dc:	4638      	mov	r0, r7
 80096de:	f7ff fd91 	bl	8009204 <_Balloc>
 80096e2:	4605      	mov	r5, r0
 80096e4:	b948      	cbnz	r0, 80096fa <__lshift+0x3e>
 80096e6:	4602      	mov	r2, r0
 80096e8:	4b2a      	ldr	r3, [pc, #168]	; (8009794 <__lshift+0xd8>)
 80096ea:	482b      	ldr	r0, [pc, #172]	; (8009798 <__lshift+0xdc>)
 80096ec:	f240 11d9 	movw	r1, #473	; 0x1d9
 80096f0:	f000 fcd8 	bl	800a0a4 <__assert_func>
 80096f4:	3101      	adds	r1, #1
 80096f6:	005b      	lsls	r3, r3, #1
 80096f8:	e7ee      	b.n	80096d8 <__lshift+0x1c>
 80096fa:	2300      	movs	r3, #0
 80096fc:	f100 0114 	add.w	r1, r0, #20
 8009700:	f100 0210 	add.w	r2, r0, #16
 8009704:	4618      	mov	r0, r3
 8009706:	4553      	cmp	r3, sl
 8009708:	db37      	blt.n	800977a <__lshift+0xbe>
 800970a:	6920      	ldr	r0, [r4, #16]
 800970c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009710:	f104 0314 	add.w	r3, r4, #20
 8009714:	f019 091f 	ands.w	r9, r9, #31
 8009718:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800971c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009720:	d02f      	beq.n	8009782 <__lshift+0xc6>
 8009722:	f1c9 0e20 	rsb	lr, r9, #32
 8009726:	468a      	mov	sl, r1
 8009728:	f04f 0c00 	mov.w	ip, #0
 800972c:	681a      	ldr	r2, [r3, #0]
 800972e:	fa02 f209 	lsl.w	r2, r2, r9
 8009732:	ea42 020c 	orr.w	r2, r2, ip
 8009736:	f84a 2b04 	str.w	r2, [sl], #4
 800973a:	f853 2b04 	ldr.w	r2, [r3], #4
 800973e:	4298      	cmp	r0, r3
 8009740:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009744:	d8f2      	bhi.n	800972c <__lshift+0x70>
 8009746:	1b03      	subs	r3, r0, r4
 8009748:	3b15      	subs	r3, #21
 800974a:	f023 0303 	bic.w	r3, r3, #3
 800974e:	3304      	adds	r3, #4
 8009750:	f104 0215 	add.w	r2, r4, #21
 8009754:	4290      	cmp	r0, r2
 8009756:	bf38      	it	cc
 8009758:	2304      	movcc	r3, #4
 800975a:	f841 c003 	str.w	ip, [r1, r3]
 800975e:	f1bc 0f00 	cmp.w	ip, #0
 8009762:	d001      	beq.n	8009768 <__lshift+0xac>
 8009764:	f108 0602 	add.w	r6, r8, #2
 8009768:	3e01      	subs	r6, #1
 800976a:	4638      	mov	r0, r7
 800976c:	612e      	str	r6, [r5, #16]
 800976e:	4621      	mov	r1, r4
 8009770:	f7ff fd88 	bl	8009284 <_Bfree>
 8009774:	4628      	mov	r0, r5
 8009776:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800977a:	f842 0f04 	str.w	r0, [r2, #4]!
 800977e:	3301      	adds	r3, #1
 8009780:	e7c1      	b.n	8009706 <__lshift+0x4a>
 8009782:	3904      	subs	r1, #4
 8009784:	f853 2b04 	ldr.w	r2, [r3], #4
 8009788:	f841 2f04 	str.w	r2, [r1, #4]!
 800978c:	4298      	cmp	r0, r3
 800978e:	d8f9      	bhi.n	8009784 <__lshift+0xc8>
 8009790:	e7ea      	b.n	8009768 <__lshift+0xac>
 8009792:	bf00      	nop
 8009794:	0800b628 	.word	0x0800b628
 8009798:	0800b6b4 	.word	0x0800b6b4

0800979c <__mcmp>:
 800979c:	b530      	push	{r4, r5, lr}
 800979e:	6902      	ldr	r2, [r0, #16]
 80097a0:	690c      	ldr	r4, [r1, #16]
 80097a2:	1b12      	subs	r2, r2, r4
 80097a4:	d10e      	bne.n	80097c4 <__mcmp+0x28>
 80097a6:	f100 0314 	add.w	r3, r0, #20
 80097aa:	3114      	adds	r1, #20
 80097ac:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80097b0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80097b4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80097b8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80097bc:	42a5      	cmp	r5, r4
 80097be:	d003      	beq.n	80097c8 <__mcmp+0x2c>
 80097c0:	d305      	bcc.n	80097ce <__mcmp+0x32>
 80097c2:	2201      	movs	r2, #1
 80097c4:	4610      	mov	r0, r2
 80097c6:	bd30      	pop	{r4, r5, pc}
 80097c8:	4283      	cmp	r3, r0
 80097ca:	d3f3      	bcc.n	80097b4 <__mcmp+0x18>
 80097cc:	e7fa      	b.n	80097c4 <__mcmp+0x28>
 80097ce:	f04f 32ff 	mov.w	r2, #4294967295
 80097d2:	e7f7      	b.n	80097c4 <__mcmp+0x28>

080097d4 <__mdiff>:
 80097d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097d8:	460c      	mov	r4, r1
 80097da:	4606      	mov	r6, r0
 80097dc:	4611      	mov	r1, r2
 80097de:	4620      	mov	r0, r4
 80097e0:	4690      	mov	r8, r2
 80097e2:	f7ff ffdb 	bl	800979c <__mcmp>
 80097e6:	1e05      	subs	r5, r0, #0
 80097e8:	d110      	bne.n	800980c <__mdiff+0x38>
 80097ea:	4629      	mov	r1, r5
 80097ec:	4630      	mov	r0, r6
 80097ee:	f7ff fd09 	bl	8009204 <_Balloc>
 80097f2:	b930      	cbnz	r0, 8009802 <__mdiff+0x2e>
 80097f4:	4b3a      	ldr	r3, [pc, #232]	; (80098e0 <__mdiff+0x10c>)
 80097f6:	4602      	mov	r2, r0
 80097f8:	f240 2132 	movw	r1, #562	; 0x232
 80097fc:	4839      	ldr	r0, [pc, #228]	; (80098e4 <__mdiff+0x110>)
 80097fe:	f000 fc51 	bl	800a0a4 <__assert_func>
 8009802:	2301      	movs	r3, #1
 8009804:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009808:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800980c:	bfa4      	itt	ge
 800980e:	4643      	movge	r3, r8
 8009810:	46a0      	movge	r8, r4
 8009812:	4630      	mov	r0, r6
 8009814:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009818:	bfa6      	itte	ge
 800981a:	461c      	movge	r4, r3
 800981c:	2500      	movge	r5, #0
 800981e:	2501      	movlt	r5, #1
 8009820:	f7ff fcf0 	bl	8009204 <_Balloc>
 8009824:	b920      	cbnz	r0, 8009830 <__mdiff+0x5c>
 8009826:	4b2e      	ldr	r3, [pc, #184]	; (80098e0 <__mdiff+0x10c>)
 8009828:	4602      	mov	r2, r0
 800982a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800982e:	e7e5      	b.n	80097fc <__mdiff+0x28>
 8009830:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009834:	6926      	ldr	r6, [r4, #16]
 8009836:	60c5      	str	r5, [r0, #12]
 8009838:	f104 0914 	add.w	r9, r4, #20
 800983c:	f108 0514 	add.w	r5, r8, #20
 8009840:	f100 0e14 	add.w	lr, r0, #20
 8009844:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009848:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800984c:	f108 0210 	add.w	r2, r8, #16
 8009850:	46f2      	mov	sl, lr
 8009852:	2100      	movs	r1, #0
 8009854:	f859 3b04 	ldr.w	r3, [r9], #4
 8009858:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800985c:	fa1f f883 	uxth.w	r8, r3
 8009860:	fa11 f18b 	uxtah	r1, r1, fp
 8009864:	0c1b      	lsrs	r3, r3, #16
 8009866:	eba1 0808 	sub.w	r8, r1, r8
 800986a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800986e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009872:	fa1f f888 	uxth.w	r8, r8
 8009876:	1419      	asrs	r1, r3, #16
 8009878:	454e      	cmp	r6, r9
 800987a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800987e:	f84a 3b04 	str.w	r3, [sl], #4
 8009882:	d8e7      	bhi.n	8009854 <__mdiff+0x80>
 8009884:	1b33      	subs	r3, r6, r4
 8009886:	3b15      	subs	r3, #21
 8009888:	f023 0303 	bic.w	r3, r3, #3
 800988c:	3304      	adds	r3, #4
 800988e:	3415      	adds	r4, #21
 8009890:	42a6      	cmp	r6, r4
 8009892:	bf38      	it	cc
 8009894:	2304      	movcc	r3, #4
 8009896:	441d      	add	r5, r3
 8009898:	4473      	add	r3, lr
 800989a:	469e      	mov	lr, r3
 800989c:	462e      	mov	r6, r5
 800989e:	4566      	cmp	r6, ip
 80098a0:	d30e      	bcc.n	80098c0 <__mdiff+0xec>
 80098a2:	f10c 0203 	add.w	r2, ip, #3
 80098a6:	1b52      	subs	r2, r2, r5
 80098a8:	f022 0203 	bic.w	r2, r2, #3
 80098ac:	3d03      	subs	r5, #3
 80098ae:	45ac      	cmp	ip, r5
 80098b0:	bf38      	it	cc
 80098b2:	2200      	movcc	r2, #0
 80098b4:	441a      	add	r2, r3
 80098b6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80098ba:	b17b      	cbz	r3, 80098dc <__mdiff+0x108>
 80098bc:	6107      	str	r7, [r0, #16]
 80098be:	e7a3      	b.n	8009808 <__mdiff+0x34>
 80098c0:	f856 8b04 	ldr.w	r8, [r6], #4
 80098c4:	fa11 f288 	uxtah	r2, r1, r8
 80098c8:	1414      	asrs	r4, r2, #16
 80098ca:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80098ce:	b292      	uxth	r2, r2
 80098d0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80098d4:	f84e 2b04 	str.w	r2, [lr], #4
 80098d8:	1421      	asrs	r1, r4, #16
 80098da:	e7e0      	b.n	800989e <__mdiff+0xca>
 80098dc:	3f01      	subs	r7, #1
 80098de:	e7ea      	b.n	80098b6 <__mdiff+0xe2>
 80098e0:	0800b628 	.word	0x0800b628
 80098e4:	0800b6b4 	.word	0x0800b6b4

080098e8 <__ulp>:
 80098e8:	b082      	sub	sp, #8
 80098ea:	ed8d 0b00 	vstr	d0, [sp]
 80098ee:	9b01      	ldr	r3, [sp, #4]
 80098f0:	4912      	ldr	r1, [pc, #72]	; (800993c <__ulp+0x54>)
 80098f2:	4019      	ands	r1, r3
 80098f4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80098f8:	2900      	cmp	r1, #0
 80098fa:	dd05      	ble.n	8009908 <__ulp+0x20>
 80098fc:	2200      	movs	r2, #0
 80098fe:	460b      	mov	r3, r1
 8009900:	ec43 2b10 	vmov	d0, r2, r3
 8009904:	b002      	add	sp, #8
 8009906:	4770      	bx	lr
 8009908:	4249      	negs	r1, r1
 800990a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800990e:	ea4f 5021 	mov.w	r0, r1, asr #20
 8009912:	f04f 0200 	mov.w	r2, #0
 8009916:	f04f 0300 	mov.w	r3, #0
 800991a:	da04      	bge.n	8009926 <__ulp+0x3e>
 800991c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8009920:	fa41 f300 	asr.w	r3, r1, r0
 8009924:	e7ec      	b.n	8009900 <__ulp+0x18>
 8009926:	f1a0 0114 	sub.w	r1, r0, #20
 800992a:	291e      	cmp	r1, #30
 800992c:	bfda      	itte	le
 800992e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8009932:	fa20 f101 	lsrle.w	r1, r0, r1
 8009936:	2101      	movgt	r1, #1
 8009938:	460a      	mov	r2, r1
 800993a:	e7e1      	b.n	8009900 <__ulp+0x18>
 800993c:	7ff00000 	.word	0x7ff00000

08009940 <__b2d>:
 8009940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009942:	6905      	ldr	r5, [r0, #16]
 8009944:	f100 0714 	add.w	r7, r0, #20
 8009948:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800994c:	1f2e      	subs	r6, r5, #4
 800994e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009952:	4620      	mov	r0, r4
 8009954:	f7ff fd48 	bl	80093e8 <__hi0bits>
 8009958:	f1c0 0320 	rsb	r3, r0, #32
 800995c:	280a      	cmp	r0, #10
 800995e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80099dc <__b2d+0x9c>
 8009962:	600b      	str	r3, [r1, #0]
 8009964:	dc14      	bgt.n	8009990 <__b2d+0x50>
 8009966:	f1c0 0e0b 	rsb	lr, r0, #11
 800996a:	fa24 f10e 	lsr.w	r1, r4, lr
 800996e:	42b7      	cmp	r7, r6
 8009970:	ea41 030c 	orr.w	r3, r1, ip
 8009974:	bf34      	ite	cc
 8009976:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800997a:	2100      	movcs	r1, #0
 800997c:	3015      	adds	r0, #21
 800997e:	fa04 f000 	lsl.w	r0, r4, r0
 8009982:	fa21 f10e 	lsr.w	r1, r1, lr
 8009986:	ea40 0201 	orr.w	r2, r0, r1
 800998a:	ec43 2b10 	vmov	d0, r2, r3
 800998e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009990:	42b7      	cmp	r7, r6
 8009992:	bf3a      	itte	cc
 8009994:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009998:	f1a5 0608 	subcc.w	r6, r5, #8
 800999c:	2100      	movcs	r1, #0
 800999e:	380b      	subs	r0, #11
 80099a0:	d017      	beq.n	80099d2 <__b2d+0x92>
 80099a2:	f1c0 0c20 	rsb	ip, r0, #32
 80099a6:	fa04 f500 	lsl.w	r5, r4, r0
 80099aa:	42be      	cmp	r6, r7
 80099ac:	fa21 f40c 	lsr.w	r4, r1, ip
 80099b0:	ea45 0504 	orr.w	r5, r5, r4
 80099b4:	bf8c      	ite	hi
 80099b6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80099ba:	2400      	movls	r4, #0
 80099bc:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80099c0:	fa01 f000 	lsl.w	r0, r1, r0
 80099c4:	fa24 f40c 	lsr.w	r4, r4, ip
 80099c8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80099cc:	ea40 0204 	orr.w	r2, r0, r4
 80099d0:	e7db      	b.n	800998a <__b2d+0x4a>
 80099d2:	ea44 030c 	orr.w	r3, r4, ip
 80099d6:	460a      	mov	r2, r1
 80099d8:	e7d7      	b.n	800998a <__b2d+0x4a>
 80099da:	bf00      	nop
 80099dc:	3ff00000 	.word	0x3ff00000

080099e0 <__d2b>:
 80099e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80099e4:	4689      	mov	r9, r1
 80099e6:	2101      	movs	r1, #1
 80099e8:	ec57 6b10 	vmov	r6, r7, d0
 80099ec:	4690      	mov	r8, r2
 80099ee:	f7ff fc09 	bl	8009204 <_Balloc>
 80099f2:	4604      	mov	r4, r0
 80099f4:	b930      	cbnz	r0, 8009a04 <__d2b+0x24>
 80099f6:	4602      	mov	r2, r0
 80099f8:	4b25      	ldr	r3, [pc, #148]	; (8009a90 <__d2b+0xb0>)
 80099fa:	4826      	ldr	r0, [pc, #152]	; (8009a94 <__d2b+0xb4>)
 80099fc:	f240 310a 	movw	r1, #778	; 0x30a
 8009a00:	f000 fb50 	bl	800a0a4 <__assert_func>
 8009a04:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009a08:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009a0c:	bb35      	cbnz	r5, 8009a5c <__d2b+0x7c>
 8009a0e:	2e00      	cmp	r6, #0
 8009a10:	9301      	str	r3, [sp, #4]
 8009a12:	d028      	beq.n	8009a66 <__d2b+0x86>
 8009a14:	4668      	mov	r0, sp
 8009a16:	9600      	str	r6, [sp, #0]
 8009a18:	f7ff fd06 	bl	8009428 <__lo0bits>
 8009a1c:	9900      	ldr	r1, [sp, #0]
 8009a1e:	b300      	cbz	r0, 8009a62 <__d2b+0x82>
 8009a20:	9a01      	ldr	r2, [sp, #4]
 8009a22:	f1c0 0320 	rsb	r3, r0, #32
 8009a26:	fa02 f303 	lsl.w	r3, r2, r3
 8009a2a:	430b      	orrs	r3, r1
 8009a2c:	40c2      	lsrs	r2, r0
 8009a2e:	6163      	str	r3, [r4, #20]
 8009a30:	9201      	str	r2, [sp, #4]
 8009a32:	9b01      	ldr	r3, [sp, #4]
 8009a34:	61a3      	str	r3, [r4, #24]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	bf14      	ite	ne
 8009a3a:	2202      	movne	r2, #2
 8009a3c:	2201      	moveq	r2, #1
 8009a3e:	6122      	str	r2, [r4, #16]
 8009a40:	b1d5      	cbz	r5, 8009a78 <__d2b+0x98>
 8009a42:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009a46:	4405      	add	r5, r0
 8009a48:	f8c9 5000 	str.w	r5, [r9]
 8009a4c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009a50:	f8c8 0000 	str.w	r0, [r8]
 8009a54:	4620      	mov	r0, r4
 8009a56:	b003      	add	sp, #12
 8009a58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009a5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009a60:	e7d5      	b.n	8009a0e <__d2b+0x2e>
 8009a62:	6161      	str	r1, [r4, #20]
 8009a64:	e7e5      	b.n	8009a32 <__d2b+0x52>
 8009a66:	a801      	add	r0, sp, #4
 8009a68:	f7ff fcde 	bl	8009428 <__lo0bits>
 8009a6c:	9b01      	ldr	r3, [sp, #4]
 8009a6e:	6163      	str	r3, [r4, #20]
 8009a70:	2201      	movs	r2, #1
 8009a72:	6122      	str	r2, [r4, #16]
 8009a74:	3020      	adds	r0, #32
 8009a76:	e7e3      	b.n	8009a40 <__d2b+0x60>
 8009a78:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009a7c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009a80:	f8c9 0000 	str.w	r0, [r9]
 8009a84:	6918      	ldr	r0, [r3, #16]
 8009a86:	f7ff fcaf 	bl	80093e8 <__hi0bits>
 8009a8a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009a8e:	e7df      	b.n	8009a50 <__d2b+0x70>
 8009a90:	0800b628 	.word	0x0800b628
 8009a94:	0800b6b4 	.word	0x0800b6b4

08009a98 <__ratio>:
 8009a98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a9c:	4688      	mov	r8, r1
 8009a9e:	4669      	mov	r1, sp
 8009aa0:	4681      	mov	r9, r0
 8009aa2:	f7ff ff4d 	bl	8009940 <__b2d>
 8009aa6:	a901      	add	r1, sp, #4
 8009aa8:	4640      	mov	r0, r8
 8009aaa:	ec55 4b10 	vmov	r4, r5, d0
 8009aae:	f7ff ff47 	bl	8009940 <__b2d>
 8009ab2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009ab6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009aba:	eba3 0c02 	sub.w	ip, r3, r2
 8009abe:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009ac2:	1a9b      	subs	r3, r3, r2
 8009ac4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009ac8:	ec51 0b10 	vmov	r0, r1, d0
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	bfd6      	itet	le
 8009ad0:	460a      	movle	r2, r1
 8009ad2:	462a      	movgt	r2, r5
 8009ad4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009ad8:	468b      	mov	fp, r1
 8009ada:	462f      	mov	r7, r5
 8009adc:	bfd4      	ite	le
 8009ade:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009ae2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009ae6:	4620      	mov	r0, r4
 8009ae8:	ee10 2a10 	vmov	r2, s0
 8009aec:	465b      	mov	r3, fp
 8009aee:	4639      	mov	r1, r7
 8009af0:	f7f6 feac 	bl	800084c <__aeabi_ddiv>
 8009af4:	ec41 0b10 	vmov	d0, r0, r1
 8009af8:	b003      	add	sp, #12
 8009afa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009afe <__copybits>:
 8009afe:	3901      	subs	r1, #1
 8009b00:	b570      	push	{r4, r5, r6, lr}
 8009b02:	1149      	asrs	r1, r1, #5
 8009b04:	6914      	ldr	r4, [r2, #16]
 8009b06:	3101      	adds	r1, #1
 8009b08:	f102 0314 	add.w	r3, r2, #20
 8009b0c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009b10:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009b14:	1f05      	subs	r5, r0, #4
 8009b16:	42a3      	cmp	r3, r4
 8009b18:	d30c      	bcc.n	8009b34 <__copybits+0x36>
 8009b1a:	1aa3      	subs	r3, r4, r2
 8009b1c:	3b11      	subs	r3, #17
 8009b1e:	f023 0303 	bic.w	r3, r3, #3
 8009b22:	3211      	adds	r2, #17
 8009b24:	42a2      	cmp	r2, r4
 8009b26:	bf88      	it	hi
 8009b28:	2300      	movhi	r3, #0
 8009b2a:	4418      	add	r0, r3
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	4288      	cmp	r0, r1
 8009b30:	d305      	bcc.n	8009b3e <__copybits+0x40>
 8009b32:	bd70      	pop	{r4, r5, r6, pc}
 8009b34:	f853 6b04 	ldr.w	r6, [r3], #4
 8009b38:	f845 6f04 	str.w	r6, [r5, #4]!
 8009b3c:	e7eb      	b.n	8009b16 <__copybits+0x18>
 8009b3e:	f840 3b04 	str.w	r3, [r0], #4
 8009b42:	e7f4      	b.n	8009b2e <__copybits+0x30>

08009b44 <__any_on>:
 8009b44:	f100 0214 	add.w	r2, r0, #20
 8009b48:	6900      	ldr	r0, [r0, #16]
 8009b4a:	114b      	asrs	r3, r1, #5
 8009b4c:	4298      	cmp	r0, r3
 8009b4e:	b510      	push	{r4, lr}
 8009b50:	db11      	blt.n	8009b76 <__any_on+0x32>
 8009b52:	dd0a      	ble.n	8009b6a <__any_on+0x26>
 8009b54:	f011 011f 	ands.w	r1, r1, #31
 8009b58:	d007      	beq.n	8009b6a <__any_on+0x26>
 8009b5a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009b5e:	fa24 f001 	lsr.w	r0, r4, r1
 8009b62:	fa00 f101 	lsl.w	r1, r0, r1
 8009b66:	428c      	cmp	r4, r1
 8009b68:	d10b      	bne.n	8009b82 <__any_on+0x3e>
 8009b6a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009b6e:	4293      	cmp	r3, r2
 8009b70:	d803      	bhi.n	8009b7a <__any_on+0x36>
 8009b72:	2000      	movs	r0, #0
 8009b74:	bd10      	pop	{r4, pc}
 8009b76:	4603      	mov	r3, r0
 8009b78:	e7f7      	b.n	8009b6a <__any_on+0x26>
 8009b7a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009b7e:	2900      	cmp	r1, #0
 8009b80:	d0f5      	beq.n	8009b6e <__any_on+0x2a>
 8009b82:	2001      	movs	r0, #1
 8009b84:	e7f6      	b.n	8009b74 <__any_on+0x30>

08009b86 <_calloc_r>:
 8009b86:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009b88:	fba1 2402 	umull	r2, r4, r1, r2
 8009b8c:	b94c      	cbnz	r4, 8009ba2 <_calloc_r+0x1c>
 8009b8e:	4611      	mov	r1, r2
 8009b90:	9201      	str	r2, [sp, #4]
 8009b92:	f000 f87b 	bl	8009c8c <_malloc_r>
 8009b96:	9a01      	ldr	r2, [sp, #4]
 8009b98:	4605      	mov	r5, r0
 8009b9a:	b930      	cbnz	r0, 8009baa <_calloc_r+0x24>
 8009b9c:	4628      	mov	r0, r5
 8009b9e:	b003      	add	sp, #12
 8009ba0:	bd30      	pop	{r4, r5, pc}
 8009ba2:	220c      	movs	r2, #12
 8009ba4:	6002      	str	r2, [r0, #0]
 8009ba6:	2500      	movs	r5, #0
 8009ba8:	e7f8      	b.n	8009b9c <_calloc_r+0x16>
 8009baa:	4621      	mov	r1, r4
 8009bac:	f7fc fbc0 	bl	8006330 <memset>
 8009bb0:	e7f4      	b.n	8009b9c <_calloc_r+0x16>
	...

08009bb4 <_free_r>:
 8009bb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009bb6:	2900      	cmp	r1, #0
 8009bb8:	d044      	beq.n	8009c44 <_free_r+0x90>
 8009bba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009bbe:	9001      	str	r0, [sp, #4]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	f1a1 0404 	sub.w	r4, r1, #4
 8009bc6:	bfb8      	it	lt
 8009bc8:	18e4      	addlt	r4, r4, r3
 8009bca:	f000 fab5 	bl	800a138 <__malloc_lock>
 8009bce:	4a1e      	ldr	r2, [pc, #120]	; (8009c48 <_free_r+0x94>)
 8009bd0:	9801      	ldr	r0, [sp, #4]
 8009bd2:	6813      	ldr	r3, [r2, #0]
 8009bd4:	b933      	cbnz	r3, 8009be4 <_free_r+0x30>
 8009bd6:	6063      	str	r3, [r4, #4]
 8009bd8:	6014      	str	r4, [r2, #0]
 8009bda:	b003      	add	sp, #12
 8009bdc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009be0:	f000 bab0 	b.w	800a144 <__malloc_unlock>
 8009be4:	42a3      	cmp	r3, r4
 8009be6:	d908      	bls.n	8009bfa <_free_r+0x46>
 8009be8:	6825      	ldr	r5, [r4, #0]
 8009bea:	1961      	adds	r1, r4, r5
 8009bec:	428b      	cmp	r3, r1
 8009bee:	bf01      	itttt	eq
 8009bf0:	6819      	ldreq	r1, [r3, #0]
 8009bf2:	685b      	ldreq	r3, [r3, #4]
 8009bf4:	1949      	addeq	r1, r1, r5
 8009bf6:	6021      	streq	r1, [r4, #0]
 8009bf8:	e7ed      	b.n	8009bd6 <_free_r+0x22>
 8009bfa:	461a      	mov	r2, r3
 8009bfc:	685b      	ldr	r3, [r3, #4]
 8009bfe:	b10b      	cbz	r3, 8009c04 <_free_r+0x50>
 8009c00:	42a3      	cmp	r3, r4
 8009c02:	d9fa      	bls.n	8009bfa <_free_r+0x46>
 8009c04:	6811      	ldr	r1, [r2, #0]
 8009c06:	1855      	adds	r5, r2, r1
 8009c08:	42a5      	cmp	r5, r4
 8009c0a:	d10b      	bne.n	8009c24 <_free_r+0x70>
 8009c0c:	6824      	ldr	r4, [r4, #0]
 8009c0e:	4421      	add	r1, r4
 8009c10:	1854      	adds	r4, r2, r1
 8009c12:	42a3      	cmp	r3, r4
 8009c14:	6011      	str	r1, [r2, #0]
 8009c16:	d1e0      	bne.n	8009bda <_free_r+0x26>
 8009c18:	681c      	ldr	r4, [r3, #0]
 8009c1a:	685b      	ldr	r3, [r3, #4]
 8009c1c:	6053      	str	r3, [r2, #4]
 8009c1e:	4421      	add	r1, r4
 8009c20:	6011      	str	r1, [r2, #0]
 8009c22:	e7da      	b.n	8009bda <_free_r+0x26>
 8009c24:	d902      	bls.n	8009c2c <_free_r+0x78>
 8009c26:	230c      	movs	r3, #12
 8009c28:	6003      	str	r3, [r0, #0]
 8009c2a:	e7d6      	b.n	8009bda <_free_r+0x26>
 8009c2c:	6825      	ldr	r5, [r4, #0]
 8009c2e:	1961      	adds	r1, r4, r5
 8009c30:	428b      	cmp	r3, r1
 8009c32:	bf04      	itt	eq
 8009c34:	6819      	ldreq	r1, [r3, #0]
 8009c36:	685b      	ldreq	r3, [r3, #4]
 8009c38:	6063      	str	r3, [r4, #4]
 8009c3a:	bf04      	itt	eq
 8009c3c:	1949      	addeq	r1, r1, r5
 8009c3e:	6021      	streq	r1, [r4, #0]
 8009c40:	6054      	str	r4, [r2, #4]
 8009c42:	e7ca      	b.n	8009bda <_free_r+0x26>
 8009c44:	b003      	add	sp, #12
 8009c46:	bd30      	pop	{r4, r5, pc}
 8009c48:	20000380 	.word	0x20000380

08009c4c <sbrk_aligned>:
 8009c4c:	b570      	push	{r4, r5, r6, lr}
 8009c4e:	4e0e      	ldr	r6, [pc, #56]	; (8009c88 <sbrk_aligned+0x3c>)
 8009c50:	460c      	mov	r4, r1
 8009c52:	6831      	ldr	r1, [r6, #0]
 8009c54:	4605      	mov	r5, r0
 8009c56:	b911      	cbnz	r1, 8009c5e <sbrk_aligned+0x12>
 8009c58:	f000 f9f2 	bl	800a040 <_sbrk_r>
 8009c5c:	6030      	str	r0, [r6, #0]
 8009c5e:	4621      	mov	r1, r4
 8009c60:	4628      	mov	r0, r5
 8009c62:	f000 f9ed 	bl	800a040 <_sbrk_r>
 8009c66:	1c43      	adds	r3, r0, #1
 8009c68:	d00a      	beq.n	8009c80 <sbrk_aligned+0x34>
 8009c6a:	1cc4      	adds	r4, r0, #3
 8009c6c:	f024 0403 	bic.w	r4, r4, #3
 8009c70:	42a0      	cmp	r0, r4
 8009c72:	d007      	beq.n	8009c84 <sbrk_aligned+0x38>
 8009c74:	1a21      	subs	r1, r4, r0
 8009c76:	4628      	mov	r0, r5
 8009c78:	f000 f9e2 	bl	800a040 <_sbrk_r>
 8009c7c:	3001      	adds	r0, #1
 8009c7e:	d101      	bne.n	8009c84 <sbrk_aligned+0x38>
 8009c80:	f04f 34ff 	mov.w	r4, #4294967295
 8009c84:	4620      	mov	r0, r4
 8009c86:	bd70      	pop	{r4, r5, r6, pc}
 8009c88:	20000384 	.word	0x20000384

08009c8c <_malloc_r>:
 8009c8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c90:	1ccd      	adds	r5, r1, #3
 8009c92:	f025 0503 	bic.w	r5, r5, #3
 8009c96:	3508      	adds	r5, #8
 8009c98:	2d0c      	cmp	r5, #12
 8009c9a:	bf38      	it	cc
 8009c9c:	250c      	movcc	r5, #12
 8009c9e:	2d00      	cmp	r5, #0
 8009ca0:	4607      	mov	r7, r0
 8009ca2:	db01      	blt.n	8009ca8 <_malloc_r+0x1c>
 8009ca4:	42a9      	cmp	r1, r5
 8009ca6:	d905      	bls.n	8009cb4 <_malloc_r+0x28>
 8009ca8:	230c      	movs	r3, #12
 8009caa:	603b      	str	r3, [r7, #0]
 8009cac:	2600      	movs	r6, #0
 8009cae:	4630      	mov	r0, r6
 8009cb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009cb4:	4e2e      	ldr	r6, [pc, #184]	; (8009d70 <_malloc_r+0xe4>)
 8009cb6:	f000 fa3f 	bl	800a138 <__malloc_lock>
 8009cba:	6833      	ldr	r3, [r6, #0]
 8009cbc:	461c      	mov	r4, r3
 8009cbe:	bb34      	cbnz	r4, 8009d0e <_malloc_r+0x82>
 8009cc0:	4629      	mov	r1, r5
 8009cc2:	4638      	mov	r0, r7
 8009cc4:	f7ff ffc2 	bl	8009c4c <sbrk_aligned>
 8009cc8:	1c43      	adds	r3, r0, #1
 8009cca:	4604      	mov	r4, r0
 8009ccc:	d14d      	bne.n	8009d6a <_malloc_r+0xde>
 8009cce:	6834      	ldr	r4, [r6, #0]
 8009cd0:	4626      	mov	r6, r4
 8009cd2:	2e00      	cmp	r6, #0
 8009cd4:	d140      	bne.n	8009d58 <_malloc_r+0xcc>
 8009cd6:	6823      	ldr	r3, [r4, #0]
 8009cd8:	4631      	mov	r1, r6
 8009cda:	4638      	mov	r0, r7
 8009cdc:	eb04 0803 	add.w	r8, r4, r3
 8009ce0:	f000 f9ae 	bl	800a040 <_sbrk_r>
 8009ce4:	4580      	cmp	r8, r0
 8009ce6:	d13a      	bne.n	8009d5e <_malloc_r+0xd2>
 8009ce8:	6821      	ldr	r1, [r4, #0]
 8009cea:	3503      	adds	r5, #3
 8009cec:	1a6d      	subs	r5, r5, r1
 8009cee:	f025 0503 	bic.w	r5, r5, #3
 8009cf2:	3508      	adds	r5, #8
 8009cf4:	2d0c      	cmp	r5, #12
 8009cf6:	bf38      	it	cc
 8009cf8:	250c      	movcc	r5, #12
 8009cfa:	4629      	mov	r1, r5
 8009cfc:	4638      	mov	r0, r7
 8009cfe:	f7ff ffa5 	bl	8009c4c <sbrk_aligned>
 8009d02:	3001      	adds	r0, #1
 8009d04:	d02b      	beq.n	8009d5e <_malloc_r+0xd2>
 8009d06:	6823      	ldr	r3, [r4, #0]
 8009d08:	442b      	add	r3, r5
 8009d0a:	6023      	str	r3, [r4, #0]
 8009d0c:	e00e      	b.n	8009d2c <_malloc_r+0xa0>
 8009d0e:	6822      	ldr	r2, [r4, #0]
 8009d10:	1b52      	subs	r2, r2, r5
 8009d12:	d41e      	bmi.n	8009d52 <_malloc_r+0xc6>
 8009d14:	2a0b      	cmp	r2, #11
 8009d16:	d916      	bls.n	8009d46 <_malloc_r+0xba>
 8009d18:	1961      	adds	r1, r4, r5
 8009d1a:	42a3      	cmp	r3, r4
 8009d1c:	6025      	str	r5, [r4, #0]
 8009d1e:	bf18      	it	ne
 8009d20:	6059      	strne	r1, [r3, #4]
 8009d22:	6863      	ldr	r3, [r4, #4]
 8009d24:	bf08      	it	eq
 8009d26:	6031      	streq	r1, [r6, #0]
 8009d28:	5162      	str	r2, [r4, r5]
 8009d2a:	604b      	str	r3, [r1, #4]
 8009d2c:	4638      	mov	r0, r7
 8009d2e:	f104 060b 	add.w	r6, r4, #11
 8009d32:	f000 fa07 	bl	800a144 <__malloc_unlock>
 8009d36:	f026 0607 	bic.w	r6, r6, #7
 8009d3a:	1d23      	adds	r3, r4, #4
 8009d3c:	1af2      	subs	r2, r6, r3
 8009d3e:	d0b6      	beq.n	8009cae <_malloc_r+0x22>
 8009d40:	1b9b      	subs	r3, r3, r6
 8009d42:	50a3      	str	r3, [r4, r2]
 8009d44:	e7b3      	b.n	8009cae <_malloc_r+0x22>
 8009d46:	6862      	ldr	r2, [r4, #4]
 8009d48:	42a3      	cmp	r3, r4
 8009d4a:	bf0c      	ite	eq
 8009d4c:	6032      	streq	r2, [r6, #0]
 8009d4e:	605a      	strne	r2, [r3, #4]
 8009d50:	e7ec      	b.n	8009d2c <_malloc_r+0xa0>
 8009d52:	4623      	mov	r3, r4
 8009d54:	6864      	ldr	r4, [r4, #4]
 8009d56:	e7b2      	b.n	8009cbe <_malloc_r+0x32>
 8009d58:	4634      	mov	r4, r6
 8009d5a:	6876      	ldr	r6, [r6, #4]
 8009d5c:	e7b9      	b.n	8009cd2 <_malloc_r+0x46>
 8009d5e:	230c      	movs	r3, #12
 8009d60:	603b      	str	r3, [r7, #0]
 8009d62:	4638      	mov	r0, r7
 8009d64:	f000 f9ee 	bl	800a144 <__malloc_unlock>
 8009d68:	e7a1      	b.n	8009cae <_malloc_r+0x22>
 8009d6a:	6025      	str	r5, [r4, #0]
 8009d6c:	e7de      	b.n	8009d2c <_malloc_r+0xa0>
 8009d6e:	bf00      	nop
 8009d70:	20000380 	.word	0x20000380

08009d74 <__ssputs_r>:
 8009d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d78:	688e      	ldr	r6, [r1, #8]
 8009d7a:	429e      	cmp	r6, r3
 8009d7c:	4682      	mov	sl, r0
 8009d7e:	460c      	mov	r4, r1
 8009d80:	4690      	mov	r8, r2
 8009d82:	461f      	mov	r7, r3
 8009d84:	d838      	bhi.n	8009df8 <__ssputs_r+0x84>
 8009d86:	898a      	ldrh	r2, [r1, #12]
 8009d88:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009d8c:	d032      	beq.n	8009df4 <__ssputs_r+0x80>
 8009d8e:	6825      	ldr	r5, [r4, #0]
 8009d90:	6909      	ldr	r1, [r1, #16]
 8009d92:	eba5 0901 	sub.w	r9, r5, r1
 8009d96:	6965      	ldr	r5, [r4, #20]
 8009d98:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009d9c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009da0:	3301      	adds	r3, #1
 8009da2:	444b      	add	r3, r9
 8009da4:	106d      	asrs	r5, r5, #1
 8009da6:	429d      	cmp	r5, r3
 8009da8:	bf38      	it	cc
 8009daa:	461d      	movcc	r5, r3
 8009dac:	0553      	lsls	r3, r2, #21
 8009dae:	d531      	bpl.n	8009e14 <__ssputs_r+0xa0>
 8009db0:	4629      	mov	r1, r5
 8009db2:	f7ff ff6b 	bl	8009c8c <_malloc_r>
 8009db6:	4606      	mov	r6, r0
 8009db8:	b950      	cbnz	r0, 8009dd0 <__ssputs_r+0x5c>
 8009dba:	230c      	movs	r3, #12
 8009dbc:	f8ca 3000 	str.w	r3, [sl]
 8009dc0:	89a3      	ldrh	r3, [r4, #12]
 8009dc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009dc6:	81a3      	strh	r3, [r4, #12]
 8009dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8009dcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009dd0:	6921      	ldr	r1, [r4, #16]
 8009dd2:	464a      	mov	r2, r9
 8009dd4:	f7ff fa08 	bl	80091e8 <memcpy>
 8009dd8:	89a3      	ldrh	r3, [r4, #12]
 8009dda:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009dde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009de2:	81a3      	strh	r3, [r4, #12]
 8009de4:	6126      	str	r6, [r4, #16]
 8009de6:	6165      	str	r5, [r4, #20]
 8009de8:	444e      	add	r6, r9
 8009dea:	eba5 0509 	sub.w	r5, r5, r9
 8009dee:	6026      	str	r6, [r4, #0]
 8009df0:	60a5      	str	r5, [r4, #8]
 8009df2:	463e      	mov	r6, r7
 8009df4:	42be      	cmp	r6, r7
 8009df6:	d900      	bls.n	8009dfa <__ssputs_r+0x86>
 8009df8:	463e      	mov	r6, r7
 8009dfa:	6820      	ldr	r0, [r4, #0]
 8009dfc:	4632      	mov	r2, r6
 8009dfe:	4641      	mov	r1, r8
 8009e00:	f000 f980 	bl	800a104 <memmove>
 8009e04:	68a3      	ldr	r3, [r4, #8]
 8009e06:	1b9b      	subs	r3, r3, r6
 8009e08:	60a3      	str	r3, [r4, #8]
 8009e0a:	6823      	ldr	r3, [r4, #0]
 8009e0c:	4433      	add	r3, r6
 8009e0e:	6023      	str	r3, [r4, #0]
 8009e10:	2000      	movs	r0, #0
 8009e12:	e7db      	b.n	8009dcc <__ssputs_r+0x58>
 8009e14:	462a      	mov	r2, r5
 8009e16:	f000 f99b 	bl	800a150 <_realloc_r>
 8009e1a:	4606      	mov	r6, r0
 8009e1c:	2800      	cmp	r0, #0
 8009e1e:	d1e1      	bne.n	8009de4 <__ssputs_r+0x70>
 8009e20:	6921      	ldr	r1, [r4, #16]
 8009e22:	4650      	mov	r0, sl
 8009e24:	f7ff fec6 	bl	8009bb4 <_free_r>
 8009e28:	e7c7      	b.n	8009dba <__ssputs_r+0x46>
	...

08009e2c <_svfiprintf_r>:
 8009e2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e30:	4698      	mov	r8, r3
 8009e32:	898b      	ldrh	r3, [r1, #12]
 8009e34:	061b      	lsls	r3, r3, #24
 8009e36:	b09d      	sub	sp, #116	; 0x74
 8009e38:	4607      	mov	r7, r0
 8009e3a:	460d      	mov	r5, r1
 8009e3c:	4614      	mov	r4, r2
 8009e3e:	d50e      	bpl.n	8009e5e <_svfiprintf_r+0x32>
 8009e40:	690b      	ldr	r3, [r1, #16]
 8009e42:	b963      	cbnz	r3, 8009e5e <_svfiprintf_r+0x32>
 8009e44:	2140      	movs	r1, #64	; 0x40
 8009e46:	f7ff ff21 	bl	8009c8c <_malloc_r>
 8009e4a:	6028      	str	r0, [r5, #0]
 8009e4c:	6128      	str	r0, [r5, #16]
 8009e4e:	b920      	cbnz	r0, 8009e5a <_svfiprintf_r+0x2e>
 8009e50:	230c      	movs	r3, #12
 8009e52:	603b      	str	r3, [r7, #0]
 8009e54:	f04f 30ff 	mov.w	r0, #4294967295
 8009e58:	e0d1      	b.n	8009ffe <_svfiprintf_r+0x1d2>
 8009e5a:	2340      	movs	r3, #64	; 0x40
 8009e5c:	616b      	str	r3, [r5, #20]
 8009e5e:	2300      	movs	r3, #0
 8009e60:	9309      	str	r3, [sp, #36]	; 0x24
 8009e62:	2320      	movs	r3, #32
 8009e64:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009e68:	f8cd 800c 	str.w	r8, [sp, #12]
 8009e6c:	2330      	movs	r3, #48	; 0x30
 8009e6e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a018 <_svfiprintf_r+0x1ec>
 8009e72:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009e76:	f04f 0901 	mov.w	r9, #1
 8009e7a:	4623      	mov	r3, r4
 8009e7c:	469a      	mov	sl, r3
 8009e7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e82:	b10a      	cbz	r2, 8009e88 <_svfiprintf_r+0x5c>
 8009e84:	2a25      	cmp	r2, #37	; 0x25
 8009e86:	d1f9      	bne.n	8009e7c <_svfiprintf_r+0x50>
 8009e88:	ebba 0b04 	subs.w	fp, sl, r4
 8009e8c:	d00b      	beq.n	8009ea6 <_svfiprintf_r+0x7a>
 8009e8e:	465b      	mov	r3, fp
 8009e90:	4622      	mov	r2, r4
 8009e92:	4629      	mov	r1, r5
 8009e94:	4638      	mov	r0, r7
 8009e96:	f7ff ff6d 	bl	8009d74 <__ssputs_r>
 8009e9a:	3001      	adds	r0, #1
 8009e9c:	f000 80aa 	beq.w	8009ff4 <_svfiprintf_r+0x1c8>
 8009ea0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ea2:	445a      	add	r2, fp
 8009ea4:	9209      	str	r2, [sp, #36]	; 0x24
 8009ea6:	f89a 3000 	ldrb.w	r3, [sl]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	f000 80a2 	beq.w	8009ff4 <_svfiprintf_r+0x1c8>
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	f04f 32ff 	mov.w	r2, #4294967295
 8009eb6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009eba:	f10a 0a01 	add.w	sl, sl, #1
 8009ebe:	9304      	str	r3, [sp, #16]
 8009ec0:	9307      	str	r3, [sp, #28]
 8009ec2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009ec6:	931a      	str	r3, [sp, #104]	; 0x68
 8009ec8:	4654      	mov	r4, sl
 8009eca:	2205      	movs	r2, #5
 8009ecc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ed0:	4851      	ldr	r0, [pc, #324]	; (800a018 <_svfiprintf_r+0x1ec>)
 8009ed2:	f7f6 f985 	bl	80001e0 <memchr>
 8009ed6:	9a04      	ldr	r2, [sp, #16]
 8009ed8:	b9d8      	cbnz	r0, 8009f12 <_svfiprintf_r+0xe6>
 8009eda:	06d0      	lsls	r0, r2, #27
 8009edc:	bf44      	itt	mi
 8009ede:	2320      	movmi	r3, #32
 8009ee0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ee4:	0711      	lsls	r1, r2, #28
 8009ee6:	bf44      	itt	mi
 8009ee8:	232b      	movmi	r3, #43	; 0x2b
 8009eea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009eee:	f89a 3000 	ldrb.w	r3, [sl]
 8009ef2:	2b2a      	cmp	r3, #42	; 0x2a
 8009ef4:	d015      	beq.n	8009f22 <_svfiprintf_r+0xf6>
 8009ef6:	9a07      	ldr	r2, [sp, #28]
 8009ef8:	4654      	mov	r4, sl
 8009efa:	2000      	movs	r0, #0
 8009efc:	f04f 0c0a 	mov.w	ip, #10
 8009f00:	4621      	mov	r1, r4
 8009f02:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009f06:	3b30      	subs	r3, #48	; 0x30
 8009f08:	2b09      	cmp	r3, #9
 8009f0a:	d94e      	bls.n	8009faa <_svfiprintf_r+0x17e>
 8009f0c:	b1b0      	cbz	r0, 8009f3c <_svfiprintf_r+0x110>
 8009f0e:	9207      	str	r2, [sp, #28]
 8009f10:	e014      	b.n	8009f3c <_svfiprintf_r+0x110>
 8009f12:	eba0 0308 	sub.w	r3, r0, r8
 8009f16:	fa09 f303 	lsl.w	r3, r9, r3
 8009f1a:	4313      	orrs	r3, r2
 8009f1c:	9304      	str	r3, [sp, #16]
 8009f1e:	46a2      	mov	sl, r4
 8009f20:	e7d2      	b.n	8009ec8 <_svfiprintf_r+0x9c>
 8009f22:	9b03      	ldr	r3, [sp, #12]
 8009f24:	1d19      	adds	r1, r3, #4
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	9103      	str	r1, [sp, #12]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	bfbb      	ittet	lt
 8009f2e:	425b      	neglt	r3, r3
 8009f30:	f042 0202 	orrlt.w	r2, r2, #2
 8009f34:	9307      	strge	r3, [sp, #28]
 8009f36:	9307      	strlt	r3, [sp, #28]
 8009f38:	bfb8      	it	lt
 8009f3a:	9204      	strlt	r2, [sp, #16]
 8009f3c:	7823      	ldrb	r3, [r4, #0]
 8009f3e:	2b2e      	cmp	r3, #46	; 0x2e
 8009f40:	d10c      	bne.n	8009f5c <_svfiprintf_r+0x130>
 8009f42:	7863      	ldrb	r3, [r4, #1]
 8009f44:	2b2a      	cmp	r3, #42	; 0x2a
 8009f46:	d135      	bne.n	8009fb4 <_svfiprintf_r+0x188>
 8009f48:	9b03      	ldr	r3, [sp, #12]
 8009f4a:	1d1a      	adds	r2, r3, #4
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	9203      	str	r2, [sp, #12]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	bfb8      	it	lt
 8009f54:	f04f 33ff 	movlt.w	r3, #4294967295
 8009f58:	3402      	adds	r4, #2
 8009f5a:	9305      	str	r3, [sp, #20]
 8009f5c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a028 <_svfiprintf_r+0x1fc>
 8009f60:	7821      	ldrb	r1, [r4, #0]
 8009f62:	2203      	movs	r2, #3
 8009f64:	4650      	mov	r0, sl
 8009f66:	f7f6 f93b 	bl	80001e0 <memchr>
 8009f6a:	b140      	cbz	r0, 8009f7e <_svfiprintf_r+0x152>
 8009f6c:	2340      	movs	r3, #64	; 0x40
 8009f6e:	eba0 000a 	sub.w	r0, r0, sl
 8009f72:	fa03 f000 	lsl.w	r0, r3, r0
 8009f76:	9b04      	ldr	r3, [sp, #16]
 8009f78:	4303      	orrs	r3, r0
 8009f7a:	3401      	adds	r4, #1
 8009f7c:	9304      	str	r3, [sp, #16]
 8009f7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f82:	4826      	ldr	r0, [pc, #152]	; (800a01c <_svfiprintf_r+0x1f0>)
 8009f84:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009f88:	2206      	movs	r2, #6
 8009f8a:	f7f6 f929 	bl	80001e0 <memchr>
 8009f8e:	2800      	cmp	r0, #0
 8009f90:	d038      	beq.n	800a004 <_svfiprintf_r+0x1d8>
 8009f92:	4b23      	ldr	r3, [pc, #140]	; (800a020 <_svfiprintf_r+0x1f4>)
 8009f94:	bb1b      	cbnz	r3, 8009fde <_svfiprintf_r+0x1b2>
 8009f96:	9b03      	ldr	r3, [sp, #12]
 8009f98:	3307      	adds	r3, #7
 8009f9a:	f023 0307 	bic.w	r3, r3, #7
 8009f9e:	3308      	adds	r3, #8
 8009fa0:	9303      	str	r3, [sp, #12]
 8009fa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fa4:	4433      	add	r3, r6
 8009fa6:	9309      	str	r3, [sp, #36]	; 0x24
 8009fa8:	e767      	b.n	8009e7a <_svfiprintf_r+0x4e>
 8009faa:	fb0c 3202 	mla	r2, ip, r2, r3
 8009fae:	460c      	mov	r4, r1
 8009fb0:	2001      	movs	r0, #1
 8009fb2:	e7a5      	b.n	8009f00 <_svfiprintf_r+0xd4>
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	3401      	adds	r4, #1
 8009fb8:	9305      	str	r3, [sp, #20]
 8009fba:	4619      	mov	r1, r3
 8009fbc:	f04f 0c0a 	mov.w	ip, #10
 8009fc0:	4620      	mov	r0, r4
 8009fc2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009fc6:	3a30      	subs	r2, #48	; 0x30
 8009fc8:	2a09      	cmp	r2, #9
 8009fca:	d903      	bls.n	8009fd4 <_svfiprintf_r+0x1a8>
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d0c5      	beq.n	8009f5c <_svfiprintf_r+0x130>
 8009fd0:	9105      	str	r1, [sp, #20]
 8009fd2:	e7c3      	b.n	8009f5c <_svfiprintf_r+0x130>
 8009fd4:	fb0c 2101 	mla	r1, ip, r1, r2
 8009fd8:	4604      	mov	r4, r0
 8009fda:	2301      	movs	r3, #1
 8009fdc:	e7f0      	b.n	8009fc0 <_svfiprintf_r+0x194>
 8009fde:	ab03      	add	r3, sp, #12
 8009fe0:	9300      	str	r3, [sp, #0]
 8009fe2:	462a      	mov	r2, r5
 8009fe4:	4b0f      	ldr	r3, [pc, #60]	; (800a024 <_svfiprintf_r+0x1f8>)
 8009fe6:	a904      	add	r1, sp, #16
 8009fe8:	4638      	mov	r0, r7
 8009fea:	f7fc fa49 	bl	8006480 <_printf_float>
 8009fee:	1c42      	adds	r2, r0, #1
 8009ff0:	4606      	mov	r6, r0
 8009ff2:	d1d6      	bne.n	8009fa2 <_svfiprintf_r+0x176>
 8009ff4:	89ab      	ldrh	r3, [r5, #12]
 8009ff6:	065b      	lsls	r3, r3, #25
 8009ff8:	f53f af2c 	bmi.w	8009e54 <_svfiprintf_r+0x28>
 8009ffc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009ffe:	b01d      	add	sp, #116	; 0x74
 800a000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a004:	ab03      	add	r3, sp, #12
 800a006:	9300      	str	r3, [sp, #0]
 800a008:	462a      	mov	r2, r5
 800a00a:	4b06      	ldr	r3, [pc, #24]	; (800a024 <_svfiprintf_r+0x1f8>)
 800a00c:	a904      	add	r1, sp, #16
 800a00e:	4638      	mov	r0, r7
 800a010:	f7fc fcda 	bl	80069c8 <_printf_i>
 800a014:	e7eb      	b.n	8009fee <_svfiprintf_r+0x1c2>
 800a016:	bf00      	nop
 800a018:	0800b80c 	.word	0x0800b80c
 800a01c:	0800b816 	.word	0x0800b816
 800a020:	08006481 	.word	0x08006481
 800a024:	08009d75 	.word	0x08009d75
 800a028:	0800b812 	.word	0x0800b812
 800a02c:	00000000 	.word	0x00000000

0800a030 <nan>:
 800a030:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a038 <nan+0x8>
 800a034:	4770      	bx	lr
 800a036:	bf00      	nop
 800a038:	00000000 	.word	0x00000000
 800a03c:	7ff80000 	.word	0x7ff80000

0800a040 <_sbrk_r>:
 800a040:	b538      	push	{r3, r4, r5, lr}
 800a042:	4d06      	ldr	r5, [pc, #24]	; (800a05c <_sbrk_r+0x1c>)
 800a044:	2300      	movs	r3, #0
 800a046:	4604      	mov	r4, r0
 800a048:	4608      	mov	r0, r1
 800a04a:	602b      	str	r3, [r5, #0]
 800a04c:	f7f7 fee4 	bl	8001e18 <_sbrk>
 800a050:	1c43      	adds	r3, r0, #1
 800a052:	d102      	bne.n	800a05a <_sbrk_r+0x1a>
 800a054:	682b      	ldr	r3, [r5, #0]
 800a056:	b103      	cbz	r3, 800a05a <_sbrk_r+0x1a>
 800a058:	6023      	str	r3, [r4, #0]
 800a05a:	bd38      	pop	{r3, r4, r5, pc}
 800a05c:	20000388 	.word	0x20000388

0800a060 <strncmp>:
 800a060:	b510      	push	{r4, lr}
 800a062:	b17a      	cbz	r2, 800a084 <strncmp+0x24>
 800a064:	4603      	mov	r3, r0
 800a066:	3901      	subs	r1, #1
 800a068:	1884      	adds	r4, r0, r2
 800a06a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a06e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a072:	4290      	cmp	r0, r2
 800a074:	d101      	bne.n	800a07a <strncmp+0x1a>
 800a076:	42a3      	cmp	r3, r4
 800a078:	d101      	bne.n	800a07e <strncmp+0x1e>
 800a07a:	1a80      	subs	r0, r0, r2
 800a07c:	bd10      	pop	{r4, pc}
 800a07e:	2800      	cmp	r0, #0
 800a080:	d1f3      	bne.n	800a06a <strncmp+0xa>
 800a082:	e7fa      	b.n	800a07a <strncmp+0x1a>
 800a084:	4610      	mov	r0, r2
 800a086:	e7f9      	b.n	800a07c <strncmp+0x1c>

0800a088 <__ascii_wctomb>:
 800a088:	b149      	cbz	r1, 800a09e <__ascii_wctomb+0x16>
 800a08a:	2aff      	cmp	r2, #255	; 0xff
 800a08c:	bf85      	ittet	hi
 800a08e:	238a      	movhi	r3, #138	; 0x8a
 800a090:	6003      	strhi	r3, [r0, #0]
 800a092:	700a      	strbls	r2, [r1, #0]
 800a094:	f04f 30ff 	movhi.w	r0, #4294967295
 800a098:	bf98      	it	ls
 800a09a:	2001      	movls	r0, #1
 800a09c:	4770      	bx	lr
 800a09e:	4608      	mov	r0, r1
 800a0a0:	4770      	bx	lr
	...

0800a0a4 <__assert_func>:
 800a0a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a0a6:	4614      	mov	r4, r2
 800a0a8:	461a      	mov	r2, r3
 800a0aa:	4b09      	ldr	r3, [pc, #36]	; (800a0d0 <__assert_func+0x2c>)
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	4605      	mov	r5, r0
 800a0b0:	68d8      	ldr	r0, [r3, #12]
 800a0b2:	b14c      	cbz	r4, 800a0c8 <__assert_func+0x24>
 800a0b4:	4b07      	ldr	r3, [pc, #28]	; (800a0d4 <__assert_func+0x30>)
 800a0b6:	9100      	str	r1, [sp, #0]
 800a0b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a0bc:	4906      	ldr	r1, [pc, #24]	; (800a0d8 <__assert_func+0x34>)
 800a0be:	462b      	mov	r3, r5
 800a0c0:	f000 f80e 	bl	800a0e0 <fiprintf>
 800a0c4:	f000 fa8c 	bl	800a5e0 <abort>
 800a0c8:	4b04      	ldr	r3, [pc, #16]	; (800a0dc <__assert_func+0x38>)
 800a0ca:	461c      	mov	r4, r3
 800a0cc:	e7f3      	b.n	800a0b6 <__assert_func+0x12>
 800a0ce:	bf00      	nop
 800a0d0:	2000000c 	.word	0x2000000c
 800a0d4:	0800b81d 	.word	0x0800b81d
 800a0d8:	0800b82a 	.word	0x0800b82a
 800a0dc:	0800b858 	.word	0x0800b858

0800a0e0 <fiprintf>:
 800a0e0:	b40e      	push	{r1, r2, r3}
 800a0e2:	b503      	push	{r0, r1, lr}
 800a0e4:	4601      	mov	r1, r0
 800a0e6:	ab03      	add	r3, sp, #12
 800a0e8:	4805      	ldr	r0, [pc, #20]	; (800a100 <fiprintf+0x20>)
 800a0ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800a0ee:	6800      	ldr	r0, [r0, #0]
 800a0f0:	9301      	str	r3, [sp, #4]
 800a0f2:	f000 f885 	bl	800a200 <_vfiprintf_r>
 800a0f6:	b002      	add	sp, #8
 800a0f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a0fc:	b003      	add	sp, #12
 800a0fe:	4770      	bx	lr
 800a100:	2000000c 	.word	0x2000000c

0800a104 <memmove>:
 800a104:	4288      	cmp	r0, r1
 800a106:	b510      	push	{r4, lr}
 800a108:	eb01 0402 	add.w	r4, r1, r2
 800a10c:	d902      	bls.n	800a114 <memmove+0x10>
 800a10e:	4284      	cmp	r4, r0
 800a110:	4623      	mov	r3, r4
 800a112:	d807      	bhi.n	800a124 <memmove+0x20>
 800a114:	1e43      	subs	r3, r0, #1
 800a116:	42a1      	cmp	r1, r4
 800a118:	d008      	beq.n	800a12c <memmove+0x28>
 800a11a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a11e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a122:	e7f8      	b.n	800a116 <memmove+0x12>
 800a124:	4402      	add	r2, r0
 800a126:	4601      	mov	r1, r0
 800a128:	428a      	cmp	r2, r1
 800a12a:	d100      	bne.n	800a12e <memmove+0x2a>
 800a12c:	bd10      	pop	{r4, pc}
 800a12e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a132:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a136:	e7f7      	b.n	800a128 <memmove+0x24>

0800a138 <__malloc_lock>:
 800a138:	4801      	ldr	r0, [pc, #4]	; (800a140 <__malloc_lock+0x8>)
 800a13a:	f000 bc11 	b.w	800a960 <__retarget_lock_acquire_recursive>
 800a13e:	bf00      	nop
 800a140:	2000038c 	.word	0x2000038c

0800a144 <__malloc_unlock>:
 800a144:	4801      	ldr	r0, [pc, #4]	; (800a14c <__malloc_unlock+0x8>)
 800a146:	f000 bc0c 	b.w	800a962 <__retarget_lock_release_recursive>
 800a14a:	bf00      	nop
 800a14c:	2000038c 	.word	0x2000038c

0800a150 <_realloc_r>:
 800a150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a154:	4680      	mov	r8, r0
 800a156:	4614      	mov	r4, r2
 800a158:	460e      	mov	r6, r1
 800a15a:	b921      	cbnz	r1, 800a166 <_realloc_r+0x16>
 800a15c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a160:	4611      	mov	r1, r2
 800a162:	f7ff bd93 	b.w	8009c8c <_malloc_r>
 800a166:	b92a      	cbnz	r2, 800a174 <_realloc_r+0x24>
 800a168:	f7ff fd24 	bl	8009bb4 <_free_r>
 800a16c:	4625      	mov	r5, r4
 800a16e:	4628      	mov	r0, r5
 800a170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a174:	f000 fc5c 	bl	800aa30 <_malloc_usable_size_r>
 800a178:	4284      	cmp	r4, r0
 800a17a:	4607      	mov	r7, r0
 800a17c:	d802      	bhi.n	800a184 <_realloc_r+0x34>
 800a17e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a182:	d812      	bhi.n	800a1aa <_realloc_r+0x5a>
 800a184:	4621      	mov	r1, r4
 800a186:	4640      	mov	r0, r8
 800a188:	f7ff fd80 	bl	8009c8c <_malloc_r>
 800a18c:	4605      	mov	r5, r0
 800a18e:	2800      	cmp	r0, #0
 800a190:	d0ed      	beq.n	800a16e <_realloc_r+0x1e>
 800a192:	42bc      	cmp	r4, r7
 800a194:	4622      	mov	r2, r4
 800a196:	4631      	mov	r1, r6
 800a198:	bf28      	it	cs
 800a19a:	463a      	movcs	r2, r7
 800a19c:	f7ff f824 	bl	80091e8 <memcpy>
 800a1a0:	4631      	mov	r1, r6
 800a1a2:	4640      	mov	r0, r8
 800a1a4:	f7ff fd06 	bl	8009bb4 <_free_r>
 800a1a8:	e7e1      	b.n	800a16e <_realloc_r+0x1e>
 800a1aa:	4635      	mov	r5, r6
 800a1ac:	e7df      	b.n	800a16e <_realloc_r+0x1e>

0800a1ae <__sfputc_r>:
 800a1ae:	6893      	ldr	r3, [r2, #8]
 800a1b0:	3b01      	subs	r3, #1
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	b410      	push	{r4}
 800a1b6:	6093      	str	r3, [r2, #8]
 800a1b8:	da08      	bge.n	800a1cc <__sfputc_r+0x1e>
 800a1ba:	6994      	ldr	r4, [r2, #24]
 800a1bc:	42a3      	cmp	r3, r4
 800a1be:	db01      	blt.n	800a1c4 <__sfputc_r+0x16>
 800a1c0:	290a      	cmp	r1, #10
 800a1c2:	d103      	bne.n	800a1cc <__sfputc_r+0x1e>
 800a1c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a1c8:	f000 b94a 	b.w	800a460 <__swbuf_r>
 800a1cc:	6813      	ldr	r3, [r2, #0]
 800a1ce:	1c58      	adds	r0, r3, #1
 800a1d0:	6010      	str	r0, [r2, #0]
 800a1d2:	7019      	strb	r1, [r3, #0]
 800a1d4:	4608      	mov	r0, r1
 800a1d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a1da:	4770      	bx	lr

0800a1dc <__sfputs_r>:
 800a1dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1de:	4606      	mov	r6, r0
 800a1e0:	460f      	mov	r7, r1
 800a1e2:	4614      	mov	r4, r2
 800a1e4:	18d5      	adds	r5, r2, r3
 800a1e6:	42ac      	cmp	r4, r5
 800a1e8:	d101      	bne.n	800a1ee <__sfputs_r+0x12>
 800a1ea:	2000      	movs	r0, #0
 800a1ec:	e007      	b.n	800a1fe <__sfputs_r+0x22>
 800a1ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1f2:	463a      	mov	r2, r7
 800a1f4:	4630      	mov	r0, r6
 800a1f6:	f7ff ffda 	bl	800a1ae <__sfputc_r>
 800a1fa:	1c43      	adds	r3, r0, #1
 800a1fc:	d1f3      	bne.n	800a1e6 <__sfputs_r+0xa>
 800a1fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a200 <_vfiprintf_r>:
 800a200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a204:	460d      	mov	r5, r1
 800a206:	b09d      	sub	sp, #116	; 0x74
 800a208:	4614      	mov	r4, r2
 800a20a:	4698      	mov	r8, r3
 800a20c:	4606      	mov	r6, r0
 800a20e:	b118      	cbz	r0, 800a218 <_vfiprintf_r+0x18>
 800a210:	6983      	ldr	r3, [r0, #24]
 800a212:	b90b      	cbnz	r3, 800a218 <_vfiprintf_r+0x18>
 800a214:	f000 fb06 	bl	800a824 <__sinit>
 800a218:	4b89      	ldr	r3, [pc, #548]	; (800a440 <_vfiprintf_r+0x240>)
 800a21a:	429d      	cmp	r5, r3
 800a21c:	d11b      	bne.n	800a256 <_vfiprintf_r+0x56>
 800a21e:	6875      	ldr	r5, [r6, #4]
 800a220:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a222:	07d9      	lsls	r1, r3, #31
 800a224:	d405      	bmi.n	800a232 <_vfiprintf_r+0x32>
 800a226:	89ab      	ldrh	r3, [r5, #12]
 800a228:	059a      	lsls	r2, r3, #22
 800a22a:	d402      	bmi.n	800a232 <_vfiprintf_r+0x32>
 800a22c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a22e:	f000 fb97 	bl	800a960 <__retarget_lock_acquire_recursive>
 800a232:	89ab      	ldrh	r3, [r5, #12]
 800a234:	071b      	lsls	r3, r3, #28
 800a236:	d501      	bpl.n	800a23c <_vfiprintf_r+0x3c>
 800a238:	692b      	ldr	r3, [r5, #16]
 800a23a:	b9eb      	cbnz	r3, 800a278 <_vfiprintf_r+0x78>
 800a23c:	4629      	mov	r1, r5
 800a23e:	4630      	mov	r0, r6
 800a240:	f000 f960 	bl	800a504 <__swsetup_r>
 800a244:	b1c0      	cbz	r0, 800a278 <_vfiprintf_r+0x78>
 800a246:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a248:	07dc      	lsls	r4, r3, #31
 800a24a:	d50e      	bpl.n	800a26a <_vfiprintf_r+0x6a>
 800a24c:	f04f 30ff 	mov.w	r0, #4294967295
 800a250:	b01d      	add	sp, #116	; 0x74
 800a252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a256:	4b7b      	ldr	r3, [pc, #492]	; (800a444 <_vfiprintf_r+0x244>)
 800a258:	429d      	cmp	r5, r3
 800a25a:	d101      	bne.n	800a260 <_vfiprintf_r+0x60>
 800a25c:	68b5      	ldr	r5, [r6, #8]
 800a25e:	e7df      	b.n	800a220 <_vfiprintf_r+0x20>
 800a260:	4b79      	ldr	r3, [pc, #484]	; (800a448 <_vfiprintf_r+0x248>)
 800a262:	429d      	cmp	r5, r3
 800a264:	bf08      	it	eq
 800a266:	68f5      	ldreq	r5, [r6, #12]
 800a268:	e7da      	b.n	800a220 <_vfiprintf_r+0x20>
 800a26a:	89ab      	ldrh	r3, [r5, #12]
 800a26c:	0598      	lsls	r0, r3, #22
 800a26e:	d4ed      	bmi.n	800a24c <_vfiprintf_r+0x4c>
 800a270:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a272:	f000 fb76 	bl	800a962 <__retarget_lock_release_recursive>
 800a276:	e7e9      	b.n	800a24c <_vfiprintf_r+0x4c>
 800a278:	2300      	movs	r3, #0
 800a27a:	9309      	str	r3, [sp, #36]	; 0x24
 800a27c:	2320      	movs	r3, #32
 800a27e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a282:	f8cd 800c 	str.w	r8, [sp, #12]
 800a286:	2330      	movs	r3, #48	; 0x30
 800a288:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a44c <_vfiprintf_r+0x24c>
 800a28c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a290:	f04f 0901 	mov.w	r9, #1
 800a294:	4623      	mov	r3, r4
 800a296:	469a      	mov	sl, r3
 800a298:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a29c:	b10a      	cbz	r2, 800a2a2 <_vfiprintf_r+0xa2>
 800a29e:	2a25      	cmp	r2, #37	; 0x25
 800a2a0:	d1f9      	bne.n	800a296 <_vfiprintf_r+0x96>
 800a2a2:	ebba 0b04 	subs.w	fp, sl, r4
 800a2a6:	d00b      	beq.n	800a2c0 <_vfiprintf_r+0xc0>
 800a2a8:	465b      	mov	r3, fp
 800a2aa:	4622      	mov	r2, r4
 800a2ac:	4629      	mov	r1, r5
 800a2ae:	4630      	mov	r0, r6
 800a2b0:	f7ff ff94 	bl	800a1dc <__sfputs_r>
 800a2b4:	3001      	adds	r0, #1
 800a2b6:	f000 80aa 	beq.w	800a40e <_vfiprintf_r+0x20e>
 800a2ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a2bc:	445a      	add	r2, fp
 800a2be:	9209      	str	r2, [sp, #36]	; 0x24
 800a2c0:	f89a 3000 	ldrb.w	r3, [sl]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	f000 80a2 	beq.w	800a40e <_vfiprintf_r+0x20e>
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	f04f 32ff 	mov.w	r2, #4294967295
 800a2d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a2d4:	f10a 0a01 	add.w	sl, sl, #1
 800a2d8:	9304      	str	r3, [sp, #16]
 800a2da:	9307      	str	r3, [sp, #28]
 800a2dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a2e0:	931a      	str	r3, [sp, #104]	; 0x68
 800a2e2:	4654      	mov	r4, sl
 800a2e4:	2205      	movs	r2, #5
 800a2e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2ea:	4858      	ldr	r0, [pc, #352]	; (800a44c <_vfiprintf_r+0x24c>)
 800a2ec:	f7f5 ff78 	bl	80001e0 <memchr>
 800a2f0:	9a04      	ldr	r2, [sp, #16]
 800a2f2:	b9d8      	cbnz	r0, 800a32c <_vfiprintf_r+0x12c>
 800a2f4:	06d1      	lsls	r1, r2, #27
 800a2f6:	bf44      	itt	mi
 800a2f8:	2320      	movmi	r3, #32
 800a2fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a2fe:	0713      	lsls	r3, r2, #28
 800a300:	bf44      	itt	mi
 800a302:	232b      	movmi	r3, #43	; 0x2b
 800a304:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a308:	f89a 3000 	ldrb.w	r3, [sl]
 800a30c:	2b2a      	cmp	r3, #42	; 0x2a
 800a30e:	d015      	beq.n	800a33c <_vfiprintf_r+0x13c>
 800a310:	9a07      	ldr	r2, [sp, #28]
 800a312:	4654      	mov	r4, sl
 800a314:	2000      	movs	r0, #0
 800a316:	f04f 0c0a 	mov.w	ip, #10
 800a31a:	4621      	mov	r1, r4
 800a31c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a320:	3b30      	subs	r3, #48	; 0x30
 800a322:	2b09      	cmp	r3, #9
 800a324:	d94e      	bls.n	800a3c4 <_vfiprintf_r+0x1c4>
 800a326:	b1b0      	cbz	r0, 800a356 <_vfiprintf_r+0x156>
 800a328:	9207      	str	r2, [sp, #28]
 800a32a:	e014      	b.n	800a356 <_vfiprintf_r+0x156>
 800a32c:	eba0 0308 	sub.w	r3, r0, r8
 800a330:	fa09 f303 	lsl.w	r3, r9, r3
 800a334:	4313      	orrs	r3, r2
 800a336:	9304      	str	r3, [sp, #16]
 800a338:	46a2      	mov	sl, r4
 800a33a:	e7d2      	b.n	800a2e2 <_vfiprintf_r+0xe2>
 800a33c:	9b03      	ldr	r3, [sp, #12]
 800a33e:	1d19      	adds	r1, r3, #4
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	9103      	str	r1, [sp, #12]
 800a344:	2b00      	cmp	r3, #0
 800a346:	bfbb      	ittet	lt
 800a348:	425b      	neglt	r3, r3
 800a34a:	f042 0202 	orrlt.w	r2, r2, #2
 800a34e:	9307      	strge	r3, [sp, #28]
 800a350:	9307      	strlt	r3, [sp, #28]
 800a352:	bfb8      	it	lt
 800a354:	9204      	strlt	r2, [sp, #16]
 800a356:	7823      	ldrb	r3, [r4, #0]
 800a358:	2b2e      	cmp	r3, #46	; 0x2e
 800a35a:	d10c      	bne.n	800a376 <_vfiprintf_r+0x176>
 800a35c:	7863      	ldrb	r3, [r4, #1]
 800a35e:	2b2a      	cmp	r3, #42	; 0x2a
 800a360:	d135      	bne.n	800a3ce <_vfiprintf_r+0x1ce>
 800a362:	9b03      	ldr	r3, [sp, #12]
 800a364:	1d1a      	adds	r2, r3, #4
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	9203      	str	r2, [sp, #12]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	bfb8      	it	lt
 800a36e:	f04f 33ff 	movlt.w	r3, #4294967295
 800a372:	3402      	adds	r4, #2
 800a374:	9305      	str	r3, [sp, #20]
 800a376:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a45c <_vfiprintf_r+0x25c>
 800a37a:	7821      	ldrb	r1, [r4, #0]
 800a37c:	2203      	movs	r2, #3
 800a37e:	4650      	mov	r0, sl
 800a380:	f7f5 ff2e 	bl	80001e0 <memchr>
 800a384:	b140      	cbz	r0, 800a398 <_vfiprintf_r+0x198>
 800a386:	2340      	movs	r3, #64	; 0x40
 800a388:	eba0 000a 	sub.w	r0, r0, sl
 800a38c:	fa03 f000 	lsl.w	r0, r3, r0
 800a390:	9b04      	ldr	r3, [sp, #16]
 800a392:	4303      	orrs	r3, r0
 800a394:	3401      	adds	r4, #1
 800a396:	9304      	str	r3, [sp, #16]
 800a398:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a39c:	482c      	ldr	r0, [pc, #176]	; (800a450 <_vfiprintf_r+0x250>)
 800a39e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a3a2:	2206      	movs	r2, #6
 800a3a4:	f7f5 ff1c 	bl	80001e0 <memchr>
 800a3a8:	2800      	cmp	r0, #0
 800a3aa:	d03f      	beq.n	800a42c <_vfiprintf_r+0x22c>
 800a3ac:	4b29      	ldr	r3, [pc, #164]	; (800a454 <_vfiprintf_r+0x254>)
 800a3ae:	bb1b      	cbnz	r3, 800a3f8 <_vfiprintf_r+0x1f8>
 800a3b0:	9b03      	ldr	r3, [sp, #12]
 800a3b2:	3307      	adds	r3, #7
 800a3b4:	f023 0307 	bic.w	r3, r3, #7
 800a3b8:	3308      	adds	r3, #8
 800a3ba:	9303      	str	r3, [sp, #12]
 800a3bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3be:	443b      	add	r3, r7
 800a3c0:	9309      	str	r3, [sp, #36]	; 0x24
 800a3c2:	e767      	b.n	800a294 <_vfiprintf_r+0x94>
 800a3c4:	fb0c 3202 	mla	r2, ip, r2, r3
 800a3c8:	460c      	mov	r4, r1
 800a3ca:	2001      	movs	r0, #1
 800a3cc:	e7a5      	b.n	800a31a <_vfiprintf_r+0x11a>
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	3401      	adds	r4, #1
 800a3d2:	9305      	str	r3, [sp, #20]
 800a3d4:	4619      	mov	r1, r3
 800a3d6:	f04f 0c0a 	mov.w	ip, #10
 800a3da:	4620      	mov	r0, r4
 800a3dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a3e0:	3a30      	subs	r2, #48	; 0x30
 800a3e2:	2a09      	cmp	r2, #9
 800a3e4:	d903      	bls.n	800a3ee <_vfiprintf_r+0x1ee>
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d0c5      	beq.n	800a376 <_vfiprintf_r+0x176>
 800a3ea:	9105      	str	r1, [sp, #20]
 800a3ec:	e7c3      	b.n	800a376 <_vfiprintf_r+0x176>
 800a3ee:	fb0c 2101 	mla	r1, ip, r1, r2
 800a3f2:	4604      	mov	r4, r0
 800a3f4:	2301      	movs	r3, #1
 800a3f6:	e7f0      	b.n	800a3da <_vfiprintf_r+0x1da>
 800a3f8:	ab03      	add	r3, sp, #12
 800a3fa:	9300      	str	r3, [sp, #0]
 800a3fc:	462a      	mov	r2, r5
 800a3fe:	4b16      	ldr	r3, [pc, #88]	; (800a458 <_vfiprintf_r+0x258>)
 800a400:	a904      	add	r1, sp, #16
 800a402:	4630      	mov	r0, r6
 800a404:	f7fc f83c 	bl	8006480 <_printf_float>
 800a408:	4607      	mov	r7, r0
 800a40a:	1c78      	adds	r0, r7, #1
 800a40c:	d1d6      	bne.n	800a3bc <_vfiprintf_r+0x1bc>
 800a40e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a410:	07d9      	lsls	r1, r3, #31
 800a412:	d405      	bmi.n	800a420 <_vfiprintf_r+0x220>
 800a414:	89ab      	ldrh	r3, [r5, #12]
 800a416:	059a      	lsls	r2, r3, #22
 800a418:	d402      	bmi.n	800a420 <_vfiprintf_r+0x220>
 800a41a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a41c:	f000 faa1 	bl	800a962 <__retarget_lock_release_recursive>
 800a420:	89ab      	ldrh	r3, [r5, #12]
 800a422:	065b      	lsls	r3, r3, #25
 800a424:	f53f af12 	bmi.w	800a24c <_vfiprintf_r+0x4c>
 800a428:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a42a:	e711      	b.n	800a250 <_vfiprintf_r+0x50>
 800a42c:	ab03      	add	r3, sp, #12
 800a42e:	9300      	str	r3, [sp, #0]
 800a430:	462a      	mov	r2, r5
 800a432:	4b09      	ldr	r3, [pc, #36]	; (800a458 <_vfiprintf_r+0x258>)
 800a434:	a904      	add	r1, sp, #16
 800a436:	4630      	mov	r0, r6
 800a438:	f7fc fac6 	bl	80069c8 <_printf_i>
 800a43c:	e7e4      	b.n	800a408 <_vfiprintf_r+0x208>
 800a43e:	bf00      	nop
 800a440:	0800b87c 	.word	0x0800b87c
 800a444:	0800b89c 	.word	0x0800b89c
 800a448:	0800b85c 	.word	0x0800b85c
 800a44c:	0800b80c 	.word	0x0800b80c
 800a450:	0800b816 	.word	0x0800b816
 800a454:	08006481 	.word	0x08006481
 800a458:	0800a1dd 	.word	0x0800a1dd
 800a45c:	0800b812 	.word	0x0800b812

0800a460 <__swbuf_r>:
 800a460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a462:	460e      	mov	r6, r1
 800a464:	4614      	mov	r4, r2
 800a466:	4605      	mov	r5, r0
 800a468:	b118      	cbz	r0, 800a472 <__swbuf_r+0x12>
 800a46a:	6983      	ldr	r3, [r0, #24]
 800a46c:	b90b      	cbnz	r3, 800a472 <__swbuf_r+0x12>
 800a46e:	f000 f9d9 	bl	800a824 <__sinit>
 800a472:	4b21      	ldr	r3, [pc, #132]	; (800a4f8 <__swbuf_r+0x98>)
 800a474:	429c      	cmp	r4, r3
 800a476:	d12b      	bne.n	800a4d0 <__swbuf_r+0x70>
 800a478:	686c      	ldr	r4, [r5, #4]
 800a47a:	69a3      	ldr	r3, [r4, #24]
 800a47c:	60a3      	str	r3, [r4, #8]
 800a47e:	89a3      	ldrh	r3, [r4, #12]
 800a480:	071a      	lsls	r2, r3, #28
 800a482:	d52f      	bpl.n	800a4e4 <__swbuf_r+0x84>
 800a484:	6923      	ldr	r3, [r4, #16]
 800a486:	b36b      	cbz	r3, 800a4e4 <__swbuf_r+0x84>
 800a488:	6923      	ldr	r3, [r4, #16]
 800a48a:	6820      	ldr	r0, [r4, #0]
 800a48c:	1ac0      	subs	r0, r0, r3
 800a48e:	6963      	ldr	r3, [r4, #20]
 800a490:	b2f6      	uxtb	r6, r6
 800a492:	4283      	cmp	r3, r0
 800a494:	4637      	mov	r7, r6
 800a496:	dc04      	bgt.n	800a4a2 <__swbuf_r+0x42>
 800a498:	4621      	mov	r1, r4
 800a49a:	4628      	mov	r0, r5
 800a49c:	f000 f92e 	bl	800a6fc <_fflush_r>
 800a4a0:	bb30      	cbnz	r0, 800a4f0 <__swbuf_r+0x90>
 800a4a2:	68a3      	ldr	r3, [r4, #8]
 800a4a4:	3b01      	subs	r3, #1
 800a4a6:	60a3      	str	r3, [r4, #8]
 800a4a8:	6823      	ldr	r3, [r4, #0]
 800a4aa:	1c5a      	adds	r2, r3, #1
 800a4ac:	6022      	str	r2, [r4, #0]
 800a4ae:	701e      	strb	r6, [r3, #0]
 800a4b0:	6963      	ldr	r3, [r4, #20]
 800a4b2:	3001      	adds	r0, #1
 800a4b4:	4283      	cmp	r3, r0
 800a4b6:	d004      	beq.n	800a4c2 <__swbuf_r+0x62>
 800a4b8:	89a3      	ldrh	r3, [r4, #12]
 800a4ba:	07db      	lsls	r3, r3, #31
 800a4bc:	d506      	bpl.n	800a4cc <__swbuf_r+0x6c>
 800a4be:	2e0a      	cmp	r6, #10
 800a4c0:	d104      	bne.n	800a4cc <__swbuf_r+0x6c>
 800a4c2:	4621      	mov	r1, r4
 800a4c4:	4628      	mov	r0, r5
 800a4c6:	f000 f919 	bl	800a6fc <_fflush_r>
 800a4ca:	b988      	cbnz	r0, 800a4f0 <__swbuf_r+0x90>
 800a4cc:	4638      	mov	r0, r7
 800a4ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4d0:	4b0a      	ldr	r3, [pc, #40]	; (800a4fc <__swbuf_r+0x9c>)
 800a4d2:	429c      	cmp	r4, r3
 800a4d4:	d101      	bne.n	800a4da <__swbuf_r+0x7a>
 800a4d6:	68ac      	ldr	r4, [r5, #8]
 800a4d8:	e7cf      	b.n	800a47a <__swbuf_r+0x1a>
 800a4da:	4b09      	ldr	r3, [pc, #36]	; (800a500 <__swbuf_r+0xa0>)
 800a4dc:	429c      	cmp	r4, r3
 800a4de:	bf08      	it	eq
 800a4e0:	68ec      	ldreq	r4, [r5, #12]
 800a4e2:	e7ca      	b.n	800a47a <__swbuf_r+0x1a>
 800a4e4:	4621      	mov	r1, r4
 800a4e6:	4628      	mov	r0, r5
 800a4e8:	f000 f80c 	bl	800a504 <__swsetup_r>
 800a4ec:	2800      	cmp	r0, #0
 800a4ee:	d0cb      	beq.n	800a488 <__swbuf_r+0x28>
 800a4f0:	f04f 37ff 	mov.w	r7, #4294967295
 800a4f4:	e7ea      	b.n	800a4cc <__swbuf_r+0x6c>
 800a4f6:	bf00      	nop
 800a4f8:	0800b87c 	.word	0x0800b87c
 800a4fc:	0800b89c 	.word	0x0800b89c
 800a500:	0800b85c 	.word	0x0800b85c

0800a504 <__swsetup_r>:
 800a504:	4b32      	ldr	r3, [pc, #200]	; (800a5d0 <__swsetup_r+0xcc>)
 800a506:	b570      	push	{r4, r5, r6, lr}
 800a508:	681d      	ldr	r5, [r3, #0]
 800a50a:	4606      	mov	r6, r0
 800a50c:	460c      	mov	r4, r1
 800a50e:	b125      	cbz	r5, 800a51a <__swsetup_r+0x16>
 800a510:	69ab      	ldr	r3, [r5, #24]
 800a512:	b913      	cbnz	r3, 800a51a <__swsetup_r+0x16>
 800a514:	4628      	mov	r0, r5
 800a516:	f000 f985 	bl	800a824 <__sinit>
 800a51a:	4b2e      	ldr	r3, [pc, #184]	; (800a5d4 <__swsetup_r+0xd0>)
 800a51c:	429c      	cmp	r4, r3
 800a51e:	d10f      	bne.n	800a540 <__swsetup_r+0x3c>
 800a520:	686c      	ldr	r4, [r5, #4]
 800a522:	89a3      	ldrh	r3, [r4, #12]
 800a524:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a528:	0719      	lsls	r1, r3, #28
 800a52a:	d42c      	bmi.n	800a586 <__swsetup_r+0x82>
 800a52c:	06dd      	lsls	r5, r3, #27
 800a52e:	d411      	bmi.n	800a554 <__swsetup_r+0x50>
 800a530:	2309      	movs	r3, #9
 800a532:	6033      	str	r3, [r6, #0]
 800a534:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a538:	81a3      	strh	r3, [r4, #12]
 800a53a:	f04f 30ff 	mov.w	r0, #4294967295
 800a53e:	e03e      	b.n	800a5be <__swsetup_r+0xba>
 800a540:	4b25      	ldr	r3, [pc, #148]	; (800a5d8 <__swsetup_r+0xd4>)
 800a542:	429c      	cmp	r4, r3
 800a544:	d101      	bne.n	800a54a <__swsetup_r+0x46>
 800a546:	68ac      	ldr	r4, [r5, #8]
 800a548:	e7eb      	b.n	800a522 <__swsetup_r+0x1e>
 800a54a:	4b24      	ldr	r3, [pc, #144]	; (800a5dc <__swsetup_r+0xd8>)
 800a54c:	429c      	cmp	r4, r3
 800a54e:	bf08      	it	eq
 800a550:	68ec      	ldreq	r4, [r5, #12]
 800a552:	e7e6      	b.n	800a522 <__swsetup_r+0x1e>
 800a554:	0758      	lsls	r0, r3, #29
 800a556:	d512      	bpl.n	800a57e <__swsetup_r+0x7a>
 800a558:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a55a:	b141      	cbz	r1, 800a56e <__swsetup_r+0x6a>
 800a55c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a560:	4299      	cmp	r1, r3
 800a562:	d002      	beq.n	800a56a <__swsetup_r+0x66>
 800a564:	4630      	mov	r0, r6
 800a566:	f7ff fb25 	bl	8009bb4 <_free_r>
 800a56a:	2300      	movs	r3, #0
 800a56c:	6363      	str	r3, [r4, #52]	; 0x34
 800a56e:	89a3      	ldrh	r3, [r4, #12]
 800a570:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a574:	81a3      	strh	r3, [r4, #12]
 800a576:	2300      	movs	r3, #0
 800a578:	6063      	str	r3, [r4, #4]
 800a57a:	6923      	ldr	r3, [r4, #16]
 800a57c:	6023      	str	r3, [r4, #0]
 800a57e:	89a3      	ldrh	r3, [r4, #12]
 800a580:	f043 0308 	orr.w	r3, r3, #8
 800a584:	81a3      	strh	r3, [r4, #12]
 800a586:	6923      	ldr	r3, [r4, #16]
 800a588:	b94b      	cbnz	r3, 800a59e <__swsetup_r+0x9a>
 800a58a:	89a3      	ldrh	r3, [r4, #12]
 800a58c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a590:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a594:	d003      	beq.n	800a59e <__swsetup_r+0x9a>
 800a596:	4621      	mov	r1, r4
 800a598:	4630      	mov	r0, r6
 800a59a:	f000 fa09 	bl	800a9b0 <__smakebuf_r>
 800a59e:	89a0      	ldrh	r0, [r4, #12]
 800a5a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a5a4:	f010 0301 	ands.w	r3, r0, #1
 800a5a8:	d00a      	beq.n	800a5c0 <__swsetup_r+0xbc>
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	60a3      	str	r3, [r4, #8]
 800a5ae:	6963      	ldr	r3, [r4, #20]
 800a5b0:	425b      	negs	r3, r3
 800a5b2:	61a3      	str	r3, [r4, #24]
 800a5b4:	6923      	ldr	r3, [r4, #16]
 800a5b6:	b943      	cbnz	r3, 800a5ca <__swsetup_r+0xc6>
 800a5b8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a5bc:	d1ba      	bne.n	800a534 <__swsetup_r+0x30>
 800a5be:	bd70      	pop	{r4, r5, r6, pc}
 800a5c0:	0781      	lsls	r1, r0, #30
 800a5c2:	bf58      	it	pl
 800a5c4:	6963      	ldrpl	r3, [r4, #20]
 800a5c6:	60a3      	str	r3, [r4, #8]
 800a5c8:	e7f4      	b.n	800a5b4 <__swsetup_r+0xb0>
 800a5ca:	2000      	movs	r0, #0
 800a5cc:	e7f7      	b.n	800a5be <__swsetup_r+0xba>
 800a5ce:	bf00      	nop
 800a5d0:	2000000c 	.word	0x2000000c
 800a5d4:	0800b87c 	.word	0x0800b87c
 800a5d8:	0800b89c 	.word	0x0800b89c
 800a5dc:	0800b85c 	.word	0x0800b85c

0800a5e0 <abort>:
 800a5e0:	b508      	push	{r3, lr}
 800a5e2:	2006      	movs	r0, #6
 800a5e4:	f000 fa54 	bl	800aa90 <raise>
 800a5e8:	2001      	movs	r0, #1
 800a5ea:	f7f7 fb9d 	bl	8001d28 <_exit>
	...

0800a5f0 <__sflush_r>:
 800a5f0:	898a      	ldrh	r2, [r1, #12]
 800a5f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5f6:	4605      	mov	r5, r0
 800a5f8:	0710      	lsls	r0, r2, #28
 800a5fa:	460c      	mov	r4, r1
 800a5fc:	d458      	bmi.n	800a6b0 <__sflush_r+0xc0>
 800a5fe:	684b      	ldr	r3, [r1, #4]
 800a600:	2b00      	cmp	r3, #0
 800a602:	dc05      	bgt.n	800a610 <__sflush_r+0x20>
 800a604:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a606:	2b00      	cmp	r3, #0
 800a608:	dc02      	bgt.n	800a610 <__sflush_r+0x20>
 800a60a:	2000      	movs	r0, #0
 800a60c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a610:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a612:	2e00      	cmp	r6, #0
 800a614:	d0f9      	beq.n	800a60a <__sflush_r+0x1a>
 800a616:	2300      	movs	r3, #0
 800a618:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a61c:	682f      	ldr	r7, [r5, #0]
 800a61e:	602b      	str	r3, [r5, #0]
 800a620:	d032      	beq.n	800a688 <__sflush_r+0x98>
 800a622:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a624:	89a3      	ldrh	r3, [r4, #12]
 800a626:	075a      	lsls	r2, r3, #29
 800a628:	d505      	bpl.n	800a636 <__sflush_r+0x46>
 800a62a:	6863      	ldr	r3, [r4, #4]
 800a62c:	1ac0      	subs	r0, r0, r3
 800a62e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a630:	b10b      	cbz	r3, 800a636 <__sflush_r+0x46>
 800a632:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a634:	1ac0      	subs	r0, r0, r3
 800a636:	2300      	movs	r3, #0
 800a638:	4602      	mov	r2, r0
 800a63a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a63c:	6a21      	ldr	r1, [r4, #32]
 800a63e:	4628      	mov	r0, r5
 800a640:	47b0      	blx	r6
 800a642:	1c43      	adds	r3, r0, #1
 800a644:	89a3      	ldrh	r3, [r4, #12]
 800a646:	d106      	bne.n	800a656 <__sflush_r+0x66>
 800a648:	6829      	ldr	r1, [r5, #0]
 800a64a:	291d      	cmp	r1, #29
 800a64c:	d82c      	bhi.n	800a6a8 <__sflush_r+0xb8>
 800a64e:	4a2a      	ldr	r2, [pc, #168]	; (800a6f8 <__sflush_r+0x108>)
 800a650:	40ca      	lsrs	r2, r1
 800a652:	07d6      	lsls	r6, r2, #31
 800a654:	d528      	bpl.n	800a6a8 <__sflush_r+0xb8>
 800a656:	2200      	movs	r2, #0
 800a658:	6062      	str	r2, [r4, #4]
 800a65a:	04d9      	lsls	r1, r3, #19
 800a65c:	6922      	ldr	r2, [r4, #16]
 800a65e:	6022      	str	r2, [r4, #0]
 800a660:	d504      	bpl.n	800a66c <__sflush_r+0x7c>
 800a662:	1c42      	adds	r2, r0, #1
 800a664:	d101      	bne.n	800a66a <__sflush_r+0x7a>
 800a666:	682b      	ldr	r3, [r5, #0]
 800a668:	b903      	cbnz	r3, 800a66c <__sflush_r+0x7c>
 800a66a:	6560      	str	r0, [r4, #84]	; 0x54
 800a66c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a66e:	602f      	str	r7, [r5, #0]
 800a670:	2900      	cmp	r1, #0
 800a672:	d0ca      	beq.n	800a60a <__sflush_r+0x1a>
 800a674:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a678:	4299      	cmp	r1, r3
 800a67a:	d002      	beq.n	800a682 <__sflush_r+0x92>
 800a67c:	4628      	mov	r0, r5
 800a67e:	f7ff fa99 	bl	8009bb4 <_free_r>
 800a682:	2000      	movs	r0, #0
 800a684:	6360      	str	r0, [r4, #52]	; 0x34
 800a686:	e7c1      	b.n	800a60c <__sflush_r+0x1c>
 800a688:	6a21      	ldr	r1, [r4, #32]
 800a68a:	2301      	movs	r3, #1
 800a68c:	4628      	mov	r0, r5
 800a68e:	47b0      	blx	r6
 800a690:	1c41      	adds	r1, r0, #1
 800a692:	d1c7      	bne.n	800a624 <__sflush_r+0x34>
 800a694:	682b      	ldr	r3, [r5, #0]
 800a696:	2b00      	cmp	r3, #0
 800a698:	d0c4      	beq.n	800a624 <__sflush_r+0x34>
 800a69a:	2b1d      	cmp	r3, #29
 800a69c:	d001      	beq.n	800a6a2 <__sflush_r+0xb2>
 800a69e:	2b16      	cmp	r3, #22
 800a6a0:	d101      	bne.n	800a6a6 <__sflush_r+0xb6>
 800a6a2:	602f      	str	r7, [r5, #0]
 800a6a4:	e7b1      	b.n	800a60a <__sflush_r+0x1a>
 800a6a6:	89a3      	ldrh	r3, [r4, #12]
 800a6a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a6ac:	81a3      	strh	r3, [r4, #12]
 800a6ae:	e7ad      	b.n	800a60c <__sflush_r+0x1c>
 800a6b0:	690f      	ldr	r7, [r1, #16]
 800a6b2:	2f00      	cmp	r7, #0
 800a6b4:	d0a9      	beq.n	800a60a <__sflush_r+0x1a>
 800a6b6:	0793      	lsls	r3, r2, #30
 800a6b8:	680e      	ldr	r6, [r1, #0]
 800a6ba:	bf08      	it	eq
 800a6bc:	694b      	ldreq	r3, [r1, #20]
 800a6be:	600f      	str	r7, [r1, #0]
 800a6c0:	bf18      	it	ne
 800a6c2:	2300      	movne	r3, #0
 800a6c4:	eba6 0807 	sub.w	r8, r6, r7
 800a6c8:	608b      	str	r3, [r1, #8]
 800a6ca:	f1b8 0f00 	cmp.w	r8, #0
 800a6ce:	dd9c      	ble.n	800a60a <__sflush_r+0x1a>
 800a6d0:	6a21      	ldr	r1, [r4, #32]
 800a6d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a6d4:	4643      	mov	r3, r8
 800a6d6:	463a      	mov	r2, r7
 800a6d8:	4628      	mov	r0, r5
 800a6da:	47b0      	blx	r6
 800a6dc:	2800      	cmp	r0, #0
 800a6de:	dc06      	bgt.n	800a6ee <__sflush_r+0xfe>
 800a6e0:	89a3      	ldrh	r3, [r4, #12]
 800a6e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a6e6:	81a3      	strh	r3, [r4, #12]
 800a6e8:	f04f 30ff 	mov.w	r0, #4294967295
 800a6ec:	e78e      	b.n	800a60c <__sflush_r+0x1c>
 800a6ee:	4407      	add	r7, r0
 800a6f0:	eba8 0800 	sub.w	r8, r8, r0
 800a6f4:	e7e9      	b.n	800a6ca <__sflush_r+0xda>
 800a6f6:	bf00      	nop
 800a6f8:	20400001 	.word	0x20400001

0800a6fc <_fflush_r>:
 800a6fc:	b538      	push	{r3, r4, r5, lr}
 800a6fe:	690b      	ldr	r3, [r1, #16]
 800a700:	4605      	mov	r5, r0
 800a702:	460c      	mov	r4, r1
 800a704:	b913      	cbnz	r3, 800a70c <_fflush_r+0x10>
 800a706:	2500      	movs	r5, #0
 800a708:	4628      	mov	r0, r5
 800a70a:	bd38      	pop	{r3, r4, r5, pc}
 800a70c:	b118      	cbz	r0, 800a716 <_fflush_r+0x1a>
 800a70e:	6983      	ldr	r3, [r0, #24]
 800a710:	b90b      	cbnz	r3, 800a716 <_fflush_r+0x1a>
 800a712:	f000 f887 	bl	800a824 <__sinit>
 800a716:	4b14      	ldr	r3, [pc, #80]	; (800a768 <_fflush_r+0x6c>)
 800a718:	429c      	cmp	r4, r3
 800a71a:	d11b      	bne.n	800a754 <_fflush_r+0x58>
 800a71c:	686c      	ldr	r4, [r5, #4]
 800a71e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d0ef      	beq.n	800a706 <_fflush_r+0xa>
 800a726:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a728:	07d0      	lsls	r0, r2, #31
 800a72a:	d404      	bmi.n	800a736 <_fflush_r+0x3a>
 800a72c:	0599      	lsls	r1, r3, #22
 800a72e:	d402      	bmi.n	800a736 <_fflush_r+0x3a>
 800a730:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a732:	f000 f915 	bl	800a960 <__retarget_lock_acquire_recursive>
 800a736:	4628      	mov	r0, r5
 800a738:	4621      	mov	r1, r4
 800a73a:	f7ff ff59 	bl	800a5f0 <__sflush_r>
 800a73e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a740:	07da      	lsls	r2, r3, #31
 800a742:	4605      	mov	r5, r0
 800a744:	d4e0      	bmi.n	800a708 <_fflush_r+0xc>
 800a746:	89a3      	ldrh	r3, [r4, #12]
 800a748:	059b      	lsls	r3, r3, #22
 800a74a:	d4dd      	bmi.n	800a708 <_fflush_r+0xc>
 800a74c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a74e:	f000 f908 	bl	800a962 <__retarget_lock_release_recursive>
 800a752:	e7d9      	b.n	800a708 <_fflush_r+0xc>
 800a754:	4b05      	ldr	r3, [pc, #20]	; (800a76c <_fflush_r+0x70>)
 800a756:	429c      	cmp	r4, r3
 800a758:	d101      	bne.n	800a75e <_fflush_r+0x62>
 800a75a:	68ac      	ldr	r4, [r5, #8]
 800a75c:	e7df      	b.n	800a71e <_fflush_r+0x22>
 800a75e:	4b04      	ldr	r3, [pc, #16]	; (800a770 <_fflush_r+0x74>)
 800a760:	429c      	cmp	r4, r3
 800a762:	bf08      	it	eq
 800a764:	68ec      	ldreq	r4, [r5, #12]
 800a766:	e7da      	b.n	800a71e <_fflush_r+0x22>
 800a768:	0800b87c 	.word	0x0800b87c
 800a76c:	0800b89c 	.word	0x0800b89c
 800a770:	0800b85c 	.word	0x0800b85c

0800a774 <std>:
 800a774:	2300      	movs	r3, #0
 800a776:	b510      	push	{r4, lr}
 800a778:	4604      	mov	r4, r0
 800a77a:	e9c0 3300 	strd	r3, r3, [r0]
 800a77e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a782:	6083      	str	r3, [r0, #8]
 800a784:	8181      	strh	r1, [r0, #12]
 800a786:	6643      	str	r3, [r0, #100]	; 0x64
 800a788:	81c2      	strh	r2, [r0, #14]
 800a78a:	6183      	str	r3, [r0, #24]
 800a78c:	4619      	mov	r1, r3
 800a78e:	2208      	movs	r2, #8
 800a790:	305c      	adds	r0, #92	; 0x5c
 800a792:	f7fb fdcd 	bl	8006330 <memset>
 800a796:	4b05      	ldr	r3, [pc, #20]	; (800a7ac <std+0x38>)
 800a798:	6263      	str	r3, [r4, #36]	; 0x24
 800a79a:	4b05      	ldr	r3, [pc, #20]	; (800a7b0 <std+0x3c>)
 800a79c:	62a3      	str	r3, [r4, #40]	; 0x28
 800a79e:	4b05      	ldr	r3, [pc, #20]	; (800a7b4 <std+0x40>)
 800a7a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a7a2:	4b05      	ldr	r3, [pc, #20]	; (800a7b8 <std+0x44>)
 800a7a4:	6224      	str	r4, [r4, #32]
 800a7a6:	6323      	str	r3, [r4, #48]	; 0x30
 800a7a8:	bd10      	pop	{r4, pc}
 800a7aa:	bf00      	nop
 800a7ac:	0800aac9 	.word	0x0800aac9
 800a7b0:	0800aaeb 	.word	0x0800aaeb
 800a7b4:	0800ab23 	.word	0x0800ab23
 800a7b8:	0800ab47 	.word	0x0800ab47

0800a7bc <_cleanup_r>:
 800a7bc:	4901      	ldr	r1, [pc, #4]	; (800a7c4 <_cleanup_r+0x8>)
 800a7be:	f000 b8af 	b.w	800a920 <_fwalk_reent>
 800a7c2:	bf00      	nop
 800a7c4:	0800a6fd 	.word	0x0800a6fd

0800a7c8 <__sfmoreglue>:
 800a7c8:	b570      	push	{r4, r5, r6, lr}
 800a7ca:	2268      	movs	r2, #104	; 0x68
 800a7cc:	1e4d      	subs	r5, r1, #1
 800a7ce:	4355      	muls	r5, r2
 800a7d0:	460e      	mov	r6, r1
 800a7d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a7d6:	f7ff fa59 	bl	8009c8c <_malloc_r>
 800a7da:	4604      	mov	r4, r0
 800a7dc:	b140      	cbz	r0, 800a7f0 <__sfmoreglue+0x28>
 800a7de:	2100      	movs	r1, #0
 800a7e0:	e9c0 1600 	strd	r1, r6, [r0]
 800a7e4:	300c      	adds	r0, #12
 800a7e6:	60a0      	str	r0, [r4, #8]
 800a7e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a7ec:	f7fb fda0 	bl	8006330 <memset>
 800a7f0:	4620      	mov	r0, r4
 800a7f2:	bd70      	pop	{r4, r5, r6, pc}

0800a7f4 <__sfp_lock_acquire>:
 800a7f4:	4801      	ldr	r0, [pc, #4]	; (800a7fc <__sfp_lock_acquire+0x8>)
 800a7f6:	f000 b8b3 	b.w	800a960 <__retarget_lock_acquire_recursive>
 800a7fa:	bf00      	nop
 800a7fc:	2000038d 	.word	0x2000038d

0800a800 <__sfp_lock_release>:
 800a800:	4801      	ldr	r0, [pc, #4]	; (800a808 <__sfp_lock_release+0x8>)
 800a802:	f000 b8ae 	b.w	800a962 <__retarget_lock_release_recursive>
 800a806:	bf00      	nop
 800a808:	2000038d 	.word	0x2000038d

0800a80c <__sinit_lock_acquire>:
 800a80c:	4801      	ldr	r0, [pc, #4]	; (800a814 <__sinit_lock_acquire+0x8>)
 800a80e:	f000 b8a7 	b.w	800a960 <__retarget_lock_acquire_recursive>
 800a812:	bf00      	nop
 800a814:	2000038e 	.word	0x2000038e

0800a818 <__sinit_lock_release>:
 800a818:	4801      	ldr	r0, [pc, #4]	; (800a820 <__sinit_lock_release+0x8>)
 800a81a:	f000 b8a2 	b.w	800a962 <__retarget_lock_release_recursive>
 800a81e:	bf00      	nop
 800a820:	2000038e 	.word	0x2000038e

0800a824 <__sinit>:
 800a824:	b510      	push	{r4, lr}
 800a826:	4604      	mov	r4, r0
 800a828:	f7ff fff0 	bl	800a80c <__sinit_lock_acquire>
 800a82c:	69a3      	ldr	r3, [r4, #24]
 800a82e:	b11b      	cbz	r3, 800a838 <__sinit+0x14>
 800a830:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a834:	f7ff bff0 	b.w	800a818 <__sinit_lock_release>
 800a838:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a83c:	6523      	str	r3, [r4, #80]	; 0x50
 800a83e:	4b13      	ldr	r3, [pc, #76]	; (800a88c <__sinit+0x68>)
 800a840:	4a13      	ldr	r2, [pc, #76]	; (800a890 <__sinit+0x6c>)
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	62a2      	str	r2, [r4, #40]	; 0x28
 800a846:	42a3      	cmp	r3, r4
 800a848:	bf04      	itt	eq
 800a84a:	2301      	moveq	r3, #1
 800a84c:	61a3      	streq	r3, [r4, #24]
 800a84e:	4620      	mov	r0, r4
 800a850:	f000 f820 	bl	800a894 <__sfp>
 800a854:	6060      	str	r0, [r4, #4]
 800a856:	4620      	mov	r0, r4
 800a858:	f000 f81c 	bl	800a894 <__sfp>
 800a85c:	60a0      	str	r0, [r4, #8]
 800a85e:	4620      	mov	r0, r4
 800a860:	f000 f818 	bl	800a894 <__sfp>
 800a864:	2200      	movs	r2, #0
 800a866:	60e0      	str	r0, [r4, #12]
 800a868:	2104      	movs	r1, #4
 800a86a:	6860      	ldr	r0, [r4, #4]
 800a86c:	f7ff ff82 	bl	800a774 <std>
 800a870:	68a0      	ldr	r0, [r4, #8]
 800a872:	2201      	movs	r2, #1
 800a874:	2109      	movs	r1, #9
 800a876:	f7ff ff7d 	bl	800a774 <std>
 800a87a:	68e0      	ldr	r0, [r4, #12]
 800a87c:	2202      	movs	r2, #2
 800a87e:	2112      	movs	r1, #18
 800a880:	f7ff ff78 	bl	800a774 <std>
 800a884:	2301      	movs	r3, #1
 800a886:	61a3      	str	r3, [r4, #24]
 800a888:	e7d2      	b.n	800a830 <__sinit+0xc>
 800a88a:	bf00      	nop
 800a88c:	0800b418 	.word	0x0800b418
 800a890:	0800a7bd 	.word	0x0800a7bd

0800a894 <__sfp>:
 800a894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a896:	4607      	mov	r7, r0
 800a898:	f7ff ffac 	bl	800a7f4 <__sfp_lock_acquire>
 800a89c:	4b1e      	ldr	r3, [pc, #120]	; (800a918 <__sfp+0x84>)
 800a89e:	681e      	ldr	r6, [r3, #0]
 800a8a0:	69b3      	ldr	r3, [r6, #24]
 800a8a2:	b913      	cbnz	r3, 800a8aa <__sfp+0x16>
 800a8a4:	4630      	mov	r0, r6
 800a8a6:	f7ff ffbd 	bl	800a824 <__sinit>
 800a8aa:	3648      	adds	r6, #72	; 0x48
 800a8ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a8b0:	3b01      	subs	r3, #1
 800a8b2:	d503      	bpl.n	800a8bc <__sfp+0x28>
 800a8b4:	6833      	ldr	r3, [r6, #0]
 800a8b6:	b30b      	cbz	r3, 800a8fc <__sfp+0x68>
 800a8b8:	6836      	ldr	r6, [r6, #0]
 800a8ba:	e7f7      	b.n	800a8ac <__sfp+0x18>
 800a8bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a8c0:	b9d5      	cbnz	r5, 800a8f8 <__sfp+0x64>
 800a8c2:	4b16      	ldr	r3, [pc, #88]	; (800a91c <__sfp+0x88>)
 800a8c4:	60e3      	str	r3, [r4, #12]
 800a8c6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a8ca:	6665      	str	r5, [r4, #100]	; 0x64
 800a8cc:	f000 f847 	bl	800a95e <__retarget_lock_init_recursive>
 800a8d0:	f7ff ff96 	bl	800a800 <__sfp_lock_release>
 800a8d4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a8d8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a8dc:	6025      	str	r5, [r4, #0]
 800a8de:	61a5      	str	r5, [r4, #24]
 800a8e0:	2208      	movs	r2, #8
 800a8e2:	4629      	mov	r1, r5
 800a8e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a8e8:	f7fb fd22 	bl	8006330 <memset>
 800a8ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a8f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a8f4:	4620      	mov	r0, r4
 800a8f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a8f8:	3468      	adds	r4, #104	; 0x68
 800a8fa:	e7d9      	b.n	800a8b0 <__sfp+0x1c>
 800a8fc:	2104      	movs	r1, #4
 800a8fe:	4638      	mov	r0, r7
 800a900:	f7ff ff62 	bl	800a7c8 <__sfmoreglue>
 800a904:	4604      	mov	r4, r0
 800a906:	6030      	str	r0, [r6, #0]
 800a908:	2800      	cmp	r0, #0
 800a90a:	d1d5      	bne.n	800a8b8 <__sfp+0x24>
 800a90c:	f7ff ff78 	bl	800a800 <__sfp_lock_release>
 800a910:	230c      	movs	r3, #12
 800a912:	603b      	str	r3, [r7, #0]
 800a914:	e7ee      	b.n	800a8f4 <__sfp+0x60>
 800a916:	bf00      	nop
 800a918:	0800b418 	.word	0x0800b418
 800a91c:	ffff0001 	.word	0xffff0001

0800a920 <_fwalk_reent>:
 800a920:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a924:	4606      	mov	r6, r0
 800a926:	4688      	mov	r8, r1
 800a928:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a92c:	2700      	movs	r7, #0
 800a92e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a932:	f1b9 0901 	subs.w	r9, r9, #1
 800a936:	d505      	bpl.n	800a944 <_fwalk_reent+0x24>
 800a938:	6824      	ldr	r4, [r4, #0]
 800a93a:	2c00      	cmp	r4, #0
 800a93c:	d1f7      	bne.n	800a92e <_fwalk_reent+0xe>
 800a93e:	4638      	mov	r0, r7
 800a940:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a944:	89ab      	ldrh	r3, [r5, #12]
 800a946:	2b01      	cmp	r3, #1
 800a948:	d907      	bls.n	800a95a <_fwalk_reent+0x3a>
 800a94a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a94e:	3301      	adds	r3, #1
 800a950:	d003      	beq.n	800a95a <_fwalk_reent+0x3a>
 800a952:	4629      	mov	r1, r5
 800a954:	4630      	mov	r0, r6
 800a956:	47c0      	blx	r8
 800a958:	4307      	orrs	r7, r0
 800a95a:	3568      	adds	r5, #104	; 0x68
 800a95c:	e7e9      	b.n	800a932 <_fwalk_reent+0x12>

0800a95e <__retarget_lock_init_recursive>:
 800a95e:	4770      	bx	lr

0800a960 <__retarget_lock_acquire_recursive>:
 800a960:	4770      	bx	lr

0800a962 <__retarget_lock_release_recursive>:
 800a962:	4770      	bx	lr

0800a964 <__swhatbuf_r>:
 800a964:	b570      	push	{r4, r5, r6, lr}
 800a966:	460e      	mov	r6, r1
 800a968:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a96c:	2900      	cmp	r1, #0
 800a96e:	b096      	sub	sp, #88	; 0x58
 800a970:	4614      	mov	r4, r2
 800a972:	461d      	mov	r5, r3
 800a974:	da08      	bge.n	800a988 <__swhatbuf_r+0x24>
 800a976:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a97a:	2200      	movs	r2, #0
 800a97c:	602a      	str	r2, [r5, #0]
 800a97e:	061a      	lsls	r2, r3, #24
 800a980:	d410      	bmi.n	800a9a4 <__swhatbuf_r+0x40>
 800a982:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a986:	e00e      	b.n	800a9a6 <__swhatbuf_r+0x42>
 800a988:	466a      	mov	r2, sp
 800a98a:	f000 f903 	bl	800ab94 <_fstat_r>
 800a98e:	2800      	cmp	r0, #0
 800a990:	dbf1      	blt.n	800a976 <__swhatbuf_r+0x12>
 800a992:	9a01      	ldr	r2, [sp, #4]
 800a994:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a998:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a99c:	425a      	negs	r2, r3
 800a99e:	415a      	adcs	r2, r3
 800a9a0:	602a      	str	r2, [r5, #0]
 800a9a2:	e7ee      	b.n	800a982 <__swhatbuf_r+0x1e>
 800a9a4:	2340      	movs	r3, #64	; 0x40
 800a9a6:	2000      	movs	r0, #0
 800a9a8:	6023      	str	r3, [r4, #0]
 800a9aa:	b016      	add	sp, #88	; 0x58
 800a9ac:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a9b0 <__smakebuf_r>:
 800a9b0:	898b      	ldrh	r3, [r1, #12]
 800a9b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a9b4:	079d      	lsls	r5, r3, #30
 800a9b6:	4606      	mov	r6, r0
 800a9b8:	460c      	mov	r4, r1
 800a9ba:	d507      	bpl.n	800a9cc <__smakebuf_r+0x1c>
 800a9bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a9c0:	6023      	str	r3, [r4, #0]
 800a9c2:	6123      	str	r3, [r4, #16]
 800a9c4:	2301      	movs	r3, #1
 800a9c6:	6163      	str	r3, [r4, #20]
 800a9c8:	b002      	add	sp, #8
 800a9ca:	bd70      	pop	{r4, r5, r6, pc}
 800a9cc:	ab01      	add	r3, sp, #4
 800a9ce:	466a      	mov	r2, sp
 800a9d0:	f7ff ffc8 	bl	800a964 <__swhatbuf_r>
 800a9d4:	9900      	ldr	r1, [sp, #0]
 800a9d6:	4605      	mov	r5, r0
 800a9d8:	4630      	mov	r0, r6
 800a9da:	f7ff f957 	bl	8009c8c <_malloc_r>
 800a9de:	b948      	cbnz	r0, 800a9f4 <__smakebuf_r+0x44>
 800a9e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9e4:	059a      	lsls	r2, r3, #22
 800a9e6:	d4ef      	bmi.n	800a9c8 <__smakebuf_r+0x18>
 800a9e8:	f023 0303 	bic.w	r3, r3, #3
 800a9ec:	f043 0302 	orr.w	r3, r3, #2
 800a9f0:	81a3      	strh	r3, [r4, #12]
 800a9f2:	e7e3      	b.n	800a9bc <__smakebuf_r+0xc>
 800a9f4:	4b0d      	ldr	r3, [pc, #52]	; (800aa2c <__smakebuf_r+0x7c>)
 800a9f6:	62b3      	str	r3, [r6, #40]	; 0x28
 800a9f8:	89a3      	ldrh	r3, [r4, #12]
 800a9fa:	6020      	str	r0, [r4, #0]
 800a9fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa00:	81a3      	strh	r3, [r4, #12]
 800aa02:	9b00      	ldr	r3, [sp, #0]
 800aa04:	6163      	str	r3, [r4, #20]
 800aa06:	9b01      	ldr	r3, [sp, #4]
 800aa08:	6120      	str	r0, [r4, #16]
 800aa0a:	b15b      	cbz	r3, 800aa24 <__smakebuf_r+0x74>
 800aa0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aa10:	4630      	mov	r0, r6
 800aa12:	f000 f8d1 	bl	800abb8 <_isatty_r>
 800aa16:	b128      	cbz	r0, 800aa24 <__smakebuf_r+0x74>
 800aa18:	89a3      	ldrh	r3, [r4, #12]
 800aa1a:	f023 0303 	bic.w	r3, r3, #3
 800aa1e:	f043 0301 	orr.w	r3, r3, #1
 800aa22:	81a3      	strh	r3, [r4, #12]
 800aa24:	89a0      	ldrh	r0, [r4, #12]
 800aa26:	4305      	orrs	r5, r0
 800aa28:	81a5      	strh	r5, [r4, #12]
 800aa2a:	e7cd      	b.n	800a9c8 <__smakebuf_r+0x18>
 800aa2c:	0800a7bd 	.word	0x0800a7bd

0800aa30 <_malloc_usable_size_r>:
 800aa30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa34:	1f18      	subs	r0, r3, #4
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	bfbc      	itt	lt
 800aa3a:	580b      	ldrlt	r3, [r1, r0]
 800aa3c:	18c0      	addlt	r0, r0, r3
 800aa3e:	4770      	bx	lr

0800aa40 <_raise_r>:
 800aa40:	291f      	cmp	r1, #31
 800aa42:	b538      	push	{r3, r4, r5, lr}
 800aa44:	4604      	mov	r4, r0
 800aa46:	460d      	mov	r5, r1
 800aa48:	d904      	bls.n	800aa54 <_raise_r+0x14>
 800aa4a:	2316      	movs	r3, #22
 800aa4c:	6003      	str	r3, [r0, #0]
 800aa4e:	f04f 30ff 	mov.w	r0, #4294967295
 800aa52:	bd38      	pop	{r3, r4, r5, pc}
 800aa54:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800aa56:	b112      	cbz	r2, 800aa5e <_raise_r+0x1e>
 800aa58:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800aa5c:	b94b      	cbnz	r3, 800aa72 <_raise_r+0x32>
 800aa5e:	4620      	mov	r0, r4
 800aa60:	f000 f830 	bl	800aac4 <_getpid_r>
 800aa64:	462a      	mov	r2, r5
 800aa66:	4601      	mov	r1, r0
 800aa68:	4620      	mov	r0, r4
 800aa6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aa6e:	f000 b817 	b.w	800aaa0 <_kill_r>
 800aa72:	2b01      	cmp	r3, #1
 800aa74:	d00a      	beq.n	800aa8c <_raise_r+0x4c>
 800aa76:	1c59      	adds	r1, r3, #1
 800aa78:	d103      	bne.n	800aa82 <_raise_r+0x42>
 800aa7a:	2316      	movs	r3, #22
 800aa7c:	6003      	str	r3, [r0, #0]
 800aa7e:	2001      	movs	r0, #1
 800aa80:	e7e7      	b.n	800aa52 <_raise_r+0x12>
 800aa82:	2400      	movs	r4, #0
 800aa84:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800aa88:	4628      	mov	r0, r5
 800aa8a:	4798      	blx	r3
 800aa8c:	2000      	movs	r0, #0
 800aa8e:	e7e0      	b.n	800aa52 <_raise_r+0x12>

0800aa90 <raise>:
 800aa90:	4b02      	ldr	r3, [pc, #8]	; (800aa9c <raise+0xc>)
 800aa92:	4601      	mov	r1, r0
 800aa94:	6818      	ldr	r0, [r3, #0]
 800aa96:	f7ff bfd3 	b.w	800aa40 <_raise_r>
 800aa9a:	bf00      	nop
 800aa9c:	2000000c 	.word	0x2000000c

0800aaa0 <_kill_r>:
 800aaa0:	b538      	push	{r3, r4, r5, lr}
 800aaa2:	4d07      	ldr	r5, [pc, #28]	; (800aac0 <_kill_r+0x20>)
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	4604      	mov	r4, r0
 800aaa8:	4608      	mov	r0, r1
 800aaaa:	4611      	mov	r1, r2
 800aaac:	602b      	str	r3, [r5, #0]
 800aaae:	f7f7 f92b 	bl	8001d08 <_kill>
 800aab2:	1c43      	adds	r3, r0, #1
 800aab4:	d102      	bne.n	800aabc <_kill_r+0x1c>
 800aab6:	682b      	ldr	r3, [r5, #0]
 800aab8:	b103      	cbz	r3, 800aabc <_kill_r+0x1c>
 800aaba:	6023      	str	r3, [r4, #0]
 800aabc:	bd38      	pop	{r3, r4, r5, pc}
 800aabe:	bf00      	nop
 800aac0:	20000388 	.word	0x20000388

0800aac4 <_getpid_r>:
 800aac4:	f7f7 b918 	b.w	8001cf8 <_getpid>

0800aac8 <__sread>:
 800aac8:	b510      	push	{r4, lr}
 800aaca:	460c      	mov	r4, r1
 800aacc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aad0:	f000 f894 	bl	800abfc <_read_r>
 800aad4:	2800      	cmp	r0, #0
 800aad6:	bfab      	itete	ge
 800aad8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800aada:	89a3      	ldrhlt	r3, [r4, #12]
 800aadc:	181b      	addge	r3, r3, r0
 800aade:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800aae2:	bfac      	ite	ge
 800aae4:	6563      	strge	r3, [r4, #84]	; 0x54
 800aae6:	81a3      	strhlt	r3, [r4, #12]
 800aae8:	bd10      	pop	{r4, pc}

0800aaea <__swrite>:
 800aaea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aaee:	461f      	mov	r7, r3
 800aaf0:	898b      	ldrh	r3, [r1, #12]
 800aaf2:	05db      	lsls	r3, r3, #23
 800aaf4:	4605      	mov	r5, r0
 800aaf6:	460c      	mov	r4, r1
 800aaf8:	4616      	mov	r6, r2
 800aafa:	d505      	bpl.n	800ab08 <__swrite+0x1e>
 800aafc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab00:	2302      	movs	r3, #2
 800ab02:	2200      	movs	r2, #0
 800ab04:	f000 f868 	bl	800abd8 <_lseek_r>
 800ab08:	89a3      	ldrh	r3, [r4, #12]
 800ab0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ab12:	81a3      	strh	r3, [r4, #12]
 800ab14:	4632      	mov	r2, r6
 800ab16:	463b      	mov	r3, r7
 800ab18:	4628      	mov	r0, r5
 800ab1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab1e:	f000 b817 	b.w	800ab50 <_write_r>

0800ab22 <__sseek>:
 800ab22:	b510      	push	{r4, lr}
 800ab24:	460c      	mov	r4, r1
 800ab26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab2a:	f000 f855 	bl	800abd8 <_lseek_r>
 800ab2e:	1c43      	adds	r3, r0, #1
 800ab30:	89a3      	ldrh	r3, [r4, #12]
 800ab32:	bf15      	itete	ne
 800ab34:	6560      	strne	r0, [r4, #84]	; 0x54
 800ab36:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ab3a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ab3e:	81a3      	strheq	r3, [r4, #12]
 800ab40:	bf18      	it	ne
 800ab42:	81a3      	strhne	r3, [r4, #12]
 800ab44:	bd10      	pop	{r4, pc}

0800ab46 <__sclose>:
 800ab46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab4a:	f000 b813 	b.w	800ab74 <_close_r>
	...

0800ab50 <_write_r>:
 800ab50:	b538      	push	{r3, r4, r5, lr}
 800ab52:	4d07      	ldr	r5, [pc, #28]	; (800ab70 <_write_r+0x20>)
 800ab54:	4604      	mov	r4, r0
 800ab56:	4608      	mov	r0, r1
 800ab58:	4611      	mov	r1, r2
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	602a      	str	r2, [r5, #0]
 800ab5e:	461a      	mov	r2, r3
 800ab60:	f7f7 f909 	bl	8001d76 <_write>
 800ab64:	1c43      	adds	r3, r0, #1
 800ab66:	d102      	bne.n	800ab6e <_write_r+0x1e>
 800ab68:	682b      	ldr	r3, [r5, #0]
 800ab6a:	b103      	cbz	r3, 800ab6e <_write_r+0x1e>
 800ab6c:	6023      	str	r3, [r4, #0]
 800ab6e:	bd38      	pop	{r3, r4, r5, pc}
 800ab70:	20000388 	.word	0x20000388

0800ab74 <_close_r>:
 800ab74:	b538      	push	{r3, r4, r5, lr}
 800ab76:	4d06      	ldr	r5, [pc, #24]	; (800ab90 <_close_r+0x1c>)
 800ab78:	2300      	movs	r3, #0
 800ab7a:	4604      	mov	r4, r0
 800ab7c:	4608      	mov	r0, r1
 800ab7e:	602b      	str	r3, [r5, #0]
 800ab80:	f7f7 f915 	bl	8001dae <_close>
 800ab84:	1c43      	adds	r3, r0, #1
 800ab86:	d102      	bne.n	800ab8e <_close_r+0x1a>
 800ab88:	682b      	ldr	r3, [r5, #0]
 800ab8a:	b103      	cbz	r3, 800ab8e <_close_r+0x1a>
 800ab8c:	6023      	str	r3, [r4, #0]
 800ab8e:	bd38      	pop	{r3, r4, r5, pc}
 800ab90:	20000388 	.word	0x20000388

0800ab94 <_fstat_r>:
 800ab94:	b538      	push	{r3, r4, r5, lr}
 800ab96:	4d07      	ldr	r5, [pc, #28]	; (800abb4 <_fstat_r+0x20>)
 800ab98:	2300      	movs	r3, #0
 800ab9a:	4604      	mov	r4, r0
 800ab9c:	4608      	mov	r0, r1
 800ab9e:	4611      	mov	r1, r2
 800aba0:	602b      	str	r3, [r5, #0]
 800aba2:	f7f7 f910 	bl	8001dc6 <_fstat>
 800aba6:	1c43      	adds	r3, r0, #1
 800aba8:	d102      	bne.n	800abb0 <_fstat_r+0x1c>
 800abaa:	682b      	ldr	r3, [r5, #0]
 800abac:	b103      	cbz	r3, 800abb0 <_fstat_r+0x1c>
 800abae:	6023      	str	r3, [r4, #0]
 800abb0:	bd38      	pop	{r3, r4, r5, pc}
 800abb2:	bf00      	nop
 800abb4:	20000388 	.word	0x20000388

0800abb8 <_isatty_r>:
 800abb8:	b538      	push	{r3, r4, r5, lr}
 800abba:	4d06      	ldr	r5, [pc, #24]	; (800abd4 <_isatty_r+0x1c>)
 800abbc:	2300      	movs	r3, #0
 800abbe:	4604      	mov	r4, r0
 800abc0:	4608      	mov	r0, r1
 800abc2:	602b      	str	r3, [r5, #0]
 800abc4:	f7f7 f90f 	bl	8001de6 <_isatty>
 800abc8:	1c43      	adds	r3, r0, #1
 800abca:	d102      	bne.n	800abd2 <_isatty_r+0x1a>
 800abcc:	682b      	ldr	r3, [r5, #0]
 800abce:	b103      	cbz	r3, 800abd2 <_isatty_r+0x1a>
 800abd0:	6023      	str	r3, [r4, #0]
 800abd2:	bd38      	pop	{r3, r4, r5, pc}
 800abd4:	20000388 	.word	0x20000388

0800abd8 <_lseek_r>:
 800abd8:	b538      	push	{r3, r4, r5, lr}
 800abda:	4d07      	ldr	r5, [pc, #28]	; (800abf8 <_lseek_r+0x20>)
 800abdc:	4604      	mov	r4, r0
 800abde:	4608      	mov	r0, r1
 800abe0:	4611      	mov	r1, r2
 800abe2:	2200      	movs	r2, #0
 800abe4:	602a      	str	r2, [r5, #0]
 800abe6:	461a      	mov	r2, r3
 800abe8:	f7f7 f908 	bl	8001dfc <_lseek>
 800abec:	1c43      	adds	r3, r0, #1
 800abee:	d102      	bne.n	800abf6 <_lseek_r+0x1e>
 800abf0:	682b      	ldr	r3, [r5, #0]
 800abf2:	b103      	cbz	r3, 800abf6 <_lseek_r+0x1e>
 800abf4:	6023      	str	r3, [r4, #0]
 800abf6:	bd38      	pop	{r3, r4, r5, pc}
 800abf8:	20000388 	.word	0x20000388

0800abfc <_read_r>:
 800abfc:	b538      	push	{r3, r4, r5, lr}
 800abfe:	4d07      	ldr	r5, [pc, #28]	; (800ac1c <_read_r+0x20>)
 800ac00:	4604      	mov	r4, r0
 800ac02:	4608      	mov	r0, r1
 800ac04:	4611      	mov	r1, r2
 800ac06:	2200      	movs	r2, #0
 800ac08:	602a      	str	r2, [r5, #0]
 800ac0a:	461a      	mov	r2, r3
 800ac0c:	f7f7 f896 	bl	8001d3c <_read>
 800ac10:	1c43      	adds	r3, r0, #1
 800ac12:	d102      	bne.n	800ac1a <_read_r+0x1e>
 800ac14:	682b      	ldr	r3, [r5, #0]
 800ac16:	b103      	cbz	r3, 800ac1a <_read_r+0x1e>
 800ac18:	6023      	str	r3, [r4, #0]
 800ac1a:	bd38      	pop	{r3, r4, r5, pc}
 800ac1c:	20000388 	.word	0x20000388

0800ac20 <powf>:
 800ac20:	b508      	push	{r3, lr}
 800ac22:	ed2d 8b04 	vpush	{d8-d9}
 800ac26:	eeb0 8a60 	vmov.f32	s16, s1
 800ac2a:	eeb0 9a40 	vmov.f32	s18, s0
 800ac2e:	f000 f84f 	bl	800acd0 <__ieee754_powf>
 800ac32:	eeb4 8a48 	vcmp.f32	s16, s16
 800ac36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac3a:	eef0 8a40 	vmov.f32	s17, s0
 800ac3e:	d63e      	bvs.n	800acbe <powf+0x9e>
 800ac40:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800ac44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac48:	d112      	bne.n	800ac70 <powf+0x50>
 800ac4a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800ac4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac52:	d039      	beq.n	800acc8 <powf+0xa8>
 800ac54:	eeb0 0a48 	vmov.f32	s0, s16
 800ac58:	f000 fb35 	bl	800b2c6 <finitef>
 800ac5c:	b378      	cbz	r0, 800acbe <powf+0x9e>
 800ac5e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800ac62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac66:	d52a      	bpl.n	800acbe <powf+0x9e>
 800ac68:	f7fb fb38 	bl	80062dc <__errno>
 800ac6c:	2322      	movs	r3, #34	; 0x22
 800ac6e:	e014      	b.n	800ac9a <powf+0x7a>
 800ac70:	f000 fb29 	bl	800b2c6 <finitef>
 800ac74:	b998      	cbnz	r0, 800ac9e <powf+0x7e>
 800ac76:	eeb0 0a49 	vmov.f32	s0, s18
 800ac7a:	f000 fb24 	bl	800b2c6 <finitef>
 800ac7e:	b170      	cbz	r0, 800ac9e <powf+0x7e>
 800ac80:	eeb0 0a48 	vmov.f32	s0, s16
 800ac84:	f000 fb1f 	bl	800b2c6 <finitef>
 800ac88:	b148      	cbz	r0, 800ac9e <powf+0x7e>
 800ac8a:	eef4 8a68 	vcmp.f32	s17, s17
 800ac8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac92:	d7e9      	bvc.n	800ac68 <powf+0x48>
 800ac94:	f7fb fb22 	bl	80062dc <__errno>
 800ac98:	2321      	movs	r3, #33	; 0x21
 800ac9a:	6003      	str	r3, [r0, #0]
 800ac9c:	e00f      	b.n	800acbe <powf+0x9e>
 800ac9e:	eef5 8a40 	vcmp.f32	s17, #0.0
 800aca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aca6:	d10a      	bne.n	800acbe <powf+0x9e>
 800aca8:	eeb0 0a49 	vmov.f32	s0, s18
 800acac:	f000 fb0b 	bl	800b2c6 <finitef>
 800acb0:	b128      	cbz	r0, 800acbe <powf+0x9e>
 800acb2:	eeb0 0a48 	vmov.f32	s0, s16
 800acb6:	f000 fb06 	bl	800b2c6 <finitef>
 800acba:	2800      	cmp	r0, #0
 800acbc:	d1d4      	bne.n	800ac68 <powf+0x48>
 800acbe:	eeb0 0a68 	vmov.f32	s0, s17
 800acc2:	ecbd 8b04 	vpop	{d8-d9}
 800acc6:	bd08      	pop	{r3, pc}
 800acc8:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800accc:	e7f7      	b.n	800acbe <powf+0x9e>
	...

0800acd0 <__ieee754_powf>:
 800acd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acd4:	ee10 4a90 	vmov	r4, s1
 800acd8:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 800acdc:	ed2d 8b02 	vpush	{d8}
 800ace0:	ee10 6a10 	vmov	r6, s0
 800ace4:	eeb0 8a40 	vmov.f32	s16, s0
 800ace8:	eef0 8a60 	vmov.f32	s17, s1
 800acec:	d10c      	bne.n	800ad08 <__ieee754_powf+0x38>
 800acee:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 800acf2:	0076      	lsls	r6, r6, #1
 800acf4:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 800acf8:	f240 8296 	bls.w	800b228 <__ieee754_powf+0x558>
 800acfc:	ee38 0a28 	vadd.f32	s0, s16, s17
 800ad00:	ecbd 8b02 	vpop	{d8}
 800ad04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad08:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800ad0c:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800ad10:	dcf4      	bgt.n	800acfc <__ieee754_powf+0x2c>
 800ad12:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800ad16:	dd08      	ble.n	800ad2a <__ieee754_powf+0x5a>
 800ad18:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 800ad1c:	d1ee      	bne.n	800acfc <__ieee754_powf+0x2c>
 800ad1e:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 800ad22:	0064      	lsls	r4, r4, #1
 800ad24:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 800ad28:	e7e6      	b.n	800acf8 <__ieee754_powf+0x28>
 800ad2a:	2e00      	cmp	r6, #0
 800ad2c:	da20      	bge.n	800ad70 <__ieee754_powf+0xa0>
 800ad2e:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 800ad32:	da2d      	bge.n	800ad90 <__ieee754_powf+0xc0>
 800ad34:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800ad38:	f2c0 827f 	blt.w	800b23a <__ieee754_powf+0x56a>
 800ad3c:	ea4f 53e8 	mov.w	r3, r8, asr #23
 800ad40:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800ad44:	fa48 f703 	asr.w	r7, r8, r3
 800ad48:	fa07 f303 	lsl.w	r3, r7, r3
 800ad4c:	4543      	cmp	r3, r8
 800ad4e:	f040 8274 	bne.w	800b23a <__ieee754_powf+0x56a>
 800ad52:	f007 0701 	and.w	r7, r7, #1
 800ad56:	f1c7 0702 	rsb	r7, r7, #2
 800ad5a:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800ad5e:	d11f      	bne.n	800ada0 <__ieee754_powf+0xd0>
 800ad60:	2c00      	cmp	r4, #0
 800ad62:	f280 8267 	bge.w	800b234 <__ieee754_powf+0x564>
 800ad66:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ad6a:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800ad6e:	e7c7      	b.n	800ad00 <__ieee754_powf+0x30>
 800ad70:	2700      	movs	r7, #0
 800ad72:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800ad76:	d1f0      	bne.n	800ad5a <__ieee754_powf+0x8a>
 800ad78:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 800ad7c:	f000 8254 	beq.w	800b228 <__ieee754_powf+0x558>
 800ad80:	dd08      	ble.n	800ad94 <__ieee754_powf+0xc4>
 800ad82:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 800b08c <__ieee754_powf+0x3bc>
 800ad86:	2c00      	cmp	r4, #0
 800ad88:	bfa8      	it	ge
 800ad8a:	eeb0 0a68 	vmovge.f32	s0, s17
 800ad8e:	e7b7      	b.n	800ad00 <__ieee754_powf+0x30>
 800ad90:	2702      	movs	r7, #2
 800ad92:	e7ee      	b.n	800ad72 <__ieee754_powf+0xa2>
 800ad94:	2c00      	cmp	r4, #0
 800ad96:	f280 824a 	bge.w	800b22e <__ieee754_powf+0x55e>
 800ad9a:	eeb1 0a68 	vneg.f32	s0, s17
 800ad9e:	e7af      	b.n	800ad00 <__ieee754_powf+0x30>
 800ada0:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800ada4:	d102      	bne.n	800adac <__ieee754_powf+0xdc>
 800ada6:	ee28 0a08 	vmul.f32	s0, s16, s16
 800adaa:	e7a9      	b.n	800ad00 <__ieee754_powf+0x30>
 800adac:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800adb0:	eeb0 0a48 	vmov.f32	s0, s16
 800adb4:	d107      	bne.n	800adc6 <__ieee754_powf+0xf6>
 800adb6:	2e00      	cmp	r6, #0
 800adb8:	db05      	blt.n	800adc6 <__ieee754_powf+0xf6>
 800adba:	ecbd 8b02 	vpop	{d8}
 800adbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800adc2:	f000 ba53 	b.w	800b26c <__ieee754_sqrtf>
 800adc6:	f000 fa77 	bl	800b2b8 <fabsf>
 800adca:	b125      	cbz	r5, 800add6 <__ieee754_powf+0x106>
 800adcc:	f026 4340 	bic.w	r3, r6, #3221225472	; 0xc0000000
 800add0:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800add4:	d116      	bne.n	800ae04 <__ieee754_powf+0x134>
 800add6:	2c00      	cmp	r4, #0
 800add8:	bfbc      	itt	lt
 800adda:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800adde:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800ade2:	2e00      	cmp	r6, #0
 800ade4:	da8c      	bge.n	800ad00 <__ieee754_powf+0x30>
 800ade6:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 800adea:	ea55 0307 	orrs.w	r3, r5, r7
 800adee:	d104      	bne.n	800adfa <__ieee754_powf+0x12a>
 800adf0:	ee70 7a40 	vsub.f32	s15, s0, s0
 800adf4:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800adf8:	e782      	b.n	800ad00 <__ieee754_powf+0x30>
 800adfa:	2f01      	cmp	r7, #1
 800adfc:	d180      	bne.n	800ad00 <__ieee754_powf+0x30>
 800adfe:	eeb1 0a40 	vneg.f32	s0, s0
 800ae02:	e77d      	b.n	800ad00 <__ieee754_powf+0x30>
 800ae04:	0ff0      	lsrs	r0, r6, #31
 800ae06:	3801      	subs	r0, #1
 800ae08:	ea57 0300 	orrs.w	r3, r7, r0
 800ae0c:	d104      	bne.n	800ae18 <__ieee754_powf+0x148>
 800ae0e:	ee38 8a48 	vsub.f32	s16, s16, s16
 800ae12:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800ae16:	e773      	b.n	800ad00 <__ieee754_powf+0x30>
 800ae18:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 800ae1c:	dd74      	ble.n	800af08 <__ieee754_powf+0x238>
 800ae1e:	4b9c      	ldr	r3, [pc, #624]	; (800b090 <__ieee754_powf+0x3c0>)
 800ae20:	429d      	cmp	r5, r3
 800ae22:	dc08      	bgt.n	800ae36 <__ieee754_powf+0x166>
 800ae24:	2c00      	cmp	r4, #0
 800ae26:	da0b      	bge.n	800ae40 <__ieee754_powf+0x170>
 800ae28:	2000      	movs	r0, #0
 800ae2a:	ecbd 8b02 	vpop	{d8}
 800ae2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae32:	f000 ba3b 	b.w	800b2ac <__math_oflowf>
 800ae36:	4b97      	ldr	r3, [pc, #604]	; (800b094 <__ieee754_powf+0x3c4>)
 800ae38:	429d      	cmp	r5, r3
 800ae3a:	dd08      	ble.n	800ae4e <__ieee754_powf+0x17e>
 800ae3c:	2c00      	cmp	r4, #0
 800ae3e:	dcf3      	bgt.n	800ae28 <__ieee754_powf+0x158>
 800ae40:	2000      	movs	r0, #0
 800ae42:	ecbd 8b02 	vpop	{d8}
 800ae46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae4a:	f000 ba29 	b.w	800b2a0 <__math_uflowf>
 800ae4e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ae52:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ae56:	eddf 6a90 	vldr	s13, [pc, #576]	; 800b098 <__ieee754_powf+0x3c8>
 800ae5a:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800ae5e:	eee0 6a67 	vfms.f32	s13, s0, s15
 800ae62:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800ae66:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800ae6a:	ee20 7a00 	vmul.f32	s14, s0, s0
 800ae6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae72:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800b09c <__ieee754_powf+0x3cc>
 800ae76:	ee67 7a67 	vnmul.f32	s15, s14, s15
 800ae7a:	ed9f 7a89 	vldr	s14, [pc, #548]	; 800b0a0 <__ieee754_powf+0x3d0>
 800ae7e:	eee0 7a07 	vfma.f32	s15, s0, s14
 800ae82:	ed9f 7a88 	vldr	s14, [pc, #544]	; 800b0a4 <__ieee754_powf+0x3d4>
 800ae86:	eef0 6a67 	vmov.f32	s13, s15
 800ae8a:	eee0 6a07 	vfma.f32	s13, s0, s14
 800ae8e:	ee16 3a90 	vmov	r3, s13
 800ae92:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800ae96:	f023 030f 	bic.w	r3, r3, #15
 800ae9a:	ee00 3a90 	vmov	s1, r3
 800ae9e:	eee0 0a47 	vfms.f32	s1, s0, s14
 800aea2:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800aea6:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 800aeaa:	f024 040f 	bic.w	r4, r4, #15
 800aeae:	ee07 4a10 	vmov	s14, r4
 800aeb2:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800aeb6:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800aeba:	ee07 3a90 	vmov	s15, r3
 800aebe:	eee7 0a27 	vfma.f32	s1, s14, s15
 800aec2:	3f01      	subs	r7, #1
 800aec4:	ea57 0200 	orrs.w	r2, r7, r0
 800aec8:	ee07 4a10 	vmov	s14, r4
 800aecc:	ee67 7a87 	vmul.f32	s15, s15, s14
 800aed0:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800aed4:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800aed8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800aedc:	ee17 4a10 	vmov	r4, s14
 800aee0:	bf08      	it	eq
 800aee2:	eeb0 8a40 	vmoveq.f32	s16, s0
 800aee6:	2c00      	cmp	r4, #0
 800aee8:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800aeec:	f340 817e 	ble.w	800b1ec <__ieee754_powf+0x51c>
 800aef0:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800aef4:	f340 80f8 	ble.w	800b0e8 <__ieee754_powf+0x418>
 800aef8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800aefc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af00:	bf4c      	ite	mi
 800af02:	2001      	movmi	r0, #1
 800af04:	2000      	movpl	r0, #0
 800af06:	e790      	b.n	800ae2a <__ieee754_powf+0x15a>
 800af08:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 800af0c:	bf01      	itttt	eq
 800af0e:	eddf 7a66 	vldreq	s15, [pc, #408]	; 800b0a8 <__ieee754_powf+0x3d8>
 800af12:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800af16:	f06f 0217 	mvneq.w	r2, #23
 800af1a:	ee17 5a90 	vmoveq	r5, s15
 800af1e:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800af22:	bf18      	it	ne
 800af24:	2200      	movne	r2, #0
 800af26:	3b7f      	subs	r3, #127	; 0x7f
 800af28:	4413      	add	r3, r2
 800af2a:	4a60      	ldr	r2, [pc, #384]	; (800b0ac <__ieee754_powf+0x3dc>)
 800af2c:	f3c5 0516 	ubfx	r5, r5, #0, #23
 800af30:	4295      	cmp	r5, r2
 800af32:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 800af36:	dd06      	ble.n	800af46 <__ieee754_powf+0x276>
 800af38:	4a5d      	ldr	r2, [pc, #372]	; (800b0b0 <__ieee754_powf+0x3e0>)
 800af3a:	4295      	cmp	r5, r2
 800af3c:	f340 80a4 	ble.w	800b088 <__ieee754_powf+0x3b8>
 800af40:	3301      	adds	r3, #1
 800af42:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800af46:	2500      	movs	r5, #0
 800af48:	4a5a      	ldr	r2, [pc, #360]	; (800b0b4 <__ieee754_powf+0x3e4>)
 800af4a:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 800af4e:	ee07 1a90 	vmov	s15, r1
 800af52:	ed92 7a00 	vldr	s14, [r2]
 800af56:	4a58      	ldr	r2, [pc, #352]	; (800b0b8 <__ieee754_powf+0x3e8>)
 800af58:	ee37 6a27 	vadd.f32	s12, s14, s15
 800af5c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800af60:	eec5 6a86 	vdiv.f32	s13, s11, s12
 800af64:	1049      	asrs	r1, r1, #1
 800af66:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800af6a:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800af6e:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 800af72:	ee37 5ac7 	vsub.f32	s10, s15, s14
 800af76:	ee06 1a10 	vmov	s12, r1
 800af7a:	ee65 4a26 	vmul.f32	s9, s10, s13
 800af7e:	ee36 7a47 	vsub.f32	s14, s12, s14
 800af82:	ee14 6a90 	vmov	r6, s9
 800af86:	4016      	ands	r6, r2
 800af88:	ee05 6a90 	vmov	s11, r6
 800af8c:	eea5 5ac6 	vfms.f32	s10, s11, s12
 800af90:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800af94:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800b0bc <__ieee754_powf+0x3ec>
 800af98:	eea5 5ae7 	vfms.f32	s10, s11, s15
 800af9c:	ee64 7aa4 	vmul.f32	s15, s9, s9
 800afa0:	ee25 6a26 	vmul.f32	s12, s10, s13
 800afa4:	eddf 6a46 	vldr	s13, [pc, #280]	; 800b0c0 <__ieee754_powf+0x3f0>
 800afa8:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800afac:	eddf 6a45 	vldr	s13, [pc, #276]	; 800b0c4 <__ieee754_powf+0x3f4>
 800afb0:	eee7 6a27 	vfma.f32	s13, s14, s15
 800afb4:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800b098 <__ieee754_powf+0x3c8>
 800afb8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800afbc:	eddf 6a42 	vldr	s13, [pc, #264]	; 800b0c8 <__ieee754_powf+0x3f8>
 800afc0:	eee7 6a27 	vfma.f32	s13, s14, s15
 800afc4:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800b0cc <__ieee754_powf+0x3fc>
 800afc8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800afcc:	ee74 6aa5 	vadd.f32	s13, s9, s11
 800afd0:	ee27 5aa7 	vmul.f32	s10, s15, s15
 800afd4:	ee66 6a86 	vmul.f32	s13, s13, s12
 800afd8:	eee5 6a07 	vfma.f32	s13, s10, s14
 800afdc:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 800afe0:	eef0 7a45 	vmov.f32	s15, s10
 800afe4:	eee5 7aa5 	vfma.f32	s15, s11, s11
 800afe8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800afec:	ee17 1a90 	vmov	r1, s15
 800aff0:	4011      	ands	r1, r2
 800aff2:	ee07 1a90 	vmov	s15, r1
 800aff6:	ee37 7ac5 	vsub.f32	s14, s15, s10
 800affa:	eea5 7ae5 	vfms.f32	s14, s11, s11
 800affe:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800b002:	ee27 7a24 	vmul.f32	s14, s14, s9
 800b006:	eea6 7a27 	vfma.f32	s14, s12, s15
 800b00a:	eeb0 6a47 	vmov.f32	s12, s14
 800b00e:	eea5 6aa7 	vfma.f32	s12, s11, s15
 800b012:	ee16 1a10 	vmov	r1, s12
 800b016:	4011      	ands	r1, r2
 800b018:	ee06 1a90 	vmov	s13, r1
 800b01c:	eee5 6ae7 	vfms.f32	s13, s11, s15
 800b020:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800b0d0 <__ieee754_powf+0x400>
 800b024:	eddf 5a2b 	vldr	s11, [pc, #172]	; 800b0d4 <__ieee754_powf+0x404>
 800b028:	ee37 7a66 	vsub.f32	s14, s14, s13
 800b02c:	ee06 1a10 	vmov	s12, r1
 800b030:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b034:	eddf 7a28 	vldr	s15, [pc, #160]	; 800b0d8 <__ieee754_powf+0x408>
 800b038:	4928      	ldr	r1, [pc, #160]	; (800b0dc <__ieee754_powf+0x40c>)
 800b03a:	eea6 7a27 	vfma.f32	s14, s12, s15
 800b03e:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 800b042:	edd1 7a00 	vldr	s15, [r1]
 800b046:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b04a:	ee07 3a90 	vmov	s15, r3
 800b04e:	4b24      	ldr	r3, [pc, #144]	; (800b0e0 <__ieee754_powf+0x410>)
 800b050:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800b054:	eef0 7a47 	vmov.f32	s15, s14
 800b058:	eee6 7a25 	vfma.f32	s15, s12, s11
 800b05c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800b060:	edd5 0a00 	vldr	s1, [r5]
 800b064:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800b068:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b06c:	ee17 3a90 	vmov	r3, s15
 800b070:	4013      	ands	r3, r2
 800b072:	ee07 3a90 	vmov	s15, r3
 800b076:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800b07a:	ee76 6ae0 	vsub.f32	s13, s13, s1
 800b07e:	eee6 6a65 	vfms.f32	s13, s12, s11
 800b082:	ee77 7a66 	vsub.f32	s15, s14, s13
 800b086:	e70e      	b.n	800aea6 <__ieee754_powf+0x1d6>
 800b088:	2501      	movs	r5, #1
 800b08a:	e75d      	b.n	800af48 <__ieee754_powf+0x278>
 800b08c:	00000000 	.word	0x00000000
 800b090:	3f7ffff3 	.word	0x3f7ffff3
 800b094:	3f800007 	.word	0x3f800007
 800b098:	3eaaaaab 	.word	0x3eaaaaab
 800b09c:	3fb8aa3b 	.word	0x3fb8aa3b
 800b0a0:	36eca570 	.word	0x36eca570
 800b0a4:	3fb8aa00 	.word	0x3fb8aa00
 800b0a8:	4b800000 	.word	0x4b800000
 800b0ac:	001cc471 	.word	0x001cc471
 800b0b0:	005db3d6 	.word	0x005db3d6
 800b0b4:	0800b8bc 	.word	0x0800b8bc
 800b0b8:	fffff000 	.word	0xfffff000
 800b0bc:	3e6c3255 	.word	0x3e6c3255
 800b0c0:	3e53f142 	.word	0x3e53f142
 800b0c4:	3e8ba305 	.word	0x3e8ba305
 800b0c8:	3edb6db7 	.word	0x3edb6db7
 800b0cc:	3f19999a 	.word	0x3f19999a
 800b0d0:	3f76384f 	.word	0x3f76384f
 800b0d4:	3f763800 	.word	0x3f763800
 800b0d8:	369dc3a0 	.word	0x369dc3a0
 800b0dc:	0800b8cc 	.word	0x0800b8cc
 800b0e0:	0800b8c4 	.word	0x0800b8c4
 800b0e4:	3338aa3c 	.word	0x3338aa3c
 800b0e8:	f040 8095 	bne.w	800b216 <__ieee754_powf+0x546>
 800b0ec:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800b0e4 <__ieee754_powf+0x414>
 800b0f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b0f4:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800b0f8:	eef4 6ac7 	vcmpe.f32	s13, s14
 800b0fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b100:	f73f aefa 	bgt.w	800aef8 <__ieee754_powf+0x228>
 800b104:	15db      	asrs	r3, r3, #23
 800b106:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 800b10a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b10e:	4103      	asrs	r3, r0
 800b110:	4423      	add	r3, r4
 800b112:	494b      	ldr	r1, [pc, #300]	; (800b240 <__ieee754_powf+0x570>)
 800b114:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800b118:	3a7f      	subs	r2, #127	; 0x7f
 800b11a:	4111      	asrs	r1, r2
 800b11c:	ea23 0101 	bic.w	r1, r3, r1
 800b120:	ee07 1a10 	vmov	s14, r1
 800b124:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800b128:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800b12c:	f1c2 0217 	rsb	r2, r2, #23
 800b130:	4110      	asrs	r0, r2
 800b132:	2c00      	cmp	r4, #0
 800b134:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b138:	bfb8      	it	lt
 800b13a:	4240      	neglt	r0, r0
 800b13c:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800b140:	ed9f 0a40 	vldr	s0, [pc, #256]	; 800b244 <__ieee754_powf+0x574>
 800b144:	eddf 6a40 	vldr	s13, [pc, #256]	; 800b248 <__ieee754_powf+0x578>
 800b148:	ee17 3a10 	vmov	r3, s14
 800b14c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800b150:	f023 030f 	bic.w	r3, r3, #15
 800b154:	ee07 3a10 	vmov	s14, r3
 800b158:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b15c:	ee27 0a00 	vmul.f32	s0, s14, s0
 800b160:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800b164:	eddf 7a39 	vldr	s15, [pc, #228]	; 800b24c <__ieee754_powf+0x57c>
 800b168:	eea0 0aa7 	vfma.f32	s0, s1, s15
 800b16c:	eef0 7a40 	vmov.f32	s15, s0
 800b170:	eee7 7a26 	vfma.f32	s15, s14, s13
 800b174:	eeb0 6a67 	vmov.f32	s12, s15
 800b178:	eea7 6a66 	vfms.f32	s12, s14, s13
 800b17c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800b180:	ee30 0a46 	vsub.f32	s0, s0, s12
 800b184:	eddf 6a32 	vldr	s13, [pc, #200]	; 800b250 <__ieee754_powf+0x580>
 800b188:	ed9f 6a32 	vldr	s12, [pc, #200]	; 800b254 <__ieee754_powf+0x584>
 800b18c:	eee7 6a06 	vfma.f32	s13, s14, s12
 800b190:	ed9f 6a31 	vldr	s12, [pc, #196]	; 800b258 <__ieee754_powf+0x588>
 800b194:	eea6 6a87 	vfma.f32	s12, s13, s14
 800b198:	eddf 6a30 	vldr	s13, [pc, #192]	; 800b25c <__ieee754_powf+0x58c>
 800b19c:	eee6 6a07 	vfma.f32	s13, s12, s14
 800b1a0:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 800b260 <__ieee754_powf+0x590>
 800b1a4:	eea6 6a87 	vfma.f32	s12, s13, s14
 800b1a8:	eef0 6a67 	vmov.f32	s13, s15
 800b1ac:	eee6 6a47 	vfms.f32	s13, s12, s14
 800b1b0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800b1b4:	ee27 6aa6 	vmul.f32	s12, s15, s13
 800b1b8:	ee76 6ac7 	vsub.f32	s13, s13, s14
 800b1bc:	eea7 0a80 	vfma.f32	s0, s15, s0
 800b1c0:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800b1c4:	ee37 0a40 	vsub.f32	s0, s14, s0
 800b1c8:	ee70 7a67 	vsub.f32	s15, s0, s15
 800b1cc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800b1d0:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b1d4:	ee10 3a10 	vmov	r3, s0
 800b1d8:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800b1dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b1e0:	da1f      	bge.n	800b222 <__ieee754_powf+0x552>
 800b1e2:	f000 f87d 	bl	800b2e0 <scalbnf>
 800b1e6:	ee20 0a08 	vmul.f32	s0, s0, s16
 800b1ea:	e589      	b.n	800ad00 <__ieee754_powf+0x30>
 800b1ec:	4a1d      	ldr	r2, [pc, #116]	; (800b264 <__ieee754_powf+0x594>)
 800b1ee:	4293      	cmp	r3, r2
 800b1f0:	dd07      	ble.n	800b202 <__ieee754_powf+0x532>
 800b1f2:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800b1f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1fa:	bf4c      	ite	mi
 800b1fc:	2001      	movmi	r0, #1
 800b1fe:	2000      	movpl	r0, #0
 800b200:	e61f      	b.n	800ae42 <__ieee754_powf+0x172>
 800b202:	d108      	bne.n	800b216 <__ieee754_powf+0x546>
 800b204:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b208:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800b20c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b210:	f6ff af78 	blt.w	800b104 <__ieee754_powf+0x434>
 800b214:	e7ed      	b.n	800b1f2 <__ieee754_powf+0x522>
 800b216:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800b21a:	f73f af73 	bgt.w	800b104 <__ieee754_powf+0x434>
 800b21e:	2000      	movs	r0, #0
 800b220:	e78c      	b.n	800b13c <__ieee754_powf+0x46c>
 800b222:	ee00 3a10 	vmov	s0, r3
 800b226:	e7de      	b.n	800b1e6 <__ieee754_powf+0x516>
 800b228:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800b22c:	e568      	b.n	800ad00 <__ieee754_powf+0x30>
 800b22e:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800b268 <__ieee754_powf+0x598>
 800b232:	e565      	b.n	800ad00 <__ieee754_powf+0x30>
 800b234:	eeb0 0a48 	vmov.f32	s0, s16
 800b238:	e562      	b.n	800ad00 <__ieee754_powf+0x30>
 800b23a:	2700      	movs	r7, #0
 800b23c:	e58d      	b.n	800ad5a <__ieee754_powf+0x8a>
 800b23e:	bf00      	nop
 800b240:	007fffff 	.word	0x007fffff
 800b244:	35bfbe8c 	.word	0x35bfbe8c
 800b248:	3f317200 	.word	0x3f317200
 800b24c:	3f317218 	.word	0x3f317218
 800b250:	b5ddea0e 	.word	0xb5ddea0e
 800b254:	3331bb4c 	.word	0x3331bb4c
 800b258:	388ab355 	.word	0x388ab355
 800b25c:	bb360b61 	.word	0xbb360b61
 800b260:	3e2aaaab 	.word	0x3e2aaaab
 800b264:	43160000 	.word	0x43160000
 800b268:	00000000 	.word	0x00000000

0800b26c <__ieee754_sqrtf>:
 800b26c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800b270:	4770      	bx	lr

0800b272 <with_errnof>:
 800b272:	b513      	push	{r0, r1, r4, lr}
 800b274:	4604      	mov	r4, r0
 800b276:	ed8d 0a01 	vstr	s0, [sp, #4]
 800b27a:	f7fb f82f 	bl	80062dc <__errno>
 800b27e:	ed9d 0a01 	vldr	s0, [sp, #4]
 800b282:	6004      	str	r4, [r0, #0]
 800b284:	b002      	add	sp, #8
 800b286:	bd10      	pop	{r4, pc}

0800b288 <xflowf>:
 800b288:	b130      	cbz	r0, 800b298 <xflowf+0x10>
 800b28a:	eef1 7a40 	vneg.f32	s15, s0
 800b28e:	ee27 0a80 	vmul.f32	s0, s15, s0
 800b292:	2022      	movs	r0, #34	; 0x22
 800b294:	f7ff bfed 	b.w	800b272 <with_errnof>
 800b298:	eef0 7a40 	vmov.f32	s15, s0
 800b29c:	e7f7      	b.n	800b28e <xflowf+0x6>
	...

0800b2a0 <__math_uflowf>:
 800b2a0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b2a8 <__math_uflowf+0x8>
 800b2a4:	f7ff bff0 	b.w	800b288 <xflowf>
 800b2a8:	10000000 	.word	0x10000000

0800b2ac <__math_oflowf>:
 800b2ac:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b2b4 <__math_oflowf+0x8>
 800b2b0:	f7ff bfea 	b.w	800b288 <xflowf>
 800b2b4:	70000000 	.word	0x70000000

0800b2b8 <fabsf>:
 800b2b8:	ee10 3a10 	vmov	r3, s0
 800b2bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b2c0:	ee00 3a10 	vmov	s0, r3
 800b2c4:	4770      	bx	lr

0800b2c6 <finitef>:
 800b2c6:	b082      	sub	sp, #8
 800b2c8:	ed8d 0a01 	vstr	s0, [sp, #4]
 800b2cc:	9801      	ldr	r0, [sp, #4]
 800b2ce:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800b2d2:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800b2d6:	bfac      	ite	ge
 800b2d8:	2000      	movge	r0, #0
 800b2da:	2001      	movlt	r0, #1
 800b2dc:	b002      	add	sp, #8
 800b2de:	4770      	bx	lr

0800b2e0 <scalbnf>:
 800b2e0:	ee10 3a10 	vmov	r3, s0
 800b2e4:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800b2e8:	d025      	beq.n	800b336 <scalbnf+0x56>
 800b2ea:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800b2ee:	d302      	bcc.n	800b2f6 <scalbnf+0x16>
 800b2f0:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b2f4:	4770      	bx	lr
 800b2f6:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800b2fa:	d122      	bne.n	800b342 <scalbnf+0x62>
 800b2fc:	4b2a      	ldr	r3, [pc, #168]	; (800b3a8 <scalbnf+0xc8>)
 800b2fe:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800b3ac <scalbnf+0xcc>
 800b302:	4298      	cmp	r0, r3
 800b304:	ee20 0a27 	vmul.f32	s0, s0, s15
 800b308:	db16      	blt.n	800b338 <scalbnf+0x58>
 800b30a:	ee10 3a10 	vmov	r3, s0
 800b30e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800b312:	3a19      	subs	r2, #25
 800b314:	4402      	add	r2, r0
 800b316:	2afe      	cmp	r2, #254	; 0xfe
 800b318:	dd15      	ble.n	800b346 <scalbnf+0x66>
 800b31a:	ee10 3a10 	vmov	r3, s0
 800b31e:	eddf 7a24 	vldr	s15, [pc, #144]	; 800b3b0 <scalbnf+0xd0>
 800b322:	eddf 6a24 	vldr	s13, [pc, #144]	; 800b3b4 <scalbnf+0xd4>
 800b326:	2b00      	cmp	r3, #0
 800b328:	eeb0 7a67 	vmov.f32	s14, s15
 800b32c:	bfb8      	it	lt
 800b32e:	eef0 7a66 	vmovlt.f32	s15, s13
 800b332:	ee27 0a27 	vmul.f32	s0, s14, s15
 800b336:	4770      	bx	lr
 800b338:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800b3b8 <scalbnf+0xd8>
 800b33c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800b340:	4770      	bx	lr
 800b342:	0dd2      	lsrs	r2, r2, #23
 800b344:	e7e6      	b.n	800b314 <scalbnf+0x34>
 800b346:	2a00      	cmp	r2, #0
 800b348:	dd06      	ble.n	800b358 <scalbnf+0x78>
 800b34a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b34e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800b352:	ee00 3a10 	vmov	s0, r3
 800b356:	4770      	bx	lr
 800b358:	f112 0f16 	cmn.w	r2, #22
 800b35c:	da1a      	bge.n	800b394 <scalbnf+0xb4>
 800b35e:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b362:	4298      	cmp	r0, r3
 800b364:	ee10 3a10 	vmov	r3, s0
 800b368:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b36c:	dd0a      	ble.n	800b384 <scalbnf+0xa4>
 800b36e:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800b3b0 <scalbnf+0xd0>
 800b372:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800b3b4 <scalbnf+0xd4>
 800b376:	eef0 7a40 	vmov.f32	s15, s0
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	bf18      	it	ne
 800b37e:	eeb0 0a47 	vmovne.f32	s0, s14
 800b382:	e7db      	b.n	800b33c <scalbnf+0x5c>
 800b384:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800b3b8 <scalbnf+0xd8>
 800b388:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800b3bc <scalbnf+0xdc>
 800b38c:	eef0 7a40 	vmov.f32	s15, s0
 800b390:	2b00      	cmp	r3, #0
 800b392:	e7f3      	b.n	800b37c <scalbnf+0x9c>
 800b394:	3219      	adds	r2, #25
 800b396:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b39a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800b39e:	eddf 7a08 	vldr	s15, [pc, #32]	; 800b3c0 <scalbnf+0xe0>
 800b3a2:	ee07 3a10 	vmov	s14, r3
 800b3a6:	e7c4      	b.n	800b332 <scalbnf+0x52>
 800b3a8:	ffff3cb0 	.word	0xffff3cb0
 800b3ac:	4c000000 	.word	0x4c000000
 800b3b0:	7149f2ca 	.word	0x7149f2ca
 800b3b4:	f149f2ca 	.word	0xf149f2ca
 800b3b8:	0da24260 	.word	0x0da24260
 800b3bc:	8da24260 	.word	0x8da24260
 800b3c0:	33000000 	.word	0x33000000

0800b3c4 <_init>:
 800b3c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3c6:	bf00      	nop
 800b3c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3ca:	bc08      	pop	{r3}
 800b3cc:	469e      	mov	lr, r3
 800b3ce:	4770      	bx	lr

0800b3d0 <_fini>:
 800b3d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3d2:	bf00      	nop
 800b3d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3d6:	bc08      	pop	{r3}
 800b3d8:	469e      	mov	lr, r3
 800b3da:	4770      	bx	lr
